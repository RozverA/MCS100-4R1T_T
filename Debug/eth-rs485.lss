
eth-rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008ca4  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000cca4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ab4  20000434  0000d0d8  00010434  2**2
                  ALLOC
  3 .stack        00002000  20003ee8  00010b8c  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000473a3  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034c6  00000000  00000000  00057858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001208  00000000  00000000  0005ad1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0005bf26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001704b  00000000  00000000  0005c166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a70d  00000000  00000000  000731b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00071ac7  00000000  00000000  0007d8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001054  00000000  00000000  000ef388  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000f03dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	e8 5e 00 20 15 41 00 00 0d 42 00 00 0d 42 00 00     .^. .A...B...B..
	...
    402c:	0d 42 00 00 00 00 00 00 00 00 00 00 0d 42 00 00     .B...........B..
    403c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    404c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    405c:	0d 42 00 00 0d 42 00 00 81 96 00 00 91 96 00 00     .B...B..........
    406c:	71 96 00 00 61 96 00 00 0d 42 00 00 91 7c 00 00     q...a....B...|..
    407c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 21 80 00 00     .B...B...B..!...
    408c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    409c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
	...

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000434 	.word	0x20000434
    40d4:	00000000 	.word	0x00000000
    40d8:	0000cca4 	.word	0x0000cca4

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000438 	.word	0x20000438
    4108:	0000cca4 	.word	0x0000cca4
    410c:	0000cca4 	.word	0x0000cca4
    4110:	00000000 	.word	0x00000000

00004114 <Reset_Handler>:
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	4b2f      	ldr	r3, [pc, #188]	; (41d8 <Reset_Handler+0xc4>)
    411c:	607b      	str	r3, [r7, #4]
    411e:	4b2f      	ldr	r3, [pc, #188]	; (41dc <Reset_Handler+0xc8>)
    4120:	603b      	str	r3, [r7, #0]
    4122:	687a      	ldr	r2, [r7, #4]
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d00c      	beq.n	4144 <Reset_Handler+0x30>
    412a:	e007      	b.n	413c <Reset_Handler+0x28>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	1d1a      	adds	r2, r3, #4
    4130:	603a      	str	r2, [r7, #0]
    4132:	687a      	ldr	r2, [r7, #4]
    4134:	1d11      	adds	r1, r2, #4
    4136:	6079      	str	r1, [r7, #4]
    4138:	6812      	ldr	r2, [r2, #0]
    413a:	601a      	str	r2, [r3, #0]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	4b28      	ldr	r3, [pc, #160]	; (41e0 <Reset_Handler+0xcc>)
    4140:	429a      	cmp	r2, r3
    4142:	d3f3      	bcc.n	412c <Reset_Handler+0x18>
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <Reset_Handler+0xd0>)
    4146:	603b      	str	r3, [r7, #0]
    4148:	e004      	b.n	4154 <Reset_Handler+0x40>
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	1d1a      	adds	r2, r3, #4
    414e:	603a      	str	r2, [r7, #0]
    4150:	2200      	movs	r2, #0
    4152:	601a      	str	r2, [r3, #0]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	4b24      	ldr	r3, [pc, #144]	; (41e8 <Reset_Handler+0xd4>)
    4158:	429a      	cmp	r2, r3
    415a:	d3f6      	bcc.n	414a <Reset_Handler+0x36>
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <Reset_Handler+0xd8>)
    415e:	607b      	str	r3, [r7, #4]
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <Reset_Handler+0xdc>)
    4162:	687a      	ldr	r2, [r7, #4]
    4164:	21ff      	movs	r1, #255	; 0xff
    4166:	438a      	bics	r2, r1
    4168:	609a      	str	r2, [r3, #8]
    416a:	4a22      	ldr	r2, [pc, #136]	; (41f4 <Reset_Handler+0xe0>)
    416c:	2390      	movs	r3, #144	; 0x90
    416e:	005b      	lsls	r3, r3, #1
    4170:	2102      	movs	r1, #2
    4172:	50d1      	str	r1, [r2, r3]
    4174:	4a20      	ldr	r2, [pc, #128]	; (41f8 <Reset_Handler+0xe4>)
    4176:	78d3      	ldrb	r3, [r2, #3]
    4178:	2103      	movs	r1, #3
    417a:	438b      	bics	r3, r1
    417c:	1c19      	adds	r1, r3, #0
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	70d3      	strb	r3, [r2, #3]
    4184:	4a1c      	ldr	r2, [pc, #112]	; (41f8 <Reset_Handler+0xe4>)
    4186:	78d3      	ldrb	r3, [r2, #3]
    4188:	210c      	movs	r1, #12
    418a:	438b      	bics	r3, r1
    418c:	1c19      	adds	r1, r3, #0
    418e:	2308      	movs	r3, #8
    4190:	430b      	orrs	r3, r1
    4192:	70d3      	strb	r3, [r2, #3]
    4194:	4a19      	ldr	r2, [pc, #100]	; (41fc <Reset_Handler+0xe8>)
    4196:	7b93      	ldrb	r3, [r2, #14]
    4198:	2130      	movs	r1, #48	; 0x30
    419a:	438b      	bics	r3, r1
    419c:	1c19      	adds	r1, r3, #0
    419e:	2320      	movs	r3, #32
    41a0:	430b      	orrs	r3, r1
    41a2:	7393      	strb	r3, [r2, #14]
    41a4:	4a15      	ldr	r2, [pc, #84]	; (41fc <Reset_Handler+0xe8>)
    41a6:	7b93      	ldrb	r3, [r2, #14]
    41a8:	210c      	movs	r1, #12
    41aa:	438b      	bics	r3, r1
    41ac:	1c19      	adds	r1, r3, #0
    41ae:	2308      	movs	r3, #8
    41b0:	430b      	orrs	r3, r1
    41b2:	7393      	strb	r3, [r2, #14]
    41b4:	4a11      	ldr	r2, [pc, #68]	; (41fc <Reset_Handler+0xe8>)
    41b6:	7b93      	ldrb	r3, [r2, #14]
    41b8:	2103      	movs	r1, #3
    41ba:	438b      	bics	r3, r1
    41bc:	1c19      	adds	r1, r3, #0
    41be:	2302      	movs	r3, #2
    41c0:	430b      	orrs	r3, r1
    41c2:	7393      	strb	r3, [r2, #14]
    41c4:	4a0e      	ldr	r2, [pc, #56]	; (4200 <Reset_Handler+0xec>)
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	2180      	movs	r1, #128	; 0x80
    41ca:	430b      	orrs	r3, r1
    41cc:	6053      	str	r3, [r2, #4]
    41ce:	4b0d      	ldr	r3, [pc, #52]	; (4204 <Reset_Handler+0xf0>)
    41d0:	4798      	blx	r3
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <Reset_Handler+0xf4>)
    41d4:	4798      	blx	r3
    41d6:	e7fe      	b.n	41d6 <Reset_Handler+0xc2>
    41d8:	0000cca4 	.word	0x0000cca4
    41dc:	20000000 	.word	0x20000000
    41e0:	20000434 	.word	0x20000434
    41e4:	20000434 	.word	0x20000434
    41e8:	20003ee8 	.word	0x20003ee8
    41ec:	00004000 	.word	0x00004000
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	41007000 	.word	0x41007000
    41f8:	41005000 	.word	0x41005000
    41fc:	41004800 	.word	0x41004800
    4200:	41004000 	.word	0x41004000
    4204:	0000c7dd 	.word	0x0000c7dd
    4208:	00007231 	.word	0x00007231

0000420c <Dummy_Handler>:
    420c:	b580      	push	{r7, lr}
    420e:	af00      	add	r7, sp, #0
    4210:	e7fe      	b.n	4210 <Dummy_Handler+0x4>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <acc>:
#include "def.h"

void acc(BYTE cmd)//command(читать, записать, сбросить)
{
    4214:	b5b0      	push	{r4, r5, r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	0002      	movs	r2, r0
    421c:	1dfb      	adds	r3, r7, #7
    421e:	701a      	strb	r2, [r3, #0]
	if (sizeof(ACCOUNTS) != 256) {cmd = 109;}
	switch(cmd)
    4220:	1dfb      	adds	r3, r7, #7
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	2b01      	cmp	r3, #1
    4226:	d00b      	beq.n	4240 <acc+0x2c>
    4228:	2b02      	cmp	r3, #2
    422a:	d01e      	beq.n	426a <acc+0x56>
    422c:	2b00      	cmp	r3, #0
    422e:	d174      	bne.n	431a <acc+0x106>
	{
		case READ:
			memcpy(&accnts.accnt[0].login[0], ACCOUNT_PLACE, sizeof(ACCOUNTS));
    4230:	2380      	movs	r3, #128	; 0x80
    4232:	005a      	lsls	r2, r3, #1
    4234:	4948      	ldr	r1, [pc, #288]	; (4358 <acc+0x144>)
    4236:	4b49      	ldr	r3, [pc, #292]	; (435c <acc+0x148>)
    4238:	0018      	movs	r0, r3
    423a:	4b49      	ldr	r3, [pc, #292]	; (4360 <acc+0x14c>)
    423c:	4798      	blx	r3
		break;
    423e:	e087      	b.n	4350 <acc+0x13c>
		case WRITE:
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    4240:	2380      	movs	r3, #128	; 0x80
    4242:	005b      	lsls	r3, r3, #1
    4244:	4a44      	ldr	r2, [pc, #272]	; (4358 <acc+0x144>)
    4246:	0019      	movs	r1, r3
    4248:	0010      	movs	r0, r2
    424a:	4b46      	ldr	r3, [pc, #280]	; (4364 <acc+0x150>)
    424c:	4798      	blx	r3
    424e:	1e03      	subs	r3, r0, #0
    4250:	d103      	bne.n	425a <acc+0x46>
    4252:	4b41      	ldr	r3, [pc, #260]	; (4358 <acc+0x144>)
    4254:	0018      	movs	r0, r3
    4256:	4b44      	ldr	r3, [pc, #272]	; (4368 <acc+0x154>)
    4258:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0], sizeof(ACCOUNTS));
    425a:	2380      	movs	r3, #128	; 0x80
    425c:	005a      	lsls	r2, r3, #1
    425e:	4b3f      	ldr	r3, [pc, #252]	; (435c <acc+0x148>)
    4260:	483d      	ldr	r0, [pc, #244]	; (4358 <acc+0x144>)
    4262:	0019      	movs	r1, r3
    4264:	4b41      	ldr	r3, [pc, #260]	; (436c <acc+0x158>)
    4266:	4798      	blx	r3
		break;
    4268:	e072      	b.n	4350 <acc+0x13c>
		case DROP:

			memset(&accnts.accnt[0].login[0], 0, 64);
    426a:	4b3c      	ldr	r3, [pc, #240]	; (435c <acc+0x148>)
    426c:	2240      	movs	r2, #64	; 0x40
    426e:	2100      	movs	r1, #0
    4270:	0018      	movs	r0, r3
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <acc+0x15c>)
    4274:	4798      	blx	r3
			memcpy(&accnts.accnt[0].login[0], ADMIN, sizeof(ADMIN));
    4276:	493f      	ldr	r1, [pc, #252]	; (4374 <acc+0x160>)
    4278:	4b38      	ldr	r3, [pc, #224]	; (435c <acc+0x148>)
    427a:	2206      	movs	r2, #6
    427c:	0018      	movs	r0, r3
    427e:	4b38      	ldr	r3, [pc, #224]	; (4360 <acc+0x14c>)
    4280:	4798      	blx	r3
			memcpy(&accnts.accnt[0].password[0], ADMIN, sizeof(ADMIN));
    4282:	493c      	ldr	r1, [pc, #240]	; (4374 <acc+0x160>)
    4284:	4b3c      	ldr	r3, [pc, #240]	; (4378 <acc+0x164>)
    4286:	2206      	movs	r2, #6
    4288:	0018      	movs	r0, r3
    428a:	4b35      	ldr	r3, [pc, #212]	; (4360 <acc+0x14c>)
    428c:	4798      	blx	r3

			memset(&accnts.accnt[1].login[0], 0, 64);
    428e:	4b3b      	ldr	r3, [pc, #236]	; (437c <acc+0x168>)
    4290:	2240      	movs	r2, #64	; 0x40
    4292:	2100      	movs	r1, #0
    4294:	0018      	movs	r0, r3
    4296:	4b36      	ldr	r3, [pc, #216]	; (4370 <acc+0x15c>)
    4298:	4798      	blx	r3
			memcpy(&accnts.accnt[1].login[0], USER, sizeof(USER));
    429a:	4939      	ldr	r1, [pc, #228]	; (4380 <acc+0x16c>)
    429c:	4b37      	ldr	r3, [pc, #220]	; (437c <acc+0x168>)
    429e:	2205      	movs	r2, #5
    42a0:	0018      	movs	r0, r3
    42a2:	4b2f      	ldr	r3, [pc, #188]	; (4360 <acc+0x14c>)
    42a4:	4798      	blx	r3
			memcpy(&accnts.accnt[1].password[0], USER, sizeof(USER));
    42a6:	4936      	ldr	r1, [pc, #216]	; (4380 <acc+0x16c>)
    42a8:	4b36      	ldr	r3, [pc, #216]	; (4384 <acc+0x170>)
    42aa:	2205      	movs	r2, #5
    42ac:	0018      	movs	r0, r3
    42ae:	4b2c      	ldr	r3, [pc, #176]	; (4360 <acc+0x14c>)
    42b0:	4798      	blx	r3
			
			accnts.cs = crc16_ccit(&accnts.accnt[0].login, sizeof(ACCOUNTS));
    42b2:	2380      	movs	r3, #128	; 0x80
    42b4:	005a      	lsls	r2, r3, #1
    42b6:	4b29      	ldr	r3, [pc, #164]	; (435c <acc+0x148>)
    42b8:	0011      	movs	r1, r2
    42ba:	0018      	movs	r0, r3
    42bc:	4b32      	ldr	r3, [pc, #200]	; (4388 <acc+0x174>)
    42be:	4798      	blx	r3
    42c0:	0003      	movs	r3, r0
    42c2:	0019      	movs	r1, r3
    42c4:	4b25      	ldr	r3, [pc, #148]	; (435c <acc+0x148>)
    42c6:	22fe      	movs	r2, #254	; 0xfe
    42c8:	20ff      	movs	r0, #255	; 0xff
    42ca:	4008      	ands	r0, r1
    42cc:	0005      	movs	r5, r0
    42ce:	5c98      	ldrb	r0, [r3, r2]
    42d0:	2400      	movs	r4, #0
    42d2:	4020      	ands	r0, r4
    42d4:	1c04      	adds	r4, r0, #0
    42d6:	1c28      	adds	r0, r5, #0
    42d8:	4320      	orrs	r0, r4
    42da:	5498      	strb	r0, [r3, r2]
    42dc:	0a09      	lsrs	r1, r1, #8
    42de:	b288      	uxth	r0, r1
    42e0:	189b      	adds	r3, r3, r2
    42e2:	785a      	ldrb	r2, [r3, #1]
    42e4:	2100      	movs	r1, #0
    42e6:	400a      	ands	r2, r1
    42e8:	1c11      	adds	r1, r2, #0
    42ea:	1c02      	adds	r2, r0, #0
    42ec:	430a      	orrs	r2, r1
    42ee:	705a      	strb	r2, [r3, #1]
			
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	4a18      	ldr	r2, [pc, #96]	; (4358 <acc+0x144>)
    42f6:	0019      	movs	r1, r3
    42f8:	0010      	movs	r0, r2
    42fa:	4b1a      	ldr	r3, [pc, #104]	; (4364 <acc+0x150>)
    42fc:	4798      	blx	r3
    42fe:	1e03      	subs	r3, r0, #0
    4300:	d103      	bne.n	430a <acc+0xf6>
    4302:	4b15      	ldr	r3, [pc, #84]	; (4358 <acc+0x144>)
    4304:	0018      	movs	r0, r3
    4306:	4b18      	ldr	r3, [pc, #96]	; (4368 <acc+0x154>)
    4308:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
    430a:	2380      	movs	r3, #128	; 0x80
    430c:	005a      	lsls	r2, r3, #1
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <acc+0x148>)
    4310:	4811      	ldr	r0, [pc, #68]	; (4358 <acc+0x144>)
    4312:	0019      	movs	r1, r3
    4314:	4b15      	ldr	r3, [pc, #84]	; (436c <acc+0x158>)
    4316:	4798      	blx	r3
		break;
    4318:	e01a      	b.n	4350 <acc+0x13c>
		default:
			warning_led(3);
    431a:	230f      	movs	r3, #15
    431c:	18fb      	adds	r3, r7, r3
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
    4322:	e00f      	b.n	4344 <acc+0x130>
    4324:	2202      	movs	r2, #2
    4326:	2100      	movs	r1, #0
    4328:	2001      	movs	r0, #1
    432a:	4b18      	ldr	r3, [pc, #96]	; (438c <acc+0x178>)
    432c:	4798      	blx	r3
    432e:	4b18      	ldr	r3, [pc, #96]	; (4390 <acc+0x17c>)
    4330:	0018      	movs	r0, r3
    4332:	4b18      	ldr	r3, [pc, #96]	; (4394 <acc+0x180>)
    4334:	4798      	blx	r3
    4336:	230f      	movs	r3, #15
    4338:	18fb      	adds	r3, r7, r3
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	230f      	movs	r3, #15
    433e:	18fb      	adds	r3, r7, r3
    4340:	3201      	adds	r2, #1
    4342:	701a      	strb	r2, [r3, #0]
    4344:	230f      	movs	r3, #15
    4346:	18fb      	adds	r3, r7, r3
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	2b05      	cmp	r3, #5
    434c:	d9ea      	bls.n	4324 <acc+0x110>
		break;
    434e:	46c0      	nop			; (mov r8, r8)
	}
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b004      	add	sp, #16
    4356:	bdb0      	pop	{r4, r5, r7, pc}
    4358:	0003f300 	.word	0x0003f300
    435c:	20002554 	.word	0x20002554
    4360:	0000c825 	.word	0x0000c825
    4364:	000066e9 	.word	0x000066e9
    4368:	0000672f 	.word	0x0000672f
    436c:	0000677d 	.word	0x0000677d
    4370:	0000c8a9 	.word	0x0000c8a9
    4374:	0000ca94 	.word	0x0000ca94
    4378:	20002574 	.word	0x20002574
    437c:	20002594 	.word	0x20002594
    4380:	0000ca9c 	.word	0x0000ca9c
    4384:	200025b4 	.word	0x200025b4
    4388:	00005d39 	.word	0x00005d39
    438c:	00006d81 	.word	0x00006d81
    4390:	00000dac 	.word	0x00000dac
    4394:	000081d1 	.word	0x000081d1

00004398 <acces_ip>:

BYTE acces_ip(BYTE n_port)//True-1,F-0;
{
    4398:	b580      	push	{r7, lr}
    439a:	b084      	sub	sp, #16
    439c:	af00      	add	r7, sp, #0
    439e:	0002      	movs	r2, r0
    43a0:	1dfb      	adds	r3, r7, #7
    43a2:	701a      	strb	r2, [r3, #0]
	BYTE ch = 0;
    43a4:	230f      	movs	r3, #15
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2200      	movs	r2, #0
    43aa:	701a      	strb	r2, [r3, #0]
	if		(SRAV(4, &cfg_1.access[n_port].ip[0], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	781a      	ldrb	r2, [r3, #0]
    43b0:	0013      	movs	r3, r2
    43b2:	00db      	lsls	r3, r3, #3
    43b4:	189b      	adds	r3, r3, r2
    43b6:	005b      	lsls	r3, r3, #1
    43b8:	3368      	adds	r3, #104	; 0x68
    43ba:	001a      	movs	r2, r3
    43bc:	4b3e      	ldr	r3, [pc, #248]	; (44b8 <acces_ip+0x120>)
    43be:	18d3      	adds	r3, r2, r3
    43c0:	1d19      	adds	r1, r3, #4
    43c2:	1dfb      	adds	r3, r7, #7
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	3301      	adds	r3, #1
    43c8:	4a3c      	ldr	r2, [pc, #240]	; (44bc <acces_ip+0x124>)
    43ca:	435a      	muls	r2, r3
    43cc:	4b3c      	ldr	r3, [pc, #240]	; (44c0 <acces_ip+0x128>)
    43ce:	18d3      	adds	r3, r2, r3
    43d0:	001a      	movs	r2, r3
    43d2:	2004      	movs	r0, #4
    43d4:	4b3b      	ldr	r3, [pc, #236]	; (44c4 <acces_ip+0x12c>)
    43d6:	4798      	blx	r3
    43d8:	1e03      	subs	r3, r0, #0
    43da:	d007      	beq.n	43ec <acces_ip+0x54>
    43dc:	230f      	movs	r3, #15
    43de:	18fb      	adds	r3, r7, r3
    43e0:	781a      	ldrb	r2, [r3, #0]
    43e2:	230f      	movs	r3, #15
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	3201      	adds	r2, #1
    43e8:	701a      	strb	r2, [r3, #0]
    43ea:	e05e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[1], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ec:	1dfb      	adds	r3, r7, #7
    43ee:	781a      	ldrb	r2, [r3, #0]
    43f0:	0013      	movs	r3, r2
    43f2:	00db      	lsls	r3, r3, #3
    43f4:	189b      	adds	r3, r3, r2
    43f6:	005b      	lsls	r3, r3, #1
    43f8:	336c      	adds	r3, #108	; 0x6c
    43fa:	001a      	movs	r2, r3
    43fc:	4b2e      	ldr	r3, [pc, #184]	; (44b8 <acces_ip+0x120>)
    43fe:	18d3      	adds	r3, r2, r3
    4400:	1d19      	adds	r1, r3, #4
    4402:	1dfb      	adds	r3, r7, #7
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	3301      	adds	r3, #1
    4408:	4a2c      	ldr	r2, [pc, #176]	; (44bc <acces_ip+0x124>)
    440a:	435a      	muls	r2, r3
    440c:	4b2c      	ldr	r3, [pc, #176]	; (44c0 <acces_ip+0x128>)
    440e:	18d3      	adds	r3, r2, r3
    4410:	001a      	movs	r2, r3
    4412:	2004      	movs	r0, #4
    4414:	4b2b      	ldr	r3, [pc, #172]	; (44c4 <acces_ip+0x12c>)
    4416:	4798      	blx	r3
    4418:	1e03      	subs	r3, r0, #0
    441a:	d007      	beq.n	442c <acces_ip+0x94>
    441c:	230f      	movs	r3, #15
    441e:	18fb      	adds	r3, r7, r3
    4420:	781a      	ldrb	r2, [r3, #0]
    4422:	230f      	movs	r3, #15
    4424:	18fb      	adds	r3, r7, r3
    4426:	3201      	adds	r2, #1
    4428:	701a      	strb	r2, [r3, #0]
    442a:	e03e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[2], eth_sock[n_port+1].ip_addr)) {ch++;}
    442c:	1dfb      	adds	r3, r7, #7
    442e:	781a      	ldrb	r2, [r3, #0]
    4430:	0013      	movs	r3, r2
    4432:	00db      	lsls	r3, r3, #3
    4434:	189b      	adds	r3, r3, r2
    4436:	005b      	lsls	r3, r3, #1
    4438:	3370      	adds	r3, #112	; 0x70
    443a:	001a      	movs	r2, r3
    443c:	4b1e      	ldr	r3, [pc, #120]	; (44b8 <acces_ip+0x120>)
    443e:	18d3      	adds	r3, r2, r3
    4440:	1d19      	adds	r1, r3, #4
    4442:	1dfb      	adds	r3, r7, #7
    4444:	781b      	ldrb	r3, [r3, #0]
    4446:	3301      	adds	r3, #1
    4448:	4a1c      	ldr	r2, [pc, #112]	; (44bc <acces_ip+0x124>)
    444a:	435a      	muls	r2, r3
    444c:	4b1c      	ldr	r3, [pc, #112]	; (44c0 <acces_ip+0x128>)
    444e:	18d3      	adds	r3, r2, r3
    4450:	001a      	movs	r2, r3
    4452:	2004      	movs	r0, #4
    4454:	4b1b      	ldr	r3, [pc, #108]	; (44c4 <acces_ip+0x12c>)
    4456:	4798      	blx	r3
    4458:	1e03      	subs	r3, r0, #0
    445a:	d007      	beq.n	446c <acces_ip+0xd4>
    445c:	230f      	movs	r3, #15
    445e:	18fb      	adds	r3, r7, r3
    4460:	781a      	ldrb	r2, [r3, #0]
    4462:	230f      	movs	r3, #15
    4464:	18fb      	adds	r3, r7, r3
    4466:	3201      	adds	r2, #1
    4468:	701a      	strb	r2, [r3, #0]
    446a:	e01e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[3], eth_sock[n_port+1].ip_addr)) {ch++;}
    446c:	1dfb      	adds	r3, r7, #7
    446e:	781a      	ldrb	r2, [r3, #0]
    4470:	0013      	movs	r3, r2
    4472:	00db      	lsls	r3, r3, #3
    4474:	189b      	adds	r3, r3, r2
    4476:	005b      	lsls	r3, r3, #1
    4478:	3374      	adds	r3, #116	; 0x74
    447a:	001a      	movs	r2, r3
    447c:	4b0e      	ldr	r3, [pc, #56]	; (44b8 <acces_ip+0x120>)
    447e:	18d3      	adds	r3, r2, r3
    4480:	1d19      	adds	r1, r3, #4
    4482:	1dfb      	adds	r3, r7, #7
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	3301      	adds	r3, #1
    4488:	4a0c      	ldr	r2, [pc, #48]	; (44bc <acces_ip+0x124>)
    448a:	435a      	muls	r2, r3
    448c:	4b0c      	ldr	r3, [pc, #48]	; (44c0 <acces_ip+0x128>)
    448e:	18d3      	adds	r3, r2, r3
    4490:	001a      	movs	r2, r3
    4492:	2004      	movs	r0, #4
    4494:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <acces_ip+0x12c>)
    4496:	4798      	blx	r3
    4498:	1e03      	subs	r3, r0, #0
    449a:	d006      	beq.n	44aa <acces_ip+0x112>
    449c:	230f      	movs	r3, #15
    449e:	18fb      	adds	r3, r7, r3
    44a0:	781a      	ldrb	r2, [r3, #0]
    44a2:	230f      	movs	r3, #15
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	3201      	adds	r2, #1
    44a8:	701a      	strb	r2, [r3, #0]
	return ch;
    44aa:	230f      	movs	r3, #15
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
}
    44b0:	0018      	movs	r0, r3
    44b2:	46bd      	mov	sp, r7
    44b4:	b004      	add	sp, #16
    44b6:	bd80      	pop	{r7, pc}
    44b8:	20003dc4 	.word	0x20003dc4
    44bc:	000005e5 	.word	0x000005e5
    44c0:	200005cc 	.word	0x200005cc
    44c4:	0000495b 	.word	0x0000495b

000044c8 <log_ch>:

void log_ch( )
{
    44c8:	b580      	push	{r7, lr}
    44ca:	4f21      	ldr	r7, [pc, #132]	; (4550 <log_ch+0x88>)
    44cc:	44bd      	add	sp, r7
    44ce:	af00      	add	r7, sp, #0
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    44d0:	2380      	movs	r3, #128	; 0x80
    44d2:	00da      	lsls	r2, r3, #3
    44d4:	23b0      	movs	r3, #176	; 0xb0
    44d6:	029b      	lsls	r3, r3, #10
    44d8:	0011      	movs	r1, r2
    44da:	0018      	movs	r0, r3
    44dc:	4b1d      	ldr	r3, [pc, #116]	; (4554 <log_ch+0x8c>)
    44de:	4798      	blx	r3
    44e0:	1e03      	subs	r3, r0, #0
    44e2:	d02f      	beq.n	4544 <log_ch+0x7c>
	
	LOG_DATA data;
	data.cell[0].ip				= 0x00000000;
    44e4:	4b1a      	ldr	r3, [pc, #104]	; (4550 <log_ch+0x88>)
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	0152      	lsls	r2, r2, #5
    44ea:	4694      	mov	ip, r2
    44ec:	44bc      	add	ip, r7
    44ee:	4463      	add	r3, ip
    44f0:	2200      	movs	r2, #0
    44f2:	601a      	str	r2, [r3, #0]
	data.cell[0].times			= 0x00000000;
    44f4:	4b16      	ldr	r3, [pc, #88]	; (4550 <log_ch+0x88>)
    44f6:	2280      	movs	r2, #128	; 0x80
    44f8:	0152      	lsls	r2, r2, #5
    44fa:	4694      	mov	ip, r2
    44fc:	44bc      	add	ip, r7
    44fe:	4463      	add	r3, ip
    4500:	2200      	movs	r2, #0
    4502:	605a      	str	r2, [r3, #4]
	data.cell[0].indx			= 0;
    4504:	4b12      	ldr	r3, [pc, #72]	; (4550 <log_ch+0x88>)
    4506:	2280      	movs	r2, #128	; 0x80
    4508:	0152      	lsls	r2, r2, #5
    450a:	4694      	mov	ip, r2
    450c:	44bc      	add	ip, r7
    450e:	4463      	add	r3, ip
    4510:	2200      	movs	r2, #0
    4512:	609a      	str	r2, [r3, #8]
	data.cell[0].operat_code	= START;
    4514:	4b0e      	ldr	r3, [pc, #56]	; (4550 <log_ch+0x88>)
    4516:	2280      	movs	r2, #128	; 0x80
    4518:	0152      	lsls	r2, r2, #5
    451a:	4694      	mov	ip, r2
    451c:	44bc      	add	ip, r7
    451e:	4463      	add	r3, ip
    4520:	2204      	movs	r2, #4
    4522:	819a      	strh	r2, [r3, #12]
	data.cell[0].version		= VERSION_B;
    4524:	4b0a      	ldr	r3, [pc, #40]	; (4550 <log_ch+0x88>)
    4526:	2280      	movs	r2, #128	; 0x80
    4528:	0152      	lsls	r2, r2, #5
    452a:	4694      	mov	ip, r2
    452c:	44bc      	add	ip, r7
    452e:	4463      	add	r3, ip
    4530:	2204      	movs	r2, #4
    4532:	81da      	strh	r2, [r3, #14]
	flash_write(LOGS_ADDR ,&data.cell[0] , 16);
    4534:	0039      	movs	r1, r7
    4536:	23b0      	movs	r3, #176	; 0xb0
    4538:	029b      	lsls	r3, r3, #10
    453a:	2210      	movs	r2, #16
    453c:	0018      	movs	r0, r3
    453e:	4b06      	ldr	r3, [pc, #24]	; (4558 <log_ch+0x90>)
    4540:	4798      	blx	r3
    4542:	e000      	b.n	4546 <log_ch+0x7e>
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    4544:	46c0      	nop			; (mov r8, r8)
}
    4546:	46bd      	mov	sp, r7
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	015b      	lsls	r3, r3, #5
    454c:	449d      	add	sp, r3
    454e:	bd80      	pop	{r7, pc}
    4550:	fffff000 	.word	0xfffff000
    4554:	000066e9 	.word	0x000066e9
    4558:	0000677d 	.word	0x0000677d

0000455c <log_safe>:

void log_safe(BYTE actv_user_id, DWORD ip, DWORD times, WORD operat_code)
{
    455c:	b580      	push	{r7, lr}
    455e:	4f69      	ldr	r7, [pc, #420]	; (4704 <log_safe+0x1a8>)
    4560:	44bd      	add	sp, r7
    4562:	af00      	add	r7, sp, #0
    4564:	60b9      	str	r1, [r7, #8]
    4566:	607a      	str	r2, [r7, #4]
    4568:	0019      	movs	r1, r3
    456a:	4b67      	ldr	r3, [pc, #412]	; (4708 <log_safe+0x1ac>)
    456c:	4a67      	ldr	r2, [pc, #412]	; (470c <log_safe+0x1b0>)
    456e:	4694      	mov	ip, r2
    4570:	44bc      	add	ip, r7
    4572:	4463      	add	r3, ip
    4574:	1c02      	adds	r2, r0, #0
    4576:	701a      	strb	r2, [r3, #0]
    4578:	4b65      	ldr	r3, [pc, #404]	; (4710 <log_safe+0x1b4>)
    457a:	4a64      	ldr	r2, [pc, #400]	; (470c <log_safe+0x1b0>)
    457c:	4694      	mov	ip, r2
    457e:	44bc      	add	ip, r7
    4580:	4463      	add	r3, ip
    4582:	1c0a      	adds	r2, r1, #0
    4584:	801a      	strh	r2, [r3, #0]
	LOG_DATA data;
	flash_read(LOGS_ADDR, &data, 4096);
    4586:	2380      	movs	r3, #128	; 0x80
    4588:	015a      	lsls	r2, r3, #5
    458a:	2310      	movs	r3, #16
    458c:	18f9      	adds	r1, r7, r3
    458e:	23b0      	movs	r3, #176	; 0xb0
    4590:	029b      	lsls	r3, r3, #10
    4592:	0018      	movs	r0, r3
    4594:	4b5f      	ldr	r3, [pc, #380]	; (4714 <log_safe+0x1b8>)
    4596:	4798      	blx	r3
	BYTE ptr = 1;
    4598:	4b5f      	ldr	r3, [pc, #380]	; (4718 <log_safe+0x1bc>)
    459a:	18fb      	adds	r3, r7, r3
    459c:	2201      	movs	r2, #1
    459e:	701a      	strb	r2, [r3, #0]
	BYTE last_ptr = 0;
    45a0:	4b5e      	ldr	r3, [pc, #376]	; (471c <log_safe+0x1c0>)
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	2200      	movs	r2, #0
    45a6:	701a      	strb	r2, [r3, #0]
	
	while(1)	
	{
		if (ptr == CELLS)
			{ptr = 0; break;}//OVF
		if ((data.cell[last_ptr].indx + 1) != data.cell[ptr].indx) 
    45a8:	4b5c      	ldr	r3, [pc, #368]	; (471c <log_safe+0x1c0>)
    45aa:	18fb      	adds	r3, r7, r3
    45ac:	781b      	ldrb	r3, [r3, #0]
    45ae:	4a5c      	ldr	r2, [pc, #368]	; (4720 <log_safe+0x1c4>)
    45b0:	4956      	ldr	r1, [pc, #344]	; (470c <log_safe+0x1b0>)
    45b2:	468c      	mov	ip, r1
    45b4:	44bc      	add	ip, r7
    45b6:	4462      	add	r2, ip
    45b8:	011b      	lsls	r3, r3, #4
    45ba:	18d3      	adds	r3, r2, r3
    45bc:	3308      	adds	r3, #8
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	1c5a      	adds	r2, r3, #1
    45c2:	4b55      	ldr	r3, [pc, #340]	; (4718 <log_safe+0x1bc>)
    45c4:	18fb      	adds	r3, r7, r3
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	4955      	ldr	r1, [pc, #340]	; (4720 <log_safe+0x1c4>)
    45ca:	4850      	ldr	r0, [pc, #320]	; (470c <log_safe+0x1b0>)
    45cc:	4684      	mov	ip, r0
    45ce:	44bc      	add	ip, r7
    45d0:	4461      	add	r1, ip
    45d2:	011b      	lsls	r3, r3, #4
    45d4:	18cb      	adds	r3, r1, r3
    45d6:	3308      	adds	r3, #8
    45d8:	681b      	ldr	r3, [r3, #0]
    45da:	429a      	cmp	r2, r3
    45dc:	d10e      	bne.n	45fc <log_safe+0xa0>
			{ break;}
		last_ptr++;	ptr++;	
    45de:	4b4f      	ldr	r3, [pc, #316]	; (471c <log_safe+0x1c0>)
    45e0:	18fb      	adds	r3, r7, r3
    45e2:	781a      	ldrb	r2, [r3, #0]
    45e4:	4b4d      	ldr	r3, [pc, #308]	; (471c <log_safe+0x1c0>)
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	3201      	adds	r2, #1
    45ea:	701a      	strb	r2, [r3, #0]
    45ec:	4b4a      	ldr	r3, [pc, #296]	; (4718 <log_safe+0x1bc>)
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	781a      	ldrb	r2, [r3, #0]
    45f2:	4b49      	ldr	r3, [pc, #292]	; (4718 <log_safe+0x1bc>)
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	3201      	adds	r2, #1
    45f8:	701a      	strb	r2, [r3, #0]
		if (ptr == CELLS)
    45fa:	e7d5      	b.n	45a8 <log_safe+0x4c>
			{ break;}
    45fc:	46c0      	nop			; (mov r8, r8)
	}
	data.cell[ptr].ip			= ip;
    45fe:	4b46      	ldr	r3, [pc, #280]	; (4718 <log_safe+0x1bc>)
    4600:	18fb      	adds	r3, r7, r3
    4602:	781a      	ldrb	r2, [r3, #0]
    4604:	4b46      	ldr	r3, [pc, #280]	; (4720 <log_safe+0x1c4>)
    4606:	4941      	ldr	r1, [pc, #260]	; (470c <log_safe+0x1b0>)
    4608:	468c      	mov	ip, r1
    460a:	44bc      	add	ip, r7
    460c:	4463      	add	r3, ip
    460e:	0112      	lsls	r2, r2, #4
    4610:	68b9      	ldr	r1, [r7, #8]
    4612:	50d1      	str	r1, [r2, r3]
	data.cell[ptr].times		= times;
    4614:	4b40      	ldr	r3, [pc, #256]	; (4718 <log_safe+0x1bc>)
    4616:	18fb      	adds	r3, r7, r3
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	4a41      	ldr	r2, [pc, #260]	; (4720 <log_safe+0x1c4>)
    461c:	493b      	ldr	r1, [pc, #236]	; (470c <log_safe+0x1b0>)
    461e:	468c      	mov	ip, r1
    4620:	44bc      	add	ip, r7
    4622:	4462      	add	r2, ip
    4624:	011b      	lsls	r3, r3, #4
    4626:	18d3      	adds	r3, r2, r3
    4628:	3304      	adds	r3, #4
    462a:	687a      	ldr	r2, [r7, #4]
    462c:	601a      	str	r2, [r3, #0]
	data.cell[ptr].indx			= data.cell[last_ptr].indx + 1;
    462e:	4b3a      	ldr	r3, [pc, #232]	; (4718 <log_safe+0x1bc>)
    4630:	18fb      	adds	r3, r7, r3
    4632:	7818      	ldrb	r0, [r3, #0]
    4634:	4b39      	ldr	r3, [pc, #228]	; (471c <log_safe+0x1c0>)
    4636:	18fb      	adds	r3, r7, r3
    4638:	781b      	ldrb	r3, [r3, #0]
    463a:	4a39      	ldr	r2, [pc, #228]	; (4720 <log_safe+0x1c4>)
    463c:	4933      	ldr	r1, [pc, #204]	; (470c <log_safe+0x1b0>)
    463e:	468c      	mov	ip, r1
    4640:	44bc      	add	ip, r7
    4642:	4462      	add	r2, ip
    4644:	011b      	lsls	r3, r3, #4
    4646:	18d3      	adds	r3, r2, r3
    4648:	3308      	adds	r3, #8
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	1c5a      	adds	r2, r3, #1
    464e:	4b34      	ldr	r3, [pc, #208]	; (4720 <log_safe+0x1c4>)
    4650:	492e      	ldr	r1, [pc, #184]	; (470c <log_safe+0x1b0>)
    4652:	1879      	adds	r1, r7, r1
    4654:	18c9      	adds	r1, r1, r3
    4656:	0103      	lsls	r3, r0, #4
    4658:	18cb      	adds	r3, r1, r3
    465a:	3308      	adds	r3, #8
    465c:	601a      	str	r2, [r3, #0]
	data.cell[ptr].operat_code	= operat_code;
    465e:	4b2e      	ldr	r3, [pc, #184]	; (4718 <log_safe+0x1bc>)
    4660:	18fb      	adds	r3, r7, r3
    4662:	781b      	ldrb	r3, [r3, #0]
    4664:	4a2e      	ldr	r2, [pc, #184]	; (4720 <log_safe+0x1c4>)
    4666:	4929      	ldr	r1, [pc, #164]	; (470c <log_safe+0x1b0>)
    4668:	468c      	mov	ip, r1
    466a:	44bc      	add	ip, r7
    466c:	4462      	add	r2, ip
    466e:	011b      	lsls	r3, r3, #4
    4670:	18d3      	adds	r3, r2, r3
    4672:	330c      	adds	r3, #12
    4674:	4a26      	ldr	r2, [pc, #152]	; (4710 <log_safe+0x1b4>)
    4676:	4925      	ldr	r1, [pc, #148]	; (470c <log_safe+0x1b0>)
    4678:	468c      	mov	ip, r1
    467a:	44bc      	add	ip, r7
    467c:	4462      	add	r2, ip
    467e:	8812      	ldrh	r2, [r2, #0]
    4680:	801a      	strh	r2, [r3, #0]
	data.cell[ptr].version		= VERSION_B;
    4682:	4b25      	ldr	r3, [pc, #148]	; (4718 <log_safe+0x1bc>)
    4684:	18fb      	adds	r3, r7, r3
    4686:	781b      	ldrb	r3, [r3, #0]
    4688:	4a25      	ldr	r2, [pc, #148]	; (4720 <log_safe+0x1c4>)
    468a:	4920      	ldr	r1, [pc, #128]	; (470c <log_safe+0x1b0>)
    468c:	468c      	mov	ip, r1
    468e:	44bc      	add	ip, r7
    4690:	4462      	add	r2, ip
    4692:	011b      	lsls	r3, r3, #4
    4694:	18d3      	adds	r3, r2, r3
    4696:	330e      	adds	r3, #14
    4698:	2204      	movs	r2, #4
    469a:	801a      	strh	r2, [r3, #0]
	
	dst = LOGS_ADDR + (ptr * CELL);
    469c:	4b1e      	ldr	r3, [pc, #120]	; (4718 <log_safe+0x1bc>)
    469e:	18fb      	adds	r3, r7, r3
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	011b      	lsls	r3, r3, #4
    46a4:	22b0      	movs	r2, #176	; 0xb0
    46a6:	0292      	lsls	r2, r2, #10
    46a8:	4694      	mov	ip, r2
    46aa:	4463      	add	r3, ip
    46ac:	4a1d      	ldr	r2, [pc, #116]	; (4724 <log_safe+0x1c8>)
    46ae:	18ba      	adds	r2, r7, r2
    46b0:	6013      	str	r3, [r2, #0]
		
	if ((ptr % 16) == 0) 
    46b2:	4b19      	ldr	r3, [pc, #100]	; (4718 <log_safe+0x1bc>)
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	220f      	movs	r2, #15
    46ba:	4013      	ands	r3, r2
    46bc:	b2db      	uxtb	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	d10c      	bne.n	46dc <log_safe+0x180>
	{
		flash_erase_row(LOGS_ADDR + ((ptr/CELL) * BLOCK));
    46c2:	4b15      	ldr	r3, [pc, #84]	; (4718 <log_safe+0x1bc>)
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	091b      	lsrs	r3, r3, #4
    46ca:	b2db      	uxtb	r3, r3
    46cc:	021b      	lsls	r3, r3, #8
    46ce:	22b0      	movs	r2, #176	; 0xb0
    46d0:	0292      	lsls	r2, r2, #10
    46d2:	4694      	mov	ip, r2
    46d4:	4463      	add	r3, ip
    46d6:	0018      	movs	r0, r3
    46d8:	4b13      	ldr	r3, [pc, #76]	; (4728 <log_safe+0x1cc>)
    46da:	4798      	blx	r3
	} 
	flash_write(dst, &data.cell[ptr].ip, 16);
    46dc:	4b11      	ldr	r3, [pc, #68]	; (4724 <log_safe+0x1c8>)
    46de:	18fb      	adds	r3, r7, r3
    46e0:	6818      	ldr	r0, [r3, #0]
    46e2:	4b0d      	ldr	r3, [pc, #52]	; (4718 <log_safe+0x1bc>)
    46e4:	18fb      	adds	r3, r7, r3
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	2210      	movs	r2, #16
    46ea:	18ba      	adds	r2, r7, r2
    46ec:	011b      	lsls	r3, r3, #4
    46ee:	18d3      	adds	r3, r2, r3
    46f0:	2210      	movs	r2, #16
    46f2:	0019      	movs	r1, r3
    46f4:	4b0d      	ldr	r3, [pc, #52]	; (472c <log_safe+0x1d0>)
    46f6:	4798      	blx	r3
}
    46f8:	46c0      	nop			; (mov r8, r8)
    46fa:	46bd      	mov	sp, r7
    46fc:	4b03      	ldr	r3, [pc, #12]	; (470c <log_safe+0x1b0>)
    46fe:	449d      	add	sp, r3
    4700:	bd80      	pop	{r7, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	ffffefe8 	.word	0xffffefe8
    4708:	ffffeff7 	.word	0xffffeff7
    470c:	00001018 	.word	0x00001018
    4710:	ffffeff4 	.word	0xffffeff4
    4714:	00006939 	.word	0x00006939
    4718:	00001017 	.word	0x00001017
    471c:	00001016 	.word	0x00001016
    4720:	ffffeff8 	.word	0xffffeff8
    4724:	00001010 	.word	0x00001010
    4728:	000069c1 	.word	0x000069c1
    472c:	0000677d 	.word	0x0000677d

00004730 <log_clear>:

void log_clear()
{
    4730:	b580      	push	{r7, lr}
    4732:	b082      	sub	sp, #8
    4734:	af00      	add	r7, sp, #0
	for (BYTE i = 0; i < 16; i++)	
    4736:	1dfb      	adds	r3, r7, #7
    4738:	2200      	movs	r2, #0
    473a:	701a      	strb	r2, [r3, #0]
    473c:	e01c      	b.n	4778 <log_clear+0x48>
	{
		if(!flash_empty(LOGS_ADDR + (i * 256), 256))	
    473e:	1dfb      	adds	r3, r7, #7
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	021b      	lsls	r3, r3, #8
    4744:	22b0      	movs	r2, #176	; 0xb0
    4746:	0292      	lsls	r2, r2, #10
    4748:	189a      	adds	r2, r3, r2
    474a:	2380      	movs	r3, #128	; 0x80
    474c:	005b      	lsls	r3, r3, #1
    474e:	0019      	movs	r1, r3
    4750:	0010      	movs	r0, r2
    4752:	4b0d      	ldr	r3, [pc, #52]	; (4788 <log_clear+0x58>)
    4754:	4798      	blx	r3
    4756:	1e03      	subs	r3, r0, #0
    4758:	d109      	bne.n	476e <log_clear+0x3e>
		{flash_erase_page(LOGS_ADDR + (i * 256));}	
    475a:	1dfb      	adds	r3, r7, #7
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	021b      	lsls	r3, r3, #8
    4760:	22b0      	movs	r2, #176	; 0xb0
    4762:	0292      	lsls	r2, r2, #10
    4764:	4694      	mov	ip, r2
    4766:	4463      	add	r3, ip
    4768:	0018      	movs	r0, r3
    476a:	4b08      	ldr	r3, [pc, #32]	; (478c <log_clear+0x5c>)
    476c:	4798      	blx	r3
	for (BYTE i = 0; i < 16; i++)	
    476e:	1dfb      	adds	r3, r7, #7
    4770:	781a      	ldrb	r2, [r3, #0]
    4772:	1dfb      	adds	r3, r7, #7
    4774:	3201      	adds	r2, #1
    4776:	701a      	strb	r2, [r3, #0]
    4778:	1dfb      	adds	r3, r7, #7
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	2b0f      	cmp	r3, #15
    477e:	d9de      	bls.n	473e <log_clear+0xe>
	}
}
    4780:	46c0      	nop			; (mov r8, r8)
    4782:	46bd      	mov	sp, r7
    4784:	b002      	add	sp, #8
    4786:	bd80      	pop	{r7, pc}
    4788:	000066e9 	.word	0x000066e9
    478c:	0000672f 	.word	0x0000672f

00004790 <random_gen>:
#include "def.h"

void random_gen(BYTE size,BYTE* ptr)//size, place for write
{
    4790:	b590      	push	{r4, r7, lr}
    4792:	b085      	sub	sp, #20
    4794:	af00      	add	r7, sp, #0
    4796:	0002      	movs	r2, r0
    4798:	6039      	str	r1, [r7, #0]
    479a:	1dfb      	adds	r3, r7, #7
    479c:	701a      	strb	r2, [r3, #0]
	BYTE tc3 = 0;
    479e:	230e      	movs	r3, #14
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	2200      	movs	r2, #0
    47a4:	701a      	strb	r2, [r3, #0]
	for (BYTE i = 0; i < size; i++) 	{*ptr++ = ((tc3_cnt + 3) ^ (i + 1)) % 0xFF;}
    47a6:	230f      	movs	r3, #15
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	2200      	movs	r2, #0
    47ac:	701a      	strb	r2, [r3, #0]
    47ae:	e018      	b.n	47e2 <random_gen+0x52>
    47b0:	683c      	ldr	r4, [r7, #0]
    47b2:	1c63      	adds	r3, r4, #1
    47b4:	603b      	str	r3, [r7, #0]
    47b6:	4b10      	ldr	r3, [pc, #64]	; (47f8 <random_gen+0x68>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	3303      	adds	r3, #3
    47bc:	220f      	movs	r2, #15
    47be:	18ba      	adds	r2, r7, r2
    47c0:	7812      	ldrb	r2, [r2, #0]
    47c2:	3201      	adds	r2, #1
    47c4:	405a      	eors	r2, r3
    47c6:	4b0d      	ldr	r3, [pc, #52]	; (47fc <random_gen+0x6c>)
    47c8:	21ff      	movs	r1, #255	; 0xff
    47ca:	0010      	movs	r0, r2
    47cc:	4798      	blx	r3
    47ce:	000b      	movs	r3, r1
    47d0:	b2db      	uxtb	r3, r3
    47d2:	7023      	strb	r3, [r4, #0]
    47d4:	230f      	movs	r3, #15
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	781a      	ldrb	r2, [r3, #0]
    47da:	230f      	movs	r3, #15
    47dc:	18fb      	adds	r3, r7, r3
    47de:	3201      	adds	r2, #1
    47e0:	701a      	strb	r2, [r3, #0]
    47e2:	230f      	movs	r3, #15
    47e4:	18fa      	adds	r2, r7, r3
    47e6:	1dfb      	adds	r3, r7, #7
    47e8:	7812      	ldrb	r2, [r2, #0]
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	429a      	cmp	r2, r3
    47ee:	d3df      	bcc.n	47b0 <random_gen+0x20>
}
    47f0:	46c0      	nop			; (mov r8, r8)
    47f2:	46bd      	mov	sp, r7
    47f4:	b005      	add	sp, #20
    47f6:	bd90      	pop	{r4, r7, pc}
    47f8:	2000046c 	.word	0x2000046c
    47fc:	0000b141 	.word	0x0000b141

00004800 <num_to_byte>:
BYTE num_to_byte(DWORD num, BYTE len, BYTE* dst, BYTE side)//write number as bite line
{
    4800:	b580      	push	{r7, lr}
    4802:	b086      	sub	sp, #24
    4804:	af00      	add	r7, sp, #0
    4806:	60f8      	str	r0, [r7, #12]
    4808:	0008      	movs	r0, r1
    480a:	607a      	str	r2, [r7, #4]
    480c:	0019      	movs	r1, r3
    480e:	230b      	movs	r3, #11
    4810:	18fb      	adds	r3, r7, r3
    4812:	1c02      	adds	r2, r0, #0
    4814:	701a      	strb	r2, [r3, #0]
    4816:	230a      	movs	r3, #10
    4818:	18fb      	adds	r3, r7, r3
    481a:	1c0a      	adds	r2, r1, #0
    481c:	701a      	strb	r2, [r3, #0]
	if((len != W_LEN)    &&  (len != DW_LEN))         {return LEN_ERR;}
    481e:	230b      	movs	r3, #11
    4820:	18fb      	adds	r3, r7, r3
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b02      	cmp	r3, #2
    4826:	d006      	beq.n	4836 <num_to_byte+0x36>
    4828:	230b      	movs	r3, #11
    482a:	18fb      	adds	r3, r7, r3
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b04      	cmp	r3, #4
    4830:	d001      	beq.n	4836 <num_to_byte+0x36>
    4832:	2365      	movs	r3, #101	; 0x65
    4834:	e042      	b.n	48bc <num_to_byte+0xbc>
	if((side != L_SIDE)  &&  (side != R_SIDE))     {return SIDE_ERR;}
    4836:	230a      	movs	r3, #10
    4838:	18fb      	adds	r3, r7, r3
    483a:	781b      	ldrb	r3, [r3, #0]
    483c:	2b01      	cmp	r3, #1
    483e:	d006      	beq.n	484e <num_to_byte+0x4e>
    4840:	230a      	movs	r3, #10
    4842:	18fb      	adds	r3, r7, r3
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	2b00      	cmp	r3, #0
    4848:	d001      	beq.n	484e <num_to_byte+0x4e>
    484a:	2366      	movs	r3, #102	; 0x66
    484c:	e036      	b.n	48bc <num_to_byte+0xbc>

	for (BYTE i = 0; i < len; i++)
    484e:	2317      	movs	r3, #23
    4850:	18fb      	adds	r3, r7, r3
    4852:	2200      	movs	r2, #0
    4854:	701a      	strb	r2, [r3, #0]
    4856:	e028      	b.n	48aa <num_to_byte+0xaa>
	{
		if(side)    {*dst = num >> (( 8 * (len - 1 ) ) - ( i * 8 ));}
    4858:	230a      	movs	r3, #10
    485a:	18fb      	adds	r3, r7, r3
    485c:	781b      	ldrb	r3, [r3, #0]
    485e:	2b00      	cmp	r3, #0
    4860:	d00f      	beq.n	4882 <num_to_byte+0x82>
    4862:	230b      	movs	r3, #11
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
    4868:	1e5a      	subs	r2, r3, #1
    486a:	2317      	movs	r3, #23
    486c:	18fb      	adds	r3, r7, r3
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	1ad3      	subs	r3, r2, r3
    4872:	00db      	lsls	r3, r3, #3
    4874:	68fa      	ldr	r2, [r7, #12]
    4876:	40da      	lsrs	r2, r3
    4878:	0013      	movs	r3, r2
    487a:	b2da      	uxtb	r2, r3
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	701a      	strb	r2, [r3, #0]
    4880:	e009      	b.n	4896 <num_to_byte+0x96>
		else        {*dst = num >> ( i * 8 );}
    4882:	2317      	movs	r3, #23
    4884:	18fb      	adds	r3, r7, r3
    4886:	781b      	ldrb	r3, [r3, #0]
    4888:	00db      	lsls	r3, r3, #3
    488a:	68fa      	ldr	r2, [r7, #12]
    488c:	40da      	lsrs	r2, r3
    488e:	0013      	movs	r3, r2
    4890:	b2da      	uxtb	r2, r3
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	701a      	strb	r2, [r3, #0]
		dst++;
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	3301      	adds	r3, #1
    489a:	607b      	str	r3, [r7, #4]
	for (BYTE i = 0; i < len; i++)
    489c:	2317      	movs	r3, #23
    489e:	18fb      	adds	r3, r7, r3
    48a0:	781a      	ldrb	r2, [r3, #0]
    48a2:	2317      	movs	r3, #23
    48a4:	18fb      	adds	r3, r7, r3
    48a6:	3201      	adds	r2, #1
    48a8:	701a      	strb	r2, [r3, #0]
    48aa:	2317      	movs	r3, #23
    48ac:	18fa      	adds	r2, r7, r3
    48ae:	230b      	movs	r3, #11
    48b0:	18fb      	adds	r3, r7, r3
    48b2:	7812      	ldrb	r2, [r2, #0]
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	429a      	cmp	r2, r3
    48b8:	d3ce      	bcc.n	4858 <num_to_byte+0x58>
	}
	return SUCCESS;
    48ba:	2300      	movs	r3, #0
}
    48bc:	0018      	movs	r0, r3
    48be:	46bd      	mov	sp, r7
    48c0:	b006      	add	sp, #24
    48c2:	bd80      	pop	{r7, pc}

000048c4 <num_aus_byte>:
DWORD num_aus_byte(BYTE len, BYTE* src, BYTE side)//read bite line as number
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b084      	sub	sp, #16
    48c8:	af00      	add	r7, sp, #0
    48ca:	6039      	str	r1, [r7, #0]
    48cc:	0011      	movs	r1, r2
    48ce:	1dfb      	adds	r3, r7, #7
    48d0:	1c02      	adds	r2, r0, #0
    48d2:	701a      	strb	r2, [r3, #0]
    48d4:	1dbb      	adds	r3, r7, #6
    48d6:	1c0a      	adds	r2, r1, #0
    48d8:	701a      	strb	r2, [r3, #0]
	DWORD num = 0;
    48da:	2300      	movs	r3, #0
    48dc:	60fb      	str	r3, [r7, #12]
	for (BYTE i = 0; i < len;i++)
    48de:	230b      	movs	r3, #11
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	2200      	movs	r2, #0
    48e4:	701a      	strb	r2, [r3, #0]
    48e6:	e02c      	b.n	4942 <num_aus_byte+0x7e>
	{
		if(side)    {num += *src << (((len - 1) * 8) - (i * 8));}
    48e8:	1dbb      	adds	r3, r7, #6
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d011      	beq.n	4914 <num_aus_byte+0x50>
    48f0:	683b      	ldr	r3, [r7, #0]
    48f2:	781b      	ldrb	r3, [r3, #0]
    48f4:	0019      	movs	r1, r3
    48f6:	1dfb      	adds	r3, r7, #7
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	1e5a      	subs	r2, r3, #1
    48fc:	230b      	movs	r3, #11
    48fe:	18fb      	adds	r3, r7, r3
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	1ad3      	subs	r3, r2, r3
    4904:	00db      	lsls	r3, r3, #3
    4906:	4099      	lsls	r1, r3
    4908:	000b      	movs	r3, r1
    490a:	001a      	movs	r2, r3
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	189b      	adds	r3, r3, r2
    4910:	60fb      	str	r3, [r7, #12]
    4912:	e00c      	b.n	492e <num_aus_byte+0x6a>
		else        {num += *src << ( i * 8 );}
    4914:	683b      	ldr	r3, [r7, #0]
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	001a      	movs	r2, r3
    491a:	230b      	movs	r3, #11
    491c:	18fb      	adds	r3, r7, r3
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	00db      	lsls	r3, r3, #3
    4922:	409a      	lsls	r2, r3
    4924:	0013      	movs	r3, r2
    4926:	001a      	movs	r2, r3
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	189b      	adds	r3, r3, r2
    492c:	60fb      	str	r3, [r7, #12]
		src++;
    492e:	683b      	ldr	r3, [r7, #0]
    4930:	3301      	adds	r3, #1
    4932:	603b      	str	r3, [r7, #0]
	for (BYTE i = 0; i < len;i++)
    4934:	230b      	movs	r3, #11
    4936:	18fb      	adds	r3, r7, r3
    4938:	781a      	ldrb	r2, [r3, #0]
    493a:	230b      	movs	r3, #11
    493c:	18fb      	adds	r3, r7, r3
    493e:	3201      	adds	r2, #1
    4940:	701a      	strb	r2, [r3, #0]
    4942:	230b      	movs	r3, #11
    4944:	18fa      	adds	r2, r7, r3
    4946:	1dfb      	adds	r3, r7, #7
    4948:	7812      	ldrb	r2, [r2, #0]
    494a:	781b      	ldrb	r3, [r3, #0]
    494c:	429a      	cmp	r2, r3
    494e:	d3cb      	bcc.n	48e8 <num_aus_byte+0x24>
	}
	return num;
    4950:	68fb      	ldr	r3, [r7, #12]
}
    4952:	0018      	movs	r0, r3
    4954:	46bd      	mov	sp, r7
    4956:	b004      	add	sp, #16
    4958:	bd80      	pop	{r7, pc}

0000495a <SRAV>:

BYTE SRAV(BYTE len, BYTE* buf1, BYTE* buf2)//True-1,F-0;
{	for(BYTE i = 0; i < len; i++)	
    495a:	b580      	push	{r7, lr}
    495c:	b086      	sub	sp, #24
    495e:	af00      	add	r7, sp, #0
    4960:	60b9      	str	r1, [r7, #8]
    4962:	607a      	str	r2, [r7, #4]
    4964:	230f      	movs	r3, #15
    4966:	18fb      	adds	r3, r7, r3
    4968:	1c02      	adds	r2, r0, #0
    496a:	701a      	strb	r2, [r3, #0]
    496c:	2317      	movs	r3, #23
    496e:	18fb      	adds	r3, r7, r3
    4970:	2200      	movs	r2, #0
    4972:	701a      	strb	r2, [r3, #0]
    4974:	e012      	b.n	499c <SRAV+0x42>
	{	
		if(*buf1++ != *buf2++) 
    4976:	68bb      	ldr	r3, [r7, #8]
    4978:	1c5a      	adds	r2, r3, #1
    497a:	60ba      	str	r2, [r7, #8]
    497c:	781a      	ldrb	r2, [r3, #0]
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	1c59      	adds	r1, r3, #1
    4982:	6079      	str	r1, [r7, #4]
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	429a      	cmp	r2, r3
    4988:	d001      	beq.n	498e <SRAV+0x34>
		{return FALSE;}	
    498a:	2300      	movs	r3, #0
    498c:	e00f      	b.n	49ae <SRAV+0x54>
{	for(BYTE i = 0; i < len; i++)	
    498e:	2317      	movs	r3, #23
    4990:	18fb      	adds	r3, r7, r3
    4992:	781a      	ldrb	r2, [r3, #0]
    4994:	2317      	movs	r3, #23
    4996:	18fb      	adds	r3, r7, r3
    4998:	3201      	adds	r2, #1
    499a:	701a      	strb	r2, [r3, #0]
    499c:	2317      	movs	r3, #23
    499e:	18fa      	adds	r2, r7, r3
    49a0:	230f      	movs	r3, #15
    49a2:	18fb      	adds	r3, r7, r3
    49a4:	7812      	ldrb	r2, [r2, #0]
    49a6:	781b      	ldrb	r3, [r3, #0]
    49a8:	429a      	cmp	r2, r3
    49aa:	d3e4      	bcc.n	4976 <SRAV+0x1c>
	}
	return TRUE;	
    49ac:	2301      	movs	r3, #1
    49ae:	0018      	movs	r0, r3
    49b0:	46bd      	mov	sp, r7
    49b2:	b006      	add	sp, #24
    49b4:	bd80      	pop	{r7, pc}
    49b6:	46c0      	nop			; (mov r8, r8)

000049b8 <cmd_process>:

#define CM2_STATUS_PACK 0x02
#define UID_STATUS_PACK 0x8002

void cmd_process(void)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	af00      	add	r7, sp, #0
	cmd_common_process ();
    49bc:	f000 f805 	bl	49ca <cmd_common_process>
	cmd_usart_process ();
    49c0:	f000 ff12 	bl	57e8 <cmd_usart_process>
}
    49c4:	46c0      	nop			; (mov r8, r8)
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}

000049ca <cmd_common_process>:


void cmd_common_process (void)
{
    49ca:	b590      	push	{r4, r7, lr}
    49cc:	b085      	sub	sp, #20
    49ce:	af00      	add	r7, sp, #0
	WORD	size	= 0;
    49d0:	230e      	movs	r3, #14
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	2200      	movs	r2, #0
    49d6:	801a      	strh	r2, [r3, #0]
	WORD	addr	= 0;
    49d8:	1d3b      	adds	r3, r7, #4
    49da:	2200      	movs	r2, #0
    49dc:	801a      	strh	r2, [r3, #0]
	WORD	cnt		= 0;
    49de:	230c      	movs	r3, #12
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	2200      	movs	r2, #0
    49e4:	801a      	strh	r2, [r3, #0]
	WORD	wn		= 0;
    49e6:	230a      	movs	r3, #10
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	2200      	movs	r2, #0
    49ec:	801a      	strh	r2, [r3, #0]
	WORD	cs		= 0;
    49ee:	1cbb      	adds	r3, r7, #2
    49f0:	2200      	movs	r2, #0
    49f2:	801a      	strh	r2, [r3, #0]
	BYTE	i		= 0;
    49f4:	2309      	movs	r3, #9
    49f6:	18fb      	adds	r3, r7, r3
    49f8:	2200      	movs	r2, #0
    49fa:	701a      	strb	r2, [r3, #0]
	WORD	ixo		= 0;
    49fc:	003b      	movs	r3, r7
    49fe:	2200      	movs	r2, #0
    4a00:	801a      	strh	r2, [r3, #0]
	
	if (log_stat == 1)	
    4a02:	4b96      	ldr	r3, [pc, #600]	; (4c5c <cmd_common_process+0x292>)
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b01      	cmp	r3, #1
    4a0a:	d107      	bne.n	4a1c <cmd_common_process+0x52>
	{
		if (loggin_timeout > (300 * 10000)) 
    4a0c:	4b94      	ldr	r3, [pc, #592]	; (4c60 <cmd_common_process+0x296>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	4a94      	ldr	r2, [pc, #592]	; (4c64 <cmd_common_process+0x29a>)
    4a12:	4293      	cmp	r3, r2
    4a14:	d902      	bls.n	4a1c <cmd_common_process+0x52>
		{log_stat = 0;}
    4a16:	4b91      	ldr	r3, [pc, #580]	; (4c5c <cmd_common_process+0x292>)
    4a18:	2200      	movs	r2, #0
    4a1a:	701a      	strb	r2, [r3, #0]
	}
			
	if(eth_sock[0].r_status==FALSE) {return;}
    4a1c:	4b92      	ldr	r3, [pc, #584]	; (4c68 <cmd_common_process+0x29e>)
    4a1e:	4a93      	ldr	r2, [pc, #588]	; (4c6c <cmd_common_process+0x2a2>)
    4a20:	5c9b      	ldrb	r3, [r3, r2]
    4a22:	2b00      	cmp	r3, #0
    4a24:	d101      	bne.n	4a2a <cmd_common_process+0x60>
    4a26:	f000 feac 	bl	5782 <cmd_common_process+0xdb8>
	eth_sock[0].r_status=FALSE;
    4a2a:	4b8f      	ldr	r3, [pc, #572]	; (4c68 <cmd_common_process+0x29e>)
    4a2c:	4a8f      	ldr	r2, [pc, #572]	; (4c6c <cmd_common_process+0x2a2>)
    4a2e:	2100      	movs	r1, #0
    4a30:	5499      	strb	r1, [r3, r2]

	size=((eth_sock[0].len[0]<<8) | (eth_sock[0].len[1]));
    4a32:	4b8d      	ldr	r3, [pc, #564]	; (4c68 <cmd_common_process+0x29e>)
    4a34:	799b      	ldrb	r3, [r3, #6]
    4a36:	021b      	lsls	r3, r3, #8
    4a38:	b21a      	sxth	r2, r3
    4a3a:	4b8b      	ldr	r3, [pc, #556]	; (4c68 <cmd_common_process+0x29e>)
    4a3c:	79db      	ldrb	r3, [r3, #7]
    4a3e:	b21b      	sxth	r3, r3
    4a40:	4313      	orrs	r3, r2
    4a42:	b21a      	sxth	r2, r3
    4a44:	230e      	movs	r3, #14
    4a46:	18fb      	adds	r3, r7, r3
    4a48:	801a      	strh	r2, [r3, #0]
	
	if(size  >    sizeof(cbuf))	{size=sizeof(cbuf);}
    4a4a:	230e      	movs	r3, #14
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	881a      	ldrh	r2, [r3, #0]
    4a50:	2396      	movs	r3, #150	; 0x96
    4a52:	005b      	lsls	r3, r3, #1
    4a54:	429a      	cmp	r2, r3
    4a56:	d904      	bls.n	4a62 <cmd_common_process+0x98>
    4a58:	230e      	movs	r3, #14
    4a5a:	18fb      	adds	r3, r7, r3
    4a5c:	2296      	movs	r2, #150	; 0x96
    4a5e:	0052      	lsls	r2, r2, #1
    4a60:	801a      	strh	r2, [r3, #0]
	if(size	 <    5			  )	{ return; }
    4a62:	230e      	movs	r3, #14
    4a64:	18fb      	adds	r3, r7, r3
    4a66:	881b      	ldrh	r3, [r3, #0]
    4a68:	2b04      	cmp	r3, #4
    4a6a:	d801      	bhi.n	4a70 <cmd_common_process+0xa6>
    4a6c:	f000 fe8b 	bl	5786 <cmd_common_process+0xdbc>
	
	memcpy(cbuf,(BYTE*)&eth_sock[0].data,size);
    4a70:	230e      	movs	r3, #14
    4a72:	18fb      	adds	r3, r7, r3
    4a74:	881a      	ldrh	r2, [r3, #0]
    4a76:	497e      	ldr	r1, [pc, #504]	; (4c70 <cmd_common_process+0x2a6>)
    4a78:	4b7e      	ldr	r3, [pc, #504]	; (4c74 <cmd_common_process+0x2aa>)
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b7e      	ldr	r3, [pc, #504]	; (4c78 <cmd_common_process+0x2ae>)
    4a7e:	4798      	blx	r3

	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    4a80:	230e      	movs	r3, #14
    4a82:	18fb      	adds	r3, r7, r3
    4a84:	881a      	ldrh	r2, [r3, #0]
    4a86:	4b7b      	ldr	r3, [pc, #492]	; (4c74 <cmd_common_process+0x2aa>)
    4a88:	0011      	movs	r1, r2
    4a8a:	0018      	movs	r0, r3
    4a8c:	4b7b      	ldr	r3, [pc, #492]	; (4c7c <cmd_common_process+0x2b2>)
    4a8e:	4798      	blx	r3
    4a90:	1e03      	subs	r3, r0, #0
    4a92:	d001      	beq.n	4a98 <cmd_common_process+0xce>
    4a94:	f000 fe79 	bl	578a <cmd_common_process+0xdc0>
	
	addr  = *(__packed WORD*)(cbuf+0);      wn=+sizeof(WORD);
    4a98:	4a76      	ldr	r2, [pc, #472]	; (4c74 <cmd_common_process+0x2aa>)
    4a9a:	1d3b      	adds	r3, r7, #4
    4a9c:	8812      	ldrh	r2, [r2, #0]
    4a9e:	801a      	strh	r2, [r3, #0]
    4aa0:	230a      	movs	r3, #10
    4aa2:	18fb      	adds	r3, r7, r3
    4aa4:	2202      	movs	r2, #2
    4aa6:	801a      	strh	r2, [r3, #0]

	if(addr !=  0){return;}
    4aa8:	1d3b      	adds	r3, r7, #4
    4aaa:	881b      	ldrh	r3, [r3, #0]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d001      	beq.n	4ab4 <cmd_common_process+0xea>
    4ab0:	f000 fe6d 	bl	578e <cmd_common_process+0xdc4>
	wn++;//cmd
    4ab4:	230a      	movs	r3, #10
    4ab6:	18fb      	adds	r3, r7, r3
    4ab8:	881a      	ldrh	r2, [r3, #0]
    4aba:	230a      	movs	r3, #10
    4abc:	18fb      	adds	r3, r7, r3
    4abe:	3201      	adds	r2, #1
    4ac0:	801a      	strh	r2, [r3, #0]
//logging
	if (!SRAV(4, &eth_sock[0].ip_addr[0], &ip_addrs)) {log_stat = 0;}
    4ac2:	4a6f      	ldr	r2, [pc, #444]	; (4c80 <cmd_common_process+0x2b6>)
    4ac4:	4b68      	ldr	r3, [pc, #416]	; (4c68 <cmd_common_process+0x29e>)
    4ac6:	0019      	movs	r1, r3
    4ac8:	2004      	movs	r0, #4
    4aca:	4b6e      	ldr	r3, [pc, #440]	; (4c84 <cmd_common_process+0x2ba>)
    4acc:	4798      	blx	r3
    4ace:	1e03      	subs	r3, r0, #0
    4ad0:	d102      	bne.n	4ad8 <cmd_common_process+0x10e>
    4ad2:	4b62      	ldr	r3, [pc, #392]	; (4c5c <cmd_common_process+0x292>)
    4ad4:	2200      	movs	r2, #0
    4ad6:	701a      	strb	r2, [r3, #0]
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    4ad8:	4b66      	ldr	r3, [pc, #408]	; (4c74 <cmd_common_process+0x2aa>)
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	2b00      	cmp	r3, #0
    4ade:	d103      	bne.n	4ae8 <cmd_common_process+0x11e>
    4ae0:	4b64      	ldr	r3, [pc, #400]	; (4c74 <cmd_common_process+0x2aa>)
    4ae2:	789b      	ldrb	r3, [r3, #2]
    4ae4:	2b20      	cmp	r3, #32
    4ae6:	d006      	beq.n	4af6 <cmd_common_process+0x12c>
    4ae8:	4b5c      	ldr	r3, [pc, #368]	; (4c5c <cmd_common_process+0x292>)
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	b2db      	uxtb	r3, r3
    4aee:	2b00      	cmp	r3, #0
    4af0:	d101      	bne.n	4af6 <cmd_common_process+0x12c>
    4af2:	f000 fe4e 	bl	5792 <cmd_common_process+0xdc8>
	
	
	
	
	switch(cbuf[2])
    4af6:	4b5f      	ldr	r3, [pc, #380]	; (4c74 <cmd_common_process+0x2aa>)
    4af8:	789b      	ldrb	r3, [r3, #2]
    4afa:	2b29      	cmp	r3, #41	; 0x29
    4afc:	d901      	bls.n	4b02 <cmd_common_process+0x138>
    4afe:	f000 fe4a 	bl	5796 <cmd_common_process+0xdcc>
    4b02:	009a      	lsls	r2, r3, #2
    4b04:	4b60      	ldr	r3, [pc, #384]	; (4c88 <cmd_common_process+0x2be>)
    4b06:	18d3      	adds	r3, r2, r3
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	469f      	mov	pc, r3
	{
		case 0x00:	if(size  !=  9) { return; }
    4b0c:	230e      	movs	r3, #14
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	881b      	ldrh	r3, [r3, #0]
    4b12:	2b09      	cmp	r3, #9
    4b14:	d001      	beq.n	4b1a <cmd_common_process+0x150>
    4b16:	f000 fe40 	bl	579a <cmd_common_process+0xdd0>
					rsv_time = num_aus_byte(DW_LEN, &cbuf[3], R_SIDE);
    4b1a:	4b5c      	ldr	r3, [pc, #368]	; (4c8c <cmd_common_process+0x2c2>)
    4b1c:	2200      	movs	r2, #0
    4b1e:	0019      	movs	r1, r3
    4b20:	2004      	movs	r0, #4
    4b22:	4b5b      	ldr	r3, [pc, #364]	; (4c90 <cmd_common_process+0x2c6>)
    4b24:	4798      	blx	r3
    4b26:	0002      	movs	r2, r0
    4b28:	4b5a      	ldr	r3, [pc, #360]	; (4c94 <cmd_common_process+0x2ca>)
    4b2a:	601a      	str	r2, [r3, #0]
					loggin_timeout = 0;
    4b2c:	4b4c      	ldr	r3, [pc, #304]	; (4c60 <cmd_common_process+0x296>)
    4b2e:	2200      	movs	r2, #0
    4b30:	601a      	str	r2, [r3, #0]
					send_admin();
    4b32:	230a      	movs	r3, #10
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	881b      	ldrh	r3, [r3, #0]
    4b38:	4a4e      	ldr	r2, [pc, #312]	; (4c74 <cmd_common_process+0x2aa>)
    4b3a:	2101      	movs	r1, #1
    4b3c:	54d1      	strb	r1, [r2, r3]
    4b3e:	230a      	movs	r3, #10
    4b40:	18fb      	adds	r3, r7, r3
    4b42:	881a      	ldrh	r2, [r3, #0]
    4b44:	230a      	movs	r3, #10
    4b46:	18fb      	adds	r3, r7, r3
    4b48:	3201      	adds	r2, #1
    4b4a:	801a      	strh	r2, [r3, #0]
		break;
    4b4c:	f000 fdcb 	bl	56e6 <cmd_common_process+0xd1c>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    4b50:	230e      	movs	r3, #14
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	881b      	ldrh	r3, [r3, #0]
    4b56:	2b06      	cmp	r3, #6
    4b58:	d001      	beq.n	4b5e <cmd_common_process+0x194>
    4b5a:	f000 fe20 	bl	579e <cmd_common_process+0xdd4>
					if(cbuf[wn]==0x01)
    4b5e:	230a      	movs	r3, #10
    4b60:	18fb      	adds	r3, r7, r3
    4b62:	881b      	ldrh	r3, [r3, #0]
    4b64:	4a43      	ldr	r2, [pc, #268]	; (4c74 <cmd_common_process+0x2aa>)
    4b66:	5cd3      	ldrb	r3, [r2, r3]
    4b68:	2b01      	cmp	r3, #1
    4b6a:	d13d      	bne.n	4be8 <cmd_common_process+0x21e>
					{
						cbuf[wn]  = (BYTE)UID_WHO_ARE_YOU;								wn += sizeof(BYTE);
    4b6c:	230a      	movs	r3, #10
    4b6e:	18fb      	adds	r3, r7, r3
    4b70:	881b      	ldrh	r3, [r3, #0]
    4b72:	4a40      	ldr	r2, [pc, #256]	; (4c74 <cmd_common_process+0x2aa>)
    4b74:	2101      	movs	r1, #1
    4b76:	54d1      	strb	r1, [r2, r3]
    4b78:	230a      	movs	r3, #10
    4b7a:	18fb      	adds	r3, r7, r3
    4b7c:	220a      	movs	r2, #10
    4b7e:	18ba      	adds	r2, r7, r2
    4b80:	8812      	ldrh	r2, [r2, #0]
    4b82:	3201      	adds	r2, #1
    4b84:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_WHO_ARE_YOU>>8);							wn += sizeof(BYTE);
    4b86:	230a      	movs	r3, #10
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	881b      	ldrh	r3, [r3, #0]
    4b8c:	4a39      	ldr	r2, [pc, #228]	; (4c74 <cmd_common_process+0x2aa>)
    4b8e:	2180      	movs	r1, #128	; 0x80
    4b90:	54d1      	strb	r1, [r2, r3]
    4b92:	230a      	movs	r3, #10
    4b94:	18fb      	adds	r3, r7, r3
    4b96:	220a      	movs	r2, #10
    4b98:	18ba      	adds	r2, r7, r2
    4b9a:	8812      	ldrh	r2, [r2, #0]
    4b9c:	3201      	adds	r2, #1
    4b9e:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],MODEL,sizeof(MODEL));							wn +=sizeof(MODEL);
    4ba0:	230a      	movs	r3, #10
    4ba2:	18fb      	adds	r3, r7, r3
    4ba4:	881a      	ldrh	r2, [r3, #0]
    4ba6:	4b33      	ldr	r3, [pc, #204]	; (4c74 <cmd_common_process+0x2aa>)
    4ba8:	18d3      	adds	r3, r2, r3
    4baa:	493b      	ldr	r1, [pc, #236]	; (4c98 <cmd_common_process+0x2ce>)
    4bac:	220d      	movs	r2, #13
    4bae:	0018      	movs	r0, r3
    4bb0:	4b31      	ldr	r3, [pc, #196]	; (4c78 <cmd_common_process+0x2ae>)
    4bb2:	4798      	blx	r3
    4bb4:	230a      	movs	r3, #10
    4bb6:	18fb      	adds	r3, r7, r3
    4bb8:	220a      	movs	r2, #10
    4bba:	18ba      	adds	r2, r7, r2
    4bbc:	8812      	ldrh	r2, [r2, #0]
    4bbe:	320d      	adds	r2, #13
    4bc0:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],VERSION,sizeof(VERSION));						wn +=sizeof(VERSION);
    4bc2:	230a      	movs	r3, #10
    4bc4:	18fb      	adds	r3, r7, r3
    4bc6:	881a      	ldrh	r2, [r3, #0]
    4bc8:	4b2a      	ldr	r3, [pc, #168]	; (4c74 <cmd_common_process+0x2aa>)
    4bca:	18d3      	adds	r3, r2, r3
    4bcc:	4933      	ldr	r1, [pc, #204]	; (4c9c <cmd_common_process+0x2d2>)
    4bce:	2209      	movs	r2, #9
    4bd0:	0018      	movs	r0, r3
    4bd2:	4b29      	ldr	r3, [pc, #164]	; (4c78 <cmd_common_process+0x2ae>)
    4bd4:	4798      	blx	r3
    4bd6:	230a      	movs	r3, #10
    4bd8:	18fb      	adds	r3, r7, r3
    4bda:	220a      	movs	r2, #10
    4bdc:	18ba      	adds	r2, r7, r2
    4bde:	8812      	ldrh	r2, [r2, #0]
    4be0:	3209      	adds	r2, #9
    4be2:	801a      	strh	r2, [r3, #0]
						break;
    4be4:	f000 fd7f 	bl	56e6 <cmd_common_process+0xd1c>
					}
		
					if(cbuf[wn]==0x02)
    4be8:	230a      	movs	r3, #10
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	881b      	ldrh	r3, [r3, #0]
    4bee:	4a21      	ldr	r2, [pc, #132]	; (4c74 <cmd_common_process+0x2aa>)
    4bf0:	5cd3      	ldrb	r3, [r2, r3]
    4bf2:	2b02      	cmp	r3, #2
    4bf4:	d001      	beq.n	4bfa <cmd_common_process+0x230>
    4bf6:	f000 fd41 	bl	567c <cmd_common_process+0xcb2>
					{
						cbuf[wn]  = (BYTE)UID_STATUS_PACK;								wn += sizeof(BYTE);
    4bfa:	230a      	movs	r3, #10
    4bfc:	18fb      	adds	r3, r7, r3
    4bfe:	881b      	ldrh	r3, [r3, #0]
    4c00:	4a1c      	ldr	r2, [pc, #112]	; (4c74 <cmd_common_process+0x2aa>)
    4c02:	2102      	movs	r1, #2
    4c04:	54d1      	strb	r1, [r2, r3]
    4c06:	230a      	movs	r3, #10
    4c08:	18fb      	adds	r3, r7, r3
    4c0a:	220a      	movs	r2, #10
    4c0c:	18ba      	adds	r2, r7, r2
    4c0e:	8812      	ldrh	r2, [r2, #0]
    4c10:	3201      	adds	r2, #1
    4c12:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_STATUS_PACK>>8);							wn += sizeof(BYTE); //uid device
    4c14:	230a      	movs	r3, #10
    4c16:	18fb      	adds	r3, r7, r3
    4c18:	881b      	ldrh	r3, [r3, #0]
    4c1a:	4a16      	ldr	r2, [pc, #88]	; (4c74 <cmd_common_process+0x2aa>)
    4c1c:	2180      	movs	r1, #128	; 0x80
    4c1e:	54d1      	strb	r1, [r2, r3]
    4c20:	230a      	movs	r3, #10
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	220a      	movs	r2, #10
    4c26:	18ba      	adds	r2, r7, r2
    4c28:	8812      	ldrh	r2, [r2, #0]
    4c2a:	3201      	adds	r2, #1
    4c2c:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],(BYTE*)&TTL,4);								wn += sizeof(DWORD);//TTL
    4c2e:	230a      	movs	r3, #10
    4c30:	18fb      	adds	r3, r7, r3
    4c32:	881a      	ldrh	r2, [r3, #0]
    4c34:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <cmd_common_process+0x2aa>)
    4c36:	18d3      	adds	r3, r2, r3
    4c38:	4919      	ldr	r1, [pc, #100]	; (4ca0 <cmd_common_process+0x2d6>)
    4c3a:	2204      	movs	r2, #4
    4c3c:	0018      	movs	r0, r3
    4c3e:	4b0e      	ldr	r3, [pc, #56]	; (4c78 <cmd_common_process+0x2ae>)
    4c40:	4798      	blx	r3
    4c42:	230a      	movs	r3, #10
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	220a      	movs	r2, #10
    4c48:	18ba      	adds	r2, r7, r2
    4c4a:	8812      	ldrh	r2, [r2, #0]
    4c4c:	3204      	adds	r2, #4
    4c4e:	801a      	strh	r2, [r3, #0]
			
						for (i = 0; i < 4; i++)
    4c50:	2309      	movs	r3, #9
    4c52:	18fb      	adds	r3, r7, r3
    4c54:	2200      	movs	r2, #0
    4c56:	701a      	strb	r2, [r3, #0]
    4c58:	e0ba      	b.n	4dd0 <cmd_common_process+0x406>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	20000450 	.word	0x20000450
    4c60:	20000470 	.word	0x20000470
    4c64:	002dc6c0 	.word	0x002dc6c0
    4c68:	200005cc 	.word	0x200005cc
    4c6c:	000005d1 	.word	0x000005d1
    4c70:	200005d4 	.word	0x200005d4
    4c74:	200004a0 	.word	0x200004a0
    4c78:	0000c825 	.word	0x0000c825
    4c7c:	00005d39 	.word	0x00005d39
    4c80:	2000049c 	.word	0x2000049c
    4c84:	0000495b 	.word	0x0000495b
    4c88:	0000cac0 	.word	0x0000cac0
    4c8c:	200004a3 	.word	0x200004a3
    4c90:	000048c5 	.word	0x000048c5
    4c94:	20000454 	.word	0x20000454
    4c98:	0000caa4 	.word	0x0000caa4
    4c9c:	0000cab4 	.word	0x0000cab4
    4ca0:	2000047c 	.word	0x2000047c
							{
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.rx,4);		wn += sizeof(DWORD);
    4ca4:	230a      	movs	r3, #10
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	881a      	ldrh	r2, [r3, #0]
    4caa:	4bd2      	ldr	r3, [pc, #840]	; (4ff4 <cmd_common_process+0x62a>)
    4cac:	18d0      	adds	r0, r2, r3
    4cae:	2309      	movs	r3, #9
    4cb0:	18fb      	adds	r3, r7, r3
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	3301      	adds	r3, #1
    4cb6:	4ad0      	ldr	r2, [pc, #832]	; (4ff8 <cmd_common_process+0x62e>)
    4cb8:	4353      	muls	r3, r2
    4cba:	22ba      	movs	r2, #186	; 0xba
    4cbc:	00d2      	lsls	r2, r2, #3
    4cbe:	189a      	adds	r2, r3, r2
    4cc0:	4bce      	ldr	r3, [pc, #824]	; (4ffc <cmd_common_process+0x632>)
    4cc2:	18d3      	adds	r3, r2, r3
    4cc4:	330b      	adds	r3, #11
    4cc6:	2204      	movs	r2, #4
    4cc8:	0019      	movs	r1, r3
    4cca:	4bcd      	ldr	r3, [pc, #820]	; (5000 <cmd_common_process+0x636>)
    4ccc:	4798      	blx	r3
    4cce:	230a      	movs	r3, #10
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	220a      	movs	r2, #10
    4cd4:	18ba      	adds	r2, r7, r2
    4cd6:	8812      	ldrh	r2, [r2, #0]
    4cd8:	3204      	adds	r2, #4
    4cda:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.tx,4);		wn += sizeof(DWORD);
    4cdc:	230a      	movs	r3, #10
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	881a      	ldrh	r2, [r3, #0]
    4ce2:	4bc4      	ldr	r3, [pc, #784]	; (4ff4 <cmd_common_process+0x62a>)
    4ce4:	18d0      	adds	r0, r2, r3
    4ce6:	2309      	movs	r3, #9
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	3301      	adds	r3, #1
    4cee:	4ac2      	ldr	r2, [pc, #776]	; (4ff8 <cmd_common_process+0x62e>)
    4cf0:	4353      	muls	r3, r2
    4cf2:	22ba      	movs	r2, #186	; 0xba
    4cf4:	00d2      	lsls	r2, r2, #3
    4cf6:	189a      	adds	r2, r3, r2
    4cf8:	4bc0      	ldr	r3, [pc, #768]	; (4ffc <cmd_common_process+0x632>)
    4cfa:	18d3      	adds	r3, r2, r3
    4cfc:	3307      	adds	r3, #7
    4cfe:	2204      	movs	r2, #4
    4d00:	0019      	movs	r1, r3
    4d02:	4bbf      	ldr	r3, [pc, #764]	; (5000 <cmd_common_process+0x636>)
    4d04:	4798      	blx	r3
    4d06:	230a      	movs	r3, #10
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	220a      	movs	r2, #10
    4d0c:	18ba      	adds	r2, r7, r2
    4d0e:	8812      	ldrh	r2, [r2, #0]
    4d10:	3204      	adds	r2, #4
    4d12:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.rx,4);			wn += sizeof(DWORD);
    4d14:	230a      	movs	r3, #10
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	881a      	ldrh	r2, [r3, #0]
    4d1a:	4bb6      	ldr	r3, [pc, #728]	; (4ff4 <cmd_common_process+0x62a>)
    4d1c:	18d0      	adds	r0, r2, r3
    4d1e:	2309      	movs	r3, #9
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	781a      	ldrb	r2, [r3, #0]
    4d24:	0013      	movs	r3, r2
    4d26:	00db      	lsls	r3, r3, #3
    4d28:	189b      	adds	r3, r3, r2
    4d2a:	019b      	lsls	r3, r3, #6
    4d2c:	228c      	movs	r2, #140	; 0x8c
    4d2e:	0092      	lsls	r2, r2, #2
    4d30:	189a      	adds	r2, r3, r2
    4d32:	4bb4      	ldr	r3, [pc, #720]	; (5004 <cmd_common_process+0x63a>)
    4d34:	18d3      	adds	r3, r2, r3
    4d36:	3308      	adds	r3, #8
    4d38:	2204      	movs	r2, #4
    4d3a:	0019      	movs	r1, r3
    4d3c:	4bb0      	ldr	r3, [pc, #704]	; (5000 <cmd_common_process+0x636>)
    4d3e:	4798      	blx	r3
    4d40:	230a      	movs	r3, #10
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	220a      	movs	r2, #10
    4d46:	18ba      	adds	r2, r7, r2
    4d48:	8812      	ldrh	r2, [r2, #0]
    4d4a:	3204      	adds	r2, #4
    4d4c:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.tx,4);			wn += sizeof(DWORD);
    4d4e:	230a      	movs	r3, #10
    4d50:	18fb      	adds	r3, r7, r3
    4d52:	881a      	ldrh	r2, [r3, #0]
    4d54:	4ba7      	ldr	r3, [pc, #668]	; (4ff4 <cmd_common_process+0x62a>)
    4d56:	18d0      	adds	r0, r2, r3
    4d58:	2309      	movs	r3, #9
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	781a      	ldrb	r2, [r3, #0]
    4d5e:	0013      	movs	r3, r2
    4d60:	00db      	lsls	r3, r3, #3
    4d62:	189b      	adds	r3, r3, r2
    4d64:	019b      	lsls	r3, r3, #6
    4d66:	228c      	movs	r2, #140	; 0x8c
    4d68:	0092      	lsls	r2, r2, #2
    4d6a:	189a      	adds	r2, r3, r2
    4d6c:	4ba5      	ldr	r3, [pc, #660]	; (5004 <cmd_common_process+0x63a>)
    4d6e:	18d3      	adds	r3, r2, r3
    4d70:	3304      	adds	r3, #4
    4d72:	2204      	movs	r2, #4
    4d74:	0019      	movs	r1, r3
    4d76:	4ba2      	ldr	r3, [pc, #648]	; (5000 <cmd_common_process+0x636>)
    4d78:	4798      	blx	r3
    4d7a:	230a      	movs	r3, #10
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	220a      	movs	r2, #10
    4d80:	18ba      	adds	r2, r7, r2
    4d82:	8812      	ldrh	r2, [r2, #0]
    4d84:	3204      	adds	r2, #4
    4d86:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].dt,2);						wn += sizeof(WORD);//dt port0
    4d88:	230a      	movs	r3, #10
    4d8a:	18fb      	adds	r3, r7, r3
    4d8c:	881a      	ldrh	r2, [r3, #0]
    4d8e:	4b99      	ldr	r3, [pc, #612]	; (4ff4 <cmd_common_process+0x62a>)
    4d90:	18d0      	adds	r0, r2, r3
    4d92:	2309      	movs	r3, #9
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	781a      	ldrb	r2, [r3, #0]
    4d98:	0013      	movs	r3, r2
    4d9a:	00db      	lsls	r3, r3, #3
    4d9c:	189b      	adds	r3, r3, r2
    4d9e:	019b      	lsls	r3, r3, #6
    4da0:	2286      	movs	r2, #134	; 0x86
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	189a      	adds	r2, r3, r2
    4da6:	4b97      	ldr	r3, [pc, #604]	; (5004 <cmd_common_process+0x63a>)
    4da8:	18d3      	adds	r3, r2, r3
    4daa:	3302      	adds	r3, #2
    4dac:	2202      	movs	r2, #2
    4dae:	0019      	movs	r1, r3
    4db0:	4b93      	ldr	r3, [pc, #588]	; (5000 <cmd_common_process+0x636>)
    4db2:	4798      	blx	r3
    4db4:	230a      	movs	r3, #10
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	220a      	movs	r2, #10
    4dba:	18ba      	adds	r2, r7, r2
    4dbc:	8812      	ldrh	r2, [r2, #0]
    4dbe:	3202      	adds	r2, #2
    4dc0:	801a      	strh	r2, [r3, #0]
						for (i = 0; i < 4; i++)
    4dc2:	2309      	movs	r3, #9
    4dc4:	18fb      	adds	r3, r7, r3
    4dc6:	781a      	ldrb	r2, [r3, #0]
    4dc8:	2309      	movs	r3, #9
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	3201      	adds	r2, #1
    4dce:	701a      	strb	r2, [r3, #0]
    4dd0:	2309      	movs	r3, #9
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	781b      	ldrb	r3, [r3, #0]
    4dd6:	2b03      	cmp	r3, #3
    4dd8:	d800      	bhi.n	4ddc <cmd_common_process+0x412>
    4dda:	e763      	b.n	4ca4 <cmd_common_process+0x2da>
							}			
					}
		break;
    4ddc:	f000 fc4e 	bl	567c <cmd_common_process+0xcb2>
		//......................................................................
		//......................................................................
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    4de0:	230e      	movs	r3, #14
    4de2:	18fb      	adds	r3, r7, r3
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	2b07      	cmp	r3, #7
    4de8:	d001      	beq.n	4dee <cmd_common_process+0x424>
    4dea:	f000 fcda 	bl	57a2 <cmd_common_process+0xdd8>
					check_permission();	
    4dee:	4b86      	ldr	r3, [pc, #536]	; (5008 <cmd_common_process+0x63e>)
    4df0:	781b      	ldrb	r3, [r3, #0]
    4df2:	2b01      	cmp	r3, #1
    4df4:	d00e      	beq.n	4e14 <cmd_common_process+0x44a>
    4df6:	230a      	movs	r3, #10
    4df8:	18fb      	adds	r3, r7, r3
    4dfa:	881b      	ldrh	r3, [r3, #0]
    4dfc:	4a7d      	ldr	r2, [pc, #500]	; (4ff4 <cmd_common_process+0x62a>)
    4dfe:	2100      	movs	r1, #0
    4e00:	54d1      	strb	r1, [r2, r3]
    4e02:	230a      	movs	r3, #10
    4e04:	18fb      	adds	r3, r7, r3
    4e06:	881a      	ldrh	r2, [r3, #0]
    4e08:	230a      	movs	r3, #10
    4e0a:	18fb      	adds	r3, r7, r3
    4e0c:	3201      	adds	r2, #1
    4e0e:	801a      	strh	r2, [r3, #0]
    4e10:	f000 fc69 	bl	56e6 <cmd_common_process+0xd1c>
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4e14:	4b77      	ldr	r3, [pc, #476]	; (4ff4 <cmd_common_process+0x62a>)
    4e16:	78db      	ldrb	r3, [r3, #3]
    4e18:	b21a      	sxth	r2, r3
    4e1a:	4b76      	ldr	r3, [pc, #472]	; (4ff4 <cmd_common_process+0x62a>)
    4e1c:	791b      	ldrb	r3, [r3, #4]
    4e1e:	021b      	lsls	r3, r3, #8
    4e20:	b21b      	sxth	r3, r3
    4e22:	4313      	orrs	r3, r2
    4e24:	b21a      	sxth	r2, r3
    4e26:	003b      	movs	r3, r7
    4e28:	801a      	strh	r2, [r3, #0]
    4e2a:	230a      	movs	r3, #10
    4e2c:	18fb      	adds	r3, r7, r3
    4e2e:	220a      	movs	r2, #10
    4e30:	18ba      	adds	r2, r7, r2
    4e32:	8812      	ldrh	r2, [r2, #0]
    4e34:	3202      	adds	r2, #2
    4e36:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_1) - ixo;
    4e38:	230c      	movs	r3, #12
    4e3a:	18fb      	adds	r3, r7, r3
    4e3c:	003a      	movs	r2, r7
    4e3e:	8812      	ldrh	r2, [r2, #0]
    4e40:	2180      	movs	r1, #128	; 0x80
    4e42:	0049      	lsls	r1, r1, #1
    4e44:	1a8a      	subs	r2, r1, r2
    4e46:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_1)	) { break;  }
    4e48:	003b      	movs	r3, r7
    4e4a:	881a      	ldrh	r2, [r3, #0]
    4e4c:	2380      	movs	r3, #128	; 0x80
    4e4e:	005b      	lsls	r3, r3, #1
    4e50:	429a      	cmp	r2, r3
    4e52:	d901      	bls.n	4e58 <cmd_common_process+0x48e>
    4e54:	f000 fc14 	bl	5680 <cmd_common_process+0xcb6>
					if(cnt > 256			) { cnt=256;  }
    4e58:	230c      	movs	r3, #12
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	881a      	ldrh	r2, [r3, #0]
    4e5e:	2380      	movs	r3, #128	; 0x80
    4e60:	005b      	lsls	r3, r3, #1
    4e62:	429a      	cmp	r2, r3
    4e64:	d904      	bls.n	4e70 <cmd_common_process+0x4a6>
    4e66:	230c      	movs	r3, #12
    4e68:	18fb      	adds	r3, r7, r3
    4e6a:	2280      	movs	r2, #128	; 0x80
    4e6c:	0052      	lsls	r2, r2, #1
    4e6e:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4e70:	230a      	movs	r3, #10
    4e72:	18fb      	adds	r3, r7, r3
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	220c      	movs	r2, #12
    4e78:	18ba      	adds	r2, r7, r2
    4e7a:	8812      	ldrh	r2, [r2, #0]
    4e7c:	b2d1      	uxtb	r1, r2
    4e7e:	4a5d      	ldr	r2, [pc, #372]	; (4ff4 <cmd_common_process+0x62a>)
    4e80:	54d1      	strb	r1, [r2, r3]
    4e82:	230a      	movs	r3, #10
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	220a      	movs	r2, #10
    4e88:	18ba      	adds	r2, r7, r2
    4e8a:	8812      	ldrh	r2, [r2, #0]
    4e8c:	3201      	adds	r2, #1
    4e8e:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4e90:	230a      	movs	r3, #10
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	881b      	ldrh	r3, [r3, #0]
    4e96:	220c      	movs	r2, #12
    4e98:	18ba      	adds	r2, r7, r2
    4e9a:	8812      	ldrh	r2, [r2, #0]
    4e9c:	0a12      	lsrs	r2, r2, #8
    4e9e:	b292      	uxth	r2, r2
    4ea0:	b2d1      	uxtb	r1, r2
    4ea2:	4a54      	ldr	r2, [pc, #336]	; (4ff4 <cmd_common_process+0x62a>)
    4ea4:	54d1      	strb	r1, [r2, r3]
    4ea6:	230a      	movs	r3, #10
    4ea8:	18fb      	adds	r3, r7, r3
    4eaa:	220a      	movs	r2, #10
    4eac:	18ba      	adds	r2, r7, r2
    4eae:	8812      	ldrh	r2, [r2, #0]
    4eb0:	3201      	adds	r2, #1
    4eb2:	801a      	strh	r2, [r3, #0]

					memcpy(&cbuf[wn],((BYTE*)&cfg_1)+ixo,cnt);				wn+=cnt;
    4eb4:	230a      	movs	r3, #10
    4eb6:	18fb      	adds	r3, r7, r3
    4eb8:	881a      	ldrh	r2, [r3, #0]
    4eba:	4b4e      	ldr	r3, [pc, #312]	; (4ff4 <cmd_common_process+0x62a>)
    4ebc:	18d0      	adds	r0, r2, r3
    4ebe:	003b      	movs	r3, r7
    4ec0:	881a      	ldrh	r2, [r3, #0]
    4ec2:	4b52      	ldr	r3, [pc, #328]	; (500c <cmd_common_process+0x642>)
    4ec4:	18d1      	adds	r1, r2, r3
    4ec6:	230c      	movs	r3, #12
    4ec8:	18fb      	adds	r3, r7, r3
    4eca:	881b      	ldrh	r3, [r3, #0]
    4ecc:	001a      	movs	r2, r3
    4ece:	4b4c      	ldr	r3, [pc, #304]	; (5000 <cmd_common_process+0x636>)
    4ed0:	4798      	blx	r3
    4ed2:	230a      	movs	r3, #10
    4ed4:	18fb      	adds	r3, r7, r3
    4ed6:	220a      	movs	r2, #10
    4ed8:	18b9      	adds	r1, r7, r2
    4eda:	220c      	movs	r2, #12
    4edc:	18ba      	adds	r2, r7, r2
    4ede:	8809      	ldrh	r1, [r1, #0]
    4ee0:	8812      	ldrh	r2, [r2, #0]
    4ee2:	188a      	adds	r2, r1, r2
    4ee4:	801a      	strh	r2, [r3, #0]
		break;
    4ee6:	f000 fbfe 	bl	56e6 <cmd_common_process+0xd1c>

		//......................................................................
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    4eea:	230e      	movs	r3, #14
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	881b      	ldrh	r3, [r3, #0]
    4ef0:	2b07      	cmp	r3, #7
    4ef2:	d001      	beq.n	4ef8 <cmd_common_process+0x52e>
    4ef4:	f000 fc57 	bl	57a6 <cmd_common_process+0xddc>
					check_permission();	
    4ef8:	4b43      	ldr	r3, [pc, #268]	; (5008 <cmd_common_process+0x63e>)
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	2b01      	cmp	r3, #1
    4efe:	d00e      	beq.n	4f1e <cmd_common_process+0x554>
    4f00:	230a      	movs	r3, #10
    4f02:	18fb      	adds	r3, r7, r3
    4f04:	881b      	ldrh	r3, [r3, #0]
    4f06:	4a3b      	ldr	r2, [pc, #236]	; (4ff4 <cmd_common_process+0x62a>)
    4f08:	2100      	movs	r1, #0
    4f0a:	54d1      	strb	r1, [r2, r3]
    4f0c:	230a      	movs	r3, #10
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	881a      	ldrh	r2, [r3, #0]
    4f12:	230a      	movs	r3, #10
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	3201      	adds	r2, #1
    4f18:	801a      	strh	r2, [r3, #0]
    4f1a:	f000 fbe4 	bl	56e6 <cmd_common_process+0xd1c>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4f1e:	4b35      	ldr	r3, [pc, #212]	; (4ff4 <cmd_common_process+0x62a>)
    4f20:	78db      	ldrb	r3, [r3, #3]
    4f22:	b21a      	sxth	r2, r3
    4f24:	4b33      	ldr	r3, [pc, #204]	; (4ff4 <cmd_common_process+0x62a>)
    4f26:	791b      	ldrb	r3, [r3, #4]
    4f28:	021b      	lsls	r3, r3, #8
    4f2a:	b21b      	sxth	r3, r3
    4f2c:	4313      	orrs	r3, r2
    4f2e:	b21a      	sxth	r2, r3
    4f30:	003b      	movs	r3, r7
    4f32:	801a      	strh	r2, [r3, #0]
    4f34:	230a      	movs	r3, #10
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	220a      	movs	r2, #10
    4f3a:	18ba      	adds	r2, r7, r2
    4f3c:	8812      	ldrh	r2, [r2, #0]
    4f3e:	3202      	adds	r2, #2
    4f40:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_2) - ixo;
    4f42:	230c      	movs	r3, #12
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	003a      	movs	r2, r7
    4f48:	8812      	ldrh	r2, [r2, #0]
    4f4a:	2180      	movs	r1, #128	; 0x80
    4f4c:	0049      	lsls	r1, r1, #1
    4f4e:	1a8a      	subs	r2, r1, r2
    4f50:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_2)	) { break;  }
    4f52:	003b      	movs	r3, r7
    4f54:	881a      	ldrh	r2, [r3, #0]
    4f56:	2380      	movs	r3, #128	; 0x80
    4f58:	005b      	lsls	r3, r3, #1
    4f5a:	429a      	cmp	r2, r3
    4f5c:	d901      	bls.n	4f62 <cmd_common_process+0x598>
    4f5e:	f000 fb91 	bl	5684 <cmd_common_process+0xcba>
					if(cnt > 256			) { cnt=256;  }
    4f62:	230c      	movs	r3, #12
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	881a      	ldrh	r2, [r3, #0]
    4f68:	2380      	movs	r3, #128	; 0x80
    4f6a:	005b      	lsls	r3, r3, #1
    4f6c:	429a      	cmp	r2, r3
    4f6e:	d904      	bls.n	4f7a <cmd_common_process+0x5b0>
    4f70:	230c      	movs	r3, #12
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	2280      	movs	r2, #128	; 0x80
    4f76:	0052      	lsls	r2, r2, #1
    4f78:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4f7a:	230a      	movs	r3, #10
    4f7c:	18fb      	adds	r3, r7, r3
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	220c      	movs	r2, #12
    4f82:	18ba      	adds	r2, r7, r2
    4f84:	8812      	ldrh	r2, [r2, #0]
    4f86:	b2d1      	uxtb	r1, r2
    4f88:	4a1a      	ldr	r2, [pc, #104]	; (4ff4 <cmd_common_process+0x62a>)
    4f8a:	54d1      	strb	r1, [r2, r3]
    4f8c:	230a      	movs	r3, #10
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	220a      	movs	r2, #10
    4f92:	18ba      	adds	r2, r7, r2
    4f94:	8812      	ldrh	r2, [r2, #0]
    4f96:	3201      	adds	r2, #1
    4f98:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4f9a:	230a      	movs	r3, #10
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	220c      	movs	r2, #12
    4fa2:	18ba      	adds	r2, r7, r2
    4fa4:	8812      	ldrh	r2, [r2, #0]
    4fa6:	0a12      	lsrs	r2, r2, #8
    4fa8:	b292      	uxth	r2, r2
    4faa:	b2d1      	uxtb	r1, r2
    4fac:	4a11      	ldr	r2, [pc, #68]	; (4ff4 <cmd_common_process+0x62a>)
    4fae:	54d1      	strb	r1, [r2, r3]
    4fb0:	230a      	movs	r3, #10
    4fb2:	18fb      	adds	r3, r7, r3
    4fb4:	220a      	movs	r2, #10
    4fb6:	18ba      	adds	r2, r7, r2
    4fb8:	8812      	ldrh	r2, [r2, #0]
    4fba:	3201      	adds	r2, #1
    4fbc:	801a      	strh	r2, [r3, #0]

					
					memcpy(&cbuf[wn],((BYTE*)&cfg_2)+ixo,cnt);				wn+=cnt;
    4fbe:	230a      	movs	r3, #10
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	881a      	ldrh	r2, [r3, #0]
    4fc4:	4b0b      	ldr	r3, [pc, #44]	; (4ff4 <cmd_common_process+0x62a>)
    4fc6:	18d0      	adds	r0, r2, r3
    4fc8:	003b      	movs	r3, r7
    4fca:	881a      	ldrh	r2, [r3, #0]
    4fcc:	4b10      	ldr	r3, [pc, #64]	; (5010 <cmd_common_process+0x646>)
    4fce:	18d1      	adds	r1, r2, r3
    4fd0:	230c      	movs	r3, #12
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	881b      	ldrh	r3, [r3, #0]
    4fd6:	001a      	movs	r2, r3
    4fd8:	4b09      	ldr	r3, [pc, #36]	; (5000 <cmd_common_process+0x636>)
    4fda:	4798      	blx	r3
    4fdc:	230a      	movs	r3, #10
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	220a      	movs	r2, #10
    4fe2:	18b9      	adds	r1, r7, r2
    4fe4:	220c      	movs	r2, #12
    4fe6:	18ba      	adds	r2, r7, r2
    4fe8:	8809      	ldrh	r1, [r1, #0]
    4fea:	8812      	ldrh	r2, [r2, #0]
    4fec:	188a      	adds	r2, r1, r2
    4fee:	801a      	strh	r2, [r3, #0]
		break;
    4ff0:	f000 fb79 	bl	56e6 <cmd_common_process+0xd1c>
    4ff4:	200004a0 	.word	0x200004a0
    4ff8:	000005e5 	.word	0x000005e5
    4ffc:	200005cc 	.word	0x200005cc
    5000:	0000c825 	.word	0x0000c825
    5004:	200031fc 	.word	0x200031fc
    5008:	20000451 	.word	0x20000451
    500c:	20003dc4 	.word	0x20003dc4
    5010:	20003bc4 	.word	0x20003bc4

		//......................................................................

		case 0x10:	if(size <  6) { return; }
    5014:	230e      	movs	r3, #14
    5016:	18fb      	adds	r3, r7, r3
    5018:	881b      	ldrh	r3, [r3, #0]
    501a:	2b05      	cmp	r3, #5
    501c:	d801      	bhi.n	5022 <cmd_common_process+0x658>
    501e:	f000 fbc4 	bl	57aa <cmd_common_process+0xde0>
					wn+=iap_process(&cbuf[wn],size-5);
    5022:	230a      	movs	r3, #10
    5024:	18fb      	adds	r3, r7, r3
    5026:	881a      	ldrh	r2, [r3, #0]
    5028:	4bc2      	ldr	r3, [pc, #776]	; (5334 <cmd_common_process+0x96a>)
    502a:	18d2      	adds	r2, r2, r3
    502c:	230e      	movs	r3, #14
    502e:	18fb      	adds	r3, r7, r3
    5030:	881b      	ldrh	r3, [r3, #0]
    5032:	3b05      	subs	r3, #5
    5034:	b29b      	uxth	r3, r3
    5036:	0019      	movs	r1, r3
    5038:	0010      	movs	r0, r2
    503a:	4bbf      	ldr	r3, [pc, #764]	; (5338 <cmd_common_process+0x96e>)
    503c:	4798      	blx	r3
    503e:	0003      	movs	r3, r0
    5040:	0019      	movs	r1, r3
    5042:	230a      	movs	r3, #10
    5044:	18fb      	adds	r3, r7, r3
    5046:	220a      	movs	r2, #10
    5048:	18ba      	adds	r2, r7, r2
    504a:	8812      	ldrh	r2, [r2, #0]
    504c:	188a      	adds	r2, r1, r2
    504e:	801a      	strh	r2, [r3, #0]
		break;
    5050:	e349      	b.n	56e6 <cmd_common_process+0xd1c>

		//......................................................................
		case 0x17:	if(size  <  7) { return; }
    5052:	230e      	movs	r3, #14
    5054:	18fb      	adds	r3, r7, r3
    5056:	881b      	ldrh	r3, [r3, #0]
    5058:	2b06      	cmp	r3, #6
    505a:	d801      	bhi.n	5060 <cmd_common_process+0x696>
    505c:	f000 fba7 	bl	57ae <cmd_common_process+0xde4>
		
					ixo = cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    5060:	4bb4      	ldr	r3, [pc, #720]	; (5334 <cmd_common_process+0x96a>)
    5062:	78db      	ldrb	r3, [r3, #3]
    5064:	b21a      	sxth	r2, r3
    5066:	4bb3      	ldr	r3, [pc, #716]	; (5334 <cmd_common_process+0x96a>)
    5068:	791b      	ldrb	r3, [r3, #4]
    506a:	021b      	lsls	r3, r3, #8
    506c:	b21b      	sxth	r3, r3
    506e:	4313      	orrs	r3, r2
    5070:	b21a      	sxth	r2, r3
    5072:	003b      	movs	r3, r7
    5074:	801a      	strh	r2, [r3, #0]
    5076:	230a      	movs	r3, #10
    5078:	18fb      	adds	r3, r7, r3
    507a:	220a      	movs	r2, #10
    507c:	18ba      	adds	r2, r7, r2
    507e:	8812      	ldrh	r2, [r2, #0]
    5080:	3202      	adds	r2, #2
    5082:	801a      	strh	r2, [r3, #0]
					cnt = cbuf[5] | (cbuf[6]<<8);							wn+=sizeof(WORD);
    5084:	4bab      	ldr	r3, [pc, #684]	; (5334 <cmd_common_process+0x96a>)
    5086:	795b      	ldrb	r3, [r3, #5]
    5088:	b21a      	sxth	r2, r3
    508a:	4baa      	ldr	r3, [pc, #680]	; (5334 <cmd_common_process+0x96a>)
    508c:	799b      	ldrb	r3, [r3, #6]
    508e:	021b      	lsls	r3, r3, #8
    5090:	b21b      	sxth	r3, r3
    5092:	4313      	orrs	r3, r2
    5094:	b21a      	sxth	r2, r3
    5096:	230c      	movs	r3, #12
    5098:	18fb      	adds	r3, r7, r3
    509a:	801a      	strh	r2, [r3, #0]
    509c:	230a      	movs	r3, #10
    509e:	18fb      	adds	r3, r7, r3
    50a0:	220a      	movs	r2, #10
    50a2:	18ba      	adds	r2, r7, r2
    50a4:	8812      	ldrh	r2, [r2, #0]
    50a6:	3202      	adds	r2, #2
    50a8:	801a      	strh	r2, [r3, #0]
					
					if(cnt  ==  0) { break; }
    50aa:	230c      	movs	r3, #12
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	881b      	ldrh	r3, [r3, #0]
    50b0:	2b00      	cmp	r3, #0
    50b2:	d100      	bne.n	50b6 <cmd_common_process+0x6ec>
    50b4:	e2e8      	b.n	5688 <cmd_common_process+0xcbe>
					if(ixo  ==  0) {memset(&cfg_1_tmp,0x00,sizeof(CFG_1));}
    50b6:	003b      	movs	r3, r7
    50b8:	881b      	ldrh	r3, [r3, #0]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d106      	bne.n	50cc <cmd_common_process+0x702>
    50be:	2380      	movs	r3, #128	; 0x80
    50c0:	005a      	lsls	r2, r3, #1
    50c2:	4b9e      	ldr	r3, [pc, #632]	; (533c <cmd_common_process+0x972>)
    50c4:	2100      	movs	r1, #0
    50c6:	0018      	movs	r0, r3
    50c8:	4b9d      	ldr	r3, [pc, #628]	; (5340 <cmd_common_process+0x976>)
    50ca:	4798      	blx	r3
					
					if(ixo       >= sizeof(CFG_1)) { break; }
    50cc:	003b      	movs	r3, r7
    50ce:	881b      	ldrh	r3, [r3, #0]
    50d0:	2bff      	cmp	r3, #255	; 0xff
    50d2:	d900      	bls.n	50d6 <cmd_common_process+0x70c>
    50d4:	e2da      	b.n	568c <cmd_common_process+0xcc2>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    50d6:	230c      	movs	r3, #12
    50d8:	18fb      	adds	r3, r7, r3
    50da:	881a      	ldrh	r2, [r3, #0]
    50dc:	003b      	movs	r3, r7
    50de:	881b      	ldrh	r3, [r3, #0]
    50e0:	18d3      	adds	r3, r2, r3
    50e2:	001a      	movs	r2, r3
    50e4:	2380      	movs	r3, #128	; 0x80
    50e6:	005b      	lsls	r3, r3, #1
    50e8:	429a      	cmp	r2, r3
    50ea:	d900      	bls.n	50ee <cmd_common_process+0x724>
    50ec:	e2d0      	b.n	5690 <cmd_common_process+0xcc6>
					
					memcpy(((BYTE*)&cfg_1_tmp)+ixo,cbuf+wn                  ,cnt);
    50ee:	003b      	movs	r3, r7
    50f0:	881a      	ldrh	r2, [r3, #0]
    50f2:	4b92      	ldr	r3, [pc, #584]	; (533c <cmd_common_process+0x972>)
    50f4:	18d0      	adds	r0, r2, r3
    50f6:	230a      	movs	r3, #10
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	881a      	ldrh	r2, [r3, #0]
    50fc:	4b8d      	ldr	r3, [pc, #564]	; (5334 <cmd_common_process+0x96a>)
    50fe:	18d1      	adds	r1, r2, r3
    5100:	230c      	movs	r3, #12
    5102:	18fb      	adds	r3, r7, r3
    5104:	881b      	ldrh	r3, [r3, #0]
    5106:	001a      	movs	r2, r3
    5108:	4b8e      	ldr	r3, [pc, #568]	; (5344 <cmd_common_process+0x97a>)
    510a:	4798      	blx	r3
					memcpy(cbuf+wn                  ,((BYTE*)&cfg_1_tmp)+ixo,cnt);
    510c:	230a      	movs	r3, #10
    510e:	18fb      	adds	r3, r7, r3
    5110:	881a      	ldrh	r2, [r3, #0]
    5112:	4b88      	ldr	r3, [pc, #544]	; (5334 <cmd_common_process+0x96a>)
    5114:	18d0      	adds	r0, r2, r3
    5116:	003b      	movs	r3, r7
    5118:	881a      	ldrh	r2, [r3, #0]
    511a:	4b88      	ldr	r3, [pc, #544]	; (533c <cmd_common_process+0x972>)
    511c:	18d1      	adds	r1, r2, r3
    511e:	230c      	movs	r3, #12
    5120:	18fb      	adds	r3, r7, r3
    5122:	881b      	ldrh	r3, [r3, #0]
    5124:	001a      	movs	r2, r3
    5126:	4b87      	ldr	r3, [pc, #540]	; (5344 <cmd_common_process+0x97a>)
    5128:	4798      	blx	r3
					wn+=cnt;
    512a:	230a      	movs	r3, #10
    512c:	18fb      	adds	r3, r7, r3
    512e:	220a      	movs	r2, #10
    5130:	18b9      	adds	r1, r7, r2
    5132:	220c      	movs	r2, #12
    5134:	18ba      	adds	r2, r7, r2
    5136:	8809      	ldrh	r1, [r1, #0]
    5138:	8812      	ldrh	r2, [r2, #0]
    513a:	188a      	adds	r2, r1, r2
    513c:	801a      	strh	r2, [r3, #0]
					wr_flag_cfg = 1;
    513e:	4b82      	ldr	r3, [pc, #520]	; (5348 <cmd_common_process+0x97e>)
    5140:	2201      	movs	r2, #1
    5142:	701a      	strb	r2, [r3, #0]
		break;
    5144:	e2cf      	b.n	56e6 <cmd_common_process+0xd1c>
		//......................................................................
		case 0x20:	if(size <  7)		{ return; }								//login
    5146:	230e      	movs	r3, #14
    5148:	18fb      	adds	r3, r7, r3
    514a:	881b      	ldrh	r3, [r3, #0]
    514c:	2b06      	cmp	r3, #6
    514e:	d800      	bhi.n	5152 <cmd_common_process+0x788>
    5150:	e32f      	b.n	57b2 <cmd_common_process+0xde8>
					
					
					BYTE ch = 0;
    5152:	2308      	movs	r3, #8
    5154:	18fb      	adds	r3, r7, r3
    5156:	2200      	movs	r2, #0
    5158:	701a      	strb	r2, [r3, #0]
					cnt = 3;
    515a:	230c      	movs	r3, #12
    515c:	18fb      	adds	r3, r7, r3
    515e:	2203      	movs	r2, #3
    5160:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);
    5162:	230c      	movs	r3, #12
    5164:	18fb      	adds	r3, r7, r3
    5166:	881a      	ldrh	r2, [r3, #0]
    5168:	4b72      	ldr	r3, [pc, #456]	; (5334 <cmd_common_process+0x96a>)
    516a:	18d3      	adds	r3, r2, r3
    516c:	0018      	movs	r0, r3
    516e:	4b77      	ldr	r3, [pc, #476]	; (534c <cmd_common_process+0x982>)
    5170:	4798      	blx	r3
					
					ch = 0;
    5172:	2308      	movs	r3, #8
    5174:	18fb      	adds	r3, r7, r3
    5176:	2200      	movs	r2, #0
    5178:	701a      	strb	r2, [r3, #0]
					
					for (BYTE i = 0; i < 2; i++ ) { if (SRAV(32, &cbuf[3], &accnts.accnt[i].login[0])) 	{ch = i + 1; break;	} } //compare login
    517a:	1dfb      	adds	r3, r7, #7
    517c:	2200      	movs	r2, #0
    517e:	701a      	strb	r2, [r3, #0]
    5180:	e017      	b.n	51b2 <cmd_common_process+0x7e8>
    5182:	1dfb      	adds	r3, r7, #7
    5184:	781b      	ldrb	r3, [r3, #0]
    5186:	019a      	lsls	r2, r3, #6
    5188:	4b71      	ldr	r3, [pc, #452]	; (5350 <cmd_common_process+0x986>)
    518a:	18d2      	adds	r2, r2, r3
    518c:	4b71      	ldr	r3, [pc, #452]	; (5354 <cmd_common_process+0x98a>)
    518e:	0019      	movs	r1, r3
    5190:	2020      	movs	r0, #32
    5192:	4b71      	ldr	r3, [pc, #452]	; (5358 <cmd_common_process+0x98e>)
    5194:	4798      	blx	r3
    5196:	1e03      	subs	r3, r0, #0
    5198:	d006      	beq.n	51a8 <cmd_common_process+0x7de>
    519a:	2308      	movs	r3, #8
    519c:	18fb      	adds	r3, r7, r3
    519e:	1dfa      	adds	r2, r7, #7
    51a0:	7812      	ldrb	r2, [r2, #0]
    51a2:	3201      	adds	r2, #1
    51a4:	701a      	strb	r2, [r3, #0]
    51a6:	e008      	b.n	51ba <cmd_common_process+0x7f0>
    51a8:	1dfb      	adds	r3, r7, #7
    51aa:	781a      	ldrb	r2, [r3, #0]
    51ac:	1dfb      	adds	r3, r7, #7
    51ae:	3201      	adds	r2, #1
    51b0:	701a      	strb	r2, [r3, #0]
    51b2:	1dfb      	adds	r3, r7, #7
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	2b01      	cmp	r3, #1
    51b8:	d9e3      	bls.n	5182 <cmd_common_process+0x7b8>
					if (!ch) {send_error_EX();}																				//if login not searched
    51ba:	2308      	movs	r3, #8
    51bc:	18fb      	adds	r3, r7, r3
    51be:	781b      	ldrb	r3, [r3, #0]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d118      	bne.n	51f6 <cmd_common_process+0x82c>
    51c4:	230a      	movs	r3, #10
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	881b      	ldrh	r3, [r3, #0]
    51ca:	4a5a      	ldr	r2, [pc, #360]	; (5334 <cmd_common_process+0x96a>)
    51cc:	2100      	movs	r1, #0
    51ce:	54d1      	strb	r1, [r2, r3]
    51d0:	230a      	movs	r3, #10
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	881b      	ldrh	r3, [r3, #0]
    51d6:	3b04      	subs	r3, #4
    51d8:	4a56      	ldr	r2, [pc, #344]	; (5334 <cmd_common_process+0x96a>)
    51da:	5cd3      	ldrb	r3, [r2, r3]
    51dc:	2204      	movs	r2, #4
    51de:	2100      	movs	r1, #0
    51e0:	0018      	movs	r0, r3
    51e2:	4b57      	ldr	r3, [pc, #348]	; (5340 <cmd_common_process+0x976>)
    51e4:	4798      	blx	r3
    51e6:	230a      	movs	r3, #10
    51e8:	18fb      	adds	r3, r7, r3
    51ea:	220a      	movs	r2, #10
    51ec:	18ba      	adds	r2, r7, r2
    51ee:	8812      	ldrh	r2, [r2, #0]
    51f0:	3205      	adds	r2, #5
    51f2:	801a      	strh	r2, [r3, #0]
    51f4:	e277      	b.n	56e6 <cmd_common_process+0xd1c>

					cnt += 32;
    51f6:	230c      	movs	r3, #12
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	220c      	movs	r2, #12
    51fc:	18ba      	adds	r2, r7, r2
    51fe:	8812      	ldrh	r2, [r2, #0]
    5200:	3220      	adds	r2, #32
    5202:	801a      	strh	r2, [r3, #0]
					if (!SRAV(32, &cbuf[cnt], &accnts.accnt[ch-1].password[0])) {send_error_EX();}									//if password no match
    5204:	230c      	movs	r3, #12
    5206:	18fb      	adds	r3, r7, r3
    5208:	881a      	ldrh	r2, [r3, #0]
    520a:	4b4a      	ldr	r3, [pc, #296]	; (5334 <cmd_common_process+0x96a>)
    520c:	18d1      	adds	r1, r2, r3
    520e:	2308      	movs	r3, #8
    5210:	18fb      	adds	r3, r7, r3
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	3b01      	subs	r3, #1
    5216:	019b      	lsls	r3, r3, #6
    5218:	3320      	adds	r3, #32
    521a:	001a      	movs	r2, r3
    521c:	4b4c      	ldr	r3, [pc, #304]	; (5350 <cmd_common_process+0x986>)
    521e:	18d3      	adds	r3, r2, r3
    5220:	001a      	movs	r2, r3
    5222:	2020      	movs	r0, #32
    5224:	4b4c      	ldr	r3, [pc, #304]	; (5358 <cmd_common_process+0x98e>)
    5226:	4798      	blx	r3
    5228:	1e03      	subs	r3, r0, #0
    522a:	d118      	bne.n	525e <cmd_common_process+0x894>
    522c:	230a      	movs	r3, #10
    522e:	18fb      	adds	r3, r7, r3
    5230:	881b      	ldrh	r3, [r3, #0]
    5232:	4a40      	ldr	r2, [pc, #256]	; (5334 <cmd_common_process+0x96a>)
    5234:	2100      	movs	r1, #0
    5236:	54d1      	strb	r1, [r2, r3]
    5238:	230a      	movs	r3, #10
    523a:	18fb      	adds	r3, r7, r3
    523c:	881b      	ldrh	r3, [r3, #0]
    523e:	3b04      	subs	r3, #4
    5240:	4a3c      	ldr	r2, [pc, #240]	; (5334 <cmd_common_process+0x96a>)
    5242:	5cd3      	ldrb	r3, [r2, r3]
    5244:	2204      	movs	r2, #4
    5246:	2100      	movs	r1, #0
    5248:	0018      	movs	r0, r3
    524a:	4b3d      	ldr	r3, [pc, #244]	; (5340 <cmd_common_process+0x976>)
    524c:	4798      	blx	r3
    524e:	230a      	movs	r3, #10
    5250:	18fb      	adds	r3, r7, r3
    5252:	220a      	movs	r2, #10
    5254:	18ba      	adds	r2, r7, r2
    5256:	8812      	ldrh	r2, [r2, #0]
    5258:	3205      	adds	r2, #5
    525a:	801a      	strh	r2, [r3, #0]
    525c:	e243      	b.n	56e6 <cmd_common_process+0xd1c>
																
					if (ch == ADMIN_LOGIN) {save_log(ADMIN_LOGIN); send_admin();} else {send_user();}
    525e:	2308      	movs	r3, #8
    5260:	18fb      	adds	r3, r7, r3
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	2b01      	cmp	r3, #1
    5266:	d11b      	bne.n	52a0 <cmd_common_process+0x8d6>
    5268:	4b3c      	ldr	r3, [pc, #240]	; (535c <cmd_common_process+0x992>)
    526a:	681b      	ldr	r3, [r3, #0]
    526c:	2b00      	cmp	r3, #0
    526e:	d009      	beq.n	5284 <cmd_common_process+0x8ba>
    5270:	4b3b      	ldr	r3, [pc, #236]	; (5360 <cmd_common_process+0x996>)
    5272:	781b      	ldrb	r3, [r3, #0]
    5274:	0018      	movs	r0, r3
    5276:	4b3b      	ldr	r3, [pc, #236]	; (5364 <cmd_common_process+0x99a>)
    5278:	6819      	ldr	r1, [r3, #0]
    527a:	4b38      	ldr	r3, [pc, #224]	; (535c <cmd_common_process+0x992>)
    527c:	681a      	ldr	r2, [r3, #0]
    527e:	2301      	movs	r3, #1
    5280:	4c39      	ldr	r4, [pc, #228]	; (5368 <cmd_common_process+0x99e>)
    5282:	47a0      	blx	r4
    5284:	230a      	movs	r3, #10
    5286:	18fb      	adds	r3, r7, r3
    5288:	881b      	ldrh	r3, [r3, #0]
    528a:	4a2a      	ldr	r2, [pc, #168]	; (5334 <cmd_common_process+0x96a>)
    528c:	2101      	movs	r1, #1
    528e:	54d1      	strb	r1, [r2, r3]
    5290:	230a      	movs	r3, #10
    5292:	18fb      	adds	r3, r7, r3
    5294:	881a      	ldrh	r2, [r3, #0]
    5296:	230a      	movs	r3, #10
    5298:	18fb      	adds	r3, r7, r3
    529a:	3201      	adds	r2, #1
    529c:	801a      	strh	r2, [r3, #0]
    529e:	e00c      	b.n	52ba <cmd_common_process+0x8f0>
    52a0:	230a      	movs	r3, #10
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	881b      	ldrh	r3, [r3, #0]
    52a6:	4a23      	ldr	r2, [pc, #140]	; (5334 <cmd_common_process+0x96a>)
    52a8:	2102      	movs	r1, #2
    52aa:	54d1      	strb	r1, [r2, r3]
    52ac:	230a      	movs	r3, #10
    52ae:	18fb      	adds	r3, r7, r3
    52b0:	881a      	ldrh	r2, [r3, #0]
    52b2:	230a      	movs	r3, #10
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	3201      	adds	r2, #1
    52b8:	801a      	strh	r2, [r3, #0]
					actv_user_id = ch;
    52ba:	4b29      	ldr	r3, [pc, #164]	; (5360 <cmd_common_process+0x996>)
    52bc:	2208      	movs	r2, #8
    52be:	18ba      	adds	r2, r7, r2
    52c0:	7812      	ldrb	r2, [r2, #0]
    52c2:	701a      	strb	r2, [r3, #0]
					log_stat = 1;	
    52c4:	4b29      	ldr	r3, [pc, #164]	; (536c <cmd_common_process+0x9a2>)
    52c6:	2201      	movs	r2, #1
    52c8:	701a      	strb	r2, [r3, #0]
					loggin_timeout = 0;																						//login status up
    52ca:	4b29      	ldr	r3, [pc, #164]	; (5370 <cmd_common_process+0x9a6>)
    52cc:	2200      	movs	r2, #0
    52ce:	601a      	str	r2, [r3, #0]
					memcpy(&ip_addrs, &eth_sock[0].ip_addr[0], DW_LEN);														//write crc firmware
    52d0:	4928      	ldr	r1, [pc, #160]	; (5374 <cmd_common_process+0x9aa>)
    52d2:	4b24      	ldr	r3, [pc, #144]	; (5364 <cmd_common_process+0x99a>)
    52d4:	2204      	movs	r2, #4
    52d6:	0018      	movs	r0, r3
    52d8:	4b1a      	ldr	r3, [pc, #104]	; (5344 <cmd_common_process+0x97a>)
    52da:	4798      	blx	r3
					num_to_byte(crc_fw, DW_LEN, &cbuf[wn], L_SIDE);			wn += 4;
    52dc:	4b26      	ldr	r3, [pc, #152]	; (5378 <cmd_common_process+0x9ae>)
    52de:	6818      	ldr	r0, [r3, #0]
    52e0:	230a      	movs	r3, #10
    52e2:	18fb      	adds	r3, r7, r3
    52e4:	881a      	ldrh	r2, [r3, #0]
    52e6:	4b13      	ldr	r3, [pc, #76]	; (5334 <cmd_common_process+0x96a>)
    52e8:	18d2      	adds	r2, r2, r3
    52ea:	2301      	movs	r3, #1
    52ec:	2104      	movs	r1, #4
    52ee:	4c23      	ldr	r4, [pc, #140]	; (537c <cmd_common_process+0x9b2>)
    52f0:	47a0      	blx	r4
    52f2:	230a      	movs	r3, #10
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	220a      	movs	r2, #10
    52f8:	18ba      	adds	r2, r7, r2
    52fa:	8812      	ldrh	r2, [r2, #0]
    52fc:	3204      	adds	r2, #4
    52fe:	801a      	strh	r2, [r3, #0]
		break;
    5300:	e1f1      	b.n	56e6 <cmd_common_process+0xd1c>
		//......................................................................
		case 0x21:	if(size < 5)		{ return; }								//login send
    5302:	230e      	movs	r3, #14
    5304:	18fb      	adds	r3, r7, r3
    5306:	881b      	ldrh	r3, [r3, #0]
    5308:	2b04      	cmp	r3, #4
    530a:	d800      	bhi.n	530e <cmd_common_process+0x944>
    530c:	e253      	b.n	57b6 <cmd_common_process+0xdec>
 					check_permission();
    530e:	4b14      	ldr	r3, [pc, #80]	; (5360 <cmd_common_process+0x996>)
    5310:	781b      	ldrb	r3, [r3, #0]
    5312:	2b01      	cmp	r3, #1
    5314:	d034      	beq.n	5380 <cmd_common_process+0x9b6>
    5316:	230a      	movs	r3, #10
    5318:	18fb      	adds	r3, r7, r3
    531a:	881b      	ldrh	r3, [r3, #0]
    531c:	4a05      	ldr	r2, [pc, #20]	; (5334 <cmd_common_process+0x96a>)
    531e:	2100      	movs	r1, #0
    5320:	54d1      	strb	r1, [r2, r3]
    5322:	230a      	movs	r3, #10
    5324:	18fb      	adds	r3, r7, r3
    5326:	881a      	ldrh	r2, [r3, #0]
    5328:	230a      	movs	r3, #10
    532a:	18fb      	adds	r3, r7, r3
    532c:	3201      	adds	r2, #1
    532e:	801a      	strh	r2, [r3, #0]
    5330:	e1d9      	b.n	56e6 <cmd_common_process+0xd1c>
    5332:	46c0      	nop			; (mov r8, r8)
    5334:	200004a0 	.word	0x200004a0
    5338:	00006fa1 	.word	0x00006fa1
    533c:	20003cc4 	.word	0x20003cc4
    5340:	0000c8a9 	.word	0x0000c8a9
    5344:	0000c825 	.word	0x0000c825
    5348:	20000458 	.word	0x20000458
    534c:	0000603b 	.word	0x0000603b
    5350:	20002554 	.word	0x20002554
    5354:	200004a3 	.word	0x200004a3
    5358:	0000495b 	.word	0x0000495b
    535c:	20000454 	.word	0x20000454
    5360:	20000451 	.word	0x20000451
    5364:	2000049c 	.word	0x2000049c
    5368:	0000455d 	.word	0x0000455d
    536c:	20000450 	.word	0x20000450
    5370:	20000470 	.word	0x20000470
    5374:	200005cc 	.word	0x200005cc
    5378:	2000254c 	.word	0x2000254c
    537c:	00004801 	.word	0x00004801
					cnt = 3;
    5380:	230c      	movs	r3, #12
    5382:	18fb      	adds	r3, r7, r3
    5384:	2203      	movs	r2, #3
    5386:	801a      	strh	r2, [r3, #0]
					
					memcpy(&cbuf[3], &accnts.accnt[0].login[0], 256);
    5388:	2380      	movs	r3, #128	; 0x80
    538a:	005a      	lsls	r2, r3, #1
    538c:	49c1      	ldr	r1, [pc, #772]	; (5694 <cmd_common_process+0xcca>)
    538e:	4bc2      	ldr	r3, [pc, #776]	; (5698 <cmd_common_process+0xcce>)
    5390:	0018      	movs	r0, r3
    5392:	4bc2      	ldr	r3, [pc, #776]	; (569c <cmd_common_process+0xcd2>)
    5394:	4798      	blx	r3
					crypted(&cbuf[cnt]);		cnt += 64;
    5396:	230c      	movs	r3, #12
    5398:	18fb      	adds	r3, r7, r3
    539a:	881a      	ldrh	r2, [r3, #0]
    539c:	4bc0      	ldr	r3, [pc, #768]	; (56a0 <cmd_common_process+0xcd6>)
    539e:	18d3      	adds	r3, r2, r3
    53a0:	0018      	movs	r0, r3
    53a2:	4bc0      	ldr	r3, [pc, #768]	; (56a4 <cmd_common_process+0xcda>)
    53a4:	4798      	blx	r3
    53a6:	230c      	movs	r3, #12
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	220c      	movs	r2, #12
    53ac:	18ba      	adds	r2, r7, r2
    53ae:	8812      	ldrh	r2, [r2, #0]
    53b0:	3240      	adds	r2, #64	; 0x40
    53b2:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53b4:	230c      	movs	r3, #12
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	881a      	ldrh	r2, [r3, #0]
    53ba:	4bb9      	ldr	r3, [pc, #740]	; (56a0 <cmd_common_process+0xcd6>)
    53bc:	18d3      	adds	r3, r2, r3
    53be:	0018      	movs	r0, r3
    53c0:	4bb8      	ldr	r3, [pc, #736]	; (56a4 <cmd_common_process+0xcda>)
    53c2:	4798      	blx	r3
    53c4:	230c      	movs	r3, #12
    53c6:	18fb      	adds	r3, r7, r3
    53c8:	220c      	movs	r2, #12
    53ca:	18ba      	adds	r2, r7, r2
    53cc:	8812      	ldrh	r2, [r2, #0]
    53ce:	3240      	adds	r2, #64	; 0x40
    53d0:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53d2:	230c      	movs	r3, #12
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	881a      	ldrh	r2, [r3, #0]
    53d8:	4bb1      	ldr	r3, [pc, #708]	; (56a0 <cmd_common_process+0xcd6>)
    53da:	18d3      	adds	r3, r2, r3
    53dc:	0018      	movs	r0, r3
    53de:	4bb1      	ldr	r3, [pc, #708]	; (56a4 <cmd_common_process+0xcda>)
    53e0:	4798      	blx	r3
    53e2:	230c      	movs	r3, #12
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	220c      	movs	r2, #12
    53e8:	18ba      	adds	r2, r7, r2
    53ea:	8812      	ldrh	r2, [r2, #0]
    53ec:	3240      	adds	r2, #64	; 0x40
    53ee:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53f0:	230c      	movs	r3, #12
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	881a      	ldrh	r2, [r3, #0]
    53f6:	4baa      	ldr	r3, [pc, #680]	; (56a0 <cmd_common_process+0xcd6>)
    53f8:	18d3      	adds	r3, r2, r3
    53fa:	0018      	movs	r0, r3
    53fc:	4ba9      	ldr	r3, [pc, #676]	; (56a4 <cmd_common_process+0xcda>)
    53fe:	4798      	blx	r3
    5400:	230c      	movs	r3, #12
    5402:	18fb      	adds	r3, r7, r3
    5404:	220c      	movs	r2, #12
    5406:	18ba      	adds	r2, r7, r2
    5408:	8812      	ldrh	r2, [r2, #0]
    540a:	3240      	adds	r2, #64	; 0x40
    540c:	801a      	strh	r2, [r3, #0]
					wn += 256;
    540e:	230a      	movs	r3, #10
    5410:	18fb      	adds	r3, r7, r3
    5412:	220a      	movs	r2, #10
    5414:	18ba      	adds	r2, r7, r2
    5416:	8812      	ldrh	r2, [r2, #0]
    5418:	3201      	adds	r2, #1
    541a:	32ff      	adds	r2, #255	; 0xff
    541c:	801a      	strh	r2, [r3, #0]
		break;
    541e:	e162      	b.n	56e6 <cmd_common_process+0xd1c>
		//......................................................................
		case 0x22:	if(size <  5)		{ return; }								//login change
    5420:	230e      	movs	r3, #14
    5422:	18fb      	adds	r3, r7, r3
    5424:	881b      	ldrh	r3, [r3, #0]
    5426:	2b04      	cmp	r3, #4
    5428:	d800      	bhi.n	542c <cmd_common_process+0xa62>
    542a:	e1c6      	b.n	57ba <cmd_common_process+0xdf0>
					check_permission();
    542c:	4b9e      	ldr	r3, [pc, #632]	; (56a8 <cmd_common_process+0xcde>)
    542e:	781b      	ldrb	r3, [r3, #0]
    5430:	2b01      	cmp	r3, #1
    5432:	d00d      	beq.n	5450 <cmd_common_process+0xa86>
    5434:	230a      	movs	r3, #10
    5436:	18fb      	adds	r3, r7, r3
    5438:	881b      	ldrh	r3, [r3, #0]
    543a:	4a99      	ldr	r2, [pc, #612]	; (56a0 <cmd_common_process+0xcd6>)
    543c:	2100      	movs	r1, #0
    543e:	54d1      	strb	r1, [r2, r3]
    5440:	230a      	movs	r3, #10
    5442:	18fb      	adds	r3, r7, r3
    5444:	881a      	ldrh	r2, [r3, #0]
    5446:	230a      	movs	r3, #10
    5448:	18fb      	adds	r3, r7, r3
    544a:	3201      	adds	r2, #1
    544c:	801a      	strh	r2, [r3, #0]
    544e:	e14a      	b.n	56e6 <cmd_common_process+0xd1c>
					cnt = 3;
    5450:	230c      	movs	r3, #12
    5452:	18fb      	adds	r3, r7, r3
    5454:	2203      	movs	r2, #3
    5456:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5458:	230c      	movs	r3, #12
    545a:	18fb      	adds	r3, r7, r3
    545c:	881a      	ldrh	r2, [r3, #0]
    545e:	4b90      	ldr	r3, [pc, #576]	; (56a0 <cmd_common_process+0xcd6>)
    5460:	18d3      	adds	r3, r2, r3
    5462:	0018      	movs	r0, r3
    5464:	4b91      	ldr	r3, [pc, #580]	; (56ac <cmd_common_process+0xce2>)
    5466:	4798      	blx	r3
    5468:	230c      	movs	r3, #12
    546a:	18fb      	adds	r3, r7, r3
    546c:	220c      	movs	r2, #12
    546e:	18ba      	adds	r2, r7, r2
    5470:	8812      	ldrh	r2, [r2, #0]
    5472:	3240      	adds	r2, #64	; 0x40
    5474:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5476:	230c      	movs	r3, #12
    5478:	18fb      	adds	r3, r7, r3
    547a:	881a      	ldrh	r2, [r3, #0]
    547c:	4b88      	ldr	r3, [pc, #544]	; (56a0 <cmd_common_process+0xcd6>)
    547e:	18d3      	adds	r3, r2, r3
    5480:	0018      	movs	r0, r3
    5482:	4b8a      	ldr	r3, [pc, #552]	; (56ac <cmd_common_process+0xce2>)
    5484:	4798      	blx	r3
    5486:	230c      	movs	r3, #12
    5488:	18fb      	adds	r3, r7, r3
    548a:	220c      	movs	r2, #12
    548c:	18ba      	adds	r2, r7, r2
    548e:	8812      	ldrh	r2, [r2, #0]
    5490:	3240      	adds	r2, #64	; 0x40
    5492:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5494:	230c      	movs	r3, #12
    5496:	18fb      	adds	r3, r7, r3
    5498:	881a      	ldrh	r2, [r3, #0]
    549a:	4b81      	ldr	r3, [pc, #516]	; (56a0 <cmd_common_process+0xcd6>)
    549c:	18d3      	adds	r3, r2, r3
    549e:	0018      	movs	r0, r3
    54a0:	4b82      	ldr	r3, [pc, #520]	; (56ac <cmd_common_process+0xce2>)
    54a2:	4798      	blx	r3
    54a4:	230c      	movs	r3, #12
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	220c      	movs	r2, #12
    54aa:	18ba      	adds	r2, r7, r2
    54ac:	8812      	ldrh	r2, [r2, #0]
    54ae:	3240      	adds	r2, #64	; 0x40
    54b0:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;
    54b2:	230c      	movs	r3, #12
    54b4:	18fb      	adds	r3, r7, r3
    54b6:	881a      	ldrh	r2, [r3, #0]
    54b8:	4b79      	ldr	r3, [pc, #484]	; (56a0 <cmd_common_process+0xcd6>)
    54ba:	18d3      	adds	r3, r2, r3
    54bc:	0018      	movs	r0, r3
    54be:	4b7b      	ldr	r3, [pc, #492]	; (56ac <cmd_common_process+0xce2>)
    54c0:	4798      	blx	r3
    54c2:	230c      	movs	r3, #12
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	220c      	movs	r2, #12
    54c8:	18ba      	adds	r2, r7, r2
    54ca:	8812      	ldrh	r2, [r2, #0]
    54cc:	3240      	adds	r2, #64	; 0x40
    54ce:	801a      	strh	r2, [r3, #0]
					
					memcpy(&accnts.accnt[0].login[0], &cbuf[3], 256);
    54d0:	2380      	movs	r3, #128	; 0x80
    54d2:	005a      	lsls	r2, r3, #1
    54d4:	4970      	ldr	r1, [pc, #448]	; (5698 <cmd_common_process+0xcce>)
    54d6:	4b6f      	ldr	r3, [pc, #444]	; (5694 <cmd_common_process+0xcca>)
    54d8:	0018      	movs	r0, r3
    54da:	4b70      	ldr	r3, [pc, #448]	; (569c <cmd_common_process+0xcd2>)
    54dc:	4798      	blx	r3
					wr_flag_acc = 1;
    54de:	4b74      	ldr	r3, [pc, #464]	; (56b0 <cmd_common_process+0xce6>)
    54e0:	2201      	movs	r2, #1
    54e2:	701a      	strb	r2, [r3, #0]

		break;
    54e4:	e0ff      	b.n	56e6 <cmd_common_process+0xd1c>
		
		//......................................................................
		case 0x23:	if(size <  5)		{ return; }								//read logs
    54e6:	230e      	movs	r3, #14
    54e8:	18fb      	adds	r3, r7, r3
    54ea:	881b      	ldrh	r3, [r3, #0]
    54ec:	2b04      	cmp	r3, #4
    54ee:	d800      	bhi.n	54f2 <cmd_common_process+0xb28>
    54f0:	e165      	b.n	57be <cmd_common_process+0xdf4>
 					check_permission();
    54f2:	4b6d      	ldr	r3, [pc, #436]	; (56a8 <cmd_common_process+0xcde>)
    54f4:	781b      	ldrb	r3, [r3, #0]
    54f6:	2b01      	cmp	r3, #1
    54f8:	d00d      	beq.n	5516 <cmd_common_process+0xb4c>
    54fa:	230a      	movs	r3, #10
    54fc:	18fb      	adds	r3, r7, r3
    54fe:	881b      	ldrh	r3, [r3, #0]
    5500:	4a67      	ldr	r2, [pc, #412]	; (56a0 <cmd_common_process+0xcd6>)
    5502:	2100      	movs	r1, #0
    5504:	54d1      	strb	r1, [r2, r3]
    5506:	230a      	movs	r3, #10
    5508:	18fb      	adds	r3, r7, r3
    550a:	881a      	ldrh	r2, [r3, #0]
    550c:	230a      	movs	r3, #10
    550e:	18fb      	adds	r3, r7, r3
    5510:	3201      	adds	r2, #1
    5512:	801a      	strh	r2, [r3, #0]
    5514:	e0e7      	b.n	56e6 <cmd_common_process+0xd1c>
					cnt = 3; wn++;
    5516:	230c      	movs	r3, #12
    5518:	18fb      	adds	r3, r7, r3
    551a:	2203      	movs	r2, #3
    551c:	801a      	strh	r2, [r3, #0]
    551e:	230a      	movs	r3, #10
    5520:	18fb      	adds	r3, r7, r3
    5522:	881a      	ldrh	r2, [r3, #0]
    5524:	230a      	movs	r3, #10
    5526:	18fb      	adds	r3, r7, r3
    5528:	3201      	adds	r2, #1
    552a:	801a      	strh	r2, [r3, #0]
					flash_read(LOGS_ADDR + (256 * cbuf[3]), &cbuf[4], 256);		wn +=256;
    552c:	4b5c      	ldr	r3, [pc, #368]	; (56a0 <cmd_common_process+0xcd6>)
    552e:	78db      	ldrb	r3, [r3, #3]
    5530:	021b      	lsls	r3, r3, #8
    5532:	22b0      	movs	r2, #176	; 0xb0
    5534:	0292      	lsls	r2, r2, #10
    5536:	1898      	adds	r0, r3, r2
    5538:	2380      	movs	r3, #128	; 0x80
    553a:	005a      	lsls	r2, r3, #1
    553c:	4b5d      	ldr	r3, [pc, #372]	; (56b4 <cmd_common_process+0xcea>)
    553e:	0019      	movs	r1, r3
    5540:	4b5d      	ldr	r3, [pc, #372]	; (56b8 <cmd_common_process+0xcee>)
    5542:	4798      	blx	r3
    5544:	230a      	movs	r3, #10
    5546:	18fb      	adds	r3, r7, r3
    5548:	220a      	movs	r2, #10
    554a:	18ba      	adds	r2, r7, r2
    554c:	8812      	ldrh	r2, [r2, #0]
    554e:	3201      	adds	r2, #1
    5550:	32ff      	adds	r2, #255	; 0xff
    5552:	801a      	strh	r2, [r3, #0]
		break;
    5554:	e0c7      	b.n	56e6 <cmd_common_process+0xd1c>
		//......................................................................
		case 0x27:	if(size  !=  5) { return; }									//change config
    5556:	230e      	movs	r3, #14
    5558:	18fb      	adds	r3, r7, r3
    555a:	881b      	ldrh	r3, [r3, #0]
    555c:	2b05      	cmp	r3, #5
    555e:	d000      	beq.n	5562 <cmd_common_process+0xb98>
    5560:	e12f      	b.n	57c2 <cmd_common_process+0xdf8>
					check_permission();	
    5562:	4b51      	ldr	r3, [pc, #324]	; (56a8 <cmd_common_process+0xcde>)
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	2b01      	cmp	r3, #1
    5568:	d00d      	beq.n	5586 <cmd_common_process+0xbbc>
    556a:	230a      	movs	r3, #10
    556c:	18fb      	adds	r3, r7, r3
    556e:	881b      	ldrh	r3, [r3, #0]
    5570:	4a4b      	ldr	r2, [pc, #300]	; (56a0 <cmd_common_process+0xcd6>)
    5572:	2100      	movs	r1, #0
    5574:	54d1      	strb	r1, [r2, r3]
    5576:	230a      	movs	r3, #10
    5578:	18fb      	adds	r3, r7, r3
    557a:	881a      	ldrh	r2, [r3, #0]
    557c:	230a      	movs	r3, #10
    557e:	18fb      	adds	r3, r7, r3
    5580:	3201      	adds	r2, #1
    5582:	801a      	strh	r2, [r3, #0]
    5584:	e0af      	b.n	56e6 <cmd_common_process+0xd1c>
					
					if (wr_flag_cfg)
    5586:	4b4d      	ldr	r3, [pc, #308]	; (56bc <cmd_common_process+0xcf2>)
    5588:	781b      	ldrb	r3, [r3, #0]
    558a:	2b00      	cmp	r3, #0
    558c:	d02d      	beq.n	55ea <cmd_common_process+0xc20>
					{	
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    558e:	2380      	movs	r3, #128	; 0x80
    5590:	005a      	lsls	r2, r3, #1
    5592:	4b4b      	ldr	r3, [pc, #300]	; (56c0 <cmd_common_process+0xcf6>)
    5594:	0011      	movs	r1, r2
    5596:	0018      	movs	r0, r3
    5598:	4b4a      	ldr	r3, [pc, #296]	; (56c4 <cmd_common_process+0xcfa>)
    559a:	4798      	blx	r3
    559c:	1e03      	subs	r3, r0, #0
    559e:	d000      	beq.n	55a2 <cmd_common_process+0xbd8>
    55a0:	e0a0      	b.n	56e4 <cmd_common_process+0xd1a>
						memcpy(&cfg_1,&cfg_1_tmp,sizeof(CFG_1));
    55a2:	4a49      	ldr	r2, [pc, #292]	; (56c8 <cmd_common_process+0xcfe>)
    55a4:	4b46      	ldr	r3, [pc, #280]	; (56c0 <cmd_common_process+0xcf6>)
    55a6:	0010      	movs	r0, r2
    55a8:	0019      	movs	r1, r3
    55aa:	2380      	movs	r3, #128	; 0x80
    55ac:	005b      	lsls	r3, r3, #1
    55ae:	001a      	movs	r2, r3
    55b0:	4b3a      	ldr	r3, [pc, #232]	; (569c <cmd_common_process+0xcd2>)
    55b2:	4798      	blx	r3
						save_log(EEPROM);
    55b4:	4b45      	ldr	r3, [pc, #276]	; (56cc <cmd_common_process+0xd02>)
    55b6:	681b      	ldr	r3, [r3, #0]
    55b8:	2b00      	cmp	r3, #0
    55ba:	d009      	beq.n	55d0 <cmd_common_process+0xc06>
    55bc:	4b3a      	ldr	r3, [pc, #232]	; (56a8 <cmd_common_process+0xcde>)
    55be:	781b      	ldrb	r3, [r3, #0]
    55c0:	0018      	movs	r0, r3
    55c2:	4b43      	ldr	r3, [pc, #268]	; (56d0 <cmd_common_process+0xd06>)
    55c4:	6819      	ldr	r1, [r3, #0]
    55c6:	4b41      	ldr	r3, [pc, #260]	; (56cc <cmd_common_process+0xd02>)
    55c8:	681a      	ldr	r2, [r3, #0]
    55ca:	2302      	movs	r3, #2
    55cc:	4c41      	ldr	r4, [pc, #260]	; (56d4 <cmd_common_process+0xd0a>)
    55ce:	47a0      	blx	r4
						wn |=+cfg_save();
    55d0:	4b41      	ldr	r3, [pc, #260]	; (56d8 <cmd_common_process+0xd0e>)
    55d2:	4798      	blx	r3
    55d4:	0003      	movs	r3, r0
    55d6:	b21a      	sxth	r2, r3
    55d8:	230a      	movs	r3, #10
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2100      	movs	r1, #0
    55de:	5e5b      	ldrsh	r3, [r3, r1]
    55e0:	4313      	orrs	r3, r2
    55e2:	b21a      	sxth	r2, r3
    55e4:	230a      	movs	r3, #10
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	801a      	strh	r2, [r3, #0]
					}
					
					if (wr_flag_acc)
    55ea:	4b31      	ldr	r3, [pc, #196]	; (56b0 <cmd_common_process+0xce6>)
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	2b00      	cmp	r3, #0
    55f0:	d010      	beq.n	5614 <cmd_common_process+0xc4a>
					{
						acc(WRITE);
    55f2:	2001      	movs	r0, #1
    55f4:	4b39      	ldr	r3, [pc, #228]	; (56dc <cmd_common_process+0xd12>)
    55f6:	4798      	blx	r3
						save_log(ACC_CHANGE);
    55f8:	4b34      	ldr	r3, [pc, #208]	; (56cc <cmd_common_process+0xd02>)
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	2b00      	cmp	r3, #0
    55fe:	d009      	beq.n	5614 <cmd_common_process+0xc4a>
    5600:	4b29      	ldr	r3, [pc, #164]	; (56a8 <cmd_common_process+0xcde>)
    5602:	781b      	ldrb	r3, [r3, #0]
    5604:	0018      	movs	r0, r3
    5606:	4b32      	ldr	r3, [pc, #200]	; (56d0 <cmd_common_process+0xd06>)
    5608:	6819      	ldr	r1, [r3, #0]
    560a:	4b30      	ldr	r3, [pc, #192]	; (56cc <cmd_common_process+0xd02>)
    560c:	681a      	ldr	r2, [r3, #0]
    560e:	2303      	movs	r3, #3
    5610:	4c30      	ldr	r4, [pc, #192]	; (56d4 <cmd_common_process+0xd0a>)
    5612:	47a0      	blx	r4
					}
					
					
					reset=1;
    5614:	4b32      	ldr	r3, [pc, #200]	; (56e0 <cmd_common_process+0xd16>)
    5616:	2201      	movs	r2, #1
    5618:	801a      	strh	r2, [r3, #0]
		break;
    561a:	e064      	b.n	56e6 <cmd_common_process+0xd1c>
		//......................................................................
		case 0x29:	if(size  !=  5) { return; }									//reboot
    561c:	230e      	movs	r3, #14
    561e:	18fb      	adds	r3, r7, r3
    5620:	881b      	ldrh	r3, [r3, #0]
    5622:	2b05      	cmp	r3, #5
    5624:	d000      	beq.n	5628 <cmd_common_process+0xc5e>
    5626:	e0ce      	b.n	57c6 <cmd_common_process+0xdfc>
					check_permission();
    5628:	4b1f      	ldr	r3, [pc, #124]	; (56a8 <cmd_common_process+0xcde>)
    562a:	781b      	ldrb	r3, [r3, #0]
    562c:	2b01      	cmp	r3, #1
    562e:	d00d      	beq.n	564c <cmd_common_process+0xc82>
    5630:	230a      	movs	r3, #10
    5632:	18fb      	adds	r3, r7, r3
    5634:	881b      	ldrh	r3, [r3, #0]
    5636:	4a1a      	ldr	r2, [pc, #104]	; (56a0 <cmd_common_process+0xcd6>)
    5638:	2100      	movs	r1, #0
    563a:	54d1      	strb	r1, [r2, r3]
    563c:	230a      	movs	r3, #10
    563e:	18fb      	adds	r3, r7, r3
    5640:	881a      	ldrh	r2, [r3, #0]
    5642:	230a      	movs	r3, #10
    5644:	18fb      	adds	r3, r7, r3
    5646:	3201      	adds	r2, #1
    5648:	801a      	strh	r2, [r3, #0]
    564a:	e04c      	b.n	56e6 <cmd_common_process+0xd1c>
					reset=1; wn++;
    564c:	4b24      	ldr	r3, [pc, #144]	; (56e0 <cmd_common_process+0xd16>)
    564e:	2201      	movs	r2, #1
    5650:	801a      	strh	r2, [r3, #0]
    5652:	230a      	movs	r3, #10
    5654:	18fb      	adds	r3, r7, r3
    5656:	881a      	ldrh	r2, [r3, #0]
    5658:	230a      	movs	r3, #10
    565a:	18fb      	adds	r3, r7, r3
    565c:	3201      	adds	r2, #1
    565e:	801a      	strh	r2, [r3, #0]
					send_admin();
    5660:	230a      	movs	r3, #10
    5662:	18fb      	adds	r3, r7, r3
    5664:	881b      	ldrh	r3, [r3, #0]
    5666:	4a0e      	ldr	r2, [pc, #56]	; (56a0 <cmd_common_process+0xcd6>)
    5668:	2101      	movs	r1, #1
    566a:	54d1      	strb	r1, [r2, r3]
    566c:	230a      	movs	r3, #10
    566e:	18fb      	adds	r3, r7, r3
    5670:	881a      	ldrh	r2, [r3, #0]
    5672:	230a      	movs	r3, #10
    5674:	18fb      	adds	r3, r7, r3
    5676:	3201      	adds	r2, #1
    5678:	801a      	strh	r2, [r3, #0]
		break;
    567a:	e034      	b.n	56e6 <cmd_common_process+0xd1c>
		break;
    567c:	46c0      	nop			; (mov r8, r8)
    567e:	e032      	b.n	56e6 <cmd_common_process+0xd1c>
					if(ixo > sizeof(CFG_1)	) { break;  }
    5680:	46c0      	nop			; (mov r8, r8)
    5682:	e030      	b.n	56e6 <cmd_common_process+0xd1c>
					if(ixo > sizeof(CFG_2)	) { break;  }
    5684:	46c0      	nop			; (mov r8, r8)
    5686:	e02e      	b.n	56e6 <cmd_common_process+0xd1c>
					if(cnt  ==  0) { break; }
    5688:	46c0      	nop			; (mov r8, r8)
    568a:	e02c      	b.n	56e6 <cmd_common_process+0xd1c>
					if(ixo       >= sizeof(CFG_1)) { break; }
    568c:	46c0      	nop			; (mov r8, r8)
    568e:	e02a      	b.n	56e6 <cmd_common_process+0xd1c>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    5690:	46c0      	nop			; (mov r8, r8)
    5692:	e028      	b.n	56e6 <cmd_common_process+0xd1c>
    5694:	20002554 	.word	0x20002554
    5698:	200004a3 	.word	0x200004a3
    569c:	0000c825 	.word	0x0000c825
    56a0:	200004a0 	.word	0x200004a0
    56a4:	0000600d 	.word	0x0000600d
    56a8:	20000451 	.word	0x20000451
    56ac:	0000603b 	.word	0x0000603b
    56b0:	20000459 	.word	0x20000459
    56b4:	200004a4 	.word	0x200004a4
    56b8:	00006939 	.word	0x00006939
    56bc:	20000458 	.word	0x20000458
    56c0:	20003cc4 	.word	0x20003cc4
    56c4:	00005d39 	.word	0x00005d39
    56c8:	20003dc4 	.word	0x20003dc4
    56cc:	20000454 	.word	0x20000454
    56d0:	2000049c 	.word	0x2000049c
    56d4:	0000455d 	.word	0x0000455d
    56d8:	0000afe9 	.word	0x0000afe9
    56dc:	00004215 	.word	0x00004215
    56e0:	20002548 	.word	0x20002548
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    56e4:	46c0      	nop			; (mov r8, r8)
		//......................................................................
		
		default :	   return;
	}
	
	cbuf[2]|=0x80;
    56e6:	4b3a      	ldr	r3, [pc, #232]	; (57d0 <cmd_common_process+0xe06>)
    56e8:	789b      	ldrb	r3, [r3, #2]
    56ea:	2280      	movs	r2, #128	; 0x80
    56ec:	4252      	negs	r2, r2
    56ee:	4313      	orrs	r3, r2
    56f0:	b2da      	uxtb	r2, r3
    56f2:	4b37      	ldr	r3, [pc, #220]	; (57d0 <cmd_common_process+0xe06>)
    56f4:	709a      	strb	r2, [r3, #2]

	cs= crc16_ccit(cbuf,wn);
    56f6:	1cbc      	adds	r4, r7, #2
    56f8:	230a      	movs	r3, #10
    56fa:	18fb      	adds	r3, r7, r3
    56fc:	881a      	ldrh	r2, [r3, #0]
    56fe:	4b34      	ldr	r3, [pc, #208]	; (57d0 <cmd_common_process+0xe06>)
    5700:	0011      	movs	r1, r2
    5702:	0018      	movs	r0, r3
    5704:	4b33      	ldr	r3, [pc, #204]	; (57d4 <cmd_common_process+0xe0a>)
    5706:	4798      	blx	r3
    5708:	0003      	movs	r3, r0
    570a:	8023      	strh	r3, [r4, #0]
	
	cbuf[wn] = (BYTE)(cs & 0x00ff);         wn++;
    570c:	230a      	movs	r3, #10
    570e:	18fb      	adds	r3, r7, r3
    5710:	881b      	ldrh	r3, [r3, #0]
    5712:	1cba      	adds	r2, r7, #2
    5714:	8812      	ldrh	r2, [r2, #0]
    5716:	b2d1      	uxtb	r1, r2
    5718:	4a2d      	ldr	r2, [pc, #180]	; (57d0 <cmd_common_process+0xe06>)
    571a:	54d1      	strb	r1, [r2, r3]
    571c:	230a      	movs	r3, #10
    571e:	18fb      	adds	r3, r7, r3
    5720:	881a      	ldrh	r2, [r3, #0]
    5722:	230a      	movs	r3, #10
    5724:	18fb      	adds	r3, r7, r3
    5726:	3201      	adds	r2, #1
    5728:	801a      	strh	r2, [r3, #0]
	cbuf[wn] = (BYTE)((cs & 0xff00) >> 8);  wn++;
    572a:	230a      	movs	r3, #10
    572c:	18fb      	adds	r3, r7, r3
    572e:	881b      	ldrh	r3, [r3, #0]
    5730:	1cba      	adds	r2, r7, #2
    5732:	8812      	ldrh	r2, [r2, #0]
    5734:	0a12      	lsrs	r2, r2, #8
    5736:	b292      	uxth	r2, r2
    5738:	b2d1      	uxtb	r1, r2
    573a:	4a25      	ldr	r2, [pc, #148]	; (57d0 <cmd_common_process+0xe06>)
    573c:	54d1      	strb	r1, [r2, r3]
    573e:	230a      	movs	r3, #10
    5740:	18fb      	adds	r3, r7, r3
    5742:	881a      	ldrh	r2, [r3, #0]
    5744:	230a      	movs	r3, #10
    5746:	18fb      	adds	r3, r7, r3
    5748:	3201      	adds	r2, #1
    574a:	801a      	strh	r2, [r3, #0]
	
	memcpy((BYTE*)&eth_sock[0].data,cbuf,wn);
    574c:	230a      	movs	r3, #10
    574e:	18fb      	adds	r3, r7, r3
    5750:	881a      	ldrh	r2, [r3, #0]
    5752:	491f      	ldr	r1, [pc, #124]	; (57d0 <cmd_common_process+0xe06>)
    5754:	4b20      	ldr	r3, [pc, #128]	; (57d8 <cmd_common_process+0xe0e>)
    5756:	0018      	movs	r0, r3
    5758:	4b20      	ldr	r3, [pc, #128]	; (57dc <cmd_common_process+0xe12>)
    575a:	4798      	blx	r3
	
	eth_sock[0].len[0]=((wn & 0xFF00)>>8);
    575c:	230a      	movs	r3, #10
    575e:	18fb      	adds	r3, r7, r3
    5760:	881b      	ldrh	r3, [r3, #0]
    5762:	0a1b      	lsrs	r3, r3, #8
    5764:	b29b      	uxth	r3, r3
    5766:	b2da      	uxtb	r2, r3
    5768:	4b1d      	ldr	r3, [pc, #116]	; (57e0 <cmd_common_process+0xe16>)
    576a:	719a      	strb	r2, [r3, #6]
	eth_sock[0].len[1]=(wn & 0x00FF);
    576c:	230a      	movs	r3, #10
    576e:	18fb      	adds	r3, r7, r3
    5770:	881b      	ldrh	r3, [r3, #0]
    5772:	b2da      	uxtb	r2, r3
    5774:	4b1a      	ldr	r3, [pc, #104]	; (57e0 <cmd_common_process+0xe16>)
    5776:	71da      	strb	r2, [r3, #7]
	eth_sock[0].w_status=1;
    5778:	4b19      	ldr	r3, [pc, #100]	; (57e0 <cmd_common_process+0xe16>)
    577a:	4a1a      	ldr	r2, [pc, #104]	; (57e4 <cmd_common_process+0xe1a>)
    577c:	2101      	movs	r1, #1
    577e:	5499      	strb	r1, [r3, r2]
    5780:	e022      	b.n	57c8 <cmd_common_process+0xdfe>
	if(eth_sock[0].r_status==FALSE) {return;}
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	e020      	b.n	57c8 <cmd_common_process+0xdfe>
	if(size	 <    5			  )	{ return; }
    5786:	46c0      	nop			; (mov r8, r8)
    5788:	e01e      	b.n	57c8 <cmd_common_process+0xdfe>
	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	e01c      	b.n	57c8 <cmd_common_process+0xdfe>
	if(addr !=  0){return;}
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	e01a      	b.n	57c8 <cmd_common_process+0xdfe>
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	e018      	b.n	57c8 <cmd_common_process+0xdfe>
		default :	   return;
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	e016      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x00:	if(size  !=  9) { return; }
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	e014      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	e012      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	e010      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	e00e      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x10:	if(size <  6) { return; }
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	e00c      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x17:	if(size  <  7) { return; }
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	e00a      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x20:	if(size <  7)		{ return; }								//login
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	e008      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x21:	if(size < 5)		{ return; }								//login send
    57b6:	46c0      	nop			; (mov r8, r8)
    57b8:	e006      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x22:	if(size <  5)		{ return; }								//login change
    57ba:	46c0      	nop			; (mov r8, r8)
    57bc:	e004      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x23:	if(size <  5)		{ return; }								//read logs
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	e002      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x27:	if(size  !=  5) { return; }									//change config
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	e000      	b.n	57c8 <cmd_common_process+0xdfe>
		case 0x29:	if(size  !=  5) { return; }									//reboot
    57c6:	46c0      	nop			; (mov r8, r8)
}
    57c8:	46bd      	mov	sp, r7
    57ca:	b005      	add	sp, #20
    57cc:	bd90      	pop	{r4, r7, pc}
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	200004a0 	.word	0x200004a0
    57d4:	00005d39 	.word	0x00005d39
    57d8:	200005d4 	.word	0x200005d4
    57dc:	0000c825 	.word	0x0000c825
    57e0:	200005cc 	.word	0x200005cc
    57e4:	000005d2 	.word	0x000005d2

000057e8 <cmd_usart_process>:

void cmd_usart_process (void)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	af00      	add	r7, sp, #0
	static BYTE n_port=1;
	
	for(n_port=1;n_port<5;n_port++)
    57ec:	4b13      	ldr	r3, [pc, #76]	; (583c <cmd_usart_process+0x54>)
    57ee:	2201      	movs	r2, #1
    57f0:	701a      	strb	r2, [r3, #0]
    57f2:	e01b      	b.n	582c <cmd_usart_process+0x44>
	{
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57f4:	4b11      	ldr	r3, [pc, #68]	; (583c <cmd_usart_process+0x54>)
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	1e5a      	subs	r2, r3, #1
    57fa:	4911      	ldr	r1, [pc, #68]	; (5840 <cmd_usart_process+0x58>)
    57fc:	2034      	movs	r0, #52	; 0x34
    57fe:	0013      	movs	r3, r2
    5800:	005b      	lsls	r3, r3, #1
    5802:	189b      	adds	r3, r3, r2
    5804:	009b      	lsls	r3, r3, #2
    5806:	189b      	adds	r3, r3, r2
    5808:	18cb      	adds	r3, r1, r3
    580a:	181b      	adds	r3, r3, r0
    580c:	781b      	ldrb	r3, [r3, #0]
    580e:	2b00      	cmp	r3, #0
    5810:	d005      	beq.n	581e <cmd_usart_process+0x36>
		usart_process(n_port);
    5812:	4b0a      	ldr	r3, [pc, #40]	; (583c <cmd_usart_process+0x54>)
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	0018      	movs	r0, r3
    5818:	f000 f814 	bl	5844 <usart_process>
    581c:	e000      	b.n	5820 <cmd_usart_process+0x38>
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    581e:	46c0      	nop			; (mov r8, r8)
	for(n_port=1;n_port<5;n_port++)
    5820:	4b06      	ldr	r3, [pc, #24]	; (583c <cmd_usart_process+0x54>)
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	3301      	adds	r3, #1
    5826:	b2da      	uxtb	r2, r3
    5828:	4b04      	ldr	r3, [pc, #16]	; (583c <cmd_usart_process+0x54>)
    582a:	701a      	strb	r2, [r3, #0]
    582c:	4b03      	ldr	r3, [pc, #12]	; (583c <cmd_usart_process+0x54>)
    582e:	781b      	ldrb	r3, [r3, #0]
    5830:	2b04      	cmp	r3, #4
    5832:	d9df      	bls.n	57f4 <cmd_usart_process+0xc>
	}
}
    5834:	46c0      	nop			; (mov r8, r8)
    5836:	46bd      	mov	sp, r7
    5838:	bd80      	pop	{r7, pc}
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	20000000 	.word	0x20000000
    5840:	20003dc4 	.word	0x20003dc4

00005844 <usart_process>:

void usart_process (BYTE n_port)
{
    5844:	b5b0      	push	{r4, r5, r7, lr}
    5846:	b084      	sub	sp, #16
    5848:	af00      	add	r7, sp, #0
    584a:	0002      	movs	r2, r0
    584c:	1dfb      	adds	r3, r7, #7
    584e:	701a      	strb	r2, [r3, #0]
	WORD size=0;
    5850:	230e      	movs	r3, #14
    5852:	18fb      	adds	r3, r7, r3
    5854:	2200      	movs	r2, #0
    5856:	801a      	strh	r2, [r3, #0]
	WORD crc;
	
	switch(port[n_port-1].stage)
    5858:	1dfb      	adds	r3, r7, #7
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	1e5a      	subs	r2, r3, #1
    585e:	48b8      	ldr	r0, [pc, #736]	; (5b40 <usart_process+0x2fc>)
    5860:	2387      	movs	r3, #135	; 0x87
    5862:	0099      	lsls	r1, r3, #2
    5864:	0013      	movs	r3, r2
    5866:	00db      	lsls	r3, r3, #3
    5868:	189b      	adds	r3, r3, r2
    586a:	019b      	lsls	r3, r3, #6
    586c:	18c3      	adds	r3, r0, r3
    586e:	185b      	adds	r3, r3, r1
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	b2db      	uxtb	r3, r3
    5874:	2b00      	cmp	r3, #0
    5876:	d003      	beq.n	5880 <usart_process+0x3c>
    5878:	2b01      	cmp	r3, #1
    587a:	d100      	bne.n	587e <usart_process+0x3a>
    587c:	e0fd      	b.n	5a7a <usart_process+0x236>
    587e:	e235      	b.n	5cec <usart_process+0x4a8>
	{
		case RS485_WRITE:
			//ETH message check
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5880:	1dfb      	adds	r3, r7, #7
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	4aaf      	ldr	r2, [pc, #700]	; (5b44 <usart_process+0x300>)
    5886:	49b0      	ldr	r1, [pc, #704]	; (5b48 <usart_process+0x304>)
    5888:	48b0      	ldr	r0, [pc, #704]	; (5b4c <usart_process+0x308>)
    588a:	4343      	muls	r3, r0
    588c:	18d3      	adds	r3, r2, r3
    588e:	185b      	adds	r3, r3, r1
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	2b00      	cmp	r3, #0
    5894:	d100      	bne.n	5898 <usart_process+0x54>
    5896:	e239      	b.n	5d0c <usart_process+0x4c8>
			
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5898:	1dfb      	adds	r3, r7, #7
    589a:	781b      	ldrb	r3, [r3, #0]
    589c:	1e5a      	subs	r2, r3, #1
    589e:	49ac      	ldr	r1, [pc, #688]	; (5b50 <usart_process+0x30c>)
    58a0:	206a      	movs	r0, #106	; 0x6a
    58a2:	0013      	movs	r3, r2
    58a4:	00db      	lsls	r3, r3, #3
    58a6:	189b      	adds	r3, r3, r2
    58a8:	005b      	lsls	r3, r3, #1
    58aa:	18cb      	adds	r3, r1, r3
    58ac:	181b      	adds	r3, r3, r0
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d108      	bne.n	58c6 <usart_process+0x82>
    58b4:	1dfb      	adds	r3, r7, #7
    58b6:	781b      	ldrb	r3, [r3, #0]
    58b8:	3b01      	subs	r3, #1
    58ba:	0018      	movs	r0, r3
    58bc:	4ba5      	ldr	r3, [pc, #660]	; (5b54 <usart_process+0x310>)
    58be:	4798      	blx	r3
    58c0:	1e03      	subs	r3, r0, #0
    58c2:	d100      	bne.n	58c6 <usart_process+0x82>
    58c4:	e224      	b.n	5d10 <usart_process+0x4cc>
			
			port[n_port-1].time_port = port[n_port-1].tout_port*10;							//check timeout
    58c6:	1dfb      	adds	r3, r7, #7
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	1e5a      	subs	r2, r3, #1
    58cc:	1dfb      	adds	r3, r7, #7
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	1e59      	subs	r1, r3, #1
    58d2:	4c9b      	ldr	r4, [pc, #620]	; (5b40 <usart_process+0x2fc>)
    58d4:	2386      	movs	r3, #134	; 0x86
    58d6:	0098      	lsls	r0, r3, #2
    58d8:	000b      	movs	r3, r1
    58da:	00db      	lsls	r3, r3, #3
    58dc:	185b      	adds	r3, r3, r1
    58de:	019b      	lsls	r3, r3, #6
    58e0:	18e3      	adds	r3, r4, r3
    58e2:	181b      	adds	r3, r3, r0
    58e4:	881b      	ldrh	r3, [r3, #0]
    58e6:	b29b      	uxth	r3, r3
    58e8:	0019      	movs	r1, r3
    58ea:	000b      	movs	r3, r1
    58ec:	009b      	lsls	r3, r3, #2
    58ee:	185b      	adds	r3, r3, r1
    58f0:	005b      	lsls	r3, r3, #1
    58f2:	001c      	movs	r4, r3
    58f4:	4892      	ldr	r0, [pc, #584]	; (5b40 <usart_process+0x2fc>)
    58f6:	2388      	movs	r3, #136	; 0x88
    58f8:	0099      	lsls	r1, r3, #2
    58fa:	0013      	movs	r3, r2
    58fc:	00db      	lsls	r3, r3, #3
    58fe:	189b      	adds	r3, r3, r2
    5900:	019b      	lsls	r3, r3, #6
    5902:	18c3      	adds	r3, r0, r3
    5904:	185b      	adds	r3, r3, r1
    5906:	601c      	str	r4, [r3, #0]
		
			size = eth_sock[n_port].len[0] << 8 | eth_sock[n_port].len[1];				//give size
    5908:	1dfb      	adds	r3, r7, #7
    590a:	781b      	ldrb	r3, [r3, #0]
    590c:	4a8d      	ldr	r2, [pc, #564]	; (5b44 <usart_process+0x300>)
    590e:	498f      	ldr	r1, [pc, #572]	; (5b4c <usart_process+0x308>)
    5910:	434b      	muls	r3, r1
    5912:	18d3      	adds	r3, r2, r3
    5914:	3306      	adds	r3, #6
    5916:	781b      	ldrb	r3, [r3, #0]
    5918:	021b      	lsls	r3, r3, #8
    591a:	b21a      	sxth	r2, r3
    591c:	1dfb      	adds	r3, r7, #7
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	4988      	ldr	r1, [pc, #544]	; (5b44 <usart_process+0x300>)
    5922:	488a      	ldr	r0, [pc, #552]	; (5b4c <usart_process+0x308>)
    5924:	4343      	muls	r3, r0
    5926:	18cb      	adds	r3, r1, r3
    5928:	3307      	adds	r3, #7
    592a:	781b      	ldrb	r3, [r3, #0]
    592c:	b21b      	sxth	r3, r3
    592e:	4313      	orrs	r3, r2
    5930:	b21a      	sxth	r2, r3
    5932:	230e      	movs	r3, #14
    5934:	18fb      	adds	r3, r7, r3
    5936:	801a      	strh	r2, [r3, #0]
		
			if(size>USART_BUF_SIZE)	{eth_sock[n_port].r_status = 0; return;}			//check overload
    5938:	230e      	movs	r3, #14
    593a:	18fb      	adds	r3, r7, r3
    593c:	881a      	ldrh	r2, [r3, #0]
    593e:	2380      	movs	r3, #128	; 0x80
    5940:	005b      	lsls	r3, r3, #1
    5942:	429a      	cmp	r2, r3
    5944:	d90a      	bls.n	595c <usart_process+0x118>
    5946:	1dfb      	adds	r3, r7, #7
    5948:	781b      	ldrb	r3, [r3, #0]
    594a:	4a7e      	ldr	r2, [pc, #504]	; (5b44 <usart_process+0x300>)
    594c:	497e      	ldr	r1, [pc, #504]	; (5b48 <usart_process+0x304>)
    594e:	487f      	ldr	r0, [pc, #508]	; (5b4c <usart_process+0x308>)
    5950:	4343      	muls	r3, r0
    5952:	18d3      	adds	r3, r2, r3
    5954:	185b      	adds	r3, r3, r1
    5956:	2200      	movs	r2, #0
    5958:	701a      	strb	r2, [r3, #0]
    595a:	e1dc      	b.n	5d16 <usart_process+0x4d2>
				
			switch(cfg_1.sock_rs485[n_port - 1].pl)
    595c:	1dfb      	adds	r3, r7, #7
    595e:	781b      	ldrb	r3, [r3, #0]
    5960:	1e5a      	subs	r2, r3, #1
    5962:	497b      	ldr	r1, [pc, #492]	; (5b50 <usart_process+0x30c>)
    5964:	2036      	movs	r0, #54	; 0x36
    5966:	0013      	movs	r3, r2
    5968:	005b      	lsls	r3, r3, #1
    596a:	189b      	adds	r3, r3, r2
    596c:	009b      	lsls	r3, r3, #2
    596e:	189b      	adds	r3, r3, r2
    5970:	18cb      	adds	r3, r1, r3
    5972:	181b      	adds	r3, r3, r0
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	2b02      	cmp	r3, #2
    5978:	d150      	bne.n	5a1c <usart_process+0x1d8>
			{
				case MBUS:		
					crc = crc16_mbus(eth_sock[n_port].data+MBAP_HDR_LEN, size - MBAP_HDR_LEN);
    597a:	1dfb      	adds	r3, r7, #7
    597c:	781b      	ldrb	r3, [r3, #0]
    597e:	4a73      	ldr	r2, [pc, #460]	; (5b4c <usart_process+0x308>)
    5980:	4353      	muls	r3, r2
    5982:	3308      	adds	r3, #8
    5984:	001a      	movs	r2, r3
    5986:	4b6f      	ldr	r3, [pc, #444]	; (5b44 <usart_process+0x300>)
    5988:	18d3      	adds	r3, r2, r3
    598a:	1d9a      	adds	r2, r3, #6
    598c:	230e      	movs	r3, #14
    598e:	18fb      	adds	r3, r7, r3
    5990:	881b      	ldrh	r3, [r3, #0]
    5992:	3b06      	subs	r3, #6
    5994:	b29b      	uxth	r3, r3
    5996:	210c      	movs	r1, #12
    5998:	187c      	adds	r4, r7, r1
    599a:	0019      	movs	r1, r3
    599c:	0010      	movs	r0, r2
    599e:	4b6e      	ldr	r3, [pc, #440]	; (5b58 <usart_process+0x314>)
    59a0:	4798      	blx	r3
    59a2:	0003      	movs	r3, r0
    59a4:	8023      	strh	r3, [r4, #0]
					eth_sock[n_port].data[size] = crc; 
    59a6:	1dfb      	adds	r3, r7, #7
    59a8:	781a      	ldrb	r2, [r3, #0]
    59aa:	230e      	movs	r3, #14
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	881b      	ldrh	r3, [r3, #0]
    59b0:	210c      	movs	r1, #12
    59b2:	1879      	adds	r1, r7, r1
    59b4:	8809      	ldrh	r1, [r1, #0]
    59b6:	b2cc      	uxtb	r4, r1
    59b8:	4962      	ldr	r1, [pc, #392]	; (5b44 <usart_process+0x300>)
    59ba:	4864      	ldr	r0, [pc, #400]	; (5b4c <usart_process+0x308>)
    59bc:	4342      	muls	r2, r0
    59be:	188a      	adds	r2, r1, r2
    59c0:	18d3      	adds	r3, r2, r3
    59c2:	3308      	adds	r3, #8
    59c4:	1c22      	adds	r2, r4, #0
    59c6:	701a      	strb	r2, [r3, #0]
					eth_sock[n_port].data[size + 1] = crc >> 8;
    59c8:	1dfb      	adds	r3, r7, #7
    59ca:	781a      	ldrb	r2, [r3, #0]
    59cc:	230e      	movs	r3, #14
    59ce:	18fb      	adds	r3, r7, r3
    59d0:	881b      	ldrh	r3, [r3, #0]
    59d2:	3301      	adds	r3, #1
    59d4:	210c      	movs	r1, #12
    59d6:	1879      	adds	r1, r7, r1
    59d8:	8809      	ldrh	r1, [r1, #0]
    59da:	0a09      	lsrs	r1, r1, #8
    59dc:	b289      	uxth	r1, r1
    59de:	b2cc      	uxtb	r4, r1
    59e0:	4958      	ldr	r1, [pc, #352]	; (5b44 <usart_process+0x300>)
    59e2:	485a      	ldr	r0, [pc, #360]	; (5b4c <usart_process+0x308>)
    59e4:	4342      	muls	r2, r0
    59e6:	188a      	adds	r2, r1, r2
    59e8:	18d3      	adds	r3, r2, r3
    59ea:	3308      	adds	r3, #8
    59ec:	1c22      	adds	r2, r4, #0
    59ee:	701a      	strb	r2, [r3, #0]
					usart_write(n_port - 1, eth_sock[n_port].data + MBAP_HDR_LEN, size - MBAP_HDR_LEN + 2);
    59f0:	1dfb      	adds	r3, r7, #7
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	3b01      	subs	r3, #1
    59f6:	b2d8      	uxtb	r0, r3
    59f8:	1dfb      	adds	r3, r7, #7
    59fa:	781b      	ldrb	r3, [r3, #0]
    59fc:	4a53      	ldr	r2, [pc, #332]	; (5b4c <usart_process+0x308>)
    59fe:	4353      	muls	r3, r2
    5a00:	3308      	adds	r3, #8
    5a02:	001a      	movs	r2, r3
    5a04:	4b4f      	ldr	r3, [pc, #316]	; (5b44 <usart_process+0x300>)
    5a06:	18d3      	adds	r3, r2, r3
    5a08:	1d99      	adds	r1, r3, #6
    5a0a:	230e      	movs	r3, #14
    5a0c:	18fb      	adds	r3, r7, r3
    5a0e:	881b      	ldrh	r3, [r3, #0]
    5a10:	3b04      	subs	r3, #4
    5a12:	b29b      	uxth	r3, r3
    5a14:	001a      	movs	r2, r3
    5a16:	4b51      	ldr	r3, [pc, #324]	; (5b5c <usart_process+0x318>)
    5a18:	4798      	blx	r3
				break;
    5a1a:	e012      	b.n	5a42 <usart_process+0x1fe>
				default://GATE
					usart_write(n_port - 1, eth_sock[n_port].data, size);
    5a1c:	1dfb      	adds	r3, r7, #7
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	3b01      	subs	r3, #1
    5a22:	b2d8      	uxtb	r0, r3
    5a24:	1dfb      	adds	r3, r7, #7
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	4a48      	ldr	r2, [pc, #288]	; (5b4c <usart_process+0x308>)
    5a2a:	4353      	muls	r3, r2
    5a2c:	3308      	adds	r3, #8
    5a2e:	001a      	movs	r2, r3
    5a30:	4b44      	ldr	r3, [pc, #272]	; (5b44 <usart_process+0x300>)
    5a32:	18d1      	adds	r1, r2, r3
    5a34:	230e      	movs	r3, #14
    5a36:	18fb      	adds	r3, r7, r3
    5a38:	881b      	ldrh	r3, [r3, #0]
    5a3a:	001a      	movs	r2, r3
    5a3c:	4b47      	ldr	r3, [pc, #284]	; (5b5c <usart_process+0x318>)
    5a3e:	4798      	blx	r3
				break;
    5a40:	46c0      	nop			; (mov r8, r8)
			}
			port[n_port-1].stage = RS485_READ;
    5a42:	1dfb      	adds	r3, r7, #7
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	1e5a      	subs	r2, r3, #1
    5a48:	483d      	ldr	r0, [pc, #244]	; (5b40 <usart_process+0x2fc>)
    5a4a:	2387      	movs	r3, #135	; 0x87
    5a4c:	0099      	lsls	r1, r3, #2
    5a4e:	0013      	movs	r3, r2
    5a50:	00db      	lsls	r3, r3, #3
    5a52:	189b      	adds	r3, r3, r2
    5a54:	019b      	lsls	r3, r3, #6
    5a56:	18c3      	adds	r3, r0, r3
    5a58:	185b      	adds	r3, r3, r1
    5a5a:	2201      	movs	r2, #1
    5a5c:	701a      	strb	r2, [r3, #0]
			port[n_port-1].rn = 0;
    5a5e:	1dfb      	adds	r3, r7, #7
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	1e5a      	subs	r2, r3, #1
    5a64:	4936      	ldr	r1, [pc, #216]	; (5b40 <usart_process+0x2fc>)
    5a66:	483e      	ldr	r0, [pc, #248]	; (5b60 <usart_process+0x31c>)
    5a68:	0013      	movs	r3, r2
    5a6a:	00db      	lsls	r3, r3, #3
    5a6c:	189b      	adds	r3, r3, r2
    5a6e:	019b      	lsls	r3, r3, #6
    5a70:	18cb      	adds	r3, r1, r3
    5a72:	181b      	adds	r3, r3, r0
    5a74:	2200      	movs	r2, #0
    5a76:	801a      	strh	r2, [r3, #0]

		return;
    5a78:	e14d      	b.n	5d16 <usart_process+0x4d2>
		case RS485_READ://UP
			size = usart_read(n_port - 1, port[n_port-1].rbuf, USART_BUF_SIZE);   //give mess size
    5a7a:	1dfb      	adds	r3, r7, #7
    5a7c:	781b      	ldrb	r3, [r3, #0]
    5a7e:	3b01      	subs	r3, #1
    5a80:	b2d8      	uxtb	r0, r3
    5a82:	1dfb      	adds	r3, r7, #7
    5a84:	781b      	ldrb	r3, [r3, #0]
    5a86:	1e5a      	subs	r2, r3, #1
    5a88:	0013      	movs	r3, r2
    5a8a:	00db      	lsls	r3, r3, #3
    5a8c:	189b      	adds	r3, r3, r2
    5a8e:	019b      	lsls	r3, r3, #6
    5a90:	3309      	adds	r3, #9
    5a92:	33ff      	adds	r3, #255	; 0xff
    5a94:	001a      	movs	r2, r3
    5a96:	4b2a      	ldr	r3, [pc, #168]	; (5b40 <usart_process+0x2fc>)
    5a98:	18d3      	adds	r3, r2, r3
    5a9a:	1c59      	adds	r1, r3, #1
    5a9c:	230e      	movs	r3, #14
    5a9e:	18fc      	adds	r4, r7, r3
    5aa0:	2380      	movs	r3, #128	; 0x80
    5aa2:	005b      	lsls	r3, r3, #1
    5aa4:	001a      	movs	r2, r3
    5aa6:	4b2f      	ldr	r3, [pc, #188]	; (5b64 <usart_process+0x320>)
    5aa8:	4798      	blx	r3
    5aaa:	0003      	movs	r3, r0
    5aac:	8023      	strh	r3, [r4, #0]
			if (size != 0)
    5aae:	230e      	movs	r3, #14
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	881b      	ldrh	r3, [r3, #0]
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d100      	bne.n	5aba <usart_process+0x276>
    5ab8:	e0e3      	b.n	5c82 <usart_process+0x43e>
			{
				switch (cfg_1.sock_rs485[n_port - 1].pl)
    5aba:	1dfb      	adds	r3, r7, #7
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	1e5a      	subs	r2, r3, #1
    5ac0:	4923      	ldr	r1, [pc, #140]	; (5b50 <usart_process+0x30c>)
    5ac2:	2036      	movs	r0, #54	; 0x36
    5ac4:	0013      	movs	r3, r2
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	189b      	adds	r3, r3, r2
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	189b      	adds	r3, r3, r2
    5ace:	18cb      	adds	r3, r1, r3
    5ad0:	181b      	adds	r3, r3, r0
    5ad2:	781b      	ldrb	r3, [r3, #0]
    5ad4:	2b02      	cmp	r3, #2
    5ad6:	d149      	bne.n	5b6c <usart_process+0x328>
				{
					case MBUS:
					
						memcpy(eth_sock[n_port].data + MBAP_HDR_LEN, port[n_port-1].rbuf, size);
    5ad8:	1dfb      	adds	r3, r7, #7
    5ada:	781b      	ldrb	r3, [r3, #0]
    5adc:	4a1b      	ldr	r2, [pc, #108]	; (5b4c <usart_process+0x308>)
    5ade:	4353      	muls	r3, r2
    5ae0:	3308      	adds	r3, #8
    5ae2:	001a      	movs	r2, r3
    5ae4:	4b17      	ldr	r3, [pc, #92]	; (5b44 <usart_process+0x300>)
    5ae6:	18d3      	adds	r3, r2, r3
    5ae8:	1d98      	adds	r0, r3, #6
    5aea:	1dfb      	adds	r3, r7, #7
    5aec:	781b      	ldrb	r3, [r3, #0]
    5aee:	1e5a      	subs	r2, r3, #1
    5af0:	0013      	movs	r3, r2
    5af2:	00db      	lsls	r3, r3, #3
    5af4:	189b      	adds	r3, r3, r2
    5af6:	019b      	lsls	r3, r3, #6
    5af8:	3309      	adds	r3, #9
    5afa:	33ff      	adds	r3, #255	; 0xff
    5afc:	001a      	movs	r2, r3
    5afe:	4b10      	ldr	r3, [pc, #64]	; (5b40 <usart_process+0x2fc>)
    5b00:	18d3      	adds	r3, r2, r3
    5b02:	1c59      	adds	r1, r3, #1
    5b04:	230e      	movs	r3, #14
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	881b      	ldrh	r3, [r3, #0]
    5b0a:	001a      	movs	r2, r3
    5b0c:	4b16      	ldr	r3, [pc, #88]	; (5b68 <usart_process+0x324>)
    5b0e:	4798      	blx	r3
						size += MBAP_HDR_LEN - 2;
    5b10:	230e      	movs	r3, #14
    5b12:	18fb      	adds	r3, r7, r3
    5b14:	220e      	movs	r2, #14
    5b16:	18ba      	adds	r2, r7, r2
    5b18:	8812      	ldrh	r2, [r2, #0]
    5b1a:	3204      	adds	r2, #4
    5b1c:	801a      	strh	r2, [r3, #0]
						eth_sock[n_port].data[5]=size-MBAP_HDR_LEN;
    5b1e:	1dfb      	adds	r3, r7, #7
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	220e      	movs	r2, #14
    5b24:	18ba      	adds	r2, r7, r2
    5b26:	8812      	ldrh	r2, [r2, #0]
    5b28:	b2d2      	uxtb	r2, r2
    5b2a:	3a06      	subs	r2, #6
    5b2c:	b2d0      	uxtb	r0, r2
    5b2e:	4a05      	ldr	r2, [pc, #20]	; (5b44 <usart_process+0x300>)
    5b30:	4906      	ldr	r1, [pc, #24]	; (5b4c <usart_process+0x308>)
    5b32:	434b      	muls	r3, r1
    5b34:	18d3      	adds	r3, r2, r3
    5b36:	330d      	adds	r3, #13
    5b38:	1c02      	adds	r2, r0, #0
    5b3a:	701a      	strb	r2, [r3, #0]
					break;
    5b3c:	e032      	b.n	5ba4 <usart_process+0x360>
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	200031fc 	.word	0x200031fc
    5b44:	200005cc 	.word	0x200005cc
    5b48:	000005d1 	.word	0x000005d1
    5b4c:	000005e5 	.word	0x000005e5
    5b50:	20003dc4 	.word	0x20003dc4
    5b54:	00004399 	.word	0x00004399
    5b58:	00005df9 	.word	0x00005df9
    5b5c:	00008ecd 	.word	0x00008ecd
    5b60:	0000020e 	.word	0x0000020e
    5b64:	00008fe1 	.word	0x00008fe1
    5b68:	0000c825 	.word	0x0000c825
					default://GATE
						memcpy(eth_sock[n_port].data, port[n_port-1].rbuf, size); 
    5b6c:	1dfb      	adds	r3, r7, #7
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	4a6a      	ldr	r2, [pc, #424]	; (5d1c <usart_process+0x4d8>)
    5b72:	4353      	muls	r3, r2
    5b74:	3308      	adds	r3, #8
    5b76:	001a      	movs	r2, r3
    5b78:	4b69      	ldr	r3, [pc, #420]	; (5d20 <usart_process+0x4dc>)
    5b7a:	18d0      	adds	r0, r2, r3
    5b7c:	1dfb      	adds	r3, r7, #7
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	1e5a      	subs	r2, r3, #1
    5b82:	0013      	movs	r3, r2
    5b84:	00db      	lsls	r3, r3, #3
    5b86:	189b      	adds	r3, r3, r2
    5b88:	019b      	lsls	r3, r3, #6
    5b8a:	3309      	adds	r3, #9
    5b8c:	33ff      	adds	r3, #255	; 0xff
    5b8e:	001a      	movs	r2, r3
    5b90:	4b64      	ldr	r3, [pc, #400]	; (5d24 <usart_process+0x4e0>)
    5b92:	18d3      	adds	r3, r2, r3
    5b94:	1c59      	adds	r1, r3, #1
    5b96:	230e      	movs	r3, #14
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	881b      	ldrh	r3, [r3, #0]
    5b9c:	001a      	movs	r2, r3
    5b9e:	4b62      	ldr	r3, [pc, #392]	; (5d28 <usart_process+0x4e4>)
    5ba0:	4798      	blx	r3
					break;
    5ba2:	46c0      	nop			; (mov r8, r8)
				}
			
				eth_sock[n_port].len[0]		= (size & 0xFF00) >> 8;
    5ba4:	1dfb      	adds	r3, r7, #7
    5ba6:	781b      	ldrb	r3, [r3, #0]
    5ba8:	220e      	movs	r2, #14
    5baa:	18ba      	adds	r2, r7, r2
    5bac:	8812      	ldrh	r2, [r2, #0]
    5bae:	0a12      	lsrs	r2, r2, #8
    5bb0:	b292      	uxth	r2, r2
    5bb2:	b2d0      	uxtb	r0, r2
    5bb4:	4a5a      	ldr	r2, [pc, #360]	; (5d20 <usart_process+0x4dc>)
    5bb6:	4959      	ldr	r1, [pc, #356]	; (5d1c <usart_process+0x4d8>)
    5bb8:	434b      	muls	r3, r1
    5bba:	18d3      	adds	r3, r2, r3
    5bbc:	3306      	adds	r3, #6
    5bbe:	1c02      	adds	r2, r0, #0
    5bc0:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].len[1]		=  size & 0x00FF;
    5bc2:	1dfb      	adds	r3, r7, #7
    5bc4:	781b      	ldrb	r3, [r3, #0]
    5bc6:	220e      	movs	r2, #14
    5bc8:	18ba      	adds	r2, r7, r2
    5bca:	8812      	ldrh	r2, [r2, #0]
    5bcc:	b2d0      	uxtb	r0, r2
    5bce:	4a54      	ldr	r2, [pc, #336]	; (5d20 <usart_process+0x4dc>)
    5bd0:	4952      	ldr	r1, [pc, #328]	; (5d1c <usart_process+0x4d8>)
    5bd2:	434b      	muls	r3, r1
    5bd4:	18d3      	adds	r3, r2, r3
    5bd6:	3307      	adds	r3, #7
    5bd8:	1c02      	adds	r2, r0, #0
    5bda:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].w_status	= 1;
    5bdc:	1dfb      	adds	r3, r7, #7
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	4a4f      	ldr	r2, [pc, #316]	; (5d20 <usart_process+0x4dc>)
    5be2:	4952      	ldr	r1, [pc, #328]	; (5d2c <usart_process+0x4e8>)
    5be4:	484d      	ldr	r0, [pc, #308]	; (5d1c <usart_process+0x4d8>)
    5be6:	4343      	muls	r3, r0
    5be8:	18d3      	adds	r3, r2, r3
    5bea:	185b      	adds	r3, r3, r1
    5bec:	2201      	movs	r2, #1
    5bee:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt			= (port[n_port-1].tout_port*10)-port[n_port-1].time_port;
    5bf0:	1dfb      	adds	r3, r7, #7
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	1e5a      	subs	r2, r3, #1
    5bf6:	1dfb      	adds	r3, r7, #7
    5bf8:	781b      	ldrb	r3, [r3, #0]
    5bfa:	1e59      	subs	r1, r3, #1
    5bfc:	4c49      	ldr	r4, [pc, #292]	; (5d24 <usart_process+0x4e0>)
    5bfe:	2386      	movs	r3, #134	; 0x86
    5c00:	0098      	lsls	r0, r3, #2
    5c02:	000b      	movs	r3, r1
    5c04:	00db      	lsls	r3, r3, #3
    5c06:	185b      	adds	r3, r3, r1
    5c08:	019b      	lsls	r3, r3, #6
    5c0a:	18e3      	adds	r3, r4, r3
    5c0c:	181b      	adds	r3, r3, r0
    5c0e:	881b      	ldrh	r3, [r3, #0]
    5c10:	b29b      	uxth	r3, r3
    5c12:	1c19      	adds	r1, r3, #0
    5c14:	0089      	lsls	r1, r1, #2
    5c16:	18cb      	adds	r3, r1, r3
    5c18:	18db      	adds	r3, r3, r3
    5c1a:	b298      	uxth	r0, r3
    5c1c:	1dfb      	adds	r3, r7, #7
    5c1e:	781b      	ldrb	r3, [r3, #0]
    5c20:	1e59      	subs	r1, r3, #1
    5c22:	4d40      	ldr	r5, [pc, #256]	; (5d24 <usart_process+0x4e0>)
    5c24:	2388      	movs	r3, #136	; 0x88
    5c26:	009c      	lsls	r4, r3, #2
    5c28:	000b      	movs	r3, r1
    5c2a:	00db      	lsls	r3, r3, #3
    5c2c:	185b      	adds	r3, r3, r1
    5c2e:	019b      	lsls	r3, r3, #6
    5c30:	18eb      	adds	r3, r5, r3
    5c32:	191b      	adds	r3, r3, r4
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	b29b      	uxth	r3, r3
    5c38:	1ac3      	subs	r3, r0, r3
    5c3a:	b29c      	uxth	r4, r3
    5c3c:	4939      	ldr	r1, [pc, #228]	; (5d24 <usart_process+0x4e0>)
    5c3e:	483c      	ldr	r0, [pc, #240]	; (5d30 <usart_process+0x4ec>)
    5c40:	0013      	movs	r3, r2
    5c42:	00db      	lsls	r3, r3, #3
    5c44:	189b      	adds	r3, r3, r2
    5c46:	019b      	lsls	r3, r3, #6
    5c48:	18cb      	adds	r3, r1, r3
    5c4a:	181b      	adds	r3, r3, r0
    5c4c:	1c22      	adds	r2, r4, #0
    5c4e:	801a      	strh	r2, [r3, #0]
				port[n_port-1].stage		= RS485_WRITE;
    5c50:	1dfb      	adds	r3, r7, #7
    5c52:	781b      	ldrb	r3, [r3, #0]
    5c54:	1e5a      	subs	r2, r3, #1
    5c56:	4833      	ldr	r0, [pc, #204]	; (5d24 <usart_process+0x4e0>)
    5c58:	2387      	movs	r3, #135	; 0x87
    5c5a:	0099      	lsls	r1, r3, #2
    5c5c:	0013      	movs	r3, r2
    5c5e:	00db      	lsls	r3, r3, #3
    5c60:	189b      	adds	r3, r3, r2
    5c62:	019b      	lsls	r3, r3, #6
    5c64:	18c3      	adds	r3, r0, r3
    5c66:	185b      	adds	r3, r3, r1
    5c68:	2200      	movs	r2, #0
    5c6a:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].r_status	= 0;
    5c6c:	1dfb      	adds	r3, r7, #7
    5c6e:	781b      	ldrb	r3, [r3, #0]
    5c70:	4a2b      	ldr	r2, [pc, #172]	; (5d20 <usart_process+0x4dc>)
    5c72:	4930      	ldr	r1, [pc, #192]	; (5d34 <usart_process+0x4f0>)
    5c74:	4829      	ldr	r0, [pc, #164]	; (5d1c <usart_process+0x4d8>)
    5c76:	4343      	muls	r3, r0
    5c78:	18d3      	adds	r3, r2, r3
    5c7a:	185b      	adds	r3, r3, r1
    5c7c:	2200      	movs	r2, #0
    5c7e:	701a      	strb	r2, [r3, #0]
				return;
    5c80:	e049      	b.n	5d16 <usart_process+0x4d2>
			}
			if (port[n_port-1].time_port==0)
    5c82:	1dfb      	adds	r3, r7, #7
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	1e5a      	subs	r2, r3, #1
    5c88:	4826      	ldr	r0, [pc, #152]	; (5d24 <usart_process+0x4e0>)
    5c8a:	2388      	movs	r3, #136	; 0x88
    5c8c:	0099      	lsls	r1, r3, #2
    5c8e:	0013      	movs	r3, r2
    5c90:	00db      	lsls	r3, r3, #3
    5c92:	189b      	adds	r3, r3, r2
    5c94:	019b      	lsls	r3, r3, #6
    5c96:	18c3      	adds	r3, r0, r3
    5c98:	185b      	adds	r3, r3, r1
    5c9a:	681b      	ldr	r3, [r3, #0]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d139      	bne.n	5d14 <usart_process+0x4d0>
			{
				port[n_port-1].stage = RS485_WRITE;
    5ca0:	1dfb      	adds	r3, r7, #7
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	1e5a      	subs	r2, r3, #1
    5ca6:	481f      	ldr	r0, [pc, #124]	; (5d24 <usart_process+0x4e0>)
    5ca8:	2387      	movs	r3, #135	; 0x87
    5caa:	0099      	lsls	r1, r3, #2
    5cac:	0013      	movs	r3, r2
    5cae:	00db      	lsls	r3, r3, #3
    5cb0:	189b      	adds	r3, r3, r2
    5cb2:	019b      	lsls	r3, r3, #6
    5cb4:	18c3      	adds	r3, r0, r3
    5cb6:	185b      	adds	r3, r3, r1
    5cb8:	2200      	movs	r2, #0
    5cba:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt 	 = 0;
    5cbc:	1dfb      	adds	r3, r7, #7
    5cbe:	781b      	ldrb	r3, [r3, #0]
    5cc0:	1e5a      	subs	r2, r3, #1
    5cc2:	4918      	ldr	r1, [pc, #96]	; (5d24 <usart_process+0x4e0>)
    5cc4:	481a      	ldr	r0, [pc, #104]	; (5d30 <usart_process+0x4ec>)
    5cc6:	0013      	movs	r3, r2
    5cc8:	00db      	lsls	r3, r3, #3
    5cca:	189b      	adds	r3, r3, r2
    5ccc:	019b      	lsls	r3, r3, #6
    5cce:	18cb      	adds	r3, r1, r3
    5cd0:	181b      	adds	r3, r3, r0
    5cd2:	2200      	movs	r2, #0
    5cd4:	801a      	strh	r2, [r3, #0]
				eth_sock[n_port].r_status = 0;
    5cd6:	1dfb      	adds	r3, r7, #7
    5cd8:	781b      	ldrb	r3, [r3, #0]
    5cda:	4a11      	ldr	r2, [pc, #68]	; (5d20 <usart_process+0x4dc>)
    5cdc:	4915      	ldr	r1, [pc, #84]	; (5d34 <usart_process+0x4f0>)
    5cde:	480f      	ldr	r0, [pc, #60]	; (5d1c <usart_process+0x4d8>)
    5ce0:	4343      	muls	r3, r0
    5ce2:	18d3      	adds	r3, r2, r3
    5ce4:	185b      	adds	r3, r3, r1
    5ce6:	2200      	movs	r2, #0
    5ce8:	701a      	strb	r2, [r3, #0]
			}
		return;
    5cea:	e013      	b.n	5d14 <usart_process+0x4d0>
		default:
			port[n_port-1].stage = RS485_WRITE;
    5cec:	1dfb      	adds	r3, r7, #7
    5cee:	781b      	ldrb	r3, [r3, #0]
    5cf0:	1e5a      	subs	r2, r3, #1
    5cf2:	480c      	ldr	r0, [pc, #48]	; (5d24 <usart_process+0x4e0>)
    5cf4:	2387      	movs	r3, #135	; 0x87
    5cf6:	0099      	lsls	r1, r3, #2
    5cf8:	0013      	movs	r3, r2
    5cfa:	00db      	lsls	r3, r3, #3
    5cfc:	189b      	adds	r3, r3, r2
    5cfe:	019b      	lsls	r3, r3, #6
    5d00:	18c3      	adds	r3, r0, r3
    5d02:	185b      	adds	r3, r3, r1
    5d04:	2200      	movs	r2, #0
    5d06:	701a      	strb	r2, [r3, #0]
		break;
    5d08:	46c0      	nop			; (mov r8, r8)
    5d0a:	e004      	b.n	5d16 <usart_process+0x4d2>
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5d0c:	46c0      	nop			; (mov r8, r8)
    5d0e:	e002      	b.n	5d16 <usart_process+0x4d2>
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5d10:	46c0      	nop			; (mov r8, r8)
    5d12:	e000      	b.n	5d16 <usart_process+0x4d2>
		return;
    5d14:	46c0      	nop			; (mov r8, r8)
	}
    5d16:	46bd      	mov	sp, r7
    5d18:	b004      	add	sp, #16
    5d1a:	bdb0      	pop	{r4, r5, r7, pc}
    5d1c:	000005e5 	.word	0x000005e5
    5d20:	200005cc 	.word	0x200005cc
    5d24:	200031fc 	.word	0x200031fc
    5d28:	0000c825 	.word	0x0000c825
    5d2c:	000005d2 	.word	0x000005d2
    5d30:	0000021a 	.word	0x0000021a
    5d34:	000005d1 	.word	0x000005d1

00005d38 <crc16_ccit>:
#include "def.h"

WORD crc16_ccit(BYTE *buf,WORD size)
{
    5d38:	b580      	push	{r7, lr}
    5d3a:	b084      	sub	sp, #16
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	6078      	str	r0, [r7, #4]
    5d40:	000a      	movs	r2, r1
    5d42:	1cbb      	adds	r3, r7, #2
    5d44:	801a      	strh	r2, [r3, #0]
	WORD crc = 0xFFFF;
    5d46:	230e      	movs	r3, #14
    5d48:	18fb      	adds	r3, r7, r3
    5d4a:	2201      	movs	r2, #1
    5d4c:	4252      	negs	r2, r2
    5d4e:	801a      	strh	r2, [r3, #0]
	BYTE i;

	while (size--)
    5d50:	e037      	b.n	5dc2 <crc16_ccit+0x8a>
	{
		crc ^= *buf++ << 8;
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	1c5a      	adds	r2, r3, #1
    5d56:	607a      	str	r2, [r7, #4]
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	021b      	lsls	r3, r3, #8
    5d5c:	b21a      	sxth	r2, r3
    5d5e:	230e      	movs	r3, #14
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	2100      	movs	r1, #0
    5d64:	5e5b      	ldrsh	r3, [r3, r1]
    5d66:	4053      	eors	r3, r2
    5d68:	b21a      	sxth	r2, r3
    5d6a:	230e      	movs	r3, #14
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++)
    5d70:	230d      	movs	r3, #13
    5d72:	18fb      	adds	r3, r7, r3
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
    5d78:	e01e      	b.n	5db8 <crc16_ccit+0x80>
		crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
    5d7a:	230e      	movs	r3, #14
    5d7c:	18fb      	adds	r3, r7, r3
    5d7e:	2200      	movs	r2, #0
    5d80:	5e9b      	ldrsh	r3, [r3, r2]
    5d82:	2b00      	cmp	r3, #0
    5d84:	da09      	bge.n	5d9a <crc16_ccit+0x62>
    5d86:	230e      	movs	r3, #14
    5d88:	18fb      	adds	r3, r7, r3
    5d8a:	881b      	ldrh	r3, [r3, #0]
    5d8c:	005b      	lsls	r3, r3, #1
    5d8e:	b21b      	sxth	r3, r3
    5d90:	4a18      	ldr	r2, [pc, #96]	; (5df4 <crc16_ccit+0xbc>)
    5d92:	4053      	eors	r3, r2
    5d94:	b21b      	sxth	r3, r3
    5d96:	b29b      	uxth	r3, r3
    5d98:	e004      	b.n	5da4 <crc16_ccit+0x6c>
    5d9a:	230e      	movs	r3, #14
    5d9c:	18fb      	adds	r3, r7, r3
    5d9e:	881b      	ldrh	r3, [r3, #0]
    5da0:	18db      	adds	r3, r3, r3
    5da2:	b29b      	uxth	r3, r3
    5da4:	220e      	movs	r2, #14
    5da6:	18ba      	adds	r2, r7, r2
    5da8:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++)
    5daa:	230d      	movs	r3, #13
    5dac:	18fb      	adds	r3, r7, r3
    5dae:	781a      	ldrb	r2, [r3, #0]
    5db0:	230d      	movs	r3, #13
    5db2:	18fb      	adds	r3, r7, r3
    5db4:	3201      	adds	r2, #1
    5db6:	701a      	strb	r2, [r3, #0]
    5db8:	230d      	movs	r3, #13
    5dba:	18fb      	adds	r3, r7, r3
    5dbc:	781b      	ldrb	r3, [r3, #0]
    5dbe:	2b07      	cmp	r3, #7
    5dc0:	d9db      	bls.n	5d7a <crc16_ccit+0x42>
	while (size--)
    5dc2:	1cbb      	adds	r3, r7, #2
    5dc4:	881b      	ldrh	r3, [r3, #0]
    5dc6:	1cba      	adds	r2, r7, #2
    5dc8:	1e59      	subs	r1, r3, #1
    5dca:	8011      	strh	r1, [r2, #0]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d1c0      	bne.n	5d52 <crc16_ccit+0x1a>
	}
	return ((crc>>8) | (crc<<8));
    5dd0:	230e      	movs	r3, #14
    5dd2:	18fb      	adds	r3, r7, r3
    5dd4:	881b      	ldrh	r3, [r3, #0]
    5dd6:	0a1b      	lsrs	r3, r3, #8
    5dd8:	b29b      	uxth	r3, r3
    5dda:	b21a      	sxth	r2, r3
    5ddc:	230e      	movs	r3, #14
    5dde:	18fb      	adds	r3, r7, r3
    5de0:	881b      	ldrh	r3, [r3, #0]
    5de2:	021b      	lsls	r3, r3, #8
    5de4:	b21b      	sxth	r3, r3
    5de6:	4313      	orrs	r3, r2
    5de8:	b21b      	sxth	r3, r3
    5dea:	b29b      	uxth	r3, r3
}
    5dec:	0018      	movs	r0, r3
    5dee:	46bd      	mov	sp, r7
    5df0:	b004      	add	sp, #16
    5df2:	bd80      	pop	{r7, pc}
    5df4:	00001021 	.word	0x00001021

00005df8 <crc16_mbus>:

WORD crc16_mbus( BYTE *buf, WORD size )
{
    5df8:	b580      	push	{r7, lr}
    5dfa:	b084      	sub	sp, #16
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
    5e00:	000a      	movs	r2, r1
    5e02:	1cbb      	adds	r3, r7, #2
    5e04:	801a      	strh	r2, [r3, #0]
	 WORD n;
	 uint8_t i;
	 WORD crc = 0xFFFF;
    5e06:	230a      	movs	r3, #10
    5e08:	18fb      	adds	r3, r7, r3
    5e0a:	2201      	movs	r2, #1
    5e0c:	4252      	negs	r2, r2
    5e0e:	801a      	strh	r2, [r3, #0]
	 for ( n = 0; n < size; n++ )
    5e10:	230e      	movs	r3, #14
    5e12:	18fb      	adds	r3, r7, r3
    5e14:	2200      	movs	r2, #0
    5e16:	801a      	strh	r2, [r3, #0]
    5e18:	e042      	b.n	5ea0 <crc16_mbus+0xa8>
	 {
		 crc ^= buf[n];
    5e1a:	230e      	movs	r3, #14
    5e1c:	18fb      	adds	r3, r7, r3
    5e1e:	881b      	ldrh	r3, [r3, #0]
    5e20:	687a      	ldr	r2, [r7, #4]
    5e22:	18d3      	adds	r3, r2, r3
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	b299      	uxth	r1, r3
    5e28:	230a      	movs	r3, #10
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	220a      	movs	r2, #10
    5e2e:	18ba      	adds	r2, r7, r2
    5e30:	8812      	ldrh	r2, [r2, #0]
    5e32:	404a      	eors	r2, r1
    5e34:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e36:	230d      	movs	r3, #13
    5e38:	18fb      	adds	r3, r7, r3
    5e3a:	2208      	movs	r2, #8
    5e3c:	701a      	strb	r2, [r3, #0]
    5e3e:	e023      	b.n	5e88 <crc16_mbus+0x90>
		 {
			 if ( crc & 0x0001 )
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	881b      	ldrh	r3, [r3, #0]
    5e46:	2201      	movs	r2, #1
    5e48:	4013      	ands	r3, r2
    5e4a:	d00f      	beq.n	5e6c <crc16_mbus+0x74>
			 {
				 crc >>= 1;
    5e4c:	230a      	movs	r3, #10
    5e4e:	18fb      	adds	r3, r7, r3
    5e50:	220a      	movs	r2, #10
    5e52:	18ba      	adds	r2, r7, r2
    5e54:	8812      	ldrh	r2, [r2, #0]
    5e56:	0852      	lsrs	r2, r2, #1
    5e58:	801a      	strh	r2, [r3, #0]
				 crc ^= 0xA001;
    5e5a:	230a      	movs	r3, #10
    5e5c:	18fb      	adds	r3, r7, r3
    5e5e:	220a      	movs	r2, #10
    5e60:	18ba      	adds	r2, r7, r2
    5e62:	8812      	ldrh	r2, [r2, #0]
    5e64:	4915      	ldr	r1, [pc, #84]	; (5ebc <crc16_mbus+0xc4>)
    5e66:	404a      	eors	r2, r1
    5e68:	801a      	strh	r2, [r3, #0]
    5e6a:	e006      	b.n	5e7a <crc16_mbus+0x82>
			 }
			 else
			 {
				 crc >>= 1;
    5e6c:	230a      	movs	r3, #10
    5e6e:	18fb      	adds	r3, r7, r3
    5e70:	220a      	movs	r2, #10
    5e72:	18ba      	adds	r2, r7, r2
    5e74:	8812      	ldrh	r2, [r2, #0]
    5e76:	0852      	lsrs	r2, r2, #1
    5e78:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e7a:	230d      	movs	r3, #13
    5e7c:	18fb      	adds	r3, r7, r3
    5e7e:	781a      	ldrb	r2, [r3, #0]
    5e80:	230d      	movs	r3, #13
    5e82:	18fb      	adds	r3, r7, r3
    5e84:	3a01      	subs	r2, #1
    5e86:	701a      	strb	r2, [r3, #0]
    5e88:	230d      	movs	r3, #13
    5e8a:	18fb      	adds	r3, r7, r3
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d1d6      	bne.n	5e40 <crc16_mbus+0x48>
	 for ( n = 0; n < size; n++ )
    5e92:	230e      	movs	r3, #14
    5e94:	18fb      	adds	r3, r7, r3
    5e96:	881a      	ldrh	r2, [r3, #0]
    5e98:	230e      	movs	r3, #14
    5e9a:	18fb      	adds	r3, r7, r3
    5e9c:	3201      	adds	r2, #1
    5e9e:	801a      	strh	r2, [r3, #0]
    5ea0:	230e      	movs	r3, #14
    5ea2:	18fa      	adds	r2, r7, r3
    5ea4:	1cbb      	adds	r3, r7, #2
    5ea6:	8812      	ldrh	r2, [r2, #0]
    5ea8:	881b      	ldrh	r3, [r3, #0]
    5eaa:	429a      	cmp	r2, r3
    5eac:	d3b5      	bcc.n	5e1a <crc16_mbus+0x22>
			 }
		 }
	 }
	 return crc;
    5eae:	230a      	movs	r3, #10
    5eb0:	18fb      	adds	r3, r7, r3
    5eb2:	881b      	ldrh	r3, [r3, #0]
}
    5eb4:	0018      	movs	r0, r3
    5eb6:	46bd      	mov	sp, r7
    5eb8:	b004      	add	sp, #16
    5eba:	bd80      	pop	{r7, pc}
    5ebc:	ffffa001 	.word	0xffffa001

00005ec0 <crc32>:

uint_least32_t crc32(unsigned char *buf, size_t len)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	4f4c      	ldr	r7, [pc, #304]	; (5ff4 <crc32+0x134>)
    5ec4:	44bd      	add	sp, r7
    5ec6:	af00      	add	r7, sp, #0
    5ec8:	6078      	str	r0, [r7, #4]
    5eca:	6039      	str	r1, [r7, #0]
	uint_least32_t crc_table[256];
	uint_least32_t crc; int i, j;
	
	for (i = 0; i < 256; i++)
    5ecc:	2300      	movs	r3, #0
    5ece:	2282      	movs	r2, #130	; 0x82
    5ed0:	00d2      	lsls	r2, r2, #3
    5ed2:	18ba      	adds	r2, r7, r2
    5ed4:	6013      	str	r3, [r2, #0]
    5ed6:	e043      	b.n	5f60 <crc32+0xa0>
	{
		crc = i;
    5ed8:	2382      	movs	r3, #130	; 0x82
    5eda:	00db      	lsls	r3, r3, #3
    5edc:	18fb      	adds	r3, r7, r3
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	4a45      	ldr	r2, [pc, #276]	; (5ff8 <crc32+0x138>)
    5ee2:	18ba      	adds	r2, r7, r2
    5ee4:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5ee6:	2300      	movs	r3, #0
    5ee8:	4a44      	ldr	r2, [pc, #272]	; (5ffc <crc32+0x13c>)
    5eea:	18ba      	adds	r2, r7, r2
    5eec:	6013      	str	r3, [r2, #0]
    5eee:	e01a      	b.n	5f26 <crc32+0x66>
		crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
    5ef0:	4b41      	ldr	r3, [pc, #260]	; (5ff8 <crc32+0x138>)
    5ef2:	18fb      	adds	r3, r7, r3
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	2201      	movs	r2, #1
    5ef8:	4013      	ands	r3, r2
    5efa:	d006      	beq.n	5f0a <crc32+0x4a>
    5efc:	4b3e      	ldr	r3, [pc, #248]	; (5ff8 <crc32+0x138>)
    5efe:	18fb      	adds	r3, r7, r3
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	085b      	lsrs	r3, r3, #1
    5f04:	4a3e      	ldr	r2, [pc, #248]	; (6000 <crc32+0x140>)
    5f06:	4053      	eors	r3, r2
    5f08:	e003      	b.n	5f12 <crc32+0x52>
    5f0a:	4b3b      	ldr	r3, [pc, #236]	; (5ff8 <crc32+0x138>)
    5f0c:	18fb      	adds	r3, r7, r3
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	085b      	lsrs	r3, r3, #1
    5f12:	4a39      	ldr	r2, [pc, #228]	; (5ff8 <crc32+0x138>)
    5f14:	18ba      	adds	r2, r7, r2
    5f16:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5f18:	4b38      	ldr	r3, [pc, #224]	; (5ffc <crc32+0x13c>)
    5f1a:	18fb      	adds	r3, r7, r3
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	3301      	adds	r3, #1
    5f20:	4a36      	ldr	r2, [pc, #216]	; (5ffc <crc32+0x13c>)
    5f22:	18ba      	adds	r2, r7, r2
    5f24:	6013      	str	r3, [r2, #0]
    5f26:	4b35      	ldr	r3, [pc, #212]	; (5ffc <crc32+0x13c>)
    5f28:	18fb      	adds	r3, r7, r3
    5f2a:	681b      	ldr	r3, [r3, #0]
    5f2c:	2b07      	cmp	r3, #7
    5f2e:	dddf      	ble.n	5ef0 <crc32+0x30>

		crc_table[i] = crc;
    5f30:	4b34      	ldr	r3, [pc, #208]	; (6004 <crc32+0x144>)
    5f32:	2283      	movs	r2, #131	; 0x83
    5f34:	00d2      	lsls	r2, r2, #3
    5f36:	4694      	mov	ip, r2
    5f38:	44bc      	add	ip, r7
    5f3a:	4463      	add	r3, ip
    5f3c:	2282      	movs	r2, #130	; 0x82
    5f3e:	00d2      	lsls	r2, r2, #3
    5f40:	18ba      	adds	r2, r7, r2
    5f42:	6812      	ldr	r2, [r2, #0]
    5f44:	0092      	lsls	r2, r2, #2
    5f46:	492c      	ldr	r1, [pc, #176]	; (5ff8 <crc32+0x138>)
    5f48:	1879      	adds	r1, r7, r1
    5f4a:	6809      	ldr	r1, [r1, #0]
    5f4c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 256; i++)
    5f4e:	2382      	movs	r3, #130	; 0x82
    5f50:	00db      	lsls	r3, r3, #3
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	681b      	ldr	r3, [r3, #0]
    5f56:	3301      	adds	r3, #1
    5f58:	2282      	movs	r2, #130	; 0x82
    5f5a:	00d2      	lsls	r2, r2, #3
    5f5c:	18ba      	adds	r2, r7, r2
    5f5e:	6013      	str	r3, [r2, #0]
    5f60:	2382      	movs	r3, #130	; 0x82
    5f62:	00db      	lsls	r3, r3, #3
    5f64:	18fb      	adds	r3, r7, r3
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	2bff      	cmp	r3, #255	; 0xff
    5f6a:	ddb5      	ble.n	5ed8 <crc32+0x18>
	};

	crc = 0xFFFFFFFFUL;
    5f6c:	2301      	movs	r3, #1
    5f6e:	425b      	negs	r3, r3
    5f70:	4a21      	ldr	r2, [pc, #132]	; (5ff8 <crc32+0x138>)
    5f72:	18ba      	adds	r2, r7, r2
    5f74:	6013      	str	r3, [r2, #0]
	

	
	while (len--)
    5f76:	e02d      	b.n	5fd4 <crc32+0x114>
	{
		if(!(len % 32768)) 
    5f78:	683b      	ldr	r3, [r7, #0]
    5f7a:	045b      	lsls	r3, r3, #17
    5f7c:	0c5b      	lsrs	r3, r3, #17
    5f7e:	d10e      	bne.n	5f9e <crc32+0xde>
		{wdt_reset();}
    5f80:	4b21      	ldr	r3, [pc, #132]	; (6008 <crc32+0x148>)
    5f82:	799b      	ldrb	r3, [r3, #6]
    5f84:	07db      	lsls	r3, r3, #31
    5f86:	0fdb      	lsrs	r3, r3, #31
    5f88:	b2db      	uxtb	r3, r3
    5f8a:	2b01      	cmp	r3, #1
    5f8c:	d107      	bne.n	5f9e <crc32+0xde>
    5f8e:	4a1e      	ldr	r2, [pc, #120]	; (6008 <crc32+0x148>)
    5f90:	7993      	ldrb	r3, [r2, #6]
    5f92:	2101      	movs	r1, #1
    5f94:	430b      	orrs	r3, r1
    5f96:	7193      	strb	r3, [r2, #6]
    5f98:	4b1b      	ldr	r3, [pc, #108]	; (6008 <crc32+0x148>)
    5f9a:	22a5      	movs	r2, #165	; 0xa5
    5f9c:	721a      	strb	r2, [r3, #8]
		crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	1c5a      	adds	r2, r3, #1
    5fa2:	607a      	str	r2, [r7, #4]
    5fa4:	781b      	ldrb	r3, [r3, #0]
    5fa6:	001a      	movs	r2, r3
    5fa8:	4b13      	ldr	r3, [pc, #76]	; (5ff8 <crc32+0x138>)
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	4053      	eors	r3, r2
    5fb0:	22ff      	movs	r2, #255	; 0xff
    5fb2:	401a      	ands	r2, r3
    5fb4:	4b13      	ldr	r3, [pc, #76]	; (6004 <crc32+0x144>)
    5fb6:	2183      	movs	r1, #131	; 0x83
    5fb8:	00c9      	lsls	r1, r1, #3
    5fba:	468c      	mov	ip, r1
    5fbc:	44bc      	add	ip, r7
    5fbe:	4463      	add	r3, ip
    5fc0:	0092      	lsls	r2, r2, #2
    5fc2:	58d2      	ldr	r2, [r2, r3]
    5fc4:	4b0c      	ldr	r3, [pc, #48]	; (5ff8 <crc32+0x138>)
    5fc6:	18fb      	adds	r3, r7, r3
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	0a1b      	lsrs	r3, r3, #8
    5fcc:	4053      	eors	r3, r2
    5fce:	4a0a      	ldr	r2, [pc, #40]	; (5ff8 <crc32+0x138>)
    5fd0:	18ba      	adds	r2, r7, r2
    5fd2:	6013      	str	r3, [r2, #0]
	while (len--)
    5fd4:	683b      	ldr	r3, [r7, #0]
    5fd6:	1e5a      	subs	r2, r3, #1
    5fd8:	603a      	str	r2, [r7, #0]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d1cc      	bne.n	5f78 <crc32+0xb8>
	}
	

	return crc ^ 0xFFFFFFFFUL;
    5fde:	4b06      	ldr	r3, [pc, #24]	; (5ff8 <crc32+0x138>)
    5fe0:	18fb      	adds	r3, r7, r3
    5fe2:	681b      	ldr	r3, [r3, #0]
    5fe4:	43db      	mvns	r3, r3
    5fe6:	0018      	movs	r0, r3
    5fe8:	46bd      	mov	sp, r7
    5fea:	2383      	movs	r3, #131	; 0x83
    5fec:	00db      	lsls	r3, r3, #3
    5fee:	449d      	add	sp, r3
    5ff0:	bd80      	pop	{r7, pc}
    5ff2:	46c0      	nop			; (mov r8, r8)
    5ff4:	fffffbe8 	.word	0xfffffbe8
    5ff8:	00000414 	.word	0x00000414
    5ffc:	0000040c 	.word	0x0000040c
    6000:	edb88320 	.word	0xedb88320
    6004:	fffffbf4 	.word	0xfffffbf4
    6008:	40001000 	.word	0x40001000

0000600c <crypted>:
//#define admin 		"admin"
#define CRYPTED 	1
#define DECRYPTED 	0

void crypted(char* str)
{
    600c:	b580      	push	{r7, lr}
    600e:	b082      	sub	sp, #8
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
	move(str, CRYPTED);
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	2101      	movs	r1, #1
    6018:	0018      	movs	r0, r3
    601a:	f000 f8f7 	bl	620c <move>
	wave(str, CRYPTED);
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	2101      	movs	r1, #1
    6022:	0018      	movs	r0, r3
    6024:	f000 f820 	bl	6068 <wave>
	shell_game(str,CRYPTED);
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	2101      	movs	r1, #1
    602c:	0018      	movs	r0, r3
    602e:	f000 f876 	bl	611e <shell_game>
}
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	46bd      	mov	sp, r7
    6036:	b002      	add	sp, #8
    6038:	bd80      	pop	{r7, pc}

0000603a <decrypted>:

void decrypted(char* str)
{
    603a:	b580      	push	{r7, lr}
    603c:	b082      	sub	sp, #8
    603e:	af00      	add	r7, sp, #0
    6040:	6078      	str	r0, [r7, #4]
	shell_game(str,DECRYPTED);
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	2100      	movs	r1, #0
    6046:	0018      	movs	r0, r3
    6048:	f000 f869 	bl	611e <shell_game>
	wave(str, DECRYPTED);
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	2100      	movs	r1, #0
    6050:	0018      	movs	r0, r3
    6052:	f000 f809 	bl	6068 <wave>
	move(str, DECRYPTED);
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	2100      	movs	r1, #0
    605a:	0018      	movs	r0, r3
    605c:	f000 f8d6 	bl	620c <move>
}
    6060:	46c0      	nop			; (mov r8, r8)
    6062:	46bd      	mov	sp, r7
    6064:	b002      	add	sp, #8
    6066:	bd80      	pop	{r7, pc}

00006068 <wave>:

void wave(char* ptr, char mode)
{
    6068:	b580      	push	{r7, lr}
    606a:	b084      	sub	sp, #16
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
    6070:	000a      	movs	r2, r1
    6072:	1cfb      	adds	r3, r7, #3
    6074:	701a      	strb	r2, [r3, #0]
	char plus;
	char sign = -1;
    6076:	230f      	movs	r3, #15
    6078:	18fb      	adds	r3, r7, r3
    607a:	22ff      	movs	r2, #255	; 0xff
    607c:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED) {sign = 1;}
    607e:	1cfb      	adds	r3, r7, #3
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	2b01      	cmp	r3, #1
    6084:	d103      	bne.n	608e <wave+0x26>
    6086:	230f      	movs	r3, #15
    6088:	18fb      	adds	r3, r7, r3
    608a:	2201      	movs	r2, #1
    608c:	701a      	strb	r2, [r3, #0]
	for (char i = 0; i < 64; i++)
    608e:	230e      	movs	r3, #14
    6090:	18fb      	adds	r3, r7, r3
    6092:	2200      	movs	r2, #0
    6094:	701a      	strb	r2, [r3, #0]
    6096:	e039      	b.n	610c <wave+0xa4>
	{
		char step = i % 2;
    6098:	230d      	movs	r3, #13
    609a:	18fb      	adds	r3, r7, r3
    609c:	220e      	movs	r2, #14
    609e:	18ba      	adds	r2, r7, r2
    60a0:	7812      	ldrb	r2, [r2, #0]
    60a2:	2101      	movs	r1, #1
    60a4:	400a      	ands	r2, r1
    60a6:	701a      	strb	r2, [r3, #0]
		plus = ((63 - i) / 2) * sign;
    60a8:	230e      	movs	r3, #14
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	223f      	movs	r2, #63	; 0x3f
    60b0:	1ad3      	subs	r3, r2, r3
    60b2:	d500      	bpl.n	60b6 <wave+0x4e>
    60b4:	3301      	adds	r3, #1
    60b6:	105b      	asrs	r3, r3, #1
    60b8:	b2da      	uxtb	r2, r3
    60ba:	230c      	movs	r3, #12
    60bc:	18fb      	adds	r3, r7, r3
    60be:	210f      	movs	r1, #15
    60c0:	1879      	adds	r1, r7, r1
    60c2:	7809      	ldrb	r1, [r1, #0]
    60c4:	434a      	muls	r2, r1
    60c6:	701a      	strb	r2, [r3, #0]
		if (step) { *ptr -= plus; } else {*ptr += plus;}
    60c8:	230d      	movs	r3, #13
    60ca:	18fb      	adds	r3, r7, r3
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	2b00      	cmp	r3, #0
    60d0:	d009      	beq.n	60e6 <wave+0x7e>
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	781a      	ldrb	r2, [r3, #0]
    60d6:	230c      	movs	r3, #12
    60d8:	18fb      	adds	r3, r7, r3
    60da:	781b      	ldrb	r3, [r3, #0]
    60dc:	1ad3      	subs	r3, r2, r3
    60de:	b2da      	uxtb	r2, r3
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	701a      	strb	r2, [r3, #0]
    60e4:	e008      	b.n	60f8 <wave+0x90>
    60e6:	687b      	ldr	r3, [r7, #4]
    60e8:	781a      	ldrb	r2, [r3, #0]
    60ea:	230c      	movs	r3, #12
    60ec:	18fb      	adds	r3, r7, r3
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	18d3      	adds	r3, r2, r3
    60f2:	b2da      	uxtb	r2, r3
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	701a      	strb	r2, [r3, #0]
		ptr++;
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	3301      	adds	r3, #1
    60fc:	607b      	str	r3, [r7, #4]
	for (char i = 0; i < 64; i++)
    60fe:	230e      	movs	r3, #14
    6100:	18fb      	adds	r3, r7, r3
    6102:	781a      	ldrb	r2, [r3, #0]
    6104:	230e      	movs	r3, #14
    6106:	18fb      	adds	r3, r7, r3
    6108:	3201      	adds	r2, #1
    610a:	701a      	strb	r2, [r3, #0]
    610c:	230e      	movs	r3, #14
    610e:	18fb      	adds	r3, r7, r3
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	2b3f      	cmp	r3, #63	; 0x3f
    6114:	d9c0      	bls.n	6098 <wave+0x30>
	}
}
    6116:	46c0      	nop			; (mov r8, r8)
    6118:	46bd      	mov	sp, r7
    611a:	b004      	add	sp, #16
    611c:	bd80      	pop	{r7, pc}

0000611e <shell_game>:

void shell_game(char* ptr, char mode)
{
    611e:	b580      	push	{r7, lr}
    6120:	b098      	sub	sp, #96	; 0x60
    6122:	af00      	add	r7, sp, #0
    6124:	6078      	str	r0, [r7, #4]
    6126:	000a      	movs	r2, r1
    6128:	1cfb      	adds	r3, r7, #3
    612a:	701a      	strb	r2, [r3, #0]
	char buf[64];
	char region[8];
	char lap = 0;
    612c:	235f      	movs	r3, #95	; 0x5f
    612e:	18fb      	adds	r3, r7, r3
    6130:	2200      	movs	r2, #0
    6132:	701a      	strb	r2, [r3, #0]
	char cursour = 0;
    6134:	235e      	movs	r3, #94	; 0x5e
    6136:	18fb      	adds	r3, r7, r3
    6138:	2200      	movs	r2, #0
    613a:	701a      	strb	r2, [r3, #0]
	char* debug = ptr;
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	653b      	str	r3, [r7, #80]	; 0x50
	memcpy(buf, ptr, 64);
    6140:	2310      	movs	r3, #16
    6142:	18fa      	adds	r2, r7, r3
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	0010      	movs	r0, r2
    6148:	0019      	movs	r1, r3
    614a:	2340      	movs	r3, #64	; 0x40
    614c:	001a      	movs	r2, r3
    614e:	4b2e      	ldr	r3, [pc, #184]	; (6208 <shell_game+0xea>)
    6150:	4798      	blx	r3
	if (mode == CRYPTED) {mode = 3;} else {mode = 1;}
    6152:	1cfb      	adds	r3, r7, #3
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	2b01      	cmp	r3, #1
    6158:	d103      	bne.n	6162 <shell_game+0x44>
    615a:	1cfb      	adds	r3, r7, #3
    615c:	2203      	movs	r2, #3
    615e:	701a      	strb	r2, [r3, #0]
    6160:	e002      	b.n	6168 <shell_game+0x4a>
    6162:	1cfb      	adds	r3, r7, #3
    6164:	2201      	movs	r2, #1
    6166:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < mode; j++)
    6168:	2300      	movs	r3, #0
    616a:	65bb      	str	r3, [r7, #88]	; 0x58
    616c:	e042      	b.n	61f4 <shell_game+0xd6>
	{
		for (int i = 0; i < 63 ; i++)
    616e:	2300      	movs	r3, #0
    6170:	657b      	str	r3, [r7, #84]	; 0x54
    6172:	e026      	b.n	61c2 <shell_game+0xa4>
		{
			if (cursour > 63)	{lap++; cursour = lap;}
    6174:	235e      	movs	r3, #94	; 0x5e
    6176:	18fb      	adds	r3, r7, r3
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	2b3f      	cmp	r3, #63	; 0x3f
    617c:	d90c      	bls.n	6198 <shell_game+0x7a>
    617e:	235f      	movs	r3, #95	; 0x5f
    6180:	18fb      	adds	r3, r7, r3
    6182:	781a      	ldrb	r2, [r3, #0]
    6184:	235f      	movs	r3, #95	; 0x5f
    6186:	18fb      	adds	r3, r7, r3
    6188:	3201      	adds	r2, #1
    618a:	701a      	strb	r2, [r3, #0]
    618c:	235e      	movs	r3, #94	; 0x5e
    618e:	18fb      	adds	r3, r7, r3
    6190:	225f      	movs	r2, #95	; 0x5f
    6192:	18ba      	adds	r2, r7, r2
    6194:	7812      	ldrb	r2, [r2, #0]
    6196:	701a      	strb	r2, [r3, #0]
			*ptr = buf[cursour];
    6198:	235e      	movs	r3, #94	; 0x5e
    619a:	18fb      	adds	r3, r7, r3
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	2210      	movs	r2, #16
    61a0:	18ba      	adds	r2, r7, r2
    61a2:	5cd2      	ldrb	r2, [r2, r3]
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	701a      	strb	r2, [r3, #0]
			ptr++;
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	3301      	adds	r3, #1
    61ac:	607b      	str	r3, [r7, #4]
			cursour += 8;
    61ae:	235e      	movs	r3, #94	; 0x5e
    61b0:	18fb      	adds	r3, r7, r3
    61b2:	225e      	movs	r2, #94	; 0x5e
    61b4:	18ba      	adds	r2, r7, r2
    61b6:	7812      	ldrb	r2, [r2, #0]
    61b8:	3208      	adds	r2, #8
    61ba:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 63 ; i++)
    61bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61be:	3301      	adds	r3, #1
    61c0:	657b      	str	r3, [r7, #84]	; 0x54
    61c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61c4:	2b3e      	cmp	r3, #62	; 0x3e
    61c6:	ddd5      	ble.n	6174 <shell_game+0x56>
		}
		lap = 0;
    61c8:	235f      	movs	r3, #95	; 0x5f
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	2200      	movs	r2, #0
    61ce:	701a      	strb	r2, [r3, #0]
		cursour = 0;
    61d0:	235e      	movs	r3, #94	; 0x5e
    61d2:	18fb      	adds	r3, r7, r3
    61d4:	2200      	movs	r2, #0
    61d6:	701a      	strb	r2, [r3, #0]
		ptr = debug;
    61d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61da:	607b      	str	r3, [r7, #4]
		memcpy(buf, ptr, 64);
    61dc:	2310      	movs	r3, #16
    61de:	18fa      	adds	r2, r7, r3
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	0010      	movs	r0, r2
    61e4:	0019      	movs	r1, r3
    61e6:	2340      	movs	r3, #64	; 0x40
    61e8:	001a      	movs	r2, r3
    61ea:	4b07      	ldr	r3, [pc, #28]	; (6208 <shell_game+0xea>)
    61ec:	4798      	blx	r3
	for (int j = 0; j < mode; j++)
    61ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61f0:	3301      	adds	r3, #1
    61f2:	65bb      	str	r3, [r7, #88]	; 0x58
    61f4:	1cfb      	adds	r3, r7, #3
    61f6:	781a      	ldrb	r2, [r3, #0]
    61f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61fa:	429a      	cmp	r2, r3
    61fc:	dcb7      	bgt.n	616e <shell_game+0x50>
	}
}
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	46bd      	mov	sp, r7
    6202:	b018      	add	sp, #96	; 0x60
    6204:	bd80      	pop	{r7, pc}
    6206:	46c0      	nop			; (mov r8, r8)
    6208:	0000c825 	.word	0x0000c825

0000620c <move>:

void move(char* ptr, char mode)
{
    620c:	b580      	push	{r7, lr}
    620e:	b084      	sub	sp, #16
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
    6214:	000a      	movs	r2, r1
    6216:	1cfb      	adds	r3, r7, #3
    6218:	701a      	strb	r2, [r3, #0]
	char sign = - 1;
    621a:	230f      	movs	r3, #15
    621c:	18fb      	adds	r3, r7, r3
    621e:	22ff      	movs	r2, #255	; 0xff
    6220:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED){sign = 1;}
    6222:	1cfb      	adds	r3, r7, #3
    6224:	781b      	ldrb	r3, [r3, #0]
    6226:	2b01      	cmp	r3, #1
    6228:	d103      	bne.n	6232 <move+0x26>
    622a:	230f      	movs	r3, #15
    622c:	18fb      	adds	r3, r7, r3
    622e:	2201      	movs	r2, #1
    6230:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    6232:	2300      	movs	r3, #0
    6234:	60bb      	str	r3, [r7, #8]
    6236:	e00e      	b.n	6256 <move+0x4a>
	{
		*ptr += 68 * sign;
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	781a      	ldrb	r2, [r3, #0]
    623c:	230f      	movs	r3, #15
    623e:	18fb      	adds	r3, r7, r3
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	2144      	movs	r1, #68	; 0x44
    6244:	434b      	muls	r3, r1
    6246:	b2db      	uxtb	r3, r3
    6248:	18d3      	adds	r3, r2, r3
    624a:	b2da      	uxtb	r2, r3
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    6250:	68bb      	ldr	r3, [r7, #8]
    6252:	3301      	adds	r3, #1
    6254:	60bb      	str	r3, [r7, #8]
    6256:	68bb      	ldr	r3, [r7, #8]
    6258:	2b3e      	cmp	r3, #62	; 0x3e
    625a:	dded      	ble.n	6238 <move+0x2c>
	}	
    625c:	46c0      	nop			; (mov r8, r8)
    625e:	46bd      	mov	sp, r7
    6260:	b004      	add	sp, #16
    6262:	bd80      	pop	{r7, pc}

00006264 <eth_init>:
#include "def.h"

ETH_HDR eth_sock[MAX_SOCKETS_CNT];

void eth_init(void)
{
    6264:	b5b0      	push	{r4, r5, r7, lr}
    6266:	b082      	sub	sp, #8
    6268:	af00      	add	r7, sp, #0
	w5500_init_reg();
    626a:	4b3f      	ldr	r3, [pc, #252]	; (6368 <eth_init+0x104>)
    626c:	4798      	blx	r3
	
	//common socket for settings
	if(socket_init(SOCKET_0,cfg_1.com_network.src_port,UDP)) {err_dword.common_sock = 1;}
    626e:	4b3f      	ldr	r3, [pc, #252]	; (636c <eth_init+0x108>)
    6270:	2226      	movs	r2, #38	; 0x26
    6272:	5c9a      	ldrb	r2, [r3, r2]
    6274:	2127      	movs	r1, #39	; 0x27
    6276:	5c5b      	ldrb	r3, [r3, r1]
    6278:	021b      	lsls	r3, r3, #8
    627a:	4313      	orrs	r3, r2
    627c:	b29b      	uxth	r3, r3
    627e:	2201      	movs	r2, #1
    6280:	0019      	movs	r1, r3
    6282:	2000      	movs	r0, #0
    6284:	4b3a      	ldr	r3, [pc, #232]	; (6370 <eth_init+0x10c>)
    6286:	4798      	blx	r3
    6288:	1e03      	subs	r3, r0, #0
    628a:	d004      	beq.n	6296 <eth_init+0x32>
    628c:	4b39      	ldr	r3, [pc, #228]	; (6374 <eth_init+0x110>)
    628e:	781a      	ldrb	r2, [r3, #0]
    6290:	2104      	movs	r1, #4
    6292:	430a      	orrs	r2, r1
    6294:	701a      	strb	r2, [r3, #0]

	//port socket
	for(BYTE i=0; i<4; i++)
    6296:	1dfb      	adds	r3, r7, #7
    6298:	2200      	movs	r2, #0
    629a:	701a      	strb	r2, [r3, #0]
    629c:	e05b      	b.n	6356 <eth_init+0xf2>
	{
		if(cfg_1.sock_rs485[i].en==FALSE) {i++; continue;} 
    629e:	1dfb      	adds	r3, r7, #7
    62a0:	781a      	ldrb	r2, [r3, #0]
    62a2:	4932      	ldr	r1, [pc, #200]	; (636c <eth_init+0x108>)
    62a4:	2034      	movs	r0, #52	; 0x34
    62a6:	0013      	movs	r3, r2
    62a8:	005b      	lsls	r3, r3, #1
    62aa:	189b      	adds	r3, r3, r2
    62ac:	009b      	lsls	r3, r3, #2
    62ae:	189b      	adds	r3, r3, r2
    62b0:	18cb      	adds	r3, r1, r3
    62b2:	181b      	adds	r3, r3, r0
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d105      	bne.n	62c6 <eth_init+0x62>
    62ba:	1dfb      	adds	r3, r7, #7
    62bc:	781a      	ldrb	r2, [r3, #0]
    62be:	1dfb      	adds	r3, r7, #7
    62c0:	3201      	adds	r2, #1
    62c2:	701a      	strb	r2, [r3, #0]
    62c4:	e042      	b.n	634c <eth_init+0xe8>
		if(socket_init(i+1,cfg_1.sock_rs485[i].src_port,cfg_1.sock_rs485[i].mode)) {err_dword.socket += (1 << i);}
    62c6:	1dfb      	adds	r3, r7, #7
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	3301      	adds	r3, #1
    62cc:	b2dc      	uxtb	r4, r3
    62ce:	1dfb      	adds	r3, r7, #7
    62d0:	781a      	ldrb	r2, [r3, #0]
    62d2:	4926      	ldr	r1, [pc, #152]	; (636c <eth_init+0x108>)
    62d4:	0013      	movs	r3, r2
    62d6:	005b      	lsls	r3, r3, #1
    62d8:	189b      	adds	r3, r3, r2
    62da:	009b      	lsls	r3, r3, #2
    62dc:	189b      	adds	r3, r3, r2
    62de:	18cb      	adds	r3, r1, r3
    62e0:	3330      	adds	r3, #48	; 0x30
    62e2:	79da      	ldrb	r2, [r3, #7]
    62e4:	7a1b      	ldrb	r3, [r3, #8]
    62e6:	021b      	lsls	r3, r3, #8
    62e8:	4313      	orrs	r3, r2
    62ea:	b29d      	uxth	r5, r3
    62ec:	1dfb      	adds	r3, r7, #7
    62ee:	781a      	ldrb	r2, [r3, #0]
    62f0:	491e      	ldr	r1, [pc, #120]	; (636c <eth_init+0x108>)
    62f2:	2035      	movs	r0, #53	; 0x35
    62f4:	0013      	movs	r3, r2
    62f6:	005b      	lsls	r3, r3, #1
    62f8:	189b      	adds	r3, r3, r2
    62fa:	009b      	lsls	r3, r3, #2
    62fc:	189b      	adds	r3, r3, r2
    62fe:	18cb      	adds	r3, r1, r3
    6300:	181b      	adds	r3, r3, r0
    6302:	781b      	ldrb	r3, [r3, #0]
    6304:	001a      	movs	r2, r3
    6306:	0029      	movs	r1, r5
    6308:	0020      	movs	r0, r4
    630a:	4b19      	ldr	r3, [pc, #100]	; (6370 <eth_init+0x10c>)
    630c:	4798      	blx	r3
    630e:	1e03      	subs	r3, r0, #0
    6310:	d01c      	beq.n	634c <eth_init+0xe8>
    6312:	4b18      	ldr	r3, [pc, #96]	; (6374 <eth_init+0x110>)
    6314:	781b      	ldrb	r3, [r3, #0]
    6316:	065b      	lsls	r3, r3, #25
    6318:	0f1b      	lsrs	r3, r3, #28
    631a:	b2db      	uxtb	r3, r3
    631c:	0019      	movs	r1, r3
    631e:	1dfb      	adds	r3, r7, #7
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	2201      	movs	r2, #1
    6324:	409a      	lsls	r2, r3
    6326:	0013      	movs	r3, r2
    6328:	b2db      	uxtb	r3, r3
    632a:	18cb      	adds	r3, r1, r3
    632c:	b2db      	uxtb	r3, r3
    632e:	1c1a      	adds	r2, r3, #0
    6330:	230f      	movs	r3, #15
    6332:	4013      	ands	r3, r2
    6334:	b2da      	uxtb	r2, r3
    6336:	4b0f      	ldr	r3, [pc, #60]	; (6374 <eth_init+0x110>)
    6338:	210f      	movs	r1, #15
    633a:	400a      	ands	r2, r1
    633c:	00d0      	lsls	r0, r2, #3
    633e:	781a      	ldrb	r2, [r3, #0]
    6340:	2178      	movs	r1, #120	; 0x78
    6342:	438a      	bics	r2, r1
    6344:	1c11      	adds	r1, r2, #0
    6346:	1c02      	adds	r2, r0, #0
    6348:	430a      	orrs	r2, r1
    634a:	701a      	strb	r2, [r3, #0]
	for(BYTE i=0; i<4; i++)
    634c:	1dfb      	adds	r3, r7, #7
    634e:	781a      	ldrb	r2, [r3, #0]
    6350:	1dfb      	adds	r3, r7, #7
    6352:	3201      	adds	r2, #1
    6354:	701a      	strb	r2, [r3, #0]
    6356:	1dfb      	adds	r3, r7, #7
    6358:	781b      	ldrb	r3, [r3, #0]
    635a:	2b03      	cmp	r3, #3
    635c:	d99f      	bls.n	629e <eth_init+0x3a>
	}
}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	46bd      	mov	sp, r7
    6362:	b002      	add	sp, #8
    6364:	bdb0      	pop	{r4, r5, r7, pc}
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	000096a1 	.word	0x000096a1
    636c:	20003dc4 	.word	0x20003dc4
    6370:	000073bd 	.word	0x000073bd
    6374:	20002550 	.word	0x20002550

00006378 <eth_process>:

void eth_process(void)
{
    6378:	b590      	push	{r4, r7, lr}
    637a:	b083      	sub	sp, #12
    637c:	af00      	add	r7, sp, #0
	static BYTE eth_st=0;
	WORD rtrn = 0;
    637e:	1dbb      	adds	r3, r7, #6
    6380:	2200      	movs	r2, #0
    6382:	801a      	strh	r2, [r3, #0]
	
	switch(eth_st)
    6384:	4b40      	ldr	r3, [pc, #256]	; (6488 <eth_process+0x110>)
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	2b01      	cmp	r3, #1
    638a:	d038      	beq.n	63fe <eth_process+0x86>
    638c:	2b02      	cmp	r3, #2
    638e:	d059      	beq.n	6444 <eth_process+0xcc>
    6390:	2b00      	cmp	r3, #0
    6392:	d000      	beq.n	6396 <eth_process+0x1e>
    6394:	e069      	b.n	646a <eth_process+0xf2>
	{
		case CHECK:				
			rtrn = check_data_wr_process();	
    6396:	f000 f92d 	bl	65f4 <check_data_wr_process>
    639a:	0003      	movs	r3, r0
    639c:	001a      	movs	r2, r3
    639e:	1dbb      	adds	r3, r7, #6
    63a0:	801a      	strh	r2, [r3, #0]
			if(rtrn != NO_SOKET)								
    63a2:	1dbb      	adds	r3, r7, #6
    63a4:	881b      	ldrh	r3, [r3, #0]
    63a6:	2b6d      	cmp	r3, #109	; 0x6d
    63a8:	d021      	beq.n	63ee <eth_process+0x76>
			{
				eth_st					= WRITE_PROCESS;
    63aa:	4b37      	ldr	r3, [pc, #220]	; (6488 <eth_process+0x110>)
    63ac:	2202      	movs	r2, #2
    63ae:	701a      	strb	r2, [r3, #0]
				w5500_mode.mode_op		= MODE_OP_WRITE_UDP;
    63b0:	4b36      	ldr	r3, [pc, #216]	; (648c <eth_process+0x114>)
    63b2:	2203      	movs	r2, #3
    63b4:	701a      	strb	r2, [r3, #0]
				w5500_mode.numb_socket	= rtrn;
    63b6:	1dbb      	adds	r3, r7, #6
    63b8:	881b      	ldrh	r3, [r3, #0]
    63ba:	b2da      	uxtb	r2, r3
    63bc:	4b33      	ldr	r3, [pc, #204]	; (648c <eth_process+0x114>)
    63be:	705a      	strb	r2, [r3, #1]
				switch(rtrn)
    63c0:	1dbb      	adds	r3, r7, #6
    63c2:	881b      	ldrh	r3, [r3, #0]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d055      	beq.n	6474 <eth_process+0xfc>
				{
					case COMMON_SOCK_VAL:																						return;
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    63c8:	1dbb      	adds	r3, r7, #6
    63ca:	881b      	ldrh	r3, [r3, #0]
    63cc:	1e5a      	subs	r2, r3, #1
    63ce:	4930      	ldr	r1, [pc, #192]	; (6490 <eth_process+0x118>)
    63d0:	2035      	movs	r0, #53	; 0x35
    63d2:	0013      	movs	r3, r2
    63d4:	005b      	lsls	r3, r3, #1
    63d6:	189b      	adds	r3, r3, r2
    63d8:	009b      	lsls	r3, r3, #2
    63da:	189b      	adds	r3, r3, r2
    63dc:	18cb      	adds	r3, r1, r3
    63de:	181b      	adds	r3, r3, r0
    63e0:	781b      	ldrb	r3, [r3, #0]
    63e2:	2b02      	cmp	r3, #2
    63e4:	d148      	bne.n	6478 <eth_process+0x100>
    63e6:	4b29      	ldr	r3, [pc, #164]	; (648c <eth_process+0x114>)
    63e8:	2205      	movs	r2, #5
    63ea:	701a      	strb	r2, [r3, #0]
    63ec:	e044      	b.n	6478 <eth_process+0x100>
				} 
			}

			check_sockets_process((BYTE*)&w5500_mode);//select sockets for read			
    63ee:	4b27      	ldr	r3, [pc, #156]	; (648c <eth_process+0x114>)
    63f0:	0018      	movs	r0, r3
    63f2:	f000 f851 	bl	6498 <check_sockets_process>
			eth_st = READ_PROCESS;
    63f6:	4b24      	ldr	r3, [pc, #144]	; (6488 <eth_process+0x110>)
    63f8:	2201      	movs	r2, #1
    63fa:	701a      	strb	r2, [r3, #0]
		break;
    63fc:	e041      	b.n	6482 <eth_process+0x10a>
		case READ_PROCESS:
			rtrn = w5500_process (w5500_mode.mode_op,w5500_mode.numb_socket);
    63fe:	4b23      	ldr	r3, [pc, #140]	; (648c <eth_process+0x114>)
    6400:	781a      	ldrb	r2, [r3, #0]
    6402:	4b22      	ldr	r3, [pc, #136]	; (648c <eth_process+0x114>)
    6404:	785b      	ldrb	r3, [r3, #1]
    6406:	1dbc      	adds	r4, r7, #6
    6408:	0019      	movs	r1, r3
    640a:	0010      	movs	r0, r2
    640c:	4b21      	ldr	r3, [pc, #132]	; (6494 <eth_process+0x11c>)
    640e:	4798      	blx	r3
    6410:	0003      	movs	r3, r0
    6412:	8023      	strh	r3, [r4, #0]
			if(rtrn == 2)	{eth_st=0;break;}
    6414:	1dbb      	adds	r3, r7, #6
    6416:	881b      	ldrh	r3, [r3, #0]
    6418:	2b02      	cmp	r3, #2
    641a:	d103      	bne.n	6424 <eth_process+0xac>
    641c:	4b1a      	ldr	r3, [pc, #104]	; (6488 <eth_process+0x110>)
    641e:	2200      	movs	r2, #0
    6420:	701a      	strb	r2, [r3, #0]
    6422:	e02e      	b.n	6482 <eth_process+0x10a>
			if(rtrn)		{eth_parse(w5500_mode.numb_socket,rtrn); eth_st=0;}
    6424:	1dbb      	adds	r3, r7, #6
    6426:	881b      	ldrh	r3, [r3, #0]
    6428:	2b00      	cmp	r3, #0
    642a:	d027      	beq.n	647c <eth_process+0x104>
    642c:	4b17      	ldr	r3, [pc, #92]	; (648c <eth_process+0x114>)
    642e:	785a      	ldrb	r2, [r3, #1]
    6430:	1dbb      	adds	r3, r7, #6
    6432:	881b      	ldrh	r3, [r3, #0]
    6434:	0019      	movs	r1, r3
    6436:	0010      	movs	r0, r2
    6438:	f000 f86e 	bl	6518 <eth_parse>
    643c:	4b12      	ldr	r3, [pc, #72]	; (6488 <eth_process+0x110>)
    643e:	2200      	movs	r2, #0
    6440:	701a      	strb	r2, [r3, #0]
		break;
    6442:	e01b      	b.n	647c <eth_process+0x104>
		case WRITE_PROCESS:
			rtrn = w5500_process(w5500_mode.mode_op,w5500_mode.numb_socket);
    6444:	4b11      	ldr	r3, [pc, #68]	; (648c <eth_process+0x114>)
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	4b10      	ldr	r3, [pc, #64]	; (648c <eth_process+0x114>)
    644a:	785b      	ldrb	r3, [r3, #1]
    644c:	1dbc      	adds	r4, r7, #6
    644e:	0019      	movs	r1, r3
    6450:	0010      	movs	r0, r2
    6452:	4b10      	ldr	r3, [pc, #64]	; (6494 <eth_process+0x11c>)
    6454:	4798      	blx	r3
    6456:	0003      	movs	r3, r0
    6458:	8023      	strh	r3, [r4, #0]
			if(rtrn)		{eth_st=0;}
    645a:	1dbb      	adds	r3, r7, #6
    645c:	881b      	ldrh	r3, [r3, #0]
    645e:	2b00      	cmp	r3, #0
    6460:	d00e      	beq.n	6480 <eth_process+0x108>
    6462:	4b09      	ldr	r3, [pc, #36]	; (6488 <eth_process+0x110>)
    6464:	2200      	movs	r2, #0
    6466:	701a      	strb	r2, [r3, #0]
		break;
    6468:	e00a      	b.n	6480 <eth_process+0x108>
		default:
			eth_st = CHECK;
    646a:	4b07      	ldr	r3, [pc, #28]	; (6488 <eth_process+0x110>)
    646c:	2200      	movs	r2, #0
    646e:	701a      	strb	r2, [r3, #0]
		break;
    6470:	46c0      	nop			; (mov r8, r8)
    6472:	e006      	b.n	6482 <eth_process+0x10a>
					case COMMON_SOCK_VAL:																						return;
    6474:	46c0      	nop			; (mov r8, r8)
    6476:	e004      	b.n	6482 <eth_process+0x10a>
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    6478:	46c0      	nop			; (mov r8, r8)
    647a:	e002      	b.n	6482 <eth_process+0x10a>
		break;
    647c:	46c0      	nop			; (mov r8, r8)
    647e:	e000      	b.n	6482 <eth_process+0x10a>
		break;
    6480:	46c0      	nop			; (mov r8, r8)

	}
}
    6482:	46bd      	mov	sp, r7
    6484:	b003      	add	sp, #12
    6486:	bd90      	pop	{r4, r7, pc}
    6488:	2000045a 	.word	0x2000045a
    648c:	20003b00 	.word	0x20003b00
    6490:	20003dc4 	.word	0x20003dc4
    6494:	00009819 	.word	0x00009819

00006498 <check_sockets_process>:

void check_sockets_process (BYTE *buf)
{
    6498:	b580      	push	{r7, lr}
    649a:	b082      	sub	sp, #8
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
	static BYTE index = MAX_SOCKETS_VAL;
	
	index++;
    64a0:	4b1a      	ldr	r3, [pc, #104]	; (650c <check_sockets_process+0x74>)
    64a2:	781b      	ldrb	r3, [r3, #0]
    64a4:	3301      	adds	r3, #1
    64a6:	b2da      	uxtb	r2, r3
    64a8:	4b18      	ldr	r3, [pc, #96]	; (650c <check_sockets_process+0x74>)
    64aa:	701a      	strb	r2, [r3, #0]
	if(index > MAX_SOCKETS_VAL){index=0;}
    64ac:	4b17      	ldr	r3, [pc, #92]	; (650c <check_sockets_process+0x74>)
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	2b04      	cmp	r3, #4
    64b2:	d902      	bls.n	64ba <check_sockets_process+0x22>
    64b4:	4b15      	ldr	r3, [pc, #84]	; (650c <check_sockets_process+0x74>)
    64b6:	2200      	movs	r2, #0
    64b8:	701a      	strb	r2, [r3, #0]
	
	switch (index)
    64ba:	4b14      	ldr	r3, [pc, #80]	; (650c <check_sockets_process+0x74>)
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	2b00      	cmp	r3, #0
    64c0:	d106      	bne.n	64d0 <check_sockets_process+0x38>
	{
		case COMMON_SOCK_VAL:
			w5500_mode.numb_socket	= SOCKET_0;
    64c2:	4b13      	ldr	r3, [pc, #76]	; (6510 <check_sockets_process+0x78>)
    64c4:	2200      	movs	r2, #0
    64c6:	705a      	strb	r2, [r3, #1]
			w5500_mode.mode_op		= MODE_OP_READ_UDP;
    64c8:	4b11      	ldr	r3, [pc, #68]	; (6510 <check_sockets_process+0x78>)
    64ca:	2202      	movs	r2, #2
    64cc:	701a      	strb	r2, [r3, #0]
		return;
    64ce:	e01a      	b.n	6506 <check_sockets_process+0x6e>
		default:
			w5500_mode.numb_socket = index;
    64d0:	4b0e      	ldr	r3, [pc, #56]	; (650c <check_sockets_process+0x74>)
    64d2:	781a      	ldrb	r2, [r3, #0]
    64d4:	4b0e      	ldr	r3, [pc, #56]	; (6510 <check_sockets_process+0x78>)
    64d6:	705a      	strb	r2, [r3, #1]
			if (cfg_1.sock_rs485[index-1].mode == TCP)	
    64d8:	4b0c      	ldr	r3, [pc, #48]	; (650c <check_sockets_process+0x74>)
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	1e5a      	subs	r2, r3, #1
    64de:	490d      	ldr	r1, [pc, #52]	; (6514 <check_sockets_process+0x7c>)
    64e0:	2035      	movs	r0, #53	; 0x35
    64e2:	0013      	movs	r3, r2
    64e4:	005b      	lsls	r3, r3, #1
    64e6:	189b      	adds	r3, r3, r2
    64e8:	009b      	lsls	r3, r3, #2
    64ea:	189b      	adds	r3, r3, r2
    64ec:	18cb      	adds	r3, r1, r3
    64ee:	181b      	adds	r3, r3, r0
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	2b02      	cmp	r3, #2
    64f4:	d103      	bne.n	64fe <check_sockets_process+0x66>
			{w5500_mode.mode_op = MODE_OP_READ_TCP;}
    64f6:	4b06      	ldr	r3, [pc, #24]	; (6510 <check_sockets_process+0x78>)
    64f8:	2204      	movs	r2, #4
    64fa:	701a      	strb	r2, [r3, #0]
			else										
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
		return;
    64fc:	e003      	b.n	6506 <check_sockets_process+0x6e>
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
    64fe:	4b04      	ldr	r3, [pc, #16]	; (6510 <check_sockets_process+0x78>)
    6500:	2202      	movs	r2, #2
    6502:	701a      	strb	r2, [r3, #0]
		return;
    6504:	46c0      	nop			; (mov r8, r8)
	}									{w5500_mode.mode_op=MODE_OP_READ_UDP;}
	return;
}
    6506:	46bd      	mov	sp, r7
    6508:	b002      	add	sp, #8
    650a:	bd80      	pop	{r7, pc}
    650c:	20000001 	.word	0x20000001
    6510:	20003b00 	.word	0x20003b00
    6514:	20003dc4 	.word	0x20003dc4

00006518 <eth_parse>:

void eth_parse (BYTE numb_sock,WORD size)
{	
    6518:	b590      	push	{r4, r7, lr}
    651a:	b083      	sub	sp, #12
    651c:	af00      	add	r7, sp, #0
    651e:	0002      	movs	r2, r0
    6520:	1dfb      	adds	r3, r7, #7
    6522:	701a      	strb	r2, [r3, #0]
    6524:	1d3b      	adds	r3, r7, #4
    6526:	1c0a      	adds	r2, r1, #0
    6528:	801a      	strh	r2, [r3, #0]
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    652a:	1dfb      	adds	r3, r7, #7
    652c:	781b      	ldrb	r3, [r3, #0]
    652e:	4a2e      	ldr	r2, [pc, #184]	; (65e8 <eth_parse+0xd0>)
    6530:	492e      	ldr	r1, [pc, #184]	; (65ec <eth_parse+0xd4>)
    6532:	482f      	ldr	r0, [pc, #188]	; (65f0 <eth_parse+0xd8>)
    6534:	4343      	muls	r3, r0
    6536:	18d3      	adds	r3, r2, r3
    6538:	185b      	adds	r3, r3, r1
    653a:	781b      	ldrb	r3, [r3, #0]
    653c:	2b01      	cmp	r3, #1
    653e:	d04e      	beq.n	65de <eth_parse+0xc6>
		
	eth_sock[numb_sock].counters.rx++;
    6540:	1dfb      	adds	r3, r7, #7
    6542:	7819      	ldrb	r1, [r3, #0]
    6544:	4828      	ldr	r0, [pc, #160]	; (65e8 <eth_parse+0xd0>)
    6546:	23ba      	movs	r3, #186	; 0xba
    6548:	00db      	lsls	r3, r3, #3
    654a:	4a29      	ldr	r2, [pc, #164]	; (65f0 <eth_parse+0xd8>)
    654c:	434a      	muls	r2, r1
    654e:	1882      	adds	r2, r0, r2
    6550:	18d3      	adds	r3, r2, r3
    6552:	7ada      	ldrb	r2, [r3, #11]
    6554:	7b18      	ldrb	r0, [r3, #12]
    6556:	0200      	lsls	r0, r0, #8
    6558:	4302      	orrs	r2, r0
    655a:	7b58      	ldrb	r0, [r3, #13]
    655c:	0400      	lsls	r0, r0, #16
    655e:	4302      	orrs	r2, r0
    6560:	7b9b      	ldrb	r3, [r3, #14]
    6562:	061b      	lsls	r3, r3, #24
    6564:	4313      	orrs	r3, r2
    6566:	1c5a      	adds	r2, r3, #1
    6568:	481f      	ldr	r0, [pc, #124]	; (65e8 <eth_parse+0xd0>)
    656a:	23ba      	movs	r3, #186	; 0xba
    656c:	00db      	lsls	r3, r3, #3
    656e:	4c20      	ldr	r4, [pc, #128]	; (65f0 <eth_parse+0xd8>)
    6570:	4361      	muls	r1, r4
    6572:	1841      	adds	r1, r0, r1
    6574:	18cb      	adds	r3, r1, r3
    6576:	330b      	adds	r3, #11
    6578:	21ff      	movs	r1, #255	; 0xff
    657a:	4011      	ands	r1, r2
    657c:	000c      	movs	r4, r1
    657e:	7819      	ldrb	r1, [r3, #0]
    6580:	2000      	movs	r0, #0
    6582:	4001      	ands	r1, r0
    6584:	1c08      	adds	r0, r1, #0
    6586:	1c21      	adds	r1, r4, #0
    6588:	4301      	orrs	r1, r0
    658a:	7019      	strb	r1, [r3, #0]
    658c:	0a11      	lsrs	r1, r2, #8
    658e:	20ff      	movs	r0, #255	; 0xff
    6590:	4001      	ands	r1, r0
    6592:	000c      	movs	r4, r1
    6594:	7859      	ldrb	r1, [r3, #1]
    6596:	2000      	movs	r0, #0
    6598:	4001      	ands	r1, r0
    659a:	1c08      	adds	r0, r1, #0
    659c:	1c21      	adds	r1, r4, #0
    659e:	4301      	orrs	r1, r0
    65a0:	7059      	strb	r1, [r3, #1]
    65a2:	0c11      	lsrs	r1, r2, #16
    65a4:	20ff      	movs	r0, #255	; 0xff
    65a6:	4001      	ands	r1, r0
    65a8:	000c      	movs	r4, r1
    65aa:	7899      	ldrb	r1, [r3, #2]
    65ac:	2000      	movs	r0, #0
    65ae:	4001      	ands	r1, r0
    65b0:	1c08      	adds	r0, r1, #0
    65b2:	1c21      	adds	r1, r4, #0
    65b4:	4301      	orrs	r1, r0
    65b6:	7099      	strb	r1, [r3, #2]
    65b8:	0e10      	lsrs	r0, r2, #24
    65ba:	78da      	ldrb	r2, [r3, #3]
    65bc:	2100      	movs	r1, #0
    65be:	400a      	ands	r2, r1
    65c0:	1c11      	adds	r1, r2, #0
    65c2:	1c02      	adds	r2, r0, #0
    65c4:	430a      	orrs	r2, r1
    65c6:	70da      	strb	r2, [r3, #3]
	eth_sock[numb_sock].r_status = 1;
    65c8:	1dfb      	adds	r3, r7, #7
    65ca:	781b      	ldrb	r3, [r3, #0]
    65cc:	4a06      	ldr	r2, [pc, #24]	; (65e8 <eth_parse+0xd0>)
    65ce:	4907      	ldr	r1, [pc, #28]	; (65ec <eth_parse+0xd4>)
    65d0:	4807      	ldr	r0, [pc, #28]	; (65f0 <eth_parse+0xd8>)
    65d2:	4343      	muls	r3, r0
    65d4:	18d3      	adds	r3, r2, r3
    65d6:	185b      	adds	r3, r3, r1
    65d8:	2201      	movs	r2, #1
    65da:	701a      	strb	r2, [r3, #0]
    65dc:	e000      	b.n	65e0 <eth_parse+0xc8>
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    65de:	46c0      	nop			; (mov r8, r8)
}
    65e0:	46bd      	mov	sp, r7
    65e2:	b003      	add	sp, #12
    65e4:	bd90      	pop	{r4, r7, pc}
    65e6:	46c0      	nop			; (mov r8, r8)
    65e8:	200005cc 	.word	0x200005cc
    65ec:	000005d1 	.word	0x000005d1
    65f0:	000005e5 	.word	0x000005e5

000065f4 <check_data_wr_process>:

BYTE check_data_wr_process (void)
{
    65f4:	b590      	push	{r4, r7, lr}
    65f6:	b083      	sub	sp, #12
    65f8:	af00      	add	r7, sp, #0
	BYTE numb_sock=0;
    65fa:	1dfb      	adds	r3, r7, #7
    65fc:	2200      	movs	r2, #0
    65fe:	701a      	strb	r2, [r3, #0]

	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    6600:	1dfb      	adds	r3, r7, #7
    6602:	2200      	movs	r2, #0
    6604:	701a      	strb	r2, [r3, #0]
    6606:	e060      	b.n	66ca <check_data_wr_process+0xd6>
	{
		if( eth_sock[numb_sock].w_status == 1 )
    6608:	1dfb      	adds	r3, r7, #7
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	4a33      	ldr	r2, [pc, #204]	; (66dc <check_data_wr_process+0xe8>)
    660e:	4934      	ldr	r1, [pc, #208]	; (66e0 <check_data_wr_process+0xec>)
    6610:	4834      	ldr	r0, [pc, #208]	; (66e4 <check_data_wr_process+0xf0>)
    6612:	4343      	muls	r3, r0
    6614:	18d3      	adds	r3, r2, r3
    6616:	185b      	adds	r3, r3, r1
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	2b01      	cmp	r3, #1
    661c:	d150      	bne.n	66c0 <check_data_wr_process+0xcc>
		{
			eth_sock[numb_sock].w_status = 0;
    661e:	1dfb      	adds	r3, r7, #7
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	4a2e      	ldr	r2, [pc, #184]	; (66dc <check_data_wr_process+0xe8>)
    6624:	492e      	ldr	r1, [pc, #184]	; (66e0 <check_data_wr_process+0xec>)
    6626:	482f      	ldr	r0, [pc, #188]	; (66e4 <check_data_wr_process+0xf0>)
    6628:	4343      	muls	r3, r0
    662a:	18d3      	adds	r3, r2, r3
    662c:	185b      	adds	r3, r3, r1
    662e:	2200      	movs	r2, #0
    6630:	701a      	strb	r2, [r3, #0]
			eth_sock[numb_sock].counters.tx++;
    6632:	1dfb      	adds	r3, r7, #7
    6634:	7819      	ldrb	r1, [r3, #0]
    6636:	4829      	ldr	r0, [pc, #164]	; (66dc <check_data_wr_process+0xe8>)
    6638:	23ba      	movs	r3, #186	; 0xba
    663a:	00db      	lsls	r3, r3, #3
    663c:	4a29      	ldr	r2, [pc, #164]	; (66e4 <check_data_wr_process+0xf0>)
    663e:	434a      	muls	r2, r1
    6640:	1882      	adds	r2, r0, r2
    6642:	18d3      	adds	r3, r2, r3
    6644:	79da      	ldrb	r2, [r3, #7]
    6646:	7a18      	ldrb	r0, [r3, #8]
    6648:	0200      	lsls	r0, r0, #8
    664a:	4302      	orrs	r2, r0
    664c:	7a58      	ldrb	r0, [r3, #9]
    664e:	0400      	lsls	r0, r0, #16
    6650:	4302      	orrs	r2, r0
    6652:	7a9b      	ldrb	r3, [r3, #10]
    6654:	061b      	lsls	r3, r3, #24
    6656:	4313      	orrs	r3, r2
    6658:	1c5a      	adds	r2, r3, #1
    665a:	4820      	ldr	r0, [pc, #128]	; (66dc <check_data_wr_process+0xe8>)
    665c:	23ba      	movs	r3, #186	; 0xba
    665e:	00db      	lsls	r3, r3, #3
    6660:	4c20      	ldr	r4, [pc, #128]	; (66e4 <check_data_wr_process+0xf0>)
    6662:	4361      	muls	r1, r4
    6664:	1841      	adds	r1, r0, r1
    6666:	18cb      	adds	r3, r1, r3
    6668:	3307      	adds	r3, #7
    666a:	21ff      	movs	r1, #255	; 0xff
    666c:	4011      	ands	r1, r2
    666e:	000c      	movs	r4, r1
    6670:	7819      	ldrb	r1, [r3, #0]
    6672:	2000      	movs	r0, #0
    6674:	4001      	ands	r1, r0
    6676:	1c08      	adds	r0, r1, #0
    6678:	1c21      	adds	r1, r4, #0
    667a:	4301      	orrs	r1, r0
    667c:	7019      	strb	r1, [r3, #0]
    667e:	0a11      	lsrs	r1, r2, #8
    6680:	20ff      	movs	r0, #255	; 0xff
    6682:	4001      	ands	r1, r0
    6684:	000c      	movs	r4, r1
    6686:	7859      	ldrb	r1, [r3, #1]
    6688:	2000      	movs	r0, #0
    668a:	4001      	ands	r1, r0
    668c:	1c08      	adds	r0, r1, #0
    668e:	1c21      	adds	r1, r4, #0
    6690:	4301      	orrs	r1, r0
    6692:	7059      	strb	r1, [r3, #1]
    6694:	0c11      	lsrs	r1, r2, #16
    6696:	20ff      	movs	r0, #255	; 0xff
    6698:	4001      	ands	r1, r0
    669a:	000c      	movs	r4, r1
    669c:	7899      	ldrb	r1, [r3, #2]
    669e:	2000      	movs	r0, #0
    66a0:	4001      	ands	r1, r0
    66a2:	1c08      	adds	r0, r1, #0
    66a4:	1c21      	adds	r1, r4, #0
    66a6:	4301      	orrs	r1, r0
    66a8:	7099      	strb	r1, [r3, #2]
    66aa:	0e10      	lsrs	r0, r2, #24
    66ac:	78da      	ldrb	r2, [r3, #3]
    66ae:	2100      	movs	r1, #0
    66b0:	400a      	ands	r2, r1
    66b2:	1c11      	adds	r1, r2, #0
    66b4:	1c02      	adds	r2, r0, #0
    66b6:	430a      	orrs	r2, r1
    66b8:	70da      	strb	r2, [r3, #3]
			return (numb_sock);
    66ba:	1dfb      	adds	r3, r7, #7
    66bc:	781b      	ldrb	r3, [r3, #0]
    66be:	e009      	b.n	66d4 <check_data_wr_process+0xe0>
	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    66c0:	1dfb      	adds	r3, r7, #7
    66c2:	781a      	ldrb	r2, [r3, #0]
    66c4:	1dfb      	adds	r3, r7, #7
    66c6:	3201      	adds	r2, #1
    66c8:	701a      	strb	r2, [r3, #0]
    66ca:	1dfb      	adds	r3, r7, #7
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	2b04      	cmp	r3, #4
    66d0:	d99a      	bls.n	6608 <check_data_wr_process+0x14>
		}
	}
	return (NO_SOKET);	
    66d2:	236d      	movs	r3, #109	; 0x6d
}
    66d4:	0018      	movs	r0, r3
    66d6:	46bd      	mov	sp, r7
    66d8:	b003      	add	sp, #12
    66da:	bd90      	pop	{r4, r7, pc}
    66dc:	200005cc 	.word	0x200005cc
    66e0:	000005d2 	.word	0x000005d2
    66e4:	000005e5 	.word	0x000005e5

000066e8 <flash_empty>:
#include "def.h"



WORD flash_empty(DWORD addr,WORD size)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b084      	sub	sp, #16
    66ec:	af00      	add	r7, sp, #0
    66ee:	6078      	str	r0, [r7, #4]
    66f0:	000a      	movs	r2, r1
    66f2:	1cbb      	adds	r3, r7, #2
    66f4:	801a      	strh	r2, [r3, #0]
	DWORD  v    = 0;
    66f6:	2300      	movs	r3, #0
    66f8:	60fb      	str	r3, [r7, #12]
	for(;size;addr+=4,size-=4)
    66fa:	e00f      	b.n	671c <flash_empty+0x34>
	{
		v = *(__IO DWORD*)(addr);
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	681b      	ldr	r3, [r3, #0]
    6700:	60fb      	str	r3, [r7, #12]
		if(v != 0xFFFFFFFF)
    6702:	68fb      	ldr	r3, [r7, #12]
    6704:	3301      	adds	r3, #1
    6706:	d001      	beq.n	670c <flash_empty+0x24>
		{
			return(0);
    6708:	2300      	movs	r3, #0
    670a:	e00c      	b.n	6726 <flash_empty+0x3e>
	for(;size;addr+=4,size-=4)
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	3304      	adds	r3, #4
    6710:	607b      	str	r3, [r7, #4]
    6712:	1cbb      	adds	r3, r7, #2
    6714:	1cba      	adds	r2, r7, #2
    6716:	8812      	ldrh	r2, [r2, #0]
    6718:	3a04      	subs	r2, #4
    671a:	801a      	strh	r2, [r3, #0]
    671c:	1cbb      	adds	r3, r7, #2
    671e:	881b      	ldrh	r3, [r3, #0]
    6720:	2b00      	cmp	r3, #0
    6722:	d1eb      	bne.n	66fc <flash_empty+0x14>
		}
	}


	return(1);
    6724:	2301      	movs	r3, #1
}
    6726:	0018      	movs	r0, r3
    6728:	46bd      	mov	sp, r7
    672a:	b004      	add	sp, #16
    672c:	bd80      	pop	{r7, pc}

0000672e <flash_erase_page>:

void flash_erase_page(DWORD addr)
//-----------------------------------------------------------------------------
{
    672e:	b580      	push	{r7, lr}
    6730:	b082      	sub	sp, #8
    6732:	af00      	add	r7, sp, #0
    6734:	6078      	str	r0, [r7, #4]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	4b0e      	ldr	r3, [pc, #56]	; (6774 <flash_erase_page+0x46>)
    673a:	7d1b      	ldrb	r3, [r3, #20]
    673c:	07db      	lsls	r3, r3, #31
    673e:	0fdb      	lsrs	r3, r3, #31
    6740:	b2db      	uxtb	r3, r3
    6742:	2b00      	cmp	r3, #0
    6744:	d0f8      	beq.n	6738 <flash_erase_page+0xa>
	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    6746:	4b0b      	ldr	r3, [pc, #44]	; (6774 <flash_erase_page+0x46>)
    6748:	2220      	movs	r2, #32
    674a:	32ff      	adds	r2, #255	; 0xff
    674c:	831a      	strh	r2, [r3, #24]
	*(__IO DWORD *)(addr)=0xFFFFFFFF;
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	2201      	movs	r2, #1
    6752:	4252      	negs	r2, r2
    6754:	601a      	str	r2, [r3, #0]
	NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    6756:	4b07      	ldr	r3, [pc, #28]	; (6774 <flash_erase_page+0x46>)
    6758:	4a07      	ldr	r2, [pc, #28]	; (6778 <flash_erase_page+0x4a>)
    675a:	801a      	strh	r2, [r3, #0]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    675c:	46c0      	nop			; (mov r8, r8)
    675e:	4b05      	ldr	r3, [pc, #20]	; (6774 <flash_erase_page+0x46>)
    6760:	7d1b      	ldrb	r3, [r3, #20]
    6762:	07db      	lsls	r3, r3, #31
    6764:	0fdb      	lsrs	r3, r3, #31
    6766:	b2db      	uxtb	r3, r3
    6768:	2b00      	cmp	r3, #0
    676a:	d0f8      	beq.n	675e <flash_erase_page+0x30>
}
    676c:	46c0      	nop			; (mov r8, r8)
    676e:	46bd      	mov	sp, r7
    6770:	b002      	add	sp, #8
    6772:	bd80      	pop	{r7, pc}
    6774:	41004000 	.word	0x41004000
    6778:	ffffa502 	.word	0xffffa502

0000677c <flash_write>:

void flash_write(DWORD addr,BYTE *buf,WORD size)
//-----------------------------------------------------------------------------
{
    677c:	b580      	push	{r7, lr}
    677e:	b088      	sub	sp, #32
    6780:	af00      	add	r7, sp, #0
    6782:	60f8      	str	r0, [r7, #12]
    6784:	60b9      	str	r1, [r7, #8]
    6786:	1dbb      	adds	r3, r7, #6
    6788:	801a      	strh	r2, [r3, #0]
	WORD wn   = 0;
    678a:	231e      	movs	r3, #30
    678c:	18fb      	adds	r3, r7, r3
    678e:	2200      	movs	r2, #0
    6790:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6792:	2300      	movs	r3, #0
    6794:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    6796:	2300      	movs	r3, #0
    6798:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    679a:	4a2b      	ldr	r2, [pc, #172]	; (6848 <flash_write+0xcc>)
    679c:	6853      	ldr	r3, [r2, #4]
    679e:	2180      	movs	r1, #128	; 0x80
    67a0:	438b      	bics	r3, r1
    67a2:	6053      	str	r3, [r2, #4]

	while(size > 0)
    67a4:	e048      	b.n	6838 <flash_write+0xbc>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    67a6:	1dbb      	adds	r3, r7, #6
    67a8:	881b      	ldrh	r3, [r3, #0]
    67aa:	2b10      	cmp	r3, #16
    67ac:	d802      	bhi.n	67b4 <flash_write+0x38>
    67ae:	1dbb      	adds	r3, r7, #6
    67b0:	881b      	ldrh	r3, [r3, #0]
    67b2:	e000      	b.n	67b6 <flash_write+0x3a>
    67b4:	2310      	movs	r3, #16
    67b6:	617b      	str	r3, [r7, #20]
		
		size-=len;
    67b8:	697b      	ldr	r3, [r7, #20]
    67ba:	b29a      	uxth	r2, r3
    67bc:	1dbb      	adds	r3, r7, #6
    67be:	1db9      	adds	r1, r7, #6
    67c0:	8809      	ldrh	r1, [r1, #0]
    67c2:	1a8a      	subs	r2, r1, r2
    67c4:	801a      	strh	r2, [r3, #0]
		
		//wdt_reset();
		
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    67c6:	4b20      	ldr	r3, [pc, #128]	; (6848 <flash_write+0xcc>)
    67c8:	4a20      	ldr	r2, [pc, #128]	; (684c <flash_write+0xd0>)
    67ca:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    67cc:	46c0      	nop			; (mov r8, r8)
    67ce:	4b1e      	ldr	r3, [pc, #120]	; (6848 <flash_write+0xcc>)
    67d0:	7d1b      	ldrb	r3, [r3, #20]
    67d2:	07db      	lsls	r3, r3, #31
    67d4:	0fdb      	lsrs	r3, r3, #31
    67d6:	b2db      	uxtb	r3, r3
    67d8:	2b00      	cmp	r3, #0
    67da:	d0f8      	beq.n	67ce <flash_write+0x52>

		for(wn=0;wn<len;wn+=4,addr+=4)
    67dc:	231e      	movs	r3, #30
    67de:	18fb      	adds	r3, r7, r3
    67e0:	2200      	movs	r2, #0
    67e2:	801a      	strh	r2, [r3, #0]
    67e4:	e013      	b.n	680e <flash_write+0x92>
		{
			*(__IO DWORD*)(addr) = *(DWORD*)&buf[wn+cnt];
    67e6:	68fb      	ldr	r3, [r7, #12]
    67e8:	221e      	movs	r2, #30
    67ea:	18ba      	adds	r2, r7, r2
    67ec:	8811      	ldrh	r1, [r2, #0]
    67ee:	69ba      	ldr	r2, [r7, #24]
    67f0:	188a      	adds	r2, r1, r2
    67f2:	68b9      	ldr	r1, [r7, #8]
    67f4:	188a      	adds	r2, r1, r2
    67f6:	6812      	ldr	r2, [r2, #0]
    67f8:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,addr+=4)
    67fa:	231e      	movs	r3, #30
    67fc:	18fb      	adds	r3, r7, r3
    67fe:	221e      	movs	r2, #30
    6800:	18ba      	adds	r2, r7, r2
    6802:	8812      	ldrh	r2, [r2, #0]
    6804:	3204      	adds	r2, #4
    6806:	801a      	strh	r2, [r3, #0]
    6808:	68fb      	ldr	r3, [r7, #12]
    680a:	3304      	adds	r3, #4
    680c:	60fb      	str	r3, [r7, #12]
    680e:	231e      	movs	r3, #30
    6810:	18fb      	adds	r3, r7, r3
    6812:	881a      	ldrh	r2, [r3, #0]
    6814:	697b      	ldr	r3, [r7, #20]
    6816:	429a      	cmp	r2, r3
    6818:	d3e5      	bcc.n	67e6 <flash_write+0x6a>
		}
		
		cnt=cnt+len;
    681a:	69ba      	ldr	r2, [r7, #24]
    681c:	697b      	ldr	r3, [r7, #20]
    681e:	18d3      	adds	r3, r2, r3
    6820:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    6822:	4b09      	ldr	r3, [pc, #36]	; (6848 <flash_write+0xcc>)
    6824:	4a0a      	ldr	r2, [pc, #40]	; (6850 <flash_write+0xd4>)
    6826:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6828:	46c0      	nop			; (mov r8, r8)
    682a:	4b07      	ldr	r3, [pc, #28]	; (6848 <flash_write+0xcc>)
    682c:	7d1b      	ldrb	r3, [r3, #20]
    682e:	07db      	lsls	r3, r3, #31
    6830:	0fdb      	lsrs	r3, r3, #31
    6832:	b2db      	uxtb	r3, r3
    6834:	2b00      	cmp	r3, #0
    6836:	d0f8      	beq.n	682a <flash_write+0xae>
	while(size > 0)
    6838:	1dbb      	adds	r3, r7, #6
    683a:	881b      	ldrh	r3, [r3, #0]
    683c:	2b00      	cmp	r3, #0
    683e:	d1b2      	bne.n	67a6 <flash_write+0x2a>
	}
}
    6840:	46c0      	nop			; (mov r8, r8)
    6842:	46bd      	mov	sp, r7
    6844:	b008      	add	sp, #32
    6846:	bd80      	pop	{r7, pc}
    6848:	41004000 	.word	0x41004000
    684c:	ffffa544 	.word	0xffffa544
    6850:	ffffa504 	.word	0xffffa504

00006854 <flash_copy>:

WORD flash_copy(DWORD dst,DWORD src,DWORD size)
//--------------------------------------------------------------------------
{
    6854:	b580      	push	{r7, lr}
    6856:	b088      	sub	sp, #32
    6858:	af00      	add	r7, sp, #0
    685a:	60f8      	str	r0, [r7, #12]
    685c:	60b9      	str	r1, [r7, #8]
    685e:	607a      	str	r2, [r7, #4]
	WORD wn   = 0;
    6860:	231e      	movs	r3, #30
    6862:	18fb      	adds	r3, r7, r3
    6864:	2200      	movs	r2, #0
    6866:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6868:	2300      	movs	r3, #0
    686a:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    686c:	2300      	movs	r3, #0
    686e:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    6870:	4a2d      	ldr	r2, [pc, #180]	; (6928 <flash_copy+0xd4>)
    6872:	6853      	ldr	r3, [r2, #4]
    6874:	2180      	movs	r1, #128	; 0x80
    6876:	438b      	bics	r3, r1
    6878:	6053      	str	r3, [r2, #4]

	while(size > 0)
    687a:	e04d      	b.n	6918 <flash_copy+0xc4>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	2b10      	cmp	r3, #16
    6880:	d900      	bls.n	6884 <flash_copy+0x30>
    6882:	2310      	movs	r3, #16
    6884:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6886:	687a      	ldr	r2, [r7, #4]
    6888:	697b      	ldr	r3, [r7, #20]
    688a:	1ad3      	subs	r3, r2, r3
    688c:	607b      	str	r3, [r7, #4]
		wdt_reset();
    688e:	4b27      	ldr	r3, [pc, #156]	; (692c <flash_copy+0xd8>)
    6890:	799b      	ldrb	r3, [r3, #6]
    6892:	07db      	lsls	r3, r3, #31
    6894:	0fdb      	lsrs	r3, r3, #31
    6896:	b2db      	uxtb	r3, r3
    6898:	2b01      	cmp	r3, #1
    689a:	d107      	bne.n	68ac <flash_copy+0x58>
    689c:	4a23      	ldr	r2, [pc, #140]	; (692c <flash_copy+0xd8>)
    689e:	7993      	ldrb	r3, [r2, #6]
    68a0:	2101      	movs	r1, #1
    68a2:	430b      	orrs	r3, r1
    68a4:	7193      	strb	r3, [r2, #6]
    68a6:	4b21      	ldr	r3, [pc, #132]	; (692c <flash_copy+0xd8>)
    68a8:	22a5      	movs	r2, #165	; 0xa5
    68aa:	721a      	strb	r2, [r3, #8]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    68ac:	4b1e      	ldr	r3, [pc, #120]	; (6928 <flash_copy+0xd4>)
    68ae:	4a20      	ldr	r2, [pc, #128]	; (6930 <flash_copy+0xdc>)
    68b0:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    68b2:	46c0      	nop			; (mov r8, r8)
    68b4:	4b1c      	ldr	r3, [pc, #112]	; (6928 <flash_copy+0xd4>)
    68b6:	7d1b      	ldrb	r3, [r3, #20]
    68b8:	07db      	lsls	r3, r3, #31
    68ba:	0fdb      	lsrs	r3, r3, #31
    68bc:	b2db      	uxtb	r3, r3
    68be:	2b00      	cmp	r3, #0
    68c0:	d0f8      	beq.n	68b4 <flash_copy+0x60>

		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    68c2:	231e      	movs	r3, #30
    68c4:	18fb      	adds	r3, r7, r3
    68c6:	2200      	movs	r2, #0
    68c8:	801a      	strh	r2, [r3, #0]
    68ca:	e010      	b.n	68ee <flash_copy+0x9a>
		{
			
			*(__IO DWORD*)(dst) = *(__IO DWORD*)(src);
    68cc:	68fb      	ldr	r3, [r7, #12]
    68ce:	68ba      	ldr	r2, [r7, #8]
    68d0:	6812      	ldr	r2, [r2, #0]
    68d2:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    68d4:	231e      	movs	r3, #30
    68d6:	18fb      	adds	r3, r7, r3
    68d8:	221e      	movs	r2, #30
    68da:	18ba      	adds	r2, r7, r2
    68dc:	8812      	ldrh	r2, [r2, #0]
    68de:	3204      	adds	r2, #4
    68e0:	801a      	strh	r2, [r3, #0]
    68e2:	68fb      	ldr	r3, [r7, #12]
    68e4:	3304      	adds	r3, #4
    68e6:	60fb      	str	r3, [r7, #12]
    68e8:	68bb      	ldr	r3, [r7, #8]
    68ea:	3304      	adds	r3, #4
    68ec:	60bb      	str	r3, [r7, #8]
    68ee:	231e      	movs	r3, #30
    68f0:	18fb      	adds	r3, r7, r3
    68f2:	881a      	ldrh	r2, [r3, #0]
    68f4:	697b      	ldr	r3, [r7, #20]
    68f6:	429a      	cmp	r2, r3
    68f8:	d3e8      	bcc.n	68cc <flash_copy+0x78>
		}
		
		cnt=cnt+len;
    68fa:	69ba      	ldr	r2, [r7, #24]
    68fc:	697b      	ldr	r3, [r7, #20]
    68fe:	18d3      	adds	r3, r2, r3
    6900:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    6902:	4b09      	ldr	r3, [pc, #36]	; (6928 <flash_copy+0xd4>)
    6904:	4a0b      	ldr	r2, [pc, #44]	; (6934 <flash_copy+0xe0>)
    6906:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6908:	46c0      	nop			; (mov r8, r8)
    690a:	4b07      	ldr	r3, [pc, #28]	; (6928 <flash_copy+0xd4>)
    690c:	7d1b      	ldrb	r3, [r3, #20]
    690e:	07db      	lsls	r3, r3, #31
    6910:	0fdb      	lsrs	r3, r3, #31
    6912:	b2db      	uxtb	r3, r3
    6914:	2b00      	cmp	r3, #0
    6916:	d0f8      	beq.n	690a <flash_copy+0xb6>
	while(size > 0)
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	2b00      	cmp	r3, #0
    691c:	d1ae      	bne.n	687c <flash_copy+0x28>
	}
	return 0;
    691e:	2300      	movs	r3, #0
}
    6920:	0018      	movs	r0, r3
    6922:	46bd      	mov	sp, r7
    6924:	b008      	add	sp, #32
    6926:	bd80      	pop	{r7, pc}
    6928:	41004000 	.word	0x41004000
    692c:	40001000 	.word	0x40001000
    6930:	ffffa544 	.word	0xffffa544
    6934:	ffffa504 	.word	0xffffa504

00006938 <flash_read>:

WORD flash_read(DWORD addr,void* buf,WORD size)
//--------------------------------------------------------------------------
{
    6938:	b580      	push	{r7, lr}
    693a:	b086      	sub	sp, #24
    693c:	af00      	add	r7, sp, #0
    693e:	60f8      	str	r0, [r7, #12]
    6940:	60b9      	str	r1, [r7, #8]
    6942:	1dbb      	adds	r3, r7, #6
    6944:	801a      	strh	r2, [r3, #0]
	WORD  cnt  = 0;
    6946:	2316      	movs	r3, #22
    6948:	18fb      	adds	r3, r7, r3
    694a:	2200      	movs	r2, #0
    694c:	801a      	strh	r2, [r3, #0]
	WORD* ptr = (WORD*)buf;
    694e:	68bb      	ldr	r3, [r7, #8]
    6950:	613b      	str	r3, [r7, #16]
	
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    6952:	2316      	movs	r3, #22
    6954:	18fb      	adds	r3, r7, r3
    6956:	2200      	movs	r2, #0
    6958:	801a      	strh	r2, [r3, #0]
    695a:	e020      	b.n	699e <flash_read+0x66>
	{
		*ptr = *(__IO uint16_t*)(addr);
    695c:	68fb      	ldr	r3, [r7, #12]
    695e:	881b      	ldrh	r3, [r3, #0]
    6960:	b29a      	uxth	r2, r3
    6962:	693b      	ldr	r3, [r7, #16]
    6964:	801a      	strh	r2, [r3, #0]
		ptr++;
    6966:	693b      	ldr	r3, [r7, #16]
    6968:	3302      	adds	r3, #2
    696a:	613b      	str	r3, [r7, #16]
		wdt_reset();
    696c:	4b13      	ldr	r3, [pc, #76]	; (69bc <flash_read+0x84>)
    696e:	799b      	ldrb	r3, [r3, #6]
    6970:	07db      	lsls	r3, r3, #31
    6972:	0fdb      	lsrs	r3, r3, #31
    6974:	b2db      	uxtb	r3, r3
    6976:	2b01      	cmp	r3, #1
    6978:	d107      	bne.n	698a <flash_read+0x52>
    697a:	4a10      	ldr	r2, [pc, #64]	; (69bc <flash_read+0x84>)
    697c:	7993      	ldrb	r3, [r2, #6]
    697e:	2101      	movs	r1, #1
    6980:	430b      	orrs	r3, r1
    6982:	7193      	strb	r3, [r2, #6]
    6984:	4b0d      	ldr	r3, [pc, #52]	; (69bc <flash_read+0x84>)
    6986:	22a5      	movs	r2, #165	; 0xa5
    6988:	721a      	strb	r2, [r3, #8]
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    698a:	68fb      	ldr	r3, [r7, #12]
    698c:	3302      	adds	r3, #2
    698e:	60fb      	str	r3, [r7, #12]
    6990:	2316      	movs	r3, #22
    6992:	18fb      	adds	r3, r7, r3
    6994:	2216      	movs	r2, #22
    6996:	18ba      	adds	r2, r7, r2
    6998:	8812      	ldrh	r2, [r2, #0]
    699a:	3202      	adds	r2, #2
    699c:	801a      	strh	r2, [r3, #0]
    699e:	2316      	movs	r3, #22
    69a0:	18fa      	adds	r2, r7, r3
    69a2:	1dbb      	adds	r3, r7, #6
    69a4:	8812      	ldrh	r2, [r2, #0]
    69a6:	881b      	ldrh	r3, [r3, #0]
    69a8:	429a      	cmp	r2, r3
    69aa:	d3d7      	bcc.n	695c <flash_read+0x24>
	}
	return(cnt);
    69ac:	2316      	movs	r3, #22
    69ae:	18fb      	adds	r3, r7, r3
    69b0:	881b      	ldrh	r3, [r3, #0]
}
    69b2:	0018      	movs	r0, r3
    69b4:	46bd      	mov	sp, r7
    69b6:	b006      	add	sp, #24
    69b8:	bd80      	pop	{r7, pc}
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	40001000 	.word	0x40001000

000069c0 <flash_erase_row>:

void flash_erase_row(DWORD *dst) 
//-----------------------------------------------------------------------------
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b082      	sub	sp, #8
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69c8:	46c0      	nop			; (mov r8, r8)
    69ca:	4b0f      	ldr	r3, [pc, #60]	; (6a08 <flash_erase_row+0x48>)
    69cc:	7d1b      	ldrb	r3, [r3, #20]
    69ce:	07db      	lsls	r3, r3, #31
    69d0:	0fdb      	lsrs	r3, r3, #31
    69d2:	b2db      	uxtb	r3, r3
    69d4:	2b00      	cmp	r3, #0
    69d6:	d0f8      	beq.n	69ca <flash_erase_row+0xa>

NVMCTRL->STATUS.reg=NVMCTRL_STATUS_MASK;
    69d8:	4b0b      	ldr	r3, [pc, #44]	; (6a08 <flash_erase_row+0x48>)
    69da:	2220      	movs	r2, #32
    69dc:	32ff      	adds	r2, #255	; 0xff
    69de:	831a      	strh	r2, [r3, #24]
*dst=0xFFFFFFFF;
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	2201      	movs	r2, #1
    69e4:	4252      	negs	r2, r2
    69e6:	601a      	str	r2, [r3, #0]
NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    69e8:	4b07      	ldr	r3, [pc, #28]	; (6a08 <flash_erase_row+0x48>)
    69ea:	4a08      	ldr	r2, [pc, #32]	; (6a0c <flash_erase_row+0x4c>)
    69ec:	801a      	strh	r2, [r3, #0]

while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69ee:	46c0      	nop			; (mov r8, r8)
    69f0:	4b05      	ldr	r3, [pc, #20]	; (6a08 <flash_erase_row+0x48>)
    69f2:	7d1b      	ldrb	r3, [r3, #20]
    69f4:	07db      	lsls	r3, r3, #31
    69f6:	0fdb      	lsrs	r3, r3, #31
    69f8:	b2db      	uxtb	r3, r3
    69fa:	2b00      	cmp	r3, #0
    69fc:	d0f8      	beq.n	69f0 <flash_erase_row+0x30>
}
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	46bd      	mov	sp, r7
    6a02:	b002      	add	sp, #8
    6a04:	bd80      	pop	{r7, pc}
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	41004000 	.word	0x41004000
    6a0c:	ffffa502 	.word	0xffffa502

00006a10 <flash_write_dword>:

void flash_write_dword(DWORD *dst,DWORD* val) 
//-----------------------------------------------------------------------------
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b082      	sub	sp, #8
    6a14:	af00      	add	r7, sp, #0
    6a16:	6078      	str	r0, [r7, #4]
    6a18:	6039      	str	r1, [r7, #0]
NVMCTRL->CTRLB.bit.MANW=0;
    6a1a:	4a11      	ldr	r2, [pc, #68]	; (6a60 <flash_write_dword+0x50>)
    6a1c:	6853      	ldr	r3, [r2, #4]
    6a1e:	2180      	movs	r1, #128	; 0x80
    6a20:	438b      	bics	r3, r1
    6a22:	6053      	str	r3, [r2, #4]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6a24:	4b0e      	ldr	r3, [pc, #56]	; (6a60 <flash_write_dword+0x50>)
    6a26:	4a0f      	ldr	r2, [pc, #60]	; (6a64 <flash_write_dword+0x54>)
    6a28:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	4b0c      	ldr	r3, [pc, #48]	; (6a60 <flash_write_dword+0x50>)
    6a2e:	7d1b      	ldrb	r3, [r3, #20]
    6a30:	07db      	lsls	r3, r3, #31
    6a32:	0fdb      	lsrs	r3, r3, #31
    6a34:	b2db      	uxtb	r3, r3
    6a36:	2b00      	cmp	r3, #0
    6a38:	d0f8      	beq.n	6a2c <flash_write_dword+0x1c>

*dst=*val;
    6a3a:	683b      	ldr	r3, [r7, #0]
    6a3c:	681a      	ldr	r2, [r3, #0]
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	601a      	str	r2, [r3, #0]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    6a42:	4b07      	ldr	r3, [pc, #28]	; (6a60 <flash_write_dword+0x50>)
    6a44:	4a08      	ldr	r2, [pc, #32]	; (6a68 <flash_write_dword+0x58>)
    6a46:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a48:	46c0      	nop			; (mov r8, r8)
    6a4a:	4b05      	ldr	r3, [pc, #20]	; (6a60 <flash_write_dword+0x50>)
    6a4c:	7d1b      	ldrb	r3, [r3, #20]
    6a4e:	07db      	lsls	r3, r3, #31
    6a50:	0fdb      	lsrs	r3, r3, #31
    6a52:	b2db      	uxtb	r3, r3
    6a54:	2b00      	cmp	r3, #0
    6a56:	d0f8      	beq.n	6a4a <flash_write_dword+0x3a>
}
    6a58:	46c0      	nop			; (mov r8, r8)
    6a5a:	46bd      	mov	sp, r7
    6a5c:	b002      	add	sp, #8
    6a5e:	bd80      	pop	{r7, pc}
    6a60:	41004000 	.word	0x41004000
    6a64:	ffffa544 	.word	0xffffa544
    6a68:	ffffa504 	.word	0xffffa504

00006a6c <gpio_init>:
#include "def.h"

void gpio_init (void)
{
    6a6c:	b580      	push	{r7, lr}
    6a6e:	af00      	add	r7, sp, #0
	//.............................................................................
	// LED ........................................................................
	//.............................................................................

	PORT->Group[1].OUTSET.reg=PORT_PB03;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a70:	4ac2      	ldr	r2, [pc, #776]	; (6d7c <gpio_init+0x310>)
    6a72:	2398      	movs	r3, #152	; 0x98
    6a74:	2108      	movs	r1, #8
    6a76:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIRSET.reg=PORT_PB03;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6a78:	4ac0      	ldr	r2, [pc, #768]	; (6d7c <gpio_init+0x310>)
    6a7a:	2388      	movs	r3, #136	; 0x88
    6a7c:	2108      	movs	r1, #8
    6a7e:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a80:	49be      	ldr	r1, [pc, #760]	; (6d7c <gpio_init+0x310>)
    6a82:	22c3      	movs	r2, #195	; 0xc3
    6a84:	5c8b      	ldrb	r3, [r1, r2]
    6a86:	2001      	movs	r0, #1
    6a88:	4383      	bics	r3, r0
    6a8a:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART1 SERCOM1_ALT ............................................................
	//.............................................................................
 
	// PA12 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA12;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a8c:	4bbb      	ldr	r3, [pc, #748]	; (6d7c <gpio_init+0x310>)
    6a8e:	2280      	movs	r2, #128	; 0x80
    6a90:	0152      	lsls	r2, r2, #5
    6a92:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA12;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6a94:	4bb9      	ldr	r3, [pc, #740]	; (6d7c <gpio_init+0x310>)
    6a96:	2280      	movs	r2, #128	; 0x80
    6a98:	0152      	lsls	r2, r2, #5
    6a9a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[12].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a9c:	49b7      	ldr	r1, [pc, #732]	; (6d7c <gpio_init+0x310>)
    6a9e:	224c      	movs	r2, #76	; 0x4c
    6aa0:	5c8b      	ldrb	r3, [r1, r2]
    6aa2:	2001      	movs	r0, #1
    6aa4:	4383      	bics	r3, r0
    6aa6:	548b      	strb	r3, [r1, r2]

	// PA00 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA00;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6aa8:	4bb4      	ldr	r3, [pc, #720]	; (6d7c <gpio_init+0x310>)
    6aaa:	2201      	movs	r2, #1
    6aac:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA00;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6aae:	4bb3      	ldr	r3, [pc, #716]	; (6d7c <gpio_init+0x310>)
    6ab0:	2201      	movs	r2, #1
    6ab2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[0].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ab4:	49b1      	ldr	r1, [pc, #708]	; (6d7c <gpio_init+0x310>)
    6ab6:	2240      	movs	r2, #64	; 0x40
    6ab8:	5c8b      	ldrb	r3, [r1, r2]
    6aba:	2001      	movs	r0, #1
    6abc:	4303      	orrs	r3, r0
    6abe:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6ac0:	49ae      	ldr	r1, [pc, #696]	; (6d7c <gpio_init+0x310>)
    6ac2:	2230      	movs	r2, #48	; 0x30
    6ac4:	5c8b      	ldrb	r3, [r1, r2]
    6ac6:	200f      	movs	r0, #15
    6ac8:	4383      	bics	r3, r0
    6aca:	1c18      	adds	r0, r3, #0
    6acc:	2303      	movs	r3, #3
    6ace:	4303      	orrs	r3, r0
    6ad0:	548b      	strb	r3, [r1, r2]

	// PA01 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA01;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6ad2:	4baa      	ldr	r3, [pc, #680]	; (6d7c <gpio_init+0x310>)
    6ad4:	2202      	movs	r2, #2
    6ad6:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[1].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6ad8:	49a8      	ldr	r1, [pc, #672]	; (6d7c <gpio_init+0x310>)
    6ada:	2241      	movs	r2, #65	; 0x41
    6adc:	5c8b      	ldrb	r3, [r1, r2]
    6ade:	2002      	movs	r0, #2
    6ae0:	4303      	orrs	r3, r0
    6ae2:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[1].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ae4:	49a5      	ldr	r1, [pc, #660]	; (6d7c <gpio_init+0x310>)
    6ae6:	2241      	movs	r2, #65	; 0x41
    6ae8:	5c8b      	ldrb	r3, [r1, r2]
    6aea:	2001      	movs	r0, #1
    6aec:	4303      	orrs	r3, r0
    6aee:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6af0:	49a2      	ldr	r1, [pc, #648]	; (6d7c <gpio_init+0x310>)
    6af2:	2230      	movs	r2, #48	; 0x30
    6af4:	5c8b      	ldrb	r3, [r1, r2]
    6af6:	200f      	movs	r0, #15
    6af8:	4003      	ands	r3, r0
    6afa:	1c18      	adds	r0, r3, #0
    6afc:	2330      	movs	r3, #48	; 0x30
    6afe:	4303      	orrs	r3, r0
    6b00:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART2 SERCOM0_ALT ............................................................
	//.............................................................................
	
	// PA13 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA13;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b02:	4b9e      	ldr	r3, [pc, #632]	; (6d7c <gpio_init+0x310>)
    6b04:	2280      	movs	r2, #128	; 0x80
    6b06:	0192      	lsls	r2, r2, #6
    6b08:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA13;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b0a:	4b9c      	ldr	r3, [pc, #624]	; (6d7c <gpio_init+0x310>)
    6b0c:	2280      	movs	r2, #128	; 0x80
    6b0e:	0192      	lsls	r2, r2, #6
    6b10:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[13].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6b12:	499a      	ldr	r1, [pc, #616]	; (6d7c <gpio_init+0x310>)
    6b14:	224d      	movs	r2, #77	; 0x4d
    6b16:	5c8b      	ldrb	r3, [r1, r2]
    6b18:	2001      	movs	r0, #1
    6b1a:	4383      	bics	r3, r0
    6b1c:	548b      	strb	r3, [r1, r2]

	// PA04 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA04;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b1e:	4b97      	ldr	r3, [pc, #604]	; (6d7c <gpio_init+0x310>)
    6b20:	2210      	movs	r2, #16
    6b22:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA04;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b24:	4b95      	ldr	r3, [pc, #596]	; (6d7c <gpio_init+0x310>)
    6b26:	2210      	movs	r2, #16
    6b28:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[4].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b2a:	4994      	ldr	r1, [pc, #592]	; (6d7c <gpio_init+0x310>)
    6b2c:	2244      	movs	r2, #68	; 0x44
    6b2e:	5c8b      	ldrb	r3, [r1, r2]
    6b30:	2001      	movs	r0, #1
    6b32:	4303      	orrs	r3, r0
    6b34:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b36:	4991      	ldr	r1, [pc, #580]	; (6d7c <gpio_init+0x310>)
    6b38:	2232      	movs	r2, #50	; 0x32
    6b3a:	5c8b      	ldrb	r3, [r1, r2]
    6b3c:	200f      	movs	r0, #15
    6b3e:	4383      	bics	r3, r0
    6b40:	1c18      	adds	r0, r3, #0
    6b42:	2303      	movs	r3, #3
    6b44:	4303      	orrs	r3, r0
    6b46:	548b      	strb	r3, [r1, r2]

	// PA05 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA05;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6b48:	4b8c      	ldr	r3, [pc, #560]	; (6d7c <gpio_init+0x310>)
    6b4a:	2220      	movs	r2, #32
    6b4c:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[5].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6b4e:	498b      	ldr	r1, [pc, #556]	; (6d7c <gpio_init+0x310>)
    6b50:	2245      	movs	r2, #69	; 0x45
    6b52:	5c8b      	ldrb	r3, [r1, r2]
    6b54:	2002      	movs	r0, #2
    6b56:	4303      	orrs	r3, r0
    6b58:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[5].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b5a:	4988      	ldr	r1, [pc, #544]	; (6d7c <gpio_init+0x310>)
    6b5c:	2245      	movs	r2, #69	; 0x45
    6b5e:	5c8b      	ldrb	r3, [r1, r2]
    6b60:	2001      	movs	r0, #1
    6b62:	4303      	orrs	r3, r0
    6b64:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6b66:	4985      	ldr	r1, [pc, #532]	; (6d7c <gpio_init+0x310>)
    6b68:	2232      	movs	r2, #50	; 0x32
    6b6a:	5c8b      	ldrb	r3, [r1, r2]
    6b6c:	200f      	movs	r0, #15
    6b6e:	4003      	ands	r3, r0
    6b70:	1c18      	adds	r0, r3, #0
    6b72:	2330      	movs	r3, #48	; 0x30
    6b74:	4303      	orrs	r3, r0
    6b76:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART3 SERCOM2_ALT ............................................................
	//.............................................................................
		
	// PA14 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA14;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b78:	4b80      	ldr	r3, [pc, #512]	; (6d7c <gpio_init+0x310>)
    6b7a:	2280      	movs	r2, #128	; 0x80
    6b7c:	01d2      	lsls	r2, r2, #7
    6b7e:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA14;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b80:	4b7e      	ldr	r3, [pc, #504]	; (6d7c <gpio_init+0x310>)
    6b82:	2280      	movs	r2, #128	; 0x80
    6b84:	01d2      	lsls	r2, r2, #7
    6b86:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[14].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6b88:	497c      	ldr	r1, [pc, #496]	; (6d7c <gpio_init+0x310>)
    6b8a:	224e      	movs	r2, #78	; 0x4e
    6b8c:	5c8b      	ldrb	r3, [r1, r2]
    6b8e:	2001      	movs	r0, #1
    6b90:	4383      	bics	r3, r0
    6b92:	548b      	strb	r3, [r1, r2]

	// PA08 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA08;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b94:	4b79      	ldr	r3, [pc, #484]	; (6d7c <gpio_init+0x310>)
    6b96:	2280      	movs	r2, #128	; 0x80
    6b98:	0052      	lsls	r2, r2, #1
    6b9a:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA08;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b9c:	4b77      	ldr	r3, [pc, #476]	; (6d7c <gpio_init+0x310>)
    6b9e:	2280      	movs	r2, #128	; 0x80
    6ba0:	0052      	lsls	r2, r2, #1
    6ba2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[8].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ba4:	4975      	ldr	r1, [pc, #468]	; (6d7c <gpio_init+0x310>)
    6ba6:	2248      	movs	r2, #72	; 0x48
    6ba8:	5c8b      	ldrb	r3, [r1, r2]
    6baa:	2001      	movs	r0, #1
    6bac:	4303      	orrs	r3, r0
    6bae:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6bb0:	4972      	ldr	r1, [pc, #456]	; (6d7c <gpio_init+0x310>)
    6bb2:	2234      	movs	r2, #52	; 0x34
    6bb4:	5c8b      	ldrb	r3, [r1, r2]
    6bb6:	200f      	movs	r0, #15
    6bb8:	4383      	bics	r3, r0
    6bba:	1c18      	adds	r0, r3, #0
    6bbc:	2303      	movs	r3, #3
    6bbe:	4303      	orrs	r3, r0
    6bc0:	548b      	strb	r3, [r1, r2]

	// PA09 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA09;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6bc2:	4b6e      	ldr	r3, [pc, #440]	; (6d7c <gpio_init+0x310>)
    6bc4:	2280      	movs	r2, #128	; 0x80
    6bc6:	0092      	lsls	r2, r2, #2
    6bc8:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[9].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6bca:	496c      	ldr	r1, [pc, #432]	; (6d7c <gpio_init+0x310>)
    6bcc:	2249      	movs	r2, #73	; 0x49
    6bce:	5c8b      	ldrb	r3, [r1, r2]
    6bd0:	2002      	movs	r0, #2
    6bd2:	4303      	orrs	r3, r0
    6bd4:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[9].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6bd6:	4969      	ldr	r1, [pc, #420]	; (6d7c <gpio_init+0x310>)
    6bd8:	2249      	movs	r2, #73	; 0x49
    6bda:	5c8b      	ldrb	r3, [r1, r2]
    6bdc:	2001      	movs	r0, #1
    6bde:	4303      	orrs	r3, r0
    6be0:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6be2:	4966      	ldr	r1, [pc, #408]	; (6d7c <gpio_init+0x310>)
    6be4:	2234      	movs	r2, #52	; 0x34
    6be6:	5c8b      	ldrb	r3, [r1, r2]
    6be8:	200f      	movs	r0, #15
    6bea:	4003      	ands	r3, r0
    6bec:	1c18      	adds	r0, r3, #0
    6bee:	2330      	movs	r3, #48	; 0x30
    6bf0:	4303      	orrs	r3, r0
    6bf2:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART4 SERCOM3_ALT ............................................................
	//.............................................................................
		
	// PA15 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA15;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6bf4:	4b61      	ldr	r3, [pc, #388]	; (6d7c <gpio_init+0x310>)
    6bf6:	2280      	movs	r2, #128	; 0x80
    6bf8:	0212      	lsls	r2, r2, #8
    6bfa:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA15;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bfc:	4b5f      	ldr	r3, [pc, #380]	; (6d7c <gpio_init+0x310>)
    6bfe:	2280      	movs	r2, #128	; 0x80
    6c00:	0212      	lsls	r2, r2, #8
    6c02:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[15].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6c04:	495d      	ldr	r1, [pc, #372]	; (6d7c <gpio_init+0x310>)
    6c06:	224f      	movs	r2, #79	; 0x4f
    6c08:	5c8b      	ldrb	r3, [r1, r2]
    6c0a:	2001      	movs	r0, #1
    6c0c:	4383      	bics	r3, r0
    6c0e:	548b      	strb	r3, [r1, r2]

	// PA16 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA16;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c10:	4b5a      	ldr	r3, [pc, #360]	; (6d7c <gpio_init+0x310>)
    6c12:	2280      	movs	r2, #128	; 0x80
    6c14:	0252      	lsls	r2, r2, #9
    6c16:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA16;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6c18:	4b58      	ldr	r3, [pc, #352]	; (6d7c <gpio_init+0x310>)
    6c1a:	2280      	movs	r2, #128	; 0x80
    6c1c:	0252      	lsls	r2, r2, #9
    6c1e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[16].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c20:	4956      	ldr	r1, [pc, #344]	; (6d7c <gpio_init+0x310>)
    6c22:	2250      	movs	r2, #80	; 0x50
    6c24:	5c8b      	ldrb	r3, [r1, r2]
    6c26:	2001      	movs	r0, #1
    6c28:	4303      	orrs	r3, r0
    6c2a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6c2c:	4953      	ldr	r1, [pc, #332]	; (6d7c <gpio_init+0x310>)
    6c2e:	2238      	movs	r2, #56	; 0x38
    6c30:	5c8b      	ldrb	r3, [r1, r2]
    6c32:	200f      	movs	r0, #15
    6c34:	4383      	bics	r3, r0
    6c36:	1c18      	adds	r0, r3, #0
    6c38:	2303      	movs	r3, #3
    6c3a:	4303      	orrs	r3, r0
    6c3c:	548b      	strb	r3, [r1, r2]

	// PA17 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA17;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6c3e:	4b4f      	ldr	r3, [pc, #316]	; (6d7c <gpio_init+0x310>)
    6c40:	2280      	movs	r2, #128	; 0x80
    6c42:	0292      	lsls	r2, r2, #10
    6c44:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[17].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6c46:	494d      	ldr	r1, [pc, #308]	; (6d7c <gpio_init+0x310>)
    6c48:	2251      	movs	r2, #81	; 0x51
    6c4a:	5c8b      	ldrb	r3, [r1, r2]
    6c4c:	2002      	movs	r0, #2
    6c4e:	4303      	orrs	r3, r0
    6c50:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[17].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c52:	494a      	ldr	r1, [pc, #296]	; (6d7c <gpio_init+0x310>)
    6c54:	2251      	movs	r2, #81	; 0x51
    6c56:	5c8b      	ldrb	r3, [r1, r2]
    6c58:	2001      	movs	r0, #1
    6c5a:	4303      	orrs	r3, r0
    6c5c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6c5e:	4947      	ldr	r1, [pc, #284]	; (6d7c <gpio_init+0x310>)
    6c60:	2238      	movs	r2, #56	; 0x38
    6c62:	5c8b      	ldrb	r3, [r1, r2]
    6c64:	200f      	movs	r0, #15
    6c66:	4003      	ands	r3, r0
    6c68:	1c18      	adds	r0, r3, #0
    6c6a:	2330      	movs	r3, #48	; 0x30
    6c6c:	4303      	orrs	r3, r0
    6c6e:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// SPI SERCOM5_ALT ....................................................................
	//.............................................................................*/

	// PA23 - SPI_MOSI (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA23;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c70:	4b42      	ldr	r3, [pc, #264]	; (6d7c <gpio_init+0x310>)
    6c72:	2280      	movs	r2, #128	; 0x80
    6c74:	0412      	lsls	r2, r2, #16
    6c76:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA23;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c78:	4b40      	ldr	r3, [pc, #256]	; (6d7c <gpio_init+0x310>)
    6c7a:	2280      	movs	r2, #128	; 0x80
    6c7c:	0412      	lsls	r2, r2, #16
    6c7e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[23].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c80:	493e      	ldr	r1, [pc, #248]	; (6d7c <gpio_init+0x310>)
    6c82:	2257      	movs	r2, #87	; 0x57
    6c84:	5c8b      	ldrb	r3, [r1, r2]
    6c86:	2001      	movs	r0, #1
    6c88:	4303      	orrs	r3, r0
    6c8a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXO=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6c8c:	493b      	ldr	r1, [pc, #236]	; (6d7c <gpio_init+0x310>)
    6c8e:	223b      	movs	r2, #59	; 0x3b
    6c90:	5c8b      	ldrb	r3, [r1, r2]
    6c92:	200f      	movs	r0, #15
    6c94:	4003      	ands	r3, r0
    6c96:	1c18      	adds	r0, r3, #0
    6c98:	2330      	movs	r3, #48	; 0x30
    6c9a:	4303      	orrs	r3, r0
    6c9c:	548b      	strb	r3, [r1, r2]

	// PA22 - SPI_MISO (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA22;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c9e:	4b37      	ldr	r3, [pc, #220]	; (6d7c <gpio_init+0x310>)
    6ca0:	2280      	movs	r2, #128	; 0x80
    6ca2:	03d2      	lsls	r2, r2, #15
    6ca4:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[22].bit.INEN  =0x01; // Bit  17   - INEN:   Input Enable
    6ca6:	4935      	ldr	r1, [pc, #212]	; (6d7c <gpio_init+0x310>)
    6ca8:	2256      	movs	r2, #86	; 0x56
    6caa:	5c8b      	ldrb	r3, [r1, r2]
    6cac:	2002      	movs	r0, #2
    6cae:	4303      	orrs	r3, r0
    6cb0:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cb2:	4932      	ldr	r1, [pc, #200]	; (6d7c <gpio_init+0x310>)
    6cb4:	2256      	movs	r2, #86	; 0x56
    6cb6:	5c8b      	ldrb	r3, [r1, r2]
    6cb8:	2001      	movs	r0, #1
    6cba:	4303      	orrs	r3, r0
    6cbc:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXE=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6cbe:	492f      	ldr	r1, [pc, #188]	; (6d7c <gpio_init+0x310>)
    6cc0:	223b      	movs	r2, #59	; 0x3b
    6cc2:	5c8b      	ldrb	r3, [r1, r2]
    6cc4:	200f      	movs	r0, #15
    6cc6:	4383      	bics	r3, r0
    6cc8:	1c18      	adds	r0, r3, #0
    6cca:	2303      	movs	r3, #3
    6ccc:	4303      	orrs	r3, r0
    6cce:	548b      	strb	r3, [r1, r2]

	// PA24 - SPI_SCK (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA25;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6cd0:	4b2a      	ldr	r3, [pc, #168]	; (6d7c <gpio_init+0x310>)
    6cd2:	2280      	movs	r2, #128	; 0x80
    6cd4:	0492      	lsls	r2, r2, #18
    6cd6:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA25;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cd8:	4b28      	ldr	r3, [pc, #160]	; (6d7c <gpio_init+0x310>)
    6cda:	2280      	movs	r2, #128	; 0x80
    6cdc:	0492      	lsls	r2, r2, #18
    6cde:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[25].bit.PMUXEN=0x01; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ce0:	4926      	ldr	r1, [pc, #152]	; (6d7c <gpio_init+0x310>)
    6ce2:	2259      	movs	r2, #89	; 0x59
    6ce4:	5c8b      	ldrb	r3, [r1, r2]
    6ce6:	2001      	movs	r0, #1
    6ce8:	4303      	orrs	r3, r0
    6cea:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [12].bit.PMUXO=3;  // Bits 3:0  - PMUXO: Peripheral Multiplexing Odd (5: Peripheral function F selected)
    6cec:	4923      	ldr	r1, [pc, #140]	; (6d7c <gpio_init+0x310>)
    6cee:	223c      	movs	r2, #60	; 0x3c
    6cf0:	5c8b      	ldrb	r3, [r1, r2]
    6cf2:	200f      	movs	r0, #15
    6cf4:	4003      	ands	r3, r0
    6cf6:	1c18      	adds	r0, r3, #0
    6cf8:	2330      	movs	r3, #48	; 0x30
    6cfa:	4303      	orrs	r3, r0
    6cfc:	548b      	strb	r3, [r1, r2]

	// PA25 - SPI_CS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA24;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6cfe:	4b1f      	ldr	r3, [pc, #124]	; (6d7c <gpio_init+0x310>)
    6d00:	2280      	movs	r2, #128	; 0x80
    6d02:	0452      	lsls	r2, r2, #17
    6d04:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA24;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d06:	4b1d      	ldr	r3, [pc, #116]	; (6d7c <gpio_init+0x310>)
    6d08:	2280      	movs	r2, #128	; 0x80
    6d0a:	0452      	lsls	r2, r2, #17
    6d0c:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[24].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6d0e:	491b      	ldr	r1, [pc, #108]	; (6d7c <gpio_init+0x310>)
    6d10:	2258      	movs	r2, #88	; 0x58
    6d12:	5c8b      	ldrb	r3, [r1, r2]
    6d14:	2001      	movs	r0, #1
    6d16:	4383      	bics	r3, r0
    6d18:	548b      	strb	r3, [r1, r2]
	
	// PA19 - SPI_INT (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA19;       // Bits 31:0 - DIRCLR: Port Data Direction Clear
    6d1a:	4b18      	ldr	r3, [pc, #96]	; (6d7c <gpio_init+0x310>)
    6d1c:	2280      	movs	r2, #128	; 0x80
    6d1e:	0312      	lsls	r2, r2, #12
    6d20:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[19].bit.PMUXEN=0x00; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6d22:	4916      	ldr	r1, [pc, #88]	; (6d7c <gpio_init+0x310>)
    6d24:	2253      	movs	r2, #83	; 0x53
    6d26:	5c8b      	ldrb	r3, [r1, r2]
    6d28:	2001      	movs	r0, #1
    6d2a:	4383      	bics	r3, r0
    6d2c:	548b      	strb	r3, [r1, r2]

    // PA18 - SPI_RESET (Output)
    PORT->Group[0].OUTSET.reg=PORT_PA18;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6d2e:	4b13      	ldr	r3, [pc, #76]	; (6d7c <gpio_init+0x310>)
    6d30:	2280      	movs	r2, #128	; 0x80
    6d32:	02d2      	lsls	r2, r2, #11
    6d34:	619a      	str	r2, [r3, #24]
    PORT->Group[0].DIRSET.reg=PORT_PA18;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d36:	4b11      	ldr	r3, [pc, #68]	; (6d7c <gpio_init+0x310>)
    6d38:	2280      	movs	r2, #128	; 0x80
    6d3a:	02d2      	lsls	r2, r2, #11
    6d3c:	609a      	str	r2, [r3, #8]
    PORT->Group[0].PINCFG[18].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)*/  
    6d3e:	490f      	ldr	r1, [pc, #60]	; (6d7c <gpio_init+0x310>)
    6d40:	2252      	movs	r2, #82	; 0x52
    6d42:	5c8b      	ldrb	r3, [r1, r2]
    6d44:	2001      	movs	r0, #1
    6d46:	4383      	bics	r3, r0
    6d48:	548b      	strb	r3, [r1, r2]
	PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;  
    6d4a:	23c0      	movs	r3, #192	; 0xc0
    6d4c:	05db      	lsls	r3, r3, #23
    6d4e:	2280      	movs	r2, #128	; 0x80
    6d50:	02d2      	lsls	r2, r2, #11
    6d52:	619a      	str	r2, [r3, #24]
	/*
	//.............................................................................
	// Gerkon ....................................................................
	//.............................................................................*/
	
	PORT->Group[1].DIRCLR.reg=PORT_PB23;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6d54:	4909      	ldr	r1, [pc, #36]	; (6d7c <gpio_init+0x310>)
    6d56:	2284      	movs	r2, #132	; 0x84
    6d58:	2380      	movs	r3, #128	; 0x80
    6d5a:	041b      	lsls	r3, r3, #16
    6d5c:	508b      	str	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6d5e:	4907      	ldr	r1, [pc, #28]	; (6d7c <gpio_init+0x310>)
    6d60:	22d7      	movs	r2, #215	; 0xd7
    6d62:	5c8b      	ldrb	r3, [r1, r2]
    6d64:	2002      	movs	r0, #2
    6d66:	4303      	orrs	r3, r0
    6d68:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.PMUXEN=0x00;
    6d6a:	4904      	ldr	r1, [pc, #16]	; (6d7c <gpio_init+0x310>)
    6d6c:	22d7      	movs	r2, #215	; 0xd7
    6d6e:	5c8b      	ldrb	r3, [r1, r2]
    6d70:	2001      	movs	r0, #1
    6d72:	4383      	bics	r3, r0
    6d74:	548b      	strb	r3, [r1, r2]
}
    6d76:	46c0      	nop			; (mov r8, r8)
    6d78:	46bd      	mov	sp, r7
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	41004400 	.word	0x41004400

00006d80 <pin_ctrl>:

DWORD pin_ctrl(BYTE device, BYTE  numb, BYTE mod)
{
    6d80:	b590      	push	{r4, r7, lr}
    6d82:	b083      	sub	sp, #12
    6d84:	af00      	add	r7, sp, #0
    6d86:	0004      	movs	r4, r0
    6d88:	0008      	movs	r0, r1
    6d8a:	0011      	movs	r1, r2
    6d8c:	1dfb      	adds	r3, r7, #7
    6d8e:	1c22      	adds	r2, r4, #0
    6d90:	701a      	strb	r2, [r3, #0]
    6d92:	1dbb      	adds	r3, r7, #6
    6d94:	1c02      	adds	r2, r0, #0
    6d96:	701a      	strb	r2, [r3, #0]
    6d98:	1d7b      	adds	r3, r7, #5
    6d9a:	1c0a      	adds	r2, r1, #0
    6d9c:	701a      	strb	r2, [r3, #0]
	switch(device << 8 | numb << 4 | mod)
    6d9e:	1dfb      	adds	r3, r7, #7
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	021a      	lsls	r2, r3, #8
    6da4:	1dbb      	adds	r3, r7, #6
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	011b      	lsls	r3, r3, #4
    6daa:	431a      	orrs	r2, r3
    6dac:	1d7b      	adds	r3, r7, #5
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	4313      	orrs	r3, r2
    6db2:	2b22      	cmp	r3, #34	; 0x22
    6db4:	d100      	bne.n	6db8 <pin_ctrl+0x38>
    6db6:	e067      	b.n	6e88 <pin_ctrl+0x108>
    6db8:	dc11      	bgt.n	6dde <pin_ctrl+0x5e>
    6dba:	2b10      	cmp	r3, #16
    6dbc:	d043      	beq.n	6e46 <pin_ctrl+0xc6>
    6dbe:	dc06      	bgt.n	6dce <pin_ctrl+0x4e>
    6dc0:	2b01      	cmp	r3, #1
    6dc2:	d032      	beq.n	6e2a <pin_ctrl+0xaa>
    6dc4:	2b02      	cmp	r3, #2
    6dc6:	d037      	beq.n	6e38 <pin_ctrl+0xb8>
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d028      	beq.n	6e1e <pin_ctrl+0x9e>
    6dcc:	e09a      	b.n	6f04 <pin_ctrl+0x184>
    6dce:	2b12      	cmp	r3, #18
    6dd0:	d046      	beq.n	6e60 <pin_ctrl+0xe0>
    6dd2:	db3e      	blt.n	6e52 <pin_ctrl+0xd2>
    6dd4:	2b20      	cmp	r3, #32
    6dd6:	d04a      	beq.n	6e6e <pin_ctrl+0xee>
    6dd8:	2b21      	cmp	r3, #33	; 0x21
    6dda:	d04e      	beq.n	6e7a <pin_ctrl+0xfa>
    6ddc:	e092      	b.n	6f04 <pin_ctrl+0x184>
    6dde:	2280      	movs	r2, #128	; 0x80
    6de0:	0052      	lsls	r2, r2, #1
    6de2:	4293      	cmp	r3, r2
    6de4:	d100      	bne.n	6de8 <pin_ctrl+0x68>
    6de6:	e071      	b.n	6ecc <pin_ctrl+0x14c>
    6de8:	2280      	movs	r2, #128	; 0x80
    6dea:	0052      	lsls	r2, r2, #1
    6dec:	4293      	cmp	r3, r2
    6dee:	dc06      	bgt.n	6dfe <pin_ctrl+0x7e>
    6df0:	2b31      	cmp	r3, #49	; 0x31
    6df2:	d056      	beq.n	6ea2 <pin_ctrl+0x122>
    6df4:	2b32      	cmp	r3, #50	; 0x32
    6df6:	d05b      	beq.n	6eb0 <pin_ctrl+0x130>
    6df8:	2b30      	cmp	r3, #48	; 0x30
    6dfa:	d04c      	beq.n	6e96 <pin_ctrl+0x116>
    6dfc:	e082      	b.n	6f04 <pin_ctrl+0x184>
    6dfe:	2281      	movs	r2, #129	; 0x81
    6e00:	0052      	lsls	r2, r2, #1
    6e02:	4293      	cmp	r3, r2
    6e04:	d069      	beq.n	6eda <pin_ctrl+0x15a>
    6e06:	2281      	movs	r2, #129	; 0x81
    6e08:	0052      	lsls	r2, r2, #1
    6e0a:	4293      	cmp	r3, r2
    6e0c:	db57      	blt.n	6ebe <pin_ctrl+0x13e>
    6e0e:	4a3f      	ldr	r2, [pc, #252]	; (6f0c <pin_ctrl+0x18c>)
    6e10:	4293      	cmp	r3, r2
    6e12:	d100      	bne.n	6e16 <pin_ctrl+0x96>
    6e14:	e06f      	b.n	6ef6 <pin_ctrl+0x176>
    6e16:	4a3e      	ldr	r2, [pc, #248]	; (6f10 <pin_ctrl+0x190>)
    6e18:	4293      	cmp	r3, r2
    6e1a:	d065      	beq.n	6ee8 <pin_ctrl+0x168>
    6e1c:	e072      	b.n	6f04 <pin_ctrl+0x184>
	{
		//RTS
		case (RTS << 8| PORT485_0 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA15);
    6e1e:	4b3d      	ldr	r3, [pc, #244]	; (6f14 <pin_ctrl+0x194>)
    6e20:	6a1a      	ldr	r2, [r3, #32]
    6e22:	2380      	movs	r3, #128	; 0x80
    6e24:	021b      	lsls	r3, r3, #8
    6e26:	4013      	ands	r3, r2
    6e28:	e06c      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA15;return 0;
    6e2a:	23c0      	movs	r3, #192	; 0xc0
    6e2c:	05db      	lsls	r3, r3, #23
    6e2e:	2280      	movs	r2, #128	; 0x80
    6e30:	0212      	lsls	r2, r2, #8
    6e32:	619a      	str	r2, [r3, #24]
    6e34:	2300      	movs	r3, #0
    6e36:	e065      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA15;return 0;
    6e38:	23c0      	movs	r3, #192	; 0xc0
    6e3a:	05db      	lsls	r3, r3, #23
    6e3c:	2280      	movs	r2, #128	; 0x80
    6e3e:	0212      	lsls	r2, r2, #8
    6e40:	615a      	str	r2, [r3, #20]
    6e42:	2300      	movs	r3, #0
    6e44:	e05e      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA14);
    6e46:	4b33      	ldr	r3, [pc, #204]	; (6f14 <pin_ctrl+0x194>)
    6e48:	6a1a      	ldr	r2, [r3, #32]
    6e4a:	2380      	movs	r3, #128	; 0x80
    6e4c:	01db      	lsls	r3, r3, #7
    6e4e:	4013      	ands	r3, r2
    6e50:	e058      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA14;return 0;
    6e52:	23c0      	movs	r3, #192	; 0xc0
    6e54:	05db      	lsls	r3, r3, #23
    6e56:	2280      	movs	r2, #128	; 0x80
    6e58:	01d2      	lsls	r2, r2, #7
    6e5a:	619a      	str	r2, [r3, #24]
    6e5c:	2300      	movs	r3, #0
    6e5e:	e051      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA14;return 0;		
    6e60:	23c0      	movs	r3, #192	; 0xc0
    6e62:	05db      	lsls	r3, r3, #23
    6e64:	2280      	movs	r2, #128	; 0x80
    6e66:	01d2      	lsls	r2, r2, #7
    6e68:	615a      	str	r2, [r3, #20]
    6e6a:	2300      	movs	r3, #0
    6e6c:	e04a      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA13);
    6e6e:	4b29      	ldr	r3, [pc, #164]	; (6f14 <pin_ctrl+0x194>)
    6e70:	6a1a      	ldr	r2, [r3, #32]
    6e72:	2380      	movs	r3, #128	; 0x80
    6e74:	019b      	lsls	r3, r3, #6
    6e76:	4013      	ands	r3, r2
    6e78:	e044      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA13;return 0;
    6e7a:	23c0      	movs	r3, #192	; 0xc0
    6e7c:	05db      	lsls	r3, r3, #23
    6e7e:	2280      	movs	r2, #128	; 0x80
    6e80:	0192      	lsls	r2, r2, #6
    6e82:	619a      	str	r2, [r3, #24]
    6e84:	2300      	movs	r3, #0
    6e86:	e03d      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA13;return 0;				
    6e88:	23c0      	movs	r3, #192	; 0xc0
    6e8a:	05db      	lsls	r3, r3, #23
    6e8c:	2280      	movs	r2, #128	; 0x80
    6e8e:	0192      	lsls	r2, r2, #6
    6e90:	615a      	str	r2, [r3, #20]
    6e92:	2300      	movs	r3, #0
    6e94:	e036      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA12);
    6e96:	4b1f      	ldr	r3, [pc, #124]	; (6f14 <pin_ctrl+0x194>)
    6e98:	6a1a      	ldr	r2, [r3, #32]
    6e9a:	2380      	movs	r3, #128	; 0x80
    6e9c:	015b      	lsls	r3, r3, #5
    6e9e:	4013      	ands	r3, r2
    6ea0:	e030      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA12;return 0;
    6ea2:	23c0      	movs	r3, #192	; 0xc0
    6ea4:	05db      	lsls	r3, r3, #23
    6ea6:	2280      	movs	r2, #128	; 0x80
    6ea8:	0152      	lsls	r2, r2, #5
    6eaa:	619a      	str	r2, [r3, #24]
    6eac:	2300      	movs	r3, #0
    6eae:	e029      	b.n	6f04 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA12;return 0;
    6eb0:	23c0      	movs	r3, #192	; 0xc0
    6eb2:	05db      	lsls	r3, r3, #23
    6eb4:	2280      	movs	r2, #128	; 0x80
    6eb6:	0152      	lsls	r2, r2, #5
    6eb8:	615a      	str	r2, [r3, #20]
    6eba:	2300      	movs	r3, #0
    6ebc:	e022      	b.n	6f04 <pin_ctrl+0x184>

		//LED TX
		case (LED << 8| PWR << 4| ON):		PORT_IOBUS->Group[1].OUTCLR.reg=PORT_PB03;return 0; 
    6ebe:	23c0      	movs	r3, #192	; 0xc0
    6ec0:	05db      	lsls	r3, r3, #23
    6ec2:	2294      	movs	r2, #148	; 0x94
    6ec4:	2108      	movs	r1, #8
    6ec6:	5099      	str	r1, [r3, r2]
    6ec8:	2300      	movs	r3, #0
    6eca:	e01b      	b.n	6f04 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| OFF):		PORT_IOBUS->Group[1].OUTSET.reg=PORT_PB03;return 0;
    6ecc:	23c0      	movs	r3, #192	; 0xc0
    6ece:	05db      	lsls	r3, r3, #23
    6ed0:	2298      	movs	r2, #152	; 0x98
    6ed2:	2108      	movs	r1, #8
    6ed4:	5099      	str	r1, [r3, r2]
    6ed6:	2300      	movs	r3, #0
    6ed8:	e014      	b.n	6f04 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| TGL):		PORT_IOBUS->Group[1].OUTTGL.reg=PORT_PB03;return 0;
    6eda:	23c0      	movs	r3, #192	; 0xc0
    6edc:	05db      	lsls	r3, r3, #23
    6ede:	229c      	movs	r2, #156	; 0x9c
    6ee0:	2108      	movs	r1, #8
    6ee2:	5099      	str	r1, [r3, r2]
    6ee4:	2300      	movs	r3, #0
    6ee6:	e00d      	b.n	6f04 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| CLR):     PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA18;return 0;
    6ee8:	23c0      	movs	r3, #192	; 0xc0
    6eea:	05db      	lsls	r3, r3, #23
    6eec:	2280      	movs	r2, #128	; 0x80
    6eee:	02d2      	lsls	r2, r2, #11
    6ef0:	615a      	str	r2, [r3, #20]
    6ef2:	2300      	movs	r3, #0
    6ef4:	e006      	b.n	6f04 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| SET):     PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;return 0;
    6ef6:	23c0      	movs	r3, #192	; 0xc0
    6ef8:	05db      	lsls	r3, r3, #23
    6efa:	2280      	movs	r2, #128	; 0x80
    6efc:	02d2      	lsls	r2, r2, #11
    6efe:	619a      	str	r2, [r3, #24]
    6f00:	2300      	movs	r3, #0
    6f02:	e7ff      	b.n	6f04 <pin_ctrl+0x184>
		
	}
}
    6f04:	0018      	movs	r0, r3
    6f06:	46bd      	mov	sp, r7
    6f08:	b003      	add	sp, #12
    6f0a:	bd90      	pop	{r4, r7, pc}
    6f0c:	00000201 	.word	0x00000201
    6f10:	00000202 	.word	0x00000202
    6f14:	41004400 	.word	0x41004400

00006f18 <check_gerkon>:

void check_gerkon(void)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	af00      	add	r7, sp, #0
	static BYTE gerkon_st = 0;
	
	if (PORT->Group[1].IN.reg & PORT_PB23)	{if(PORT->Group[1].OUTSET.reg & PORT_PB03){pin_ctrl(LED,PWR,ON);} gerkon_st = 0; return;}
    6f1c:	4a1b      	ldr	r2, [pc, #108]	; (6f8c <check_gerkon+0x74>)
    6f1e:	23a0      	movs	r3, #160	; 0xa0
    6f20:	58d2      	ldr	r2, [r2, r3]
    6f22:	2380      	movs	r3, #128	; 0x80
    6f24:	041b      	lsls	r3, r3, #16
    6f26:	4013      	ands	r3, r2
    6f28:	d00e      	beq.n	6f48 <check_gerkon+0x30>
    6f2a:	4a18      	ldr	r2, [pc, #96]	; (6f8c <check_gerkon+0x74>)
    6f2c:	2398      	movs	r3, #152	; 0x98
    6f2e:	58d3      	ldr	r3, [r2, r3]
    6f30:	2208      	movs	r2, #8
    6f32:	4013      	ands	r3, r2
    6f34:	d004      	beq.n	6f40 <check_gerkon+0x28>
    6f36:	2201      	movs	r2, #1
    6f38:	2100      	movs	r1, #0
    6f3a:	2001      	movs	r0, #1
    6f3c:	f7ff ff20 	bl	6d80 <pin_ctrl>
    6f40:	4b13      	ldr	r3, [pc, #76]	; (6f90 <check_gerkon+0x78>)
    6f42:	2200      	movs	r2, #0
    6f44:	701a      	strb	r2, [r3, #0]
    6f46:	e01e      	b.n	6f86 <check_gerkon+0x6e>
	
	switch (gerkon_st)
    6f48:	4b11      	ldr	r3, [pc, #68]	; (6f90 <check_gerkon+0x78>)
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d002      	beq.n	6f56 <check_gerkon+0x3e>
    6f50:	2b01      	cmp	r3, #1
    6f52:	d00c      	beq.n	6f6e <check_gerkon+0x56>
    6f54:	e017      	b.n	6f86 <check_gerkon+0x6e>
	{
		case 0:
			pin_ctrl(LED,PWR,OFF);
    6f56:	2200      	movs	r2, #0
    6f58:	2100      	movs	r1, #0
    6f5a:	2001      	movs	r0, #1
    6f5c:	f7ff ff10 	bl	6d80 <pin_ctrl>
			ger_wait = 10;
    6f60:	4b0c      	ldr	r3, [pc, #48]	; (6f94 <check_gerkon+0x7c>)
    6f62:	220a      	movs	r2, #10
    6f64:	601a      	str	r2, [r3, #0]
			gerkon_st = 1;
    6f66:	4b0a      	ldr	r3, [pc, #40]	; (6f90 <check_gerkon+0x78>)
    6f68:	2201      	movs	r2, #1
    6f6a:	701a      	strb	r2, [r3, #0]
		break;
    6f6c:	e00b      	b.n	6f86 <check_gerkon+0x6e>
		case 1:
			if (ger_wait)	{return;}
    6f6e:	4b09      	ldr	r3, [pc, #36]	; (6f94 <check_gerkon+0x7c>)
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d106      	bne.n	6f84 <check_gerkon+0x6c>
			reset = 1; 
    6f76:	4b08      	ldr	r3, [pc, #32]	; (6f98 <check_gerkon+0x80>)
    6f78:	2201      	movs	r2, #1
    6f7a:	801a      	strh	r2, [r3, #0]
			cfg_default(); 
    6f7c:	4b07      	ldr	r3, [pc, #28]	; (6f9c <check_gerkon+0x84>)
    6f7e:	4798      	blx	r3
		break;
    6f80:	46c0      	nop			; (mov r8, r8)
    6f82:	e000      	b.n	6f86 <check_gerkon+0x6e>
			if (ger_wait)	{return;}
    6f84:	46c0      	nop			; (mov r8, r8)
	}
    6f86:	46bd      	mov	sp, r7
    6f88:	bd80      	pop	{r7, pc}
    6f8a:	46c0      	nop			; (mov r8, r8)
    6f8c:	41004400 	.word	0x41004400
    6f90:	2000045b 	.word	0x2000045b
    6f94:	20000474 	.word	0x20000474
    6f98:	20002548 	.word	0x20002548
    6f9c:	0000abfd 	.word	0x0000abfd

00006fa0 <iap_process>:

DWORD iap_key=0;

WORD iap_process(BYTE *buf, WORD size)
//--------------------------------------------------------------------------
{
    6fa0:	b580      	push	{r7, lr}
    6fa2:	b084      	sub	sp, #16
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	6078      	str	r0, [r7, #4]
    6fa8:	000a      	movs	r2, r1
    6faa:	1cbb      	adds	r3, r7, #2
    6fac:	801a      	strh	r2, [r3, #0]
	DWORD page;
	WORD  wn = 0;
    6fae:	230a      	movs	r3, #10
    6fb0:	18fb      	adds	r3, r7, r3
    6fb2:	2200      	movs	r2, #0
    6fb4:	801a      	strh	r2, [r3, #0]
	memcpy(iap_buf,buf,size);
    6fb6:	1cbb      	adds	r3, r7, #2
    6fb8:	881a      	ldrh	r2, [r3, #0]
    6fba:	6879      	ldr	r1, [r7, #4]
    6fbc:	4b8c      	ldr	r3, [pc, #560]	; (71f0 <iap_process+0x250>)
    6fbe:	0018      	movs	r0, r3
    6fc0:	4b8c      	ldr	r3, [pc, #560]	; (71f4 <iap_process+0x254>)
    6fc2:	4798      	blx	r3
	static BYTE flwr=0;
	
	switch(iap_buf[wn])
    6fc4:	230a      	movs	r3, #10
    6fc6:	18fb      	adds	r3, r7, r3
    6fc8:	881b      	ldrh	r3, [r3, #0]
    6fca:	4a89      	ldr	r2, [pc, #548]	; (71f0 <iap_process+0x250>)
    6fcc:	5cd3      	ldrb	r3, [r2, r3]
    6fce:	2b03      	cmp	r3, #3
    6fd0:	d040      	beq.n	7054 <iap_process+0xb4>
    6fd2:	dc02      	bgt.n	6fda <iap_process+0x3a>
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d007      	beq.n	6fe8 <iap_process+0x48>
    6fd8:	e0f7      	b.n	71ca <iap_process+0x22a>
    6fda:	2b05      	cmp	r3, #5
    6fdc:	d100      	bne.n	6fe0 <iap_process+0x40>
    6fde:	e0a2      	b.n	7126 <iap_process+0x186>
    6fe0:	2b07      	cmp	r3, #7
    6fe2:	d100      	bne.n	6fe6 <iap_process+0x46>
    6fe4:	e0ca      	b.n	717c <iap_process+0x1dc>
    6fe6:	e0f0      	b.n	71ca <iap_process+0x22a>
	{
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6fe8:	23c0      	movs	r3, #192	; 0xc0
    6fea:	025b      	lsls	r3, r3, #9
    6fec:	60fb      	str	r3, [r7, #12]
    6fee:	e01f      	b.n	7030 <iap_process+0x90>
											{
												wdt_reset();
    6ff0:	4b81      	ldr	r3, [pc, #516]	; (71f8 <iap_process+0x258>)
    6ff2:	799b      	ldrb	r3, [r3, #6]
    6ff4:	07db      	lsls	r3, r3, #31
    6ff6:	0fdb      	lsrs	r3, r3, #31
    6ff8:	b2db      	uxtb	r3, r3
    6ffa:	2b01      	cmp	r3, #1
    6ffc:	d107      	bne.n	700e <iap_process+0x6e>
    6ffe:	4a7e      	ldr	r2, [pc, #504]	; (71f8 <iap_process+0x258>)
    7000:	7993      	ldrb	r3, [r2, #6]
    7002:	2101      	movs	r1, #1
    7004:	430b      	orrs	r3, r1
    7006:	7193      	strb	r3, [r2, #6]
    7008:	4b7b      	ldr	r3, [pc, #492]	; (71f8 <iap_process+0x258>)
    700a:	22a5      	movs	r2, #165	; 0xa5
    700c:	721a      	strb	r2, [r3, #8]
												if(!flash_empty(page,256)){flash_erase_page(page);}
    700e:	2380      	movs	r3, #128	; 0x80
    7010:	005a      	lsls	r2, r3, #1
    7012:	68fb      	ldr	r3, [r7, #12]
    7014:	0011      	movs	r1, r2
    7016:	0018      	movs	r0, r3
    7018:	4b78      	ldr	r3, [pc, #480]	; (71fc <iap_process+0x25c>)
    701a:	4798      	blx	r3
    701c:	1e03      	subs	r3, r0, #0
    701e:	d103      	bne.n	7028 <iap_process+0x88>
    7020:	68fb      	ldr	r3, [r7, #12]
    7022:	0018      	movs	r0, r3
    7024:	4b76      	ldr	r3, [pc, #472]	; (7200 <iap_process+0x260>)
    7026:	4798      	blx	r3
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    7028:	68fb      	ldr	r3, [r7, #12]
    702a:	3301      	adds	r3, #1
    702c:	33ff      	adds	r3, #255	; 0xff
    702e:	60fb      	str	r3, [r7, #12]
    7030:	68fb      	ldr	r3, [r7, #12]
    7032:	4a74      	ldr	r2, [pc, #464]	; (7204 <iap_process+0x264>)
    7034:	4293      	cmp	r3, r2
    7036:	d9db      	bls.n	6ff0 <iap_process+0x50>
											}
											iap_buf[wn] = CM2_A_BOOTLOADER_READY;		wn += sizeof(BYTE );
    7038:	230a      	movs	r3, #10
    703a:	18fb      	adds	r3, r7, r3
    703c:	881b      	ldrh	r3, [r3, #0]
    703e:	4a6c      	ldr	r2, [pc, #432]	; (71f0 <iap_process+0x250>)
    7040:	2102      	movs	r1, #2
    7042:	54d1      	strb	r1, [r2, r3]
    7044:	230a      	movs	r3, #10
    7046:	18fb      	adds	r3, r7, r3
    7048:	220a      	movs	r2, #10
    704a:	18ba      	adds	r2, r7, r2
    704c:	8812      	ldrh	r2, [r2, #0]
    704e:	3201      	adds	r2, #1
    7050:	801a      	strh	r2, [r3, #0]
		
	break;
    7052:	e0ba      	b.n	71ca <iap_process+0x22a>
	case CM2_R_LOAD_DATA_PAGE   :			iap_buf[wn] = CM2_A_DATA_PAGE_LOAD;			wn += sizeof(BYTE );
    7054:	230a      	movs	r3, #10
    7056:	18fb      	adds	r3, r7, r3
    7058:	881b      	ldrh	r3, [r3, #0]
    705a:	4a65      	ldr	r2, [pc, #404]	; (71f0 <iap_process+0x250>)
    705c:	2104      	movs	r1, #4
    705e:	54d1      	strb	r1, [r2, r3]
    7060:	230a      	movs	r3, #10
    7062:	18fb      	adds	r3, r7, r3
    7064:	220a      	movs	r2, #10
    7066:	18ba      	adds	r2, r7, r2
    7068:	8812      	ldrh	r2, [r2, #0]
    706a:	3201      	adds	r2, #1
    706c:	801a      	strh	r2, [r3, #0]
											iap_size  =iap_buf[wn] | (iap_buf[wn+1]<<8);		wn += sizeof(WORD );
    706e:	230a      	movs	r3, #10
    7070:	18fb      	adds	r3, r7, r3
    7072:	881b      	ldrh	r3, [r3, #0]
    7074:	4a5e      	ldr	r2, [pc, #376]	; (71f0 <iap_process+0x250>)
    7076:	5cd3      	ldrb	r3, [r2, r3]
    7078:	b21a      	sxth	r2, r3
    707a:	230a      	movs	r3, #10
    707c:	18fb      	adds	r3, r7, r3
    707e:	881b      	ldrh	r3, [r3, #0]
    7080:	3301      	adds	r3, #1
    7082:	495b      	ldr	r1, [pc, #364]	; (71f0 <iap_process+0x250>)
    7084:	5ccb      	ldrb	r3, [r1, r3]
    7086:	021b      	lsls	r3, r3, #8
    7088:	b21b      	sxth	r3, r3
    708a:	4313      	orrs	r3, r2
    708c:	b21b      	sxth	r3, r3
    708e:	b29a      	uxth	r2, r3
    7090:	4b5d      	ldr	r3, [pc, #372]	; (7208 <iap_process+0x268>)
    7092:	801a      	strh	r2, [r3, #0]
    7094:	230a      	movs	r3, #10
    7096:	18fb      	adds	r3, r7, r3
    7098:	220a      	movs	r2, #10
    709a:	18ba      	adds	r2, r7, r2
    709c:	8812      	ldrh	r2, [r2, #0]
    709e:	3202      	adds	r2, #2
    70a0:	801a      	strh	r2, [r3, #0]
											iap_addr  =iap_buf[wn] | (iap_buf[wn+1]<<8) | (iap_buf[wn+2]<<16) | (iap_buf[wn+3]<<24);
    70a2:	230a      	movs	r3, #10
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	881b      	ldrh	r3, [r3, #0]
    70a8:	4a51      	ldr	r2, [pc, #324]	; (71f0 <iap_process+0x250>)
    70aa:	5cd3      	ldrb	r3, [r2, r3]
    70ac:	0019      	movs	r1, r3
    70ae:	230a      	movs	r3, #10
    70b0:	18fb      	adds	r3, r7, r3
    70b2:	881b      	ldrh	r3, [r3, #0]
    70b4:	3301      	adds	r3, #1
    70b6:	4a4e      	ldr	r2, [pc, #312]	; (71f0 <iap_process+0x250>)
    70b8:	5cd3      	ldrb	r3, [r2, r3]
    70ba:	021b      	lsls	r3, r3, #8
    70bc:	000a      	movs	r2, r1
    70be:	431a      	orrs	r2, r3
    70c0:	230a      	movs	r3, #10
    70c2:	18fb      	adds	r3, r7, r3
    70c4:	881b      	ldrh	r3, [r3, #0]
    70c6:	3302      	adds	r3, #2
    70c8:	4949      	ldr	r1, [pc, #292]	; (71f0 <iap_process+0x250>)
    70ca:	5ccb      	ldrb	r3, [r1, r3]
    70cc:	041b      	lsls	r3, r3, #16
    70ce:	431a      	orrs	r2, r3
    70d0:	230a      	movs	r3, #10
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	881b      	ldrh	r3, [r3, #0]
    70d6:	3303      	adds	r3, #3
    70d8:	4945      	ldr	r1, [pc, #276]	; (71f0 <iap_process+0x250>)
    70da:	5ccb      	ldrb	r3, [r1, r3]
    70dc:	061b      	lsls	r3, r3, #24
    70de:	4313      	orrs	r3, r2
    70e0:	001a      	movs	r2, r3
    70e2:	4b4a      	ldr	r3, [pc, #296]	; (720c <iap_process+0x26c>)
    70e4:	601a      	str	r2, [r3, #0]
											wn += sizeof(DWORD);
    70e6:	230a      	movs	r3, #10
    70e8:	18fb      	adds	r3, r7, r3
    70ea:	220a      	movs	r2, #10
    70ec:	18ba      	adds	r2, r7, r2
    70ee:	8812      	ldrh	r2, [r2, #0]
    70f0:	3204      	adds	r2, #4
    70f2:	801a      	strh	r2, [r3, #0]
											
											memcpy(iap_page,iap_buf+wn,iap_size);		wn += iap_size;
    70f4:	230a      	movs	r3, #10
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	881a      	ldrh	r2, [r3, #0]
    70fa:	4b3d      	ldr	r3, [pc, #244]	; (71f0 <iap_process+0x250>)
    70fc:	18d1      	adds	r1, r2, r3
    70fe:	4b42      	ldr	r3, [pc, #264]	; (7208 <iap_process+0x268>)
    7100:	881b      	ldrh	r3, [r3, #0]
    7102:	001a      	movs	r2, r3
    7104:	4b42      	ldr	r3, [pc, #264]	; (7210 <iap_process+0x270>)
    7106:	0018      	movs	r0, r3
    7108:	4b3a      	ldr	r3, [pc, #232]	; (71f4 <iap_process+0x254>)
    710a:	4798      	blx	r3
    710c:	4b3e      	ldr	r3, [pc, #248]	; (7208 <iap_process+0x268>)
    710e:	8819      	ldrh	r1, [r3, #0]
    7110:	230a      	movs	r3, #10
    7112:	18fb      	adds	r3, r7, r3
    7114:	220a      	movs	r2, #10
    7116:	18ba      	adds	r2, r7, r2
    7118:	8812      	ldrh	r2, [r2, #0]
    711a:	188a      	adds	r2, r1, r2
    711c:	801a      	strh	r2, [r3, #0]
											
											flwr=1;
    711e:	4b3d      	ldr	r3, [pc, #244]	; (7214 <iap_process+0x274>)
    7120:	2201      	movs	r2, #1
    7122:	701a      	strb	r2, [r3, #0]
	
	break;
    7124:	e051      	b.n	71ca <iap_process+0x22a>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    7126:	4b39      	ldr	r3, [pc, #228]	; (720c <iap_process+0x26c>)
    7128:	681b      	ldr	r3, [r3, #0]
    712a:	4a3b      	ldr	r2, [pc, #236]	; (7218 <iap_process+0x278>)
    712c:	4293      	cmp	r3, r2
    712e:	d958      	bls.n	71e2 <iap_process+0x242>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    7130:	4b36      	ldr	r3, [pc, #216]	; (720c <iap_process+0x26c>)
    7132:	681a      	ldr	r2, [r3, #0]
    7134:	23c0      	movs	r3, #192	; 0xc0
    7136:	025b      	lsls	r3, r3, #9
    7138:	429a      	cmp	r2, r3
    713a:	d854      	bhi.n	71e6 <iap_process+0x246>
											
											if(flwr)
    713c:	4b35      	ldr	r3, [pc, #212]	; (7214 <iap_process+0x274>)
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	2b00      	cmp	r3, #0
    7142:	d00d      	beq.n	7160 <iap_process+0x1c0>
											{
												flash_write(iap_addr+IAP_SIZE,iap_page,iap_size);
    7144:	4b31      	ldr	r3, [pc, #196]	; (720c <iap_process+0x26c>)
    7146:	681b      	ldr	r3, [r3, #0]
    7148:	22a0      	movs	r2, #160	; 0xa0
    714a:	0252      	lsls	r2, r2, #9
    714c:	1898      	adds	r0, r3, r2
    714e:	4b2e      	ldr	r3, [pc, #184]	; (7208 <iap_process+0x268>)
    7150:	881a      	ldrh	r2, [r3, #0]
    7152:	4b2f      	ldr	r3, [pc, #188]	; (7210 <iap_process+0x270>)
    7154:	0019      	movs	r1, r3
    7156:	4b31      	ldr	r3, [pc, #196]	; (721c <iap_process+0x27c>)
    7158:	4798      	blx	r3
												flwr=0;
    715a:	4b2e      	ldr	r3, [pc, #184]	; (7214 <iap_process+0x274>)
    715c:	2200      	movs	r2, #0
    715e:	701a      	strb	r2, [r3, #0]
											}
											iap_buf[wn] = CM2_A_DATA_PAGE_UPDATE;		wn += sizeof(BYTE );
    7160:	230a      	movs	r3, #10
    7162:	18fb      	adds	r3, r7, r3
    7164:	881b      	ldrh	r3, [r3, #0]
    7166:	4a22      	ldr	r2, [pc, #136]	; (71f0 <iap_process+0x250>)
    7168:	2106      	movs	r1, #6
    716a:	54d1      	strb	r1, [r2, r3]
    716c:	230a      	movs	r3, #10
    716e:	18fb      	adds	r3, r7, r3
    7170:	220a      	movs	r2, #10
    7172:	18ba      	adds	r2, r7, r2
    7174:	8812      	ldrh	r2, [r2, #0]
    7176:	3201      	adds	r2, #1
    7178:	801a      	strh	r2, [r3, #0]
	break;
    717a:	e026      	b.n	71ca <iap_process+0x22a>
	case CM2_R_STOP_BOOTLOADER  :  			iap_key = IAP_VAL;
    717c:	4b28      	ldr	r3, [pc, #160]	; (7220 <iap_process+0x280>)
    717e:	4a29      	ldr	r2, [pc, #164]	; (7224 <iap_process+0x284>)
    7180:	601a      	str	r2, [r3, #0]
											if(!flash_empty(IAP_KEY,256)){flash_erase_page(IAP_KEY);}
    7182:	2380      	movs	r3, #128	; 0x80
    7184:	005b      	lsls	r3, r3, #1
    7186:	4a28      	ldr	r2, [pc, #160]	; (7228 <iap_process+0x288>)
    7188:	0019      	movs	r1, r3
    718a:	0010      	movs	r0, r2
    718c:	4b1b      	ldr	r3, [pc, #108]	; (71fc <iap_process+0x25c>)
    718e:	4798      	blx	r3
    7190:	1e03      	subs	r3, r0, #0
    7192:	d103      	bne.n	719c <iap_process+0x1fc>
    7194:	4b24      	ldr	r3, [pc, #144]	; (7228 <iap_process+0x288>)
    7196:	0018      	movs	r0, r3
    7198:	4b19      	ldr	r3, [pc, #100]	; (7200 <iap_process+0x260>)
    719a:	4798      	blx	r3
											flash_write(IAP_KEY,&iap_key,4);
    719c:	4b20      	ldr	r3, [pc, #128]	; (7220 <iap_process+0x280>)
    719e:	4822      	ldr	r0, [pc, #136]	; (7228 <iap_process+0x288>)
    71a0:	2204      	movs	r2, #4
    71a2:	0019      	movs	r1, r3
    71a4:	4b1d      	ldr	r3, [pc, #116]	; (721c <iap_process+0x27c>)
    71a6:	4798      	blx	r3
											
											iap_buf[wn] = CM2_A_BOOTLOADER_STOP;		wn += sizeof(BYTE );
    71a8:	230a      	movs	r3, #10
    71aa:	18fb      	adds	r3, r7, r3
    71ac:	881b      	ldrh	r3, [r3, #0]
    71ae:	4a10      	ldr	r2, [pc, #64]	; (71f0 <iap_process+0x250>)
    71b0:	2108      	movs	r1, #8
    71b2:	54d1      	strb	r1, [r2, r3]
    71b4:	230a      	movs	r3, #10
    71b6:	18fb      	adds	r3, r7, r3
    71b8:	220a      	movs	r2, #10
    71ba:	18ba      	adds	r2, r7, r2
    71bc:	8812      	ldrh	r2, [r2, #0]
    71be:	3201      	adds	r2, #1
    71c0:	801a      	strh	r2, [r3, #0]
											reset = TRUE;
    71c2:	4b1a      	ldr	r3, [pc, #104]	; (722c <iap_process+0x28c>)
    71c4:	2201      	movs	r2, #1
    71c6:	801a      	strh	r2, [r3, #0]
	break;
    71c8:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(buf,iap_buf,wn);
    71ca:	230a      	movs	r3, #10
    71cc:	18fb      	adds	r3, r7, r3
    71ce:	881a      	ldrh	r2, [r3, #0]
    71d0:	4907      	ldr	r1, [pc, #28]	; (71f0 <iap_process+0x250>)
    71d2:	687b      	ldr	r3, [r7, #4]
    71d4:	0018      	movs	r0, r3
    71d6:	4b07      	ldr	r3, [pc, #28]	; (71f4 <iap_process+0x254>)
    71d8:	4798      	blx	r3
	return	(wn);
    71da:	230a      	movs	r3, #10
    71dc:	18fb      	adds	r3, r7, r3
    71de:	881b      	ldrh	r3, [r3, #0]
    71e0:	e002      	b.n	71e8 <iap_process+0x248>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	e000      	b.n	71e8 <iap_process+0x248>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    71e6:	46c0      	nop			; (mov r8, r8)
}
    71e8:	0018      	movs	r0, r3
    71ea:	46bd      	mov	sp, r7
    71ec:	b004      	add	sp, #16
    71ee:	bd80      	pop	{r7, pc}
    71f0:	20002448 	.word	0x20002448
    71f4:	0000c825 	.word	0x0000c825
    71f8:	40001000 	.word	0x40001000
    71fc:	000066e9 	.word	0x000066e9
    7200:	0000672f 	.word	0x0000672f
    7204:	0002bfff 	.word	0x0002bfff
    7208:	20000460 	.word	0x20000460
    720c:	2000045c 	.word	0x2000045c
    7210:	20002348 	.word	0x20002348
    7214:	20000468 	.word	0x20000468
    7218:	00003fff 	.word	0x00003fff
    721c:	0000677d 	.word	0x0000677d
    7220:	20000464 	.word	0x20000464
    7224:	43ff56ac 	.word	0x43ff56ac
    7228:	0003f200 	.word	0x0003f200
    722c:	20002548 	.word	0x20002548

00007230 <main>:
WORD reset;
ACCOUNTS accnts;
DWORD crc_fw;
BYTE deb = 0;
int main(void)
{
    7230:	b5b0      	push	{r4, r5, r7, lr}
    7232:	af00      	add	r7, sp, #0
	SCB->VTOR=0x00004000;
    7234:	4b48      	ldr	r3, [pc, #288]	; (7358 <main+0x128>)
    7236:	2280      	movs	r2, #128	; 0x80
    7238:	01d2      	lsls	r2, r2, #7
    723a:	609a      	str	r2, [r3, #8]
	
	if (PROC_HERZ == (8 * 1000000))	{sys_clock_init_USE_OSC8M();}   //8MHz
	else							{sys_clock_init_USE_DFLL48M();}	//48MHz
    723c:	4b47      	ldr	r3, [pc, #284]	; (735c <main+0x12c>)
    723e:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    7240:	b662      	cpsie	i
		
	__enable_irq();
	wdt_reset();
    7242:	4b47      	ldr	r3, [pc, #284]	; (7360 <main+0x130>)
    7244:	799b      	ldrb	r3, [r3, #6]
    7246:	07db      	lsls	r3, r3, #31
    7248:	0fdb      	lsrs	r3, r3, #31
    724a:	b2db      	uxtb	r3, r3
    724c:	2b01      	cmp	r3, #1
    724e:	d107      	bne.n	7260 <main+0x30>
    7250:	4a43      	ldr	r2, [pc, #268]	; (7360 <main+0x130>)
    7252:	7993      	ldrb	r3, [r2, #6]
    7254:	2101      	movs	r1, #1
    7256:	430b      	orrs	r3, r1
    7258:	7193      	strb	r3, [r2, #6]
    725a:	4b41      	ldr	r3, [pc, #260]	; (7360 <main+0x130>)
    725c:	22a5      	movs	r2, #165	; 0xa5
    725e:	721a      	strb	r2, [r3, #8]
	wdt_start();	
    7260:	4b3f      	ldr	r3, [pc, #252]	; (7360 <main+0x130>)
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	079b      	lsls	r3, r3, #30
    7266:	0fdb      	lsrs	r3, r3, #31
    7268:	b2db      	uxtb	r3, r3
    726a:	2b00      	cmp	r3, #0
    726c:	d119      	bne.n	72a2 <main+0x72>
    726e:	4a3c      	ldr	r2, [pc, #240]	; (7360 <main+0x130>)
    7270:	7853      	ldrb	r3, [r2, #1]
    7272:	210f      	movs	r1, #15
    7274:	438b      	bics	r3, r1
    7276:	1c19      	adds	r1, r3, #0
    7278:	230b      	movs	r3, #11
    727a:	430b      	orrs	r3, r1
    727c:	7053      	strb	r3, [r2, #1]
    727e:	4a38      	ldr	r2, [pc, #224]	; (7360 <main+0x130>)
    7280:	7893      	ldrb	r3, [r2, #2]
    7282:	210f      	movs	r1, #15
    7284:	438b      	bics	r3, r1
    7286:	1c19      	adds	r1, r3, #0
    7288:	230a      	movs	r3, #10
    728a:	430b      	orrs	r3, r1
    728c:	7093      	strb	r3, [r2, #2]
    728e:	4a34      	ldr	r2, [pc, #208]	; (7360 <main+0x130>)
    7290:	7953      	ldrb	r3, [r2, #5]
    7292:	2101      	movs	r1, #1
    7294:	430b      	orrs	r3, r1
    7296:	7153      	strb	r3, [r2, #5]
    7298:	4a31      	ldr	r2, [pc, #196]	; (7360 <main+0x130>)
    729a:	7813      	ldrb	r3, [r2, #0]
    729c:	2102      	movs	r1, #2
    729e:	430b      	orrs	r3, r1
    72a0:	7013      	strb	r3, [r2, #0]
			
	cfg_init  ();
    72a2:	4b30      	ldr	r3, [pc, #192]	; (7364 <main+0x134>)
    72a4:	4798      	blx	r3
	if(cfg_2_read() == CFG_ERR) {cfg_2_err = CFG_ERR; err_dword.cfg_2_init = 1; }
    72a6:	4b30      	ldr	r3, [pc, #192]	; (7368 <main+0x138>)
    72a8:	4798      	blx	r3
    72aa:	1e03      	subs	r3, r0, #0
    72ac:	d107      	bne.n	72be <main+0x8e>
    72ae:	4b2f      	ldr	r3, [pc, #188]	; (736c <main+0x13c>)
    72b0:	2200      	movs	r2, #0
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	4b2e      	ldr	r3, [pc, #184]	; (7370 <main+0x140>)
    72b6:	781a      	ldrb	r2, [r3, #0]
    72b8:	2102      	movs	r1, #2
    72ba:	430a      	orrs	r2, r1
    72bc:	701a      	strb	r2, [r3, #0]
	if(cfg_read()   == CFG_ERR)	{err_dword.cfg_2_init = 1; cfg_default();}
    72be:	4b2d      	ldr	r3, [pc, #180]	; (7374 <main+0x144>)
    72c0:	4798      	blx	r3
    72c2:	1e03      	subs	r3, r0, #0
    72c4:	d106      	bne.n	72d4 <main+0xa4>
    72c6:	4b2a      	ldr	r3, [pc, #168]	; (7370 <main+0x140>)
    72c8:	781a      	ldrb	r2, [r3, #0]
    72ca:	2102      	movs	r1, #2
    72cc:	430a      	orrs	r2, r1
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	4b29      	ldr	r3, [pc, #164]	; (7378 <main+0x148>)
    72d2:	4798      	blx	r3
	cfg_check();
    72d4:	4b29      	ldr	r3, [pc, #164]	; (737c <main+0x14c>)
    72d6:	4798      	blx	r3

	gpio_init();
    72d8:	4b29      	ldr	r3, [pc, #164]	; (7380 <main+0x150>)
    72da:	4798      	blx	r3
	TC3_init();
    72dc:	4b29      	ldr	r3, [pc, #164]	; (7384 <main+0x154>)
    72de:	4798      	blx	r3
	spi_init();
    72e0:	4b29      	ldr	r3, [pc, #164]	; (7388 <main+0x158>)
    72e2:	4798      	blx	r3
	usart_init();
    72e4:	4b29      	ldr	r3, [pc, #164]	; (738c <main+0x15c>)
    72e6:	4798      	blx	r3
	eth_init();
    72e8:	4b29      	ldr	r3, [pc, #164]	; (7390 <main+0x160>)
    72ea:	4798      	blx	r3
	
	acc(READ);
    72ec:	2000      	movs	r0, #0
    72ee:	4b29      	ldr	r3, [pc, #164]	; (7394 <main+0x164>)
    72f0:	4798      	blx	r3
	log_ch();
    72f2:	4b29      	ldr	r3, [pc, #164]	; (7398 <main+0x168>)
    72f4:	4798      	blx	r3
	log_safe(0, 0x00000000, 0x00000000, START);
    72f6:	2304      	movs	r3, #4
    72f8:	2200      	movs	r2, #0
    72fa:	2100      	movs	r1, #0
    72fc:	2000      	movs	r0, #0
    72fe:	4c27      	ldr	r4, [pc, #156]	; (739c <main+0x16c>)
    7300:	47a0      	blx	r4
	
	crc_fw = crc32(0x00004000, 0x00014000);
    7302:	23a0      	movs	r3, #160	; 0xa0
    7304:	025a      	lsls	r2, r3, #9
    7306:	2380      	movs	r3, #128	; 0x80
    7308:	01db      	lsls	r3, r3, #7
    730a:	0011      	movs	r1, r2
    730c:	0018      	movs	r0, r3
    730e:	4b24      	ldr	r3, [pc, #144]	; (73a0 <main+0x170>)
    7310:	4798      	blx	r3
    7312:	0003      	movs	r3, r0
    7314:	001a      	movs	r2, r3
    7316:	4b23      	ldr	r3, [pc, #140]	; (73a4 <main+0x174>)
    7318:	601a      	str	r2, [r3, #0]
	
	led_init();
    731a:	2201      	movs	r2, #1
    731c:	2100      	movs	r1, #0
    731e:	2001      	movs	r0, #1
    7320:	4b21      	ldr	r3, [pc, #132]	; (73a8 <main+0x178>)
    7322:	4798      	blx	r3
	if (sizeof(CFG_1) != 0x100 ) { warning_led(1); DWORD ERR1 = sizeof(CFG_1);}
	if (sizeof(CFG_2) != 0x100 ) { warning_led(2); DWORD ERR2 = sizeof(CFG_2);}
/*DEBUG*/				
	while (1)
	{
	    if(reset == NULL)
    7324:	4b21      	ldr	r3, [pc, #132]	; (73ac <main+0x17c>)
    7326:	881b      	ldrh	r3, [r3, #0]
    7328:	2b00      	cmp	r3, #0
    732a:	d10e      	bne.n	734a <main+0x11a>
		 {wdt_reset();}//wdt-drop timer
    732c:	4b0c      	ldr	r3, [pc, #48]	; (7360 <main+0x130>)
    732e:	799b      	ldrb	r3, [r3, #6]
    7330:	07db      	lsls	r3, r3, #31
    7332:	0fdb      	lsrs	r3, r3, #31
    7334:	b2db      	uxtb	r3, r3
    7336:	2b01      	cmp	r3, #1
    7338:	d107      	bne.n	734a <main+0x11a>
    733a:	4a09      	ldr	r2, [pc, #36]	; (7360 <main+0x130>)
    733c:	7993      	ldrb	r3, [r2, #6]
    733e:	2101      	movs	r1, #1
    7340:	430b      	orrs	r3, r1
    7342:	7193      	strb	r3, [r2, #6]
    7344:	4b06      	ldr	r3, [pc, #24]	; (7360 <main+0x130>)
    7346:	22a5      	movs	r2, #165	; 0xa5
    7348:	721a      	strb	r2, [r3, #8]
		eth_process();
    734a:	4b19      	ldr	r3, [pc, #100]	; (73b0 <main+0x180>)
    734c:	4798      	blx	r3
		cmd_process();
    734e:	4b19      	ldr	r3, [pc, #100]	; (73b4 <main+0x184>)
    7350:	4798      	blx	r3
		tc3_process();
    7352:	4b19      	ldr	r3, [pc, #100]	; (73b8 <main+0x188>)
    7354:	4798      	blx	r3
	    if(reset == NULL)
    7356:	e7e5      	b.n	7324 <main+0xf4>
    7358:	e000ed00 	.word	0xe000ed00
    735c:	00007dc9 	.word	0x00007dc9
    7360:	40001000 	.word	0x40001000
    7364:	0000ab09 	.word	0x0000ab09
    7368:	0000ab9d 	.word	0x0000ab9d
    736c:	20000002 	.word	0x20000002
    7370:	20002550 	.word	0x20002550
    7374:	0000ab3d 	.word	0x0000ab3d
    7378:	0000abfd 	.word	0x0000abfd
    737c:	0000af21 	.word	0x0000af21
    7380:	00006a6d 	.word	0x00006a6d
    7384:	000080d5 	.word	0x000080d5
    7388:	000076d1 	.word	0x000076d1
    738c:	00008645 	.word	0x00008645
    7390:	00006265 	.word	0x00006265
    7394:	00004215 	.word	0x00004215
    7398:	000044c9 	.word	0x000044c9
    739c:	0000455d 	.word	0x0000455d
    73a0:	00005ec1 	.word	0x00005ec1
    73a4:	2000254c 	.word	0x2000254c
    73a8:	00006d81 	.word	0x00006d81
    73ac:	20002548 	.word	0x20002548
    73b0:	00006379 	.word	0x00006379
    73b4:	000049b9 	.word	0x000049b9
    73b8:	00008229 	.word	0x00008229

000073bc <socket_init>:




BYTE socket_init (BYTE numb, WORD src_port, BYTE mode)
{
    73bc:	b590      	push	{r4, r7, lr}
    73be:	b085      	sub	sp, #20
    73c0:	af00      	add	r7, sp, #0
    73c2:	0004      	movs	r4, r0
    73c4:	0008      	movs	r0, r1
    73c6:	0011      	movs	r1, r2
    73c8:	1dfb      	adds	r3, r7, #7
    73ca:	1c22      	adds	r2, r4, #0
    73cc:	701a      	strb	r2, [r3, #0]
    73ce:	1d3b      	adds	r3, r7, #4
    73d0:	1c02      	adds	r2, r0, #0
    73d2:	801a      	strh	r2, [r3, #0]
    73d4:	1dbb      	adds	r3, r7, #6
    73d6:	1c0a      	adds	r2, r1, #0
    73d8:	701a      	strb	r2, [r3, #0]
	BYTE buf[2];
	
	//mode
	if(mode==UDP){buf[0]=SR_00_P2;}
    73da:	1dbb      	adds	r3, r7, #6
    73dc:	781b      	ldrb	r3, [r3, #0]
    73de:	2b01      	cmp	r3, #1
    73e0:	d103      	bne.n	73ea <socket_init+0x2e>
    73e2:	230c      	movs	r3, #12
    73e4:	18fb      	adds	r3, r7, r3
    73e6:	2202      	movs	r2, #2
    73e8:	701a      	strb	r2, [r3, #0]
	if(mode==TCP){buf[0]=SR_00_P1;}	
    73ea:	1dbb      	adds	r3, r7, #6
    73ec:	781b      	ldrb	r3, [r3, #0]
    73ee:	2b02      	cmp	r3, #2
    73f0:	d103      	bne.n	73fa <socket_init+0x3e>
    73f2:	230c      	movs	r3, #12
    73f4:	18fb      	adds	r3, r7, r3
    73f6:	2201      	movs	r2, #1
    73f8:	701a      	strb	r2, [r3, #0]
		
	spi_write_timeout(ADDR_SOC_MODE,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    73fa:	4b5f      	ldr	r3, [pc, #380]	; (7578 <socket_init+0x1bc>)
    73fc:	220a      	movs	r2, #10
    73fe:	801a      	strh	r2, [r3, #0]
    7400:	e006      	b.n	7410 <socket_init+0x54>
    7402:	4b5d      	ldr	r3, [pc, #372]	; (7578 <socket_init+0x1bc>)
    7404:	881b      	ldrh	r3, [r3, #0]
    7406:	b29b      	uxth	r3, r3
    7408:	2b00      	cmp	r3, #0
    740a:	d101      	bne.n	7410 <socket_init+0x54>
    740c:	2301      	movs	r3, #1
    740e:	e0af      	b.n	7570 <socket_init+0x1b4>
    7410:	1dfb      	adds	r3, r7, #7
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	015b      	lsls	r3, r3, #5
    7416:	b25b      	sxtb	r3, r3
    7418:	2208      	movs	r2, #8
    741a:	4313      	orrs	r3, r2
    741c:	b25b      	sxtb	r3, r3
    741e:	b2d9      	uxtb	r1, r3
    7420:	230c      	movs	r3, #12
    7422:	18fa      	adds	r2, r7, r3
    7424:	2301      	movs	r3, #1
    7426:	2000      	movs	r0, #0
    7428:	4c54      	ldr	r4, [pc, #336]	; (757c <socket_init+0x1c0>)
    742a:	47a0      	blx	r4
    742c:	1e03      	subs	r3, r0, #0
    742e:	d0e8      	beq.n	7402 <socket_init+0x46>
	
	//src_port
	buf[0]=((src_port & 0xFF00)>>8);
    7430:	1d3b      	adds	r3, r7, #4
    7432:	881b      	ldrh	r3, [r3, #0]
    7434:	0a1b      	lsrs	r3, r3, #8
    7436:	b29b      	uxth	r3, r3
    7438:	b2da      	uxtb	r2, r3
    743a:	230c      	movs	r3, #12
    743c:	18fb      	adds	r3, r7, r3
    743e:	701a      	strb	r2, [r3, #0]
	buf[1]=( src_port & 0x00FF);
    7440:	1d3b      	adds	r3, r7, #4
    7442:	881b      	ldrh	r3, [r3, #0]
    7444:	b2da      	uxtb	r2, r3
    7446:	230c      	movs	r3, #12
    7448:	18fb      	adds	r3, r7, r3
    744a:	705a      	strb	r2, [r3, #1]
	spi_write_timeout(ADDR_SOC_SRC_PORT0,(SOCKET_REGISTER | SOCKET(numb)),buf,2,10);
    744c:	4b4a      	ldr	r3, [pc, #296]	; (7578 <socket_init+0x1bc>)
    744e:	220a      	movs	r2, #10
    7450:	801a      	strh	r2, [r3, #0]
    7452:	e006      	b.n	7462 <socket_init+0xa6>
    7454:	4b48      	ldr	r3, [pc, #288]	; (7578 <socket_init+0x1bc>)
    7456:	881b      	ldrh	r3, [r3, #0]
    7458:	b29b      	uxth	r3, r3
    745a:	2b00      	cmp	r3, #0
    745c:	d101      	bne.n	7462 <socket_init+0xa6>
    745e:	2301      	movs	r3, #1
    7460:	e086      	b.n	7570 <socket_init+0x1b4>
    7462:	1dfb      	adds	r3, r7, #7
    7464:	781b      	ldrb	r3, [r3, #0]
    7466:	015b      	lsls	r3, r3, #5
    7468:	b25b      	sxtb	r3, r3
    746a:	2208      	movs	r2, #8
    746c:	4313      	orrs	r3, r2
    746e:	b25b      	sxtb	r3, r3
    7470:	b2d9      	uxtb	r1, r3
    7472:	230c      	movs	r3, #12
    7474:	18fa      	adds	r2, r7, r3
    7476:	2302      	movs	r3, #2
    7478:	2004      	movs	r0, #4
    747a:	4c40      	ldr	r4, [pc, #256]	; (757c <socket_init+0x1c0>)
    747c:	47a0      	blx	r4
    747e:	1e03      	subs	r3, r0, #0
    7480:	d0e8      	beq.n	7454 <socket_init+0x98>
	
	
	//socket_cmd_open
	buf[0]=CMD_OPEN;
    7482:	230c      	movs	r3, #12
    7484:	18fb      	adds	r3, r7, r3
    7486:	2201      	movs	r2, #1
    7488:	701a      	strb	r2, [r3, #0]
	spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    748a:	4b3b      	ldr	r3, [pc, #236]	; (7578 <socket_init+0x1bc>)
    748c:	220a      	movs	r2, #10
    748e:	801a      	strh	r2, [r3, #0]
    7490:	e006      	b.n	74a0 <socket_init+0xe4>
    7492:	4b39      	ldr	r3, [pc, #228]	; (7578 <socket_init+0x1bc>)
    7494:	881b      	ldrh	r3, [r3, #0]
    7496:	b29b      	uxth	r3, r3
    7498:	2b00      	cmp	r3, #0
    749a:	d101      	bne.n	74a0 <socket_init+0xe4>
    749c:	2301      	movs	r3, #1
    749e:	e067      	b.n	7570 <socket_init+0x1b4>
    74a0:	1dfb      	adds	r3, r7, #7
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	015b      	lsls	r3, r3, #5
    74a6:	b25b      	sxtb	r3, r3
    74a8:	2208      	movs	r2, #8
    74aa:	4313      	orrs	r3, r2
    74ac:	b25b      	sxtb	r3, r3
    74ae:	b2d9      	uxtb	r1, r3
    74b0:	230c      	movs	r3, #12
    74b2:	18fa      	adds	r2, r7, r3
    74b4:	2301      	movs	r3, #1
    74b6:	2001      	movs	r0, #1
    74b8:	4c30      	ldr	r4, [pc, #192]	; (757c <socket_init+0x1c0>)
    74ba:	47a0      	blx	r4
    74bc:	1e03      	subs	r3, r0, #0
    74be:	d0e8      	beq.n	7492 <socket_init+0xd6>
	
	if (mode == TCP)
    74c0:	1dbb      	adds	r3, r7, #6
    74c2:	781b      	ldrb	r3, [r3, #0]
    74c4:	2b02      	cmp	r3, #2
    74c6:	d152      	bne.n	756e <socket_init+0x1b2>
	{
		//socket_set_RTR
		buf[0]=0x0F;
    74c8:	230c      	movs	r3, #12
    74ca:	18fb      	adds	r3, r7, r3
    74cc:	220f      	movs	r2, #15
    74ce:	701a      	strb	r2, [r3, #0]
		buf[1]=0xA0;
    74d0:	230c      	movs	r3, #12
    74d2:	18fb      	adds	r3, r7, r3
    74d4:	22a0      	movs	r2, #160	; 0xa0
    74d6:	705a      	strb	r2, [r3, #1]
		spi_write_timeout(ADDR_COM_RETRY_TIME_0,COMMON_REGISTER,buf,2,10);
    74d8:	4b27      	ldr	r3, [pc, #156]	; (7578 <socket_init+0x1bc>)
    74da:	220a      	movs	r2, #10
    74dc:	801a      	strh	r2, [r3, #0]
    74de:	e006      	b.n	74ee <socket_init+0x132>
    74e0:	4b25      	ldr	r3, [pc, #148]	; (7578 <socket_init+0x1bc>)
    74e2:	881b      	ldrh	r3, [r3, #0]
    74e4:	b29b      	uxth	r3, r3
    74e6:	2b00      	cmp	r3, #0
    74e8:	d101      	bne.n	74ee <socket_init+0x132>
    74ea:	2301      	movs	r3, #1
    74ec:	e040      	b.n	7570 <socket_init+0x1b4>
    74ee:	230c      	movs	r3, #12
    74f0:	18fa      	adds	r2, r7, r3
    74f2:	2302      	movs	r3, #2
    74f4:	2100      	movs	r1, #0
    74f6:	2019      	movs	r0, #25
    74f8:	4c20      	ldr	r4, [pc, #128]	; (757c <socket_init+0x1c0>)
    74fa:	47a0      	blx	r4
    74fc:	1e03      	subs	r3, r0, #0
    74fe:	d0ef      	beq.n	74e0 <socket_init+0x124>
		//socket_set_RCR
		buf[0]=0x04;
    7500:	230c      	movs	r3, #12
    7502:	18fb      	adds	r3, r7, r3
    7504:	2204      	movs	r2, #4
    7506:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_COM_RETRY_COUNT,COMMON_REGISTER,buf,1,10);
    7508:	4b1b      	ldr	r3, [pc, #108]	; (7578 <socket_init+0x1bc>)
    750a:	220a      	movs	r2, #10
    750c:	801a      	strh	r2, [r3, #0]
    750e:	e006      	b.n	751e <socket_init+0x162>
    7510:	4b19      	ldr	r3, [pc, #100]	; (7578 <socket_init+0x1bc>)
    7512:	881b      	ldrh	r3, [r3, #0]
    7514:	b29b      	uxth	r3, r3
    7516:	2b00      	cmp	r3, #0
    7518:	d101      	bne.n	751e <socket_init+0x162>
    751a:	2301      	movs	r3, #1
    751c:	e028      	b.n	7570 <socket_init+0x1b4>
    751e:	230c      	movs	r3, #12
    7520:	18fa      	adds	r2, r7, r3
    7522:	2301      	movs	r3, #1
    7524:	2100      	movs	r1, #0
    7526:	201b      	movs	r0, #27
    7528:	4c14      	ldr	r4, [pc, #80]	; (757c <socket_init+0x1c0>)
    752a:	47a0      	blx	r4
    752c:	1e03      	subs	r3, r0, #0
    752e:	d0ef      	beq.n	7510 <socket_init+0x154>
		//socket_cmd_listen
		buf[0]=CMD_LISTEN;
    7530:	230c      	movs	r3, #12
    7532:	18fb      	adds	r3, r7, r3
    7534:	2202      	movs	r2, #2
    7536:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    7538:	4b0f      	ldr	r3, [pc, #60]	; (7578 <socket_init+0x1bc>)
    753a:	220a      	movs	r2, #10
    753c:	801a      	strh	r2, [r3, #0]
    753e:	e006      	b.n	754e <socket_init+0x192>
    7540:	4b0d      	ldr	r3, [pc, #52]	; (7578 <socket_init+0x1bc>)
    7542:	881b      	ldrh	r3, [r3, #0]
    7544:	b29b      	uxth	r3, r3
    7546:	2b00      	cmp	r3, #0
    7548:	d101      	bne.n	754e <socket_init+0x192>
    754a:	2301      	movs	r3, #1
    754c:	e010      	b.n	7570 <socket_init+0x1b4>
    754e:	1dfb      	adds	r3, r7, #7
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	015b      	lsls	r3, r3, #5
    7554:	b25b      	sxtb	r3, r3
    7556:	2208      	movs	r2, #8
    7558:	4313      	orrs	r3, r2
    755a:	b25b      	sxtb	r3, r3
    755c:	b2d9      	uxtb	r1, r3
    755e:	230c      	movs	r3, #12
    7560:	18fa      	adds	r2, r7, r3
    7562:	2301      	movs	r3, #1
    7564:	2001      	movs	r0, #1
    7566:	4c05      	ldr	r4, [pc, #20]	; (757c <socket_init+0x1c0>)
    7568:	47a0      	blx	r4
    756a:	1e03      	subs	r3, r0, #0
    756c:	d0e8      	beq.n	7540 <socket_init+0x184>
	}
		
	return SUCCESS;
    756e:	2300      	movs	r3, #0
	
    7570:	0018      	movs	r0, r3
    7572:	46bd      	mov	sp, r7
    7574:	b005      	add	sp, #20
    7576:	bd90      	pop	{r4, r7, pc}
    7578:	200031f4 	.word	0x200031f4
    757c:	00007955 	.word	0x00007955

00007580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7580:	b580      	push	{r7, lr}
    7582:	b082      	sub	sp, #8
    7584:	af00      	add	r7, sp, #0
    7586:	0002      	movs	r2, r0
    7588:	1dfb      	adds	r3, r7, #7
    758a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    758c:	1dfb      	adds	r3, r7, #7
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	2b7f      	cmp	r3, #127	; 0x7f
    7592:	d809      	bhi.n	75a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7594:	4b06      	ldr	r3, [pc, #24]	; (75b0 <__NVIC_EnableIRQ+0x30>)
    7596:	1dfa      	adds	r2, r7, #7
    7598:	7812      	ldrb	r2, [r2, #0]
    759a:	0011      	movs	r1, r2
    759c:	221f      	movs	r2, #31
    759e:	400a      	ands	r2, r1
    75a0:	2101      	movs	r1, #1
    75a2:	4091      	lsls	r1, r2
    75a4:	000a      	movs	r2, r1
    75a6:	601a      	str	r2, [r3, #0]
  }
}
    75a8:	46c0      	nop			; (mov r8, r8)
    75aa:	46bd      	mov	sp, r7
    75ac:	b002      	add	sp, #8
    75ae:	bd80      	pop	{r7, pc}
    75b0:	e000e100 	.word	0xe000e100

000075b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
    75ba:	0002      	movs	r2, r0
    75bc:	1dfb      	adds	r3, r7, #7
    75be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    75c0:	1dfb      	adds	r3, r7, #7
    75c2:	781b      	ldrb	r3, [r3, #0]
    75c4:	2b7f      	cmp	r3, #127	; 0x7f
    75c6:	d80e      	bhi.n	75e6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    75c8:	4909      	ldr	r1, [pc, #36]	; (75f0 <__NVIC_DisableIRQ+0x3c>)
    75ca:	1dfb      	adds	r3, r7, #7
    75cc:	781b      	ldrb	r3, [r3, #0]
    75ce:	001a      	movs	r2, r3
    75d0:	231f      	movs	r3, #31
    75d2:	4013      	ands	r3, r2
    75d4:	2201      	movs	r2, #1
    75d6:	409a      	lsls	r2, r3
    75d8:	0013      	movs	r3, r2
    75da:	2280      	movs	r2, #128	; 0x80
    75dc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    75de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75e2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	46bd      	mov	sp, r7
    75ea:	b002      	add	sp, #8
    75ec:	bd80      	pop	{r7, pc}
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	e000e100 	.word	0xe000e100

000075f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    75f4:	b5b0      	push	{r4, r5, r7, lr}
    75f6:	b082      	sub	sp, #8
    75f8:	af00      	add	r7, sp, #0
    75fa:	0002      	movs	r2, r0
    75fc:	6039      	str	r1, [r7, #0]
    75fe:	1dfb      	adds	r3, r7, #7
    7600:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7602:	1dfb      	adds	r3, r7, #7
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	2b7f      	cmp	r3, #127	; 0x7f
    7608:	d828      	bhi.n	765c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    760a:	4c2f      	ldr	r4, [pc, #188]	; (76c8 <__NVIC_SetPriority+0xd4>)
    760c:	1dfb      	adds	r3, r7, #7
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	b25b      	sxtb	r3, r3
    7612:	089b      	lsrs	r3, r3, #2
    7614:	492c      	ldr	r1, [pc, #176]	; (76c8 <__NVIC_SetPriority+0xd4>)
    7616:	1dfa      	adds	r2, r7, #7
    7618:	7812      	ldrb	r2, [r2, #0]
    761a:	b252      	sxtb	r2, r2
    761c:	0892      	lsrs	r2, r2, #2
    761e:	32c0      	adds	r2, #192	; 0xc0
    7620:	0092      	lsls	r2, r2, #2
    7622:	5852      	ldr	r2, [r2, r1]
    7624:	1df9      	adds	r1, r7, #7
    7626:	7809      	ldrb	r1, [r1, #0]
    7628:	0008      	movs	r0, r1
    762a:	2103      	movs	r1, #3
    762c:	4001      	ands	r1, r0
    762e:	00c9      	lsls	r1, r1, #3
    7630:	20ff      	movs	r0, #255	; 0xff
    7632:	4088      	lsls	r0, r1
    7634:	0001      	movs	r1, r0
    7636:	43c9      	mvns	r1, r1
    7638:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    763a:	683a      	ldr	r2, [r7, #0]
    763c:	0192      	lsls	r2, r2, #6
    763e:	20ff      	movs	r0, #255	; 0xff
    7640:	4010      	ands	r0, r2
    7642:	1dfa      	adds	r2, r7, #7
    7644:	7812      	ldrb	r2, [r2, #0]
    7646:	0015      	movs	r5, r2
    7648:	2203      	movs	r2, #3
    764a:	402a      	ands	r2, r5
    764c:	00d2      	lsls	r2, r2, #3
    764e:	4090      	lsls	r0, r2
    7650:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7652:	430a      	orrs	r2, r1
    7654:	33c0      	adds	r3, #192	; 0xc0
    7656:	009b      	lsls	r3, r3, #2
    7658:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    765a:	e031      	b.n	76c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    765c:	4c1b      	ldr	r4, [pc, #108]	; (76cc <__NVIC_SetPriority+0xd8>)
    765e:	1dfb      	adds	r3, r7, #7
    7660:	781b      	ldrb	r3, [r3, #0]
    7662:	001a      	movs	r2, r3
    7664:	230f      	movs	r3, #15
    7666:	4013      	ands	r3, r2
    7668:	3b08      	subs	r3, #8
    766a:	0899      	lsrs	r1, r3, #2
    766c:	4a17      	ldr	r2, [pc, #92]	; (76cc <__NVIC_SetPriority+0xd8>)
    766e:	1dfb      	adds	r3, r7, #7
    7670:	781b      	ldrb	r3, [r3, #0]
    7672:	0018      	movs	r0, r3
    7674:	230f      	movs	r3, #15
    7676:	4003      	ands	r3, r0
    7678:	3b08      	subs	r3, #8
    767a:	089b      	lsrs	r3, r3, #2
    767c:	3306      	adds	r3, #6
    767e:	009b      	lsls	r3, r3, #2
    7680:	18d3      	adds	r3, r2, r3
    7682:	3304      	adds	r3, #4
    7684:	681b      	ldr	r3, [r3, #0]
    7686:	1dfa      	adds	r2, r7, #7
    7688:	7812      	ldrb	r2, [r2, #0]
    768a:	0010      	movs	r0, r2
    768c:	2203      	movs	r2, #3
    768e:	4002      	ands	r2, r0
    7690:	00d2      	lsls	r2, r2, #3
    7692:	20ff      	movs	r0, #255	; 0xff
    7694:	4090      	lsls	r0, r2
    7696:	0002      	movs	r2, r0
    7698:	43d2      	mvns	r2, r2
    769a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    769c:	683b      	ldr	r3, [r7, #0]
    769e:	019b      	lsls	r3, r3, #6
    76a0:	20ff      	movs	r0, #255	; 0xff
    76a2:	4018      	ands	r0, r3
    76a4:	1dfb      	adds	r3, r7, #7
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	001d      	movs	r5, r3
    76aa:	2303      	movs	r3, #3
    76ac:	402b      	ands	r3, r5
    76ae:	00db      	lsls	r3, r3, #3
    76b0:	4098      	lsls	r0, r3
    76b2:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    76b4:	431a      	orrs	r2, r3
    76b6:	1d8b      	adds	r3, r1, #6
    76b8:	009b      	lsls	r3, r3, #2
    76ba:	18e3      	adds	r3, r4, r3
    76bc:	3304      	adds	r3, #4
    76be:	601a      	str	r2, [r3, #0]
}
    76c0:	46c0      	nop			; (mov r8, r8)
    76c2:	46bd      	mov	sp, r7
    76c4:	b002      	add	sp, #8
    76c6:	bdb0      	pop	{r4, r5, r7, pc}
    76c8:	e000e100 	.word	0xe000e100
    76cc:	e000ed00 	.word	0xe000ed00

000076d0 <spi_init>:
SPI spi;


void spi_init(void)
//-----------------------------------------------------------------------------
{
    76d0:	b580      	push	{r7, lr}
    76d2:	af00      	add	r7, sp, #0
	PM->APBCMASK.bit.SERCOM5_ =1; // Bit  2    - SERCOM4: SERCOM4 APB Clock Enable (1 - enabled)
    76d4:	4a67      	ldr	r2, [pc, #412]	; (7874 <spi_init+0x1a4>)
    76d6:	6a13      	ldr	r3, [r2, #32]
    76d8:	2180      	movs	r1, #128	; 0x80
    76da:	430b      	orrs	r3, r1
    76dc:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.bit.ID   =GCLK_CLKCTRL_ID_SERCOM5_CORE; // Bits 5:0  - ID: Generic Clock Selection ID (0x18 - SERCOM4_CORE)
    76de:	4a66      	ldr	r2, [pc, #408]	; (7878 <spi_init+0x1a8>)
    76e0:	8853      	ldrh	r3, [r2, #2]
    76e2:	213f      	movs	r1, #63	; 0x3f
    76e4:	438b      	bics	r3, r1
    76e6:	1c19      	adds	r1, r3, #0
    76e8:	2319      	movs	r3, #25
    76ea:	430b      	orrs	r3, r1
    76ec:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    76ee:	4a62      	ldr	r2, [pc, #392]	; (7878 <spi_init+0x1a8>)
    76f0:	8853      	ldrh	r3, [r2, #2]
    76f2:	4962      	ldr	r1, [pc, #392]	; (787c <spi_init+0x1ac>)
    76f4:	400b      	ands	r3, r1
    76f6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    76f8:	4a5f      	ldr	r2, [pc, #380]	; (7878 <spi_init+0x1a8>)
    76fa:	8853      	ldrh	r3, [r2, #2]
    76fc:	2180      	movs	r1, #128	; 0x80
    76fe:	01c9      	lsls	r1, r1, #7
    7700:	430b      	orrs	r3, r1
    7702:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	if(SERCOM5->SPI.SYNCBUSY.bit.SWRST)   // Bit 0 - SWRST: Software Reset Synchronization Busy
    7704:	4b5e      	ldr	r3, [pc, #376]	; (7880 <spi_init+0x1b0>)
    7706:	69db      	ldr	r3, [r3, #28]
    7708:	07db      	lsls	r3, r3, #31
    770a:	0fdb      	lsrs	r3, r3, #31
    770c:	b2db      	uxtb	r3, r3
    770e:	2b00      	cmp	r3, #0
    7710:	d01b      	beq.n	774a <spi_init+0x7a>
	{
		if(SERCOM5->SPI.CTRLA.bit.ENABLE)   // Bit 1 - ENABLE: Enable
    7712:	4b5b      	ldr	r3, [pc, #364]	; (7880 <spi_init+0x1b0>)
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	079b      	lsls	r3, r3, #30
    7718:	0fdb      	lsrs	r3, r3, #31
    771a:	b2db      	uxtb	r3, r3
    771c:	2b00      	cmp	r3, #0
    771e:	d014      	beq.n	774a <spi_init+0x7a>
		{
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    7720:	46c0      	nop			; (mov r8, r8)
    7722:	4b57      	ldr	r3, [pc, #348]	; (7880 <spi_init+0x1b0>)
    7724:	69db      	ldr	r3, [r3, #28]
    7726:	079b      	lsls	r3, r3, #30
    7728:	0fdb      	lsrs	r3, r3, #31
    772a:	b2db      	uxtb	r3, r3
    772c:	2b00      	cmp	r3, #0
    772e:	d1f8      	bne.n	7722 <spi_init+0x52>
			SERCOM5->SPI.CTRLA.bit.ENABLE=0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    7730:	4a53      	ldr	r2, [pc, #332]	; (7880 <spi_init+0x1b0>)
    7732:	6813      	ldr	r3, [r2, #0]
    7734:	2102      	movs	r1, #2
    7736:	438b      	bics	r3, r1
    7738:	6013      	str	r3, [r2, #0]
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	4b50      	ldr	r3, [pc, #320]	; (7880 <spi_init+0x1b0>)
    773e:	69db      	ldr	r3, [r3, #28]
    7740:	079b      	lsls	r3, r3, #30
    7742:	0fdb      	lsrs	r3, r3, #31
    7744:	b2db      	uxtb	r3, r3
    7746:	2b00      	cmp	r3, #0
    7748:	d1f8      	bne.n	773c <spi_init+0x6c>
		}
	}

	//.............................................................................

	SERCOM5->SPI.CTRLA.bit.SWRST   =0x01; // Bit  0     - SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    774a:	4a4d      	ldr	r2, [pc, #308]	; (7880 <spi_init+0x1b0>)
    774c:	6813      	ldr	r3, [r2, #0]
    774e:	2101      	movs	r1, #1
    7750:	430b      	orrs	r3, r1
    7752:	6013      	str	r3, [r2, #0]
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    7754:	46c0      	nop			; (mov r8, r8)
    7756:	4b4a      	ldr	r3, [pc, #296]	; (7880 <spi_init+0x1b0>)
    7758:	69db      	ldr	r3, [r3, #28]
    775a:	07db      	lsls	r3, r3, #31
    775c:	0fdb      	lsrs	r3, r3, #31
    775e:	b2db      	uxtb	r3, r3
    7760:	2b00      	cmp	r3, #0
    7762:	d1f8      	bne.n	7756 <spi_init+0x86>

	SERCOM5->SPI.CTRLA.bit.DORD    =0x00; // Bit  30    - DORD: Data Order (0: MSB is transferred first)
    7764:	4a46      	ldr	r2, [pc, #280]	; (7880 <spi_init+0x1b0>)
    7766:	6813      	ldr	r3, [r2, #0]
    7768:	4946      	ldr	r1, [pc, #280]	; (7884 <spi_init+0x1b4>)
    776a:	400b      	ands	r3, r1
    776c:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL    =0x00; // Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    776e:	4a44      	ldr	r2, [pc, #272]	; (7880 <spi_init+0x1b0>)
    7770:	6813      	ldr	r3, [r2, #0]
    7772:	4945      	ldr	r1, [pc, #276]	; (7888 <spi_init+0x1b8>)
    7774:	400b      	ands	r3, r1
    7776:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPHA    =0x00; // Bit  28    - CPHA: Clock Phase (0: The data is sampled on a leading SCK edge and changed on a trailing SCK edge)
    7778:	4a41      	ldr	r2, [pc, #260]	; (7880 <spi_init+0x1b0>)
    777a:	6813      	ldr	r3, [r2, #0]
    777c:	4943      	ldr	r1, [pc, #268]	; (788c <spi_init+0x1bc>)
    777e:	400b      	ands	r3, r1
    7780:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.FORM    =0x00; // Bits 27:24 - FORM: Frame Format (0: SPI frame)
    7782:	4a3f      	ldr	r2, [pc, #252]	; (7880 <spi_init+0x1b0>)
    7784:	6813      	ldr	r3, [r2, #0]
    7786:	4942      	ldr	r1, [pc, #264]	; (7890 <spi_init+0x1c0>)
    7788:	400b      	ands	r3, r1
    778a:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.IBON    =0x00; // Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    778c:	4a3c      	ldr	r2, [pc, #240]	; (7880 <spi_init+0x1b0>)
    778e:	6813      	ldr	r3, [r2, #0]
    7790:	4940      	ldr	r1, [pc, #256]	; (7894 <spi_init+0x1c4>)
    7792:	400b      	ands	r3, r1
    7794:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.RUNSTDBY=0x00; // Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    7796:	4a3a      	ldr	r2, [pc, #232]	; (7880 <spi_init+0x1b0>)
    7798:	6813      	ldr	r3, [r2, #0]
    779a:	2180      	movs	r1, #128	; 0x80
    779c:	438b      	bics	r3, r1
    779e:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.MODE    =0x03; // Bits 4:2   - MODE: Operating Mode (3: SPI master operation)
    77a0:	4a37      	ldr	r2, [pc, #220]	; (7880 <spi_init+0x1b0>)
    77a2:	6813      	ldr	r3, [r2, #0]
    77a4:	211c      	movs	r1, #28
    77a6:	438b      	bics	r3, r1
    77a8:	210c      	movs	r1, #12
    77aa:	430b      	orrs	r3, r1
    77ac:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    77ae:	46c0      	nop			; (mov r8, r8)
    77b0:	4b33      	ldr	r3, [pc, #204]	; (7880 <spi_init+0x1b0>)
    77b2:	69db      	ldr	r3, [r3, #28]
    77b4:	2207      	movs	r2, #7
    77b6:	4013      	ands	r3, r2
    77b8:	d1fa      	bne.n	77b0 <spi_init+0xe0>
	SERCOM5->SPI.CTRLA.bit.DOPO=0x02;     // Bits 17:16 - DOPO: Data Out Pinout (0: MOSI->PAD[3], SCK->PAD[1])
    77ba:	4a31      	ldr	r2, [pc, #196]	; (7880 <spi_init+0x1b0>)
    77bc:	6813      	ldr	r3, [r2, #0]
    77be:	4936      	ldr	r1, [pc, #216]	; (7898 <spi_init+0x1c8>)
    77c0:	400b      	ands	r3, r1
    77c2:	2180      	movs	r1, #128	; 0x80
    77c4:	0289      	lsls	r1, r1, #10
    77c6:	430b      	orrs	r3, r1
    77c8:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    77ca:	46c0      	nop			; (mov r8, r8)
    77cc:	4b2c      	ldr	r3, [pc, #176]	; (7880 <spi_init+0x1b0>)
    77ce:	69db      	ldr	r3, [r3, #28]
    77d0:	2207      	movs	r2, #7
    77d2:	4013      	ands	r3, r2
    77d4:	d1fa      	bne.n	77cc <spi_init+0xfc>
	SERCOM5->SPI.CTRLA.bit.DIPO=0x00;     // Bits 21:20 - DIPO: Data In Pinout (0: SERCOM PAD[0] is used as data input)
    77d6:	4a2a      	ldr	r2, [pc, #168]	; (7880 <spi_init+0x1b0>)
    77d8:	6813      	ldr	r3, [r2, #0]
    77da:	4930      	ldr	r1, [pc, #192]	; (789c <spi_init+0x1cc>)
    77dc:	400b      	ands	r3, r1
    77de:	6013      	str	r3, [r2, #0]

	SERCOM5->SPI.CTRLB.bit.RXEN   =0x01;  // Bit  17    - RXEN: Receiver Enable (1: The receiver is enabled or it will be enabled when SPI is enabled.)
    77e0:	4a27      	ldr	r2, [pc, #156]	; (7880 <spi_init+0x1b0>)
    77e2:	6853      	ldr	r3, [r2, #4]
    77e4:	2180      	movs	r1, #128	; 0x80
    77e6:	0289      	lsls	r1, r1, #10
    77e8:	430b      	orrs	r3, r1
    77ea:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.MSSEN  =0x00;  // Bit  13    - MSSEN: Master Slave Select Enable (0: Hardware _SS control is disabled)
    77ec:	4a24      	ldr	r2, [pc, #144]	; (7880 <spi_init+0x1b0>)
    77ee:	6853      	ldr	r3, [r2, #4]
    77f0:	492b      	ldr	r1, [pc, #172]	; (78a0 <spi_init+0x1d0>)
    77f2:	400b      	ands	r3, r1
    77f4:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.AMODE  =0x00;  // Bits 15:14 - AMODE: Address Mode (0: ADDRMASK is used as a mask to the ADDR register)
    77f6:	4a22      	ldr	r2, [pc, #136]	; (7880 <spi_init+0x1b0>)
    77f8:	6853      	ldr	r3, [r2, #4]
    77fa:	492a      	ldr	r1, [pc, #168]	; (78a4 <spi_init+0x1d4>)
    77fc:	400b      	ands	r3, r1
    77fe:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.SSDE   =0x00;  // Bit  9     - SSDE: Slave Select Low Detect Enable (0: _SS low detector is disabled.)
    7800:	4a1f      	ldr	r2, [pc, #124]	; (7880 <spi_init+0x1b0>)
    7802:	6853      	ldr	r3, [r2, #4]
    7804:	4928      	ldr	r1, [pc, #160]	; (78a8 <spi_init+0x1d8>)
    7806:	400b      	ands	r3, r1
    7808:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.PLOADEN=0x00;  // Bit 6      – PLOADEN: Slave Data Preload Enable ()
    780a:	4a1d      	ldr	r2, [pc, #116]	; (7880 <spi_init+0x1b0>)
    780c:	6853      	ldr	r3, [r2, #4]
    780e:	2140      	movs	r1, #64	; 0x40
    7810:	438b      	bics	r3, r1
    7812:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.CHSIZE =0x00;  // Bits 2:0   - CHSIZE: Character Size (0: 8 bits)
    7814:	4a1a      	ldr	r2, [pc, #104]	; (7880 <spi_init+0x1b0>)
    7816:	6853      	ldr	r3, [r2, #4]
    7818:	2107      	movs	r1, #7
    781a:	438b      	bics	r3, r1
    781c:	6053      	str	r3, [r2, #4]

	SERCOM5->SPI.BAUD.bit.BAUD        = (float)(PROC_HERZ ) / (2 * (float)(1000000 )) - 1;
    781e:	4b18      	ldr	r3, [pc, #96]	; (7880 <spi_init+0x1b0>)
    7820:	2217      	movs	r2, #23
    7822:	731a      	strb	r2, [r3, #12]
	SERCOM5->SPI.INTENSET.bit.TXC	  = 0x00;
    7824:	4a16      	ldr	r2, [pc, #88]	; (7880 <spi_init+0x1b0>)
    7826:	7d93      	ldrb	r3, [r2, #22]
    7828:	2102      	movs	r1, #2
    782a:	438b      	bics	r3, r1
    782c:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.DRE     = 0x00;
    782e:	4a14      	ldr	r2, [pc, #80]	; (7880 <spi_init+0x1b0>)
    7830:	7d93      	ldrb	r3, [r2, #22]
    7832:	2101      	movs	r1, #1
    7834:	438b      	bics	r3, r1
    7836:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.RXC     = 0x00;	
    7838:	4a11      	ldr	r2, [pc, #68]	; (7880 <spi_init+0x1b0>)
    783a:	7d93      	ldrb	r3, [r2, #22]
    783c:	2104      	movs	r1, #4
    783e:	438b      	bics	r3, r1
    7840:	7593      	strb	r3, [r2, #22]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7842:	46c0      	nop			; (mov r8, r8)
    7844:	4b0e      	ldr	r3, [pc, #56]	; (7880 <spi_init+0x1b0>)
    7846:	69db      	ldr	r3, [r3, #28]
    7848:	2207      	movs	r2, #7
    784a:	4013      	ands	r3, r2
    784c:	d1fa      	bne.n	7844 <spi_init+0x174>
	SERCOM5->SPI.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    784e:	4a0c      	ldr	r2, [pc, #48]	; (7880 <spi_init+0x1b0>)
    7850:	6813      	ldr	r3, [r2, #0]
    7852:	2102      	movs	r1, #2
    7854:	430b      	orrs	r3, r1
    7856:	6013      	str	r3, [r2, #0]

	NVIC_DisableIRQ(SERCOM5_IRQn);
    7858:	200e      	movs	r0, #14
    785a:	f7ff feab 	bl	75b4 <__NVIC_DisableIRQ>
	NVIC_SetPriority(SERCOM5_IRQn, 1);
    785e:	2101      	movs	r1, #1
    7860:	200e      	movs	r0, #14
    7862:	f7ff fec7 	bl	75f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SERCOM5_IRQn);
    7866:	200e      	movs	r0, #14
    7868:	f7ff fe8a 	bl	7580 <__NVIC_EnableIRQ>
}
    786c:	46c0      	nop			; (mov r8, r8)
    786e:	46bd      	mov	sp, r7
    7870:	bd80      	pop	{r7, pc}
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	40000400 	.word	0x40000400
    7878:	40000c00 	.word	0x40000c00
    787c:	fffff0ff 	.word	0xfffff0ff
    7880:	42001c00 	.word	0x42001c00
    7884:	bfffffff 	.word	0xbfffffff
    7888:	dfffffff 	.word	0xdfffffff
    788c:	efffffff 	.word	0xefffffff
    7890:	f0ffffff 	.word	0xf0ffffff
    7894:	fffffeff 	.word	0xfffffeff
    7898:	fffcffff 	.word	0xfffcffff
    789c:	ffcfffff 	.word	0xffcfffff
    78a0:	ffffdfff 	.word	0xffffdfff
    78a4:	ffff3fff 	.word	0xffff3fff
    78a8:	fffffdff 	.word	0xfffffdff

000078ac <spi_process>:


WORD spi_process (uint16_t addr, uint8_t cb, uint8_t *buf, uint16_t len, BYTE cmd)
{
    78ac:	b5b0      	push	{r4, r5, r7, lr}
    78ae:	b086      	sub	sp, #24
    78b0:	af00      	add	r7, sp, #0
    78b2:	0004      	movs	r4, r0
    78b4:	0008      	movs	r0, r1
    78b6:	60ba      	str	r2, [r7, #8]
    78b8:	0019      	movs	r1, r3
    78ba:	230e      	movs	r3, #14
    78bc:	18fb      	adds	r3, r7, r3
    78be:	1c22      	adds	r2, r4, #0
    78c0:	801a      	strh	r2, [r3, #0]
    78c2:	230d      	movs	r3, #13
    78c4:	18fb      	adds	r3, r7, r3
    78c6:	1c02      	adds	r2, r0, #0
    78c8:	701a      	strb	r2, [r3, #0]
    78ca:	1dbb      	adds	r3, r7, #6
    78cc:	1c0a      	adds	r2, r1, #0
    78ce:	801a      	strh	r2, [r3, #0]
	BYTE st_spi=0;
    78d0:	2315      	movs	r3, #21
    78d2:	18fb      	adds	r3, r7, r3
    78d4:	2200      	movs	r2, #0
    78d6:	701a      	strb	r2, [r3, #0]
	WORD rn_wn=0;
    78d8:	2316      	movs	r3, #22
    78da:	18fb      	adds	r3, r7, r3
    78dc:	2200      	movs	r2, #0
    78de:	801a      	strh	r2, [r3, #0]
	
	st_spi = cmd;
    78e0:	2315      	movs	r3, #21
    78e2:	18fb      	adds	r3, r7, r3
    78e4:	2228      	movs	r2, #40	; 0x28
    78e6:	18ba      	adds	r2, r7, r2
    78e8:	7812      	ldrb	r2, [r2, #0]
    78ea:	701a      	strb	r2, [r3, #0]
	switch(st_spi)
    78ec:	2315      	movs	r3, #21
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	2b01      	cmp	r3, #1
    78f4:	d005      	beq.n	7902 <spi_process+0x56>
    78f6:	2b02      	cmp	r3, #2
    78f8:	d014      	beq.n	7924 <spi_process+0x78>
    78fa:	2b00      	cmp	r3, #0
    78fc:	d123      	bne.n	7946 <spi_process+0x9a>
	{
		case 0:
			return (1);
    78fe:	2301      	movs	r3, #1
    7900:	e024      	b.n	794c <spi_process+0xa0>
		break;
		case READ_DATA:
			rn_wn=spi_read(addr,cb,buf,len);
    7902:	2316      	movs	r3, #22
    7904:	18fc      	adds	r4, r7, r3
    7906:	1dbb      	adds	r3, r7, #6
    7908:	881d      	ldrh	r5, [r3, #0]
    790a:	68ba      	ldr	r2, [r7, #8]
    790c:	230d      	movs	r3, #13
    790e:	18fb      	adds	r3, r7, r3
    7910:	7819      	ldrb	r1, [r3, #0]
    7912:	230e      	movs	r3, #14
    7914:	18fb      	adds	r3, r7, r3
    7916:	8818      	ldrh	r0, [r3, #0]
    7918:	002b      	movs	r3, r5
    791a:	f000 f8f7 	bl	7b0c <spi_read>
    791e:	0003      	movs	r3, r0
    7920:	8023      	strh	r3, [r4, #0]
		break;
    7922:	e010      	b.n	7946 <spi_process+0x9a>
		case WRITE_DATA:
			rn_wn=spi_write(addr,cb,buf,len);
    7924:	2316      	movs	r3, #22
    7926:	18fc      	adds	r4, r7, r3
    7928:	1dbb      	adds	r3, r7, #6
    792a:	881d      	ldrh	r5, [r3, #0]
    792c:	68ba      	ldr	r2, [r7, #8]
    792e:	230d      	movs	r3, #13
    7930:	18fb      	adds	r3, r7, r3
    7932:	7819      	ldrb	r1, [r3, #0]
    7934:	230e      	movs	r3, #14
    7936:	18fb      	adds	r3, r7, r3
    7938:	8818      	ldrh	r0, [r3, #0]
    793a:	002b      	movs	r3, r5
    793c:	f000 f80a 	bl	7954 <spi_write>
    7940:	0003      	movs	r3, r0
    7942:	8023      	strh	r3, [r4, #0]
		break;			
    7944:	46c0      	nop			; (mov r8, r8)
	}
	return (rn_wn);
    7946:	2316      	movs	r3, #22
    7948:	18fb      	adds	r3, r7, r3
    794a:	881b      	ldrh	r3, [r3, #0]
}
    794c:	0018      	movs	r0, r3
    794e:	46bd      	mov	sp, r7
    7950:	b006      	add	sp, #24
    7952:	bdb0      	pop	{r4, r5, r7, pc}

00007954 <spi_write>:

WORD spi_write(uint16_t addr, uint8_t cb, uint8_t *tx_buf, uint16_t len)
{
    7954:	b590      	push	{r4, r7, lr}
    7956:	b087      	sub	sp, #28
    7958:	af00      	add	r7, sp, #0
    795a:	0004      	movs	r4, r0
    795c:	0008      	movs	r0, r1
    795e:	60ba      	str	r2, [r7, #8]
    7960:	0019      	movs	r1, r3
    7962:	230e      	movs	r3, #14
    7964:	18fb      	adds	r3, r7, r3
    7966:	1c22      	adds	r2, r4, #0
    7968:	801a      	strh	r2, [r3, #0]
    796a:	230d      	movs	r3, #13
    796c:	18fb      	adds	r3, r7, r3
    796e:	1c02      	adds	r2, r0, #0
    7970:	701a      	strb	r2, [r3, #0]
    7972:	1dbb      	adds	r3, r7, #6
    7974:	1c0a      	adds	r2, r1, #0
    7976:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7978:	2316      	movs	r3, #22
    797a:	18fb      	adds	r3, r7, r3
    797c:	2200      	movs	r2, #0
    797e:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7980:	4b5c      	ldr	r3, [pc, #368]	; (7af4 <spi_write+0x1a0>)
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	2b00      	cmp	r3, #0
    7986:	d003      	beq.n	7990 <spi_write+0x3c>
    7988:	2b01      	cmp	r3, #1
    798a:	d100      	bne.n	798e <spi_write+0x3a>
    798c:	e08b      	b.n	7aa6 <spi_write+0x152>
    798e:	e0ac      	b.n	7aea <spi_write+0x196>
	{
		case 0:
			CS_clr();			
    7990:	23c0      	movs	r3, #192	; 0xc0
    7992:	05db      	lsls	r3, r3, #23
    7994:	2280      	movs	r2, #128	; 0x80
    7996:	0452      	lsls	r2, r2, #17
    7998:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    799a:	2316      	movs	r3, #22
    799c:	18fb      	adds	r3, r7, r3
    799e:	881b      	ldrh	r3, [r3, #0]
    79a0:	220e      	movs	r2, #14
    79a2:	18ba      	adds	r2, r7, r2
    79a4:	8812      	ldrh	r2, [r2, #0]
    79a6:	0a12      	lsrs	r2, r2, #8
    79a8:	b292      	uxth	r2, r2
    79aa:	b2d1      	uxtb	r1, r2
    79ac:	4a52      	ldr	r2, [pc, #328]	; (7af8 <spi_write+0x1a4>)
    79ae:	54d1      	strb	r1, [r2, r3]
    79b0:	2316      	movs	r3, #22
    79b2:	18fb      	adds	r3, r7, r3
    79b4:	881a      	ldrh	r2, [r3, #0]
    79b6:	2316      	movs	r3, #22
    79b8:	18fb      	adds	r3, r7, r3
    79ba:	3201      	adds	r2, #1
    79bc:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    79be:	2316      	movs	r3, #22
    79c0:	18fb      	adds	r3, r7, r3
    79c2:	881b      	ldrh	r3, [r3, #0]
    79c4:	220e      	movs	r2, #14
    79c6:	18ba      	adds	r2, r7, r2
    79c8:	8812      	ldrh	r2, [r2, #0]
    79ca:	b2d1      	uxtb	r1, r2
    79cc:	4a4a      	ldr	r2, [pc, #296]	; (7af8 <spi_write+0x1a4>)
    79ce:	54d1      	strb	r1, [r2, r3]
    79d0:	2316      	movs	r3, #22
    79d2:	18fb      	adds	r3, r7, r3
    79d4:	881a      	ldrh	r2, [r3, #0]
    79d6:	2316      	movs	r3, #22
    79d8:	18fb      	adds	r3, r7, r3
    79da:	3201      	adds	r2, #1
    79dc:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | WRITE_REG | LEN_N_BYTES;		cnt++;
    79de:	2316      	movs	r3, #22
    79e0:	18fb      	adds	r3, r7, r3
    79e2:	881b      	ldrh	r3, [r3, #0]
    79e4:	220d      	movs	r2, #13
    79e6:	18ba      	adds	r2, r7, r2
    79e8:	7812      	ldrb	r2, [r2, #0]
    79ea:	2104      	movs	r1, #4
    79ec:	430a      	orrs	r2, r1
    79ee:	b2d1      	uxtb	r1, r2
    79f0:	4a41      	ldr	r2, [pc, #260]	; (7af8 <spi_write+0x1a4>)
    79f2:	54d1      	strb	r1, [r2, r3]
    79f4:	2316      	movs	r3, #22
    79f6:	18fb      	adds	r3, r7, r3
    79f8:	881a      	ldrh	r2, [r3, #0]
    79fa:	2316      	movs	r3, #22
    79fc:	18fb      	adds	r3, r7, r3
    79fe:	3201      	adds	r2, #1
    7a00:	801a      	strh	r2, [r3, #0]
							
			if((len+cnt)>MAX_SIZE_BUF_SPI)		{len=MAX_SIZE_BUF_SPI-cnt;}
    7a02:	1dbb      	adds	r3, r7, #6
    7a04:	881a      	ldrh	r2, [r3, #0]
    7a06:	2316      	movs	r3, #22
    7a08:	18fb      	adds	r3, r7, r3
    7a0a:	881b      	ldrh	r3, [r3, #0]
    7a0c:	18d2      	adds	r2, r2, r3
    7a0e:	23b9      	movs	r3, #185	; 0xb9
    7a10:	00db      	lsls	r3, r3, #3
    7a12:	429a      	cmp	r2, r3
    7a14:	dd07      	ble.n	7a26 <spi_write+0xd2>
    7a16:	1dbb      	adds	r3, r7, #6
    7a18:	2216      	movs	r2, #22
    7a1a:	18ba      	adds	r2, r7, r2
    7a1c:	8812      	ldrh	r2, [r2, #0]
    7a1e:	21b9      	movs	r1, #185	; 0xb9
    7a20:	00c9      	lsls	r1, r1, #3
    7a22:	1a8a      	subs	r2, r1, r2
    7a24:	801a      	strh	r2, [r3, #0]
			memcpy(&spi.wbuf[cnt],tx_buf,len);  cnt=cnt+len;
    7a26:	2316      	movs	r3, #22
    7a28:	18fb      	adds	r3, r7, r3
    7a2a:	881a      	ldrh	r2, [r3, #0]
    7a2c:	4b32      	ldr	r3, [pc, #200]	; (7af8 <spi_write+0x1a4>)
    7a2e:	18d0      	adds	r0, r2, r3
    7a30:	1dbb      	adds	r3, r7, #6
    7a32:	881a      	ldrh	r2, [r3, #0]
    7a34:	68bb      	ldr	r3, [r7, #8]
    7a36:	0019      	movs	r1, r3
    7a38:	4b30      	ldr	r3, [pc, #192]	; (7afc <spi_write+0x1a8>)
    7a3a:	4798      	blx	r3
    7a3c:	2316      	movs	r3, #22
    7a3e:	18fb      	adds	r3, r7, r3
    7a40:	2216      	movs	r2, #22
    7a42:	18b9      	adds	r1, r7, r2
    7a44:	1dba      	adds	r2, r7, #6
    7a46:	8809      	ldrh	r1, [r1, #0]
    7a48:	8812      	ldrh	r2, [r2, #0]
    7a4a:	188a      	adds	r2, r1, r2
    7a4c:	801a      	strh	r2, [r3, #0]
							
			spi.wx = cnt; 
    7a4e:	4b2a      	ldr	r3, [pc, #168]	; (7af8 <spi_write+0x1a4>)
    7a50:	2216      	movs	r2, #22
    7a52:	18ba      	adds	r2, r7, r2
    7a54:	492a      	ldr	r1, [pc, #168]	; (7b00 <spi_write+0x1ac>)
    7a56:	8812      	ldrh	r2, [r2, #0]
    7a58:	525a      	strh	r2, [r3, r1]
			spi.wn = 0;
    7a5a:	4b27      	ldr	r3, [pc, #156]	; (7af8 <spi_write+0x1a4>)
    7a5c:	4a29      	ldr	r2, [pc, #164]	; (7b04 <spi_write+0x1b0>)
    7a5e:	2100      	movs	r1, #0
    7a60:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7a62:	4a25      	ldr	r2, [pc, #148]	; (7af8 <spi_write+0x1a4>)
    7a64:	23b9      	movs	r3, #185	; 0xb9
    7a66:	011b      	lsls	r3, r3, #4
    7a68:	2100      	movs	r1, #0
    7a6a:	52d1      	strh	r1, [r2, r3]
							
			if(spi.wx>MAX_SIZE_BUF_SPI)			{spi.wx=MAX_SIZE_BUF_SPI;}
    7a6c:	4b22      	ldr	r3, [pc, #136]	; (7af8 <spi_write+0x1a4>)
    7a6e:	4a24      	ldr	r2, [pc, #144]	; (7b00 <spi_write+0x1ac>)
    7a70:	5a9a      	ldrh	r2, [r3, r2]
    7a72:	23b9      	movs	r3, #185	; 0xb9
    7a74:	00db      	lsls	r3, r3, #3
    7a76:	429a      	cmp	r2, r3
    7a78:	d904      	bls.n	7a84 <spi_write+0x130>
    7a7a:	4b1f      	ldr	r3, [pc, #124]	; (7af8 <spi_write+0x1a4>)
    7a7c:	4a20      	ldr	r2, [pc, #128]	; (7b00 <spi_write+0x1ac>)
    7a7e:	21b9      	movs	r1, #185	; 0xb9
    7a80:	00c9      	lsls	r1, r1, #3
    7a82:	5299      	strh	r1, [r3, r2]
			st_read++;
    7a84:	4b1b      	ldr	r3, [pc, #108]	; (7af4 <spi_write+0x1a0>)
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	3301      	adds	r3, #1
    7a8a:	b2da      	uxtb	r2, r3
    7a8c:	4b19      	ldr	r3, [pc, #100]	; (7af4 <spi_write+0x1a0>)
    7a8e:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7a90:	4a1d      	ldr	r2, [pc, #116]	; (7b08 <spi_write+0x1b4>)
    7a92:	7d93      	ldrb	r3, [r2, #22]
    7a94:	2101      	movs	r1, #1
    7a96:	430b      	orrs	r3, r1
    7a98:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;							
    7a9a:	4a1b      	ldr	r2, [pc, #108]	; (7b08 <spi_write+0x1b4>)
    7a9c:	7d93      	ldrb	r3, [r2, #22]
    7a9e:	2104      	movs	r1, #4
    7aa0:	430b      	orrs	r3, r1
    7aa2:	7593      	strb	r3, [r2, #22]
		break;
    7aa4:	e021      	b.n	7aea <spi_write+0x196>
		case 1:	
			if(spi.wx)							{return 0;}
    7aa6:	4b14      	ldr	r3, [pc, #80]	; (7af8 <spi_write+0x1a4>)
    7aa8:	4a15      	ldr	r2, [pc, #84]	; (7b00 <spi_write+0x1ac>)
    7aaa:	5a9b      	ldrh	r3, [r3, r2]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d001      	beq.n	7ab4 <spi_write+0x160>
    7ab0:	2300      	movs	r3, #0
    7ab2:	e01b      	b.n	7aec <spi_write+0x198>
			if(spi.rn!=spi.wn)					{return 0;}
    7ab4:	4a10      	ldr	r2, [pc, #64]	; (7af8 <spi_write+0x1a4>)
    7ab6:	23b9      	movs	r3, #185	; 0xb9
    7ab8:	011b      	lsls	r3, r3, #4
    7aba:	5ad2      	ldrh	r2, [r2, r3]
    7abc:	4b0e      	ldr	r3, [pc, #56]	; (7af8 <spi_write+0x1a4>)
    7abe:	4911      	ldr	r1, [pc, #68]	; (7b04 <spi_write+0x1b0>)
    7ac0:	5a5b      	ldrh	r3, [r3, r1]
    7ac2:	429a      	cmp	r2, r3
    7ac4:	d001      	beq.n	7aca <spi_write+0x176>
    7ac6:	2300      	movs	r3, #0
    7ac8:	e010      	b.n	7aec <spi_write+0x198>
			st_read--;
    7aca:	4b0a      	ldr	r3, [pc, #40]	; (7af4 <spi_write+0x1a0>)
    7acc:	781b      	ldrb	r3, [r3, #0]
    7ace:	3b01      	subs	r3, #1
    7ad0:	b2da      	uxtb	r2, r3
    7ad2:	4b08      	ldr	r3, [pc, #32]	; (7af4 <spi_write+0x1a0>)
    7ad4:	701a      	strb	r2, [r3, #0]
			CS_set();
    7ad6:	23c0      	movs	r3, #192	; 0xc0
    7ad8:	05db      	lsls	r3, r3, #23
    7ada:	2280      	movs	r2, #128	; 0x80
    7adc:	0452      	lsls	r2, r2, #17
    7ade:	619a      	str	r2, [r3, #24]
			
			return (spi.rn);
    7ae0:	4a05      	ldr	r2, [pc, #20]	; (7af8 <spi_write+0x1a4>)
    7ae2:	23b9      	movs	r3, #185	; 0xb9
    7ae4:	011b      	lsls	r3, r3, #4
    7ae6:	5ad3      	ldrh	r3, [r2, r3]
    7ae8:	e000      	b.n	7aec <spi_write+0x198>
		break;
	}
	return 0;
    7aea:	2300      	movs	r3, #0
}
    7aec:	0018      	movs	r0, r3
    7aee:	46bd      	mov	sp, r7
    7af0:	b007      	add	sp, #28
    7af2:	bd90      	pop	{r4, r7, pc}
    7af4:	20000469 	.word	0x20000469
    7af8:	20002654 	.word	0x20002654
    7afc:	0000c825 	.word	0x0000c825
    7b00:	00000b94 	.word	0x00000b94
    7b04:	00000b92 	.word	0x00000b92
    7b08:	42001c00 	.word	0x42001c00

00007b0c <spi_read>:

WORD spi_read(uint16_t addr, uint8_t cb, uint8_t *rx_buf, uint16_t len)
{
    7b0c:	b590      	push	{r4, r7, lr}
    7b0e:	b087      	sub	sp, #28
    7b10:	af00      	add	r7, sp, #0
    7b12:	0004      	movs	r4, r0
    7b14:	0008      	movs	r0, r1
    7b16:	60ba      	str	r2, [r7, #8]
    7b18:	0019      	movs	r1, r3
    7b1a:	230e      	movs	r3, #14
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	1c22      	adds	r2, r4, #0
    7b20:	801a      	strh	r2, [r3, #0]
    7b22:	230d      	movs	r3, #13
    7b24:	18fb      	adds	r3, r7, r3
    7b26:	1c02      	adds	r2, r0, #0
    7b28:	701a      	strb	r2, [r3, #0]
    7b2a:	1dbb      	adds	r3, r7, #6
    7b2c:	1c0a      	adds	r2, r1, #0
    7b2e:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7b30:	2316      	movs	r3, #22
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	2200      	movs	r2, #0
    7b36:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7b38:	4b4e      	ldr	r3, [pc, #312]	; (7c74 <spi_read+0x168>)
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d002      	beq.n	7b46 <spi_read+0x3a>
    7b40:	2b01      	cmp	r3, #1
    7b42:	d066      	beq.n	7c12 <spi_read+0x106>
    7b44:	e091      	b.n	7c6a <spi_read+0x15e>
	{
		case 0:
			CS_clr();
    7b46:	23c0      	movs	r3, #192	; 0xc0
    7b48:	05db      	lsls	r3, r3, #23
    7b4a:	2280      	movs	r2, #128	; 0x80
    7b4c:	0452      	lsls	r2, r2, #17
    7b4e:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    7b50:	2316      	movs	r3, #22
    7b52:	18fb      	adds	r3, r7, r3
    7b54:	881b      	ldrh	r3, [r3, #0]
    7b56:	220e      	movs	r2, #14
    7b58:	18ba      	adds	r2, r7, r2
    7b5a:	8812      	ldrh	r2, [r2, #0]
    7b5c:	0a12      	lsrs	r2, r2, #8
    7b5e:	b292      	uxth	r2, r2
    7b60:	b2d1      	uxtb	r1, r2
    7b62:	4a45      	ldr	r2, [pc, #276]	; (7c78 <spi_read+0x16c>)
    7b64:	54d1      	strb	r1, [r2, r3]
    7b66:	2316      	movs	r3, #22
    7b68:	18fb      	adds	r3, r7, r3
    7b6a:	881a      	ldrh	r2, [r3, #0]
    7b6c:	2316      	movs	r3, #22
    7b6e:	18fb      	adds	r3, r7, r3
    7b70:	3201      	adds	r2, #1
    7b72:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7b74:	2316      	movs	r3, #22
    7b76:	18fb      	adds	r3, r7, r3
    7b78:	881b      	ldrh	r3, [r3, #0]
    7b7a:	220e      	movs	r2, #14
    7b7c:	18ba      	adds	r2, r7, r2
    7b7e:	8812      	ldrh	r2, [r2, #0]
    7b80:	b2d1      	uxtb	r1, r2
    7b82:	4a3d      	ldr	r2, [pc, #244]	; (7c78 <spi_read+0x16c>)
    7b84:	54d1      	strb	r1, [r2, r3]
    7b86:	2316      	movs	r3, #22
    7b88:	18fb      	adds	r3, r7, r3
    7b8a:	881a      	ldrh	r2, [r3, #0]
    7b8c:	2316      	movs	r3, #22
    7b8e:	18fb      	adds	r3, r7, r3
    7b90:	3201      	adds	r2, #1
    7b92:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | READ_REG | LEN_N_BYTES;		cnt++;
    7b94:	2316      	movs	r3, #22
    7b96:	18fb      	adds	r3, r7, r3
    7b98:	881b      	ldrh	r3, [r3, #0]
    7b9a:	4a37      	ldr	r2, [pc, #220]	; (7c78 <spi_read+0x16c>)
    7b9c:	210d      	movs	r1, #13
    7b9e:	1879      	adds	r1, r7, r1
    7ba0:	7809      	ldrb	r1, [r1, #0]
    7ba2:	54d1      	strb	r1, [r2, r3]
    7ba4:	2316      	movs	r3, #22
    7ba6:	18fb      	adds	r3, r7, r3
    7ba8:	881a      	ldrh	r2, [r3, #0]
    7baa:	2316      	movs	r3, #22
    7bac:	18fb      	adds	r3, r7, r3
    7bae:	3201      	adds	r2, #1
    7bb0:	801a      	strh	r2, [r3, #0]
			spi.wx = cnt + len;
    7bb2:	2316      	movs	r3, #22
    7bb4:	18fa      	adds	r2, r7, r3
    7bb6:	1dbb      	adds	r3, r7, #6
    7bb8:	8812      	ldrh	r2, [r2, #0]
    7bba:	881b      	ldrh	r3, [r3, #0]
    7bbc:	18d3      	adds	r3, r2, r3
    7bbe:	b299      	uxth	r1, r3
    7bc0:	4b2d      	ldr	r3, [pc, #180]	; (7c78 <spi_read+0x16c>)
    7bc2:	4a2e      	ldr	r2, [pc, #184]	; (7c7c <spi_read+0x170>)
    7bc4:	5299      	strh	r1, [r3, r2]
			spi.wn = 0;
    7bc6:	4b2c      	ldr	r3, [pc, #176]	; (7c78 <spi_read+0x16c>)
    7bc8:	4a2d      	ldr	r2, [pc, #180]	; (7c80 <spi_read+0x174>)
    7bca:	2100      	movs	r1, #0
    7bcc:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7bce:	4a2a      	ldr	r2, [pc, #168]	; (7c78 <spi_read+0x16c>)
    7bd0:	23b9      	movs	r3, #185	; 0xb9
    7bd2:	011b      	lsls	r3, r3, #4
    7bd4:	2100      	movs	r1, #0
    7bd6:	52d1      	strh	r1, [r2, r3]
			if(spi.wx>MAX_SIZE_BUF_SPI) {spi.wx=MAX_SIZE_BUF_SPI;}
    7bd8:	4b27      	ldr	r3, [pc, #156]	; (7c78 <spi_read+0x16c>)
    7bda:	4a28      	ldr	r2, [pc, #160]	; (7c7c <spi_read+0x170>)
    7bdc:	5a9a      	ldrh	r2, [r3, r2]
    7bde:	23b9      	movs	r3, #185	; 0xb9
    7be0:	00db      	lsls	r3, r3, #3
    7be2:	429a      	cmp	r2, r3
    7be4:	d904      	bls.n	7bf0 <spi_read+0xe4>
    7be6:	4b24      	ldr	r3, [pc, #144]	; (7c78 <spi_read+0x16c>)
    7be8:	4a24      	ldr	r2, [pc, #144]	; (7c7c <spi_read+0x170>)
    7bea:	21b9      	movs	r1, #185	; 0xb9
    7bec:	00c9      	lsls	r1, r1, #3
    7bee:	5299      	strh	r1, [r3, r2]
			st_read++;
    7bf0:	4b20      	ldr	r3, [pc, #128]	; (7c74 <spi_read+0x168>)
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	3301      	adds	r3, #1
    7bf6:	b2da      	uxtb	r2, r3
    7bf8:	4b1e      	ldr	r3, [pc, #120]	; (7c74 <spi_read+0x168>)
    7bfa:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7bfc:	4a21      	ldr	r2, [pc, #132]	; (7c84 <spi_read+0x178>)
    7bfe:	7d93      	ldrb	r3, [r2, #22]
    7c00:	2101      	movs	r1, #1
    7c02:	430b      	orrs	r3, r1
    7c04:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;
    7c06:	4a1f      	ldr	r2, [pc, #124]	; (7c84 <spi_read+0x178>)
    7c08:	7d93      	ldrb	r3, [r2, #22]
    7c0a:	2104      	movs	r1, #4
    7c0c:	430b      	orrs	r3, r1
    7c0e:	7593      	strb	r3, [r2, #22]
		break;
    7c10:	e02b      	b.n	7c6a <spi_read+0x15e>
		case 1:
			if(spi.wx)							{return 0;}
    7c12:	4b19      	ldr	r3, [pc, #100]	; (7c78 <spi_read+0x16c>)
    7c14:	4a19      	ldr	r2, [pc, #100]	; (7c7c <spi_read+0x170>)
    7c16:	5a9b      	ldrh	r3, [r3, r2]
    7c18:	2b00      	cmp	r3, #0
    7c1a:	d001      	beq.n	7c20 <spi_read+0x114>
    7c1c:	2300      	movs	r3, #0
    7c1e:	e025      	b.n	7c6c <spi_read+0x160>
			if(spi.rn!=spi.wn)					{return 0;}
    7c20:	4a15      	ldr	r2, [pc, #84]	; (7c78 <spi_read+0x16c>)
    7c22:	23b9      	movs	r3, #185	; 0xb9
    7c24:	011b      	lsls	r3, r3, #4
    7c26:	5ad2      	ldrh	r2, [r2, r3]
    7c28:	4b13      	ldr	r3, [pc, #76]	; (7c78 <spi_read+0x16c>)
    7c2a:	4915      	ldr	r1, [pc, #84]	; (7c80 <spi_read+0x174>)
    7c2c:	5a5b      	ldrh	r3, [r3, r1]
    7c2e:	429a      	cmp	r2, r3
    7c30:	d001      	beq.n	7c36 <spi_read+0x12a>
    7c32:	2300      	movs	r3, #0
    7c34:	e01a      	b.n	7c6c <spi_read+0x160>
			memcpy(rx_buf,&spi.rbuf[3],spi.rn);
    7c36:	4a10      	ldr	r2, [pc, #64]	; (7c78 <spi_read+0x16c>)
    7c38:	23b9      	movs	r3, #185	; 0xb9
    7c3a:	011b      	lsls	r3, r3, #4
    7c3c:	5ad3      	ldrh	r3, [r2, r3]
    7c3e:	001a      	movs	r2, r3
    7c40:	4911      	ldr	r1, [pc, #68]	; (7c88 <spi_read+0x17c>)
    7c42:	68bb      	ldr	r3, [r7, #8]
    7c44:	0018      	movs	r0, r3
    7c46:	4b11      	ldr	r3, [pc, #68]	; (7c8c <spi_read+0x180>)
    7c48:	4798      	blx	r3
			st_read--;
    7c4a:	4b0a      	ldr	r3, [pc, #40]	; (7c74 <spi_read+0x168>)
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	3b01      	subs	r3, #1
    7c50:	b2da      	uxtb	r2, r3
    7c52:	4b08      	ldr	r3, [pc, #32]	; (7c74 <spi_read+0x168>)
    7c54:	701a      	strb	r2, [r3, #0]
			CS_set();
    7c56:	23c0      	movs	r3, #192	; 0xc0
    7c58:	05db      	lsls	r3, r3, #23
    7c5a:	2280      	movs	r2, #128	; 0x80
    7c5c:	0452      	lsls	r2, r2, #17
    7c5e:	619a      	str	r2, [r3, #24]
				
			return (spi.rn);
    7c60:	4a05      	ldr	r2, [pc, #20]	; (7c78 <spi_read+0x16c>)
    7c62:	23b9      	movs	r3, #185	; 0xb9
    7c64:	011b      	lsls	r3, r3, #4
    7c66:	5ad3      	ldrh	r3, [r2, r3]
    7c68:	e000      	b.n	7c6c <spi_read+0x160>
		break;
	}
	return 0;
    7c6a:	2300      	movs	r3, #0
}
    7c6c:	0018      	movs	r0, r3
    7c6e:	46bd      	mov	sp, r7
    7c70:	b007      	add	sp, #28
    7c72:	bd90      	pop	{r4, r7, pc}
    7c74:	2000046a 	.word	0x2000046a
    7c78:	20002654 	.word	0x20002654
    7c7c:	00000b94 	.word	0x00000b94
    7c80:	00000b92 	.word	0x00000b92
    7c84:	42001c00 	.word	0x42001c00
    7c88:	20002c1f 	.word	0x20002c1f
    7c8c:	0000c825 	.word	0x0000c825

00007c90 <SERCOM5_Handler>:

void SERCOM5_Handler(void)
//-----------------------------------------------------------------------------
{
    7c90:	b580      	push	{r7, lr}
    7c92:	af00      	add	r7, sp, #0
	
	if(SERCOM5->SPI.INTFLAG.bit.RXC)
    7c94:	4b37      	ldr	r3, [pc, #220]	; (7d74 <SERCOM5_Handler+0xe4>)
    7c96:	7e1b      	ldrb	r3, [r3, #24]
    7c98:	075b      	lsls	r3, r3, #29
    7c9a:	0fdb      	lsrs	r3, r3, #31
    7c9c:	b2db      	uxtb	r3, r3
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d029      	beq.n	7cf6 <SERCOM5_Handler+0x66>
	{
		spi.rbuf[spi.rn] = SERCOM5->SPI.DATA.reg;
    7ca2:	4a35      	ldr	r2, [pc, #212]	; (7d78 <SERCOM5_Handler+0xe8>)
    7ca4:	23b9      	movs	r3, #185	; 0xb9
    7ca6:	011b      	lsls	r3, r3, #4
    7ca8:	5ad3      	ldrh	r3, [r2, r3]
    7caa:	0018      	movs	r0, r3
    7cac:	4b31      	ldr	r3, [pc, #196]	; (7d74 <SERCOM5_Handler+0xe4>)
    7cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cb0:	b2d9      	uxtb	r1, r3
    7cb2:	4a31      	ldr	r2, [pc, #196]	; (7d78 <SERCOM5_Handler+0xe8>)
    7cb4:	23b9      	movs	r3, #185	; 0xb9
    7cb6:	00db      	lsls	r3, r3, #3
    7cb8:	1812      	adds	r2, r2, r0
    7cba:	18d3      	adds	r3, r2, r3
    7cbc:	1c0a      	adds	r2, r1, #0
    7cbe:	701a      	strb	r2, [r3, #0]
		spi.rn++;	
    7cc0:	4a2d      	ldr	r2, [pc, #180]	; (7d78 <SERCOM5_Handler+0xe8>)
    7cc2:	23b9      	movs	r3, #185	; 0xb9
    7cc4:	011b      	lsls	r3, r3, #4
    7cc6:	5ad3      	ldrh	r3, [r2, r3]
    7cc8:	3301      	adds	r3, #1
    7cca:	b299      	uxth	r1, r3
    7ccc:	4a2a      	ldr	r2, [pc, #168]	; (7d78 <SERCOM5_Handler+0xe8>)
    7cce:	23b9      	movs	r3, #185	; 0xb9
    7cd0:	011b      	lsls	r3, r3, #4
    7cd2:	52d1      	strh	r1, [r2, r3]
		spi.RXC_sum++;
    7cd4:	4b28      	ldr	r3, [pc, #160]	; (7d78 <SERCOM5_Handler+0xe8>)
    7cd6:	4a29      	ldr	r2, [pc, #164]	; (7d7c <SERCOM5_Handler+0xec>)
    7cd8:	589b      	ldr	r3, [r3, r2]
    7cda:	1c5a      	adds	r2, r3, #1
    7cdc:	4b26      	ldr	r3, [pc, #152]	; (7d78 <SERCOM5_Handler+0xe8>)
    7cde:	4927      	ldr	r1, [pc, #156]	; (7d7c <SERCOM5_Handler+0xec>)
    7ce0:	505a      	str	r2, [r3, r1]
		if(!spi.wx) 
    7ce2:	4b25      	ldr	r3, [pc, #148]	; (7d78 <SERCOM5_Handler+0xe8>)
    7ce4:	4a26      	ldr	r2, [pc, #152]	; (7d80 <SERCOM5_Handler+0xf0>)
    7ce6:	5a9b      	ldrh	r3, [r3, r2]
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d104      	bne.n	7cf6 <SERCOM5_Handler+0x66>
		{
			SERCOM5->SPI.INTENCLR.bit.RXC =0x01;
    7cec:	4a21      	ldr	r2, [pc, #132]	; (7d74 <SERCOM5_Handler+0xe4>)
    7cee:	7d13      	ldrb	r3, [r2, #20]
    7cf0:	2104      	movs	r1, #4
    7cf2:	430b      	orrs	r3, r1
    7cf4:	7513      	strb	r3, [r2, #20]
		}	
	}
	if(SERCOM5->SPI.INTFLAG.bit.DRE)
    7cf6:	4b1f      	ldr	r3, [pc, #124]	; (7d74 <SERCOM5_Handler+0xe4>)
    7cf8:	7e1b      	ldrb	r3, [r3, #24]
    7cfa:	07db      	lsls	r3, r3, #31
    7cfc:	0fdb      	lsrs	r3, r3, #31
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	2b00      	cmp	r3, #0
    7d02:	d034      	beq.n	7d6e <SERCOM5_Handler+0xde>
	{
		spi.DRE_sum++;
    7d04:	4b1c      	ldr	r3, [pc, #112]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d06:	4a1f      	ldr	r2, [pc, #124]	; (7d84 <SERCOM5_Handler+0xf4>)
    7d08:	589b      	ldr	r3, [r3, r2]
    7d0a:	1c5a      	adds	r2, r3, #1
    7d0c:	4b1a      	ldr	r3, [pc, #104]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d0e:	491d      	ldr	r1, [pc, #116]	; (7d84 <SERCOM5_Handler+0xf4>)
    7d10:	505a      	str	r2, [r3, r1]
		if(spi.rn!=spi.wn){return;}
    7d12:	4a19      	ldr	r2, [pc, #100]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d14:	23b9      	movs	r3, #185	; 0xb9
    7d16:	011b      	lsls	r3, r3, #4
    7d18:	5ad2      	ldrh	r2, [r2, r3]
    7d1a:	4b17      	ldr	r3, [pc, #92]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d1c:	491a      	ldr	r1, [pc, #104]	; (7d88 <SERCOM5_Handler+0xf8>)
    7d1e:	5a5b      	ldrh	r3, [r3, r1]
    7d20:	429a      	cmp	r2, r3
    7d22:	d123      	bne.n	7d6c <SERCOM5_Handler+0xdc>
		if(spi.wx)
    7d24:	4b14      	ldr	r3, [pc, #80]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d26:	4a16      	ldr	r2, [pc, #88]	; (7d80 <SERCOM5_Handler+0xf0>)
    7d28:	5a9b      	ldrh	r3, [r3, r2]
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d018      	beq.n	7d60 <SERCOM5_Handler+0xd0>
		{ 
			SERCOM5->SPI.DATA.reg=spi.wbuf[spi.wn];
    7d2e:	4b11      	ldr	r3, [pc, #68]	; (7d74 <SERCOM5_Handler+0xe4>)
    7d30:	4a11      	ldr	r2, [pc, #68]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d32:	4915      	ldr	r1, [pc, #84]	; (7d88 <SERCOM5_Handler+0xf8>)
    7d34:	5a52      	ldrh	r2, [r2, r1]
    7d36:	0011      	movs	r1, r2
    7d38:	4a0f      	ldr	r2, [pc, #60]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d3a:	5c52      	ldrb	r2, [r2, r1]
    7d3c:	629a      	str	r2, [r3, #40]	; 0x28
			spi.wn++;
    7d3e:	4b0e      	ldr	r3, [pc, #56]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d40:	4a11      	ldr	r2, [pc, #68]	; (7d88 <SERCOM5_Handler+0xf8>)
    7d42:	5a9b      	ldrh	r3, [r3, r2]
    7d44:	3301      	adds	r3, #1
    7d46:	b299      	uxth	r1, r3
    7d48:	4b0b      	ldr	r3, [pc, #44]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d4a:	4a0f      	ldr	r2, [pc, #60]	; (7d88 <SERCOM5_Handler+0xf8>)
    7d4c:	5299      	strh	r1, [r3, r2]
			spi.wx--;
    7d4e:	4b0a      	ldr	r3, [pc, #40]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d50:	4a0b      	ldr	r2, [pc, #44]	; (7d80 <SERCOM5_Handler+0xf0>)
    7d52:	5a9b      	ldrh	r3, [r3, r2]
    7d54:	3b01      	subs	r3, #1
    7d56:	b299      	uxth	r1, r3
    7d58:	4b07      	ldr	r3, [pc, #28]	; (7d78 <SERCOM5_Handler+0xe8>)
    7d5a:	4a09      	ldr	r2, [pc, #36]	; (7d80 <SERCOM5_Handler+0xf0>)
    7d5c:	5299      	strh	r1, [r3, r2]
    7d5e:	e006      	b.n	7d6e <SERCOM5_Handler+0xde>
		}
		else {SERCOM5->SPI.INTENCLR.bit.DRE =0x01;}
    7d60:	4a04      	ldr	r2, [pc, #16]	; (7d74 <SERCOM5_Handler+0xe4>)
    7d62:	7d13      	ldrb	r3, [r2, #20]
    7d64:	2101      	movs	r1, #1
    7d66:	430b      	orrs	r3, r1
    7d68:	7513      	strb	r3, [r2, #20]
    7d6a:	e000      	b.n	7d6e <SERCOM5_Handler+0xde>
		if(spi.rn!=spi.wn){return;}
    7d6c:	46c0      	nop			; (mov r8, r8)
	}
}
    7d6e:	46bd      	mov	sp, r7
    7d70:	bd80      	pop	{r7, pc}
    7d72:	46c0      	nop			; (mov r8, r8)
    7d74:	42001c00 	.word	0x42001c00
    7d78:	20002654 	.word	0x20002654
    7d7c:	00000b9c 	.word	0x00000b9c
    7d80:	00000b94 	.word	0x00000b94
    7d84:	00000b98 	.word	0x00000b98
    7d88:	00000b92 	.word	0x00000b92

00007d8c <sys_clock_init_USE_OSC8M>:



void sys_clock_init_USE_OSC8M(void)
//-----------------------------------------------------------------------------
{
    7d8c:	b580      	push	{r7, lr}
    7d8e:	b082      	sub	sp, #8
    7d90:	af00      	add	r7, sp, #0
	uint32_t temp = SYSCTRL->OSC8M.reg;
    7d92:	4b0c      	ldr	r3, [pc, #48]	; (7dc4 <sys_clock_init_USE_OSC8M+0x38>)
    7d94:	6a1b      	ldr	r3, [r3, #32]
    7d96:	607b      	str	r3, [r7, #4]
	temp &= ~((uint32_t)0x0000FFFF);
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	0c1b      	lsrs	r3, r3, #16
    7d9c:	041b      	lsls	r3, r3, #16
    7d9e:	607b      	str	r3, [r7, #4]
	temp |= SYSCTRL_OSC8M_PRESC(0x00) | SYSCTRL_OSC8M_ENABLE;
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	2202      	movs	r2, #2
    7da4:	4313      	orrs	r3, r2
    7da6:	607b      	str	r3, [r7, #4]
	SYSCTRL->OSC8M.reg = temp;
    7da8:	4b06      	ldr	r3, [pc, #24]	; (7dc4 <sys_clock_init_USE_OSC8M+0x38>)
    7daa:	687a      	ldr	r2, [r7, #4]
    7dac:	621a      	str	r2, [r3, #32]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY)){};
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	4b04      	ldr	r3, [pc, #16]	; (7dc4 <sys_clock_init_USE_OSC8M+0x38>)
    7db2:	68db      	ldr	r3, [r3, #12]
    7db4:	2208      	movs	r2, #8
    7db6:	4013      	ands	r3, r2
    7db8:	d0fa      	beq.n	7db0 <sys_clock_init_USE_OSC8M+0x24>
}
    7dba:	46c0      	nop			; (mov r8, r8)
    7dbc:	46bd      	mov	sp, r7
    7dbe:	b002      	add	sp, #8
    7dc0:	bd80      	pop	{r7, pc}
    7dc2:	46c0      	nop			; (mov r8, r8)
    7dc4:	40000800 	.word	0x40000800

00007dc8 <sys_clock_init_USE_DFLL48M>:


void sys_clock_init_USE_DFLL48M(void)
{
    7dc8:	b580      	push	{r7, lr}
    7dca:	b082      	sub	sp, #8
    7dcc:	af00      	add	r7, sp, #0
	uint32_t coarse, fine;

	NVMCTRL->CTRLB.bit.RWS=2; //this is needed for 48 MHz
    7dce:	4a2d      	ldr	r2, [pc, #180]	; (7e84 <sys_clock_init_USE_DFLL48M+0xbc>)
    7dd0:	6853      	ldr	r3, [r2, #4]
    7dd2:	211e      	movs	r1, #30
    7dd4:	438b      	bics	r3, r1
    7dd6:	2104      	movs	r1, #4
    7dd8:	430b      	orrs	r3, r1
    7dda:	6053      	str	r3, [r2, #4]

	coarse=NVM_READ_CAL(DFLL48M_COARSE_CAL); //read coarse calibration value from NVM Software Calibration Area Map
    7ddc:	4b2a      	ldr	r3, [pc, #168]	; (7e88 <sys_clock_init_USE_DFLL48M+0xc0>)
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	0e9b      	lsrs	r3, r3, #26
    7de2:	607b      	str	r3, [r7, #4]
	fine  =NVM_READ_CAL(DFLL48M_FINE_CAL  ); //read fine calibration value from NVM Software Calibration Area Map
    7de4:	4b29      	ldr	r3, [pc, #164]	; (7e8c <sys_clock_init_USE_DFLL48M+0xc4>)
    7de6:	681b      	ldr	r3, [r3, #0]
    7de8:	059b      	lsls	r3, r3, #22
    7dea:	0d9b      	lsrs	r3, r3, #22
    7dec:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLCTRL.reg=0; // See Errata 9905
    7dee:	4b28      	ldr	r3, [pc, #160]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7df0:	2200      	movs	r2, #0
    7df2:	849a      	strh	r2, [r3, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; }
    7df4:	46c0      	nop			; (mov r8, r8)
    7df6:	4b26      	ldr	r3, [pc, #152]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7df8:	68db      	ldr	r3, [r3, #12]
    7dfa:	2210      	movs	r2, #16
    7dfc:	4013      	ands	r3, r2
    7dfe:	d0fa      	beq.n	7df6 <sys_clock_init_USE_DFLL48M+0x2e>

	SYSCTRL->DFLLVAL.reg=SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine); //this will set DFLL48 close to 48 MHz
    7e00:	4b23      	ldr	r3, [pc, #140]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e02:	687a      	ldr	r2, [r7, #4]
    7e04:	0292      	lsls	r2, r2, #10
    7e06:	0412      	lsls	r2, r2, #16
    7e08:	0c11      	lsrs	r1, r2, #16
    7e0a:	683a      	ldr	r2, [r7, #0]
    7e0c:	0592      	lsls	r2, r2, #22
    7e0e:	0d92      	lsrs	r2, r2, #22
    7e10:	430a      	orrs	r2, r1
    7e12:	629a      	str	r2, [r3, #40]	; 0x28
	
	SYSCTRL->DFLLCTRL.bit.STABLE	=1; // Stable frequency (FINE calibration register value will be fixed after a fine lock)
    7e14:	4a1e      	ldr	r2, [pc, #120]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e16:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e18:	2108      	movs	r1, #8
    7e1a:	430b      	orrs	r3, r1
    7e1c:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.BPLCKC	=1; // Bypass coarse clock enable
    7e1e:	4a1c      	ldr	r2, [pc, #112]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e20:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e22:	2180      	movs	r1, #128	; 0x80
    7e24:	00c9      	lsls	r1, r1, #3
    7e26:	430b      	orrs	r3, r1
    7e28:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.MODE		=0; // Open loop mode
    7e2a:	4a19      	ldr	r2, [pc, #100]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e2c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e2e:	2104      	movs	r1, #4
    7e30:	438b      	bics	r3, r1
    7e32:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ONDEMAND  =0; // On Demand is disabled, the oscillator will always be running when enabled.
    7e34:	4a16      	ldr	r2, [pc, #88]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e36:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e38:	2180      	movs	r1, #128	; 0x80
    7e3a:	438b      	bics	r3, r1
    7e3c:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ENABLE	=1; // Enable DFLL48
    7e3e:	4a14      	ldr	r2, [pc, #80]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e40:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e42:	2102      	movs	r1, #2
    7e44:	430b      	orrs	r3, r1
    7e46:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.CCDIS		=1; // Chill Cycle is disabled
    7e48:	4a11      	ldr	r2, [pc, #68]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e4a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e4c:	2180      	movs	r1, #128	; 0x80
    7e4e:	0049      	lsls	r1, r1, #1
    7e50:	430b      	orrs	r3, r1
    7e52:	8493      	strh	r3, [r2, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; } // wait till DFLL is stable and ready to be used as a clock source
    7e54:	46c0      	nop			; (mov r8, r8)
    7e56:	4b0e      	ldr	r3, [pc, #56]	; (7e90 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e58:	68db      	ldr	r3, [r3, #12]
    7e5a:	2210      	movs	r2, #16
    7e5c:	4013      	ands	r3, r2
    7e5e:	d0fa      	beq.n	7e56 <sys_clock_init_USE_DFLL48M+0x8e>

	GCLK->GENDIV.reg =GCLK_GENDIV_ID (GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENDIV_DIV (MAIN_CLK_DEVIDER);//16MHz
    7e60:	4b0c      	ldr	r3, [pc, #48]	; (7e94 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e62:	2280      	movs	r2, #128	; 0x80
    7e64:	0052      	lsls	r2, r2, #1
    7e66:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg=GCLK_GENCTRL_ID(GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENCTRL_SRC (GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    7e68:	4b0a      	ldr	r3, [pc, #40]	; (7e94 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e6a:	4a0b      	ldr	r2, [pc, #44]	; (7e98 <sys_clock_init_USE_DFLL48M+0xd0>)
    7e6c:	605a      	str	r2, [r3, #4]
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) { ; }
    7e6e:	46c0      	nop			; (mov r8, r8)
    7e70:	4b08      	ldr	r3, [pc, #32]	; (7e94 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e72:	785b      	ldrb	r3, [r3, #1]
    7e74:	b2db      	uxtb	r3, r3
    7e76:	b25b      	sxtb	r3, r3
    7e78:	2b00      	cmp	r3, #0
    7e7a:	dbf9      	blt.n	7e70 <sys_clock_init_USE_DFLL48M+0xa8>
}
    7e7c:	46c0      	nop			; (mov r8, r8)
    7e7e:	46bd      	mov	sp, r7
    7e80:	b002      	add	sp, #8
    7e82:	bd80      	pop	{r7, pc}
    7e84:	41004000 	.word	0x41004000
    7e88:	00806024 	.word	0x00806024
    7e8c:	00806028 	.word	0x00806028
    7e90:	40000800 	.word	0x40000800
    7e94:	40000c00 	.word	0x40000c00
    7e98:	00210700 	.word	0x00210700

00007e9c <__NVIC_EnableIRQ>:
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	b082      	sub	sp, #8
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	0002      	movs	r2, r0
    7ea4:	1dfb      	adds	r3, r7, #7
    7ea6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7ea8:	1dfb      	adds	r3, r7, #7
    7eaa:	781b      	ldrb	r3, [r3, #0]
    7eac:	2b7f      	cmp	r3, #127	; 0x7f
    7eae:	d809      	bhi.n	7ec4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7eb0:	4b06      	ldr	r3, [pc, #24]	; (7ecc <__NVIC_EnableIRQ+0x30>)
    7eb2:	1dfa      	adds	r2, r7, #7
    7eb4:	7812      	ldrb	r2, [r2, #0]
    7eb6:	0011      	movs	r1, r2
    7eb8:	221f      	movs	r2, #31
    7eba:	400a      	ands	r2, r1
    7ebc:	2101      	movs	r1, #1
    7ebe:	4091      	lsls	r1, r2
    7ec0:	000a      	movs	r2, r1
    7ec2:	601a      	str	r2, [r3, #0]
}
    7ec4:	46c0      	nop			; (mov r8, r8)
    7ec6:	46bd      	mov	sp, r7
    7ec8:	b002      	add	sp, #8
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	e000e100 	.word	0xe000e100

00007ed0 <__NVIC_DisableIRQ>:
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	b082      	sub	sp, #8
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	0002      	movs	r2, r0
    7ed8:	1dfb      	adds	r3, r7, #7
    7eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7edc:	1dfb      	adds	r3, r7, #7
    7ede:	781b      	ldrb	r3, [r3, #0]
    7ee0:	2b7f      	cmp	r3, #127	; 0x7f
    7ee2:	d80e      	bhi.n	7f02 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ee4:	4909      	ldr	r1, [pc, #36]	; (7f0c <__NVIC_DisableIRQ+0x3c>)
    7ee6:	1dfb      	adds	r3, r7, #7
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	001a      	movs	r2, r3
    7eec:	231f      	movs	r3, #31
    7eee:	4013      	ands	r3, r2
    7ef0:	2201      	movs	r2, #1
    7ef2:	409a      	lsls	r2, r3
    7ef4:	0013      	movs	r3, r2
    7ef6:	2280      	movs	r2, #128	; 0x80
    7ef8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    7efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7efe:	f3bf 8f6f 	isb	sy
}
    7f02:	46c0      	nop			; (mov r8, r8)
    7f04:	46bd      	mov	sp, r7
    7f06:	b002      	add	sp, #8
    7f08:	bd80      	pop	{r7, pc}
    7f0a:	46c0      	nop			; (mov r8, r8)
    7f0c:	e000e100 	.word	0xe000e100

00007f10 <__NVIC_SetPriority>:
{
    7f10:	b5b0      	push	{r4, r5, r7, lr}
    7f12:	b082      	sub	sp, #8
    7f14:	af00      	add	r7, sp, #0
    7f16:	0002      	movs	r2, r0
    7f18:	6039      	str	r1, [r7, #0]
    7f1a:	1dfb      	adds	r3, r7, #7
    7f1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7f1e:	1dfb      	adds	r3, r7, #7
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	2b7f      	cmp	r3, #127	; 0x7f
    7f24:	d828      	bhi.n	7f78 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f26:	4c2f      	ldr	r4, [pc, #188]	; (7fe4 <__NVIC_SetPriority+0xd4>)
    7f28:	1dfb      	adds	r3, r7, #7
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	b25b      	sxtb	r3, r3
    7f2e:	089b      	lsrs	r3, r3, #2
    7f30:	492c      	ldr	r1, [pc, #176]	; (7fe4 <__NVIC_SetPriority+0xd4>)
    7f32:	1dfa      	adds	r2, r7, #7
    7f34:	7812      	ldrb	r2, [r2, #0]
    7f36:	b252      	sxtb	r2, r2
    7f38:	0892      	lsrs	r2, r2, #2
    7f3a:	32c0      	adds	r2, #192	; 0xc0
    7f3c:	0092      	lsls	r2, r2, #2
    7f3e:	5852      	ldr	r2, [r2, r1]
    7f40:	1df9      	adds	r1, r7, #7
    7f42:	7809      	ldrb	r1, [r1, #0]
    7f44:	0008      	movs	r0, r1
    7f46:	2103      	movs	r1, #3
    7f48:	4001      	ands	r1, r0
    7f4a:	00c9      	lsls	r1, r1, #3
    7f4c:	20ff      	movs	r0, #255	; 0xff
    7f4e:	4088      	lsls	r0, r1
    7f50:	0001      	movs	r1, r0
    7f52:	43c9      	mvns	r1, r1
    7f54:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f56:	683a      	ldr	r2, [r7, #0]
    7f58:	0192      	lsls	r2, r2, #6
    7f5a:	20ff      	movs	r0, #255	; 0xff
    7f5c:	4010      	ands	r0, r2
    7f5e:	1dfa      	adds	r2, r7, #7
    7f60:	7812      	ldrb	r2, [r2, #0]
    7f62:	0015      	movs	r5, r2
    7f64:	2203      	movs	r2, #3
    7f66:	402a      	ands	r2, r5
    7f68:	00d2      	lsls	r2, r2, #3
    7f6a:	4090      	lsls	r0, r2
    7f6c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f6e:	430a      	orrs	r2, r1
    7f70:	33c0      	adds	r3, #192	; 0xc0
    7f72:	009b      	lsls	r3, r3, #2
    7f74:	511a      	str	r2, [r3, r4]
}
    7f76:	e031      	b.n	7fdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f78:	4c1b      	ldr	r4, [pc, #108]	; (7fe8 <__NVIC_SetPriority+0xd8>)
    7f7a:	1dfb      	adds	r3, r7, #7
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	001a      	movs	r2, r3
    7f80:	230f      	movs	r3, #15
    7f82:	4013      	ands	r3, r2
    7f84:	3b08      	subs	r3, #8
    7f86:	0899      	lsrs	r1, r3, #2
    7f88:	4a17      	ldr	r2, [pc, #92]	; (7fe8 <__NVIC_SetPriority+0xd8>)
    7f8a:	1dfb      	adds	r3, r7, #7
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	0018      	movs	r0, r3
    7f90:	230f      	movs	r3, #15
    7f92:	4003      	ands	r3, r0
    7f94:	3b08      	subs	r3, #8
    7f96:	089b      	lsrs	r3, r3, #2
    7f98:	3306      	adds	r3, #6
    7f9a:	009b      	lsls	r3, r3, #2
    7f9c:	18d3      	adds	r3, r2, r3
    7f9e:	3304      	adds	r3, #4
    7fa0:	681b      	ldr	r3, [r3, #0]
    7fa2:	1dfa      	adds	r2, r7, #7
    7fa4:	7812      	ldrb	r2, [r2, #0]
    7fa6:	0010      	movs	r0, r2
    7fa8:	2203      	movs	r2, #3
    7faa:	4002      	ands	r2, r0
    7fac:	00d2      	lsls	r2, r2, #3
    7fae:	20ff      	movs	r0, #255	; 0xff
    7fb0:	4090      	lsls	r0, r2
    7fb2:	0002      	movs	r2, r0
    7fb4:	43d2      	mvns	r2, r2
    7fb6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7fb8:	683b      	ldr	r3, [r7, #0]
    7fba:	019b      	lsls	r3, r3, #6
    7fbc:	20ff      	movs	r0, #255	; 0xff
    7fbe:	4018      	ands	r0, r3
    7fc0:	1dfb      	adds	r3, r7, #7
    7fc2:	781b      	ldrb	r3, [r3, #0]
    7fc4:	001d      	movs	r5, r3
    7fc6:	2303      	movs	r3, #3
    7fc8:	402b      	ands	r3, r5
    7fca:	00db      	lsls	r3, r3, #3
    7fcc:	4098      	lsls	r0, r3
    7fce:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fd0:	431a      	orrs	r2, r3
    7fd2:	1d8b      	adds	r3, r1, #6
    7fd4:	009b      	lsls	r3, r3, #2
    7fd6:	18e3      	adds	r3, r4, r3
    7fd8:	3304      	adds	r3, #4
    7fda:	601a      	str	r2, [r3, #0]
}
    7fdc:	46c0      	nop			; (mov r8, r8)
    7fde:	46bd      	mov	sp, r7
    7fe0:	b002      	add	sp, #8
    7fe2:	bdb0      	pop	{r4, r5, r7, pc}
    7fe4:	e000e100 	.word	0xe000e100
    7fe8:	e000ed00 	.word	0xe000ed00

00007fec <TC3_start>:
//funx
	extern void TC3_init(void);
	extern void wait(DWORD time_100mk);
	extern void tc3_process(void);
//inline
	static inline void TC3_start(WORD cc) { TC3->COUNT16.CC[0].reg=cc-1; TC3->COUNT16.CTRLBSET.bit.CMD=0x01; }
    7fec:	b580      	push	{r7, lr}
    7fee:	b082      	sub	sp, #8
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	0002      	movs	r2, r0
    7ff4:	1dbb      	adds	r3, r7, #6
    7ff6:	801a      	strh	r2, [r3, #0]
    7ff8:	4a08      	ldr	r2, [pc, #32]	; (801c <TC3_start+0x30>)
    7ffa:	1dbb      	adds	r3, r7, #6
    7ffc:	881b      	ldrh	r3, [r3, #0]
    7ffe:	3b01      	subs	r3, #1
    8000:	b29b      	uxth	r3, r3
    8002:	8313      	strh	r3, [r2, #24]
    8004:	4a05      	ldr	r2, [pc, #20]	; (801c <TC3_start+0x30>)
    8006:	7953      	ldrb	r3, [r2, #5]
    8008:	213f      	movs	r1, #63	; 0x3f
    800a:	400b      	ands	r3, r1
    800c:	1c19      	adds	r1, r3, #0
    800e:	2340      	movs	r3, #64	; 0x40
    8010:	430b      	orrs	r3, r1
    8012:	7153      	strb	r3, [r2, #5]
    8014:	46c0      	nop			; (mov r8, r8)
    8016:	46bd      	mov	sp, r7
    8018:	b002      	add	sp, #8
    801a:	bd80      	pop	{r7, pc}
    801c:	42002c00 	.word	0x42002c00

00008020 <TC3_Handler>:
volatile DWORD  time_100mk=0;
volatile DWORD  TTL=0;

void TC3_Handler(void)
//-----------------------------------------------------------------------------
{
    8020:	b580      	push	{r7, lr}
    8022:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg|=0xFFFF;
    8024:	4b22      	ldr	r3, [pc, #136]	; (80b0 <TC3_Handler+0x90>)
    8026:	7b9b      	ldrb	r3, [r3, #14]
    8028:	4b21      	ldr	r3, [pc, #132]	; (80b0 <TC3_Handler+0x90>)
    802a:	22ff      	movs	r2, #255	; 0xff
    802c:	739a      	strb	r2, [r3, #14]
	
	tc3_cnt++;
    802e:	4b21      	ldr	r3, [pc, #132]	; (80b4 <TC3_Handler+0x94>)
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	1c5a      	adds	r2, r3, #1
    8034:	4b1f      	ldr	r3, [pc, #124]	; (80b4 <TC3_Handler+0x94>)
    8036:	601a      	str	r2, [r3, #0]
	time_wait++;
    8038:	4b1f      	ldr	r3, [pc, #124]	; (80b8 <TC3_Handler+0x98>)
    803a:	681b      	ldr	r3, [r3, #0]
    803c:	1c5a      	adds	r2, r3, #1
    803e:	4b1e      	ldr	r3, [pc, #120]	; (80b8 <TC3_Handler+0x98>)
    8040:	601a      	str	r2, [r3, #0]
	port[0].rtime++;
    8042:	4a1e      	ldr	r2, [pc, #120]	; (80bc <TC3_Handler+0x9c>)
    8044:	2385      	movs	r3, #133	; 0x85
    8046:	009b      	lsls	r3, r3, #2
    8048:	5ad3      	ldrh	r3, [r2, r3]
    804a:	b29b      	uxth	r3, r3
    804c:	3301      	adds	r3, #1
    804e:	b299      	uxth	r1, r3
    8050:	4a1a      	ldr	r2, [pc, #104]	; (80bc <TC3_Handler+0x9c>)
    8052:	2385      	movs	r3, #133	; 0x85
    8054:	009b      	lsls	r3, r3, #2
    8056:	52d1      	strh	r1, [r2, r3]
	port[1].rtime++;
    8058:	4b18      	ldr	r3, [pc, #96]	; (80bc <TC3_Handler+0x9c>)
    805a:	4a19      	ldr	r2, [pc, #100]	; (80c0 <TC3_Handler+0xa0>)
    805c:	5a9b      	ldrh	r3, [r3, r2]
    805e:	b29b      	uxth	r3, r3
    8060:	3301      	adds	r3, #1
    8062:	b299      	uxth	r1, r3
    8064:	4b15      	ldr	r3, [pc, #84]	; (80bc <TC3_Handler+0x9c>)
    8066:	4a16      	ldr	r2, [pc, #88]	; (80c0 <TC3_Handler+0xa0>)
    8068:	5299      	strh	r1, [r3, r2]
	port[2].rtime++;
    806a:	4b14      	ldr	r3, [pc, #80]	; (80bc <TC3_Handler+0x9c>)
    806c:	4a15      	ldr	r2, [pc, #84]	; (80c4 <TC3_Handler+0xa4>)
    806e:	5a9b      	ldrh	r3, [r3, r2]
    8070:	b29b      	uxth	r3, r3
    8072:	3301      	adds	r3, #1
    8074:	b299      	uxth	r1, r3
    8076:	4b11      	ldr	r3, [pc, #68]	; (80bc <TC3_Handler+0x9c>)
    8078:	4a12      	ldr	r2, [pc, #72]	; (80c4 <TC3_Handler+0xa4>)
    807a:	5299      	strh	r1, [r3, r2]
	port[3].rtime++;
    807c:	4b0f      	ldr	r3, [pc, #60]	; (80bc <TC3_Handler+0x9c>)
    807e:	4a12      	ldr	r2, [pc, #72]	; (80c8 <TC3_Handler+0xa8>)
    8080:	5a9b      	ldrh	r3, [r3, r2]
    8082:	b29b      	uxth	r3, r3
    8084:	3301      	adds	r3, #1
    8086:	b299      	uxth	r1, r3
    8088:	4b0c      	ldr	r3, [pc, #48]	; (80bc <TC3_Handler+0x9c>)
    808a:	4a0f      	ldr	r2, [pc, #60]	; (80c8 <TC3_Handler+0xa8>)
    808c:	5299      	strh	r1, [r3, r2]
	
	
	if(spi_wait--);
    808e:	4b0f      	ldr	r3, [pc, #60]	; (80cc <TC3_Handler+0xac>)
    8090:	881b      	ldrh	r3, [r3, #0]
    8092:	b29b      	uxth	r3, r3
    8094:	3b01      	subs	r3, #1
    8096:	b29a      	uxth	r2, r3
    8098:	4b0c      	ldr	r3, [pc, #48]	; (80cc <TC3_Handler+0xac>)
    809a:	801a      	strh	r2, [r3, #0]
	if(cmd_spi_wait--);
    809c:	4b0c      	ldr	r3, [pc, #48]	; (80d0 <TC3_Handler+0xb0>)
    809e:	881b      	ldrh	r3, [r3, #0]
    80a0:	b29b      	uxth	r3, r3
    80a2:	3b01      	subs	r3, #1
    80a4:	b29a      	uxth	r2, r3
    80a6:	4b0a      	ldr	r3, [pc, #40]	; (80d0 <TC3_Handler+0xb0>)
    80a8:	801a      	strh	r2, [r3, #0]
}
    80aa:	46c0      	nop			; (mov r8, r8)
    80ac:	46bd      	mov	sp, r7
    80ae:	bd80      	pop	{r7, pc}
    80b0:	42002c00 	.word	0x42002c00
    80b4:	2000046c 	.word	0x2000046c
    80b8:	200031f8 	.word	0x200031f8
    80bc:	200031fc 	.word	0x200031fc
    80c0:	00000454 	.word	0x00000454
    80c4:	00000694 	.word	0x00000694
    80c8:	000008d4 	.word	0x000008d4
    80cc:	200031f4 	.word	0x200031f4
    80d0:	200031f6 	.word	0x200031f6

000080d4 <TC3_init>:

void TC3_init(void)
//-----------------------------------------------------------------------------
{
    80d4:	b580      	push	{r7, lr}
    80d6:	af00      	add	r7, sp, #0
	GCLK->CLKCTRL.bit.ID   =0x1B; // Bits 5:0  - ID: Generic Clock Selection ID (0x1B - TCC2,TC3)
    80d8:	4a37      	ldr	r2, [pc, #220]	; (81b8 <TC3_init+0xe4>)
    80da:	8853      	ldrh	r3, [r2, #2]
    80dc:	213f      	movs	r1, #63	; 0x3f
    80de:	438b      	bics	r3, r1
    80e0:	1c19      	adds	r1, r3, #0
    80e2:	231b      	movs	r3, #27
    80e4:	430b      	orrs	r3, r1
    80e6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    80e8:	4a33      	ldr	r2, [pc, #204]	; (81b8 <TC3_init+0xe4>)
    80ea:	8853      	ldrh	r3, [r2, #2]
    80ec:	4933      	ldr	r1, [pc, #204]	; (81bc <TC3_init+0xe8>)
    80ee:	400b      	ands	r3, r1
    80f0:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    80f2:	4a31      	ldr	r2, [pc, #196]	; (81b8 <TC3_init+0xe4>)
    80f4:	8853      	ldrh	r3, [r2, #2]
    80f6:	2180      	movs	r1, #128	; 0x80
    80f8:	01c9      	lsls	r1, r1, #7
    80fa:	430b      	orrs	r3, r1
    80fc:	8053      	strh	r3, [r2, #2]

	PM->APBCSEL.bit.APBCDIV=0x00;
    80fe:	4a30      	ldr	r2, [pc, #192]	; (81c0 <TC3_init+0xec>)
    8100:	7ad3      	ldrb	r3, [r2, #11]
    8102:	2107      	movs	r1, #7
    8104:	438b      	bics	r3, r1
    8106:	72d3      	strb	r3, [r2, #11]
	PM->APBCMASK.bit.TC3_  =0x01; //
    8108:	4a2d      	ldr	r2, [pc, #180]	; (81c0 <TC3_init+0xec>)
    810a:	6a13      	ldr	r3, [r2, #32]
    810c:	2180      	movs	r1, #128	; 0x80
    810e:	0109      	lsls	r1, r1, #4
    8110:	430b      	orrs	r3, r1
    8112:	6213      	str	r3, [r2, #32]

	TC3->COUNT16.CTRLA.bit.MODE     =0x0; // Bits 3:2   - MODE: (0-Counter in 16-bit mode)
    8114:	4a2b      	ldr	r2, [pc, #172]	; (81c4 <TC3_init+0xf0>)
    8116:	8813      	ldrh	r3, [r2, #0]
    8118:	210c      	movs	r1, #12
    811a:	438b      	bics	r3, r1
    811c:	8013      	strh	r3, [r2, #0]
	if (PROC_HERZ == 8000000)	{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV16_Val; }
	else						{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV64_Val;}
    811e:	4a29      	ldr	r2, [pc, #164]	; (81c4 <TC3_init+0xf0>)
    8120:	8813      	ldrh	r3, [r2, #0]
    8122:	4929      	ldr	r1, [pc, #164]	; (81c8 <TC3_init+0xf4>)
    8124:	400b      	ands	r3, r1
    8126:	1c19      	adds	r1, r3, #0
    8128:	23a0      	movs	r3, #160	; 0xa0
    812a:	00db      	lsls	r3, r3, #3
    812c:	430b      	orrs	r3, r1
    812e:	8013      	strh	r3, [r2, #0]
		
	
	TC3->COUNT16.CTRLA.bit.PRESCSYNC=0x00; // Bits 13:12 - PRESCSYNC: Prescaler and Counter Synchronization (Reload or reset the counter on next generic clock)
    8130:	4a24      	ldr	r2, [pc, #144]	; (81c4 <TC3_init+0xf0>)
    8132:	8813      	ldrh	r3, [r2, #0]
    8134:	4925      	ldr	r1, [pc, #148]	; (81cc <TC3_init+0xf8>)
    8136:	400b      	ands	r3, r1
    8138:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.WAVEGEN  =0x01; // Bits 6:5   - WAVEGEN: Waveform Generation Operation
    813a:	4a22      	ldr	r2, [pc, #136]	; (81c4 <TC3_init+0xf0>)
    813c:	8813      	ldrh	r3, [r2, #0]
    813e:	2160      	movs	r1, #96	; 0x60
    8140:	438b      	bics	r3, r1
    8142:	1c19      	adds	r1, r3, #0
    8144:	2320      	movs	r3, #32
    8146:	430b      	orrs	r3, r1
    8148:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    814a:	4b1e      	ldr	r3, [pc, #120]	; (81c4 <TC3_init+0xf0>)
    814c:	2201      	movs	r2, #1
    814e:	4252      	negs	r2, r2
    8150:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    8152:	4b1c      	ldr	r3, [pc, #112]	; (81c4 <TC3_init+0xf0>)
    8154:	2201      	movs	r2, #1
    8156:	4252      	negs	r2, r2
    8158:	835a      	strh	r2, [r3, #26]

	//TC3->COUNT16.CTRLBSET.bit.ONESHOT=0x00; // Bit 2 - ONESHOT: One-Shot (1: The timer/counter will wrap around and stop on the next underflow/overflow condition.)
	TC3->COUNT16.CTRLBSET.bit.DIR    =0x00; // Bit 0 - DIR: Counter Direction (0: The timer/counter is counting up (incrementing))
    815a:	4a1a      	ldr	r2, [pc, #104]	; (81c4 <TC3_init+0xf0>)
    815c:	7953      	ldrb	r3, [r2, #5]
    815e:	2101      	movs	r1, #1
    8160:	438b      	bics	r3, r1
    8162:	7153      	strb	r3, [r2, #5]
	TC3->COUNT16.CTRLA.bit.ENABLE    =0x01; // Bit 1 - ENABLE: Enable
    8164:	4a17      	ldr	r2, [pc, #92]	; (81c4 <TC3_init+0xf0>)
    8166:	8813      	ldrh	r3, [r2, #0]
    8168:	2102      	movs	r1, #2
    816a:	430b      	orrs	r3, r1
    816c:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    816e:	4b15      	ldr	r3, [pc, #84]	; (81c4 <TC3_init+0xf0>)
    8170:	2201      	movs	r2, #1
    8172:	4252      	negs	r2, r2
    8174:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    8176:	4b13      	ldr	r3, [pc, #76]	; (81c4 <TC3_init+0xf0>)
    8178:	2201      	movs	r2, #1
    817a:	4252      	negs	r2, r2
    817c:	835a      	strh	r2, [r3, #26]
	
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 0x01); // wait for TC3 to be enabled
    817e:	46c0      	nop			; (mov r8, r8)
    8180:	4b10      	ldr	r3, [pc, #64]	; (81c4 <TC3_init+0xf0>)
    8182:	7bdb      	ldrb	r3, [r3, #15]
    8184:	061b      	lsls	r3, r3, #24
    8186:	0fdb      	lsrs	r3, r3, #31
    8188:	b2db      	uxtb	r3, r3
    818a:	2b01      	cmp	r3, #1
    818c:	d0f8      	beq.n	8180 <TC3_init+0xac>

	NVIC_DisableIRQ(TC3_IRQn);					// Disable the interrupt
    818e:	2012      	movs	r0, #18
    8190:	f7ff fe9e 	bl	7ed0 <__NVIC_DisableIRQ>
	//TC3->COUNT16.INTENSET.bit.MC0=0x01;	// Enable match interrupts on compare channel 0
	TC3->COUNT16.INTENSET.bit.OVF=0x01;
    8194:	4a0b      	ldr	r2, [pc, #44]	; (81c4 <TC3_init+0xf0>)
    8196:	7b53      	ldrb	r3, [r2, #13]
    8198:	2101      	movs	r1, #1
    819a:	430b      	orrs	r3, r1
    819c:	7353      	strb	r3, [r2, #13]
	NVIC_SetPriority(TC3_IRQn, 0);			// Set the interrupt priority to lowest value
    819e:	2100      	movs	r1, #0
    81a0:	2012      	movs	r0, #18
    81a2:	f7ff feb5 	bl	7f10 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TC3_IRQn);						// Enable the interrupt
    81a6:	2012      	movs	r0, #18
    81a8:	f7ff fe78 	bl	7e9c <__NVIC_EnableIRQ>
	
	TC3_start(TC3_100mk);
    81ac:	204b      	movs	r0, #75	; 0x4b
    81ae:	f7ff ff1d 	bl	7fec <TC3_start>
}
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	46bd      	mov	sp, r7
    81b6:	bd80      	pop	{r7, pc}
    81b8:	40000c00 	.word	0x40000c00
    81bc:	fffff0ff 	.word	0xfffff0ff
    81c0:	40000400 	.word	0x40000400
    81c4:	42002c00 	.word	0x42002c00
    81c8:	fffff8ff 	.word	0xfffff8ff
    81cc:	ffffcfff 	.word	0xffffcfff

000081d0 <wait>:


	void wait(DWORD time_100mk)
	{
    81d0:	b580      	push	{r7, lr}
    81d2:	b082      	sub	sp, #8
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	time_wait=0;
    81d8:	4b10      	ldr	r3, [pc, #64]	; (821c <wait+0x4c>)
    81da:	2200      	movs	r2, #0
    81dc:	601a      	str	r2, [r3, #0]
	while(1){if(reset   == NULL) 
    81de:	4b10      	ldr	r3, [pc, #64]	; (8220 <wait+0x50>)
    81e0:	881b      	ldrh	r3, [r3, #0]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d10e      	bne.n	8204 <wait+0x34>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    81e6:	4b0f      	ldr	r3, [pc, #60]	; (8224 <wait+0x54>)
    81e8:	799b      	ldrb	r3, [r3, #6]
    81ea:	07db      	lsls	r3, r3, #31
    81ec:	0fdb      	lsrs	r3, r3, #31
    81ee:	b2db      	uxtb	r3, r3
    81f0:	2b01      	cmp	r3, #1
    81f2:	d107      	bne.n	8204 <wait+0x34>
    81f4:	4a0b      	ldr	r2, [pc, #44]	; (8224 <wait+0x54>)
    81f6:	7993      	ldrb	r3, [r2, #6]
    81f8:	2101      	movs	r1, #1
    81fa:	430b      	orrs	r3, r1
    81fc:	7193      	strb	r3, [r2, #6]
    81fe:	4b09      	ldr	r3, [pc, #36]	; (8224 <wait+0x54>)
    8200:	22a5      	movs	r2, #165	; 0xa5
    8202:	721a      	strb	r2, [r3, #8]
    8204:	4b05      	ldr	r3, [pc, #20]	; (821c <wait+0x4c>)
    8206:	681a      	ldr	r2, [r3, #0]
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	429a      	cmp	r2, r3
    820c:	d800      	bhi.n	8210 <wait+0x40>
	while(1){if(reset   == NULL) 
    820e:	e7e6      	b.n	81de <wait+0xe>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    8210:	46c0      	nop			; (mov r8, r8)
	}
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	46bd      	mov	sp, r7
    8216:	b002      	add	sp, #8
    8218:	bd80      	pop	{r7, pc}
    821a:	46c0      	nop			; (mov r8, r8)
    821c:	200031f8 	.word	0x200031f8
    8220:	20002548 	.word	0x20002548
    8224:	40001000 	.word	0x40001000

00008228 <tc3_process>:
	
	
	
	void tc3_process(void)
	//-----------------------------------------------------------------------------
	{
    8228:	b5b0      	push	{r4, r5, r7, lr}
    822a:	af00      	add	r7, sp, #0
		if(!tc3_cnt) {return;}
    822c:	4b9e      	ldr	r3, [pc, #632]	; (84a8 <tc3_process+0x280>)
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	2b00      	cmp	r3, #0
    8232:	d100      	bne.n	8236 <tc3_process+0xe>
    8234:	e135      	b.n	84a2 <tc3_process+0x27a>
			
		if(port[0].time_port){port[0].time_port--;}
    8236:	4a9d      	ldr	r2, [pc, #628]	; (84ac <tc3_process+0x284>)
    8238:	2388      	movs	r3, #136	; 0x88
    823a:	009b      	lsls	r3, r3, #2
    823c:	58d3      	ldr	r3, [r2, r3]
    823e:	2b00      	cmp	r3, #0
    8240:	d008      	beq.n	8254 <tc3_process+0x2c>
    8242:	4a9a      	ldr	r2, [pc, #616]	; (84ac <tc3_process+0x284>)
    8244:	2388      	movs	r3, #136	; 0x88
    8246:	009b      	lsls	r3, r3, #2
    8248:	58d3      	ldr	r3, [r2, r3]
    824a:	1e59      	subs	r1, r3, #1
    824c:	4a97      	ldr	r2, [pc, #604]	; (84ac <tc3_process+0x284>)
    824e:	2388      	movs	r3, #136	; 0x88
    8250:	009b      	lsls	r3, r3, #2
    8252:	50d1      	str	r1, [r2, r3]
		if(port[1].time_port){port[1].time_port--;}
    8254:	4a95      	ldr	r2, [pc, #596]	; (84ac <tc3_process+0x284>)
    8256:	238c      	movs	r3, #140	; 0x8c
    8258:	00db      	lsls	r3, r3, #3
    825a:	58d3      	ldr	r3, [r2, r3]
    825c:	2b00      	cmp	r3, #0
    825e:	d008      	beq.n	8272 <tc3_process+0x4a>
    8260:	4a92      	ldr	r2, [pc, #584]	; (84ac <tc3_process+0x284>)
    8262:	238c      	movs	r3, #140	; 0x8c
    8264:	00db      	lsls	r3, r3, #3
    8266:	58d3      	ldr	r3, [r2, r3]
    8268:	1e59      	subs	r1, r3, #1
    826a:	4a90      	ldr	r2, [pc, #576]	; (84ac <tc3_process+0x284>)
    826c:	238c      	movs	r3, #140	; 0x8c
    826e:	00db      	lsls	r3, r3, #3
    8270:	50d1      	str	r1, [r2, r3]
		if(port[2].time_port){port[2].time_port--;}
    8272:	4a8e      	ldr	r2, [pc, #568]	; (84ac <tc3_process+0x284>)
    8274:	23d4      	movs	r3, #212	; 0xd4
    8276:	00db      	lsls	r3, r3, #3
    8278:	58d3      	ldr	r3, [r2, r3]
    827a:	2b00      	cmp	r3, #0
    827c:	d008      	beq.n	8290 <tc3_process+0x68>
    827e:	4a8b      	ldr	r2, [pc, #556]	; (84ac <tc3_process+0x284>)
    8280:	23d4      	movs	r3, #212	; 0xd4
    8282:	00db      	lsls	r3, r3, #3
    8284:	58d3      	ldr	r3, [r2, r3]
    8286:	1e59      	subs	r1, r3, #1
    8288:	4a88      	ldr	r2, [pc, #544]	; (84ac <tc3_process+0x284>)
    828a:	23d4      	movs	r3, #212	; 0xd4
    828c:	00db      	lsls	r3, r3, #3
    828e:	50d1      	str	r1, [r2, r3]
		if(port[3].time_port){port[3].time_port--;}
    8290:	4a86      	ldr	r2, [pc, #536]	; (84ac <tc3_process+0x284>)
    8292:	238e      	movs	r3, #142	; 0x8e
    8294:	011b      	lsls	r3, r3, #4
    8296:	58d3      	ldr	r3, [r2, r3]
    8298:	2b00      	cmp	r3, #0
    829a:	d008      	beq.n	82ae <tc3_process+0x86>
    829c:	4a83      	ldr	r2, [pc, #524]	; (84ac <tc3_process+0x284>)
    829e:	238e      	movs	r3, #142	; 0x8e
    82a0:	011b      	lsls	r3, r3, #4
    82a2:	58d3      	ldr	r3, [r2, r3]
    82a4:	1e59      	subs	r1, r3, #1
    82a6:	4a81      	ldr	r2, [pc, #516]	; (84ac <tc3_process+0x284>)
    82a8:	238e      	movs	r3, #142	; 0x8e
    82aa:	011b      	lsls	r3, r3, #4
    82ac:	50d1      	str	r1, [r2, r3]
			
		
				
		if(eth_sock[0].time_wait_SEND_OK){eth_sock[0].time_wait_SEND_OK--;}
    82ae:	4b80      	ldr	r3, [pc, #512]	; (84b0 <tc3_process+0x288>)
    82b0:	4a80      	ldr	r2, [pc, #512]	; (84b4 <tc3_process+0x28c>)
    82b2:	5c9a      	ldrb	r2, [r3, r2]
    82b4:	4980      	ldr	r1, [pc, #512]	; (84b8 <tc3_process+0x290>)
    82b6:	5c5b      	ldrb	r3, [r3, r1]
    82b8:	021b      	lsls	r3, r3, #8
    82ba:	4313      	orrs	r3, r2
    82bc:	b29b      	uxth	r3, r3
    82be:	2b00      	cmp	r3, #0
    82c0:	d01f      	beq.n	8302 <tc3_process+0xda>
    82c2:	4b7b      	ldr	r3, [pc, #492]	; (84b0 <tc3_process+0x288>)
    82c4:	4a7b      	ldr	r2, [pc, #492]	; (84b4 <tc3_process+0x28c>)
    82c6:	5c9a      	ldrb	r2, [r3, r2]
    82c8:	497b      	ldr	r1, [pc, #492]	; (84b8 <tc3_process+0x290>)
    82ca:	5c5b      	ldrb	r3, [r3, r1]
    82cc:	021b      	lsls	r3, r3, #8
    82ce:	4313      	orrs	r3, r2
    82d0:	b29b      	uxth	r3, r3
    82d2:	3b01      	subs	r3, #1
    82d4:	b299      	uxth	r1, r3
    82d6:	4b76      	ldr	r3, [pc, #472]	; (84b0 <tc3_process+0x288>)
    82d8:	4a76      	ldr	r2, [pc, #472]	; (84b4 <tc3_process+0x28c>)
    82da:	20ff      	movs	r0, #255	; 0xff
    82dc:	4008      	ands	r0, r1
    82de:	0005      	movs	r5, r0
    82e0:	5c98      	ldrb	r0, [r3, r2]
    82e2:	2400      	movs	r4, #0
    82e4:	4020      	ands	r0, r4
    82e6:	1c04      	adds	r4, r0, #0
    82e8:	1c28      	adds	r0, r5, #0
    82ea:	4320      	orrs	r0, r4
    82ec:	5498      	strb	r0, [r3, r2]
    82ee:	0a09      	lsrs	r1, r1, #8
    82f0:	b288      	uxth	r0, r1
    82f2:	189b      	adds	r3, r3, r2
    82f4:	785a      	ldrb	r2, [r3, #1]
    82f6:	2100      	movs	r1, #0
    82f8:	400a      	ands	r2, r1
    82fa:	1c11      	adds	r1, r2, #0
    82fc:	1c02      	adds	r2, r0, #0
    82fe:	430a      	orrs	r2, r1
    8300:	705a      	strb	r2, [r3, #1]
		if(eth_sock[1].time_wait_SEND_OK){eth_sock[1].time_wait_SEND_OK--;}
    8302:	4b6b      	ldr	r3, [pc, #428]	; (84b0 <tc3_process+0x288>)
    8304:	4a6d      	ldr	r2, [pc, #436]	; (84bc <tc3_process+0x294>)
    8306:	5c9a      	ldrb	r2, [r3, r2]
    8308:	496d      	ldr	r1, [pc, #436]	; (84c0 <tc3_process+0x298>)
    830a:	5c5b      	ldrb	r3, [r3, r1]
    830c:	021b      	lsls	r3, r3, #8
    830e:	4313      	orrs	r3, r2
    8310:	b29b      	uxth	r3, r3
    8312:	2b00      	cmp	r3, #0
    8314:	d01f      	beq.n	8356 <tc3_process+0x12e>
    8316:	4b66      	ldr	r3, [pc, #408]	; (84b0 <tc3_process+0x288>)
    8318:	4a68      	ldr	r2, [pc, #416]	; (84bc <tc3_process+0x294>)
    831a:	5c9a      	ldrb	r2, [r3, r2]
    831c:	4968      	ldr	r1, [pc, #416]	; (84c0 <tc3_process+0x298>)
    831e:	5c5b      	ldrb	r3, [r3, r1]
    8320:	021b      	lsls	r3, r3, #8
    8322:	4313      	orrs	r3, r2
    8324:	b29b      	uxth	r3, r3
    8326:	3b01      	subs	r3, #1
    8328:	b299      	uxth	r1, r3
    832a:	4b61      	ldr	r3, [pc, #388]	; (84b0 <tc3_process+0x288>)
    832c:	4a63      	ldr	r2, [pc, #396]	; (84bc <tc3_process+0x294>)
    832e:	20ff      	movs	r0, #255	; 0xff
    8330:	4008      	ands	r0, r1
    8332:	0005      	movs	r5, r0
    8334:	5c98      	ldrb	r0, [r3, r2]
    8336:	2400      	movs	r4, #0
    8338:	4020      	ands	r0, r4
    833a:	1c04      	adds	r4, r0, #0
    833c:	1c28      	adds	r0, r5, #0
    833e:	4320      	orrs	r0, r4
    8340:	5498      	strb	r0, [r3, r2]
    8342:	0a09      	lsrs	r1, r1, #8
    8344:	b288      	uxth	r0, r1
    8346:	189b      	adds	r3, r3, r2
    8348:	785a      	ldrb	r2, [r3, #1]
    834a:	2100      	movs	r1, #0
    834c:	400a      	ands	r2, r1
    834e:	1c11      	adds	r1, r2, #0
    8350:	1c02      	adds	r2, r0, #0
    8352:	430a      	orrs	r2, r1
    8354:	705a      	strb	r2, [r3, #1]
		if(eth_sock[2].time_wait_SEND_OK){eth_sock[2].time_wait_SEND_OK--;}
    8356:	4b56      	ldr	r3, [pc, #344]	; (84b0 <tc3_process+0x288>)
    8358:	4a5a      	ldr	r2, [pc, #360]	; (84c4 <tc3_process+0x29c>)
    835a:	5c9a      	ldrb	r2, [r3, r2]
    835c:	495a      	ldr	r1, [pc, #360]	; (84c8 <tc3_process+0x2a0>)
    835e:	5c5b      	ldrb	r3, [r3, r1]
    8360:	021b      	lsls	r3, r3, #8
    8362:	4313      	orrs	r3, r2
    8364:	b29b      	uxth	r3, r3
    8366:	2b00      	cmp	r3, #0
    8368:	d01f      	beq.n	83aa <tc3_process+0x182>
    836a:	4b51      	ldr	r3, [pc, #324]	; (84b0 <tc3_process+0x288>)
    836c:	4a55      	ldr	r2, [pc, #340]	; (84c4 <tc3_process+0x29c>)
    836e:	5c9a      	ldrb	r2, [r3, r2]
    8370:	4955      	ldr	r1, [pc, #340]	; (84c8 <tc3_process+0x2a0>)
    8372:	5c5b      	ldrb	r3, [r3, r1]
    8374:	021b      	lsls	r3, r3, #8
    8376:	4313      	orrs	r3, r2
    8378:	b29b      	uxth	r3, r3
    837a:	3b01      	subs	r3, #1
    837c:	b299      	uxth	r1, r3
    837e:	4b4c      	ldr	r3, [pc, #304]	; (84b0 <tc3_process+0x288>)
    8380:	4a50      	ldr	r2, [pc, #320]	; (84c4 <tc3_process+0x29c>)
    8382:	20ff      	movs	r0, #255	; 0xff
    8384:	4008      	ands	r0, r1
    8386:	0005      	movs	r5, r0
    8388:	5c98      	ldrb	r0, [r3, r2]
    838a:	2400      	movs	r4, #0
    838c:	4020      	ands	r0, r4
    838e:	1c04      	adds	r4, r0, #0
    8390:	1c28      	adds	r0, r5, #0
    8392:	4320      	orrs	r0, r4
    8394:	5498      	strb	r0, [r3, r2]
    8396:	0a09      	lsrs	r1, r1, #8
    8398:	b288      	uxth	r0, r1
    839a:	189b      	adds	r3, r3, r2
    839c:	785a      	ldrb	r2, [r3, #1]
    839e:	2100      	movs	r1, #0
    83a0:	400a      	ands	r2, r1
    83a2:	1c11      	adds	r1, r2, #0
    83a4:	1c02      	adds	r2, r0, #0
    83a6:	430a      	orrs	r2, r1
    83a8:	705a      	strb	r2, [r3, #1]
		if(eth_sock[3].time_wait_SEND_OK){eth_sock[3].time_wait_SEND_OK--;}
    83aa:	4b41      	ldr	r3, [pc, #260]	; (84b0 <tc3_process+0x288>)
    83ac:	4a47      	ldr	r2, [pc, #284]	; (84cc <tc3_process+0x2a4>)
    83ae:	5c9a      	ldrb	r2, [r3, r2]
    83b0:	4947      	ldr	r1, [pc, #284]	; (84d0 <tc3_process+0x2a8>)
    83b2:	5c5b      	ldrb	r3, [r3, r1]
    83b4:	021b      	lsls	r3, r3, #8
    83b6:	4313      	orrs	r3, r2
    83b8:	b29b      	uxth	r3, r3
    83ba:	2b00      	cmp	r3, #0
    83bc:	d01f      	beq.n	83fe <tc3_process+0x1d6>
    83be:	4b3c      	ldr	r3, [pc, #240]	; (84b0 <tc3_process+0x288>)
    83c0:	4a42      	ldr	r2, [pc, #264]	; (84cc <tc3_process+0x2a4>)
    83c2:	5c9a      	ldrb	r2, [r3, r2]
    83c4:	4942      	ldr	r1, [pc, #264]	; (84d0 <tc3_process+0x2a8>)
    83c6:	5c5b      	ldrb	r3, [r3, r1]
    83c8:	021b      	lsls	r3, r3, #8
    83ca:	4313      	orrs	r3, r2
    83cc:	b29b      	uxth	r3, r3
    83ce:	3b01      	subs	r3, #1
    83d0:	b299      	uxth	r1, r3
    83d2:	4b37      	ldr	r3, [pc, #220]	; (84b0 <tc3_process+0x288>)
    83d4:	4a3d      	ldr	r2, [pc, #244]	; (84cc <tc3_process+0x2a4>)
    83d6:	20ff      	movs	r0, #255	; 0xff
    83d8:	4008      	ands	r0, r1
    83da:	0005      	movs	r5, r0
    83dc:	5c98      	ldrb	r0, [r3, r2]
    83de:	2400      	movs	r4, #0
    83e0:	4020      	ands	r0, r4
    83e2:	1c04      	adds	r4, r0, #0
    83e4:	1c28      	adds	r0, r5, #0
    83e6:	4320      	orrs	r0, r4
    83e8:	5498      	strb	r0, [r3, r2]
    83ea:	0a09      	lsrs	r1, r1, #8
    83ec:	b288      	uxth	r0, r1
    83ee:	189b      	adds	r3, r3, r2
    83f0:	785a      	ldrb	r2, [r3, #1]
    83f2:	2100      	movs	r1, #0
    83f4:	400a      	ands	r2, r1
    83f6:	1c11      	adds	r1, r2, #0
    83f8:	1c02      	adds	r2, r0, #0
    83fa:	430a      	orrs	r2, r1
    83fc:	705a      	strb	r2, [r3, #1]
		if(eth_sock[4].time_wait_SEND_OK){eth_sock[4].time_wait_SEND_OK--;}	
    83fe:	4b2c      	ldr	r3, [pc, #176]	; (84b0 <tc3_process+0x288>)
    8400:	4a34      	ldr	r2, [pc, #208]	; (84d4 <tc3_process+0x2ac>)
    8402:	5c9a      	ldrb	r2, [r3, r2]
    8404:	4934      	ldr	r1, [pc, #208]	; (84d8 <tc3_process+0x2b0>)
    8406:	5c5b      	ldrb	r3, [r3, r1]
    8408:	021b      	lsls	r3, r3, #8
    840a:	4313      	orrs	r3, r2
    840c:	b29b      	uxth	r3, r3
    840e:	2b00      	cmp	r3, #0
    8410:	d01f      	beq.n	8452 <tc3_process+0x22a>
    8412:	4b27      	ldr	r3, [pc, #156]	; (84b0 <tc3_process+0x288>)
    8414:	4a2f      	ldr	r2, [pc, #188]	; (84d4 <tc3_process+0x2ac>)
    8416:	5c9a      	ldrb	r2, [r3, r2]
    8418:	492f      	ldr	r1, [pc, #188]	; (84d8 <tc3_process+0x2b0>)
    841a:	5c5b      	ldrb	r3, [r3, r1]
    841c:	021b      	lsls	r3, r3, #8
    841e:	4313      	orrs	r3, r2
    8420:	b29b      	uxth	r3, r3
    8422:	3b01      	subs	r3, #1
    8424:	b299      	uxth	r1, r3
    8426:	4b22      	ldr	r3, [pc, #136]	; (84b0 <tc3_process+0x288>)
    8428:	4a2a      	ldr	r2, [pc, #168]	; (84d4 <tc3_process+0x2ac>)
    842a:	20ff      	movs	r0, #255	; 0xff
    842c:	4008      	ands	r0, r1
    842e:	0005      	movs	r5, r0
    8430:	5c98      	ldrb	r0, [r3, r2]
    8432:	2400      	movs	r4, #0
    8434:	4020      	ands	r0, r4
    8436:	1c04      	adds	r4, r0, #0
    8438:	1c28      	adds	r0, r5, #0
    843a:	4320      	orrs	r0, r4
    843c:	5498      	strb	r0, [r3, r2]
    843e:	0a09      	lsrs	r1, r1, #8
    8440:	b288      	uxth	r0, r1
    8442:	189b      	adds	r3, r3, r2
    8444:	785a      	ldrb	r2, [r3, #1]
    8446:	2100      	movs	r1, #0
    8448:	400a      	ands	r2, r1
    844a:	1c11      	adds	r1, r2, #0
    844c:	1c02      	adds	r2, r0, #0
    844e:	430a      	orrs	r2, r1
    8450:	705a      	strb	r2, [r3, #1]
		
		loggin_timeout++;
    8452:	4b22      	ldr	r3, [pc, #136]	; (84dc <tc3_process+0x2b4>)
    8454:	681b      	ldr	r3, [r3, #0]
    8456:	1c5a      	adds	r2, r3, #1
    8458:	4b20      	ldr	r3, [pc, #128]	; (84dc <tc3_process+0x2b4>)
    845a:	601a      	str	r2, [r3, #0]
		time_100mk=time_100mk+tc3_cnt;	
    845c:	4b20      	ldr	r3, [pc, #128]	; (84e0 <tc3_process+0x2b8>)
    845e:	681a      	ldr	r2, [r3, #0]
    8460:	4b11      	ldr	r3, [pc, #68]	; (84a8 <tc3_process+0x280>)
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	18d2      	adds	r2, r2, r3
    8466:	4b1e      	ldr	r3, [pc, #120]	; (84e0 <tc3_process+0x2b8>)
    8468:	601a      	str	r2, [r3, #0]
		if(time_100mk>=10000)
    846a:	4b1d      	ldr	r3, [pc, #116]	; (84e0 <tc3_process+0x2b8>)
    846c:	681b      	ldr	r3, [r3, #0]
    846e:	4a1d      	ldr	r2, [pc, #116]	; (84e4 <tc3_process+0x2bc>)
    8470:	4293      	cmp	r3, r2
    8472:	d912      	bls.n	849a <tc3_process+0x272>
		{time_100mk=0;TTL++; if(ger_wait){ger_wait--;} check_gerkon();}
    8474:	4b1a      	ldr	r3, [pc, #104]	; (84e0 <tc3_process+0x2b8>)
    8476:	2200      	movs	r2, #0
    8478:	601a      	str	r2, [r3, #0]
    847a:	4b1b      	ldr	r3, [pc, #108]	; (84e8 <tc3_process+0x2c0>)
    847c:	681b      	ldr	r3, [r3, #0]
    847e:	1c5a      	adds	r2, r3, #1
    8480:	4b19      	ldr	r3, [pc, #100]	; (84e8 <tc3_process+0x2c0>)
    8482:	601a      	str	r2, [r3, #0]
    8484:	4b19      	ldr	r3, [pc, #100]	; (84ec <tc3_process+0x2c4>)
    8486:	681b      	ldr	r3, [r3, #0]
    8488:	2b00      	cmp	r3, #0
    848a:	d004      	beq.n	8496 <tc3_process+0x26e>
    848c:	4b17      	ldr	r3, [pc, #92]	; (84ec <tc3_process+0x2c4>)
    848e:	681b      	ldr	r3, [r3, #0]
    8490:	1e5a      	subs	r2, r3, #1
    8492:	4b16      	ldr	r3, [pc, #88]	; (84ec <tc3_process+0x2c4>)
    8494:	601a      	str	r2, [r3, #0]
    8496:	4b16      	ldr	r3, [pc, #88]	; (84f0 <tc3_process+0x2c8>)
    8498:	4798      	blx	r3
		
		tc3_cnt=0;		
    849a:	4b03      	ldr	r3, [pc, #12]	; (84a8 <tc3_process+0x280>)
    849c:	2200      	movs	r2, #0
    849e:	601a      	str	r2, [r3, #0]
    84a0:	e000      	b.n	84a4 <tc3_process+0x27c>
		if(!tc3_cnt) {return;}
    84a2:	46c0      	nop			; (mov r8, r8)
		
	}
    84a4:	46bd      	mov	sp, r7
    84a6:	bdb0      	pop	{r4, r5, r7, pc}
    84a8:	2000046c 	.word	0x2000046c
    84ac:	200031fc 	.word	0x200031fc
    84b0:	200005cc 	.word	0x200005cc
    84b4:	000005e3 	.word	0x000005e3
    84b8:	000005e4 	.word	0x000005e4
    84bc:	00000bc8 	.word	0x00000bc8
    84c0:	00000bc9 	.word	0x00000bc9
    84c4:	000011ad 	.word	0x000011ad
    84c8:	000011ae 	.word	0x000011ae
    84cc:	00001792 	.word	0x00001792
    84d0:	00001793 	.word	0x00001793
    84d4:	00001d77 	.word	0x00001d77
    84d8:	00001d78 	.word	0x00001d78
    84dc:	20000470 	.word	0x20000470
    84e0:	20000478 	.word	0x20000478
    84e4:	0000270f 	.word	0x0000270f
    84e8:	2000047c 	.word	0x2000047c
    84ec:	20000474 	.word	0x20000474
    84f0:	00006f19 	.word	0x00006f19

000084f4 <__NVIC_EnableIRQ>:
{
    84f4:	b580      	push	{r7, lr}
    84f6:	b082      	sub	sp, #8
    84f8:	af00      	add	r7, sp, #0
    84fa:	0002      	movs	r2, r0
    84fc:	1dfb      	adds	r3, r7, #7
    84fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8500:	1dfb      	adds	r3, r7, #7
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2b7f      	cmp	r3, #127	; 0x7f
    8506:	d809      	bhi.n	851c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8508:	4b06      	ldr	r3, [pc, #24]	; (8524 <__NVIC_EnableIRQ+0x30>)
    850a:	1dfa      	adds	r2, r7, #7
    850c:	7812      	ldrb	r2, [r2, #0]
    850e:	0011      	movs	r1, r2
    8510:	221f      	movs	r2, #31
    8512:	400a      	ands	r2, r1
    8514:	2101      	movs	r1, #1
    8516:	4091      	lsls	r1, r2
    8518:	000a      	movs	r2, r1
    851a:	601a      	str	r2, [r3, #0]
}
    851c:	46c0      	nop			; (mov r8, r8)
    851e:	46bd      	mov	sp, r7
    8520:	b002      	add	sp, #8
    8522:	bd80      	pop	{r7, pc}
    8524:	e000e100 	.word	0xe000e100

00008528 <__NVIC_DisableIRQ>:
{
    8528:	b580      	push	{r7, lr}
    852a:	b082      	sub	sp, #8
    852c:	af00      	add	r7, sp, #0
    852e:	0002      	movs	r2, r0
    8530:	1dfb      	adds	r3, r7, #7
    8532:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8534:	1dfb      	adds	r3, r7, #7
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	2b7f      	cmp	r3, #127	; 0x7f
    853a:	d80e      	bhi.n	855a <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    853c:	4909      	ldr	r1, [pc, #36]	; (8564 <__NVIC_DisableIRQ+0x3c>)
    853e:	1dfb      	adds	r3, r7, #7
    8540:	781b      	ldrb	r3, [r3, #0]
    8542:	001a      	movs	r2, r3
    8544:	231f      	movs	r3, #31
    8546:	4013      	ands	r3, r2
    8548:	2201      	movs	r2, #1
    854a:	409a      	lsls	r2, r3
    854c:	0013      	movs	r3, r2
    854e:	2280      	movs	r2, #128	; 0x80
    8550:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    8552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8556:	f3bf 8f6f 	isb	sy
}
    855a:	46c0      	nop			; (mov r8, r8)
    855c:	46bd      	mov	sp, r7
    855e:	b002      	add	sp, #8
    8560:	bd80      	pop	{r7, pc}
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	e000e100 	.word	0xe000e100

00008568 <__NVIC_SetPriority>:
{
    8568:	b5b0      	push	{r4, r5, r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	0002      	movs	r2, r0
    8570:	6039      	str	r1, [r7, #0]
    8572:	1dfb      	adds	r3, r7, #7
    8574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8576:	1dfb      	adds	r3, r7, #7
    8578:	781b      	ldrb	r3, [r3, #0]
    857a:	2b7f      	cmp	r3, #127	; 0x7f
    857c:	d828      	bhi.n	85d0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    857e:	4c2f      	ldr	r4, [pc, #188]	; (863c <__NVIC_SetPriority+0xd4>)
    8580:	1dfb      	adds	r3, r7, #7
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	b25b      	sxtb	r3, r3
    8586:	089b      	lsrs	r3, r3, #2
    8588:	492c      	ldr	r1, [pc, #176]	; (863c <__NVIC_SetPriority+0xd4>)
    858a:	1dfa      	adds	r2, r7, #7
    858c:	7812      	ldrb	r2, [r2, #0]
    858e:	b252      	sxtb	r2, r2
    8590:	0892      	lsrs	r2, r2, #2
    8592:	32c0      	adds	r2, #192	; 0xc0
    8594:	0092      	lsls	r2, r2, #2
    8596:	5852      	ldr	r2, [r2, r1]
    8598:	1df9      	adds	r1, r7, #7
    859a:	7809      	ldrb	r1, [r1, #0]
    859c:	0008      	movs	r0, r1
    859e:	2103      	movs	r1, #3
    85a0:	4001      	ands	r1, r0
    85a2:	00c9      	lsls	r1, r1, #3
    85a4:	20ff      	movs	r0, #255	; 0xff
    85a6:	4088      	lsls	r0, r1
    85a8:	0001      	movs	r1, r0
    85aa:	43c9      	mvns	r1, r1
    85ac:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    85ae:	683a      	ldr	r2, [r7, #0]
    85b0:	0192      	lsls	r2, r2, #6
    85b2:	20ff      	movs	r0, #255	; 0xff
    85b4:	4010      	ands	r0, r2
    85b6:	1dfa      	adds	r2, r7, #7
    85b8:	7812      	ldrb	r2, [r2, #0]
    85ba:	0015      	movs	r5, r2
    85bc:	2203      	movs	r2, #3
    85be:	402a      	ands	r2, r5
    85c0:	00d2      	lsls	r2, r2, #3
    85c2:	4090      	lsls	r0, r2
    85c4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85c6:	430a      	orrs	r2, r1
    85c8:	33c0      	adds	r3, #192	; 0xc0
    85ca:	009b      	lsls	r3, r3, #2
    85cc:	511a      	str	r2, [r3, r4]
}
    85ce:	e031      	b.n	8634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85d0:	4c1b      	ldr	r4, [pc, #108]	; (8640 <__NVIC_SetPriority+0xd8>)
    85d2:	1dfb      	adds	r3, r7, #7
    85d4:	781b      	ldrb	r3, [r3, #0]
    85d6:	001a      	movs	r2, r3
    85d8:	230f      	movs	r3, #15
    85da:	4013      	ands	r3, r2
    85dc:	3b08      	subs	r3, #8
    85de:	0899      	lsrs	r1, r3, #2
    85e0:	4a17      	ldr	r2, [pc, #92]	; (8640 <__NVIC_SetPriority+0xd8>)
    85e2:	1dfb      	adds	r3, r7, #7
    85e4:	781b      	ldrb	r3, [r3, #0]
    85e6:	0018      	movs	r0, r3
    85e8:	230f      	movs	r3, #15
    85ea:	4003      	ands	r3, r0
    85ec:	3b08      	subs	r3, #8
    85ee:	089b      	lsrs	r3, r3, #2
    85f0:	3306      	adds	r3, #6
    85f2:	009b      	lsls	r3, r3, #2
    85f4:	18d3      	adds	r3, r2, r3
    85f6:	3304      	adds	r3, #4
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	1dfa      	adds	r2, r7, #7
    85fc:	7812      	ldrb	r2, [r2, #0]
    85fe:	0010      	movs	r0, r2
    8600:	2203      	movs	r2, #3
    8602:	4002      	ands	r2, r0
    8604:	00d2      	lsls	r2, r2, #3
    8606:	20ff      	movs	r0, #255	; 0xff
    8608:	4090      	lsls	r0, r2
    860a:	0002      	movs	r2, r0
    860c:	43d2      	mvns	r2, r2
    860e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    8610:	683b      	ldr	r3, [r7, #0]
    8612:	019b      	lsls	r3, r3, #6
    8614:	20ff      	movs	r0, #255	; 0xff
    8616:	4018      	ands	r0, r3
    8618:	1dfb      	adds	r3, r7, #7
    861a:	781b      	ldrb	r3, [r3, #0]
    861c:	001d      	movs	r5, r3
    861e:	2303      	movs	r3, #3
    8620:	402b      	ands	r3, r5
    8622:	00db      	lsls	r3, r3, #3
    8624:	4098      	lsls	r0, r3
    8626:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8628:	431a      	orrs	r2, r3
    862a:	1d8b      	adds	r3, r1, #6
    862c:	009b      	lsls	r3, r3, #2
    862e:	18e3      	adds	r3, r4, r3
    8630:	3304      	adds	r3, #4
    8632:	601a      	str	r2, [r3, #0]
}
    8634:	46c0      	nop			; (mov r8, r8)
    8636:	46bd      	mov	sp, r7
    8638:	b002      	add	sp, #8
    863a:	bdb0      	pop	{r4, r5, r7, pc}
    863c:	e000e100 	.word	0xe000e100
    8640:	e000ed00 	.word	0xe000ed00

00008644 <usart_init>:
#include "def.h"

volatile USART port[4];

void usart_init(void)	{for(BYTE i= 0; i < 4; i++) {init(i);}}
    8644:	b580      	push	{r7, lr}
    8646:	b082      	sub	sp, #8
    8648:	af00      	add	r7, sp, #0
    864a:	1dfb      	adds	r3, r7, #7
    864c:	2200      	movs	r2, #0
    864e:	701a      	strb	r2, [r3, #0]
    8650:	e009      	b.n	8666 <usart_init+0x22>
    8652:	1dfb      	adds	r3, r7, #7
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	0018      	movs	r0, r3
    8658:	f000 f80d 	bl	8676 <init>
    865c:	1dfb      	adds	r3, r7, #7
    865e:	781a      	ldrb	r2, [r3, #0]
    8660:	1dfb      	adds	r3, r7, #7
    8662:	3201      	adds	r2, #1
    8664:	701a      	strb	r2, [r3, #0]
    8666:	1dfb      	adds	r3, r7, #7
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2b03      	cmp	r3, #3
    866c:	d9f1      	bls.n	8652 <usart_init+0xe>
    866e:	46c0      	nop			; (mov r8, r8)
    8670:	46bd      	mov	sp, r7
    8672:	b002      	add	sp, #8
    8674:	bd80      	pop	{r7, pc}

00008676 <init>:
	
void init(BYTE n_port)
{
    8676:	b5b0      	push	{r4, r5, r7, lr}
    8678:	b088      	sub	sp, #32
    867a:	af00      	add	r7, sp, #0
    867c:	0002      	movs	r2, r0
    867e:	1dfb      	adds	r3, r7, #7
    8680:	701a      	strb	r2, [r3, #0]
	double tout = 0;
    8682:	2300      	movs	r3, #0
    8684:	2400      	movs	r4, #0
    8686:	613b      	str	r3, [r7, #16]
    8688:	617c      	str	r4, [r7, #20]
	double bsize = 0;
    868a:	2300      	movs	r3, #0
    868c:	2400      	movs	r4, #0
    868e:	60bb      	str	r3, [r7, #8]
    8690:	60fc      	str	r4, [r7, #12]
	DWORD val = 0;
    8692:	2300      	movs	r3, #0
    8694:	61fb      	str	r3, [r7, #28]
	bsize = 9;
    8696:	2300      	movs	r3, #0
    8698:	4c40      	ldr	r4, [pc, #256]	; (879c <init+0x126>)
    869a:	60bb      	str	r3, [r7, #8]
    869c:	60fc      	str	r4, [r7, #12]

	switch(n_port)
    869e:	1dfb      	adds	r3, r7, #7
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	2b01      	cmp	r3, #1
    86a4:	d030      	beq.n	8708 <init+0x92>
    86a6:	dc03      	bgt.n	86b0 <init+0x3a>
    86a8:	2b00      	cmp	r3, #0
    86aa:	d008      	beq.n	86be <init+0x48>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
			port[n_port].sercom = SERCOM1;
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
			port[n_port].irqn_sercom = SERCOM1_IRQn;
		break;
		default: /*error*/ return;
    86ac:	f000 fbe9 	bl	8e82 <init+0x80c>
	switch(n_port)
    86b0:	2b02      	cmp	r3, #2
    86b2:	d04e      	beq.n	8752 <init+0xdc>
    86b4:	2b03      	cmp	r3, #3
    86b6:	d100      	bne.n	86ba <init+0x44>
    86b8:	e07c      	b.n	87b4 <init+0x13e>
		default: /*error*/ return;
    86ba:	f000 fbe2 	bl	8e82 <init+0x80c>
			PM->APBCMASK.bit.SERCOM3_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    86be:	4a38      	ldr	r2, [pc, #224]	; (87a0 <init+0x12a>)
    86c0:	6a13      	ldr	r3, [r2, #32]
    86c2:	2120      	movs	r1, #32
    86c4:	430b      	orrs	r3, r1
    86c6:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM3;
    86c8:	1dfb      	adds	r3, r7, #7
    86ca:	781a      	ldrb	r2, [r3, #0]
    86cc:	4935      	ldr	r1, [pc, #212]	; (87a4 <init+0x12e>)
    86ce:	0013      	movs	r3, r2
    86d0:	00db      	lsls	r3, r3, #3
    86d2:	189b      	adds	r3, r3, r2
    86d4:	019b      	lsls	r3, r3, #6
    86d6:	4a34      	ldr	r2, [pc, #208]	; (87a8 <init+0x132>)
    86d8:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM3_CORE;
    86da:	1dfb      	adds	r3, r7, #7
    86dc:	781a      	ldrb	r2, [r3, #0]
    86de:	4931      	ldr	r1, [pc, #196]	; (87a4 <init+0x12e>)
    86e0:	0013      	movs	r3, r2
    86e2:	00db      	lsls	r3, r3, #3
    86e4:	189b      	adds	r3, r3, r2
    86e6:	019b      	lsls	r3, r3, #6
    86e8:	18cb      	adds	r3, r1, r3
    86ea:	3304      	adds	r3, #4
    86ec:	2217      	movs	r2, #23
    86ee:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM3_IRQn;
    86f0:	1dfb      	adds	r3, r7, #7
    86f2:	781a      	ldrb	r2, [r3, #0]
    86f4:	492b      	ldr	r1, [pc, #172]	; (87a4 <init+0x12e>)
    86f6:	0013      	movs	r3, r2
    86f8:	00db      	lsls	r3, r3, #3
    86fa:	189b      	adds	r3, r3, r2
    86fc:	019b      	lsls	r3, r3, #6
    86fe:	18cb      	adds	r3, r1, r3
    8700:	3308      	adds	r3, #8
    8702:	220c      	movs	r2, #12
    8704:	701a      	strb	r2, [r3, #0]
		break;
    8706:	e07a      	b.n	87fe <init+0x188>
			PM->APBCMASK.bit.SERCOM2_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8708:	4a25      	ldr	r2, [pc, #148]	; (87a0 <init+0x12a>)
    870a:	6a13      	ldr	r3, [r2, #32]
    870c:	2110      	movs	r1, #16
    870e:	430b      	orrs	r3, r1
    8710:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM2;
    8712:	1dfb      	adds	r3, r7, #7
    8714:	781a      	ldrb	r2, [r3, #0]
    8716:	4923      	ldr	r1, [pc, #140]	; (87a4 <init+0x12e>)
    8718:	0013      	movs	r3, r2
    871a:	00db      	lsls	r3, r3, #3
    871c:	189b      	adds	r3, r3, r2
    871e:	019b      	lsls	r3, r3, #6
    8720:	4a22      	ldr	r2, [pc, #136]	; (87ac <init+0x136>)
    8722:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM2_CORE;
    8724:	1dfb      	adds	r3, r7, #7
    8726:	781a      	ldrb	r2, [r3, #0]
    8728:	491e      	ldr	r1, [pc, #120]	; (87a4 <init+0x12e>)
    872a:	0013      	movs	r3, r2
    872c:	00db      	lsls	r3, r3, #3
    872e:	189b      	adds	r3, r3, r2
    8730:	019b      	lsls	r3, r3, #6
    8732:	18cb      	adds	r3, r1, r3
    8734:	3304      	adds	r3, #4
    8736:	2216      	movs	r2, #22
    8738:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM2_IRQn;
    873a:	1dfb      	adds	r3, r7, #7
    873c:	781a      	ldrb	r2, [r3, #0]
    873e:	4919      	ldr	r1, [pc, #100]	; (87a4 <init+0x12e>)
    8740:	0013      	movs	r3, r2
    8742:	00db      	lsls	r3, r3, #3
    8744:	189b      	adds	r3, r3, r2
    8746:	019b      	lsls	r3, r3, #6
    8748:	18cb      	adds	r3, r1, r3
    874a:	3308      	adds	r3, #8
    874c:	220b      	movs	r2, #11
    874e:	701a      	strb	r2, [r3, #0]
		break;
    8750:	e055      	b.n	87fe <init+0x188>
			PM->APBCMASK.bit.SERCOM0_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8752:	4a13      	ldr	r2, [pc, #76]	; (87a0 <init+0x12a>)
    8754:	6a13      	ldr	r3, [r2, #32]
    8756:	2104      	movs	r1, #4
    8758:	430b      	orrs	r3, r1
    875a:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM0;
    875c:	1dfb      	adds	r3, r7, #7
    875e:	781a      	ldrb	r2, [r3, #0]
    8760:	4910      	ldr	r1, [pc, #64]	; (87a4 <init+0x12e>)
    8762:	0013      	movs	r3, r2
    8764:	00db      	lsls	r3, r3, #3
    8766:	189b      	adds	r3, r3, r2
    8768:	019b      	lsls	r3, r3, #6
    876a:	4a11      	ldr	r2, [pc, #68]	; (87b0 <init+0x13a>)
    876c:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM0_CORE;
    876e:	1dfb      	adds	r3, r7, #7
    8770:	781a      	ldrb	r2, [r3, #0]
    8772:	490c      	ldr	r1, [pc, #48]	; (87a4 <init+0x12e>)
    8774:	0013      	movs	r3, r2
    8776:	00db      	lsls	r3, r3, #3
    8778:	189b      	adds	r3, r3, r2
    877a:	019b      	lsls	r3, r3, #6
    877c:	18cb      	adds	r3, r1, r3
    877e:	3304      	adds	r3, #4
    8780:	2214      	movs	r2, #20
    8782:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM0_IRQn;
    8784:	1dfb      	adds	r3, r7, #7
    8786:	781a      	ldrb	r2, [r3, #0]
    8788:	4906      	ldr	r1, [pc, #24]	; (87a4 <init+0x12e>)
    878a:	0013      	movs	r3, r2
    878c:	00db      	lsls	r3, r3, #3
    878e:	189b      	adds	r3, r3, r2
    8790:	019b      	lsls	r3, r3, #6
    8792:	18cb      	adds	r3, r1, r3
    8794:	3308      	adds	r3, #8
    8796:	2209      	movs	r2, #9
    8798:	701a      	strb	r2, [r3, #0]
		break;
    879a:	e030      	b.n	87fe <init+0x188>
    879c:	40220000 	.word	0x40220000
    87a0:	40000400 	.word	0x40000400
    87a4:	200031fc 	.word	0x200031fc
    87a8:	42001400 	.word	0x42001400
    87ac:	42001000 	.word	0x42001000
    87b0:	42000800 	.word	0x42000800
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    87b4:	4aea      	ldr	r2, [pc, #936]	; (8b60 <init+0x4ea>)
    87b6:	6a13      	ldr	r3, [r2, #32]
    87b8:	2108      	movs	r1, #8
    87ba:	430b      	orrs	r3, r1
    87bc:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM1;
    87be:	1dfb      	adds	r3, r7, #7
    87c0:	781a      	ldrb	r2, [r3, #0]
    87c2:	49e8      	ldr	r1, [pc, #928]	; (8b64 <init+0x4ee>)
    87c4:	0013      	movs	r3, r2
    87c6:	00db      	lsls	r3, r3, #3
    87c8:	189b      	adds	r3, r3, r2
    87ca:	019b      	lsls	r3, r3, #6
    87cc:	4ae6      	ldr	r2, [pc, #920]	; (8b68 <init+0x4f2>)
    87ce:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
    87d0:	1dfb      	adds	r3, r7, #7
    87d2:	781a      	ldrb	r2, [r3, #0]
    87d4:	49e3      	ldr	r1, [pc, #908]	; (8b64 <init+0x4ee>)
    87d6:	0013      	movs	r3, r2
    87d8:	00db      	lsls	r3, r3, #3
    87da:	189b      	adds	r3, r3, r2
    87dc:	019b      	lsls	r3, r3, #6
    87de:	18cb      	adds	r3, r1, r3
    87e0:	3304      	adds	r3, #4
    87e2:	2215      	movs	r2, #21
    87e4:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM1_IRQn;
    87e6:	1dfb      	adds	r3, r7, #7
    87e8:	781a      	ldrb	r2, [r3, #0]
    87ea:	49de      	ldr	r1, [pc, #888]	; (8b64 <init+0x4ee>)
    87ec:	0013      	movs	r3, r2
    87ee:	00db      	lsls	r3, r3, #3
    87f0:	189b      	adds	r3, r3, r2
    87f2:	019b      	lsls	r3, r3, #6
    87f4:	18cb      	adds	r3, r1, r3
    87f6:	3308      	adds	r3, #8
    87f8:	220a      	movs	r2, #10
    87fa:	701a      	strb	r2, [r3, #0]
		break;
    87fc:	46c0      	nop			; (mov r8, r8)
	}
	
	PM->APBCSEL.bit.APBCDIV   = 0x00;
    87fe:	4ad8      	ldr	r2, [pc, #864]	; (8b60 <init+0x4ea>)
    8800:	7ad3      	ldrb	r3, [r2, #11]
    8802:	2107      	movs	r1, #7
    8804:	438b      	bics	r3, r1
    8806:	72d3      	strb	r3, [r2, #11]
	GCLK->CLKCTRL.bit.WRTLOCK = 0x00;
    8808:	4ad8      	ldr	r2, [pc, #864]	; (8b6c <init+0x4f6>)
    880a:	8853      	ldrh	r3, [r2, #2]
    880c:	045b      	lsls	r3, r3, #17
    880e:	0c5b      	lsrs	r3, r3, #17
    8810:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.ID      = port[n_port].gclk_sercom; // Bits 5:0  - ID: Generic Clock Selection ID (0x14 - SERCOM0_CORE)
    8812:	4ad6      	ldr	r2, [pc, #856]	; (8b6c <init+0x4f6>)
    8814:	1dfb      	adds	r3, r7, #7
    8816:	7819      	ldrb	r1, [r3, #0]
    8818:	48d2      	ldr	r0, [pc, #840]	; (8b64 <init+0x4ee>)
    881a:	000b      	movs	r3, r1
    881c:	00db      	lsls	r3, r3, #3
    881e:	185b      	adds	r3, r3, r1
    8820:	019b      	lsls	r3, r3, #6
    8822:	18c3      	adds	r3, r0, r3
    8824:	3304      	adds	r3, #4
    8826:	681b      	ldr	r3, [r3, #0]
    8828:	b2db      	uxtb	r3, r3
    882a:	1c19      	adds	r1, r3, #0
    882c:	233f      	movs	r3, #63	; 0x3f
    882e:	400b      	ands	r3, r1
    8830:	b2d9      	uxtb	r1, r3
    8832:	8853      	ldrh	r3, [r2, #2]
    8834:	1c08      	adds	r0, r1, #0
    8836:	213f      	movs	r1, #63	; 0x3f
    8838:	4008      	ands	r0, r1
    883a:	213f      	movs	r1, #63	; 0x3f
    883c:	438b      	bics	r3, r1
    883e:	1c19      	adds	r1, r3, #0
    8840:	1c03      	adds	r3, r0, #0
    8842:	430b      	orrs	r3, r1
    8844:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN     = 0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    8846:	4ac9      	ldr	r2, [pc, #804]	; (8b6c <init+0x4f6>)
    8848:	8853      	ldrh	r3, [r2, #2]
    884a:	49c9      	ldr	r1, [pc, #804]	; (8b70 <init+0x4fa>)
    884c:	400b      	ands	r3, r1
    884e:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN   = 0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    8850:	4ac6      	ldr	r2, [pc, #792]	; (8b6c <init+0x4f6>)
    8852:	8853      	ldrh	r3, [r2, #2]
    8854:	2180      	movs	r1, #128	; 0x80
    8856:	01c9      	lsls	r1, r1, #7
    8858:	430b      	orrs	r3, r1
    885a:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.ENABLE = 0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    885c:	1dfb      	adds	r3, r7, #7
    885e:	781a      	ldrb	r2, [r3, #0]
    8860:	49c0      	ldr	r1, [pc, #768]	; (8b64 <init+0x4ee>)
    8862:	0013      	movs	r3, r2
    8864:	00db      	lsls	r3, r3, #3
    8866:	189b      	adds	r3, r3, r2
    8868:	019b      	lsls	r3, r3, #6
    886a:	585b      	ldr	r3, [r3, r1]
    886c:	681a      	ldr	r2, [r3, #0]
    886e:	2102      	movs	r1, #2
    8870:	438a      	bics	r2, r1
    8872:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.ENABLE) { ; }
    8874:	46c0      	nop			; (mov r8, r8)
    8876:	1dfb      	adds	r3, r7, #7
    8878:	781a      	ldrb	r2, [r3, #0]
    887a:	49ba      	ldr	r1, [pc, #744]	; (8b64 <init+0x4ee>)
    887c:	0013      	movs	r3, r2
    887e:	00db      	lsls	r3, r3, #3
    8880:	189b      	adds	r3, r3, r2
    8882:	019b      	lsls	r3, r3, #6
    8884:	585b      	ldr	r3, [r3, r1]
    8886:	69db      	ldr	r3, [r3, #28]
    8888:	079b      	lsls	r3, r3, #30
    888a:	0fdb      	lsrs	r3, r3, #31
    888c:	b2db      	uxtb	r3, r3
    888e:	2b00      	cmp	r3, #0
    8890:	d1f1      	bne.n	8876 <init+0x200>

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.SWRST   =0x01; //Bit0-SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    8892:	1dfb      	adds	r3, r7, #7
    8894:	781a      	ldrb	r2, [r3, #0]
    8896:	49b3      	ldr	r1, [pc, #716]	; (8b64 <init+0x4ee>)
    8898:	0013      	movs	r3, r2
    889a:	00db      	lsls	r3, r3, #3
    889c:	189b      	adds	r3, r3, r2
    889e:	019b      	lsls	r3, r3, #6
    88a0:	585b      	ldr	r3, [r3, r1]
    88a2:	681a      	ldr	r2, [r3, #0]
    88a4:	2101      	movs	r1, #1
    88a6:	430a      	orrs	r2, r1
    88a8:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    88aa:	46c0      	nop			; (mov r8, r8)
    88ac:	1dfb      	adds	r3, r7, #7
    88ae:	781a      	ldrb	r2, [r3, #0]
    88b0:	49ac      	ldr	r1, [pc, #688]	; (8b64 <init+0x4ee>)
    88b2:	0013      	movs	r3, r2
    88b4:	00db      	lsls	r3, r3, #3
    88b6:	189b      	adds	r3, r3, r2
    88b8:	019b      	lsls	r3, r3, #6
    88ba:	585b      	ldr	r3, [r3, r1]
    88bc:	69db      	ldr	r3, [r3, #28]
    88be:	07db      	lsls	r3, r3, #31
    88c0:	0fdb      	lsrs	r3, r3, #31
    88c2:	b2db      	uxtb	r3, r3
    88c4:	2b00      	cmp	r3, #0
    88c6:	d1f1      	bne.n	88ac <init+0x236>

	port[n_port].sercom->USART.CTRLA.bit.DORD    =0x01;									// Bit  30    - DORD: Data Order (1: LSB is transmitted first.)
    88c8:	1dfb      	adds	r3, r7, #7
    88ca:	781a      	ldrb	r2, [r3, #0]
    88cc:	49a5      	ldr	r1, [pc, #660]	; (8b64 <init+0x4ee>)
    88ce:	0013      	movs	r3, r2
    88d0:	00db      	lsls	r3, r3, #3
    88d2:	189b      	adds	r3, r3, r2
    88d4:	019b      	lsls	r3, r3, #6
    88d6:	585b      	ldr	r3, [r3, r1]
    88d8:	681a      	ldr	r2, [r3, #0]
    88da:	2180      	movs	r1, #128	; 0x80
    88dc:	05c9      	lsls	r1, r1, #23
    88de:	430a      	orrs	r2, r1
    88e0:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CPOL    =0x00;									// Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	781a      	ldrb	r2, [r3, #0]
    88e6:	499f      	ldr	r1, [pc, #636]	; (8b64 <init+0x4ee>)
    88e8:	0013      	movs	r3, r2
    88ea:	00db      	lsls	r3, r3, #3
    88ec:	189b      	adds	r3, r3, r2
    88ee:	019b      	lsls	r3, r3, #6
    88f0:	585b      	ldr	r3, [r3, r1]
    88f2:	681a      	ldr	r2, [r3, #0]
    88f4:	499f      	ldr	r1, [pc, #636]	; (8b74 <init+0x4fe>)
    88f6:	400a      	ands	r2, r1
    88f8:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CMODE   =0x00;									// Bit  28    - CMODE: Communication Mode (0: Asynchronous communication.)
    88fa:	1dfb      	adds	r3, r7, #7
    88fc:	781a      	ldrb	r2, [r3, #0]
    88fe:	4999      	ldr	r1, [pc, #612]	; (8b64 <init+0x4ee>)
    8900:	0013      	movs	r3, r2
    8902:	00db      	lsls	r3, r3, #3
    8904:	189b      	adds	r3, r3, r2
    8906:	019b      	lsls	r3, r3, #6
    8908:	585b      	ldr	r3, [r3, r1]
    890a:	681a      	ldr	r2, [r3, #0]
    890c:	499a      	ldr	r1, [pc, #616]	; (8b78 <init+0x502>)
    890e:	400a      	ands	r2, r1
    8910:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPA   =0x00;									// Bits 23:22 - SAMPA[1:0]: Sample Adjustment (0: 3-4-5)
    8912:	1dfb      	adds	r3, r7, #7
    8914:	781a      	ldrb	r2, [r3, #0]
    8916:	4993      	ldr	r1, [pc, #588]	; (8b64 <init+0x4ee>)
    8918:	0013      	movs	r3, r2
    891a:	00db      	lsls	r3, r3, #3
    891c:	189b      	adds	r3, r3, r2
    891e:	019b      	lsls	r3, r3, #6
    8920:	585b      	ldr	r3, [r3, r1]
    8922:	681a      	ldr	r2, [r3, #0]
    8924:	4995      	ldr	r1, [pc, #596]	; (8b7c <init+0x506>)
    8926:	400a      	ands	r2, r1
    8928:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPR   =0x02;									// Bits 15:13 - SAMPR[2:0]: Sample Rate (2: 8x over-sampling using arithmetic baud rate generation.)
    892a:	1dfb      	adds	r3, r7, #7
    892c:	781a      	ldrb	r2, [r3, #0]
    892e:	498d      	ldr	r1, [pc, #564]	; (8b64 <init+0x4ee>)
    8930:	0013      	movs	r3, r2
    8932:	00db      	lsls	r3, r3, #3
    8934:	189b      	adds	r3, r3, r2
    8936:	019b      	lsls	r3, r3, #6
    8938:	585b      	ldr	r3, [r3, r1]
    893a:	681a      	ldr	r2, [r3, #0]
    893c:	4990      	ldr	r1, [pc, #576]	; (8b80 <init+0x50a>)
    893e:	400a      	ands	r2, r1
    8940:	2180      	movs	r1, #128	; 0x80
    8942:	01c9      	lsls	r1, r1, #7
    8944:	430a      	orrs	r2, r1
    8946:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.IBON    =0x00;									// Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    8948:	1dfb      	adds	r3, r7, #7
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	4985      	ldr	r1, [pc, #532]	; (8b64 <init+0x4ee>)
    894e:	0013      	movs	r3, r2
    8950:	00db      	lsls	r3, r3, #3
    8952:	189b      	adds	r3, r3, r2
    8954:	019b      	lsls	r3, r3, #6
    8956:	585b      	ldr	r3, [r3, r1]
    8958:	681a      	ldr	r2, [r3, #0]
    895a:	498a      	ldr	r1, [pc, #552]	; (8b84 <init+0x50e>)
    895c:	400a      	ands	r2, r1
    895e:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RUNSTDBY=0x00;									// Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    8960:	1dfb      	adds	r3, r7, #7
    8962:	781a      	ldrb	r2, [r3, #0]
    8964:	497f      	ldr	r1, [pc, #508]	; (8b64 <init+0x4ee>)
    8966:	0013      	movs	r3, r2
    8968:	00db      	lsls	r3, r3, #3
    896a:	189b      	adds	r3, r3, r2
    896c:	019b      	lsls	r3, r3, #6
    896e:	585b      	ldr	r3, [r3, r1]
    8970:	681a      	ldr	r2, [r3, #0]
    8972:	2180      	movs	r1, #128	; 0x80
    8974:	438a      	bics	r2, r1
    8976:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.MODE    =0x01;									// Bits 4:2   - MODE: Operating Mode (1: USART with internal clock.)
    8978:	1dfb      	adds	r3, r7, #7
    897a:	781a      	ldrb	r2, [r3, #0]
    897c:	4979      	ldr	r1, [pc, #484]	; (8b64 <init+0x4ee>)
    897e:	0013      	movs	r3, r2
    8980:	00db      	lsls	r3, r3, #3
    8982:	189b      	adds	r3, r3, r2
    8984:	019b      	lsls	r3, r3, #6
    8986:	585b      	ldr	r3, [r3, r1]
    8988:	681a      	ldr	r2, [r3, #0]
    898a:	211c      	movs	r1, #28
    898c:	438a      	bics	r2, r1
    898e:	2104      	movs	r1, #4
    8990:	430a      	orrs	r2, r1
    8992:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.TXPO    =0x02;									// Bits 17:16 - TXPO: Transmit Data Pinout (2: TX->PAD[0], RTS->PAD[2])
    8994:	1dfb      	adds	r3, r7, #7
    8996:	781a      	ldrb	r2, [r3, #0]
    8998:	4972      	ldr	r1, [pc, #456]	; (8b64 <init+0x4ee>)
    899a:	0013      	movs	r3, r2
    899c:	00db      	lsls	r3, r3, #3
    899e:	189b      	adds	r3, r3, r2
    89a0:	019b      	lsls	r3, r3, #6
    89a2:	585b      	ldr	r3, [r3, r1]
    89a4:	681a      	ldr	r2, [r3, #0]
    89a6:	4978      	ldr	r1, [pc, #480]	; (8b88 <init+0x512>)
    89a8:	400a      	ands	r2, r1
    89aa:	2180      	movs	r1, #128	; 0x80
    89ac:	0289      	lsls	r1, r1, #10
    89ae:	430a      	orrs	r2, r1
    89b0:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RXPO    =0x01;									// Bits 21:20 - RXPO: Receive Data Pinout (1: RX->PAD[1])
    89b2:	1dfb      	adds	r3, r7, #7
    89b4:	781a      	ldrb	r2, [r3, #0]
    89b6:	496b      	ldr	r1, [pc, #428]	; (8b64 <init+0x4ee>)
    89b8:	0013      	movs	r3, r2
    89ba:	00db      	lsls	r3, r3, #3
    89bc:	189b      	adds	r3, r3, r2
    89be:	019b      	lsls	r3, r3, #6
    89c0:	585b      	ldr	r3, [r3, r1]
    89c2:	681a      	ldr	r2, [r3, #0]
    89c4:	4971      	ldr	r1, [pc, #452]	; (8b8c <init+0x516>)
    89c6:	400a      	ands	r2, r1
    89c8:	2180      	movs	r1, #128	; 0x80
    89ca:	0349      	lsls	r1, r1, #13
    89cc:	430a      	orrs	r2, r1
    89ce:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLB.bit.ENC     =0x00;									// Bit  10    - ENC: Encoding Format (0: Data is not encoded.)
    89d0:	1dfb      	adds	r3, r7, #7
    89d2:	781a      	ldrb	r2, [r3, #0]
    89d4:	4963      	ldr	r1, [pc, #396]	; (8b64 <init+0x4ee>)
    89d6:	0013      	movs	r3, r2
    89d8:	00db      	lsls	r3, r3, #3
    89da:	189b      	adds	r3, r3, r2
    89dc:	019b      	lsls	r3, r3, #6
    89de:	585b      	ldr	r3, [r3, r1]
    89e0:	685a      	ldr	r2, [r3, #4]
    89e2:	496b      	ldr	r1, [pc, #428]	; (8b90 <init+0x51a>)
    89e4:	400a      	ands	r2, r1
    89e6:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.SFDE    =0x01;									// Bit  9     - SFDE: Start of Frame Detection Enable (1: Start-of-frame detection enabled.)
    89e8:	1dfb      	adds	r3, r7, #7
    89ea:	781a      	ldrb	r2, [r3, #0]
    89ec:	495d      	ldr	r1, [pc, #372]	; (8b64 <init+0x4ee>)
    89ee:	0013      	movs	r3, r2
    89f0:	00db      	lsls	r3, r3, #3
    89f2:	189b      	adds	r3, r3, r2
    89f4:	019b      	lsls	r3, r3, #6
    89f6:	585b      	ldr	r3, [r3, r1]
    89f8:	685a      	ldr	r2, [r3, #4]
    89fa:	2180      	movs	r1, #128	; 0x80
    89fc:	0089      	lsls	r1, r1, #2
    89fe:	430a      	orrs	r2, r1
    8a00:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.COLDEN  =0x00;									// Bit  8     - COLDEN: Collision Detection Enable (0: Collision detection is not enabled.)
    8a02:	1dfb      	adds	r3, r7, #7
    8a04:	781a      	ldrb	r2, [r3, #0]
    8a06:	4957      	ldr	r1, [pc, #348]	; (8b64 <init+0x4ee>)
    8a08:	0013      	movs	r3, r2
    8a0a:	00db      	lsls	r3, r3, #3
    8a0c:	189b      	adds	r3, r3, r2
    8a0e:	019b      	lsls	r3, r3, #6
    8a10:	585b      	ldr	r3, [r3, r1]
    8a12:	685a      	ldr	r2, [r3, #4]
    8a14:	495b      	ldr	r1, [pc, #364]	; (8b84 <init+0x50e>)
    8a16:	400a      	ands	r2, r1
    8a18:	605a      	str	r2, [r3, #4]
	

	//cfg settings
	//frame
	switch (cfg_1.sock_rs485[n_port].parity) 
    8a1a:	1dfb      	adds	r3, r7, #7
    8a1c:	781a      	ldrb	r2, [r3, #0]
    8a1e:	495d      	ldr	r1, [pc, #372]	; (8b94 <init+0x51e>)
    8a20:	2038      	movs	r0, #56	; 0x38
    8a22:	0013      	movs	r3, r2
    8a24:	005b      	lsls	r3, r3, #1
    8a26:	189b      	adds	r3, r3, r2
    8a28:	009b      	lsls	r3, r3, #2
    8a2a:	189b      	adds	r3, r3, r2
    8a2c:	18cb      	adds	r3, r1, r3
    8a2e:	181b      	adds	r3, r3, r0
    8a30:	795b      	ldrb	r3, [r3, #5]
    8a32:	069b      	lsls	r3, r3, #26
    8a34:	0f9b      	lsrs	r3, r3, #30
    8a36:	b2db      	uxtb	r3, r3
    8a38:	2b01      	cmp	r3, #1
    8a3a:	d01d      	beq.n	8a78 <init+0x402>
    8a3c:	2b02      	cmp	r3, #2
    8a3e:	d138      	bne.n	8ab2 <init+0x43c>
	{
		case  PARITY_EVEN:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = EVEN; break;
    8a40:	1dfb      	adds	r3, r7, #7
    8a42:	781a      	ldrb	r2, [r3, #0]
    8a44:	4947      	ldr	r1, [pc, #284]	; (8b64 <init+0x4ee>)
    8a46:	0013      	movs	r3, r2
    8a48:	00db      	lsls	r3, r3, #3
    8a4a:	189b      	adds	r3, r3, r2
    8a4c:	019b      	lsls	r3, r3, #6
    8a4e:	585b      	ldr	r3, [r3, r1]
    8a50:	681a      	ldr	r2, [r3, #0]
    8a52:	4951      	ldr	r1, [pc, #324]	; (8b98 <init+0x522>)
    8a54:	400a      	ands	r2, r1
    8a56:	2180      	movs	r1, #128	; 0x80
    8a58:	0449      	lsls	r1, r1, #17
    8a5a:	430a      	orrs	r2, r1
    8a5c:	601a      	str	r2, [r3, #0]
    8a5e:	1dfb      	adds	r3, r7, #7
    8a60:	781a      	ldrb	r2, [r3, #0]
    8a62:	4940      	ldr	r1, [pc, #256]	; (8b64 <init+0x4ee>)
    8a64:	0013      	movs	r3, r2
    8a66:	00db      	lsls	r3, r3, #3
    8a68:	189b      	adds	r3, r3, r2
    8a6a:	019b      	lsls	r3, r3, #6
    8a6c:	585b      	ldr	r3, [r3, r1]
    8a6e:	685a      	ldr	r2, [r3, #4]
    8a70:	494a      	ldr	r1, [pc, #296]	; (8b9c <init+0x526>)
    8a72:	400a      	ands	r2, r1
    8a74:	605a      	str	r2, [r3, #4]
    8a76:	e029      	b.n	8acc <init+0x456>
		case  PARITY_ODD:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = ODD; break;
    8a78:	1dfb      	adds	r3, r7, #7
    8a7a:	781a      	ldrb	r2, [r3, #0]
    8a7c:	4939      	ldr	r1, [pc, #228]	; (8b64 <init+0x4ee>)
    8a7e:	0013      	movs	r3, r2
    8a80:	00db      	lsls	r3, r3, #3
    8a82:	189b      	adds	r3, r3, r2
    8a84:	019b      	lsls	r3, r3, #6
    8a86:	585b      	ldr	r3, [r3, r1]
    8a88:	681a      	ldr	r2, [r3, #0]
    8a8a:	4943      	ldr	r1, [pc, #268]	; (8b98 <init+0x522>)
    8a8c:	400a      	ands	r2, r1
    8a8e:	2180      	movs	r1, #128	; 0x80
    8a90:	0449      	lsls	r1, r1, #17
    8a92:	430a      	orrs	r2, r1
    8a94:	601a      	str	r2, [r3, #0]
    8a96:	1dfb      	adds	r3, r7, #7
    8a98:	781a      	ldrb	r2, [r3, #0]
    8a9a:	4932      	ldr	r1, [pc, #200]	; (8b64 <init+0x4ee>)
    8a9c:	0013      	movs	r3, r2
    8a9e:	00db      	lsls	r3, r3, #3
    8aa0:	189b      	adds	r3, r3, r2
    8aa2:	019b      	lsls	r3, r3, #6
    8aa4:	585b      	ldr	r3, [r3, r1]
    8aa6:	685a      	ldr	r2, [r3, #4]
    8aa8:	2180      	movs	r1, #128	; 0x80
    8aaa:	0189      	lsls	r1, r1, #6
    8aac:	430a      	orrs	r2, r1
    8aae:	605a      	str	r2, [r3, #4]
    8ab0:	e00c      	b.n	8acc <init+0x456>
		default:			port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_NO_PARITY; break;
    8ab2:	1dfb      	adds	r3, r7, #7
    8ab4:	781a      	ldrb	r2, [r3, #0]
    8ab6:	492b      	ldr	r1, [pc, #172]	; (8b64 <init+0x4ee>)
    8ab8:	0013      	movs	r3, r2
    8aba:	00db      	lsls	r3, r3, #3
    8abc:	189b      	adds	r3, r3, r2
    8abe:	019b      	lsls	r3, r3, #6
    8ac0:	585b      	ldr	r3, [r3, r1]
    8ac2:	681a      	ldr	r2, [r3, #0]
    8ac4:	4934      	ldr	r1, [pc, #208]	; (8b98 <init+0x522>)
    8ac6:	400a      	ands	r2, r1
    8ac8:	601a      	str	r2, [r3, #0]
    8aca:	46c0      	nop			; (mov r8, r8)
	}
	//stop bit
	switch(cfg_1.sock_rs485[n_port].stop)	
    8acc:	1dfb      	adds	r3, r7, #7
    8ace:	781a      	ldrb	r2, [r3, #0]
    8ad0:	4930      	ldr	r1, [pc, #192]	; (8b94 <init+0x51e>)
    8ad2:	2038      	movs	r0, #56	; 0x38
    8ad4:	0013      	movs	r3, r2
    8ad6:	005b      	lsls	r3, r3, #1
    8ad8:	189b      	adds	r3, r3, r2
    8ada:	009b      	lsls	r3, r3, #2
    8adc:	189b      	adds	r3, r3, r2
    8ade:	18cb      	adds	r3, r1, r3
    8ae0:	181b      	adds	r3, r3, r0
    8ae2:	795b      	ldrb	r3, [r3, #5]
    8ae4:	061b      	lsls	r3, r3, #24
    8ae6:	0f9b      	lsrs	r3, r3, #30
    8ae8:	b2db      	uxtb	r3, r3
    8aea:	2b02      	cmp	r3, #2
    8aec:	d10c      	bne.n	8b08 <init+0x492>
	{
		case 2:		port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 1; break;
    8aee:	1dfb      	adds	r3, r7, #7
    8af0:	781a      	ldrb	r2, [r3, #0]
    8af2:	491c      	ldr	r1, [pc, #112]	; (8b64 <init+0x4ee>)
    8af4:	0013      	movs	r3, r2
    8af6:	00db      	lsls	r3, r3, #3
    8af8:	189b      	adds	r3, r3, r2
    8afa:	019b      	lsls	r3, r3, #6
    8afc:	585b      	ldr	r3, [r3, r1]
    8afe:	685a      	ldr	r2, [r3, #4]
    8b00:	2140      	movs	r1, #64	; 0x40
    8b02:	430a      	orrs	r2, r1
    8b04:	605a      	str	r2, [r3, #4]
    8b06:	e00c      	b.n	8b22 <init+0x4ac>
		default:	port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 0; break;
    8b08:	1dfb      	adds	r3, r7, #7
    8b0a:	781a      	ldrb	r2, [r3, #0]
    8b0c:	4915      	ldr	r1, [pc, #84]	; (8b64 <init+0x4ee>)
    8b0e:	0013      	movs	r3, r2
    8b10:	00db      	lsls	r3, r3, #3
    8b12:	189b      	adds	r3, r3, r2
    8b14:	019b      	lsls	r3, r3, #6
    8b16:	585b      	ldr	r3, [r3, r1]
    8b18:	685a      	ldr	r2, [r3, #4]
    8b1a:	2140      	movs	r1, #64	; 0x40
    8b1c:	438a      	bics	r2, r1
    8b1e:	605a      	str	r2, [r3, #4]
    8b20:	46c0      	nop			; (mov r8, r8)
	}
	//char size
	switch (cfg_1.sock_rs485[n_port].bsize)
    8b22:	1dfb      	adds	r3, r7, #7
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	491b      	ldr	r1, [pc, #108]	; (8b94 <init+0x51e>)
    8b28:	2038      	movs	r0, #56	; 0x38
    8b2a:	0013      	movs	r3, r2
    8b2c:	005b      	lsls	r3, r3, #1
    8b2e:	189b      	adds	r3, r3, r2
    8b30:	009b      	lsls	r3, r3, #2
    8b32:	189b      	adds	r3, r3, r2
    8b34:	18cb      	adds	r3, r1, r3
    8b36:	181b      	adds	r3, r3, r0
    8b38:	795b      	ldrb	r3, [r3, #5]
    8b3a:	071b      	lsls	r3, r3, #28
    8b3c:	0f1b      	lsrs	r3, r3, #28
    8b3e:	b2db      	uxtb	r3, r3
    8b40:	2b07      	cmp	r3, #7
    8b42:	d12d      	bne.n	8ba0 <init+0x52a>
	{
		case 7:	port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x07; break;
    8b44:	1dfb      	adds	r3, r7, #7
    8b46:	781a      	ldrb	r2, [r3, #0]
    8b48:	4906      	ldr	r1, [pc, #24]	; (8b64 <init+0x4ee>)
    8b4a:	0013      	movs	r3, r2
    8b4c:	00db      	lsls	r3, r3, #3
    8b4e:	189b      	adds	r3, r3, r2
    8b50:	019b      	lsls	r3, r3, #6
    8b52:	585b      	ldr	r3, [r3, r1]
    8b54:	685a      	ldr	r2, [r3, #4]
    8b56:	2107      	movs	r1, #7
    8b58:	430a      	orrs	r2, r1
    8b5a:	605a      	str	r2, [r3, #4]
    8b5c:	e02d      	b.n	8bba <init+0x544>
    8b5e:	46c0      	nop			; (mov r8, r8)
    8b60:	40000400 	.word	0x40000400
    8b64:	200031fc 	.word	0x200031fc
    8b68:	42000c00 	.word	0x42000c00
    8b6c:	40000c00 	.word	0x40000c00
    8b70:	fffff0ff 	.word	0xfffff0ff
    8b74:	dfffffff 	.word	0xdfffffff
    8b78:	efffffff 	.word	0xefffffff
    8b7c:	ff3fffff 	.word	0xff3fffff
    8b80:	ffff1fff 	.word	0xffff1fff
    8b84:	fffffeff 	.word	0xfffffeff
    8b88:	fffcffff 	.word	0xfffcffff
    8b8c:	ffcfffff 	.word	0xffcfffff
    8b90:	fffffbff 	.word	0xfffffbff
    8b94:	20003dc4 	.word	0x20003dc4
    8b98:	f0ffffff 	.word	0xf0ffffff
    8b9c:	ffffdfff 	.word	0xffffdfff
		default:port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x00; break;
    8ba0:	1dfb      	adds	r3, r7, #7
    8ba2:	781a      	ldrb	r2, [r3, #0]
    8ba4:	49b8      	ldr	r1, [pc, #736]	; (8e88 <init+0x812>)
    8ba6:	0013      	movs	r3, r2
    8ba8:	00db      	lsls	r3, r3, #3
    8baa:	189b      	adds	r3, r3, r2
    8bac:	019b      	lsls	r3, r3, #6
    8bae:	585b      	ldr	r3, [r3, r1]
    8bb0:	685a      	ldr	r2, [r3, #4]
    8bb2:	2107      	movs	r1, #7
    8bb4:	438a      	bics	r2, r1
    8bb6:	605a      	str	r2, [r3, #4]
    8bb8:	46c0      	nop			; (mov r8, r8)
	}
	//baud
	val = cfg_1.sock_rs485[n_port].baud;
    8bba:	1dfb      	adds	r3, r7, #7
    8bbc:	781a      	ldrb	r2, [r3, #0]
    8bbe:	49b3      	ldr	r1, [pc, #716]	; (8e8c <init+0x816>)
    8bc0:	0013      	movs	r3, r2
    8bc2:	005b      	lsls	r3, r3, #1
    8bc4:	189b      	adds	r3, r3, r2
    8bc6:	009b      	lsls	r3, r3, #2
    8bc8:	189b      	adds	r3, r3, r2
    8bca:	18cb      	adds	r3, r1, r3
    8bcc:	3330      	adds	r3, #48	; 0x30
    8bce:	7a5a      	ldrb	r2, [r3, #9]
    8bd0:	7a99      	ldrb	r1, [r3, #10]
    8bd2:	0209      	lsls	r1, r1, #8
    8bd4:	430a      	orrs	r2, r1
    8bd6:	7ad9      	ldrb	r1, [r3, #11]
    8bd8:	0409      	lsls	r1, r1, #16
    8bda:	430a      	orrs	r2, r1
    8bdc:	7b1b      	ldrb	r3, [r3, #12]
    8bde:	061b      	lsls	r3, r3, #24
    8be0:	4313      	orrs	r3, r2
    8be2:	61fb      	str	r3, [r7, #28]
	if ( !((val == 600) || (val == 1200) || (val == 2400) || (val == 4800) || (val == 9600) || (val == 19200) || (val == 38400) || (val == 57600) || (val == 115200) || (val == 128000) || (val == 256000)) ) {val = 38400;}
    8be4:	69fa      	ldr	r2, [r7, #28]
    8be6:	2396      	movs	r3, #150	; 0x96
    8be8:	009b      	lsls	r3, r3, #2
    8bea:	429a      	cmp	r2, r3
    8bec:	d034      	beq.n	8c58 <init+0x5e2>
    8bee:	69fa      	ldr	r2, [r7, #28]
    8bf0:	2396      	movs	r3, #150	; 0x96
    8bf2:	00db      	lsls	r3, r3, #3
    8bf4:	429a      	cmp	r2, r3
    8bf6:	d02f      	beq.n	8c58 <init+0x5e2>
    8bf8:	69fa      	ldr	r2, [r7, #28]
    8bfa:	2396      	movs	r3, #150	; 0x96
    8bfc:	011b      	lsls	r3, r3, #4
    8bfe:	429a      	cmp	r2, r3
    8c00:	d02a      	beq.n	8c58 <init+0x5e2>
    8c02:	69fa      	ldr	r2, [r7, #28]
    8c04:	2396      	movs	r3, #150	; 0x96
    8c06:	015b      	lsls	r3, r3, #5
    8c08:	429a      	cmp	r2, r3
    8c0a:	d025      	beq.n	8c58 <init+0x5e2>
    8c0c:	69fa      	ldr	r2, [r7, #28]
    8c0e:	2396      	movs	r3, #150	; 0x96
    8c10:	019b      	lsls	r3, r3, #6
    8c12:	429a      	cmp	r2, r3
    8c14:	d020      	beq.n	8c58 <init+0x5e2>
    8c16:	69fa      	ldr	r2, [r7, #28]
    8c18:	2396      	movs	r3, #150	; 0x96
    8c1a:	01db      	lsls	r3, r3, #7
    8c1c:	429a      	cmp	r2, r3
    8c1e:	d01b      	beq.n	8c58 <init+0x5e2>
    8c20:	69fa      	ldr	r2, [r7, #28]
    8c22:	2396      	movs	r3, #150	; 0x96
    8c24:	021b      	lsls	r3, r3, #8
    8c26:	429a      	cmp	r2, r3
    8c28:	d016      	beq.n	8c58 <init+0x5e2>
    8c2a:	69fa      	ldr	r2, [r7, #28]
    8c2c:	23e1      	movs	r3, #225	; 0xe1
    8c2e:	021b      	lsls	r3, r3, #8
    8c30:	429a      	cmp	r2, r3
    8c32:	d011      	beq.n	8c58 <init+0x5e2>
    8c34:	69fa      	ldr	r2, [r7, #28]
    8c36:	23e1      	movs	r3, #225	; 0xe1
    8c38:	025b      	lsls	r3, r3, #9
    8c3a:	429a      	cmp	r2, r3
    8c3c:	d00c      	beq.n	8c58 <init+0x5e2>
    8c3e:	69fa      	ldr	r2, [r7, #28]
    8c40:	23fa      	movs	r3, #250	; 0xfa
    8c42:	025b      	lsls	r3, r3, #9
    8c44:	429a      	cmp	r2, r3
    8c46:	d007      	beq.n	8c58 <init+0x5e2>
    8c48:	69fa      	ldr	r2, [r7, #28]
    8c4a:	23fa      	movs	r3, #250	; 0xfa
    8c4c:	029b      	lsls	r3, r3, #10
    8c4e:	429a      	cmp	r2, r3
    8c50:	d002      	beq.n	8c58 <init+0x5e2>
    8c52:	2396      	movs	r3, #150	; 0x96
    8c54:	021b      	lsls	r3, r3, #8
    8c56:	61fb      	str	r3, [r7, #28]
	port[n_port].sercom->USART.BAUD.bit.BAUD = 65536.0f*(1.0f-(8.0*(float)(val))/(float)(PROC_HERZ)); 
    8c58:	1dfb      	adds	r3, r7, #7
    8c5a:	781a      	ldrb	r2, [r3, #0]
    8c5c:	498a      	ldr	r1, [pc, #552]	; (8e88 <init+0x812>)
    8c5e:	0013      	movs	r3, r2
    8c60:	00db      	lsls	r3, r3, #3
    8c62:	189b      	adds	r3, r3, r2
    8c64:	019b      	lsls	r3, r3, #6
    8c66:	585c      	ldr	r4, [r3, r1]
    8c68:	4b89      	ldr	r3, [pc, #548]	; (8e90 <init+0x81a>)
    8c6a:	69f8      	ldr	r0, [r7, #28]
    8c6c:	4798      	blx	r3
    8c6e:	1c02      	adds	r2, r0, #0
    8c70:	4b88      	ldr	r3, [pc, #544]	; (8e94 <init+0x81e>)
    8c72:	1c10      	adds	r0, r2, #0
    8c74:	4798      	blx	r3
    8c76:	4d88      	ldr	r5, [pc, #544]	; (8e98 <init+0x822>)
    8c78:	2200      	movs	r2, #0
    8c7a:	4b88      	ldr	r3, [pc, #544]	; (8e9c <init+0x826>)
    8c7c:	47a8      	blx	r5
    8c7e:	0002      	movs	r2, r0
    8c80:	000b      	movs	r3, r1
    8c82:	0010      	movs	r0, r2
    8c84:	0019      	movs	r1, r3
    8c86:	4d86      	ldr	r5, [pc, #536]	; (8ea0 <init+0x82a>)
    8c88:	2200      	movs	r2, #0
    8c8a:	4b86      	ldr	r3, [pc, #536]	; (8ea4 <init+0x82e>)
    8c8c:	47a8      	blx	r5
    8c8e:	0002      	movs	r2, r0
    8c90:	000b      	movs	r3, r1
    8c92:	4d85      	ldr	r5, [pc, #532]	; (8ea8 <init+0x832>)
    8c94:	2000      	movs	r0, #0
    8c96:	4985      	ldr	r1, [pc, #532]	; (8eac <init+0x836>)
    8c98:	47a8      	blx	r5
    8c9a:	0002      	movs	r2, r0
    8c9c:	000b      	movs	r3, r1
    8c9e:	0010      	movs	r0, r2
    8ca0:	0019      	movs	r1, r3
    8ca2:	4d7d      	ldr	r5, [pc, #500]	; (8e98 <init+0x822>)
    8ca4:	2200      	movs	r2, #0
    8ca6:	4b82      	ldr	r3, [pc, #520]	; (8eb0 <init+0x83a>)
    8ca8:	47a8      	blx	r5
    8caa:	0002      	movs	r2, r0
    8cac:	000b      	movs	r3, r1
    8cae:	0011      	movs	r1, r2
    8cb0:	001a      	movs	r2, r3
    8cb2:	4b80      	ldr	r3, [pc, #512]	; (8eb4 <init+0x83e>)
    8cb4:	0008      	movs	r0, r1
    8cb6:	0011      	movs	r1, r2
    8cb8:	4798      	blx	r3
    8cba:	0003      	movs	r3, r0
    8cbc:	b29b      	uxth	r3, r3
    8cbe:	81a3      	strh	r3, [r4, #12]
	//cfg settings end

	port[n_port].sercom->USART.INTENSET.bit.RXC  =0x01; // Bit 2 RXC: Receive Complete Interrupt Enable
    8cc0:	1dfb      	adds	r3, r7, #7
    8cc2:	781a      	ldrb	r2, [r3, #0]
    8cc4:	4970      	ldr	r1, [pc, #448]	; (8e88 <init+0x812>)
    8cc6:	0013      	movs	r3, r2
    8cc8:	00db      	lsls	r3, r3, #3
    8cca:	189b      	adds	r3, r3, r2
    8ccc:	019b      	lsls	r3, r3, #6
    8cce:	585a      	ldr	r2, [r3, r1]
    8cd0:	7d93      	ldrb	r3, [r2, #22]
    8cd2:	2104      	movs	r1, #4
    8cd4:	430b      	orrs	r3, r1
    8cd6:	7593      	strb	r3, [r2, #22]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8cd8:	46c0      	nop			; (mov r8, r8)
    8cda:	1dfb      	adds	r3, r7, #7
    8cdc:	781a      	ldrb	r2, [r3, #0]
    8cde:	496a      	ldr	r1, [pc, #424]	; (8e88 <init+0x812>)
    8ce0:	0013      	movs	r3, r2
    8ce2:	00db      	lsls	r3, r3, #3
    8ce4:	189b      	adds	r3, r3, r2
    8ce6:	019b      	lsls	r3, r3, #6
    8ce8:	585b      	ldr	r3, [r3, r1]
    8cea:	69db      	ldr	r3, [r3, #28]
    8cec:	2207      	movs	r2, #7
    8cee:	4013      	ands	r3, r2
    8cf0:	d1f3      	bne.n	8cda <init+0x664>
	port[n_port].sercom->USART.CTRLB.bit.RXEN=0x01;     // Bit 17 - RXEN: Receiver Enable (11: The receiver is enabled or will be enabled when the USART is enabled)
    8cf2:	1dfb      	adds	r3, r7, #7
    8cf4:	781a      	ldrb	r2, [r3, #0]
    8cf6:	4964      	ldr	r1, [pc, #400]	; (8e88 <init+0x812>)
    8cf8:	0013      	movs	r3, r2
    8cfa:	00db      	lsls	r3, r3, #3
    8cfc:	189b      	adds	r3, r3, r2
    8cfe:	019b      	lsls	r3, r3, #6
    8d00:	585b      	ldr	r3, [r3, r1]
    8d02:	685a      	ldr	r2, [r3, #4]
    8d04:	2180      	movs	r1, #128	; 0x80
    8d06:	0289      	lsls	r1, r1, #10
    8d08:	430a      	orrs	r2, r1
    8d0a:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d0c:	46c0      	nop			; (mov r8, r8)
    8d0e:	1dfb      	adds	r3, r7, #7
    8d10:	781a      	ldrb	r2, [r3, #0]
    8d12:	495d      	ldr	r1, [pc, #372]	; (8e88 <init+0x812>)
    8d14:	0013      	movs	r3, r2
    8d16:	00db      	lsls	r3, r3, #3
    8d18:	189b      	adds	r3, r3, r2
    8d1a:	019b      	lsls	r3, r3, #6
    8d1c:	585b      	ldr	r3, [r3, r1]
    8d1e:	69db      	ldr	r3, [r3, #28]
    8d20:	2207      	movs	r2, #7
    8d22:	4013      	ands	r3, r2
    8d24:	d1f3      	bne.n	8d0e <init+0x698>
	port[n_port].sercom->USART.CTRLB.bit.TXEN=0x01;     // Bit 16 - TXEN: Transmitter Enable (1: The transmitter is enabled or will be enabled when the USART is enabled.)
    8d26:	1dfb      	adds	r3, r7, #7
    8d28:	781a      	ldrb	r2, [r3, #0]
    8d2a:	4957      	ldr	r1, [pc, #348]	; (8e88 <init+0x812>)
    8d2c:	0013      	movs	r3, r2
    8d2e:	00db      	lsls	r3, r3, #3
    8d30:	189b      	adds	r3, r3, r2
    8d32:	019b      	lsls	r3, r3, #6
    8d34:	585b      	ldr	r3, [r3, r1]
    8d36:	685a      	ldr	r2, [r3, #4]
    8d38:	2180      	movs	r1, #128	; 0x80
    8d3a:	0249      	lsls	r1, r1, #9
    8d3c:	430a      	orrs	r2, r1
    8d3e:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d40:	46c0      	nop			; (mov r8, r8)
    8d42:	1dfb      	adds	r3, r7, #7
    8d44:	781a      	ldrb	r2, [r3, #0]
    8d46:	4950      	ldr	r1, [pc, #320]	; (8e88 <init+0x812>)
    8d48:	0013      	movs	r3, r2
    8d4a:	00db      	lsls	r3, r3, #3
    8d4c:	189b      	adds	r3, r3, r2
    8d4e:	019b      	lsls	r3, r3, #6
    8d50:	585b      	ldr	r3, [r3, r1]
    8d52:	69db      	ldr	r3, [r3, #28]
    8d54:	2207      	movs	r2, #7
    8d56:	4013      	ands	r3, r2
    8d58:	d1f3      	bne.n	8d42 <init+0x6cc>
	port[n_port].sercom->USART.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    8d5a:	1dfb      	adds	r3, r7, #7
    8d5c:	781a      	ldrb	r2, [r3, #0]
    8d5e:	494a      	ldr	r1, [pc, #296]	; (8e88 <init+0x812>)
    8d60:	0013      	movs	r3, r2
    8d62:	00db      	lsls	r3, r3, #3
    8d64:	189b      	adds	r3, r3, r2
    8d66:	019b      	lsls	r3, r3, #6
    8d68:	585b      	ldr	r3, [r3, r1]
    8d6a:	681a      	ldr	r2, [r3, #0]
    8d6c:	2102      	movs	r1, #2
    8d6e:	430a      	orrs	r2, r1
    8d70:	601a      	str	r2, [r3, #0]

	tout = (double)1000000 / (double)cfg_1.sock_rs485[n_port].baud;
    8d72:	1dfb      	adds	r3, r7, #7
    8d74:	781a      	ldrb	r2, [r3, #0]
    8d76:	4945      	ldr	r1, [pc, #276]	; (8e8c <init+0x816>)
    8d78:	0013      	movs	r3, r2
    8d7a:	005b      	lsls	r3, r3, #1
    8d7c:	189b      	adds	r3, r3, r2
    8d7e:	009b      	lsls	r3, r3, #2
    8d80:	189b      	adds	r3, r3, r2
    8d82:	18cb      	adds	r3, r1, r3
    8d84:	3330      	adds	r3, #48	; 0x30
    8d86:	7a5a      	ldrb	r2, [r3, #9]
    8d88:	7a99      	ldrb	r1, [r3, #10]
    8d8a:	0209      	lsls	r1, r1, #8
    8d8c:	430a      	orrs	r2, r1
    8d8e:	7ad9      	ldrb	r1, [r3, #11]
    8d90:	0409      	lsls	r1, r1, #16
    8d92:	430a      	orrs	r2, r1
    8d94:	7b1b      	ldrb	r3, [r3, #12]
    8d96:	061b      	lsls	r3, r3, #24
    8d98:	4313      	orrs	r3, r2
    8d9a:	001a      	movs	r2, r3
    8d9c:	4b46      	ldr	r3, [pc, #280]	; (8eb8 <init+0x842>)
    8d9e:	0010      	movs	r0, r2
    8da0:	4798      	blx	r3
    8da2:	0002      	movs	r2, r0
    8da4:	000b      	movs	r3, r1
    8da6:	4c3e      	ldr	r4, [pc, #248]	; (8ea0 <init+0x82a>)
    8da8:	2000      	movs	r0, #0
    8daa:	4944      	ldr	r1, [pc, #272]	; (8ebc <init+0x846>)
    8dac:	47a0      	blx	r4
    8dae:	0003      	movs	r3, r0
    8db0:	000c      	movs	r4, r1
    8db2:	613b      	str	r3, [r7, #16]
    8db4:	617c      	str	r4, [r7, #20]
	tout = tout * bsize;
    8db6:	4c38      	ldr	r4, [pc, #224]	; (8e98 <init+0x822>)
    8db8:	68ba      	ldr	r2, [r7, #8]
    8dba:	68fb      	ldr	r3, [r7, #12]
    8dbc:	6938      	ldr	r0, [r7, #16]
    8dbe:	6979      	ldr	r1, [r7, #20]
    8dc0:	47a0      	blx	r4
    8dc2:	0003      	movs	r3, r0
    8dc4:	000c      	movs	r4, r1
    8dc6:	613b      	str	r3, [r7, #16]
    8dc8:	617c      	str	r4, [r7, #20]
	tout = tout * 4;
    8dca:	4c33      	ldr	r4, [pc, #204]	; (8e98 <init+0x822>)
    8dcc:	2200      	movs	r2, #0
    8dce:	4b3c      	ldr	r3, [pc, #240]	; (8ec0 <init+0x84a>)
    8dd0:	6938      	ldr	r0, [r7, #16]
    8dd2:	6979      	ldr	r1, [r7, #20]
    8dd4:	47a0      	blx	r4
    8dd6:	0003      	movs	r3, r0
    8dd8:	000c      	movs	r4, r1
    8dda:	613b      	str	r3, [r7, #16]
    8ddc:	617c      	str	r4, [r7, #20]
	tout = tout / 100;
    8dde:	4c30      	ldr	r4, [pc, #192]	; (8ea0 <init+0x82a>)
    8de0:	2200      	movs	r2, #0
    8de2:	4b38      	ldr	r3, [pc, #224]	; (8ec4 <init+0x84e>)
    8de4:	6938      	ldr	r0, [r7, #16]
    8de6:	6979      	ldr	r1, [r7, #20]
    8de8:	47a0      	blx	r4
    8dea:	0003      	movs	r3, r0
    8dec:	000c      	movs	r4, r1
    8dee:	613b      	str	r3, [r7, #16]
    8df0:	617c      	str	r4, [r7, #20]
	port[n_port].rtout = tout;
    8df2:	1dfb      	adds	r3, r7, #7
    8df4:	781c      	ldrb	r4, [r3, #0]
    8df6:	4b2f      	ldr	r3, [pc, #188]	; (8eb4 <init+0x83e>)
    8df8:	6938      	ldr	r0, [r7, #16]
    8dfa:	6979      	ldr	r1, [r7, #20]
    8dfc:	4798      	blx	r3
    8dfe:	0003      	movs	r3, r0
    8e00:	b298      	uxth	r0, r3
    8e02:	4921      	ldr	r1, [pc, #132]	; (8e88 <init+0x812>)
    8e04:	2384      	movs	r3, #132	; 0x84
    8e06:	009a      	lsls	r2, r3, #2
    8e08:	0023      	movs	r3, r4
    8e0a:	00db      	lsls	r3, r3, #3
    8e0c:	191b      	adds	r3, r3, r4
    8e0e:	019b      	lsls	r3, r3, #6
    8e10:	18cb      	adds	r3, r1, r3
    8e12:	189b      	adds	r3, r3, r2
    8e14:	1c02      	adds	r2, r0, #0
    8e16:	801a      	strh	r2, [r3, #0]

	NVIC_DisableIRQ(port[n_port].irqn_sercom);
    8e18:	1dfb      	adds	r3, r7, #7
    8e1a:	781a      	ldrb	r2, [r3, #0]
    8e1c:	491a      	ldr	r1, [pc, #104]	; (8e88 <init+0x812>)
    8e1e:	0013      	movs	r3, r2
    8e20:	00db      	lsls	r3, r3, #3
    8e22:	189b      	adds	r3, r3, r2
    8e24:	019b      	lsls	r3, r3, #6
    8e26:	18cb      	adds	r3, r1, r3
    8e28:	3308      	adds	r3, #8
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	b2db      	uxtb	r3, r3
    8e2e:	b25b      	sxtb	r3, r3
    8e30:	0018      	movs	r0, r3
    8e32:	f7ff fb79 	bl	8528 <__NVIC_DisableIRQ>
	NVIC_SetPriority(port[n_port].irqn_sercom, 1);
    8e36:	1dfb      	adds	r3, r7, #7
    8e38:	781a      	ldrb	r2, [r3, #0]
    8e3a:	4913      	ldr	r1, [pc, #76]	; (8e88 <init+0x812>)
    8e3c:	0013      	movs	r3, r2
    8e3e:	00db      	lsls	r3, r3, #3
    8e40:	189b      	adds	r3, r3, r2
    8e42:	019b      	lsls	r3, r3, #6
    8e44:	18cb      	adds	r3, r1, r3
    8e46:	3308      	adds	r3, #8
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	b2db      	uxtb	r3, r3
    8e4c:	b25b      	sxtb	r3, r3
    8e4e:	2101      	movs	r1, #1
    8e50:	0018      	movs	r0, r3
    8e52:	f7ff fb89 	bl	8568 <__NVIC_SetPriority>
	NVIC_EnableIRQ(port[n_port].irqn_sercom);
    8e56:	1dfb      	adds	r3, r7, #7
    8e58:	781a      	ldrb	r2, [r3, #0]
    8e5a:	490b      	ldr	r1, [pc, #44]	; (8e88 <init+0x812>)
    8e5c:	0013      	movs	r3, r2
    8e5e:	00db      	lsls	r3, r3, #3
    8e60:	189b      	adds	r3, r3, r2
    8e62:	019b      	lsls	r3, r3, #6
    8e64:	18cb      	adds	r3, r1, r3
    8e66:	3308      	adds	r3, #8
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	b2db      	uxtb	r3, r3
    8e6c:	b25b      	sxtb	r3, r3
    8e6e:	0018      	movs	r0, r3
    8e70:	f7ff fb40 	bl	84f4 <__NVIC_EnableIRQ>
	pin_ctrl(RTS, n_port, CLR);
    8e74:	1dfb      	adds	r3, r7, #7
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	2202      	movs	r2, #2
    8e7a:	0019      	movs	r1, r3
    8e7c:	2000      	movs	r0, #0
    8e7e:	4b12      	ldr	r3, [pc, #72]	; (8ec8 <init+0x852>)
    8e80:	4798      	blx	r3
}
    8e82:	46bd      	mov	sp, r7
    8e84:	b008      	add	sp, #32
    8e86:	bdb0      	pop	{r4, r5, r7, pc}
    8e88:	200031fc 	.word	0x200031fc
    8e8c:	20003dc4 	.word	0x20003dc4
    8e90:	0000b189 	.word	0x0000b189
    8e94:	0000c481 	.word	0x0000c481
    8e98:	0000b87d 	.word	0x0000b87d
    8e9c:	40200000 	.word	0x40200000
    8ea0:	0000b215 	.word	0x0000b215
    8ea4:	4186e360 	.word	0x4186e360
    8ea8:	0000bd7d 	.word	0x0000bd7d
    8eac:	3ff00000 	.word	0x3ff00000
    8eb0:	40f00000 	.word	0x40f00000
    8eb4:	0000b14d 	.word	0x0000b14d
    8eb8:	0000c411 	.word	0x0000c411
    8ebc:	412e8480 	.word	0x412e8480
    8ec0:	40100000 	.word	0x40100000
    8ec4:	40590000 	.word	0x40590000
    8ec8:	00006d81 	.word	0x00006d81

00008ecc <usart_write>:

WORD usart_write(BYTE n_port, BYTE* wbuf,WORD size)
{
    8ecc:	b590      	push	{r4, r7, lr}
    8ece:	b083      	sub	sp, #12
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	6039      	str	r1, [r7, #0]
    8ed4:	0011      	movs	r1, r2
    8ed6:	1dfb      	adds	r3, r7, #7
    8ed8:	1c02      	adds	r2, r0, #0
    8eda:	701a      	strb	r2, [r3, #0]
    8edc:	1d3b      	adds	r3, r7, #4
    8ede:	1c0a      	adds	r2, r1, #0
    8ee0:	801a      	strh	r2, [r3, #0]
	if(size == 0) { return(0); }
    8ee2:	1d3b      	adds	r3, r7, #4
    8ee4:	881b      	ldrh	r3, [r3, #0]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d101      	bne.n	8eee <usart_write+0x22>
    8eea:	2300      	movs	r3, #0
    8eec:	e06c      	b.n	8fc8 <usart_write+0xfc>
	pin_ctrl(RTS, n_port, SET);
    8eee:	1dfb      	adds	r3, r7, #7
    8ef0:	781b      	ldrb	r3, [r3, #0]
    8ef2:	2201      	movs	r2, #1
    8ef4:	0019      	movs	r1, r3
    8ef6:	2000      	movs	r0, #0
    8ef8:	4b35      	ldr	r3, [pc, #212]	; (8fd0 <usart_write+0x104>)
    8efa:	4798      	blx	r3
	
	if(size > USART_BUF_SIZE) { size = USART_BUF_SIZE; }
    8efc:	1d3b      	adds	r3, r7, #4
    8efe:	881a      	ldrh	r2, [r3, #0]
    8f00:	2380      	movs	r3, #128	; 0x80
    8f02:	005b      	lsls	r3, r3, #1
    8f04:	429a      	cmp	r2, r3
    8f06:	d903      	bls.n	8f10 <usart_write+0x44>
    8f08:	1d3b      	adds	r3, r7, #4
    8f0a:	2280      	movs	r2, #128	; 0x80
    8f0c:	0052      	lsls	r2, r2, #1
    8f0e:	801a      	strh	r2, [r3, #0]
	memcpy(port[n_port].wbuf,wbuf,size);
    8f10:	1dfb      	adds	r3, r7, #7
    8f12:	781a      	ldrb	r2, [r3, #0]
    8f14:	0013      	movs	r3, r2
    8f16:	00db      	lsls	r3, r3, #3
    8f18:	189b      	adds	r3, r3, r2
    8f1a:	019b      	lsls	r3, r3, #6
    8f1c:	3308      	adds	r3, #8
    8f1e:	001a      	movs	r2, r3
    8f20:	4b2c      	ldr	r3, [pc, #176]	; (8fd4 <usart_write+0x108>)
    8f22:	18d3      	adds	r3, r2, r3
    8f24:	1c58      	adds	r0, r3, #1
    8f26:	1d3b      	adds	r3, r7, #4
    8f28:	881a      	ldrh	r2, [r3, #0]
    8f2a:	683b      	ldr	r3, [r7, #0]
    8f2c:	0019      	movs	r1, r3
    8f2e:	4b2a      	ldr	r3, [pc, #168]	; (8fd8 <usart_write+0x10c>)
    8f30:	4798      	blx	r3
	port[n_port].wn = size;
    8f32:	1dfb      	adds	r3, r7, #7
    8f34:	781a      	ldrb	r2, [r3, #0]
    8f36:	4927      	ldr	r1, [pc, #156]	; (8fd4 <usart_write+0x108>)
    8f38:	4828      	ldr	r0, [pc, #160]	; (8fdc <usart_write+0x110>)
    8f3a:	0013      	movs	r3, r2
    8f3c:	00db      	lsls	r3, r3, #3
    8f3e:	189b      	adds	r3, r3, r2
    8f40:	019b      	lsls	r3, r3, #6
    8f42:	18cb      	adds	r3, r1, r3
    8f44:	181b      	adds	r3, r3, r0
    8f46:	1d3a      	adds	r2, r7, #4
    8f48:	8812      	ldrh	r2, [r2, #0]
    8f4a:	801a      	strh	r2, [r3, #0]
	//port[n_port].wx = 1;
	port[n_port].wx = 0;
    8f4c:	1dfb      	adds	r3, r7, #7
    8f4e:	781a      	ldrb	r2, [r3, #0]
    8f50:	4820      	ldr	r0, [pc, #128]	; (8fd4 <usart_write+0x108>)
    8f52:	2383      	movs	r3, #131	; 0x83
    8f54:	0099      	lsls	r1, r3, #2
    8f56:	0013      	movs	r3, r2
    8f58:	00db      	lsls	r3, r3, #3
    8f5a:	189b      	adds	r3, r3, r2
    8f5c:	019b      	lsls	r3, r3, #6
    8f5e:	18c3      	adds	r3, r0, r3
    8f60:	185b      	adds	r3, r3, r1
    8f62:	2200      	movs	r2, #0
    8f64:	801a      	strh	r2, [r3, #0]
	//port[n_port].sercom->USART.DATA.reg=port[n_port].wbuf[0];
	port[n_port].sercom->USART.INTENCLR.bit.RXC = 1;
    8f66:	1dfb      	adds	r3, r7, #7
    8f68:	781a      	ldrb	r2, [r3, #0]
    8f6a:	491a      	ldr	r1, [pc, #104]	; (8fd4 <usart_write+0x108>)
    8f6c:	0013      	movs	r3, r2
    8f6e:	00db      	lsls	r3, r3, #3
    8f70:	189b      	adds	r3, r3, r2
    8f72:	019b      	lsls	r3, r3, #6
    8f74:	585a      	ldr	r2, [r3, r1]
    8f76:	7d13      	ldrb	r3, [r2, #20]
    8f78:	2104      	movs	r1, #4
    8f7a:	430b      	orrs	r3, r1
    8f7c:	7513      	strb	r3, [r2, #20]
	port[n_port].sercom->USART.INTENSET.bit.DRE = 1;
    8f7e:	1dfb      	adds	r3, r7, #7
    8f80:	781a      	ldrb	r2, [r3, #0]
    8f82:	4914      	ldr	r1, [pc, #80]	; (8fd4 <usart_write+0x108>)
    8f84:	0013      	movs	r3, r2
    8f86:	00db      	lsls	r3, r3, #3
    8f88:	189b      	adds	r3, r3, r2
    8f8a:	019b      	lsls	r3, r3, #6
    8f8c:	585a      	ldr	r2, [r3, r1]
    8f8e:	7d93      	ldrb	r3, [r2, #22]
    8f90:	2101      	movs	r1, #1
    8f92:	430b      	orrs	r3, r1
    8f94:	7593      	strb	r3, [r2, #22]
	port[n_port].counters.tx++;
    8f96:	1dfb      	adds	r3, r7, #7
    8f98:	781a      	ldrb	r2, [r3, #0]
    8f9a:	480e      	ldr	r0, [pc, #56]	; (8fd4 <usart_write+0x108>)
    8f9c:	238d      	movs	r3, #141	; 0x8d
    8f9e:	0099      	lsls	r1, r3, #2
    8fa0:	0013      	movs	r3, r2
    8fa2:	00db      	lsls	r3, r3, #3
    8fa4:	189b      	adds	r3, r3, r2
    8fa6:	019b      	lsls	r3, r3, #6
    8fa8:	18c3      	adds	r3, r0, r3
    8faa:	185b      	adds	r3, r3, r1
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	1c59      	adds	r1, r3, #1
    8fb0:	4c08      	ldr	r4, [pc, #32]	; (8fd4 <usart_write+0x108>)
    8fb2:	238d      	movs	r3, #141	; 0x8d
    8fb4:	0098      	lsls	r0, r3, #2
    8fb6:	0013      	movs	r3, r2
    8fb8:	00db      	lsls	r3, r3, #3
    8fba:	189b      	adds	r3, r3, r2
    8fbc:	019b      	lsls	r3, r3, #6
    8fbe:	18e3      	adds	r3, r4, r3
    8fc0:	181b      	adds	r3, r3, r0
    8fc2:	6019      	str	r1, [r3, #0]
	return(size);
    8fc4:	1d3b      	adds	r3, r7, #4
    8fc6:	881b      	ldrh	r3, [r3, #0]
}
    8fc8:	0018      	movs	r0, r3
    8fca:	46bd      	mov	sp, r7
    8fcc:	b003      	add	sp, #12
    8fce:	bd90      	pop	{r4, r7, pc}
    8fd0:	00006d81 	.word	0x00006d81
    8fd4:	200031fc 	.word	0x200031fc
    8fd8:	0000c825 	.word	0x0000c825
    8fdc:	0000020a 	.word	0x0000020a

00008fe0 <usart_read>:

WORD usart_read (BYTE n_port, BYTE* rbuf,WORD size)
{
    8fe0:	b590      	push	{r4, r7, lr}
    8fe2:	b085      	sub	sp, #20
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	6039      	str	r1, [r7, #0]
    8fe8:	0011      	movs	r1, r2
    8fea:	1dfb      	adds	r3, r7, #7
    8fec:	1c02      	adds	r2, r0, #0
    8fee:	701a      	strb	r2, [r3, #0]
    8ff0:	1d3b      	adds	r3, r7, #4
    8ff2:	1c0a      	adds	r2, r1, #0
    8ff4:	801a      	strh	r2, [r3, #0]
	WORD size_1 = 0;
    8ff6:	230e      	movs	r3, #14
    8ff8:	18fb      	adds	r3, r7, r3
    8ffa:	2200      	movs	r2, #0
    8ffc:	801a      	strh	r2, [r3, #0]
	
	if(port[n_port].rn     ==       0x00)			{ port[n_port].rtime=0; return(0); }
    8ffe:	1dfb      	adds	r3, r7, #7
    9000:	781a      	ldrb	r2, [r3, #0]
    9002:	4948      	ldr	r1, [pc, #288]	; (9124 <usart_read+0x144>)
    9004:	4848      	ldr	r0, [pc, #288]	; (9128 <usart_read+0x148>)
    9006:	0013      	movs	r3, r2
    9008:	00db      	lsls	r3, r3, #3
    900a:	189b      	adds	r3, r3, r2
    900c:	019b      	lsls	r3, r3, #6
    900e:	18cb      	adds	r3, r1, r3
    9010:	181b      	adds	r3, r3, r0
    9012:	881b      	ldrh	r3, [r3, #0]
    9014:	b29b      	uxth	r3, r3
    9016:	2b00      	cmp	r3, #0
    9018:	d10e      	bne.n	9038 <usart_read+0x58>
    901a:	1dfb      	adds	r3, r7, #7
    901c:	781a      	ldrb	r2, [r3, #0]
    901e:	4841      	ldr	r0, [pc, #260]	; (9124 <usart_read+0x144>)
    9020:	2385      	movs	r3, #133	; 0x85
    9022:	0099      	lsls	r1, r3, #2
    9024:	0013      	movs	r3, r2
    9026:	00db      	lsls	r3, r3, #3
    9028:	189b      	adds	r3, r3, r2
    902a:	019b      	lsls	r3, r3, #6
    902c:	18c3      	adds	r3, r0, r3
    902e:	185b      	adds	r3, r3, r1
    9030:	2200      	movs	r2, #0
    9032:	801a      	strh	r2, [r3, #0]
    9034:	2300      	movs	r3, #0
    9036:	e070      	b.n	911a <usart_read+0x13a>
	if(port[n_port].rtout  >  port[n_port].rtime)	{ return(0); }
    9038:	1dfb      	adds	r3, r7, #7
    903a:	781a      	ldrb	r2, [r3, #0]
    903c:	4839      	ldr	r0, [pc, #228]	; (9124 <usart_read+0x144>)
    903e:	2384      	movs	r3, #132	; 0x84
    9040:	0099      	lsls	r1, r3, #2
    9042:	0013      	movs	r3, r2
    9044:	00db      	lsls	r3, r3, #3
    9046:	189b      	adds	r3, r3, r2
    9048:	019b      	lsls	r3, r3, #6
    904a:	18c3      	adds	r3, r0, r3
    904c:	185b      	adds	r3, r3, r1
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	b299      	uxth	r1, r3
    9052:	1dfb      	adds	r3, r7, #7
    9054:	781a      	ldrb	r2, [r3, #0]
    9056:	4c33      	ldr	r4, [pc, #204]	; (9124 <usart_read+0x144>)
    9058:	2385      	movs	r3, #133	; 0x85
    905a:	0098      	lsls	r0, r3, #2
    905c:	0013      	movs	r3, r2
    905e:	00db      	lsls	r3, r3, #3
    9060:	189b      	adds	r3, r3, r2
    9062:	019b      	lsls	r3, r3, #6
    9064:	18e3      	adds	r3, r4, r3
    9066:	181b      	adds	r3, r3, r0
    9068:	881b      	ldrh	r3, [r3, #0]
    906a:	b29b      	uxth	r3, r3
    906c:	4299      	cmp	r1, r3
    906e:	d901      	bls.n	9074 <usart_read+0x94>
    9070:	2300      	movs	r3, #0
    9072:	e052      	b.n	911a <usart_read+0x13a>
		
	size_1 = port[n_port].rn; 
    9074:	1dfb      	adds	r3, r7, #7
    9076:	781a      	ldrb	r2, [r3, #0]
    9078:	230e      	movs	r3, #14
    907a:	18f9      	adds	r1, r7, r3
    907c:	4829      	ldr	r0, [pc, #164]	; (9124 <usart_read+0x144>)
    907e:	4c2a      	ldr	r4, [pc, #168]	; (9128 <usart_read+0x148>)
    9080:	0013      	movs	r3, r2
    9082:	00db      	lsls	r3, r3, #3
    9084:	189b      	adds	r3, r3, r2
    9086:	019b      	lsls	r3, r3, #6
    9088:	18c3      	adds	r3, r0, r3
    908a:	191b      	adds	r3, r3, r4
    908c:	881b      	ldrh	r3, [r3, #0]
    908e:	800b      	strh	r3, [r1, #0]

	if(size_1 > size) {size_1 = size;}
    9090:	230e      	movs	r3, #14
    9092:	18fa      	adds	r2, r7, r3
    9094:	1d3b      	adds	r3, r7, #4
    9096:	8812      	ldrh	r2, [r2, #0]
    9098:	881b      	ldrh	r3, [r3, #0]
    909a:	429a      	cmp	r2, r3
    909c:	d904      	bls.n	90a8 <usart_read+0xc8>
    909e:	230e      	movs	r3, #14
    90a0:	18fb      	adds	r3, r7, r3
    90a2:	1d3a      	adds	r2, r7, #4
    90a4:	8812      	ldrh	r2, [r2, #0]
    90a6:	801a      	strh	r2, [r3, #0]
	
	memcpy(rbuf,port[n_port].rbuf,size_1);
    90a8:	1dfb      	adds	r3, r7, #7
    90aa:	781a      	ldrb	r2, [r3, #0]
    90ac:	0013      	movs	r3, r2
    90ae:	00db      	lsls	r3, r3, #3
    90b0:	189b      	adds	r3, r3, r2
    90b2:	019b      	lsls	r3, r3, #6
    90b4:	3309      	adds	r3, #9
    90b6:	33ff      	adds	r3, #255	; 0xff
    90b8:	001a      	movs	r2, r3
    90ba:	4b1a      	ldr	r3, [pc, #104]	; (9124 <usart_read+0x144>)
    90bc:	18d3      	adds	r3, r2, r3
    90be:	1c59      	adds	r1, r3, #1
    90c0:	230e      	movs	r3, #14
    90c2:	18fb      	adds	r3, r7, r3
    90c4:	881a      	ldrh	r2, [r3, #0]
    90c6:	683b      	ldr	r3, [r7, #0]
    90c8:	0018      	movs	r0, r3
    90ca:	4b18      	ldr	r3, [pc, #96]	; (912c <usart_read+0x14c>)
    90cc:	4798      	blx	r3
	port[n_port].rn = 0;
    90ce:	1dfb      	adds	r3, r7, #7
    90d0:	781a      	ldrb	r2, [r3, #0]
    90d2:	4914      	ldr	r1, [pc, #80]	; (9124 <usart_read+0x144>)
    90d4:	4814      	ldr	r0, [pc, #80]	; (9128 <usart_read+0x148>)
    90d6:	0013      	movs	r3, r2
    90d8:	00db      	lsls	r3, r3, #3
    90da:	189b      	adds	r3, r3, r2
    90dc:	019b      	lsls	r3, r3, #6
    90de:	18cb      	adds	r3, r1, r3
    90e0:	181b      	adds	r3, r3, r0
    90e2:	2200      	movs	r2, #0
    90e4:	801a      	strh	r2, [r3, #0]
	port[n_port].counters.rx++;
    90e6:	1dfb      	adds	r3, r7, #7
    90e8:	781a      	ldrb	r2, [r3, #0]
    90ea:	480e      	ldr	r0, [pc, #56]	; (9124 <usart_read+0x144>)
    90ec:	238e      	movs	r3, #142	; 0x8e
    90ee:	0099      	lsls	r1, r3, #2
    90f0:	0013      	movs	r3, r2
    90f2:	00db      	lsls	r3, r3, #3
    90f4:	189b      	adds	r3, r3, r2
    90f6:	019b      	lsls	r3, r3, #6
    90f8:	18c3      	adds	r3, r0, r3
    90fa:	185b      	adds	r3, r3, r1
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	1c59      	adds	r1, r3, #1
    9100:	4c08      	ldr	r4, [pc, #32]	; (9124 <usart_read+0x144>)
    9102:	238e      	movs	r3, #142	; 0x8e
    9104:	0098      	lsls	r0, r3, #2
    9106:	0013      	movs	r3, r2
    9108:	00db      	lsls	r3, r3, #3
    910a:	189b      	adds	r3, r3, r2
    910c:	019b      	lsls	r3, r3, #6
    910e:	18e3      	adds	r3, r4, r3
    9110:	181b      	adds	r3, r3, r0
    9112:	6019      	str	r1, [r3, #0]
	return(size_1);
    9114:	230e      	movs	r3, #14
    9116:	18fb      	adds	r3, r7, r3
    9118:	881b      	ldrh	r3, [r3, #0]
}
    911a:	0018      	movs	r0, r3
    911c:	46bd      	mov	sp, r7
    911e:	b005      	add	sp, #20
    9120:	bd90      	pop	{r4, r7, pc}
    9122:	46c0      	nop			; (mov r8, r8)
    9124:	200031fc 	.word	0x200031fc
    9128:	0000020e 	.word	0x0000020e
    912c:	0000c825 	.word	0x0000c825

00009130 <sercom_proc>:

void sercom_proc(BYTE n_port)
{
    9130:	b5b0      	push	{r4, r5, r7, lr}
    9132:	b082      	sub	sp, #8
    9134:	af00      	add	r7, sp, #0
    9136:	0002      	movs	r2, r0
    9138:	1dfb      	adds	r3, r7, #7
    913a:	701a      	strb	r2, [r3, #0]
	if (port[n_port].sercom->USART.STATUS.bit.COLL)		{port[n_port].errors.collision++;		port[n_port].sercom->USART.STATUS.bit.COLL   = 1;}
    913c:	1dfb      	adds	r3, r7, #7
    913e:	781a      	ldrb	r2, [r3, #0]
    9140:	49c4      	ldr	r1, [pc, #784]	; (9454 <sercom_proc+0x324>)
    9142:	0013      	movs	r3, r2
    9144:	00db      	lsls	r3, r3, #3
    9146:	189b      	adds	r3, r3, r2
    9148:	019b      	lsls	r3, r3, #6
    914a:	585b      	ldr	r3, [r3, r1]
    914c:	8b5b      	ldrh	r3, [r3, #26]
    914e:	069b      	lsls	r3, r3, #26
    9150:	0fdb      	lsrs	r3, r3, #31
    9152:	b2db      	uxtb	r3, r3
    9154:	2b00      	cmp	r3, #0
    9156:	d023      	beq.n	91a0 <sercom_proc+0x70>
    9158:	1dfb      	adds	r3, r7, #7
    915a:	781a      	ldrb	r2, [r3, #0]
    915c:	49bd      	ldr	r1, [pc, #756]	; (9454 <sercom_proc+0x324>)
    915e:	48be      	ldr	r0, [pc, #760]	; (9458 <sercom_proc+0x328>)
    9160:	0013      	movs	r3, r2
    9162:	00db      	lsls	r3, r3, #3
    9164:	189b      	adds	r3, r3, r2
    9166:	019b      	lsls	r3, r3, #6
    9168:	18cb      	adds	r3, r1, r3
    916a:	181b      	adds	r3, r3, r0
    916c:	881b      	ldrh	r3, [r3, #0]
    916e:	b29b      	uxth	r3, r3
    9170:	3301      	adds	r3, #1
    9172:	b29c      	uxth	r4, r3
    9174:	49b7      	ldr	r1, [pc, #732]	; (9454 <sercom_proc+0x324>)
    9176:	48b8      	ldr	r0, [pc, #736]	; (9458 <sercom_proc+0x328>)
    9178:	0013      	movs	r3, r2
    917a:	00db      	lsls	r3, r3, #3
    917c:	189b      	adds	r3, r3, r2
    917e:	019b      	lsls	r3, r3, #6
    9180:	18cb      	adds	r3, r1, r3
    9182:	181b      	adds	r3, r3, r0
    9184:	1c22      	adds	r2, r4, #0
    9186:	801a      	strh	r2, [r3, #0]
    9188:	1dfb      	adds	r3, r7, #7
    918a:	781a      	ldrb	r2, [r3, #0]
    918c:	49b1      	ldr	r1, [pc, #708]	; (9454 <sercom_proc+0x324>)
    918e:	0013      	movs	r3, r2
    9190:	00db      	lsls	r3, r3, #3
    9192:	189b      	adds	r3, r3, r2
    9194:	019b      	lsls	r3, r3, #6
    9196:	585a      	ldr	r2, [r3, r1]
    9198:	8b53      	ldrh	r3, [r2, #26]
    919a:	2120      	movs	r1, #32
    919c:	430b      	orrs	r3, r1
    919e:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.ISF)		{port[n_port].errors.synchr++;		port[n_port].sercom->USART.STATUS.bit.ISF    = 1;}
    91a0:	1dfb      	adds	r3, r7, #7
    91a2:	781a      	ldrb	r2, [r3, #0]
    91a4:	49ab      	ldr	r1, [pc, #684]	; (9454 <sercom_proc+0x324>)
    91a6:	0013      	movs	r3, r2
    91a8:	00db      	lsls	r3, r3, #3
    91aa:	189b      	adds	r3, r3, r2
    91ac:	019b      	lsls	r3, r3, #6
    91ae:	585b      	ldr	r3, [r3, r1]
    91b0:	8b5b      	ldrh	r3, [r3, #26]
    91b2:	06db      	lsls	r3, r3, #27
    91b4:	0fdb      	lsrs	r3, r3, #31
    91b6:	b2db      	uxtb	r3, r3
    91b8:	2b00      	cmp	r3, #0
    91ba:	d025      	beq.n	9208 <sercom_proc+0xd8>
    91bc:	1dfb      	adds	r3, r7, #7
    91be:	781a      	ldrb	r2, [r3, #0]
    91c0:	48a4      	ldr	r0, [pc, #656]	; (9454 <sercom_proc+0x324>)
    91c2:	238b      	movs	r3, #139	; 0x8b
    91c4:	0099      	lsls	r1, r3, #2
    91c6:	0013      	movs	r3, r2
    91c8:	00db      	lsls	r3, r3, #3
    91ca:	189b      	adds	r3, r3, r2
    91cc:	019b      	lsls	r3, r3, #6
    91ce:	18c3      	adds	r3, r0, r3
    91d0:	185b      	adds	r3, r3, r1
    91d2:	881b      	ldrh	r3, [r3, #0]
    91d4:	b29b      	uxth	r3, r3
    91d6:	3301      	adds	r3, #1
    91d8:	b29c      	uxth	r4, r3
    91da:	489e      	ldr	r0, [pc, #632]	; (9454 <sercom_proc+0x324>)
    91dc:	238b      	movs	r3, #139	; 0x8b
    91de:	0099      	lsls	r1, r3, #2
    91e0:	0013      	movs	r3, r2
    91e2:	00db      	lsls	r3, r3, #3
    91e4:	189b      	adds	r3, r3, r2
    91e6:	019b      	lsls	r3, r3, #6
    91e8:	18c3      	adds	r3, r0, r3
    91ea:	185b      	adds	r3, r3, r1
    91ec:	1c22      	adds	r2, r4, #0
    91ee:	801a      	strh	r2, [r3, #0]
    91f0:	1dfb      	adds	r3, r7, #7
    91f2:	781a      	ldrb	r2, [r3, #0]
    91f4:	4997      	ldr	r1, [pc, #604]	; (9454 <sercom_proc+0x324>)
    91f6:	0013      	movs	r3, r2
    91f8:	00db      	lsls	r3, r3, #3
    91fa:	189b      	adds	r3, r3, r2
    91fc:	019b      	lsls	r3, r3, #6
    91fe:	585a      	ldr	r2, [r3, r1]
    9200:	8b53      	ldrh	r3, [r2, #26]
    9202:	2110      	movs	r1, #16
    9204:	430b      	orrs	r3, r1
    9206:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.BUFOVF)	{port[n_port].errors.buf_ovf++;		port[n_port].sercom->USART.STATUS.bit.BUFOVF = 1;}
    9208:	1dfb      	adds	r3, r7, #7
    920a:	781a      	ldrb	r2, [r3, #0]
    920c:	4991      	ldr	r1, [pc, #580]	; (9454 <sercom_proc+0x324>)
    920e:	0013      	movs	r3, r2
    9210:	00db      	lsls	r3, r3, #3
    9212:	189b      	adds	r3, r3, r2
    9214:	019b      	lsls	r3, r3, #6
    9216:	585b      	ldr	r3, [r3, r1]
    9218:	8b5b      	ldrh	r3, [r3, #26]
    921a:	075b      	lsls	r3, r3, #29
    921c:	0fdb      	lsrs	r3, r3, #31
    921e:	b2db      	uxtb	r3, r3
    9220:	2b00      	cmp	r3, #0
    9222:	d023      	beq.n	926c <sercom_proc+0x13c>
    9224:	1dfb      	adds	r3, r7, #7
    9226:	781a      	ldrb	r2, [r3, #0]
    9228:	498a      	ldr	r1, [pc, #552]	; (9454 <sercom_proc+0x324>)
    922a:	488c      	ldr	r0, [pc, #560]	; (945c <sercom_proc+0x32c>)
    922c:	0013      	movs	r3, r2
    922e:	00db      	lsls	r3, r3, #3
    9230:	189b      	adds	r3, r3, r2
    9232:	019b      	lsls	r3, r3, #6
    9234:	18cb      	adds	r3, r1, r3
    9236:	181b      	adds	r3, r3, r0
    9238:	881b      	ldrh	r3, [r3, #0]
    923a:	b29b      	uxth	r3, r3
    923c:	3301      	adds	r3, #1
    923e:	b29c      	uxth	r4, r3
    9240:	4984      	ldr	r1, [pc, #528]	; (9454 <sercom_proc+0x324>)
    9242:	4886      	ldr	r0, [pc, #536]	; (945c <sercom_proc+0x32c>)
    9244:	0013      	movs	r3, r2
    9246:	00db      	lsls	r3, r3, #3
    9248:	189b      	adds	r3, r3, r2
    924a:	019b      	lsls	r3, r3, #6
    924c:	18cb      	adds	r3, r1, r3
    924e:	181b      	adds	r3, r3, r0
    9250:	1c22      	adds	r2, r4, #0
    9252:	801a      	strh	r2, [r3, #0]
    9254:	1dfb      	adds	r3, r7, #7
    9256:	781a      	ldrb	r2, [r3, #0]
    9258:	497e      	ldr	r1, [pc, #504]	; (9454 <sercom_proc+0x324>)
    925a:	0013      	movs	r3, r2
    925c:	00db      	lsls	r3, r3, #3
    925e:	189b      	adds	r3, r3, r2
    9260:	019b      	lsls	r3, r3, #6
    9262:	585a      	ldr	r2, [r3, r1]
    9264:	8b53      	ldrh	r3, [r2, #26]
    9266:	2104      	movs	r1, #4
    9268:	430b      	orrs	r3, r1
    926a:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.FERR)		{port[n_port].errors.st_bit++;		port[n_port].sercom->USART.STATUS.bit.FERR   = 1;}
    926c:	1dfb      	adds	r3, r7, #7
    926e:	781a      	ldrb	r2, [r3, #0]
    9270:	4978      	ldr	r1, [pc, #480]	; (9454 <sercom_proc+0x324>)
    9272:	0013      	movs	r3, r2
    9274:	00db      	lsls	r3, r3, #3
    9276:	189b      	adds	r3, r3, r2
    9278:	019b      	lsls	r3, r3, #6
    927a:	585b      	ldr	r3, [r3, r1]
    927c:	8b5b      	ldrh	r3, [r3, #26]
    927e:	079b      	lsls	r3, r3, #30
    9280:	0fdb      	lsrs	r3, r3, #31
    9282:	b2db      	uxtb	r3, r3
    9284:	2b00      	cmp	r3, #0
    9286:	d025      	beq.n	92d4 <sercom_proc+0x1a4>
    9288:	1dfb      	adds	r3, r7, #7
    928a:	781a      	ldrb	r2, [r3, #0]
    928c:	4871      	ldr	r0, [pc, #452]	; (9454 <sercom_proc+0x324>)
    928e:	238c      	movs	r3, #140	; 0x8c
    9290:	0099      	lsls	r1, r3, #2
    9292:	0013      	movs	r3, r2
    9294:	00db      	lsls	r3, r3, #3
    9296:	189b      	adds	r3, r3, r2
    9298:	019b      	lsls	r3, r3, #6
    929a:	18c3      	adds	r3, r0, r3
    929c:	185b      	adds	r3, r3, r1
    929e:	881b      	ldrh	r3, [r3, #0]
    92a0:	b29b      	uxth	r3, r3
    92a2:	3301      	adds	r3, #1
    92a4:	b29c      	uxth	r4, r3
    92a6:	486b      	ldr	r0, [pc, #428]	; (9454 <sercom_proc+0x324>)
    92a8:	238c      	movs	r3, #140	; 0x8c
    92aa:	0099      	lsls	r1, r3, #2
    92ac:	0013      	movs	r3, r2
    92ae:	00db      	lsls	r3, r3, #3
    92b0:	189b      	adds	r3, r3, r2
    92b2:	019b      	lsls	r3, r3, #6
    92b4:	18c3      	adds	r3, r0, r3
    92b6:	185b      	adds	r3, r3, r1
    92b8:	1c22      	adds	r2, r4, #0
    92ba:	801a      	strh	r2, [r3, #0]
    92bc:	1dfb      	adds	r3, r7, #7
    92be:	781a      	ldrb	r2, [r3, #0]
    92c0:	4964      	ldr	r1, [pc, #400]	; (9454 <sercom_proc+0x324>)
    92c2:	0013      	movs	r3, r2
    92c4:	00db      	lsls	r3, r3, #3
    92c6:	189b      	adds	r3, r3, r2
    92c8:	019b      	lsls	r3, r3, #6
    92ca:	585a      	ldr	r2, [r3, r1]
    92cc:	8b53      	ldrh	r3, [r2, #26]
    92ce:	2102      	movs	r1, #2
    92d0:	430b      	orrs	r3, r1
    92d2:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.PERR)		{port[n_port].errors.prty++;			port[n_port].sercom->USART.STATUS.bit.PERR   = 1;}
    92d4:	1dfb      	adds	r3, r7, #7
    92d6:	781a      	ldrb	r2, [r3, #0]
    92d8:	495e      	ldr	r1, [pc, #376]	; (9454 <sercom_proc+0x324>)
    92da:	0013      	movs	r3, r2
    92dc:	00db      	lsls	r3, r3, #3
    92de:	189b      	adds	r3, r3, r2
    92e0:	019b      	lsls	r3, r3, #6
    92e2:	585b      	ldr	r3, [r3, r1]
    92e4:	8b5b      	ldrh	r3, [r3, #26]
    92e6:	07db      	lsls	r3, r3, #31
    92e8:	0fdb      	lsrs	r3, r3, #31
    92ea:	b2db      	uxtb	r3, r3
    92ec:	2b00      	cmp	r3, #0
    92ee:	d023      	beq.n	9338 <sercom_proc+0x208>
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781a      	ldrb	r2, [r3, #0]
    92f4:	4957      	ldr	r1, [pc, #348]	; (9454 <sercom_proc+0x324>)
    92f6:	485a      	ldr	r0, [pc, #360]	; (9460 <sercom_proc+0x330>)
    92f8:	0013      	movs	r3, r2
    92fa:	00db      	lsls	r3, r3, #3
    92fc:	189b      	adds	r3, r3, r2
    92fe:	019b      	lsls	r3, r3, #6
    9300:	18cb      	adds	r3, r1, r3
    9302:	181b      	adds	r3, r3, r0
    9304:	881b      	ldrh	r3, [r3, #0]
    9306:	b29b      	uxth	r3, r3
    9308:	3301      	adds	r3, #1
    930a:	b29c      	uxth	r4, r3
    930c:	4951      	ldr	r1, [pc, #324]	; (9454 <sercom_proc+0x324>)
    930e:	4854      	ldr	r0, [pc, #336]	; (9460 <sercom_proc+0x330>)
    9310:	0013      	movs	r3, r2
    9312:	00db      	lsls	r3, r3, #3
    9314:	189b      	adds	r3, r3, r2
    9316:	019b      	lsls	r3, r3, #6
    9318:	18cb      	adds	r3, r1, r3
    931a:	181b      	adds	r3, r3, r0
    931c:	1c22      	adds	r2, r4, #0
    931e:	801a      	strh	r2, [r3, #0]
    9320:	1dfb      	adds	r3, r7, #7
    9322:	781a      	ldrb	r2, [r3, #0]
    9324:	494b      	ldr	r1, [pc, #300]	; (9454 <sercom_proc+0x324>)
    9326:	0013      	movs	r3, r2
    9328:	00db      	lsls	r3, r3, #3
    932a:	189b      	adds	r3, r3, r2
    932c:	019b      	lsls	r3, r3, #6
    932e:	585a      	ldr	r2, [r3, r1]
    9330:	8b53      	ldrh	r3, [r2, #26]
    9332:	2101      	movs	r1, #1
    9334:	430b      	orrs	r3, r1
    9336:	8353      	strh	r3, [r2, #26]
		
	if (port[n_port].sercom->USART.INTFLAG.bit.RXC)
    9338:	1dfb      	adds	r3, r7, #7
    933a:	781a      	ldrb	r2, [r3, #0]
    933c:	4945      	ldr	r1, [pc, #276]	; (9454 <sercom_proc+0x324>)
    933e:	0013      	movs	r3, r2
    9340:	00db      	lsls	r3, r3, #3
    9342:	189b      	adds	r3, r3, r2
    9344:	019b      	lsls	r3, r3, #6
    9346:	585b      	ldr	r3, [r3, r1]
    9348:	7e1b      	ldrb	r3, [r3, #24]
    934a:	075b      	lsls	r3, r3, #29
    934c:	0fdb      	lsrs	r3, r3, #31
    934e:	b2db      	uxtb	r3, r3
    9350:	2b00      	cmp	r3, #0
    9352:	d100      	bne.n	9356 <sercom_proc+0x226>
    9354:	e08a      	b.n	946c <sercom_proc+0x33c>
	{
		port[n_port].rxc++;
    9356:	1dfb      	adds	r3, r7, #7
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	493e      	ldr	r1, [pc, #248]	; (9454 <sercom_proc+0x324>)
    935c:	4841      	ldr	r0, [pc, #260]	; (9464 <sercom_proc+0x334>)
    935e:	0013      	movs	r3, r2
    9360:	00db      	lsls	r3, r3, #3
    9362:	189b      	adds	r3, r3, r2
    9364:	019b      	lsls	r3, r3, #6
    9366:	18cb      	adds	r3, r1, r3
    9368:	181b      	adds	r3, r3, r0
    936a:	881b      	ldrh	r3, [r3, #0]
    936c:	b29b      	uxth	r3, r3
    936e:	3301      	adds	r3, #1
    9370:	b29c      	uxth	r4, r3
    9372:	4938      	ldr	r1, [pc, #224]	; (9454 <sercom_proc+0x324>)
    9374:	483b      	ldr	r0, [pc, #236]	; (9464 <sercom_proc+0x334>)
    9376:	0013      	movs	r3, r2
    9378:	00db      	lsls	r3, r3, #3
    937a:	189b      	adds	r3, r3, r2
    937c:	019b      	lsls	r3, r3, #6
    937e:	18cb      	adds	r3, r1, r3
    9380:	181b      	adds	r3, r3, r0
    9382:	1c22      	adds	r2, r4, #0
    9384:	801a      	strh	r2, [r3, #0]
		if(port[n_port].rn >= USART_BUF_SIZE){port[n_port].rn = 0;}
    9386:	1dfb      	adds	r3, r7, #7
    9388:	781a      	ldrb	r2, [r3, #0]
    938a:	4932      	ldr	r1, [pc, #200]	; (9454 <sercom_proc+0x324>)
    938c:	4836      	ldr	r0, [pc, #216]	; (9468 <sercom_proc+0x338>)
    938e:	0013      	movs	r3, r2
    9390:	00db      	lsls	r3, r3, #3
    9392:	189b      	adds	r3, r3, r2
    9394:	019b      	lsls	r3, r3, #6
    9396:	18cb      	adds	r3, r1, r3
    9398:	181b      	adds	r3, r3, r0
    939a:	881b      	ldrh	r3, [r3, #0]
    939c:	b29b      	uxth	r3, r3
    939e:	2bff      	cmp	r3, #255	; 0xff
    93a0:	d90b      	bls.n	93ba <sercom_proc+0x28a>
    93a2:	1dfb      	adds	r3, r7, #7
    93a4:	781a      	ldrb	r2, [r3, #0]
    93a6:	492b      	ldr	r1, [pc, #172]	; (9454 <sercom_proc+0x324>)
    93a8:	482f      	ldr	r0, [pc, #188]	; (9468 <sercom_proc+0x338>)
    93aa:	0013      	movs	r3, r2
    93ac:	00db      	lsls	r3, r3, #3
    93ae:	189b      	adds	r3, r3, r2
    93b0:	019b      	lsls	r3, r3, #6
    93b2:	18cb      	adds	r3, r1, r3
    93b4:	181b      	adds	r3, r3, r0
    93b6:	2200      	movs	r2, #0
    93b8:	801a      	strh	r2, [r3, #0]
		port[n_port].rbuf[port[n_port].rn] = port[n_port].sercom->USART.DATA.reg;
    93ba:	1dfb      	adds	r3, r7, #7
    93bc:	781a      	ldrb	r2, [r3, #0]
    93be:	1dfb      	adds	r3, r7, #7
    93c0:	7819      	ldrb	r1, [r3, #0]
    93c2:	4824      	ldr	r0, [pc, #144]	; (9454 <sercom_proc+0x324>)
    93c4:	4c28      	ldr	r4, [pc, #160]	; (9468 <sercom_proc+0x338>)
    93c6:	000b      	movs	r3, r1
    93c8:	00db      	lsls	r3, r3, #3
    93ca:	185b      	adds	r3, r3, r1
    93cc:	019b      	lsls	r3, r3, #6
    93ce:	18c3      	adds	r3, r0, r3
    93d0:	191b      	adds	r3, r3, r4
    93d2:	881b      	ldrh	r3, [r3, #0]
    93d4:	b29b      	uxth	r3, r3
    93d6:	001d      	movs	r5, r3
    93d8:	1dfb      	adds	r3, r7, #7
    93da:	7819      	ldrb	r1, [r3, #0]
    93dc:	481d      	ldr	r0, [pc, #116]	; (9454 <sercom_proc+0x324>)
    93de:	000b      	movs	r3, r1
    93e0:	00db      	lsls	r3, r3, #3
    93e2:	185b      	adds	r3, r3, r1
    93e4:	019b      	lsls	r3, r3, #6
    93e6:	581b      	ldr	r3, [r3, r0]
    93e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93ea:	b29b      	uxth	r3, r3
    93ec:	b2dc      	uxtb	r4, r3
    93ee:	4819      	ldr	r0, [pc, #100]	; (9454 <sercom_proc+0x324>)
    93f0:	230a      	movs	r3, #10
    93f2:	33ff      	adds	r3, #255	; 0xff
    93f4:	0019      	movs	r1, r3
    93f6:	0013      	movs	r3, r2
    93f8:	00db      	lsls	r3, r3, #3
    93fa:	189b      	adds	r3, r3, r2
    93fc:	019b      	lsls	r3, r3, #6
    93fe:	18c3      	adds	r3, r0, r3
    9400:	195b      	adds	r3, r3, r5
    9402:	185b      	adds	r3, r3, r1
    9404:	1c22      	adds	r2, r4, #0
    9406:	701a      	strb	r2, [r3, #0]
		port[n_port].rn++;
    9408:	1dfb      	adds	r3, r7, #7
    940a:	781a      	ldrb	r2, [r3, #0]
    940c:	4911      	ldr	r1, [pc, #68]	; (9454 <sercom_proc+0x324>)
    940e:	4816      	ldr	r0, [pc, #88]	; (9468 <sercom_proc+0x338>)
    9410:	0013      	movs	r3, r2
    9412:	00db      	lsls	r3, r3, #3
    9414:	189b      	adds	r3, r3, r2
    9416:	019b      	lsls	r3, r3, #6
    9418:	18cb      	adds	r3, r1, r3
    941a:	181b      	adds	r3, r3, r0
    941c:	881b      	ldrh	r3, [r3, #0]
    941e:	b29b      	uxth	r3, r3
    9420:	3301      	adds	r3, #1
    9422:	b29c      	uxth	r4, r3
    9424:	490b      	ldr	r1, [pc, #44]	; (9454 <sercom_proc+0x324>)
    9426:	4810      	ldr	r0, [pc, #64]	; (9468 <sercom_proc+0x338>)
    9428:	0013      	movs	r3, r2
    942a:	00db      	lsls	r3, r3, #3
    942c:	189b      	adds	r3, r3, r2
    942e:	019b      	lsls	r3, r3, #6
    9430:	18cb      	adds	r3, r1, r3
    9432:	181b      	adds	r3, r3, r0
    9434:	1c22      	adds	r2, r4, #0
    9436:	801a      	strh	r2, [r3, #0]
		port[n_port].rtime = 0;
    9438:	1dfb      	adds	r3, r7, #7
    943a:	781a      	ldrb	r2, [r3, #0]
    943c:	4805      	ldr	r0, [pc, #20]	; (9454 <sercom_proc+0x324>)
    943e:	2385      	movs	r3, #133	; 0x85
    9440:	0099      	lsls	r1, r3, #2
    9442:	0013      	movs	r3, r2
    9444:	00db      	lsls	r3, r3, #3
    9446:	189b      	adds	r3, r3, r2
    9448:	019b      	lsls	r3, r3, #6
    944a:	18c3      	adds	r3, r0, r3
    944c:	185b      	adds	r3, r3, r1
    944e:	2200      	movs	r2, #0
    9450:	801a      	strh	r2, [r3, #0]
		return;
    9452:	e0fb      	b.n	964c <sercom_proc+0x51c>
    9454:	200031fc 	.word	0x200031fc
    9458:	0000022a 	.word	0x0000022a
    945c:	0000022e 	.word	0x0000022e
    9460:	00000232 	.word	0x00000232
    9464:	00000226 	.word	0x00000226
    9468:	0000020e 	.word	0x0000020e
	}

	if(port[n_port].sercom->USART.INTFLAG.bit.TXC)
    946c:	1dfb      	adds	r3, r7, #7
    946e:	781a      	ldrb	r2, [r3, #0]
    9470:	4978      	ldr	r1, [pc, #480]	; (9654 <sercom_proc+0x524>)
    9472:	0013      	movs	r3, r2
    9474:	00db      	lsls	r3, r3, #3
    9476:	189b      	adds	r3, r3, r2
    9478:	019b      	lsls	r3, r3, #6
    947a:	585b      	ldr	r3, [r3, r1]
    947c:	7e1b      	ldrb	r3, [r3, #24]
    947e:	079b      	lsls	r3, r3, #30
    9480:	0fdb      	lsrs	r3, r3, #31
    9482:	b2db      	uxtb	r3, r3
    9484:	2b00      	cmp	r3, #0
    9486:	d045      	beq.n	9514 <sercom_proc+0x3e4>
	{
		port[n_port].txc++;
    9488:	1dfb      	adds	r3, r7, #7
    948a:	781a      	ldrb	r2, [r3, #0]
    948c:	4871      	ldr	r0, [pc, #452]	; (9654 <sercom_proc+0x524>)
    948e:	238a      	movs	r3, #138	; 0x8a
    9490:	0099      	lsls	r1, r3, #2
    9492:	0013      	movs	r3, r2
    9494:	00db      	lsls	r3, r3, #3
    9496:	189b      	adds	r3, r3, r2
    9498:	019b      	lsls	r3, r3, #6
    949a:	18c3      	adds	r3, r0, r3
    949c:	185b      	adds	r3, r3, r1
    949e:	881b      	ldrh	r3, [r3, #0]
    94a0:	b29b      	uxth	r3, r3
    94a2:	3301      	adds	r3, #1
    94a4:	b29c      	uxth	r4, r3
    94a6:	486b      	ldr	r0, [pc, #428]	; (9654 <sercom_proc+0x524>)
    94a8:	238a      	movs	r3, #138	; 0x8a
    94aa:	0099      	lsls	r1, r3, #2
    94ac:	0013      	movs	r3, r2
    94ae:	00db      	lsls	r3, r3, #3
    94b0:	189b      	adds	r3, r3, r2
    94b2:	019b      	lsls	r3, r3, #6
    94b4:	18c3      	adds	r3, r0, r3
    94b6:	185b      	adds	r3, r3, r1
    94b8:	1c22      	adds	r2, r4, #0
    94ba:	801a      	strh	r2, [r3, #0]
		port[n_port].sercom->USART.INTFLAG.bit.TXC = 1;
    94bc:	1dfb      	adds	r3, r7, #7
    94be:	781a      	ldrb	r2, [r3, #0]
    94c0:	4964      	ldr	r1, [pc, #400]	; (9654 <sercom_proc+0x524>)
    94c2:	0013      	movs	r3, r2
    94c4:	00db      	lsls	r3, r3, #3
    94c6:	189b      	adds	r3, r3, r2
    94c8:	019b      	lsls	r3, r3, #6
    94ca:	585a      	ldr	r2, [r3, r1]
    94cc:	7e13      	ldrb	r3, [r2, #24]
    94ce:	2102      	movs	r1, #2
    94d0:	430b      	orrs	r3, r1
    94d2:	7613      	strb	r3, [r2, #24]
		pin_ctrl(RTS, n_port, CLR);
    94d4:	1dfb      	adds	r3, r7, #7
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	2202      	movs	r2, #2
    94da:	0019      	movs	r1, r3
    94dc:	2000      	movs	r0, #0
    94de:	4b5e      	ldr	r3, [pc, #376]	; (9658 <sercom_proc+0x528>)
    94e0:	4798      	blx	r3
		port[n_port].sercom->USART.INTENCLR.bit.TXC = 1;
    94e2:	1dfb      	adds	r3, r7, #7
    94e4:	781a      	ldrb	r2, [r3, #0]
    94e6:	495b      	ldr	r1, [pc, #364]	; (9654 <sercom_proc+0x524>)
    94e8:	0013      	movs	r3, r2
    94ea:	00db      	lsls	r3, r3, #3
    94ec:	189b      	adds	r3, r3, r2
    94ee:	019b      	lsls	r3, r3, #6
    94f0:	585a      	ldr	r2, [r3, r1]
    94f2:	7d13      	ldrb	r3, [r2, #20]
    94f4:	2102      	movs	r1, #2
    94f6:	430b      	orrs	r3, r1
    94f8:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.RXC = 1;
    94fa:	1dfb      	adds	r3, r7, #7
    94fc:	781a      	ldrb	r2, [r3, #0]
    94fe:	4955      	ldr	r1, [pc, #340]	; (9654 <sercom_proc+0x524>)
    9500:	0013      	movs	r3, r2
    9502:	00db      	lsls	r3, r3, #3
    9504:	189b      	adds	r3, r3, r2
    9506:	019b      	lsls	r3, r3, #6
    9508:	585a      	ldr	r2, [r3, r1]
    950a:	7d93      	ldrb	r3, [r2, #22]
    950c:	2104      	movs	r1, #4
    950e:	430b      	orrs	r3, r1
    9510:	7593      	strb	r3, [r2, #22]
		return;
    9512:	e09b      	b.n	964c <sercom_proc+0x51c>
	}
	
	if(port[n_port].sercom->USART.INTFLAG.bit.DRE)
    9514:	1dfb      	adds	r3, r7, #7
    9516:	781a      	ldrb	r2, [r3, #0]
    9518:	494e      	ldr	r1, [pc, #312]	; (9654 <sercom_proc+0x524>)
    951a:	0013      	movs	r3, r2
    951c:	00db      	lsls	r3, r3, #3
    951e:	189b      	adds	r3, r3, r2
    9520:	019b      	lsls	r3, r3, #6
    9522:	585b      	ldr	r3, [r3, r1]
    9524:	7e1b      	ldrb	r3, [r3, #24]
    9526:	07db      	lsls	r3, r3, #31
    9528:	0fdb      	lsrs	r3, r3, #31
    952a:	b2db      	uxtb	r3, r3
    952c:	2b00      	cmp	r3, #0
    952e:	d100      	bne.n	9532 <sercom_proc+0x402>
    9530:	e08c      	b.n	964c <sercom_proc+0x51c>
	{
		port[n_port].dre++;
    9532:	1dfb      	adds	r3, r7, #7
    9534:	781a      	ldrb	r2, [r3, #0]
    9536:	4847      	ldr	r0, [pc, #284]	; (9654 <sercom_proc+0x524>)
    9538:	2389      	movs	r3, #137	; 0x89
    953a:	0099      	lsls	r1, r3, #2
    953c:	0013      	movs	r3, r2
    953e:	00db      	lsls	r3, r3, #3
    9540:	189b      	adds	r3, r3, r2
    9542:	019b      	lsls	r3, r3, #6
    9544:	18c3      	adds	r3, r0, r3
    9546:	185b      	adds	r3, r3, r1
    9548:	881b      	ldrh	r3, [r3, #0]
    954a:	b29b      	uxth	r3, r3
    954c:	3301      	adds	r3, #1
    954e:	b29c      	uxth	r4, r3
    9550:	4840      	ldr	r0, [pc, #256]	; (9654 <sercom_proc+0x524>)
    9552:	2389      	movs	r3, #137	; 0x89
    9554:	0099      	lsls	r1, r3, #2
    9556:	0013      	movs	r3, r2
    9558:	00db      	lsls	r3, r3, #3
    955a:	189b      	adds	r3, r3, r2
    955c:	019b      	lsls	r3, r3, #6
    955e:	18c3      	adds	r3, r0, r3
    9560:	185b      	adds	r3, r3, r1
    9562:	1c22      	adds	r2, r4, #0
    9564:	801a      	strh	r2, [r3, #0]
		if(port[n_port].wx < port[n_port].wn)
    9566:	1dfb      	adds	r3, r7, #7
    9568:	781a      	ldrb	r2, [r3, #0]
    956a:	483a      	ldr	r0, [pc, #232]	; (9654 <sercom_proc+0x524>)
    956c:	2383      	movs	r3, #131	; 0x83
    956e:	0099      	lsls	r1, r3, #2
    9570:	0013      	movs	r3, r2
    9572:	00db      	lsls	r3, r3, #3
    9574:	189b      	adds	r3, r3, r2
    9576:	019b      	lsls	r3, r3, #6
    9578:	18c3      	adds	r3, r0, r3
    957a:	185b      	adds	r3, r3, r1
    957c:	881b      	ldrh	r3, [r3, #0]
    957e:	b299      	uxth	r1, r3
    9580:	1dfb      	adds	r3, r7, #7
    9582:	781a      	ldrb	r2, [r3, #0]
    9584:	4833      	ldr	r0, [pc, #204]	; (9654 <sercom_proc+0x524>)
    9586:	4c35      	ldr	r4, [pc, #212]	; (965c <sercom_proc+0x52c>)
    9588:	0013      	movs	r3, r2
    958a:	00db      	lsls	r3, r3, #3
    958c:	189b      	adds	r3, r3, r2
    958e:	019b      	lsls	r3, r3, #6
    9590:	18c3      	adds	r3, r0, r3
    9592:	191b      	adds	r3, r3, r4
    9594:	881b      	ldrh	r3, [r3, #0]
    9596:	b29b      	uxth	r3, r3
    9598:	4299      	cmp	r1, r3
    959a:	d23e      	bcs.n	961a <sercom_proc+0x4ea>
		{
			port[n_port].sercom->USART.DATA.reg = port[n_port].wbuf[port[n_port].wx];
    959c:	1dfb      	adds	r3, r7, #7
    959e:	781a      	ldrb	r2, [r3, #0]
    95a0:	492c      	ldr	r1, [pc, #176]	; (9654 <sercom_proc+0x524>)
    95a2:	0013      	movs	r3, r2
    95a4:	00db      	lsls	r3, r3, #3
    95a6:	189b      	adds	r3, r3, r2
    95a8:	019b      	lsls	r3, r3, #6
    95aa:	5858      	ldr	r0, [r3, r1]
    95ac:	1dfb      	adds	r3, r7, #7
    95ae:	781a      	ldrb	r2, [r3, #0]
    95b0:	1dfb      	adds	r3, r7, #7
    95b2:	7819      	ldrb	r1, [r3, #0]
    95b4:	4d27      	ldr	r5, [pc, #156]	; (9654 <sercom_proc+0x524>)
    95b6:	2383      	movs	r3, #131	; 0x83
    95b8:	009c      	lsls	r4, r3, #2
    95ba:	000b      	movs	r3, r1
    95bc:	00db      	lsls	r3, r3, #3
    95be:	185b      	adds	r3, r3, r1
    95c0:	019b      	lsls	r3, r3, #6
    95c2:	18eb      	adds	r3, r5, r3
    95c4:	191b      	adds	r3, r3, r4
    95c6:	881b      	ldrh	r3, [r3, #0]
    95c8:	b29b      	uxth	r3, r3
    95ca:	001c      	movs	r4, r3
    95cc:	4921      	ldr	r1, [pc, #132]	; (9654 <sercom_proc+0x524>)
    95ce:	0013      	movs	r3, r2
    95d0:	00db      	lsls	r3, r3, #3
    95d2:	189b      	adds	r3, r3, r2
    95d4:	019b      	lsls	r3, r3, #6
    95d6:	18cb      	adds	r3, r1, r3
    95d8:	191b      	adds	r3, r3, r4
    95da:	3309      	adds	r3, #9
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	b2db      	uxtb	r3, r3
    95e0:	b29b      	uxth	r3, r3
    95e2:	8503      	strh	r3, [r0, #40]	; 0x28
			port[n_port].wx  ++;
    95e4:	1dfb      	adds	r3, r7, #7
    95e6:	781a      	ldrb	r2, [r3, #0]
    95e8:	481a      	ldr	r0, [pc, #104]	; (9654 <sercom_proc+0x524>)
    95ea:	2383      	movs	r3, #131	; 0x83
    95ec:	0099      	lsls	r1, r3, #2
    95ee:	0013      	movs	r3, r2
    95f0:	00db      	lsls	r3, r3, #3
    95f2:	189b      	adds	r3, r3, r2
    95f4:	019b      	lsls	r3, r3, #6
    95f6:	18c3      	adds	r3, r0, r3
    95f8:	185b      	adds	r3, r3, r1
    95fa:	881b      	ldrh	r3, [r3, #0]
    95fc:	b29b      	uxth	r3, r3
    95fe:	3301      	adds	r3, #1
    9600:	b29c      	uxth	r4, r3
    9602:	4814      	ldr	r0, [pc, #80]	; (9654 <sercom_proc+0x524>)
    9604:	2383      	movs	r3, #131	; 0x83
    9606:	0099      	lsls	r1, r3, #2
    9608:	0013      	movs	r3, r2
    960a:	00db      	lsls	r3, r3, #3
    960c:	189b      	adds	r3, r3, r2
    960e:	019b      	lsls	r3, r3, #6
    9610:	18c3      	adds	r3, r0, r3
    9612:	185b      	adds	r3, r3, r1
    9614:	1c22      	adds	r2, r4, #0
    9616:	801a      	strh	r2, [r3, #0]
			return;
    9618:	e018      	b.n	964c <sercom_proc+0x51c>
		}
		port[n_port].sercom->USART.INTENCLR.bit.DRE=1;
    961a:	1dfb      	adds	r3, r7, #7
    961c:	781a      	ldrb	r2, [r3, #0]
    961e:	490d      	ldr	r1, [pc, #52]	; (9654 <sercom_proc+0x524>)
    9620:	0013      	movs	r3, r2
    9622:	00db      	lsls	r3, r3, #3
    9624:	189b      	adds	r3, r3, r2
    9626:	019b      	lsls	r3, r3, #6
    9628:	585a      	ldr	r2, [r3, r1]
    962a:	7d13      	ldrb	r3, [r2, #20]
    962c:	2101      	movs	r1, #1
    962e:	430b      	orrs	r3, r1
    9630:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.TXC=1;
    9632:	1dfb      	adds	r3, r7, #7
    9634:	781a      	ldrb	r2, [r3, #0]
    9636:	4907      	ldr	r1, [pc, #28]	; (9654 <sercom_proc+0x524>)
    9638:	0013      	movs	r3, r2
    963a:	00db      	lsls	r3, r3, #3
    963c:	189b      	adds	r3, r3, r2
    963e:	019b      	lsls	r3, r3, #6
    9640:	585a      	ldr	r2, [r3, r1]
    9642:	7d93      	ldrb	r3, [r2, #22]
    9644:	2102      	movs	r1, #2
    9646:	430b      	orrs	r3, r1
    9648:	7593      	strb	r3, [r2, #22]
		return;
    964a:	46c0      	nop			; (mov r8, r8)
	}
};
    964c:	46bd      	mov	sp, r7
    964e:	b002      	add	sp, #8
    9650:	bdb0      	pop	{r4, r5, r7, pc}
    9652:	46c0      	nop			; (mov r8, r8)
    9654:	200031fc 	.word	0x200031fc
    9658:	00006d81 	.word	0x00006d81
    965c:	0000020a 	.word	0x0000020a

00009660 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    9660:	b580      	push	{r7, lr}
    9662:	af00      	add	r7, sp, #0
	sercom_proc(0);
    9664:	2000      	movs	r0, #0
    9666:	f7ff fd63 	bl	9130 <sercom_proc>
}
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	46bd      	mov	sp, r7
    966e:	bd80      	pop	{r7, pc}

00009670 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    9670:	b580      	push	{r7, lr}
    9672:	af00      	add	r7, sp, #0
	sercom_proc(1);
    9674:	2001      	movs	r0, #1
    9676:	f7ff fd5b 	bl	9130 <sercom_proc>
}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	46bd      	mov	sp, r7
    967e:	bd80      	pop	{r7, pc}

00009680 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    9680:	b580      	push	{r7, lr}
    9682:	af00      	add	r7, sp, #0
	sercom_proc(2);
    9684:	2002      	movs	r0, #2
    9686:	f7ff fd53 	bl	9130 <sercom_proc>
}
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	46bd      	mov	sp, r7
    968e:	bd80      	pop	{r7, pc}

00009690 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    9690:	b580      	push	{r7, lr}
    9692:	af00      	add	r7, sp, #0
	sercom_proc(3);
    9694:	2003      	movs	r0, #3
    9696:	f7ff fd4b 	bl	9130 <sercom_proc>
}
    969a:	46c0      	nop			; (mov r8, r8)
    969c:	46bd      	mov	sp, r7
    969e:	bd80      	pop	{r7, pc}

000096a0 <w5500_init_reg>:
W5500_MODE w5500_mode;

volatile WORD sizert=0;

BYTE w5500_init_reg(void)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	af00      	add	r7, sp, #0
	pin_ctrl(W55,PWR,SET);
    96a4:	2201      	movs	r2, #1
    96a6:	2100      	movs	r1, #0
    96a8:	2002      	movs	r0, #2
    96aa:	4b19      	ldr	r3, [pc, #100]	; (9710 <w5500_init_reg+0x70>)
    96ac:	4798      	blx	r3
	
	
		
	if(ip_init()	)	{err_dword.ip_init_er   = 1;	return ERROR;}
    96ae:	f000 f893 	bl	97d8 <ip_init>
    96b2:	1e03      	subs	r3, r0, #0
    96b4:	d007      	beq.n	96c6 <w5500_init_reg+0x26>
    96b6:	4b17      	ldr	r3, [pc, #92]	; (9714 <w5500_init_reg+0x74>)
    96b8:	781a      	ldrb	r2, [r3, #0]
    96ba:	2180      	movs	r1, #128	; 0x80
    96bc:	4249      	negs	r1, r1
    96be:	430a      	orrs	r2, r1
    96c0:	701a      	strb	r2, [r3, #0]
    96c2:	2302      	movs	r3, #2
    96c4:	e021      	b.n	970a <w5500_init_reg+0x6a>
	if(mask_init()	)	{err_dword.mask_init_er = 1;	return ERROR;}
    96c6:	f000 f867 	bl	9798 <mask_init>
    96ca:	1e03      	subs	r3, r0, #0
    96cc:	d006      	beq.n	96dc <w5500_init_reg+0x3c>
    96ce:	4b11      	ldr	r3, [pc, #68]	; (9714 <w5500_init_reg+0x74>)
    96d0:	785a      	ldrb	r2, [r3, #1]
    96d2:	2101      	movs	r1, #1
    96d4:	430a      	orrs	r2, r1
    96d6:	705a      	strb	r2, [r3, #1]
    96d8:	2302      	movs	r3, #2
    96da:	e016      	b.n	970a <w5500_init_reg+0x6a>
	if(gw_init()	)	{err_dword.gw_init_er   = 1;	return ERROR;}		
    96dc:	f000 f83c 	bl	9758 <gw_init>
    96e0:	1e03      	subs	r3, r0, #0
    96e2:	d006      	beq.n	96f2 <w5500_init_reg+0x52>
    96e4:	4b0b      	ldr	r3, [pc, #44]	; (9714 <w5500_init_reg+0x74>)
    96e6:	785a      	ldrb	r2, [r3, #1]
    96e8:	2102      	movs	r1, #2
    96ea:	430a      	orrs	r2, r1
    96ec:	705a      	strb	r2, [r3, #1]
    96ee:	2302      	movs	r3, #2
    96f0:	e00b      	b.n	970a <w5500_init_reg+0x6a>
	if(mac_init()	)	{err_dword.mac_init_er  = 1;	return ERROR;}
    96f2:	f000 f811 	bl	9718 <mac_init>
    96f6:	1e03      	subs	r3, r0, #0
    96f8:	d006      	beq.n	9708 <w5500_init_reg+0x68>
    96fa:	4b06      	ldr	r3, [pc, #24]	; (9714 <w5500_init_reg+0x74>)
    96fc:	785a      	ldrb	r2, [r3, #1]
    96fe:	2104      	movs	r1, #4
    9700:	430a      	orrs	r2, r1
    9702:	705a      	strb	r2, [r3, #1]
    9704:	2302      	movs	r3, #2
    9706:	e000      	b.n	970a <w5500_init_reg+0x6a>
		
	return SUCCESS;
    9708:	2300      	movs	r3, #0
}
    970a:	0018      	movs	r0, r3
    970c:	46bd      	mov	sp, r7
    970e:	bd80      	pop	{r7, pc}
    9710:	00006d81 	.word	0x00006d81
    9714:	20002550 	.word	0x20002550

00009718 <mac_init>:

BYTE mac_init(void)
{
    9718:	b5b0      	push	{r4, r5, r7, lr}
    971a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MAC_ADDR_0,COMMON_REGISTER,cfg_2.mac_addr,sizeof(cfg_2.mac_addr),10);
    971c:	4b0b      	ldr	r3, [pc, #44]	; (974c <mac_init+0x34>)
    971e:	220a      	movs	r2, #10
    9720:	801a      	strh	r2, [r3, #0]
    9722:	e006      	b.n	9732 <mac_init+0x1a>
    9724:	4b09      	ldr	r3, [pc, #36]	; (974c <mac_init+0x34>)
    9726:	881b      	ldrh	r3, [r3, #0]
    9728:	b29b      	uxth	r3, r3
    972a:	2b00      	cmp	r3, #0
    972c:	d101      	bne.n	9732 <mac_init+0x1a>
    972e:	2301      	movs	r3, #1
    9730:	e008      	b.n	9744 <mac_init+0x2c>
    9732:	4a07      	ldr	r2, [pc, #28]	; (9750 <mac_init+0x38>)
    9734:	2306      	movs	r3, #6
    9736:	2100      	movs	r1, #0
    9738:	2009      	movs	r0, #9
    973a:	4c06      	ldr	r4, [pc, #24]	; (9754 <mac_init+0x3c>)
    973c:	47a0      	blx	r4
    973e:	1e03      	subs	r3, r0, #0
    9740:	d0f0      	beq.n	9724 <mac_init+0xc>
	return SUCCESS;
    9742:	2300      	movs	r3, #0
}
    9744:	0018      	movs	r0, r3
    9746:	46bd      	mov	sp, r7
    9748:	bdb0      	pop	{r4, r5, r7, pc}
    974a:	46c0      	nop			; (mov r8, r8)
    974c:	200031f4 	.word	0x200031f4
    9750:	20003bc4 	.word	0x20003bc4
    9754:	00007955 	.word	0x00007955

00009758 <gw_init>:
BYTE gw_init(void)
{
    9758:	b5b0      	push	{r4, r5, r7, lr}
    975a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_GATEWAY_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_gate,sizeof(cfg_1.com_network.ip_gate),10);
    975c:	4b0b      	ldr	r3, [pc, #44]	; (978c <gw_init+0x34>)
    975e:	220a      	movs	r2, #10
    9760:	801a      	strh	r2, [r3, #0]
    9762:	e006      	b.n	9772 <gw_init+0x1a>
    9764:	4b09      	ldr	r3, [pc, #36]	; (978c <gw_init+0x34>)
    9766:	881b      	ldrh	r3, [r3, #0]
    9768:	b29b      	uxth	r3, r3
    976a:	2b00      	cmp	r3, #0
    976c:	d101      	bne.n	9772 <gw_init+0x1a>
    976e:	2301      	movs	r3, #1
    9770:	e008      	b.n	9784 <gw_init+0x2c>
    9772:	4a07      	ldr	r2, [pc, #28]	; (9790 <gw_init+0x38>)
    9774:	2304      	movs	r3, #4
    9776:	2100      	movs	r1, #0
    9778:	2001      	movs	r0, #1
    977a:	4c06      	ldr	r4, [pc, #24]	; (9794 <gw_init+0x3c>)
    977c:	47a0      	blx	r4
    977e:	1e03      	subs	r3, r0, #0
    9780:	d0f0      	beq.n	9764 <gw_init+0xc>
	return SUCCESS;
    9782:	2300      	movs	r3, #0
}
    9784:	0018      	movs	r0, r3
    9786:	46bd      	mov	sp, r7
    9788:	bdb0      	pop	{r4, r5, r7, pc}
    978a:	46c0      	nop			; (mov r8, r8)
    978c:	200031f4 	.word	0x200031f4
    9790:	20003df4 	.word	0x20003df4
    9794:	00007955 	.word	0x00007955

00009798 <mask_init>:
BYTE mask_init(void)
{
    9798:	b5b0      	push	{r4, r5, r7, lr}
    979a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MASK_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_mask,sizeof(cfg_1.com_network.ip_mask),10);
    979c:	4b0b      	ldr	r3, [pc, #44]	; (97cc <mask_init+0x34>)
    979e:	220a      	movs	r2, #10
    97a0:	801a      	strh	r2, [r3, #0]
    97a2:	e006      	b.n	97b2 <mask_init+0x1a>
    97a4:	4b09      	ldr	r3, [pc, #36]	; (97cc <mask_init+0x34>)
    97a6:	881b      	ldrh	r3, [r3, #0]
    97a8:	b29b      	uxth	r3, r3
    97aa:	2b00      	cmp	r3, #0
    97ac:	d101      	bne.n	97b2 <mask_init+0x1a>
    97ae:	2301      	movs	r3, #1
    97b0:	e008      	b.n	97c4 <mask_init+0x2c>
    97b2:	4a07      	ldr	r2, [pc, #28]	; (97d0 <mask_init+0x38>)
    97b4:	2304      	movs	r3, #4
    97b6:	2100      	movs	r1, #0
    97b8:	2005      	movs	r0, #5
    97ba:	4c06      	ldr	r4, [pc, #24]	; (97d4 <mask_init+0x3c>)
    97bc:	47a0      	blx	r4
    97be:	1e03      	subs	r3, r0, #0
    97c0:	d0f0      	beq.n	97a4 <mask_init+0xc>
	return SUCCESS;
    97c2:	2300      	movs	r3, #0
}
    97c4:	0018      	movs	r0, r3
    97c6:	46bd      	mov	sp, r7
    97c8:	bdb0      	pop	{r4, r5, r7, pc}
    97ca:	46c0      	nop			; (mov r8, r8)
    97cc:	200031f4 	.word	0x200031f4
    97d0:	20003df0 	.word	0x20003df0
    97d4:	00007955 	.word	0x00007955

000097d8 <ip_init>:
BYTE ip_init(void)
{
    97d8:	b5b0      	push	{r4, r5, r7, lr}
    97da:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_SRC_IP_ADR_0,COMMON_REGISTER,cfg_1.com_network.ip_addr,sizeof(cfg_1.com_network.ip_addr),10);
    97dc:	4b0b      	ldr	r3, [pc, #44]	; (980c <ip_init+0x34>)
    97de:	220a      	movs	r2, #10
    97e0:	801a      	strh	r2, [r3, #0]
    97e2:	e006      	b.n	97f2 <ip_init+0x1a>
    97e4:	4b09      	ldr	r3, [pc, #36]	; (980c <ip_init+0x34>)
    97e6:	881b      	ldrh	r3, [r3, #0]
    97e8:	b29b      	uxth	r3, r3
    97ea:	2b00      	cmp	r3, #0
    97ec:	d101      	bne.n	97f2 <ip_init+0x1a>
    97ee:	2301      	movs	r3, #1
    97f0:	e008      	b.n	9804 <ip_init+0x2c>
    97f2:	4a07      	ldr	r2, [pc, #28]	; (9810 <ip_init+0x38>)
    97f4:	2304      	movs	r3, #4
    97f6:	2100      	movs	r1, #0
    97f8:	200f      	movs	r0, #15
    97fa:	4c06      	ldr	r4, [pc, #24]	; (9814 <ip_init+0x3c>)
    97fc:	47a0      	blx	r4
    97fe:	1e03      	subs	r3, r0, #0
    9800:	d0f0      	beq.n	97e4 <ip_init+0xc>
	return SUCCESS;
    9802:	2300      	movs	r3, #0
}
    9804:	0018      	movs	r0, r3
    9806:	46bd      	mov	sp, r7
    9808:	bdb0      	pop	{r4, r5, r7, pc}
    980a:	46c0      	nop			; (mov r8, r8)
    980c:	200031f4 	.word	0x200031f4
    9810:	20003dec 	.word	0x20003dec
    9814:	00007955 	.word	0x00007955

00009818 <w5500_process>:

WORD w5500_process (BYTE spi_mode, BYTE sock_numb)
{
    9818:	b590      	push	{r4, r7, lr}
    981a:	b087      	sub	sp, #28
    981c:	af02      	add	r7, sp, #8
    981e:	0002      	movs	r2, r0
    9820:	1dfb      	adds	r3, r7, #7
    9822:	701a      	strb	r2, [r3, #0]
    9824:	1dbb      	adds	r3, r7, #6
    9826:	1c0a      	adds	r2, r1, #0
    9828:	701a      	strb	r2, [r3, #0]
	static BYTE w5500_st=0;
	WORD rtrn=0;
    982a:	230e      	movs	r3, #14
    982c:	18fb      	adds	r3, r7, r3
    982e:	2200      	movs	r2, #0
    9830:	801a      	strh	r2, [r3, #0]
	if(!cmd_spi_wait){w5500_st=0;return 2;} //if 20 mS no answer, break process
    9832:	4b50      	ldr	r3, [pc, #320]	; (9974 <w5500_process+0x15c>)
    9834:	881b      	ldrh	r3, [r3, #0]
    9836:	b29b      	uxth	r3, r3
    9838:	2b00      	cmp	r3, #0
    983a:	d104      	bne.n	9846 <w5500_process+0x2e>
    983c:	4b4e      	ldr	r3, [pc, #312]	; (9978 <w5500_process+0x160>)
    983e:	2200      	movs	r2, #0
    9840:	701a      	strb	r2, [r3, #0]
    9842:	2302      	movs	r3, #2
    9844:	e091      	b.n	996a <w5500_process+0x152>
		
		
	switch (w5500_st)
    9846:	4b4c      	ldr	r3, [pc, #304]	; (9978 <w5500_process+0x160>)
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	2b05      	cmp	r3, #5
    984c:	d900      	bls.n	9850 <w5500_process+0x38>
    984e:	e085      	b.n	995c <w5500_process+0x144>
    9850:	009a      	lsls	r2, r3, #2
    9852:	4b4a      	ldr	r3, [pc, #296]	; (997c <w5500_process+0x164>)
    9854:	18d3      	adds	r3, r2, r3
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	469f      	mov	pc, r3
	{
		case NULLS:
								w5500_st=spi_mode;
    985a:	4b47      	ldr	r3, [pc, #284]	; (9978 <w5500_process+0x160>)
    985c:	1dfa      	adds	r2, r7, #7
    985e:	7812      	ldrb	r2, [r2, #0]
    9860:	701a      	strb	r2, [r3, #0]
								cmd_spi_wait=time_20ms;
    9862:	4b44      	ldr	r3, [pc, #272]	; (9974 <w5500_process+0x15c>)
    9864:	4a46      	ldr	r2, [pc, #280]	; (9980 <w5500_process+0x168>)
    9866:	801a      	strh	r2, [r3, #0]
								return PROC_WAIT;
    9868:	2300      	movs	r3, #0
    986a:	e07e      	b.n	996a <w5500_process+0x152>
		case SPI_PROCESS:
								if(spi_process(addr_w5500,cb_w5500,ptr_buf,len_buf,cmd)){w5500_st=spi_mode;cmd=0;}
    986c:	4b45      	ldr	r3, [pc, #276]	; (9984 <w5500_process+0x16c>)
    986e:	8818      	ldrh	r0, [r3, #0]
    9870:	4b45      	ldr	r3, [pc, #276]	; (9988 <w5500_process+0x170>)
    9872:	881b      	ldrh	r3, [r3, #0]
    9874:	b2d9      	uxtb	r1, r3
    9876:	4b45      	ldr	r3, [pc, #276]	; (998c <w5500_process+0x174>)
    9878:	681a      	ldr	r2, [r3, #0]
    987a:	4b45      	ldr	r3, [pc, #276]	; (9990 <w5500_process+0x178>)
    987c:	881c      	ldrh	r4, [r3, #0]
    987e:	4b45      	ldr	r3, [pc, #276]	; (9994 <w5500_process+0x17c>)
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	9300      	str	r3, [sp, #0]
    9884:	0023      	movs	r3, r4
    9886:	4c44      	ldr	r4, [pc, #272]	; (9998 <w5500_process+0x180>)
    9888:	47a0      	blx	r4
    988a:	1e03      	subs	r3, r0, #0
    988c:	d100      	bne.n	9890 <w5500_process+0x78>
    988e:	e06a      	b.n	9966 <w5500_process+0x14e>
    9890:	4b39      	ldr	r3, [pc, #228]	; (9978 <w5500_process+0x160>)
    9892:	1dfa      	adds	r2, r7, #7
    9894:	7812      	ldrb	r2, [r2, #0]
    9896:	701a      	strb	r2, [r3, #0]
    9898:	4b3e      	ldr	r3, [pc, #248]	; (9994 <w5500_process+0x17c>)
    989a:	2200      	movs	r2, #0
    989c:	701a      	strb	r2, [r3, #0]
		break;
    989e:	e062      	b.n	9966 <w5500_process+0x14e>
		case MODE_OP_READ_UDP:
								rtrn=w5500_cmd_read_socket_udp(sock_numb);
    98a0:	230e      	movs	r3, #14
    98a2:	18fc      	adds	r4, r7, r3
    98a4:	1dbb      	adds	r3, r7, #6
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	0018      	movs	r0, r3
    98aa:	f000 f877 	bl	999c <w5500_cmd_read_socket_udp>
    98ae:	0003      	movs	r3, r0
    98b0:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    98b2:	230e      	movs	r3, #14
    98b4:	18fb      	adds	r3, r7, r3
    98b6:	881b      	ldrh	r3, [r3, #0]
    98b8:	2b00      	cmp	r3, #0
    98ba:	d009      	beq.n	98d0 <w5500_process+0xb8>
    98bc:	4b2e      	ldr	r3, [pc, #184]	; (9978 <w5500_process+0x160>)
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	1dfb      	adds	r3, r7, #7
    98c4:	2200      	movs	r2, #0
    98c6:	701a      	strb	r2, [r3, #0]
    98c8:	230e      	movs	r3, #14
    98ca:	18fb      	adds	r3, r7, r3
    98cc:	881b      	ldrh	r3, [r3, #0]
    98ce:	e04c      	b.n	996a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98d0:	4b29      	ldr	r3, [pc, #164]	; (9978 <w5500_process+0x160>)
    98d2:	2201      	movs	r2, #1
    98d4:	701a      	strb	r2, [r3, #0]
		break;
    98d6:	e047      	b.n	9968 <w5500_process+0x150>
		case MODE_OP_WRITE_UDP:
								if(w5500_write_socket_udp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    98d8:	1dbb      	adds	r3, r7, #6
    98da:	781b      	ldrb	r3, [r3, #0]
    98dc:	0018      	movs	r0, r3
    98de:	f000 f9f1 	bl	9cc4 <w5500_write_socket_udp>
    98e2:	1e03      	subs	r3, r0, #0
    98e4:	d007      	beq.n	98f6 <w5500_process+0xde>
    98e6:	4b24      	ldr	r3, [pc, #144]	; (9978 <w5500_process+0x160>)
    98e8:	2200      	movs	r2, #0
    98ea:	701a      	strb	r2, [r3, #0]
    98ec:	1dfb      	adds	r3, r7, #7
    98ee:	2200      	movs	r2, #0
    98f0:	701a      	strb	r2, [r3, #0]
    98f2:	2301      	movs	r3, #1
    98f4:	e039      	b.n	996a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98f6:	4b20      	ldr	r3, [pc, #128]	; (9978 <w5500_process+0x160>)
    98f8:	2201      	movs	r2, #1
    98fa:	701a      	strb	r2, [r3, #0]
		break;
    98fc:	e034      	b.n	9968 <w5500_process+0x150>
		case MODE_OP_READ_TCP:
								rtrn=w5500_cmd_read_socket_tcp(sock_numb);
    98fe:	230e      	movs	r3, #14
    9900:	18fc      	adds	r4, r7, r3
    9902:	1dbb      	adds	r3, r7, #6
    9904:	781b      	ldrb	r3, [r3, #0]
    9906:	0018      	movs	r0, r3
    9908:	f000 fc2a 	bl	a160 <w5500_cmd_read_socket_tcp>
    990c:	0003      	movs	r3, r0
    990e:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    9910:	230e      	movs	r3, #14
    9912:	18fb      	adds	r3, r7, r3
    9914:	881b      	ldrh	r3, [r3, #0]
    9916:	2b00      	cmp	r3, #0
    9918:	d009      	beq.n	992e <w5500_process+0x116>
    991a:	4b17      	ldr	r3, [pc, #92]	; (9978 <w5500_process+0x160>)
    991c:	2200      	movs	r2, #0
    991e:	701a      	strb	r2, [r3, #0]
    9920:	1dfb      	adds	r3, r7, #7
    9922:	2200      	movs	r2, #0
    9924:	701a      	strb	r2, [r3, #0]
    9926:	230e      	movs	r3, #14
    9928:	18fb      	adds	r3, r7, r3
    992a:	881b      	ldrh	r3, [r3, #0]
    992c:	e01d      	b.n	996a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    992e:	4b12      	ldr	r3, [pc, #72]	; (9978 <w5500_process+0x160>)
    9930:	2201      	movs	r2, #1
    9932:	701a      	strb	r2, [r3, #0]
		break;
    9934:	e018      	b.n	9968 <w5500_process+0x150>
		case MODE_OP_WRITE_TCP:
								if(w5500_write_socket_tcp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    9936:	1dbb      	adds	r3, r7, #6
    9938:	781b      	ldrb	r3, [r3, #0]
    993a:	0018      	movs	r0, r3
    993c:	f000 fe8e 	bl	a65c <w5500_write_socket_tcp>
    9940:	1e03      	subs	r3, r0, #0
    9942:	d007      	beq.n	9954 <w5500_process+0x13c>
    9944:	4b0c      	ldr	r3, [pc, #48]	; (9978 <w5500_process+0x160>)
    9946:	2200      	movs	r2, #0
    9948:	701a      	strb	r2, [r3, #0]
    994a:	1dfb      	adds	r3, r7, #7
    994c:	2200      	movs	r2, #0
    994e:	701a      	strb	r2, [r3, #0]
    9950:	2301      	movs	r3, #1
    9952:	e00a      	b.n	996a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9954:	4b08      	ldr	r3, [pc, #32]	; (9978 <w5500_process+0x160>)
    9956:	2201      	movs	r2, #1
    9958:	701a      	strb	r2, [r3, #0]
		break;
    995a:	e005      	b.n	9968 <w5500_process+0x150>
		default:
								w5500_st=0; return PROC_ER;
    995c:	4b06      	ldr	r3, [pc, #24]	; (9978 <w5500_process+0x160>)
    995e:	2200      	movs	r2, #0
    9960:	701a      	strb	r2, [r3, #0]
    9962:	2302      	movs	r3, #2
    9964:	e001      	b.n	996a <w5500_process+0x152>
		break;
    9966:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    9968:	2300      	movs	r3, #0
}
    996a:	0018      	movs	r0, r3
    996c:	46bd      	mov	sp, r7
    996e:	b005      	add	sp, #20
    9970:	bd90      	pop	{r4, r7, pc}
    9972:	46c0      	nop			; (mov r8, r8)
    9974:	200031f6 	.word	0x200031f6
    9978:	20000488 	.word	0x20000488
    997c:	0000cb68 	.word	0x0000cb68
    9980:	00003a98 	.word	0x00003a98
    9984:	20000480 	.word	0x20000480
    9988:	20000482 	.word	0x20000482
    998c:	20003afc 	.word	0x20003afc
    9990:	20000484 	.word	0x20000484
    9994:	20003bb7 	.word	0x20003bb7
    9998:	000078ad 	.word	0x000078ad

0000999c <w5500_cmd_read_socket_udp>:

WORD w5500_cmd_read_socket_udp (BYTE sock_numb)
{
    999c:	b590      	push	{r4, r7, lr}
    999e:	b085      	sub	sp, #20
    99a0:	af00      	add	r7, sp, #0
    99a2:	0002      	movs	r2, r0
    99a4:	1dfb      	adds	r3, r7, #7
    99a6:	701a      	strb	r2, [r3, #0]
	static BYTE numb_static_r=0;
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	BYTE cnt=0;
    99a8:	230f      	movs	r3, #15
    99aa:	18fb      	adds	r3, r7, r3
    99ac:	2200      	movs	r2, #0
    99ae:	701a      	strb	r2, [r3, #0]
	
	if(numb_static_r!=sock_numb){numb_static_r=sock_numb;st_cmd_w5500=0;}
    99b0:	4bb6      	ldr	r3, [pc, #728]	; (9c8c <w5500_cmd_read_socket_udp+0x2f0>)
    99b2:	781b      	ldrb	r3, [r3, #0]
    99b4:	1dfa      	adds	r2, r7, #7
    99b6:	7812      	ldrb	r2, [r2, #0]
    99b8:	429a      	cmp	r2, r3
    99ba:	d006      	beq.n	99ca <w5500_cmd_read_socket_udp+0x2e>
    99bc:	4bb3      	ldr	r3, [pc, #716]	; (9c8c <w5500_cmd_read_socket_udp+0x2f0>)
    99be:	1dfa      	adds	r2, r7, #7
    99c0:	7812      	ldrb	r2, [r2, #0]
    99c2:	701a      	strb	r2, [r3, #0]
    99c4:	4bb2      	ldr	r3, [pc, #712]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    99c6:	2200      	movs	r2, #0
    99c8:	701a      	strb	r2, [r3, #0]
	
	switch(st_cmd_w5500)
    99ca:	4bb1      	ldr	r3, [pc, #708]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	2b04      	cmp	r3, #4
    99d0:	d900      	bls.n	99d4 <w5500_cmd_read_socket_udp+0x38>
    99d2:	e151      	b.n	9c78 <w5500_cmd_read_socket_udp+0x2dc>
    99d4:	009a      	lsls	r2, r3, #2
    99d6:	4baf      	ldr	r3, [pc, #700]	; (9c94 <w5500_cmd_read_socket_udp+0x2f8>)
    99d8:	18d3      	adds	r3, r2, r3
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	469f      	mov	pc, r3
	{
		case UDP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr in w5500 1,2
    99de:	4bae      	ldr	r3, [pc, #696]	; (9c98 <w5500_cmd_read_socket_udp+0x2fc>)
    99e0:	2226      	movs	r2, #38	; 0x26
    99e2:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//cb 3
    99e4:	1dfb      	adds	r3, r7, #7
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	015b      	lsls	r3, r3, #5
    99ea:	b21b      	sxth	r3, r3
    99ec:	2208      	movs	r2, #8
    99ee:	4313      	orrs	r3, r2
    99f0:	b21b      	sxth	r3, r3
    99f2:	b29a      	uxth	r2, r3
    99f4:	4ba9      	ldr	r3, [pc, #676]	; (9c9c <w5500_cmd_read_socket_udp+0x300>)
    99f6:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//4 data (point write data aus w5500)
    99f8:	1dfb      	adds	r3, r7, #7
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	015b      	lsls	r3, r3, #5
    99fe:	3328      	adds	r3, #40	; 0x28
    9a00:	001a      	movs	r2, r3
    9a02:	4ba7      	ldr	r3, [pc, #668]	; (9ca0 <w5500_cmd_read_socket_udp+0x304>)
    9a04:	18d3      	adds	r3, r2, r3
    9a06:	1d5a      	adds	r2, r3, #5
    9a08:	4ba6      	ldr	r3, [pc, #664]	; (9ca4 <w5500_cmd_read_socket_udp+0x308>)
    9a0a:	601a      	str	r2, [r3, #0]
			len_buf=2;//len
    9a0c:	4ba6      	ldr	r3, [pc, #664]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9a0e:	2202      	movs	r2, #2
    9a10:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    9a12:	4ba6      	ldr	r3, [pc, #664]	; (9cac <w5500_cmd_read_socket_udp+0x310>)
    9a14:	2201      	movs	r2, #1
    9a16:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = UDP_PART_RD;//"next"
    9a18:	4b9d      	ldr	r3, [pc, #628]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9a1a:	2201      	movs	r2, #1
    9a1c:	701a      	strb	r2, [r3, #0]
								
			size=0;
    9a1e:	4ba4      	ldr	r3, [pc, #656]	; (9cb0 <w5500_cmd_read_socket_udp+0x314>)
    9a20:	2200      	movs	r2, #0
    9a22:	801a      	strh	r2, [r3, #0]
		break;	
    9a24:	e12d      	b.n	9c82 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_PART_RD:					
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    9a26:	1dfb      	adds	r3, r7, #7
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	4a9d      	ldr	r2, [pc, #628]	; (9ca0 <w5500_cmd_read_socket_udp+0x304>)
    9a2c:	212d      	movs	r1, #45	; 0x2d
    9a2e:	015b      	lsls	r3, r3, #5
    9a30:	18d3      	adds	r3, r2, r3
    9a32:	185b      	adds	r3, r3, r1
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	021b      	lsls	r3, r3, #8
    9a38:	b21a      	sxth	r2, r3
    9a3a:	1dfb      	adds	r3, r7, #7
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	4998      	ldr	r1, [pc, #608]	; (9ca0 <w5500_cmd_read_socket_udp+0x304>)
    9a40:	202e      	movs	r0, #46	; 0x2e
    9a42:	015b      	lsls	r3, r3, #5
    9a44:	18cb      	adds	r3, r1, r3
    9a46:	181b      	adds	r3, r3, r0
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	b21b      	sxth	r3, r3
    9a4c:	4313      	orrs	r3, r2
    9a4e:	b21b      	sxth	r3, r3
    9a50:	b29a      	uxth	r2, r3
    9a52:	4b98      	ldr	r3, [pc, #608]	; (9cb4 <w5500_cmd_read_socket_udp+0x318>)
    9a54:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return
    9a56:	4b97      	ldr	r3, [pc, #604]	; (9cb4 <w5500_cmd_read_socket_udp+0x318>)
    9a58:	881b      	ldrh	r3, [r3, #0]
    9a5a:	b29b      	uxth	r3, r3
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d06c      	beq.n	9b3a <w5500_cmd_read_socket_udp+0x19e>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;
    9a60:	1dfb      	adds	r3, r7, #7
    9a62:	781a      	ldrb	r2, [r3, #0]
    9a64:	4994      	ldr	r1, [pc, #592]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9a66:	23ba      	movs	r3, #186	; 0xba
    9a68:	00db      	lsls	r3, r3, #3
    9a6a:	4894      	ldr	r0, [pc, #592]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9a6c:	4342      	muls	r2, r0
    9a6e:	188a      	adds	r2, r1, r2
    9a70:	18d3      	adds	r3, r2, r3
    9a72:	78da      	ldrb	r2, [r3, #3]
    9a74:	791b      	ldrb	r3, [r3, #4]
    9a76:	021b      	lsls	r3, r3, #8
    9a78:	4313      	orrs	r3, r2
    9a7a:	b29a      	uxth	r2, r3
    9a7c:	4b86      	ldr	r3, [pc, #536]	; (9c98 <w5500_cmd_read_socket_udp+0x2fc>)
    9a7e:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);
    9a80:	1dfb      	adds	r3, r7, #7
    9a82:	781b      	ldrb	r3, [r3, #0]
    9a84:	015b      	lsls	r3, r3, #5
    9a86:	b21b      	sxth	r3, r3
    9a88:	2218      	movs	r2, #24
    9a8a:	4313      	orrs	r3, r2
    9a8c:	b21b      	sxth	r3, r3
    9a8e:	b29a      	uxth	r2, r3
    9a90:	4b82      	ldr	r3, [pc, #520]	; (9c9c <w5500_cmd_read_socket_udp+0x300>)
    9a92:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb];
    9a94:	1dfb      	adds	r3, r7, #7
    9a96:	781b      	ldrb	r3, [r3, #0]
    9a98:	4a88      	ldr	r2, [pc, #544]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9a9a:	435a      	muls	r2, r3
    9a9c:	4b86      	ldr	r3, [pc, #536]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9a9e:	18d2      	adds	r2, r2, r3
    9aa0:	4b80      	ldr	r3, [pc, #512]	; (9ca4 <w5500_cmd_read_socket_udp+0x308>)
    9aa2:	601a      	str	r2, [r3, #0]
				len_buf=sizert;
    9aa4:	4b83      	ldr	r3, [pc, #524]	; (9cb4 <w5500_cmd_read_socket_udp+0x318>)
    9aa6:	881b      	ldrh	r3, [r3, #0]
    9aa8:	b29a      	uxth	r2, r3
    9aaa:	4b7f      	ldr	r3, [pc, #508]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9aac:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    9aae:	1dfb      	adds	r3, r7, #7
    9ab0:	7819      	ldrb	r1, [r3, #0]
    9ab2:	1dfb      	adds	r3, r7, #7
    9ab4:	781a      	ldrb	r2, [r3, #0]
    9ab6:	4880      	ldr	r0, [pc, #512]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9ab8:	23ba      	movs	r3, #186	; 0xba
    9aba:	00db      	lsls	r3, r3, #3
    9abc:	4c7f      	ldr	r4, [pc, #508]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9abe:	4362      	muls	r2, r4
    9ac0:	1882      	adds	r2, r0, r2
    9ac2:	18d3      	adds	r3, r2, r3
    9ac4:	78da      	ldrb	r2, [r3, #3]
    9ac6:	791b      	ldrb	r3, [r3, #4]
    9ac8:	021b      	lsls	r3, r3, #8
    9aca:	4313      	orrs	r3, r2
    9acc:	b29a      	uxth	r2, r3
    9ace:	4b76      	ldr	r3, [pc, #472]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9ad0:	881b      	ldrh	r3, [r3, #0]
    9ad2:	18d3      	adds	r3, r2, r3
    9ad4:	b29a      	uxth	r2, r3
    9ad6:	4878      	ldr	r0, [pc, #480]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9ad8:	23ba      	movs	r3, #186	; 0xba
    9ada:	00db      	lsls	r3, r3, #3
    9adc:	4c77      	ldr	r4, [pc, #476]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9ade:	4361      	muls	r1, r4
    9ae0:	1841      	adds	r1, r0, r1
    9ae2:	18cb      	adds	r3, r1, r3
    9ae4:	3303      	adds	r3, #3
    9ae6:	21ff      	movs	r1, #255	; 0xff
    9ae8:	4011      	ands	r1, r2
    9aea:	000c      	movs	r4, r1
    9aec:	7819      	ldrb	r1, [r3, #0]
    9aee:	2000      	movs	r0, #0
    9af0:	4001      	ands	r1, r0
    9af2:	1c08      	adds	r0, r1, #0
    9af4:	1c21      	adds	r1, r4, #0
    9af6:	4301      	orrs	r1, r0
    9af8:	7019      	strb	r1, [r3, #0]
    9afa:	0a12      	lsrs	r2, r2, #8
    9afc:	b290      	uxth	r0, r2
    9afe:	785a      	ldrb	r2, [r3, #1]
    9b00:	2100      	movs	r1, #0
    9b02:	400a      	ands	r2, r1
    9b04:	1c11      	adds	r1, r2, #0
    9b06:	1c02      	adds	r2, r0, #0
    9b08:	430a      	orrs	r2, r1
    9b0a:	705a      	strb	r2, [r3, #1]
				size=len_buf;
    9b0c:	4b66      	ldr	r3, [pc, #408]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9b0e:	881a      	ldrh	r2, [r3, #0]
    9b10:	4b67      	ldr	r3, [pc, #412]	; (9cb0 <w5500_cmd_read_socket_udp+0x314>)
    9b12:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_UDP){size=PROC_ER;}							
    9b14:	4b64      	ldr	r3, [pc, #400]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9b16:	881a      	ldrh	r2, [r3, #0]
    9b18:	23b9      	movs	r3, #185	; 0xb9
    9b1a:	00db      	lsls	r3, r3, #3
    9b1c:	429a      	cmp	r2, r3
    9b1e:	d902      	bls.n	9b26 <w5500_cmd_read_socket_udp+0x18a>
    9b20:	4b63      	ldr	r3, [pc, #396]	; (9cb0 <w5500_cmd_read_socket_udp+0x314>)
    9b22:	2202      	movs	r2, #2
    9b24:	801a      	strh	r2, [r3, #0]
				cmd=READ_DATA;
    9b26:	4b61      	ldr	r3, [pc, #388]	; (9cac <w5500_cmd_read_socket_udp+0x310>)
    9b28:	2201      	movs	r2, #1
    9b2a:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500++;
    9b2c:	4b58      	ldr	r3, [pc, #352]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	3301      	adds	r3, #1
    9b32:	b2da      	uxtb	r2, r3
    9b34:	4b56      	ldr	r3, [pc, #344]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9b36:	701a      	strb	r2, [r3, #0]
				break;
    9b38:	e0a3      	b.n	9c82 <w5500_cmd_read_socket_udp+0x2e6>
			}
			st_cmd_w5500--;
    9b3a:	4b55      	ldr	r3, [pc, #340]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9b3c:	781b      	ldrb	r3, [r3, #0]
    9b3e:	3b01      	subs	r3, #1
    9b40:	b2da      	uxtb	r2, r3
    9b42:	4b53      	ldr	r3, [pc, #332]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9b44:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    9b46:	2302      	movs	r3, #2
    9b48:	e09c      	b.n	9c84 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		case UDP_PTR_MOVE:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    9b4a:	230f      	movs	r3, #15
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	781a      	ldrb	r2, [r3, #0]
    9b50:	1dfb      	adds	r3, r7, #7
    9b52:	7819      	ldrb	r1, [r3, #0]
    9b54:	4858      	ldr	r0, [pc, #352]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9b56:	23ba      	movs	r3, #186	; 0xba
    9b58:	00db      	lsls	r3, r3, #3
    9b5a:	4c58      	ldr	r4, [pc, #352]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9b5c:	4361      	muls	r1, r4
    9b5e:	1841      	adds	r1, r0, r1
    9b60:	18cb      	adds	r3, r1, r3
    9b62:	78d9      	ldrb	r1, [r3, #3]
    9b64:	791b      	ldrb	r3, [r3, #4]
    9b66:	021b      	lsls	r3, r3, #8
    9b68:	430b      	orrs	r3, r1
    9b6a:	b29b      	uxth	r3, r3
    9b6c:	0a1b      	lsrs	r3, r3, #8
    9b6e:	b29b      	uxth	r3, r3
    9b70:	b2d9      	uxtb	r1, r3
    9b72:	4b53      	ldr	r3, [pc, #332]	; (9cc0 <w5500_cmd_read_socket_udp+0x324>)
    9b74:	5499      	strb	r1, [r3, r2]
    9b76:	230f      	movs	r3, #15
    9b78:	18fb      	adds	r3, r7, r3
    9b7a:	781a      	ldrb	r2, [r3, #0]
    9b7c:	230f      	movs	r3, #15
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	3201      	adds	r2, #1
    9b82:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    9b84:	230f      	movs	r3, #15
    9b86:	18fb      	adds	r3, r7, r3
    9b88:	781a      	ldrb	r2, [r3, #0]
    9b8a:	1dfb      	adds	r3, r7, #7
    9b8c:	7819      	ldrb	r1, [r3, #0]
    9b8e:	484a      	ldr	r0, [pc, #296]	; (9cb8 <w5500_cmd_read_socket_udp+0x31c>)
    9b90:	23ba      	movs	r3, #186	; 0xba
    9b92:	00db      	lsls	r3, r3, #3
    9b94:	4c49      	ldr	r4, [pc, #292]	; (9cbc <w5500_cmd_read_socket_udp+0x320>)
    9b96:	4361      	muls	r1, r4
    9b98:	1841      	adds	r1, r0, r1
    9b9a:	18cb      	adds	r3, r1, r3
    9b9c:	78d9      	ldrb	r1, [r3, #3]
    9b9e:	791b      	ldrb	r3, [r3, #4]
    9ba0:	021b      	lsls	r3, r3, #8
    9ba2:	430b      	orrs	r3, r1
    9ba4:	b29b      	uxth	r3, r3
    9ba6:	b2d9      	uxtb	r1, r3
    9ba8:	4b45      	ldr	r3, [pc, #276]	; (9cc0 <w5500_cmd_read_socket_udp+0x324>)
    9baa:	5499      	strb	r1, [r3, r2]
    9bac:	230f      	movs	r3, #15
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	781a      	ldrb	r2, [r3, #0]
    9bb2:	230f      	movs	r3, #15
    9bb4:	18fb      	adds	r3, r7, r3
    9bb6:	3201      	adds	r2, #1
    9bb8:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;//reg RX_RD(28)
    9bba:	4b37      	ldr	r3, [pc, #220]	; (9c98 <w5500_cmd_read_socket_udp+0x2fc>)
    9bbc:	2228      	movs	r2, #40	; 0x28
    9bbe:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9bc0:	1dfb      	adds	r3, r7, #7
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	015b      	lsls	r3, r3, #5
    9bc6:	b21b      	sxth	r3, r3
    9bc8:	2208      	movs	r2, #8
    9bca:	4313      	orrs	r3, r2
    9bcc:	b21b      	sxth	r3, r3
    9bce:	b29a      	uxth	r2, r3
    9bd0:	4b32      	ldr	r3, [pc, #200]	; (9c9c <w5500_cmd_read_socket_udp+0x300>)
    9bd2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;/*(записать в него смещение)*/
    9bd4:	4b33      	ldr	r3, [pc, #204]	; (9ca4 <w5500_cmd_read_socket_udp+0x308>)
    9bd6:	4a3a      	ldr	r2, [pc, #232]	; (9cc0 <w5500_cmd_read_socket_udp+0x324>)
    9bd8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9bda:	230f      	movs	r3, #15
    9bdc:	18fb      	adds	r3, r7, r3
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	b29a      	uxth	r2, r3
    9be2:	4b31      	ldr	r3, [pc, #196]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9be4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9be6:	4b31      	ldr	r3, [pc, #196]	; (9cac <w5500_cmd_read_socket_udp+0x310>)
    9be8:	2202      	movs	r2, #2
    9bea:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9bec:	4b28      	ldr	r3, [pc, #160]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	3301      	adds	r3, #1
    9bf2:	b2da      	uxtb	r2, r3
    9bf4:	4b26      	ldr	r3, [pc, #152]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9bf6:	701a      	strb	r2, [r3, #0]
		break;
    9bf8:	e043      	b.n	9c82 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_RCV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//перейти в режим приема(возобновить прием)
    9bfa:	230f      	movs	r3, #15
    9bfc:	18fb      	adds	r3, r7, r3
    9bfe:	781b      	ldrb	r3, [r3, #0]
    9c00:	4a2f      	ldr	r2, [pc, #188]	; (9cc0 <w5500_cmd_read_socket_udp+0x324>)
    9c02:	2140      	movs	r1, #64	; 0x40
    9c04:	54d1      	strb	r1, [r2, r3]
    9c06:	230f      	movs	r3, #15
    9c08:	18fb      	adds	r3, r7, r3
    9c0a:	781a      	ldrb	r2, [r3, #0]
    9c0c:	230f      	movs	r3, #15
    9c0e:	18fb      	adds	r3, r7, r3
    9c10:	3201      	adds	r2, #1
    9c12:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    9c14:	4b20      	ldr	r3, [pc, #128]	; (9c98 <w5500_cmd_read_socket_udp+0x2fc>)
    9c16:	2201      	movs	r2, #1
    9c18:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9c1a:	1dfb      	adds	r3, r7, #7
    9c1c:	781b      	ldrb	r3, [r3, #0]
    9c1e:	015b      	lsls	r3, r3, #5
    9c20:	b21b      	sxth	r3, r3
    9c22:	2208      	movs	r2, #8
    9c24:	4313      	orrs	r3, r2
    9c26:	b21b      	sxth	r3, r3
    9c28:	b29a      	uxth	r2, r3
    9c2a:	4b1c      	ldr	r3, [pc, #112]	; (9c9c <w5500_cmd_read_socket_udp+0x300>)
    9c2c:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9c2e:	4b1d      	ldr	r3, [pc, #116]	; (9ca4 <w5500_cmd_read_socket_udp+0x308>)
    9c30:	4a23      	ldr	r2, [pc, #140]	; (9cc0 <w5500_cmd_read_socket_udp+0x324>)
    9c32:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c34:	230f      	movs	r3, #15
    9c36:	18fb      	adds	r3, r7, r3
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	b29a      	uxth	r2, r3
    9c3c:	4b1a      	ldr	r3, [pc, #104]	; (9ca8 <w5500_cmd_read_socket_udp+0x30c>)
    9c3e:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c40:	4b1a      	ldr	r3, [pc, #104]	; (9cac <w5500_cmd_read_socket_udp+0x310>)
    9c42:	2202      	movs	r2, #2
    9c44:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9c46:	4b12      	ldr	r3, [pc, #72]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9c48:	781b      	ldrb	r3, [r3, #0]
    9c4a:	3301      	adds	r3, #1
    9c4c:	b2da      	uxtb	r2, r3
    9c4e:	4b10      	ldr	r3, [pc, #64]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9c50:	701a      	strb	r2, [r3, #0]
		break;	
    9c52:	e016      	b.n	9c82 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_BK_START:
			st_cmd_w5500=0;//сброс параметров
    9c54:	4b0e      	ldr	r3, [pc, #56]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9c56:	2200      	movs	r2, #0
    9c58:	701a      	strb	r2, [r3, #0]
			if((size > USART_BUF_SIZE) && (sock_numb))	 {return PROC_ER;}
    9c5a:	4b15      	ldr	r3, [pc, #84]	; (9cb0 <w5500_cmd_read_socket_udp+0x314>)
    9c5c:	881a      	ldrh	r2, [r3, #0]
    9c5e:	2380      	movs	r3, #128	; 0x80
    9c60:	005b      	lsls	r3, r3, #1
    9c62:	429a      	cmp	r2, r3
    9c64:	d905      	bls.n	9c72 <w5500_cmd_read_socket_udp+0x2d6>
    9c66:	1dfb      	adds	r3, r7, #7
    9c68:	781b      	ldrb	r3, [r3, #0]
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	d001      	beq.n	9c72 <w5500_cmd_read_socket_udp+0x2d6>
    9c6e:	2302      	movs	r3, #2
    9c70:	e008      	b.n	9c84 <w5500_cmd_read_socket_udp+0x2e8>
			return (size);
    9c72:	4b0f      	ldr	r3, [pc, #60]	; (9cb0 <w5500_cmd_read_socket_udp+0x314>)
    9c74:	881b      	ldrh	r3, [r3, #0]
    9c76:	e005      	b.n	9c84 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    9c78:	4b05      	ldr	r3, [pc, #20]	; (9c90 <w5500_cmd_read_socket_udp+0x2f4>)
    9c7a:	2200      	movs	r2, #0
    9c7c:	701a      	strb	r2, [r3, #0]
    9c7e:	2302      	movs	r3, #2
    9c80:	e000      	b.n	9c84 <w5500_cmd_read_socket_udp+0x2e8>
		break;
	}
	return PROC_WAIT;
    9c82:	2300      	movs	r3, #0
}
    9c84:	0018      	movs	r0, r3
    9c86:	46bd      	mov	sp, r7
    9c88:	b005      	add	sp, #20
    9c8a:	bd90      	pop	{r4, r7, pc}
    9c8c:	20000489 	.word	0x20000489
    9c90:	2000048a 	.word	0x2000048a
    9c94:	0000cb80 	.word	0x0000cb80
    9c98:	20000480 	.word	0x20000480
    9c9c:	20000482 	.word	0x20000482
    9ca0:	20003b04 	.word	0x20003b04
    9ca4:	20003afc 	.word	0x20003afc
    9ca8:	20000484 	.word	0x20000484
    9cac:	20003bb7 	.word	0x20003bb7
    9cb0:	2000048c 	.word	0x2000048c
    9cb4:	20000486 	.word	0x20000486
    9cb8:	200005cc 	.word	0x200005cc
    9cbc:	000005e5 	.word	0x000005e5
    9cc0:	20003bb8 	.word	0x20003bb8

00009cc4 <w5500_write_socket_udp>:

WORD w5500_write_socket_udp (BYTE sock_numb)
{
    9cc4:	b590      	push	{r4, r7, lr}
    9cc6:	b085      	sub	sp, #20
    9cc8:	af00      	add	r7, sp, #0
    9cca:	0002      	movs	r2, r0
    9ccc:	1dfb      	adds	r3, r7, #7
    9cce:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500 = 0;
	static BYTE numb_static = 0;
	WORD cnt = 0;
    9cd0:	230e      	movs	r3, #14
    9cd2:	18fb      	adds	r3, r7, r3
    9cd4:	2200      	movs	r2, #0
    9cd6:	801a      	strh	r2, [r3, #0]
	
	if(numb_static != sock_numb) {numb_static = sock_numb; st_wr_w5500 = 0;}
    9cd8:	4bd9      	ldr	r3, [pc, #868]	; (a040 <w5500_write_socket_udp+0x37c>)
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	1dfa      	adds	r2, r7, #7
    9cde:	7812      	ldrb	r2, [r2, #0]
    9ce0:	429a      	cmp	r2, r3
    9ce2:	d006      	beq.n	9cf2 <w5500_write_socket_udp+0x2e>
    9ce4:	4bd6      	ldr	r3, [pc, #856]	; (a040 <w5500_write_socket_udp+0x37c>)
    9ce6:	1dfa      	adds	r2, r7, #7
    9ce8:	7812      	ldrb	r2, [r2, #0]
    9cea:	701a      	strb	r2, [r3, #0]
    9cec:	4bd5      	ldr	r3, [pc, #852]	; (a044 <w5500_write_socket_udp+0x380>)
    9cee:	2200      	movs	r2, #0
    9cf0:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    9cf2:	4bd4      	ldr	r3, [pc, #848]	; (a044 <w5500_write_socket_udp+0x380>)
    9cf4:	781b      	ldrb	r3, [r3, #0]
    9cf6:	2b08      	cmp	r3, #8
    9cf8:	d900      	bls.n	9cfc <w5500_write_socket_udp+0x38>
    9cfa:	e212      	b.n	a122 <w5500_write_socket_udp+0x45e>
    9cfc:	009a      	lsls	r2, r3, #2
    9cfe:	4bd2      	ldr	r3, [pc, #840]	; (a048 <w5500_write_socket_udp+0x384>)
    9d00:	18d3      	adds	r3, r2, r3
    9d02:	681b      	ldr	r3, [r3, #0]
    9d04:	469f      	mov	pc, r3
	{
		case UDP_RD_TX_STAT:																	//read reg tx status
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;						
    9d06:	4bd1      	ldr	r3, [pc, #836]	; (a04c <w5500_write_socket_udp+0x388>)
    9d08:	2220      	movs	r2, #32
    9d0a:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d0c:	1dfb      	adds	r3, r7, #7
    9d0e:	781b      	ldrb	r3, [r3, #0]
    9d10:	015b      	lsls	r3, r3, #5
    9d12:	b21b      	sxth	r3, r3
    9d14:	2208      	movs	r2, #8
    9d16:	4313      	orrs	r3, r2
    9d18:	b21b      	sxth	r3, r3
    9d1a:	b29a      	uxth	r2, r3
    9d1c:	4bcc      	ldr	r3, [pc, #816]	; (a050 <w5500_write_socket_udp+0x38c>)
    9d1e:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    9d20:	1dfb      	adds	r3, r7, #7
    9d22:	781b      	ldrb	r3, [r3, #0]
    9d24:	3301      	adds	r3, #1
    9d26:	015a      	lsls	r2, r3, #5
    9d28:	4bca      	ldr	r3, [pc, #808]	; (a054 <w5500_write_socket_udp+0x390>)
    9d2a:	18d3      	adds	r3, r2, r3
    9d2c:	1dda      	adds	r2, r3, #7
    9d2e:	4bca      	ldr	r3, [pc, #808]	; (a058 <w5500_write_socket_udp+0x394>)
    9d30:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9d32:	4bca      	ldr	r3, [pc, #808]	; (a05c <w5500_write_socket_udp+0x398>)
    9d34:	2206      	movs	r2, #6
    9d36:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9d38:	4bc9      	ldr	r3, [pc, #804]	; (a060 <w5500_write_socket_udp+0x39c>)
    9d3a:	2201      	movs	r2, #1
    9d3c:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d3e:	4bc1      	ldr	r3, [pc, #772]	; (a044 <w5500_write_socket_udp+0x380>)
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	3301      	adds	r3, #1
    9d44:	b2da      	uxtb	r2, r3
    9d46:	4bbf      	ldr	r3, [pc, #764]	; (a044 <w5500_write_socket_udp+0x380>)
    9d48:	701a      	strb	r2, [r3, #0]
		break;
    9d4a:	e1f0      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_WR_IP:																	//write ip
			addr_w5500=ADDR_SOC_D_IP_ADDR0;
    9d4c:	4bbf      	ldr	r3, [pc, #764]	; (a04c <w5500_write_socket_udp+0x388>)
    9d4e:	220c      	movs	r2, #12
    9d50:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d52:	1dfb      	adds	r3, r7, #7
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	015b      	lsls	r3, r3, #5
    9d58:	b21b      	sxth	r3, r3
    9d5a:	2208      	movs	r2, #8
    9d5c:	4313      	orrs	r3, r2
    9d5e:	b21b      	sxth	r3, r3
    9d60:	b29a      	uxth	r2, r3
    9d62:	4bbb      	ldr	r3, [pc, #748]	; (a050 <w5500_write_socket_udp+0x38c>)
    9d64:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].ip_addr;
    9d66:	1dfb      	adds	r3, r7, #7
    9d68:	781b      	ldrb	r3, [r3, #0]
    9d6a:	4abe      	ldr	r2, [pc, #760]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9d6c:	435a      	muls	r2, r3
    9d6e:	4bbe      	ldr	r3, [pc, #760]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9d70:	18d2      	adds	r2, r2, r3
    9d72:	4bb9      	ldr	r3, [pc, #740]	; (a058 <w5500_write_socket_udp+0x394>)
    9d74:	601a      	str	r2, [r3, #0]
			len_buf=4;
    9d76:	4bb9      	ldr	r3, [pc, #740]	; (a05c <w5500_write_socket_udp+0x398>)
    9d78:	2204      	movs	r2, #4
    9d7a:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9d7c:	4bb8      	ldr	r3, [pc, #736]	; (a060 <w5500_write_socket_udp+0x39c>)
    9d7e:	2202      	movs	r2, #2
    9d80:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d82:	4bb0      	ldr	r3, [pc, #704]	; (a044 <w5500_write_socket_udp+0x380>)
    9d84:	781b      	ldrb	r3, [r3, #0]
    9d86:	3301      	adds	r3, #1
    9d88:	b2da      	uxtb	r2, r3
    9d8a:	4bae      	ldr	r3, [pc, #696]	; (a044 <w5500_write_socket_udp+0x380>)
    9d8c:	701a      	strb	r2, [r3, #0]
		break;
    9d8e:	e1ce      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_WR_PORT:																	//write port
			addr_w5500=ADDR_SOC_D_PORT0;
    9d90:	4bae      	ldr	r3, [pc, #696]	; (a04c <w5500_write_socket_udp+0x388>)
    9d92:	2210      	movs	r2, #16
    9d94:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d96:	1dfb      	adds	r3, r7, #7
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	015b      	lsls	r3, r3, #5
    9d9c:	b21b      	sxth	r3, r3
    9d9e:	2208      	movs	r2, #8
    9da0:	4313      	orrs	r3, r2
    9da2:	b21b      	sxth	r3, r3
    9da4:	b29a      	uxth	r2, r3
    9da6:	4baa      	ldr	r3, [pc, #680]	; (a050 <w5500_write_socket_udp+0x38c>)
    9da8:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].port;
    9daa:	1dfb      	adds	r3, r7, #7
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	4aad      	ldr	r2, [pc, #692]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9db0:	435a      	muls	r2, r3
    9db2:	4bad      	ldr	r3, [pc, #692]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9db4:	18d3      	adds	r3, r2, r3
    9db6:	1d1a      	adds	r2, r3, #4
    9db8:	4ba7      	ldr	r3, [pc, #668]	; (a058 <w5500_write_socket_udp+0x394>)
    9dba:	601a      	str	r2, [r3, #0]
			len_buf=2;
    9dbc:	4ba7      	ldr	r3, [pc, #668]	; (a05c <w5500_write_socket_udp+0x398>)
    9dbe:	2202      	movs	r2, #2
    9dc0:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9dc2:	4ba7      	ldr	r3, [pc, #668]	; (a060 <w5500_write_socket_udp+0x39c>)
    9dc4:	2202      	movs	r2, #2
    9dc6:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9dc8:	4b9e      	ldr	r3, [pc, #632]	; (a044 <w5500_write_socket_udp+0x380>)
    9dca:	781b      	ldrb	r3, [r3, #0]
    9dcc:	3301      	adds	r3, #1
    9dce:	b2da      	uxtb	r2, r3
    9dd0:	4b9c      	ldr	r3, [pc, #624]	; (a044 <w5500_write_socket_udp+0x380>)
    9dd2:	701a      	strb	r2, [r3, #0]
		break;
    9dd4:	e1ab      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_WR_DATA:																	//write data
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    9dd6:	1dfb      	adds	r3, r7, #7
    9dd8:	781a      	ldrb	r2, [r3, #0]
    9dda:	49a3      	ldr	r1, [pc, #652]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9ddc:	23ba      	movs	r3, #186	; 0xba
    9dde:	00db      	lsls	r3, r3, #3
    9de0:	48a0      	ldr	r0, [pc, #640]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9de2:	4342      	muls	r2, r0
    9de4:	188a      	adds	r2, r1, r2
    9de6:	18d3      	adds	r3, r2, r3
    9de8:	795a      	ldrb	r2, [r3, #5]
    9dea:	799b      	ldrb	r3, [r3, #6]
    9dec:	021b      	lsls	r3, r3, #8
    9dee:	4313      	orrs	r3, r2
    9df0:	b29a      	uxth	r2, r3
    9df2:	4b96      	ldr	r3, [pc, #600]	; (a04c <w5500_write_socket_udp+0x388>)
    9df4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    9df6:	1dfb      	adds	r3, r7, #7
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	015b      	lsls	r3, r3, #5
    9dfc:	b21b      	sxth	r3, r3
    9dfe:	2210      	movs	r2, #16
    9e00:	4313      	orrs	r3, r2
    9e02:	b21b      	sxth	r3, r3
    9e04:	b29a      	uxth	r2, r3
    9e06:	4b92      	ldr	r3, [pc, #584]	; (a050 <w5500_write_socket_udp+0x38c>)
    9e08:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    9e0a:	1dfb      	adds	r3, r7, #7
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	4a95      	ldr	r2, [pc, #596]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9e10:	4353      	muls	r3, r2
    9e12:	3308      	adds	r3, #8
    9e14:	001a      	movs	r2, r3
    9e16:	4b94      	ldr	r3, [pc, #592]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9e18:	18d2      	adds	r2, r2, r3
    9e1a:	4b8f      	ldr	r3, [pc, #572]	; (a058 <w5500_write_socket_udp+0x394>)
    9e1c:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    9e1e:	1dfb      	adds	r3, r7, #7
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	4a91      	ldr	r2, [pc, #580]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9e24:	498f      	ldr	r1, [pc, #572]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9e26:	434b      	muls	r3, r1
    9e28:	18d3      	adds	r3, r2, r3
    9e2a:	3306      	adds	r3, #6
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	021b      	lsls	r3, r3, #8
    9e30:	b21a      	sxth	r2, r3
    9e32:	1dfb      	adds	r3, r7, #7
    9e34:	781b      	ldrb	r3, [r3, #0]
    9e36:	498c      	ldr	r1, [pc, #560]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9e38:	488a      	ldr	r0, [pc, #552]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9e3a:	4343      	muls	r3, r0
    9e3c:	18cb      	adds	r3, r1, r3
    9e3e:	3307      	adds	r3, #7
    9e40:	781b      	ldrb	r3, [r3, #0]
    9e42:	b21b      	sxth	r3, r3
    9e44:	4313      	orrs	r3, r2
    9e46:	b21b      	sxth	r3, r3
    9e48:	b29a      	uxth	r2, r3
    9e4a:	4b84      	ldr	r3, [pc, #528]	; (a05c <w5500_write_socket_udp+0x398>)
    9e4c:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    9e4e:	1dfb      	adds	r3, r7, #7
    9e50:	7819      	ldrb	r1, [r3, #0]
    9e52:	1dfb      	adds	r3, r7, #7
    9e54:	781a      	ldrb	r2, [r3, #0]
    9e56:	4884      	ldr	r0, [pc, #528]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9e58:	23ba      	movs	r3, #186	; 0xba
    9e5a:	00db      	lsls	r3, r3, #3
    9e5c:	4c81      	ldr	r4, [pc, #516]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9e5e:	4362      	muls	r2, r4
    9e60:	1882      	adds	r2, r0, r2
    9e62:	18d3      	adds	r3, r2, r3
    9e64:	795a      	ldrb	r2, [r3, #5]
    9e66:	799b      	ldrb	r3, [r3, #6]
    9e68:	021b      	lsls	r3, r3, #8
    9e6a:	4313      	orrs	r3, r2
    9e6c:	b29a      	uxth	r2, r3
    9e6e:	4b7b      	ldr	r3, [pc, #492]	; (a05c <w5500_write_socket_udp+0x398>)
    9e70:	881b      	ldrh	r3, [r3, #0]
    9e72:	18d3      	adds	r3, r2, r3
    9e74:	b29a      	uxth	r2, r3
    9e76:	487c      	ldr	r0, [pc, #496]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9e78:	23ba      	movs	r3, #186	; 0xba
    9e7a:	00db      	lsls	r3, r3, #3
    9e7c:	4c79      	ldr	r4, [pc, #484]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9e7e:	4361      	muls	r1, r4
    9e80:	1841      	adds	r1, r0, r1
    9e82:	18cb      	adds	r3, r1, r3
    9e84:	3305      	adds	r3, #5
    9e86:	21ff      	movs	r1, #255	; 0xff
    9e88:	4011      	ands	r1, r2
    9e8a:	000c      	movs	r4, r1
    9e8c:	7819      	ldrb	r1, [r3, #0]
    9e8e:	2000      	movs	r0, #0
    9e90:	4001      	ands	r1, r0
    9e92:	1c08      	adds	r0, r1, #0
    9e94:	1c21      	adds	r1, r4, #0
    9e96:	4301      	orrs	r1, r0
    9e98:	7019      	strb	r1, [r3, #0]
    9e9a:	0a12      	lsrs	r2, r2, #8
    9e9c:	b290      	uxth	r0, r2
    9e9e:	785a      	ldrb	r2, [r3, #1]
    9ea0:	2100      	movs	r1, #0
    9ea2:	400a      	ands	r2, r1
    9ea4:	1c11      	adds	r1, r2, #0
    9ea6:	1c02      	adds	r2, r0, #0
    9ea8:	430a      	orrs	r2, r1
    9eaa:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    9eac:	4b6c      	ldr	r3, [pc, #432]	; (a060 <w5500_write_socket_udp+0x39c>)
    9eae:	2202      	movs	r2, #2
    9eb0:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9eb2:	4b64      	ldr	r3, [pc, #400]	; (a044 <w5500_write_socket_udp+0x380>)
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	3301      	adds	r3, #1
    9eb8:	b2da      	uxtb	r2, r3
    9eba:	4b62      	ldr	r3, [pc, #392]	; (a044 <w5500_write_socket_udp+0x380>)
    9ebc:	701a      	strb	r2, [r3, #0]
		break;
    9ebe:	e136      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_WR_PTR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    9ec0:	230e      	movs	r3, #14
    9ec2:	18fb      	adds	r3, r7, r3
    9ec4:	881a      	ldrh	r2, [r3, #0]
    9ec6:	1dfb      	adds	r3, r7, #7
    9ec8:	7819      	ldrb	r1, [r3, #0]
    9eca:	4867      	ldr	r0, [pc, #412]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9ecc:	23ba      	movs	r3, #186	; 0xba
    9ece:	00db      	lsls	r3, r3, #3
    9ed0:	4c64      	ldr	r4, [pc, #400]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9ed2:	4361      	muls	r1, r4
    9ed4:	1841      	adds	r1, r0, r1
    9ed6:	18cb      	adds	r3, r1, r3
    9ed8:	7959      	ldrb	r1, [r3, #5]
    9eda:	799b      	ldrb	r3, [r3, #6]
    9edc:	021b      	lsls	r3, r3, #8
    9ede:	430b      	orrs	r3, r1
    9ee0:	b29b      	uxth	r3, r3
    9ee2:	0a1b      	lsrs	r3, r3, #8
    9ee4:	b29b      	uxth	r3, r3
    9ee6:	b2d9      	uxtb	r1, r3
    9ee8:	4b60      	ldr	r3, [pc, #384]	; (a06c <w5500_write_socket_udp+0x3a8>)
    9eea:	5499      	strb	r1, [r3, r2]
    9eec:	230e      	movs	r3, #14
    9eee:	18fb      	adds	r3, r7, r3
    9ef0:	881a      	ldrh	r2, [r3, #0]
    9ef2:	230e      	movs	r3, #14
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	3201      	adds	r2, #1
    9ef8:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    9efa:	230e      	movs	r3, #14
    9efc:	18fb      	adds	r3, r7, r3
    9efe:	881a      	ldrh	r2, [r3, #0]
    9f00:	1dfb      	adds	r3, r7, #7
    9f02:	7819      	ldrb	r1, [r3, #0]
    9f04:	4858      	ldr	r0, [pc, #352]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9f06:	23ba      	movs	r3, #186	; 0xba
    9f08:	00db      	lsls	r3, r3, #3
    9f0a:	4c56      	ldr	r4, [pc, #344]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9f0c:	4361      	muls	r1, r4
    9f0e:	1841      	adds	r1, r0, r1
    9f10:	18cb      	adds	r3, r1, r3
    9f12:	7959      	ldrb	r1, [r3, #5]
    9f14:	799b      	ldrb	r3, [r3, #6]
    9f16:	021b      	lsls	r3, r3, #8
    9f18:	430b      	orrs	r3, r1
    9f1a:	b29b      	uxth	r3, r3
    9f1c:	b2d9      	uxtb	r1, r3
    9f1e:	4b53      	ldr	r3, [pc, #332]	; (a06c <w5500_write_socket_udp+0x3a8>)
    9f20:	5499      	strb	r1, [r3, r2]
    9f22:	230e      	movs	r3, #14
    9f24:	18fb      	adds	r3, r7, r3
    9f26:	881a      	ldrh	r2, [r3, #0]
    9f28:	230e      	movs	r3, #14
    9f2a:	18fb      	adds	r3, r7, r3
    9f2c:	3201      	adds	r2, #1
    9f2e:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    9f30:	4b46      	ldr	r3, [pc, #280]	; (a04c <w5500_write_socket_udp+0x388>)
    9f32:	2224      	movs	r2, #36	; 0x24
    9f34:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f36:	1dfb      	adds	r3, r7, #7
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	015b      	lsls	r3, r3, #5
    9f3c:	b21b      	sxth	r3, r3
    9f3e:	2208      	movs	r2, #8
    9f40:	4313      	orrs	r3, r2
    9f42:	b21b      	sxth	r3, r3
    9f44:	b29a      	uxth	r2, r3
    9f46:	4b42      	ldr	r3, [pc, #264]	; (a050 <w5500_write_socket_udp+0x38c>)
    9f48:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9f4a:	4b43      	ldr	r3, [pc, #268]	; (a058 <w5500_write_socket_udp+0x394>)
    9f4c:	4a47      	ldr	r2, [pc, #284]	; (a06c <w5500_write_socket_udp+0x3a8>)
    9f4e:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9f50:	4b42      	ldr	r3, [pc, #264]	; (a05c <w5500_write_socket_udp+0x398>)
    9f52:	220e      	movs	r2, #14
    9f54:	18ba      	adds	r2, r7, r2
    9f56:	8812      	ldrh	r2, [r2, #0]
    9f58:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9f5a:	4b41      	ldr	r3, [pc, #260]	; (a060 <w5500_write_socket_udp+0x39c>)
    9f5c:	2202      	movs	r2, #2
    9f5e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f60:	4b38      	ldr	r3, [pc, #224]	; (a044 <w5500_write_socket_udp+0x380>)
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	3301      	adds	r3, #1
    9f66:	b2da      	uxtb	r2, r3
    9f68:	4b36      	ldr	r3, [pc, #216]	; (a044 <w5500_write_socket_udp+0x380>)
    9f6a:	701a      	strb	r2, [r3, #0]
		break;
    9f6c:	e0df      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    9f6e:	230e      	movs	r3, #14
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	881b      	ldrh	r3, [r3, #0]
    9f74:	4a3d      	ldr	r2, [pc, #244]	; (a06c <w5500_write_socket_udp+0x3a8>)
    9f76:	2120      	movs	r1, #32
    9f78:	54d1      	strb	r1, [r2, r3]
    9f7a:	230e      	movs	r3, #14
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	881a      	ldrh	r2, [r3, #0]
    9f80:	230e      	movs	r3, #14
    9f82:	18fb      	adds	r3, r7, r3
    9f84:	3201      	adds	r2, #1
    9f86:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_COMMAND;
    9f88:	4b30      	ldr	r3, [pc, #192]	; (a04c <w5500_write_socket_udp+0x388>)
    9f8a:	2201      	movs	r2, #1
    9f8c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f8e:	1dfb      	adds	r3, r7, #7
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	015b      	lsls	r3, r3, #5
    9f94:	b21b      	sxth	r3, r3
    9f96:	2208      	movs	r2, #8
    9f98:	4313      	orrs	r3, r2
    9f9a:	b21b      	sxth	r3, r3
    9f9c:	b29a      	uxth	r2, r3
    9f9e:	4b2c      	ldr	r3, [pc, #176]	; (a050 <w5500_write_socket_udp+0x38c>)
    9fa0:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9fa2:	4b2d      	ldr	r3, [pc, #180]	; (a058 <w5500_write_socket_udp+0x394>)
    9fa4:	4a31      	ldr	r2, [pc, #196]	; (a06c <w5500_write_socket_udp+0x3a8>)
    9fa6:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9fa8:	4b2c      	ldr	r3, [pc, #176]	; (a05c <w5500_write_socket_udp+0x398>)
    9faa:	220e      	movs	r2, #14
    9fac:	18ba      	adds	r2, r7, r2
    9fae:	8812      	ldrh	r2, [r2, #0]
    9fb0:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9fb2:	4b2b      	ldr	r3, [pc, #172]	; (a060 <w5500_write_socket_udp+0x39c>)
    9fb4:	2202      	movs	r2, #2
    9fb6:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9fb8:	4b22      	ldr	r3, [pc, #136]	; (a044 <w5500_write_socket_udp+0x380>)
    9fba:	781b      	ldrb	r3, [r3, #0]
    9fbc:	3301      	adds	r3, #1
    9fbe:	b2da      	uxtb	r2, r3
    9fc0:	4b20      	ldr	r3, [pc, #128]	; (a044 <w5500_write_socket_udp+0x380>)
    9fc2:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    9fc4:	1dfb      	adds	r3, r7, #7
    9fc6:	781a      	ldrb	r2, [r3, #0]
    9fc8:	4927      	ldr	r1, [pc, #156]	; (a068 <w5500_write_socket_udp+0x3a4>)
    9fca:	23bc      	movs	r3, #188	; 0xbc
    9fcc:	00db      	lsls	r3, r3, #3
    9fce:	4825      	ldr	r0, [pc, #148]	; (a064 <w5500_write_socket_udp+0x3a0>)
    9fd0:	4342      	muls	r2, r0
    9fd2:	188a      	adds	r2, r1, r2
    9fd4:	18d3      	adds	r3, r2, r3
    9fd6:	3303      	adds	r3, #3
    9fd8:	781a      	ldrb	r2, [r3, #0]
    9fda:	2100      	movs	r1, #0
    9fdc:	400a      	ands	r2, r1
    9fde:	1c11      	adds	r1, r2, #0
    9fe0:	224c      	movs	r2, #76	; 0x4c
    9fe2:	430a      	orrs	r2, r1
    9fe4:	701a      	strb	r2, [r3, #0]
    9fe6:	785a      	ldrb	r2, [r3, #1]
    9fe8:	2100      	movs	r1, #0
    9fea:	400a      	ands	r2, r1
    9fec:	1c11      	adds	r1, r2, #0
    9fee:	221d      	movs	r2, #29
    9ff0:	430a      	orrs	r2, r1
    9ff2:	705a      	strb	r2, [r3, #1]
		break;
    9ff4:	e09b      	b.n	a12e <w5500_write_socket_udp+0x46a>
		case UDP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    9ff6:	4b15      	ldr	r3, [pc, #84]	; (a04c <w5500_write_socket_udp+0x388>)
    9ff8:	2202      	movs	r2, #2
    9ffa:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9ffc:	1dfb      	adds	r3, r7, #7
    9ffe:	781b      	ldrb	r3, [r3, #0]
    a000:	015b      	lsls	r3, r3, #5
    a002:	b21b      	sxth	r3, r3
    a004:	2208      	movs	r2, #8
    a006:	4313      	orrs	r3, r2
    a008:	b21b      	sxth	r3, r3
    a00a:	b29a      	uxth	r2, r3
    a00c:	4b10      	ldr	r3, [pc, #64]	; (a050 <w5500_write_socket_udp+0x38c>)
    a00e:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a010:	1dfb      	adds	r3, r7, #7
    a012:	781b      	ldrb	r3, [r3, #0]
    a014:	015b      	lsls	r3, r3, #5
    a016:	3310      	adds	r3, #16
    a018:	001a      	movs	r2, r3
    a01a:	4b0e      	ldr	r3, [pc, #56]	; (a054 <w5500_write_socket_udp+0x390>)
    a01c:	18d3      	adds	r3, r2, r3
    a01e:	1d5a      	adds	r2, r3, #5
    a020:	4b0d      	ldr	r3, [pc, #52]	; (a058 <w5500_write_socket_udp+0x394>)
    a022:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a024:	4b0d      	ldr	r3, [pc, #52]	; (a05c <w5500_write_socket_udp+0x398>)
    a026:	2201      	movs	r2, #1
    a028:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a02a:	4b0d      	ldr	r3, [pc, #52]	; (a060 <w5500_write_socket_udp+0x39c>)
    a02c:	2201      	movs	r2, #1
    a02e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a030:	4b04      	ldr	r3, [pc, #16]	; (a044 <w5500_write_socket_udp+0x380>)
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	3301      	adds	r3, #1
    a036:	b2da      	uxtb	r2, r3
    a038:	4b02      	ldr	r3, [pc, #8]	; (a044 <w5500_write_socket_udp+0x380>)
    a03a:	701a      	strb	r2, [r3, #0]
		break;
    a03c:	e077      	b.n	a12e <w5500_write_socket_udp+0x46a>
    a03e:	46c0      	nop			; (mov r8, r8)
    a040:	2000048e 	.word	0x2000048e
    a044:	2000048f 	.word	0x2000048f
    a048:	0000cb94 	.word	0x0000cb94
    a04c:	20000480 	.word	0x20000480
    a050:	20000482 	.word	0x20000482
    a054:	20003b04 	.word	0x20003b04
    a058:	20003afc 	.word	0x20003afc
    a05c:	20000484 	.word	0x20000484
    a060:	20003bb7 	.word	0x20003bb7
    a064:	000005e5 	.word	0x000005e5
    a068:	200005cc 	.word	0x200005cc
    a06c:	20003bb8 	.word	0x20003bb8
		case UDP_STATUS_CLR:															//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a070:	1dfb      	adds	r3, r7, #7
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	4a30      	ldr	r2, [pc, #192]	; (a138 <w5500_write_socket_udp+0x474>)
    a076:	2110      	movs	r1, #16
    a078:	015b      	lsls	r3, r3, #5
    a07a:	18d3      	adds	r3, r2, r3
    a07c:	185b      	adds	r3, r3, r1
    a07e:	795b      	ldrb	r3, [r3, #5]
    a080:	06db      	lsls	r3, r3, #27
    a082:	0fdb      	lsrs	r3, r3, #31
    a084:	b2db      	uxtb	r3, r3
    a086:	2b01      	cmp	r3, #1
    a088:	d12b      	bne.n	a0e2 <w5500_write_socket_udp+0x41e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    a08a:	230e      	movs	r3, #14
    a08c:	18fb      	adds	r3, r7, r3
    a08e:	881b      	ldrh	r3, [r3, #0]
    a090:	4a2a      	ldr	r2, [pc, #168]	; (a13c <w5500_write_socket_udp+0x478>)
    a092:	2110      	movs	r1, #16
    a094:	54d1      	strb	r1, [r2, r3]
    a096:	230e      	movs	r3, #14
    a098:	18fb      	adds	r3, r7, r3
    a09a:	881a      	ldrh	r2, [r3, #0]
    a09c:	230e      	movs	r3, #14
    a09e:	18fb      	adds	r3, r7, r3
    a0a0:	3201      	adds	r2, #1
    a0a2:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    a0a4:	4b26      	ldr	r3, [pc, #152]	; (a140 <w5500_write_socket_udp+0x47c>)
    a0a6:	2202      	movs	r2, #2
    a0a8:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a0aa:	1dfb      	adds	r3, r7, #7
    a0ac:	781b      	ldrb	r3, [r3, #0]
    a0ae:	015b      	lsls	r3, r3, #5
    a0b0:	b21b      	sxth	r3, r3
    a0b2:	2208      	movs	r2, #8
    a0b4:	4313      	orrs	r3, r2
    a0b6:	b21b      	sxth	r3, r3
    a0b8:	b29a      	uxth	r2, r3
    a0ba:	4b22      	ldr	r3, [pc, #136]	; (a144 <w5500_write_socket_udp+0x480>)
    a0bc:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    a0be:	4b22      	ldr	r3, [pc, #136]	; (a148 <w5500_write_socket_udp+0x484>)
    a0c0:	4a1e      	ldr	r2, [pc, #120]	; (a13c <w5500_write_socket_udp+0x478>)
    a0c2:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    a0c4:	4b21      	ldr	r3, [pc, #132]	; (a14c <w5500_write_socket_udp+0x488>)
    a0c6:	220e      	movs	r2, #14
    a0c8:	18ba      	adds	r2, r7, r2
    a0ca:	8812      	ldrh	r2, [r2, #0]
    a0cc:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    a0ce:	4b20      	ldr	r3, [pc, #128]	; (a150 <w5500_write_socket_udp+0x48c>)
    a0d0:	2202      	movs	r2, #2
    a0d2:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    a0d4:	4b1f      	ldr	r3, [pc, #124]	; (a154 <w5500_write_socket_udp+0x490>)
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	3301      	adds	r3, #1
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	4b1d      	ldr	r3, [pc, #116]	; (a154 <w5500_write_socket_udp+0x490>)
    a0de:	701a      	strb	r2, [r3, #0]
				break;
    a0e0:	e025      	b.n	a12e <w5500_write_socket_udp+0x46a>
			}
			st_wr_w5500--;
    a0e2:	4b1c      	ldr	r3, [pc, #112]	; (a154 <w5500_write_socket_udp+0x490>)
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	3b01      	subs	r3, #1
    a0e8:	b2da      	uxtb	r2, r3
    a0ea:	4b1a      	ldr	r3, [pc, #104]	; (a154 <w5500_write_socket_udp+0x490>)
    a0ec:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    a0ee:	1dfb      	adds	r3, r7, #7
    a0f0:	781a      	ldrb	r2, [r3, #0]
    a0f2:	4919      	ldr	r1, [pc, #100]	; (a158 <w5500_write_socket_udp+0x494>)
    a0f4:	23bc      	movs	r3, #188	; 0xbc
    a0f6:	00db      	lsls	r3, r3, #3
    a0f8:	4818      	ldr	r0, [pc, #96]	; (a15c <w5500_write_socket_udp+0x498>)
    a0fa:	4342      	muls	r2, r0
    a0fc:	188a      	adds	r2, r1, r2
    a0fe:	18d3      	adds	r3, r2, r3
    a100:	78da      	ldrb	r2, [r3, #3]
    a102:	791b      	ldrb	r3, [r3, #4]
    a104:	021b      	lsls	r3, r3, #8
    a106:	4313      	orrs	r3, r2
    a108:	b29b      	uxth	r3, r3
    a10a:	2b00      	cmp	r3, #0
    a10c:	d10e      	bne.n	a12c <w5500_write_socket_udp+0x468>
			{
				st_wr_w5500=0; 
    a10e:	4b11      	ldr	r3, [pc, #68]	; (a154 <w5500_write_socket_udp+0x490>)
    a110:	2200      	movs	r2, #0
    a112:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a114:	2302      	movs	r3, #2
    a116:	e00b      	b.n	a130 <w5500_write_socket_udp+0x46c>
			}
		break;
		case 8:
				st_wr_w5500=0;
    a118:	4b0e      	ldr	r3, [pc, #56]	; (a154 <w5500_write_socket_udp+0x490>)
    a11a:	2200      	movs	r2, #0
    a11c:	701a      	strb	r2, [r3, #0]
				return PROC_OK;
    a11e:	2301      	movs	r3, #1
    a120:	e006      	b.n	a130 <w5500_write_socket_udp+0x46c>
		break;
		default:
				st_wr_w5500=0; 
    a122:	4b0c      	ldr	r3, [pc, #48]	; (a154 <w5500_write_socket_udp+0x490>)
    a124:	2200      	movs	r2, #0
    a126:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a128:	2302      	movs	r3, #2
    a12a:	e001      	b.n	a130 <w5500_write_socket_udp+0x46c>
		break;
    a12c:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a12e:	2300      	movs	r3, #0
}
    a130:	0018      	movs	r0, r3
    a132:	46bd      	mov	sp, r7
    a134:	b005      	add	sp, #20
    a136:	bd90      	pop	{r4, r7, pc}
    a138:	20003b04 	.word	0x20003b04
    a13c:	20003bb8 	.word	0x20003bb8
    a140:	20000480 	.word	0x20000480
    a144:	20000482 	.word	0x20000482
    a148:	20003afc 	.word	0x20003afc
    a14c:	20000484 	.word	0x20000484
    a150:	20003bb7 	.word	0x20003bb7
    a154:	2000048f 	.word	0x2000048f
    a158:	200005cc 	.word	0x200005cc
    a15c:	000005e5 	.word	0x000005e5

0000a160 <w5500_cmd_read_socket_tcp>:

WORD w5500_cmd_read_socket_tcp (BYTE sock_numb)
{
    a160:	b590      	push	{r4, r7, lr}
    a162:	b085      	sub	sp, #20
    a164:	af00      	add	r7, sp, #0
    a166:	0002      	movs	r2, r0
    a168:	1dfb      	adds	r3, r7, #7
    a16a:	701a      	strb	r2, [r3, #0]
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	static BYTE status_ded[MAX_SOCKETS_CNT];
	BYTE cnt=0;
    a16c:	230f      	movs	r3, #15
    a16e:	18fb      	adds	r3, r7, r3
    a170:	2200      	movs	r2, #0
    a172:	701a      	strb	r2, [r3, #0]

	switch(st_cmd_w5500)
    a174:	4bd2      	ldr	r3, [pc, #840]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a176:	781b      	ldrb	r3, [r3, #0]
    a178:	2b06      	cmp	r3, #6
    a17a:	d900      	bls.n	a17e <w5500_cmd_read_socket_tcp+0x1e>
    a17c:	e24e      	b.n	a61c <w5500_cmd_read_socket_tcp+0x4bc>
    a17e:	009a      	lsls	r2, r3, #2
    a180:	4bd0      	ldr	r3, [pc, #832]	; (a4c4 <w5500_cmd_read_socket_tcp+0x364>)
    a182:	18d3      	adds	r3, r2, r3
    a184:	681b      	ldr	r3, [r3, #0]
    a186:	469f      	mov	pc, r3
	{
		case TCP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr
    a188:	4bcf      	ldr	r3, [pc, #828]	; (a4c8 <w5500_cmd_read_socket_tcp+0x368>)
    a18a:	2226      	movs	r2, #38	; 0x26
    a18c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a18e:	1dfb      	adds	r3, r7, #7
    a190:	781b      	ldrb	r3, [r3, #0]
    a192:	015b      	lsls	r3, r3, #5
    a194:	b21b      	sxth	r3, r3
    a196:	2208      	movs	r2, #8
    a198:	4313      	orrs	r3, r2
    a19a:	b21b      	sxth	r3, r3
    a19c:	b29a      	uxth	r2, r3
    a19e:	4bcb      	ldr	r3, [pc, #812]	; (a4cc <w5500_cmd_read_socket_tcp+0x36c>)
    a1a0:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//data
    a1a2:	1dfb      	adds	r3, r7, #7
    a1a4:	781b      	ldrb	r3, [r3, #0]
    a1a6:	015b      	lsls	r3, r3, #5
    a1a8:	3328      	adds	r3, #40	; 0x28
    a1aa:	001a      	movs	r2, r3
    a1ac:	4bc8      	ldr	r3, [pc, #800]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a1ae:	18d3      	adds	r3, r2, r3
    a1b0:	1d5a      	adds	r2, r3, #5
    a1b2:	4bc8      	ldr	r3, [pc, #800]	; (a4d4 <w5500_cmd_read_socket_tcp+0x374>)
    a1b4:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a1b6:	4bc8      	ldr	r3, [pc, #800]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a1b8:	2206      	movs	r2, #6
    a1ba:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a1bc:	4bc7      	ldr	r3, [pc, #796]	; (a4dc <w5500_cmd_read_socket_tcp+0x37c>)
    a1be:	2201      	movs	r2, #1
    a1c0:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_PART_RD; //"next"
    a1c2:	4bbf      	ldr	r3, [pc, #764]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a1c4:	2201      	movs	r2, #1
    a1c6:	701a      	strb	r2, [r3, #0]
			size=0; 
    a1c8:	4bc5      	ldr	r3, [pc, #788]	; (a4e0 <w5500_cmd_read_socket_tcp+0x380>)
    a1ca:	2200      	movs	r2, #0
    a1cc:	801a      	strh	r2, [r3, #0]
			
			eth_sock[sock_numb].check_connect_cnt++;
    a1ce:	1dfb      	adds	r3, r7, #7
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	48c4      	ldr	r0, [pc, #784]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a1d4:	22bc      	movs	r2, #188	; 0xbc
    a1d6:	00d2      	lsls	r2, r2, #3
    a1d8:	49c3      	ldr	r1, [pc, #780]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a1da:	4359      	muls	r1, r3
    a1dc:	1841      	adds	r1, r0, r1
    a1de:	188a      	adds	r2, r1, r2
    a1e0:	7851      	ldrb	r1, [r2, #1]
    a1e2:	7892      	ldrb	r2, [r2, #2]
    a1e4:	0212      	lsls	r2, r2, #8
    a1e6:	430a      	orrs	r2, r1
    a1e8:	b292      	uxth	r2, r2
    a1ea:	3201      	adds	r2, #1
    a1ec:	b292      	uxth	r2, r2
    a1ee:	48bd      	ldr	r0, [pc, #756]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a1f0:	21bc      	movs	r1, #188	; 0xbc
    a1f2:	00c9      	lsls	r1, r1, #3
    a1f4:	4cbc      	ldr	r4, [pc, #752]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a1f6:	4363      	muls	r3, r4
    a1f8:	18c3      	adds	r3, r0, r3
    a1fa:	185b      	adds	r3, r3, r1
    a1fc:	3301      	adds	r3, #1
    a1fe:	21ff      	movs	r1, #255	; 0xff
    a200:	4011      	ands	r1, r2
    a202:	000c      	movs	r4, r1
    a204:	7819      	ldrb	r1, [r3, #0]
    a206:	2000      	movs	r0, #0
    a208:	4001      	ands	r1, r0
    a20a:	1c08      	adds	r0, r1, #0
    a20c:	1c21      	adds	r1, r4, #0
    a20e:	4301      	orrs	r1, r0
    a210:	7019      	strb	r1, [r3, #0]
    a212:	0a12      	lsrs	r2, r2, #8
    a214:	b290      	uxth	r0, r2
    a216:	785a      	ldrb	r2, [r3, #1]
    a218:	2100      	movs	r1, #0
    a21a:	400a      	ands	r2, r1
    a21c:	1c11      	adds	r1, r2, #0
    a21e:	1c02      	adds	r2, r0, #0
    a220:	430a      	orrs	r2, r1
    a222:	705a      	strb	r2, [r3, #1]
			if(eth_sock[sock_numb].check_connect_cnt > 5) {st_cmd_w5500 = TCP_STATUS_RD; eth_sock[sock_numb].check_connect_cnt=0;}
    a224:	1dfb      	adds	r3, r7, #7
    a226:	781a      	ldrb	r2, [r3, #0]
    a228:	49ae      	ldr	r1, [pc, #696]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a22a:	23bc      	movs	r3, #188	; 0xbc
    a22c:	00db      	lsls	r3, r3, #3
    a22e:	48ae      	ldr	r0, [pc, #696]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a230:	4342      	muls	r2, r0
    a232:	188a      	adds	r2, r1, r2
    a234:	18d3      	adds	r3, r2, r3
    a236:	785a      	ldrb	r2, [r3, #1]
    a238:	789b      	ldrb	r3, [r3, #2]
    a23a:	021b      	lsls	r3, r3, #8
    a23c:	4313      	orrs	r3, r2
    a23e:	b29b      	uxth	r3, r3
    a240:	2b05      	cmp	r3, #5
    a242:	d800      	bhi.n	a246 <w5500_cmd_read_socket_tcp+0xe6>
    a244:	e1ef      	b.n	a626 <w5500_cmd_read_socket_tcp+0x4c6>
    a246:	4b9e      	ldr	r3, [pc, #632]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a248:	2205      	movs	r2, #5
    a24a:	701a      	strb	r2, [r3, #0]
    a24c:	1dfb      	adds	r3, r7, #7
    a24e:	781a      	ldrb	r2, [r3, #0]
    a250:	49a4      	ldr	r1, [pc, #656]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a252:	23bc      	movs	r3, #188	; 0xbc
    a254:	00db      	lsls	r3, r3, #3
    a256:	48a4      	ldr	r0, [pc, #656]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a258:	4342      	muls	r2, r0
    a25a:	188a      	adds	r2, r1, r2
    a25c:	18d3      	adds	r3, r2, r3
    a25e:	3301      	adds	r3, #1
    a260:	781a      	ldrb	r2, [r3, #0]
    a262:	2100      	movs	r1, #0
    a264:	400a      	ands	r2, r1
    a266:	701a      	strb	r2, [r3, #0]
    a268:	785a      	ldrb	r2, [r3, #1]
    a26a:	2100      	movs	r1, #0
    a26c:	400a      	ands	r2, r1
    a26e:	705a      	strb	r2, [r3, #1]
		break;	
    a270:	e1d9      	b.n	a626 <w5500_cmd_read_socket_tcp+0x4c6>
		case TCP_STATUS_RD:
			addr_w5500=ADDR_SOC_STATUS;//addr in w5500 
    a272:	4b95      	ldr	r3, [pc, #596]	; (a4c8 <w5500_cmd_read_socket_tcp+0x368>)
    a274:	2203      	movs	r2, #3
    a276:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a278:	1dfb      	adds	r3, r7, #7
    a27a:	781b      	ldrb	r3, [r3, #0]
    a27c:	015b      	lsls	r3, r3, #5
    a27e:	b21b      	sxth	r3, r3
    a280:	2208      	movs	r2, #8
    a282:	4313      	orrs	r3, r2
    a284:	b21b      	sxth	r3, r3
    a286:	b29a      	uxth	r2, r3
    a288:	4b90      	ldr	r3, [pc, #576]	; (a4cc <w5500_cmd_read_socket_tcp+0x36c>)
    a28a:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R04_Sn_SR_03.Status;//place for write result
    a28c:	1dfb      	adds	r3, r7, #7
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	015b      	lsls	r3, r3, #5
    a292:	3310      	adds	r3, #16
    a294:	001a      	movs	r2, r3
    a296:	4b8e      	ldr	r3, [pc, #568]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a298:	18d3      	adds	r3, r2, r3
    a29a:	1d9a      	adds	r2, r3, #6
    a29c:	4b8d      	ldr	r3, [pc, #564]	; (a4d4 <w5500_cmd_read_socket_tcp+0x374>)
    a29e:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a2a0:	4b8d      	ldr	r3, [pc, #564]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a2a2:	2201      	movs	r2, #1
    a2a4:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a2a6:	4b8d      	ldr	r3, [pc, #564]	; (a4dc <w5500_cmd_read_socket_tcp+0x37c>)
    a2a8:	2201      	movs	r2, #1
    a2aa:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_FORK;//"next" 
    a2ac:	4b84      	ldr	r3, [pc, #528]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a2ae:	2206      	movs	r2, #6
    a2b0:	701a      	strb	r2, [r3, #0]
		break;
    a2b2:	e1b9      	b.n	a628 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_FORK:
			if(status_ded[sock_numb]==chip.sockReg[sock_numb].R04_Sn_SR_03.Status){st_cmd_w5500 = TCP_PART_RD; return PROC_WAIT;}
    a2b4:	1dfb      	adds	r3, r7, #7
    a2b6:	781b      	ldrb	r3, [r3, #0]
    a2b8:	4a8c      	ldr	r2, [pc, #560]	; (a4ec <w5500_cmd_read_socket_tcp+0x38c>)
    a2ba:	5cd2      	ldrb	r2, [r2, r3]
    a2bc:	1dfb      	adds	r3, r7, #7
    a2be:	781b      	ldrb	r3, [r3, #0]
    a2c0:	4983      	ldr	r1, [pc, #524]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a2c2:	015b      	lsls	r3, r3, #5
    a2c4:	18cb      	adds	r3, r1, r3
    a2c6:	3316      	adds	r3, #22
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	429a      	cmp	r2, r3
    a2cc:	d104      	bne.n	a2d8 <w5500_cmd_read_socket_tcp+0x178>
    a2ce:	4b7c      	ldr	r3, [pc, #496]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a2d0:	2201      	movs	r2, #1
    a2d2:	701a      	strb	r2, [r3, #0]
    a2d4:	2300      	movs	r3, #0
    a2d6:	e1a8      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
			status_ded[sock_numb]=chip.sockReg[sock_numb].R04_Sn_SR_03.Status;
    a2d8:	1dfb      	adds	r3, r7, #7
    a2da:	781b      	ldrb	r3, [r3, #0]
    a2dc:	1dfa      	adds	r2, r7, #7
    a2de:	7812      	ldrb	r2, [r2, #0]
    a2e0:	497b      	ldr	r1, [pc, #492]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a2e2:	0152      	lsls	r2, r2, #5
    a2e4:	188a      	adds	r2, r1, r2
    a2e6:	3216      	adds	r2, #22
    a2e8:	7811      	ldrb	r1, [r2, #0]
    a2ea:	4a80      	ldr	r2, [pc, #512]	; (a4ec <w5500_cmd_read_socket_tcp+0x38c>)
    a2ec:	54d1      	strb	r1, [r2, r3]
			switch(chip.sockReg[sock_numb].R04_Sn_SR_03.Status)
    a2ee:	1dfb      	adds	r3, r7, #7
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4a77      	ldr	r2, [pc, #476]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a2f4:	015b      	lsls	r3, r3, #5
    a2f6:	18d3      	adds	r3, r2, r3
    a2f8:	3316      	adds	r3, #22
    a2fa:	781b      	ldrb	r3, [r3, #0]
    a2fc:	2b13      	cmp	r3, #19
    a2fe:	d00a      	beq.n	a316 <w5500_cmd_read_socket_tcp+0x1b6>
    a300:	2b1c      	cmp	r3, #28
    a302:	d00f      	beq.n	a324 <w5500_cmd_read_socket_tcp+0x1c4>
    a304:	2b00      	cmp	r3, #0
    a306:	d114      	bne.n	a332 <w5500_cmd_read_socket_tcp+0x1d2>
			{
				case ST_CLOSE:
					wbuf_w55[cnt]=CMD_OPEN;
    a308:	230f      	movs	r3, #15
    a30a:	18fb      	adds	r3, r7, r3
    a30c:	781b      	ldrb	r3, [r3, #0]
    a30e:	4a78      	ldr	r2, [pc, #480]	; (a4f0 <w5500_cmd_read_socket_tcp+0x390>)
    a310:	2101      	movs	r1, #1
    a312:	54d1      	strb	r1, [r2, r3]
				break;
    a314:	e012      	b.n	a33c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_INIT:
					wbuf_w55[cnt]=CMD_LISTEN;
    a316:	230f      	movs	r3, #15
    a318:	18fb      	adds	r3, r7, r3
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	4a74      	ldr	r2, [pc, #464]	; (a4f0 <w5500_cmd_read_socket_tcp+0x390>)
    a31e:	2102      	movs	r1, #2
    a320:	54d1      	strb	r1, [r2, r3]
				break;
    a322:	e00b      	b.n	a33c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_CLOSE_WAIT:
					wbuf_w55[cnt]=CMD_CLOSE;			
    a324:	230f      	movs	r3, #15
    a326:	18fb      	adds	r3, r7, r3
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	4a71      	ldr	r2, [pc, #452]	; (a4f0 <w5500_cmd_read_socket_tcp+0x390>)
    a32c:	2110      	movs	r1, #16
    a32e:	54d1      	strb	r1, [r2, r3]
				break;
    a330:	e004      	b.n	a33c <w5500_cmd_read_socket_tcp+0x1dc>
				default:
					st_cmd_w5500=TCP_PART_RD;
    a332:	4b63      	ldr	r3, [pc, #396]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a334:	2201      	movs	r2, #1
    a336:	701a      	strb	r2, [r3, #0]
				return PROC_WAIT;
    a338:	2300      	movs	r3, #0
    a33a:	e176      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
			}
			addr_w5500=ADDR_SOC_COMMAND;
    a33c:	4b62      	ldr	r3, [pc, #392]	; (a4c8 <w5500_cmd_read_socket_tcp+0x368>)
    a33e:	2201      	movs	r2, #1
    a340:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a342:	1dfb      	adds	r3, r7, #7
    a344:	781b      	ldrb	r3, [r3, #0]
    a346:	015b      	lsls	r3, r3, #5
    a348:	b21b      	sxth	r3, r3
    a34a:	2208      	movs	r2, #8
    a34c:	4313      	orrs	r3, r2
    a34e:	b21b      	sxth	r3, r3
    a350:	b29a      	uxth	r2, r3
    a352:	4b5e      	ldr	r3, [pc, #376]	; (a4cc <w5500_cmd_read_socket_tcp+0x36c>)
    a354:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a356:	4b5f      	ldr	r3, [pc, #380]	; (a4d4 <w5500_cmd_read_socket_tcp+0x374>)
    a358:	4a65      	ldr	r2, [pc, #404]	; (a4f0 <w5500_cmd_read_socket_tcp+0x390>)
    a35a:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a35c:	4b5e      	ldr	r3, [pc, #376]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a35e:	2201      	movs	r2, #1
    a360:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a362:	4b5e      	ldr	r3, [pc, #376]	; (a4dc <w5500_cmd_read_socket_tcp+0x37c>)
    a364:	2202      	movs	r2, #2
    a366:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500=TCP_STATUS_RD;
    a368:	4b55      	ldr	r3, [pc, #340]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a36a:	2205      	movs	r2, #5
    a36c:	701a      	strb	r2, [r3, #0]
		break;
    a36e:	e15b      	b.n	a628 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_PART_RD:	
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    a370:	1dfb      	adds	r3, r7, #7
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	4a56      	ldr	r2, [pc, #344]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a376:	212d      	movs	r1, #45	; 0x2d
    a378:	015b      	lsls	r3, r3, #5
    a37a:	18d3      	adds	r3, r2, r3
    a37c:	185b      	adds	r3, r3, r1
    a37e:	781b      	ldrb	r3, [r3, #0]
    a380:	021b      	lsls	r3, r3, #8
    a382:	b21a      	sxth	r2, r3
    a384:	1dfb      	adds	r3, r7, #7
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4951      	ldr	r1, [pc, #324]	; (a4d0 <w5500_cmd_read_socket_tcp+0x370>)
    a38a:	202e      	movs	r0, #46	; 0x2e
    a38c:	015b      	lsls	r3, r3, #5
    a38e:	18cb      	adds	r3, r1, r3
    a390:	181b      	adds	r3, r3, r0
    a392:	781b      	ldrb	r3, [r3, #0]
    a394:	b21b      	sxth	r3, r3
    a396:	4313      	orrs	r3, r2
    a398:	b21b      	sxth	r3, r3
    a39a:	b29a      	uxth	r2, r3
    a39c:	4b55      	ldr	r3, [pc, #340]	; (a4f4 <w5500_cmd_read_socket_tcp+0x394>)
    a39e:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return		
    a3a0:	4b54      	ldr	r3, [pc, #336]	; (a4f4 <w5500_cmd_read_socket_tcp+0x394>)
    a3a2:	881b      	ldrh	r3, [r3, #0]
    a3a4:	b29b      	uxth	r3, r3
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d100      	bne.n	a3ac <w5500_cmd_read_socket_tcp+0x24c>
    a3aa:	e084      	b.n	a4b6 <w5500_cmd_read_socket_tcp+0x356>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;//addr start messege
    a3ac:	1dfb      	adds	r3, r7, #7
    a3ae:	781a      	ldrb	r2, [r3, #0]
    a3b0:	494c      	ldr	r1, [pc, #304]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a3b2:	23ba      	movs	r3, #186	; 0xba
    a3b4:	00db      	lsls	r3, r3, #3
    a3b6:	484c      	ldr	r0, [pc, #304]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a3b8:	4342      	muls	r2, r0
    a3ba:	188a      	adds	r2, r1, r2
    a3bc:	18d3      	adds	r3, r2, r3
    a3be:	78da      	ldrb	r2, [r3, #3]
    a3c0:	791b      	ldrb	r3, [r3, #4]
    a3c2:	021b      	lsls	r3, r3, #8
    a3c4:	4313      	orrs	r3, r2
    a3c6:	b29a      	uxth	r2, r3
    a3c8:	4b3f      	ldr	r3, [pc, #252]	; (a4c8 <w5500_cmd_read_socket_tcp+0x368>)
    a3ca:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);//bsb sock RX
    a3cc:	1dfb      	adds	r3, r7, #7
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	015b      	lsls	r3, r3, #5
    a3d2:	b21b      	sxth	r3, r3
    a3d4:	2218      	movs	r2, #24
    a3d6:	4313      	orrs	r3, r2
    a3d8:	b21b      	sxth	r3, r3
    a3da:	b29a      	uxth	r2, r3
    a3dc:	4b3b      	ldr	r3, [pc, #236]	; (a4cc <w5500_cmd_read_socket_tcp+0x36c>)
    a3de:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb].data;
    a3e0:	1dfb      	adds	r3, r7, #7
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	4a40      	ldr	r2, [pc, #256]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a3e6:	4353      	muls	r3, r2
    a3e8:	3308      	adds	r3, #8
    a3ea:	001a      	movs	r2, r3
    a3ec:	4b3d      	ldr	r3, [pc, #244]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a3ee:	18d2      	adds	r2, r2, r3
    a3f0:	4b38      	ldr	r3, [pc, #224]	; (a4d4 <w5500_cmd_read_socket_tcp+0x374>)
    a3f2:	601a      	str	r2, [r3, #0]
				len_buf = sizert;
    a3f4:	4b3f      	ldr	r3, [pc, #252]	; (a4f4 <w5500_cmd_read_socket_tcp+0x394>)
    a3f6:	881b      	ldrh	r3, [r3, #0]
    a3f8:	b29a      	uxth	r2, r3
    a3fa:	4b37      	ldr	r3, [pc, #220]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a3fc:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    a3fe:	1dfb      	adds	r3, r7, #7
    a400:	7819      	ldrb	r1, [r3, #0]
    a402:	1dfb      	adds	r3, r7, #7
    a404:	781a      	ldrb	r2, [r3, #0]
    a406:	4837      	ldr	r0, [pc, #220]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a408:	23ba      	movs	r3, #186	; 0xba
    a40a:	00db      	lsls	r3, r3, #3
    a40c:	4c36      	ldr	r4, [pc, #216]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a40e:	4362      	muls	r2, r4
    a410:	1882      	adds	r2, r0, r2
    a412:	18d3      	adds	r3, r2, r3
    a414:	78da      	ldrb	r2, [r3, #3]
    a416:	791b      	ldrb	r3, [r3, #4]
    a418:	021b      	lsls	r3, r3, #8
    a41a:	4313      	orrs	r3, r2
    a41c:	b29a      	uxth	r2, r3
    a41e:	4b2e      	ldr	r3, [pc, #184]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a420:	881b      	ldrh	r3, [r3, #0]
    a422:	18d3      	adds	r3, r2, r3
    a424:	b29a      	uxth	r2, r3
    a426:	482f      	ldr	r0, [pc, #188]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a428:	23ba      	movs	r3, #186	; 0xba
    a42a:	00db      	lsls	r3, r3, #3
    a42c:	4c2e      	ldr	r4, [pc, #184]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a42e:	4361      	muls	r1, r4
    a430:	1841      	adds	r1, r0, r1
    a432:	18cb      	adds	r3, r1, r3
    a434:	3303      	adds	r3, #3
    a436:	21ff      	movs	r1, #255	; 0xff
    a438:	4011      	ands	r1, r2
    a43a:	000c      	movs	r4, r1
    a43c:	7819      	ldrb	r1, [r3, #0]
    a43e:	2000      	movs	r0, #0
    a440:	4001      	ands	r1, r0
    a442:	1c08      	adds	r0, r1, #0
    a444:	1c21      	adds	r1, r4, #0
    a446:	4301      	orrs	r1, r0
    a448:	7019      	strb	r1, [r3, #0]
    a44a:	0a12      	lsrs	r2, r2, #8
    a44c:	b290      	uxth	r0, r2
    a44e:	785a      	ldrb	r2, [r3, #1]
    a450:	2100      	movs	r1, #0
    a452:	400a      	ands	r2, r1
    a454:	1c11      	adds	r1, r2, #0
    a456:	1c02      	adds	r2, r0, #0
    a458:	430a      	orrs	r2, r1
    a45a:	705a      	strb	r2, [r3, #1]
				
				size=len_buf;
    a45c:	4b1e      	ldr	r3, [pc, #120]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a45e:	881a      	ldrh	r2, [r3, #0]
    a460:	4b1f      	ldr	r3, [pc, #124]	; (a4e0 <w5500_cmd_read_socket_tcp+0x380>)
    a462:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_TCP){size=PROC_ER;}
    a464:	4b1c      	ldr	r3, [pc, #112]	; (a4d8 <w5500_cmd_read_socket_tcp+0x378>)
    a466:	881b      	ldrh	r3, [r3, #0]
    a468:	4a23      	ldr	r2, [pc, #140]	; (a4f8 <w5500_cmd_read_socket_tcp+0x398>)
    a46a:	4293      	cmp	r3, r2
    a46c:	d902      	bls.n	a474 <w5500_cmd_read_socket_tcp+0x314>
    a46e:	4b1c      	ldr	r3, [pc, #112]	; (a4e0 <w5500_cmd_read_socket_tcp+0x380>)
    a470:	2202      	movs	r2, #2
    a472:	801a      	strh	r2, [r3, #0]
					
				eth_sock[sock_numb].len[0]=	(size & 0xFF00)>>8;
    a474:	1dfb      	adds	r3, r7, #7
    a476:	781b      	ldrb	r3, [r3, #0]
    a478:	4a19      	ldr	r2, [pc, #100]	; (a4e0 <w5500_cmd_read_socket_tcp+0x380>)
    a47a:	8812      	ldrh	r2, [r2, #0]
    a47c:	0a12      	lsrs	r2, r2, #8
    a47e:	b292      	uxth	r2, r2
    a480:	b2d0      	uxtb	r0, r2
    a482:	4a18      	ldr	r2, [pc, #96]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a484:	4918      	ldr	r1, [pc, #96]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a486:	434b      	muls	r3, r1
    a488:	18d3      	adds	r3, r2, r3
    a48a:	3306      	adds	r3, #6
    a48c:	1c02      	adds	r2, r0, #0
    a48e:	701a      	strb	r2, [r3, #0]
				eth_sock[sock_numb].len[1]=	(size & 0x00FF);							
    a490:	1dfb      	adds	r3, r7, #7
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	4a12      	ldr	r2, [pc, #72]	; (a4e0 <w5500_cmd_read_socket_tcp+0x380>)
    a496:	8812      	ldrh	r2, [r2, #0]
    a498:	b2d0      	uxtb	r0, r2
    a49a:	4a12      	ldr	r2, [pc, #72]	; (a4e4 <w5500_cmd_read_socket_tcp+0x384>)
    a49c:	4912      	ldr	r1, [pc, #72]	; (a4e8 <w5500_cmd_read_socket_tcp+0x388>)
    a49e:	434b      	muls	r3, r1
    a4a0:	18d3      	adds	r3, r2, r3
    a4a2:	3307      	adds	r3, #7
    a4a4:	1c02      	adds	r2, r0, #0
    a4a6:	701a      	strb	r2, [r3, #0]
				cmd=READ_DATA;
    a4a8:	4b0c      	ldr	r3, [pc, #48]	; (a4dc <w5500_cmd_read_socket_tcp+0x37c>)
    a4aa:	2201      	movs	r2, #1
    a4ac:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500 = TCP_DROP_PTR;
    a4ae:	4b04      	ldr	r3, [pc, #16]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a4b0:	2203      	movs	r2, #3
    a4b2:	701a      	strb	r2, [r3, #0]
				break;
    a4b4:	e0b8      	b.n	a628 <w5500_cmd_read_socket_tcp+0x4c8>
			}
			st_cmd_w5500=TCP_GIVE_LEN;
    a4b6:	4b02      	ldr	r3, [pc, #8]	; (a4c0 <w5500_cmd_read_socket_tcp+0x360>)
    a4b8:	2200      	movs	r2, #0
    a4ba:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    a4bc:	2302      	movs	r3, #2
    a4be:	e0b4      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
    a4c0:	20000490 	.word	0x20000490
    a4c4:	0000cbb8 	.word	0x0000cbb8
    a4c8:	20000480 	.word	0x20000480
    a4cc:	20000482 	.word	0x20000482
    a4d0:	20003b04 	.word	0x20003b04
    a4d4:	20003afc 	.word	0x20003afc
    a4d8:	20000484 	.word	0x20000484
    a4dc:	20003bb7 	.word	0x20003bb7
    a4e0:	20000492 	.word	0x20000492
    a4e4:	200005cc 	.word	0x200005cc
    a4e8:	000005e5 	.word	0x000005e5
    a4ec:	20000494 	.word	0x20000494
    a4f0:	20003bb8 	.word	0x20003bb8
    a4f4:	20000486 	.word	0x20000486
    a4f8:	000005b4 	.word	0x000005b4
		break;
		case TCP_DROP_PTR:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    a4fc:	230f      	movs	r3, #15
    a4fe:	18fb      	adds	r3, r7, r3
    a500:	781a      	ldrb	r2, [r3, #0]
    a502:	1dfb      	adds	r3, r7, #7
    a504:	7819      	ldrb	r1, [r3, #0]
    a506:	484b      	ldr	r0, [pc, #300]	; (a634 <w5500_cmd_read_socket_tcp+0x4d4>)
    a508:	23ba      	movs	r3, #186	; 0xba
    a50a:	00db      	lsls	r3, r3, #3
    a50c:	4c4a      	ldr	r4, [pc, #296]	; (a638 <w5500_cmd_read_socket_tcp+0x4d8>)
    a50e:	4361      	muls	r1, r4
    a510:	1841      	adds	r1, r0, r1
    a512:	18cb      	adds	r3, r1, r3
    a514:	78d9      	ldrb	r1, [r3, #3]
    a516:	791b      	ldrb	r3, [r3, #4]
    a518:	021b      	lsls	r3, r3, #8
    a51a:	430b      	orrs	r3, r1
    a51c:	b29b      	uxth	r3, r3
    a51e:	0a1b      	lsrs	r3, r3, #8
    a520:	b29b      	uxth	r3, r3
    a522:	b2d9      	uxtb	r1, r3
    a524:	4b45      	ldr	r3, [pc, #276]	; (a63c <w5500_cmd_read_socket_tcp+0x4dc>)
    a526:	5499      	strb	r1, [r3, r2]
    a528:	230f      	movs	r3, #15
    a52a:	18fb      	adds	r3, r7, r3
    a52c:	781a      	ldrb	r2, [r3, #0]
    a52e:	230f      	movs	r3, #15
    a530:	18fb      	adds	r3, r7, r3
    a532:	3201      	adds	r2, #1
    a534:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    a536:	230f      	movs	r3, #15
    a538:	18fb      	adds	r3, r7, r3
    a53a:	781a      	ldrb	r2, [r3, #0]
    a53c:	1dfb      	adds	r3, r7, #7
    a53e:	7819      	ldrb	r1, [r3, #0]
    a540:	483c      	ldr	r0, [pc, #240]	; (a634 <w5500_cmd_read_socket_tcp+0x4d4>)
    a542:	23ba      	movs	r3, #186	; 0xba
    a544:	00db      	lsls	r3, r3, #3
    a546:	4c3c      	ldr	r4, [pc, #240]	; (a638 <w5500_cmd_read_socket_tcp+0x4d8>)
    a548:	4361      	muls	r1, r4
    a54a:	1841      	adds	r1, r0, r1
    a54c:	18cb      	adds	r3, r1, r3
    a54e:	78d9      	ldrb	r1, [r3, #3]
    a550:	791b      	ldrb	r3, [r3, #4]
    a552:	021b      	lsls	r3, r3, #8
    a554:	430b      	orrs	r3, r1
    a556:	b29b      	uxth	r3, r3
    a558:	b2d9      	uxtb	r1, r3
    a55a:	4b38      	ldr	r3, [pc, #224]	; (a63c <w5500_cmd_read_socket_tcp+0x4dc>)
    a55c:	5499      	strb	r1, [r3, r2]
    a55e:	230f      	movs	r3, #15
    a560:	18fb      	adds	r3, r7, r3
    a562:	781a      	ldrb	r2, [r3, #0]
    a564:	230f      	movs	r3, #15
    a566:	18fb      	adds	r3, r7, r3
    a568:	3201      	adds	r2, #1
    a56a:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;
    a56c:	4b34      	ldr	r3, [pc, #208]	; (a640 <w5500_cmd_read_socket_tcp+0x4e0>)
    a56e:	2228      	movs	r2, #40	; 0x28
    a570:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a572:	1dfb      	adds	r3, r7, #7
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	015b      	lsls	r3, r3, #5
    a578:	b21b      	sxth	r3, r3
    a57a:	2208      	movs	r2, #8
    a57c:	4313      	orrs	r3, r2
    a57e:	b21b      	sxth	r3, r3
    a580:	b29a      	uxth	r2, r3
    a582:	4b30      	ldr	r3, [pc, #192]	; (a644 <w5500_cmd_read_socket_tcp+0x4e4>)
    a584:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a586:	4b30      	ldr	r3, [pc, #192]	; (a648 <w5500_cmd_read_socket_tcp+0x4e8>)
    a588:	4a2c      	ldr	r2, [pc, #176]	; (a63c <w5500_cmd_read_socket_tcp+0x4dc>)
    a58a:	601a      	str	r2, [r3, #0]
			len_buf=2;
    a58c:	4b2f      	ldr	r3, [pc, #188]	; (a64c <w5500_cmd_read_socket_tcp+0x4ec>)
    a58e:	2202      	movs	r2, #2
    a590:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a592:	4b2f      	ldr	r3, [pc, #188]	; (a650 <w5500_cmd_read_socket_tcp+0x4f0>)
    a594:	2202      	movs	r2, #2
    a596:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_RSV_CMD;//"next" 
    a598:	4b2e      	ldr	r3, [pc, #184]	; (a654 <w5500_cmd_read_socket_tcp+0x4f4>)
    a59a:	2202      	movs	r2, #2
    a59c:	701a      	strb	r2, [r3, #0]
		break;
    a59e:	e043      	b.n	a628 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_RSV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//go to reciv mode (and rewrite number)
    a5a0:	230f      	movs	r3, #15
    a5a2:	18fb      	adds	r3, r7, r3
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	4a25      	ldr	r2, [pc, #148]	; (a63c <w5500_cmd_read_socket_tcp+0x4dc>)
    a5a8:	2140      	movs	r1, #64	; 0x40
    a5aa:	54d1      	strb	r1, [r2, r3]
    a5ac:	230f      	movs	r3, #15
    a5ae:	18fb      	adds	r3, r7, r3
    a5b0:	781a      	ldrb	r2, [r3, #0]
    a5b2:	230f      	movs	r3, #15
    a5b4:	18fb      	adds	r3, r7, r3
    a5b6:	3201      	adds	r2, #1
    a5b8:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a5ba:	4b21      	ldr	r3, [pc, #132]	; (a640 <w5500_cmd_read_socket_tcp+0x4e0>)
    a5bc:	2201      	movs	r2, #1
    a5be:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a5c0:	1dfb      	adds	r3, r7, #7
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	015b      	lsls	r3, r3, #5
    a5c6:	b21b      	sxth	r3, r3
    a5c8:	2208      	movs	r2, #8
    a5ca:	4313      	orrs	r3, r2
    a5cc:	b21b      	sxth	r3, r3
    a5ce:	b29a      	uxth	r2, r3
    a5d0:	4b1c      	ldr	r3, [pc, #112]	; (a644 <w5500_cmd_read_socket_tcp+0x4e4>)
    a5d2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a5d4:	4b1c      	ldr	r3, [pc, #112]	; (a648 <w5500_cmd_read_socket_tcp+0x4e8>)
    a5d6:	4a19      	ldr	r2, [pc, #100]	; (a63c <w5500_cmd_read_socket_tcp+0x4dc>)
    a5d8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a5da:	230f      	movs	r3, #15
    a5dc:	18fb      	adds	r3, r7, r3
    a5de:	781b      	ldrb	r3, [r3, #0]
    a5e0:	b29a      	uxth	r2, r3
    a5e2:	4b1a      	ldr	r3, [pc, #104]	; (a64c <w5500_cmd_read_socket_tcp+0x4ec>)
    a5e4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a5e6:	4b1a      	ldr	r3, [pc, #104]	; (a650 <w5500_cmd_read_socket_tcp+0x4f0>)
    a5e8:	2202      	movs	r2, #2
    a5ea:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_BK_START;//"next" 
    a5ec:	4b19      	ldr	r3, [pc, #100]	; (a654 <w5500_cmd_read_socket_tcp+0x4f4>)
    a5ee:	2204      	movs	r2, #4
    a5f0:	701a      	strb	r2, [r3, #0]
		break;
    a5f2:	e019      	b.n	a628 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_BK_START:
			st_cmd_w5500=TCP_GIVE_LEN;//сброс параметров
    a5f4:	4b17      	ldr	r3, [pc, #92]	; (a654 <w5500_cmd_read_socket_tcp+0x4f4>)
    a5f6:	2200      	movs	r2, #0
    a5f8:	701a      	strb	r2, [r3, #0]
			if(!size)					 {return PROC_ER;}
    a5fa:	4b17      	ldr	r3, [pc, #92]	; (a658 <w5500_cmd_read_socket_tcp+0x4f8>)
    a5fc:	881b      	ldrh	r3, [r3, #0]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d101      	bne.n	a606 <w5500_cmd_read_socket_tcp+0x4a6>
    a602:	2302      	movs	r3, #2
    a604:	e011      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
			if(size > USART_BUF_SIZE)	 {return PROC_ER;}
    a606:	4b14      	ldr	r3, [pc, #80]	; (a658 <w5500_cmd_read_socket_tcp+0x4f8>)
    a608:	881a      	ldrh	r2, [r3, #0]
    a60a:	2380      	movs	r3, #128	; 0x80
    a60c:	005b      	lsls	r3, r3, #1
    a60e:	429a      	cmp	r2, r3
    a610:	d901      	bls.n	a616 <w5500_cmd_read_socket_tcp+0x4b6>
    a612:	2302      	movs	r3, #2
    a614:	e009      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
			return (size);
    a616:	4b10      	ldr	r3, [pc, #64]	; (a658 <w5500_cmd_read_socket_tcp+0x4f8>)
    a618:	881b      	ldrh	r3, [r3, #0]
    a61a:	e006      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    a61c:	4b0d      	ldr	r3, [pc, #52]	; (a654 <w5500_cmd_read_socket_tcp+0x4f4>)
    a61e:	2200      	movs	r2, #0
    a620:	701a      	strb	r2, [r3, #0]
    a622:	2302      	movs	r3, #2
    a624:	e001      	b.n	a62a <w5500_cmd_read_socket_tcp+0x4ca>
		break;	
    a626:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a628:	2300      	movs	r3, #0
}
    a62a:	0018      	movs	r0, r3
    a62c:	46bd      	mov	sp, r7
    a62e:	b005      	add	sp, #20
    a630:	bd90      	pop	{r4, r7, pc}
    a632:	46c0      	nop			; (mov r8, r8)
    a634:	200005cc 	.word	0x200005cc
    a638:	000005e5 	.word	0x000005e5
    a63c:	20003bb8 	.word	0x20003bb8
    a640:	20000480 	.word	0x20000480
    a644:	20000482 	.word	0x20000482
    a648:	20003afc 	.word	0x20003afc
    a64c:	20000484 	.word	0x20000484
    a650:	20003bb7 	.word	0x20003bb7
    a654:	20000490 	.word	0x20000490
    a658:	20000492 	.word	0x20000492

0000a65c <w5500_write_socket_tcp>:

WORD w5500_write_socket_tcp (BYTE sock_numb)
{
    a65c:	b590      	push	{r4, r7, lr}
    a65e:	b085      	sub	sp, #20
    a660:	af00      	add	r7, sp, #0
    a662:	0002      	movs	r2, r0
    a664:	1dfb      	adds	r3, r7, #7
    a666:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500=0;
	static BYTE numb_static=0;
	WORD cnt=0;
    a668:	230e      	movs	r3, #14
    a66a:	18fb      	adds	r3, r7, r3
    a66c:	2200      	movs	r2, #0
    a66e:	801a      	strh	r2, [r3, #0]
	
	if(numb_static!=sock_numb){numb_static=sock_numb;st_wr_w5500=0;}
    a670:	4bdc      	ldr	r3, [pc, #880]	; (a9e4 <w5500_write_socket_tcp+0x388>)
    a672:	781b      	ldrb	r3, [r3, #0]
    a674:	1dfa      	adds	r2, r7, #7
    a676:	7812      	ldrb	r2, [r2, #0]
    a678:	429a      	cmp	r2, r3
    a67a:	d006      	beq.n	a68a <w5500_write_socket_tcp+0x2e>
    a67c:	4bd9      	ldr	r3, [pc, #868]	; (a9e4 <w5500_write_socket_tcp+0x388>)
    a67e:	1dfa      	adds	r2, r7, #7
    a680:	7812      	ldrb	r2, [r2, #0]
    a682:	701a      	strb	r2, [r3, #0]
    a684:	4bd8      	ldr	r3, [pc, #864]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a686:	2200      	movs	r2, #0
    a688:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    a68a:	4bd7      	ldr	r3, [pc, #860]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	2b06      	cmp	r3, #6
    a690:	d900      	bls.n	a694 <w5500_write_socket_tcp+0x38>
    a692:	e21a      	b.n	aaca <w5500_write_socket_tcp+0x46e>
    a694:	009a      	lsls	r2, r3, #2
    a696:	4bd5      	ldr	r3, [pc, #852]	; (a9ec <w5500_write_socket_tcp+0x390>)
    a698:	18d3      	adds	r3, r2, r3
    a69a:	681b      	ldr	r3, [r3, #0]
    a69c:	469f      	mov	pc, r3
	{
		case TCP_RD_FSR:																	//read reg tx status FSR
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;
    a69e:	4bd4      	ldr	r3, [pc, #848]	; (a9f0 <w5500_write_socket_tcp+0x394>)
    a6a0:	2220      	movs	r2, #32
    a6a2:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a6a4:	1dfb      	adds	r3, r7, #7
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	015b      	lsls	r3, r3, #5
    a6aa:	b21b      	sxth	r3, r3
    a6ac:	2208      	movs	r2, #8
    a6ae:	4313      	orrs	r3, r2
    a6b0:	b21b      	sxth	r3, r3
    a6b2:	b29a      	uxth	r2, r3
    a6b4:	4bcf      	ldr	r3, [pc, #828]	; (a9f4 <w5500_write_socket_tcp+0x398>)
    a6b6:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    a6b8:	1dfb      	adds	r3, r7, #7
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	3301      	adds	r3, #1
    a6be:	015a      	lsls	r2, r3, #5
    a6c0:	4bcd      	ldr	r3, [pc, #820]	; (a9f8 <w5500_write_socket_tcp+0x39c>)
    a6c2:	18d3      	adds	r3, r2, r3
    a6c4:	1dda      	adds	r2, r3, #7
    a6c6:	4bcd      	ldr	r3, [pc, #820]	; (a9fc <w5500_write_socket_tcp+0x3a0>)
    a6c8:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a6ca:	4bcd      	ldr	r3, [pc, #820]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a6cc:	2206      	movs	r2, #6
    a6ce:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a6d0:	4bcc      	ldr	r3, [pc, #816]	; (aa04 <w5500_write_socket_tcp+0x3a8>)
    a6d2:	2201      	movs	r2, #1
    a6d4:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a6d6:	4bc4      	ldr	r3, [pc, #784]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a6d8:	781b      	ldrb	r3, [r3, #0]
    a6da:	3301      	adds	r3, #1
    a6dc:	b2da      	uxtb	r2, r3
    a6de:	4bc2      	ldr	r3, [pc, #776]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a6e0:	701a      	strb	r2, [r3, #0]
		break;
    a6e2:	e1f8      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
		case TCP_WR_DATA:	
			sizert=	(*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case2);				
    a6e4:	1dfb      	adds	r3, r7, #7
    a6e6:	781b      	ldrb	r3, [r3, #0]
    a6e8:	4ac3      	ldr	r2, [pc, #780]	; (a9f8 <w5500_write_socket_tcp+0x39c>)
    a6ea:	212b      	movs	r1, #43	; 0x2b
    a6ec:	015b      	lsls	r3, r3, #5
    a6ee:	18d3      	adds	r3, r2, r3
    a6f0:	185b      	adds	r3, r3, r1
    a6f2:	781b      	ldrb	r3, [r3, #0]
    a6f4:	021b      	lsls	r3, r3, #8
    a6f6:	b21a      	sxth	r2, r3
    a6f8:	1dfb      	adds	r3, r7, #7
    a6fa:	781b      	ldrb	r3, [r3, #0]
    a6fc:	49be      	ldr	r1, [pc, #760]	; (a9f8 <w5500_write_socket_tcp+0x39c>)
    a6fe:	202c      	movs	r0, #44	; 0x2c
    a700:	015b      	lsls	r3, r3, #5
    a702:	18cb      	adds	r3, r1, r3
    a704:	181b      	adds	r3, r3, r0
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	b21b      	sxth	r3, r3
    a70a:	4313      	orrs	r3, r2
    a70c:	b21b      	sxth	r3, r3
    a70e:	b29a      	uxth	r2, r3
    a710:	4bbd      	ldr	r3, [pc, #756]	; (aa08 <w5500_write_socket_tcp+0x3ac>)
    a712:	801a      	strh	r2, [r3, #0]
			
			if(sizert!=eth_sock[sock_numb].ptr_tx_buf){ eth_sock[sock_numb].ptr_tx_buf=sizert; }
    a714:	1dfb      	adds	r3, r7, #7
    a716:	781a      	ldrb	r2, [r3, #0]
    a718:	49bc      	ldr	r1, [pc, #752]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a71a:	23ba      	movs	r3, #186	; 0xba
    a71c:	00db      	lsls	r3, r3, #3
    a71e:	48bc      	ldr	r0, [pc, #752]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a720:	4342      	muls	r2, r0
    a722:	188a      	adds	r2, r1, r2
    a724:	18d3      	adds	r3, r2, r3
    a726:	795a      	ldrb	r2, [r3, #5]
    a728:	799b      	ldrb	r3, [r3, #6]
    a72a:	021b      	lsls	r3, r3, #8
    a72c:	4313      	orrs	r3, r2
    a72e:	b29a      	uxth	r2, r3
    a730:	4bb5      	ldr	r3, [pc, #724]	; (aa08 <w5500_write_socket_tcp+0x3ac>)
    a732:	881b      	ldrh	r3, [r3, #0]
    a734:	b29b      	uxth	r3, r3
    a736:	429a      	cmp	r2, r3
    a738:	d01f      	beq.n	a77a <w5500_write_socket_tcp+0x11e>
    a73a:	1dfb      	adds	r3, r7, #7
    a73c:	7819      	ldrb	r1, [r3, #0]
    a73e:	4bb2      	ldr	r3, [pc, #712]	; (aa08 <w5500_write_socket_tcp+0x3ac>)
    a740:	881b      	ldrh	r3, [r3, #0]
    a742:	b29a      	uxth	r2, r3
    a744:	48b1      	ldr	r0, [pc, #708]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a746:	23ba      	movs	r3, #186	; 0xba
    a748:	00db      	lsls	r3, r3, #3
    a74a:	4cb1      	ldr	r4, [pc, #708]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a74c:	4361      	muls	r1, r4
    a74e:	1841      	adds	r1, r0, r1
    a750:	18cb      	adds	r3, r1, r3
    a752:	3305      	adds	r3, #5
    a754:	21ff      	movs	r1, #255	; 0xff
    a756:	4011      	ands	r1, r2
    a758:	000c      	movs	r4, r1
    a75a:	7819      	ldrb	r1, [r3, #0]
    a75c:	2000      	movs	r0, #0
    a75e:	4001      	ands	r1, r0
    a760:	1c08      	adds	r0, r1, #0
    a762:	1c21      	adds	r1, r4, #0
    a764:	4301      	orrs	r1, r0
    a766:	7019      	strb	r1, [r3, #0]
    a768:	0a12      	lsrs	r2, r2, #8
    a76a:	b290      	uxth	r0, r2
    a76c:	785a      	ldrb	r2, [r3, #1]
    a76e:	2100      	movs	r1, #0
    a770:	400a      	ands	r2, r1
    a772:	1c11      	adds	r1, r2, #0
    a774:	1c02      	adds	r2, r0, #0
    a776:	430a      	orrs	r2, r1
    a778:	705a      	strb	r2, [r3, #1]
																			
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    a77a:	1dfb      	adds	r3, r7, #7
    a77c:	781a      	ldrb	r2, [r3, #0]
    a77e:	49a3      	ldr	r1, [pc, #652]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a780:	23ba      	movs	r3, #186	; 0xba
    a782:	00db      	lsls	r3, r3, #3
    a784:	48a2      	ldr	r0, [pc, #648]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a786:	4342      	muls	r2, r0
    a788:	188a      	adds	r2, r1, r2
    a78a:	18d3      	adds	r3, r2, r3
    a78c:	795a      	ldrb	r2, [r3, #5]
    a78e:	799b      	ldrb	r3, [r3, #6]
    a790:	021b      	lsls	r3, r3, #8
    a792:	4313      	orrs	r3, r2
    a794:	b29a      	uxth	r2, r3
    a796:	4b96      	ldr	r3, [pc, #600]	; (a9f0 <w5500_write_socket_tcp+0x394>)
    a798:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    a79a:	1dfb      	adds	r3, r7, #7
    a79c:	781b      	ldrb	r3, [r3, #0]
    a79e:	015b      	lsls	r3, r3, #5
    a7a0:	b21b      	sxth	r3, r3
    a7a2:	2210      	movs	r2, #16
    a7a4:	4313      	orrs	r3, r2
    a7a6:	b21b      	sxth	r3, r3
    a7a8:	b29a      	uxth	r2, r3
    a7aa:	4b92      	ldr	r3, [pc, #584]	; (a9f4 <w5500_write_socket_tcp+0x398>)
    a7ac:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    a7ae:	1dfb      	adds	r3, r7, #7
    a7b0:	781b      	ldrb	r3, [r3, #0]
    a7b2:	4a97      	ldr	r2, [pc, #604]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a7b4:	4353      	muls	r3, r2
    a7b6:	3308      	adds	r3, #8
    a7b8:	001a      	movs	r2, r3
    a7ba:	4b94      	ldr	r3, [pc, #592]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a7bc:	18d2      	adds	r2, r2, r3
    a7be:	4b8f      	ldr	r3, [pc, #572]	; (a9fc <w5500_write_socket_tcp+0x3a0>)
    a7c0:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    a7c2:	1dfb      	adds	r3, r7, #7
    a7c4:	781b      	ldrb	r3, [r3, #0]
    a7c6:	4a91      	ldr	r2, [pc, #580]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a7c8:	4991      	ldr	r1, [pc, #580]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a7ca:	434b      	muls	r3, r1
    a7cc:	18d3      	adds	r3, r2, r3
    a7ce:	3306      	adds	r3, #6
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	021b      	lsls	r3, r3, #8
    a7d4:	b21a      	sxth	r2, r3
    a7d6:	1dfb      	adds	r3, r7, #7
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	498c      	ldr	r1, [pc, #560]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a7dc:	488c      	ldr	r0, [pc, #560]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a7de:	4343      	muls	r3, r0
    a7e0:	18cb      	adds	r3, r1, r3
    a7e2:	3307      	adds	r3, #7
    a7e4:	781b      	ldrb	r3, [r3, #0]
    a7e6:	b21b      	sxth	r3, r3
    a7e8:	4313      	orrs	r3, r2
    a7ea:	b21b      	sxth	r3, r3
    a7ec:	b29a      	uxth	r2, r3
    a7ee:	4b84      	ldr	r3, [pc, #528]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a7f0:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    a7f2:	1dfb      	adds	r3, r7, #7
    a7f4:	7819      	ldrb	r1, [r3, #0]
    a7f6:	1dfb      	adds	r3, r7, #7
    a7f8:	781a      	ldrb	r2, [r3, #0]
    a7fa:	4884      	ldr	r0, [pc, #528]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a7fc:	23ba      	movs	r3, #186	; 0xba
    a7fe:	00db      	lsls	r3, r3, #3
    a800:	4c83      	ldr	r4, [pc, #524]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a802:	4362      	muls	r2, r4
    a804:	1882      	adds	r2, r0, r2
    a806:	18d3      	adds	r3, r2, r3
    a808:	795a      	ldrb	r2, [r3, #5]
    a80a:	799b      	ldrb	r3, [r3, #6]
    a80c:	021b      	lsls	r3, r3, #8
    a80e:	4313      	orrs	r3, r2
    a810:	b29a      	uxth	r2, r3
    a812:	4b7b      	ldr	r3, [pc, #492]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a814:	881b      	ldrh	r3, [r3, #0]
    a816:	18d3      	adds	r3, r2, r3
    a818:	b29a      	uxth	r2, r3
    a81a:	487c      	ldr	r0, [pc, #496]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a81c:	23ba      	movs	r3, #186	; 0xba
    a81e:	00db      	lsls	r3, r3, #3
    a820:	4c7b      	ldr	r4, [pc, #492]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a822:	4361      	muls	r1, r4
    a824:	1841      	adds	r1, r0, r1
    a826:	18cb      	adds	r3, r1, r3
    a828:	3305      	adds	r3, #5
    a82a:	21ff      	movs	r1, #255	; 0xff
    a82c:	4011      	ands	r1, r2
    a82e:	000c      	movs	r4, r1
    a830:	7819      	ldrb	r1, [r3, #0]
    a832:	2000      	movs	r0, #0
    a834:	4001      	ands	r1, r0
    a836:	1c08      	adds	r0, r1, #0
    a838:	1c21      	adds	r1, r4, #0
    a83a:	4301      	orrs	r1, r0
    a83c:	7019      	strb	r1, [r3, #0]
    a83e:	0a12      	lsrs	r2, r2, #8
    a840:	b290      	uxth	r0, r2
    a842:	785a      	ldrb	r2, [r3, #1]
    a844:	2100      	movs	r1, #0
    a846:	400a      	ands	r2, r1
    a848:	1c11      	adds	r1, r2, #0
    a84a:	1c02      	adds	r2, r0, #0
    a84c:	430a      	orrs	r2, r1
    a84e:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    a850:	4b6c      	ldr	r3, [pc, #432]	; (aa04 <w5500_write_socket_tcp+0x3a8>)
    a852:	2202      	movs	r2, #2
    a854:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a856:	4b64      	ldr	r3, [pc, #400]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a858:	781b      	ldrb	r3, [r3, #0]
    a85a:	3301      	adds	r3, #1
    a85c:	b2da      	uxtb	r2, r3
    a85e:	4b62      	ldr	r3, [pc, #392]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a860:	701a      	strb	r2, [r3, #0]
		break;
    a862:	e138      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
		case TCP_PTR_WR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    a864:	230e      	movs	r3, #14
    a866:	18fb      	adds	r3, r7, r3
    a868:	881a      	ldrh	r2, [r3, #0]
    a86a:	1dfb      	adds	r3, r7, #7
    a86c:	7819      	ldrb	r1, [r3, #0]
    a86e:	4867      	ldr	r0, [pc, #412]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a870:	23ba      	movs	r3, #186	; 0xba
    a872:	00db      	lsls	r3, r3, #3
    a874:	4c66      	ldr	r4, [pc, #408]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a876:	4361      	muls	r1, r4
    a878:	1841      	adds	r1, r0, r1
    a87a:	18cb      	adds	r3, r1, r3
    a87c:	7959      	ldrb	r1, [r3, #5]
    a87e:	799b      	ldrb	r3, [r3, #6]
    a880:	021b      	lsls	r3, r3, #8
    a882:	430b      	orrs	r3, r1
    a884:	b29b      	uxth	r3, r3
    a886:	0a1b      	lsrs	r3, r3, #8
    a888:	b29b      	uxth	r3, r3
    a88a:	b2d9      	uxtb	r1, r3
    a88c:	4b61      	ldr	r3, [pc, #388]	; (aa14 <w5500_write_socket_tcp+0x3b8>)
    a88e:	5499      	strb	r1, [r3, r2]
    a890:	230e      	movs	r3, #14
    a892:	18fb      	adds	r3, r7, r3
    a894:	881a      	ldrh	r2, [r3, #0]
    a896:	230e      	movs	r3, #14
    a898:	18fb      	adds	r3, r7, r3
    a89a:	3201      	adds	r2, #1
    a89c:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    a89e:	230e      	movs	r3, #14
    a8a0:	18fb      	adds	r3, r7, r3
    a8a2:	881a      	ldrh	r2, [r3, #0]
    a8a4:	1dfb      	adds	r3, r7, #7
    a8a6:	7819      	ldrb	r1, [r3, #0]
    a8a8:	4858      	ldr	r0, [pc, #352]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a8aa:	23ba      	movs	r3, #186	; 0xba
    a8ac:	00db      	lsls	r3, r3, #3
    a8ae:	4c58      	ldr	r4, [pc, #352]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a8b0:	4361      	muls	r1, r4
    a8b2:	1841      	adds	r1, r0, r1
    a8b4:	18cb      	adds	r3, r1, r3
    a8b6:	7959      	ldrb	r1, [r3, #5]
    a8b8:	799b      	ldrb	r3, [r3, #6]
    a8ba:	021b      	lsls	r3, r3, #8
    a8bc:	430b      	orrs	r3, r1
    a8be:	b29b      	uxth	r3, r3
    a8c0:	b2d9      	uxtb	r1, r3
    a8c2:	4b54      	ldr	r3, [pc, #336]	; (aa14 <w5500_write_socket_tcp+0x3b8>)
    a8c4:	5499      	strb	r1, [r3, r2]
    a8c6:	230e      	movs	r3, #14
    a8c8:	18fb      	adds	r3, r7, r3
    a8ca:	881a      	ldrh	r2, [r3, #0]
    a8cc:	230e      	movs	r3, #14
    a8ce:	18fb      	adds	r3, r7, r3
    a8d0:	3201      	adds	r2, #1
    a8d2:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    a8d4:	4b46      	ldr	r3, [pc, #280]	; (a9f0 <w5500_write_socket_tcp+0x394>)
    a8d6:	2224      	movs	r2, #36	; 0x24
    a8d8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a8da:	1dfb      	adds	r3, r7, #7
    a8dc:	781b      	ldrb	r3, [r3, #0]
    a8de:	015b      	lsls	r3, r3, #5
    a8e0:	b21b      	sxth	r3, r3
    a8e2:	2208      	movs	r2, #8
    a8e4:	4313      	orrs	r3, r2
    a8e6:	b21b      	sxth	r3, r3
    a8e8:	b29a      	uxth	r2, r3
    a8ea:	4b42      	ldr	r3, [pc, #264]	; (a9f4 <w5500_write_socket_tcp+0x398>)
    a8ec:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a8ee:	4b43      	ldr	r3, [pc, #268]	; (a9fc <w5500_write_socket_tcp+0x3a0>)
    a8f0:	4a48      	ldr	r2, [pc, #288]	; (aa14 <w5500_write_socket_tcp+0x3b8>)
    a8f2:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a8f4:	4b42      	ldr	r3, [pc, #264]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a8f6:	220e      	movs	r2, #14
    a8f8:	18ba      	adds	r2, r7, r2
    a8fa:	8812      	ldrh	r2, [r2, #0]
    a8fc:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a8fe:	4b41      	ldr	r3, [pc, #260]	; (aa04 <w5500_write_socket_tcp+0x3a8>)
    a900:	2202      	movs	r2, #2
    a902:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a904:	4b38      	ldr	r3, [pc, #224]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a906:	781b      	ldrb	r3, [r3, #0]
    a908:	3301      	adds	r3, #1
    a90a:	b2da      	uxtb	r2, r3
    a90c:	4b36      	ldr	r3, [pc, #216]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a90e:	701a      	strb	r2, [r3, #0]
		break;
    a910:	e0e1      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
		case TCP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    a912:	230e      	movs	r3, #14
    a914:	18fb      	adds	r3, r7, r3
    a916:	881b      	ldrh	r3, [r3, #0]
    a918:	4a3e      	ldr	r2, [pc, #248]	; (aa14 <w5500_write_socket_tcp+0x3b8>)
    a91a:	2120      	movs	r1, #32
    a91c:	54d1      	strb	r1, [r2, r3]
    a91e:	230e      	movs	r3, #14
    a920:	18fb      	adds	r3, r7, r3
    a922:	881a      	ldrh	r2, [r3, #0]
    a924:	230e      	movs	r3, #14
    a926:	18fb      	adds	r3, r7, r3
    a928:	3201      	adds	r2, #1
    a92a:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a92c:	4b30      	ldr	r3, [pc, #192]	; (a9f0 <w5500_write_socket_tcp+0x394>)
    a92e:	2201      	movs	r2, #1
    a930:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a932:	1dfb      	adds	r3, r7, #7
    a934:	781b      	ldrb	r3, [r3, #0]
    a936:	015b      	lsls	r3, r3, #5
    a938:	b21b      	sxth	r3, r3
    a93a:	2208      	movs	r2, #8
    a93c:	4313      	orrs	r3, r2
    a93e:	b21b      	sxth	r3, r3
    a940:	b29a      	uxth	r2, r3
    a942:	4b2c      	ldr	r3, [pc, #176]	; (a9f4 <w5500_write_socket_tcp+0x398>)
    a944:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a946:	4b2d      	ldr	r3, [pc, #180]	; (a9fc <w5500_write_socket_tcp+0x3a0>)
    a948:	4a32      	ldr	r2, [pc, #200]	; (aa14 <w5500_write_socket_tcp+0x3b8>)
    a94a:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a94c:	4b2c      	ldr	r3, [pc, #176]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a94e:	220e      	movs	r2, #14
    a950:	18ba      	adds	r2, r7, r2
    a952:	8812      	ldrh	r2, [r2, #0]
    a954:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a956:	4b2b      	ldr	r3, [pc, #172]	; (aa04 <w5500_write_socket_tcp+0x3a8>)
    a958:	2202      	movs	r2, #2
    a95a:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a95c:	4b22      	ldr	r3, [pc, #136]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	3301      	adds	r3, #1
    a962:	b2da      	uxtb	r2, r3
    a964:	4b20      	ldr	r3, [pc, #128]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a966:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a968:	1dfb      	adds	r3, r7, #7
    a96a:	781a      	ldrb	r2, [r3, #0]
    a96c:	4927      	ldr	r1, [pc, #156]	; (aa0c <w5500_write_socket_tcp+0x3b0>)
    a96e:	23bc      	movs	r3, #188	; 0xbc
    a970:	00db      	lsls	r3, r3, #3
    a972:	4827      	ldr	r0, [pc, #156]	; (aa10 <w5500_write_socket_tcp+0x3b4>)
    a974:	4342      	muls	r2, r0
    a976:	188a      	adds	r2, r1, r2
    a978:	18d3      	adds	r3, r2, r3
    a97a:	3303      	adds	r3, #3
    a97c:	781a      	ldrb	r2, [r3, #0]
    a97e:	2100      	movs	r1, #0
    a980:	400a      	ands	r2, r1
    a982:	1c11      	adds	r1, r2, #0
    a984:	224c      	movs	r2, #76	; 0x4c
    a986:	430a      	orrs	r2, r1
    a988:	701a      	strb	r2, [r3, #0]
    a98a:	785a      	ldrb	r2, [r3, #1]
    a98c:	2100      	movs	r1, #0
    a98e:	400a      	ands	r2, r1
    a990:	1c11      	adds	r1, r2, #0
    a992:	221d      	movs	r2, #29
    a994:	430a      	orrs	r2, r1
    a996:	705a      	strb	r2, [r3, #1]
		break;
    a998:	e09d      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
		case TCP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    a99a:	4b15      	ldr	r3, [pc, #84]	; (a9f0 <w5500_write_socket_tcp+0x394>)
    a99c:	2202      	movs	r2, #2
    a99e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a9a0:	1dfb      	adds	r3, r7, #7
    a9a2:	781b      	ldrb	r3, [r3, #0]
    a9a4:	015b      	lsls	r3, r3, #5
    a9a6:	b21b      	sxth	r3, r3
    a9a8:	2208      	movs	r2, #8
    a9aa:	4313      	orrs	r3, r2
    a9ac:	b21b      	sxth	r3, r3
    a9ae:	b29a      	uxth	r2, r3
    a9b0:	4b10      	ldr	r3, [pc, #64]	; (a9f4 <w5500_write_socket_tcp+0x398>)
    a9b2:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a9b4:	1dfb      	adds	r3, r7, #7
    a9b6:	781b      	ldrb	r3, [r3, #0]
    a9b8:	015b      	lsls	r3, r3, #5
    a9ba:	3310      	adds	r3, #16
    a9bc:	001a      	movs	r2, r3
    a9be:	4b0e      	ldr	r3, [pc, #56]	; (a9f8 <w5500_write_socket_tcp+0x39c>)
    a9c0:	18d3      	adds	r3, r2, r3
    a9c2:	1d5a      	adds	r2, r3, #5
    a9c4:	4b0d      	ldr	r3, [pc, #52]	; (a9fc <w5500_write_socket_tcp+0x3a0>)
    a9c6:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a9c8:	4b0d      	ldr	r3, [pc, #52]	; (aa00 <w5500_write_socket_tcp+0x3a4>)
    a9ca:	2201      	movs	r2, #1
    a9cc:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a9ce:	4b0d      	ldr	r3, [pc, #52]	; (aa04 <w5500_write_socket_tcp+0x3a8>)
    a9d0:	2201      	movs	r2, #1
    a9d2:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a9d4:	4b04      	ldr	r3, [pc, #16]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a9d6:	781b      	ldrb	r3, [r3, #0]
    a9d8:	3301      	adds	r3, #1
    a9da:	b2da      	uxtb	r2, r3
    a9dc:	4b02      	ldr	r3, [pc, #8]	; (a9e8 <w5500_write_socket_tcp+0x38c>)
    a9de:	701a      	strb	r2, [r3, #0]
		break;
    a9e0:	e079      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	20000499 	.word	0x20000499
    a9e8:	2000049a 	.word	0x2000049a
    a9ec:	0000cbd4 	.word	0x0000cbd4
    a9f0:	20000480 	.word	0x20000480
    a9f4:	20000482 	.word	0x20000482
    a9f8:	20003b04 	.word	0x20003b04
    a9fc:	20003afc 	.word	0x20003afc
    aa00:	20000484 	.word	0x20000484
    aa04:	20003bb7 	.word	0x20003bb7
    aa08:	20000486 	.word	0x20000486
    aa0c:	200005cc 	.word	0x200005cc
    aa10:	000005e5 	.word	0x000005e5
    aa14:	20003bb8 	.word	0x20003bb8
		case TCP_STATUS_CLR:																//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    aa18:	1dfb      	adds	r3, r7, #7
    aa1a:	781b      	ldrb	r3, [r3, #0]
    aa1c:	4a30      	ldr	r2, [pc, #192]	; (aae0 <w5500_write_socket_tcp+0x484>)
    aa1e:	2110      	movs	r1, #16
    aa20:	015b      	lsls	r3, r3, #5
    aa22:	18d3      	adds	r3, r2, r3
    aa24:	185b      	adds	r3, r3, r1
    aa26:	795b      	ldrb	r3, [r3, #5]
    aa28:	06db      	lsls	r3, r3, #27
    aa2a:	0fdb      	lsrs	r3, r3, #31
    aa2c:	b2db      	uxtb	r3, r3
    aa2e:	2b01      	cmp	r3, #1
    aa30:	d12b      	bne.n	aa8a <w5500_write_socket_tcp+0x42e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    aa32:	230e      	movs	r3, #14
    aa34:	18fb      	adds	r3, r7, r3
    aa36:	881b      	ldrh	r3, [r3, #0]
    aa38:	4a2a      	ldr	r2, [pc, #168]	; (aae4 <w5500_write_socket_tcp+0x488>)
    aa3a:	2110      	movs	r1, #16
    aa3c:	54d1      	strb	r1, [r2, r3]
    aa3e:	230e      	movs	r3, #14
    aa40:	18fb      	adds	r3, r7, r3
    aa42:	881a      	ldrh	r2, [r3, #0]
    aa44:	230e      	movs	r3, #14
    aa46:	18fb      	adds	r3, r7, r3
    aa48:	3201      	adds	r2, #1
    aa4a:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    aa4c:	4b26      	ldr	r3, [pc, #152]	; (aae8 <w5500_write_socket_tcp+0x48c>)
    aa4e:	2202      	movs	r2, #2
    aa50:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    aa52:	1dfb      	adds	r3, r7, #7
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	015b      	lsls	r3, r3, #5
    aa58:	b21b      	sxth	r3, r3
    aa5a:	2208      	movs	r2, #8
    aa5c:	4313      	orrs	r3, r2
    aa5e:	b21b      	sxth	r3, r3
    aa60:	b29a      	uxth	r2, r3
    aa62:	4b22      	ldr	r3, [pc, #136]	; (aaec <w5500_write_socket_tcp+0x490>)
    aa64:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    aa66:	4b22      	ldr	r3, [pc, #136]	; (aaf0 <w5500_write_socket_tcp+0x494>)
    aa68:	4a1e      	ldr	r2, [pc, #120]	; (aae4 <w5500_write_socket_tcp+0x488>)
    aa6a:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    aa6c:	4b21      	ldr	r3, [pc, #132]	; (aaf4 <w5500_write_socket_tcp+0x498>)
    aa6e:	220e      	movs	r2, #14
    aa70:	18ba      	adds	r2, r7, r2
    aa72:	8812      	ldrh	r2, [r2, #0]
    aa74:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    aa76:	4b20      	ldr	r3, [pc, #128]	; (aaf8 <w5500_write_socket_tcp+0x49c>)
    aa78:	2202      	movs	r2, #2
    aa7a:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    aa7c:	4b1f      	ldr	r3, [pc, #124]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	3301      	adds	r3, #1
    aa82:	b2da      	uxtb	r2, r3
    aa84:	4b1d      	ldr	r3, [pc, #116]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aa86:	701a      	strb	r2, [r3, #0]
				break;
    aa88:	e025      	b.n	aad6 <w5500_write_socket_tcp+0x47a>
			}
			st_wr_w5500--;
    aa8a:	4b1c      	ldr	r3, [pc, #112]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aa8c:	781b      	ldrb	r3, [r3, #0]
    aa8e:	3b01      	subs	r3, #1
    aa90:	b2da      	uxtb	r2, r3
    aa92:	4b1a      	ldr	r3, [pc, #104]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aa94:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    aa96:	1dfb      	adds	r3, r7, #7
    aa98:	781a      	ldrb	r2, [r3, #0]
    aa9a:	4919      	ldr	r1, [pc, #100]	; (ab00 <w5500_write_socket_tcp+0x4a4>)
    aa9c:	23bc      	movs	r3, #188	; 0xbc
    aa9e:	00db      	lsls	r3, r3, #3
    aaa0:	4818      	ldr	r0, [pc, #96]	; (ab04 <w5500_write_socket_tcp+0x4a8>)
    aaa2:	4342      	muls	r2, r0
    aaa4:	188a      	adds	r2, r1, r2
    aaa6:	18d3      	adds	r3, r2, r3
    aaa8:	78da      	ldrb	r2, [r3, #3]
    aaaa:	791b      	ldrb	r3, [r3, #4]
    aaac:	021b      	lsls	r3, r3, #8
    aaae:	4313      	orrs	r3, r2
    aab0:	b29b      	uxth	r3, r3
    aab2:	2b00      	cmp	r3, #0
    aab4:	d10e      	bne.n	aad4 <w5500_write_socket_tcp+0x478>
			{
				st_wr_w5500=TCP_RD_FSR; 
    aab6:	4b11      	ldr	r3, [pc, #68]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aab8:	2200      	movs	r2, #0
    aaba:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    aabc:	2302      	movs	r3, #2
    aabe:	e00b      	b.n	aad8 <w5500_write_socket_tcp+0x47c>
			}
		break;
		case TCP_BK_TO_START:
			st_wr_w5500=TCP_RD_FSR;
    aac0:	4b0e      	ldr	r3, [pc, #56]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aac2:	2200      	movs	r2, #0
    aac4:	701a      	strb	r2, [r3, #0]
			return PROC_OK;
    aac6:	2301      	movs	r3, #1
    aac8:	e006      	b.n	aad8 <w5500_write_socket_tcp+0x47c>
		break;
		default:
			st_wr_w5500=TCP_RD_FSR; return PROC_ER;
    aaca:	4b0c      	ldr	r3, [pc, #48]	; (aafc <w5500_write_socket_tcp+0x4a0>)
    aacc:	2200      	movs	r2, #0
    aace:	701a      	strb	r2, [r3, #0]
    aad0:	2302      	movs	r3, #2
    aad2:	e001      	b.n	aad8 <w5500_write_socket_tcp+0x47c>
		break;
    aad4:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    aad6:	2300      	movs	r3, #0
}
    aad8:	0018      	movs	r0, r3
    aada:	46bd      	mov	sp, r7
    aadc:	b005      	add	sp, #20
    aade:	bd90      	pop	{r4, r7, pc}
    aae0:	20003b04 	.word	0x20003b04
    aae4:	20003bb8 	.word	0x20003bb8
    aae8:	20000480 	.word	0x20000480
    aaec:	20000482 	.word	0x20000482
    aaf0:	20003afc 	.word	0x20003afc
    aaf4:	20000484 	.word	0x20000484
    aaf8:	20003bb7 	.word	0x20003bb7
    aafc:	2000049a 	.word	0x2000049a
    ab00:	200005cc 	.word	0x200005cc
    ab04:	000005e5 	.word	0x000005e5

0000ab08 <cfg_init>:

BYTE cfg_2_err = 1;

void cfg_init(void)
//--------------------------------------------------------------------------
{
    ab08:	b580      	push	{r7, lr}
    ab0a:	af00      	add	r7, sp, #0
	memset(&cfg_1    ,0x00,sizeof(CFG_1));
    ab0c:	2380      	movs	r3, #128	; 0x80
    ab0e:	005a      	lsls	r2, r3, #1
    ab10:	4b07      	ldr	r3, [pc, #28]	; (ab30 <cfg_init+0x28>)
    ab12:	2100      	movs	r1, #0
    ab14:	0018      	movs	r0, r3
    ab16:	4b07      	ldr	r3, [pc, #28]	; (ab34 <cfg_init+0x2c>)
    ab18:	4798      	blx	r3
	memset(&cfg_1_tmp,0x00,sizeof(CFG_1));
    ab1a:	2380      	movs	r3, #128	; 0x80
    ab1c:	005a      	lsls	r2, r3, #1
    ab1e:	4b06      	ldr	r3, [pc, #24]	; (ab38 <cfg_init+0x30>)
    ab20:	2100      	movs	r1, #0
    ab22:	0018      	movs	r0, r3
    ab24:	4b03      	ldr	r3, [pc, #12]	; (ab34 <cfg_init+0x2c>)
    ab26:	4798      	blx	r3
}
    ab28:	46c0      	nop			; (mov r8, r8)
    ab2a:	46bd      	mov	sp, r7
    ab2c:	bd80      	pop	{r7, pc}
    ab2e:	46c0      	nop			; (mov r8, r8)
    ab30:	20003dc4 	.word	0x20003dc4
    ab34:	0000c8a9 	.word	0x0000c8a9
    ab38:	20003cc4 	.word	0x20003cc4

0000ab3c <cfg_read>:

WORD cfg_read(void)
//--------------------------------------------------------------------------
{
    ab3c:	b590      	push	{r4, r7, lr}
    ab3e:	b083      	sub	sp, #12
    ab40:	af00      	add	r7, sp, #0
	WORD size = 0;
    ab42:	1dbb      	adds	r3, r7, #6
    ab44:	2200      	movs	r2, #0
    ab46:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_1_ADDR,&cfg_1,sizeof(CFG_1));
    ab48:	1dbc      	adds	r4, r7, #6
    ab4a:	2380      	movs	r3, #128	; 0x80
    ab4c:	005a      	lsls	r2, r3, #1
    ab4e:	4910      	ldr	r1, [pc, #64]	; (ab90 <cfg_read+0x54>)
    ab50:	23fc      	movs	r3, #252	; 0xfc
    ab52:	029b      	lsls	r3, r3, #10
    ab54:	0018      	movs	r0, r3
    ab56:	4b0f      	ldr	r3, [pc, #60]	; (ab94 <cfg_read+0x58>)
    ab58:	4798      	blx	r3
    ab5a:	0003      	movs	r3, r0
    ab5c:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_1)) {return(CFG_ERR);}
    ab5e:	1dbb      	adds	r3, r7, #6
    ab60:	881a      	ldrh	r2, [r3, #0]
    ab62:	2380      	movs	r3, #128	; 0x80
    ab64:	005b      	lsls	r3, r3, #1
    ab66:	429a      	cmp	r2, r3
    ab68:	d001      	beq.n	ab6e <cfg_read+0x32>
    ab6a:	2300      	movs	r3, #0
    ab6c:	e00b      	b.n	ab86 <cfg_read+0x4a>

	if(crc16_ccit((BYTE*)&cfg_1,sizeof(CFG_1))!=0){return(CFG_ERR);}
    ab6e:	2380      	movs	r3, #128	; 0x80
    ab70:	005a      	lsls	r2, r3, #1
    ab72:	4b07      	ldr	r3, [pc, #28]	; (ab90 <cfg_read+0x54>)
    ab74:	0011      	movs	r1, r2
    ab76:	0018      	movs	r0, r3
    ab78:	4b07      	ldr	r3, [pc, #28]	; (ab98 <cfg_read+0x5c>)
    ab7a:	4798      	blx	r3
    ab7c:	1e03      	subs	r3, r0, #0
    ab7e:	d001      	beq.n	ab84 <cfg_read+0x48>
    ab80:	2300      	movs	r3, #0
    ab82:	e000      	b.n	ab86 <cfg_read+0x4a>

	return(CFG_OK);
    ab84:	2301      	movs	r3, #1
}
    ab86:	0018      	movs	r0, r3
    ab88:	46bd      	mov	sp, r7
    ab8a:	b003      	add	sp, #12
    ab8c:	bd90      	pop	{r4, r7, pc}
    ab8e:	46c0      	nop			; (mov r8, r8)
    ab90:	20003dc4 	.word	0x20003dc4
    ab94:	00006939 	.word	0x00006939
    ab98:	00005d39 	.word	0x00005d39

0000ab9c <cfg_2_read>:

WORD cfg_2_read(void)
//--------------------------------------------------------------------------
{
    ab9c:	b590      	push	{r4, r7, lr}
    ab9e:	b083      	sub	sp, #12
    aba0:	af00      	add	r7, sp, #0
	WORD size = 0;
    aba2:	1dbb      	adds	r3, r7, #6
    aba4:	2200      	movs	r2, #0
    aba6:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_2_ADDR,&cfg_2,sizeof(CFG_2));
    aba8:	1dbc      	adds	r4, r7, #6
    abaa:	2380      	movs	r3, #128	; 0x80
    abac:	005a      	lsls	r2, r3, #1
    abae:	4b0f      	ldr	r3, [pc, #60]	; (abec <cfg_2_read+0x50>)
    abb0:	480f      	ldr	r0, [pc, #60]	; (abf0 <cfg_2_read+0x54>)
    abb2:	0019      	movs	r1, r3
    abb4:	4b0f      	ldr	r3, [pc, #60]	; (abf4 <cfg_2_read+0x58>)
    abb6:	4798      	blx	r3
    abb8:	0003      	movs	r3, r0
    abba:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_2)) {return(CFG_ERR);}
    abbc:	1dbb      	adds	r3, r7, #6
    abbe:	881a      	ldrh	r2, [r3, #0]
    abc0:	2380      	movs	r3, #128	; 0x80
    abc2:	005b      	lsls	r3, r3, #1
    abc4:	429a      	cmp	r2, r3
    abc6:	d001      	beq.n	abcc <cfg_2_read+0x30>
    abc8:	2300      	movs	r3, #0
    abca:	e00b      	b.n	abe4 <cfg_2_read+0x48>

	if(crc16_ccit((BYTE*)&cfg_2,sizeof(CFG_2))!=0){return(CFG_ERR);}
    abcc:	2380      	movs	r3, #128	; 0x80
    abce:	005a      	lsls	r2, r3, #1
    abd0:	4b06      	ldr	r3, [pc, #24]	; (abec <cfg_2_read+0x50>)
    abd2:	0011      	movs	r1, r2
    abd4:	0018      	movs	r0, r3
    abd6:	4b08      	ldr	r3, [pc, #32]	; (abf8 <cfg_2_read+0x5c>)
    abd8:	4798      	blx	r3
    abda:	1e03      	subs	r3, r0, #0
    abdc:	d001      	beq.n	abe2 <cfg_2_read+0x46>
    abde:	2300      	movs	r3, #0
    abe0:	e000      	b.n	abe4 <cfg_2_read+0x48>

	return(CFG_OK);
    abe2:	2301      	movs	r3, #1
}
    abe4:	0018      	movs	r0, r3
    abe6:	46bd      	mov	sp, r7
    abe8:	b003      	add	sp, #12
    abea:	bd90      	pop	{r4, r7, pc}
    abec:	20003bc4 	.word	0x20003bc4
    abf0:	0003f100 	.word	0x0003f100
    abf4:	00006939 	.word	0x00006939
    abf8:	00005d39 	.word	0x00005d39

0000abfc <cfg_default>:

void cfg_default(void)
//--------------------------------------------------------------------------
{
    abfc:	b5b0      	push	{r4, r5, r7, lr}
    abfe:	b082      	sub	sp, #8
    ac00:	af00      	add	r7, sp, #0
	WORD  i=0;
    ac02:	1dbb      	adds	r3, r7, #6
    ac04:	2200      	movs	r2, #0
    ac06:	801a      	strh	r2, [r3, #0]

	cfg_1.guid = 0xFAC6097A;
    ac08:	4bbc      	ldr	r3, [pc, #752]	; (aefc <cfg_default+0x300>)
    ac0a:	781a      	ldrb	r2, [r3, #0]
    ac0c:	2100      	movs	r1, #0
    ac0e:	400a      	ands	r2, r1
    ac10:	1c11      	adds	r1, r2, #0
    ac12:	227a      	movs	r2, #122	; 0x7a
    ac14:	430a      	orrs	r2, r1
    ac16:	701a      	strb	r2, [r3, #0]
    ac18:	785a      	ldrb	r2, [r3, #1]
    ac1a:	2100      	movs	r1, #0
    ac1c:	400a      	ands	r2, r1
    ac1e:	1c11      	adds	r1, r2, #0
    ac20:	2209      	movs	r2, #9
    ac22:	430a      	orrs	r2, r1
    ac24:	705a      	strb	r2, [r3, #1]
    ac26:	789a      	ldrb	r2, [r3, #2]
    ac28:	2100      	movs	r1, #0
    ac2a:	400a      	ands	r2, r1
    ac2c:	1c11      	adds	r1, r2, #0
    ac2e:	223a      	movs	r2, #58	; 0x3a
    ac30:	4252      	negs	r2, r2
    ac32:	430a      	orrs	r2, r1
    ac34:	709a      	strb	r2, [r3, #2]
    ac36:	78da      	ldrb	r2, [r3, #3]
    ac38:	2100      	movs	r1, #0
    ac3a:	400a      	ands	r2, r1
    ac3c:	1c11      	adds	r1, r2, #0
    ac3e:	2206      	movs	r2, #6
    ac40:	4252      	negs	r2, r2
    ac42:	430a      	orrs	r2, r1
    ac44:	70da      	strb	r2, [r3, #3]
	
	cfg_1.in_numb=102;
    ac46:	4bad      	ldr	r3, [pc, #692]	; (aefc <cfg_default+0x300>)
    ac48:	2268      	movs	r2, #104	; 0x68
    ac4a:	5c99      	ldrb	r1, [r3, r2]
    ac4c:	2000      	movs	r0, #0
    ac4e:	4001      	ands	r1, r0
    ac50:	1c08      	adds	r0, r1, #0
    ac52:	2166      	movs	r1, #102	; 0x66
    ac54:	4301      	orrs	r1, r0
    ac56:	5499      	strb	r1, [r3, r2]
    ac58:	189b      	adds	r3, r3, r2
    ac5a:	785a      	ldrb	r2, [r3, #1]
    ac5c:	2100      	movs	r1, #0
    ac5e:	400a      	ands	r2, r1
    ac60:	705a      	strb	r2, [r3, #1]
	
	//............................................................................

	cfg_1.com_network.src_port    = 4000;
    ac62:	4ba6      	ldr	r3, [pc, #664]	; (aefc <cfg_default+0x300>)
    ac64:	2226      	movs	r2, #38	; 0x26
    ac66:	5c99      	ldrb	r1, [r3, r2]
    ac68:	2000      	movs	r0, #0
    ac6a:	4001      	ands	r1, r0
    ac6c:	1c08      	adds	r0, r1, #0
    ac6e:	2160      	movs	r1, #96	; 0x60
    ac70:	4249      	negs	r1, r1
    ac72:	4301      	orrs	r1, r0
    ac74:	5499      	strb	r1, [r3, r2]
    ac76:	2227      	movs	r2, #39	; 0x27
    ac78:	5c99      	ldrb	r1, [r3, r2]
    ac7a:	2000      	movs	r0, #0
    ac7c:	4001      	ands	r1, r0
    ac7e:	1c08      	adds	r0, r1, #0
    ac80:	210f      	movs	r1, #15
    ac82:	4301      	orrs	r1, r0
    ac84:	5499      	strb	r1, [r3, r2]
	
	//ip 192.168.1.102 /SIPR
	cfg_1.com_network.ip_addr[0]=0xC0;//192
    ac86:	4b9d      	ldr	r3, [pc, #628]	; (aefc <cfg_default+0x300>)
    ac88:	2228      	movs	r2, #40	; 0x28
    ac8a:	21c0      	movs	r1, #192	; 0xc0
    ac8c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[1]=0xA8;//168
    ac8e:	4b9b      	ldr	r3, [pc, #620]	; (aefc <cfg_default+0x300>)
    ac90:	2229      	movs	r2, #41	; 0x29
    ac92:	21a8      	movs	r1, #168	; 0xa8
    ac94:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[2]=0x01;//1
    ac96:	4b99      	ldr	r3, [pc, #612]	; (aefc <cfg_default+0x300>)
    ac98:	222a      	movs	r2, #42	; 0x2a
    ac9a:	2101      	movs	r1, #1
    ac9c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[3]=0x65;//101
    ac9e:	4b97      	ldr	r3, [pc, #604]	; (aefc <cfg_default+0x300>)
    aca0:	222b      	movs	r2, #43	; 0x2b
    aca2:	2165      	movs	r1, #101	; 0x65
    aca4:	5499      	strb	r1, [r3, r2]

	//mask 255.255.255.0 /SUBR
	cfg_1.com_network.ip_mask[0]=0xFF;
    aca6:	4b95      	ldr	r3, [pc, #596]	; (aefc <cfg_default+0x300>)
    aca8:	222c      	movs	r2, #44	; 0x2c
    acaa:	21ff      	movs	r1, #255	; 0xff
    acac:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[1]=0xFF;
    acae:	4b93      	ldr	r3, [pc, #588]	; (aefc <cfg_default+0x300>)
    acb0:	222d      	movs	r2, #45	; 0x2d
    acb2:	21ff      	movs	r1, #255	; 0xff
    acb4:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[2]=0xFF;
    acb6:	4b91      	ldr	r3, [pc, #580]	; (aefc <cfg_default+0x300>)
    acb8:	222e      	movs	r2, #46	; 0x2e
    acba:	21ff      	movs	r1, #255	; 0xff
    acbc:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[3]=0x00;
    acbe:	4b8f      	ldr	r3, [pc, #572]	; (aefc <cfg_default+0x300>)
    acc0:	222f      	movs	r2, #47	; 0x2f
    acc2:	2100      	movs	r1, #0
    acc4:	5499      	strb	r1, [r3, r2]
	
	//gateway 192.168.1.1 /GAR
	cfg_1.com_network.ip_gate[0]=0xC0;
    acc6:	4b8d      	ldr	r3, [pc, #564]	; (aefc <cfg_default+0x300>)
    acc8:	2230      	movs	r2, #48	; 0x30
    acca:	21c0      	movs	r1, #192	; 0xc0
    accc:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[1]=0xA8;
    acce:	4b8b      	ldr	r3, [pc, #556]	; (aefc <cfg_default+0x300>)
    acd0:	2231      	movs	r2, #49	; 0x31
    acd2:	21a8      	movs	r1, #168	; 0xa8
    acd4:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[2]=0x01;
    acd6:	4b89      	ldr	r3, [pc, #548]	; (aefc <cfg_default+0x300>)
    acd8:	2232      	movs	r2, #50	; 0x32
    acda:	2101      	movs	r1, #1
    acdc:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[3]=0x01;
    acde:	4b87      	ldr	r3, [pc, #540]	; (aefc <cfg_default+0x300>)
    ace0:	2233      	movs	r2, #51	; 0x33
    ace2:	2101      	movs	r1, #1
    ace4:	5499      	strb	r1, [r3, r2]
	
	memcpy(cfg_1.name, NAME, sizeof(NAME));
    ace6:	4986      	ldr	r1, [pc, #536]	; (af00 <cfg_default+0x304>)
    ace8:	4b86      	ldr	r3, [pc, #536]	; (af04 <cfg_default+0x308>)
    acea:	220c      	movs	r2, #12
    acec:	0018      	movs	r0, r3
    acee:	4b86      	ldr	r3, [pc, #536]	; (af08 <cfg_default+0x30c>)
    acf0:	4798      	blx	r3
	cfg_1.name[sizeof(NAME) + 1] = 0x00;
    acf2:	4b82      	ldr	r3, [pc, #520]	; (aefc <cfg_default+0x300>)
    acf4:	2200      	movs	r2, #0
    acf6:	745a      	strb	r2, [r3, #17]
	
	//...........................................................................
	for(i=0;i<4;++i)
    acf8:	1dbb      	adds	r3, r7, #6
    acfa:	2200      	movs	r2, #0
    acfc:	801a      	strh	r2, [r3, #0]
    acfe:	e0d0      	b.n	aea2 <cfg_default+0x2a6>
	{
		cfg_1.sock_rs485[i].mode		= UDP;
    ad00:	1dbb      	adds	r3, r7, #6
    ad02:	881a      	ldrh	r2, [r3, #0]
    ad04:	497d      	ldr	r1, [pc, #500]	; (aefc <cfg_default+0x300>)
    ad06:	2035      	movs	r0, #53	; 0x35
    ad08:	0013      	movs	r3, r2
    ad0a:	005b      	lsls	r3, r3, #1
    ad0c:	189b      	adds	r3, r3, r2
    ad0e:	009b      	lsls	r3, r3, #2
    ad10:	189b      	adds	r3, r3, r2
    ad12:	18cb      	adds	r3, r1, r3
    ad14:	181b      	adds	r3, r3, r0
    ad16:	2201      	movs	r2, #1
    ad18:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].pl			= GATE;
    ad1a:	1dbb      	adds	r3, r7, #6
    ad1c:	881a      	ldrh	r2, [r3, #0]
    ad1e:	4977      	ldr	r1, [pc, #476]	; (aefc <cfg_default+0x300>)
    ad20:	2036      	movs	r0, #54	; 0x36
    ad22:	0013      	movs	r3, r2
    ad24:	005b      	lsls	r3, r3, #1
    ad26:	189b      	adds	r3, r3, r2
    ad28:	009b      	lsls	r3, r3, #2
    ad2a:	189b      	adds	r3, r3, r2
    ad2c:	18cb      	adds	r3, r1, r3
    ad2e:	181b      	adds	r3, r3, r0
    ad30:	2201      	movs	r2, #1
    ad32:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].en			= FALSE;
    ad34:	1dbb      	adds	r3, r7, #6
    ad36:	881a      	ldrh	r2, [r3, #0]
    ad38:	4970      	ldr	r1, [pc, #448]	; (aefc <cfg_default+0x300>)
    ad3a:	2034      	movs	r0, #52	; 0x34
    ad3c:	0013      	movs	r3, r2
    ad3e:	005b      	lsls	r3, r3, #1
    ad40:	189b      	adds	r3, r3, r2
    ad42:	009b      	lsls	r3, r3, #2
    ad44:	189b      	adds	r3, r3, r2
    ad46:	18cb      	adds	r3, r1, r3
    ad48:	181b      	adds	r3, r3, r0
    ad4a:	2200      	movs	r2, #0
    ad4c:	701a      	strb	r2, [r3, #0]
		
		cfg_1.sock_rs485[i].src_port	=4001+i;
    ad4e:	1dbb      	adds	r3, r7, #6
    ad50:	881a      	ldrh	r2, [r3, #0]
    ad52:	1dbb      	adds	r3, r7, #6
    ad54:	881b      	ldrh	r3, [r3, #0]
    ad56:	496d      	ldr	r1, [pc, #436]	; (af0c <cfg_default+0x310>)
    ad58:	468c      	mov	ip, r1
    ad5a:	4463      	add	r3, ip
    ad5c:	b299      	uxth	r1, r3
    ad5e:	4867      	ldr	r0, [pc, #412]	; (aefc <cfg_default+0x300>)
    ad60:	0013      	movs	r3, r2
    ad62:	005b      	lsls	r3, r3, #1
    ad64:	189b      	adds	r3, r3, r2
    ad66:	009b      	lsls	r3, r3, #2
    ad68:	189b      	adds	r3, r3, r2
    ad6a:	18c3      	adds	r3, r0, r3
    ad6c:	3330      	adds	r3, #48	; 0x30
    ad6e:	3307      	adds	r3, #7
    ad70:	22ff      	movs	r2, #255	; 0xff
    ad72:	400a      	ands	r2, r1
    ad74:	0014      	movs	r4, r2
    ad76:	781a      	ldrb	r2, [r3, #0]
    ad78:	2000      	movs	r0, #0
    ad7a:	4002      	ands	r2, r0
    ad7c:	1c10      	adds	r0, r2, #0
    ad7e:	1c22      	adds	r2, r4, #0
    ad80:	4302      	orrs	r2, r0
    ad82:	701a      	strb	r2, [r3, #0]
    ad84:	0a0a      	lsrs	r2, r1, #8
    ad86:	b290      	uxth	r0, r2
    ad88:	785a      	ldrb	r2, [r3, #1]
    ad8a:	2100      	movs	r1, #0
    ad8c:	400a      	ands	r2, r1
    ad8e:	1c11      	adds	r1, r2, #0
    ad90:	1c02      	adds	r2, r0, #0
    ad92:	430a      	orrs	r2, r1
    ad94:	705a      	strb	r2, [r3, #1]
		
		cfg_1.sock_rs485[i].baud		=38400;
    ad96:	1dbb      	adds	r3, r7, #6
    ad98:	881a      	ldrh	r2, [r3, #0]
    ad9a:	4958      	ldr	r1, [pc, #352]	; (aefc <cfg_default+0x300>)
    ad9c:	0013      	movs	r3, r2
    ad9e:	005b      	lsls	r3, r3, #1
    ada0:	189b      	adds	r3, r3, r2
    ada2:	009b      	lsls	r3, r3, #2
    ada4:	189b      	adds	r3, r3, r2
    ada6:	18cb      	adds	r3, r1, r3
    ada8:	3330      	adds	r3, #48	; 0x30
    adaa:	3309      	adds	r3, #9
    adac:	781a      	ldrb	r2, [r3, #0]
    adae:	2100      	movs	r1, #0
    adb0:	400a      	ands	r2, r1
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	785a      	ldrb	r2, [r3, #1]
    adb6:	2100      	movs	r1, #0
    adb8:	400a      	ands	r2, r1
    adba:	1c11      	adds	r1, r2, #0
    adbc:	226a      	movs	r2, #106	; 0x6a
    adbe:	4252      	negs	r2, r2
    adc0:	430a      	orrs	r2, r1
    adc2:	705a      	strb	r2, [r3, #1]
    adc4:	789a      	ldrb	r2, [r3, #2]
    adc6:	2100      	movs	r1, #0
    adc8:	400a      	ands	r2, r1
    adca:	709a      	strb	r2, [r3, #2]
    adcc:	78da      	ldrb	r2, [r3, #3]
    adce:	2100      	movs	r1, #0
    add0:	400a      	ands	r2, r1
    add2:	70da      	strb	r2, [r3, #3]
		cfg_1.sock_rs485[i].bsize		=8;
    add4:	1dbb      	adds	r3, r7, #6
    add6:	881a      	ldrh	r2, [r3, #0]
    add8:	4948      	ldr	r1, [pc, #288]	; (aefc <cfg_default+0x300>)
    adda:	2038      	movs	r0, #56	; 0x38
    addc:	0013      	movs	r3, r2
    adde:	005b      	lsls	r3, r3, #1
    ade0:	189b      	adds	r3, r3, r2
    ade2:	009b      	lsls	r3, r3, #2
    ade4:	189b      	adds	r3, r3, r2
    ade6:	18cb      	adds	r3, r1, r3
    ade8:	181b      	adds	r3, r3, r0
    adea:	795a      	ldrb	r2, [r3, #5]
    adec:	210f      	movs	r1, #15
    adee:	438a      	bics	r2, r1
    adf0:	1c11      	adds	r1, r2, #0
    adf2:	2208      	movs	r2, #8
    adf4:	430a      	orrs	r2, r1
    adf6:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].parity		=0;
    adf8:	1dbb      	adds	r3, r7, #6
    adfa:	881a      	ldrh	r2, [r3, #0]
    adfc:	493f      	ldr	r1, [pc, #252]	; (aefc <cfg_default+0x300>)
    adfe:	2038      	movs	r0, #56	; 0x38
    ae00:	0013      	movs	r3, r2
    ae02:	005b      	lsls	r3, r3, #1
    ae04:	189b      	adds	r3, r3, r2
    ae06:	009b      	lsls	r3, r3, #2
    ae08:	189b      	adds	r3, r3, r2
    ae0a:	18cb      	adds	r3, r1, r3
    ae0c:	181b      	adds	r3, r3, r0
    ae0e:	795a      	ldrb	r2, [r3, #5]
    ae10:	2130      	movs	r1, #48	; 0x30
    ae12:	438a      	bics	r2, r1
    ae14:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].stop		=0;
    ae16:	1dbb      	adds	r3, r7, #6
    ae18:	881a      	ldrh	r2, [r3, #0]
    ae1a:	4938      	ldr	r1, [pc, #224]	; (aefc <cfg_default+0x300>)
    ae1c:	2038      	movs	r0, #56	; 0x38
    ae1e:	0013      	movs	r3, r2
    ae20:	005b      	lsls	r3, r3, #1
    ae22:	189b      	adds	r3, r3, r2
    ae24:	009b      	lsls	r3, r3, #2
    ae26:	189b      	adds	r3, r3, r2
    ae28:	18cb      	adds	r3, r1, r3
    ae2a:	181b      	adds	r3, r3, r0
    ae2c:	795a      	ldrb	r2, [r3, #5]
    ae2e:	213f      	movs	r1, #63	; 0x3f
    ae30:	400a      	ands	r2, r1
    ae32:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].tout		=100;
    ae34:	1dbb      	adds	r3, r7, #6
    ae36:	881a      	ldrh	r2, [r3, #0]
    ae38:	4930      	ldr	r1, [pc, #192]	; (aefc <cfg_default+0x300>)
    ae3a:	0013      	movs	r3, r2
    ae3c:	005b      	lsls	r3, r3, #1
    ae3e:	189b      	adds	r3, r3, r2
    ae40:	009b      	lsls	r3, r3, #2
    ae42:	189b      	adds	r3, r3, r2
    ae44:	18cb      	adds	r3, r1, r3
    ae46:	3338      	adds	r3, #56	; 0x38
    ae48:	3307      	adds	r3, #7
    ae4a:	781a      	ldrb	r2, [r3, #0]
    ae4c:	2100      	movs	r1, #0
    ae4e:	400a      	ands	r2, r1
    ae50:	1c11      	adds	r1, r2, #0
    ae52:	2264      	movs	r2, #100	; 0x64
    ae54:	430a      	orrs	r2, r1
    ae56:	701a      	strb	r2, [r3, #0]
    ae58:	785a      	ldrb	r2, [r3, #1]
    ae5a:	2100      	movs	r1, #0
    ae5c:	400a      	ands	r2, r1
    ae5e:	705a      	strb	r2, [r3, #1]
		
		memset(cfg_1.access[i].ip, 0, 4*4);
    ae60:	1dbb      	adds	r3, r7, #6
    ae62:	881a      	ldrh	r2, [r3, #0]
    ae64:	0013      	movs	r3, r2
    ae66:	00db      	lsls	r3, r3, #3
    ae68:	189b      	adds	r3, r3, r2
    ae6a:	005b      	lsls	r3, r3, #1
    ae6c:	3368      	adds	r3, #104	; 0x68
    ae6e:	001a      	movs	r2, r3
    ae70:	4b22      	ldr	r3, [pc, #136]	; (aefc <cfg_default+0x300>)
    ae72:	18d3      	adds	r3, r2, r3
    ae74:	3304      	adds	r3, #4
    ae76:	2210      	movs	r2, #16
    ae78:	2100      	movs	r1, #0
    ae7a:	0018      	movs	r0, r3
    ae7c:	4b24      	ldr	r3, [pc, #144]	; (af10 <cfg_default+0x314>)
    ae7e:	4798      	blx	r3
		cfg_1.access[i].en = 1;
    ae80:	1dbb      	adds	r3, r7, #6
    ae82:	881a      	ldrh	r2, [r3, #0]
    ae84:	491d      	ldr	r1, [pc, #116]	; (aefc <cfg_default+0x300>)
    ae86:	206a      	movs	r0, #106	; 0x6a
    ae88:	0013      	movs	r3, r2
    ae8a:	00db      	lsls	r3, r3, #3
    ae8c:	189b      	adds	r3, r3, r2
    ae8e:	005b      	lsls	r3, r3, #1
    ae90:	18cb      	adds	r3, r1, r3
    ae92:	181b      	adds	r3, r3, r0
    ae94:	2201      	movs	r2, #1
    ae96:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;++i)
    ae98:	1dbb      	adds	r3, r7, #6
    ae9a:	1dba      	adds	r2, r7, #6
    ae9c:	8812      	ldrh	r2, [r2, #0]
    ae9e:	3201      	adds	r2, #1
    aea0:	801a      	strh	r2, [r3, #0]
    aea2:	1dbb      	adds	r3, r7, #6
    aea4:	881b      	ldrh	r3, [r3, #0]
    aea6:	2b03      	cmp	r3, #3
    aea8:	d800      	bhi.n	aeac <cfg_default+0x2b0>
    aeaa:	e729      	b.n	ad00 <cfg_default+0x104>

	}
	cfg_1.cs=crc16_ccit(((BYTE *)&cfg_1),sizeof(CFG_1)-2);
    aeac:	4b13      	ldr	r3, [pc, #76]	; (aefc <cfg_default+0x300>)
    aeae:	21fe      	movs	r1, #254	; 0xfe
    aeb0:	0018      	movs	r0, r3
    aeb2:	4b18      	ldr	r3, [pc, #96]	; (af14 <cfg_default+0x318>)
    aeb4:	4798      	blx	r3
    aeb6:	0003      	movs	r3, r0
    aeb8:	0019      	movs	r1, r3
    aeba:	4b10      	ldr	r3, [pc, #64]	; (aefc <cfg_default+0x300>)
    aebc:	22fe      	movs	r2, #254	; 0xfe
    aebe:	20ff      	movs	r0, #255	; 0xff
    aec0:	4008      	ands	r0, r1
    aec2:	0005      	movs	r5, r0
    aec4:	5c98      	ldrb	r0, [r3, r2]
    aec6:	2400      	movs	r4, #0
    aec8:	4020      	ands	r0, r4
    aeca:	1c04      	adds	r4, r0, #0
    aecc:	1c28      	adds	r0, r5, #0
    aece:	4320      	orrs	r0, r4
    aed0:	5498      	strb	r0, [r3, r2]
    aed2:	0a09      	lsrs	r1, r1, #8
    aed4:	b288      	uxth	r0, r1
    aed6:	189b      	adds	r3, r3, r2
    aed8:	785a      	ldrb	r2, [r3, #1]
    aeda:	2100      	movs	r1, #0
    aedc:	400a      	ands	r2, r1
    aede:	1c11      	adds	r1, r2, #0
    aee0:	1c02      	adds	r2, r0, #0
    aee2:	430a      	orrs	r2, r1
    aee4:	705a      	strb	r2, [r3, #1]
	//..............................................................................
	cfg_save();
    aee6:	f000 f87f 	bl	afe8 <cfg_save>
	log_clear();
    aeea:	4b0b      	ldr	r3, [pc, #44]	; (af18 <cfg_default+0x31c>)
    aeec:	4798      	blx	r3
	acc(DROP);
    aeee:	2002      	movs	r0, #2
    aef0:	4b0a      	ldr	r3, [pc, #40]	; (af1c <cfg_default+0x320>)
    aef2:	4798      	blx	r3
}
    aef4:	46c0      	nop			; (mov r8, r8)
    aef6:	46bd      	mov	sp, r7
    aef8:	b002      	add	sp, #8
    aefa:	bdb0      	pop	{r4, r5, r7, pc}
    aefc:	20003dc4 	.word	0x20003dc4
    af00:	0000cbf0 	.word	0x0000cbf0
    af04:	20003dc8 	.word	0x20003dc8
    af08:	0000c825 	.word	0x0000c825
    af0c:	00000fa1 	.word	0x00000fa1
    af10:	0000c8a9 	.word	0x0000c8a9
    af14:	00005d39 	.word	0x00005d39
    af18:	00004731 	.word	0x00004731
    af1c:	00004215 	.word	0x00004215

0000af20 <cfg_check>:

void cfg_check()
//--------------------------------------------------------------------------
{
    af20:	b590      	push	{r4, r7, lr}
    af22:	b083      	sub	sp, #12
    af24:	af00      	add	r7, sp, #0
	BYTE i = 0;
    af26:	1dfb      	adds	r3, r7, #7
    af28:	2200      	movs	r2, #0
    af2a:	701a      	strb	r2, [r3, #0]
	
	for(i=0;i<4;i++)
    af2c:	1dfb      	adds	r3, r7, #7
    af2e:	2200      	movs	r2, #0
    af30:	701a      	strb	r2, [r3, #0]
    af32:	e04d      	b.n	afd0 <cfg_check+0xb0>
	{
		port[i].tout_port=cfg_1.sock_rs485[i].tout;
    af34:	1dfb      	adds	r3, r7, #7
    af36:	7819      	ldrb	r1, [r3, #0]
    af38:	1dfb      	adds	r3, r7, #7
    af3a:	781a      	ldrb	r2, [r3, #0]
    af3c:	4828      	ldr	r0, [pc, #160]	; (afe0 <cfg_check+0xc0>)
    af3e:	0013      	movs	r3, r2
    af40:	005b      	lsls	r3, r3, #1
    af42:	189b      	adds	r3, r3, r2
    af44:	009b      	lsls	r3, r3, #2
    af46:	189b      	adds	r3, r3, r2
    af48:	18c3      	adds	r3, r0, r3
    af4a:	3338      	adds	r3, #56	; 0x38
    af4c:	79da      	ldrb	r2, [r3, #7]
    af4e:	7a1b      	ldrb	r3, [r3, #8]
    af50:	021b      	lsls	r3, r3, #8
    af52:	4313      	orrs	r3, r2
    af54:	b29c      	uxth	r4, r3
    af56:	4823      	ldr	r0, [pc, #140]	; (afe4 <cfg_check+0xc4>)
    af58:	2386      	movs	r3, #134	; 0x86
    af5a:	009a      	lsls	r2, r3, #2
    af5c:	000b      	movs	r3, r1
    af5e:	00db      	lsls	r3, r3, #3
    af60:	185b      	adds	r3, r3, r1
    af62:	019b      	lsls	r3, r3, #6
    af64:	18c3      	adds	r3, r0, r3
    af66:	189b      	adds	r3, r3, r2
    af68:	1c22      	adds	r2, r4, #0
    af6a:	801a      	strh	r2, [r3, #0]
		if ((port[i].tout_port < 50) || (port[i].tout_port > 1000))  {port[i].tout_port= 100;}
    af6c:	1dfb      	adds	r3, r7, #7
    af6e:	781a      	ldrb	r2, [r3, #0]
    af70:	481c      	ldr	r0, [pc, #112]	; (afe4 <cfg_check+0xc4>)
    af72:	2386      	movs	r3, #134	; 0x86
    af74:	0099      	lsls	r1, r3, #2
    af76:	0013      	movs	r3, r2
    af78:	00db      	lsls	r3, r3, #3
    af7a:	189b      	adds	r3, r3, r2
    af7c:	019b      	lsls	r3, r3, #6
    af7e:	18c3      	adds	r3, r0, r3
    af80:	185b      	adds	r3, r3, r1
    af82:	881b      	ldrh	r3, [r3, #0]
    af84:	b29b      	uxth	r3, r3
    af86:	2b31      	cmp	r3, #49	; 0x31
    af88:	d910      	bls.n	afac <cfg_check+0x8c>
    af8a:	1dfb      	adds	r3, r7, #7
    af8c:	781a      	ldrb	r2, [r3, #0]
    af8e:	4815      	ldr	r0, [pc, #84]	; (afe4 <cfg_check+0xc4>)
    af90:	2386      	movs	r3, #134	; 0x86
    af92:	0099      	lsls	r1, r3, #2
    af94:	0013      	movs	r3, r2
    af96:	00db      	lsls	r3, r3, #3
    af98:	189b      	adds	r3, r3, r2
    af9a:	019b      	lsls	r3, r3, #6
    af9c:	18c3      	adds	r3, r0, r3
    af9e:	185b      	adds	r3, r3, r1
    afa0:	881b      	ldrh	r3, [r3, #0]
    afa2:	b29a      	uxth	r2, r3
    afa4:	23fa      	movs	r3, #250	; 0xfa
    afa6:	009b      	lsls	r3, r3, #2
    afa8:	429a      	cmp	r2, r3
    afaa:	d90c      	bls.n	afc6 <cfg_check+0xa6>
    afac:	1dfb      	adds	r3, r7, #7
    afae:	781a      	ldrb	r2, [r3, #0]
    afb0:	480c      	ldr	r0, [pc, #48]	; (afe4 <cfg_check+0xc4>)
    afb2:	2386      	movs	r3, #134	; 0x86
    afb4:	0099      	lsls	r1, r3, #2
    afb6:	0013      	movs	r3, r2
    afb8:	00db      	lsls	r3, r3, #3
    afba:	189b      	adds	r3, r3, r2
    afbc:	019b      	lsls	r3, r3, #6
    afbe:	18c3      	adds	r3, r0, r3
    afc0:	185b      	adds	r3, r3, r1
    afc2:	2264      	movs	r2, #100	; 0x64
    afc4:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
    afc6:	1dfb      	adds	r3, r7, #7
    afc8:	781a      	ldrb	r2, [r3, #0]
    afca:	1dfb      	adds	r3, r7, #7
    afcc:	3201      	adds	r2, #1
    afce:	701a      	strb	r2, [r3, #0]
    afd0:	1dfb      	adds	r3, r7, #7
    afd2:	781b      	ldrb	r3, [r3, #0]
    afd4:	2b03      	cmp	r3, #3
    afd6:	d9ad      	bls.n	af34 <cfg_check+0x14>
	}
	
	return;
    afd8:	46c0      	nop			; (mov r8, r8)
}
    afda:	46bd      	mov	sp, r7
    afdc:	b003      	add	sp, #12
    afde:	bd90      	pop	{r4, r7, pc}
    afe0:	20003dc4 	.word	0x20003dc4
    afe4:	200031fc 	.word	0x200031fc

0000afe8 <cfg_save>:

WORD cfg_save(void)
//--------------------------------------------------------------------------
{
    afe8:	b580      	push	{r7, lr}
    afea:	af00      	add	r7, sp, #0
	if(!flash_empty(CFG_1_ADDR,256))
    afec:	2380      	movs	r3, #128	; 0x80
    afee:	005a      	lsls	r2, r3, #1
    aff0:	23fc      	movs	r3, #252	; 0xfc
    aff2:	029b      	lsls	r3, r3, #10
    aff4:	0011      	movs	r1, r2
    aff6:	0018      	movs	r0, r3
    aff8:	4b0a      	ldr	r3, [pc, #40]	; (b024 <cfg_save+0x3c>)
    affa:	4798      	blx	r3
    affc:	1e03      	subs	r3, r0, #0
    affe:	d104      	bne.n	b00a <cfg_save+0x22>
	{
		flash_erase_page(CFG_1_ADDR);
    b000:	23fc      	movs	r3, #252	; 0xfc
    b002:	029b      	lsls	r3, r3, #10
    b004:	0018      	movs	r0, r3
    b006:	4b08      	ldr	r3, [pc, #32]	; (b028 <cfg_save+0x40>)
    b008:	4798      	blx	r3
	}
	
	flash_write(CFG_1_ADDR,(BYTE*)&cfg_1,sizeof(CFG_1));
    b00a:	2380      	movs	r3, #128	; 0x80
    b00c:	005a      	lsls	r2, r3, #1
    b00e:	4907      	ldr	r1, [pc, #28]	; (b02c <cfg_save+0x44>)
    b010:	23fc      	movs	r3, #252	; 0xfc
    b012:	029b      	lsls	r3, r3, #10
    b014:	0018      	movs	r0, r3
    b016:	4b06      	ldr	r3, [pc, #24]	; (b030 <cfg_save+0x48>)
    b018:	4798      	blx	r3
			
	return(CFG_OK);
    b01a:	2301      	movs	r3, #1
}
    b01c:	0018      	movs	r0, r3
    b01e:	46bd      	mov	sp, r7
    b020:	bd80      	pop	{r7, pc}
    b022:	46c0      	nop			; (mov r8, r8)
    b024:	000066e9 	.word	0x000066e9
    b028:	0000672f 	.word	0x0000672f
    b02c:	20003dc4 	.word	0x20003dc4
    b030:	0000677d 	.word	0x0000677d

0000b034 <__udivsi3>:
    b034:	2200      	movs	r2, #0
    b036:	0843      	lsrs	r3, r0, #1
    b038:	428b      	cmp	r3, r1
    b03a:	d374      	bcc.n	b126 <__udivsi3+0xf2>
    b03c:	0903      	lsrs	r3, r0, #4
    b03e:	428b      	cmp	r3, r1
    b040:	d35f      	bcc.n	b102 <__udivsi3+0xce>
    b042:	0a03      	lsrs	r3, r0, #8
    b044:	428b      	cmp	r3, r1
    b046:	d344      	bcc.n	b0d2 <__udivsi3+0x9e>
    b048:	0b03      	lsrs	r3, r0, #12
    b04a:	428b      	cmp	r3, r1
    b04c:	d328      	bcc.n	b0a0 <__udivsi3+0x6c>
    b04e:	0c03      	lsrs	r3, r0, #16
    b050:	428b      	cmp	r3, r1
    b052:	d30d      	bcc.n	b070 <__udivsi3+0x3c>
    b054:	22ff      	movs	r2, #255	; 0xff
    b056:	0209      	lsls	r1, r1, #8
    b058:	ba12      	rev	r2, r2
    b05a:	0c03      	lsrs	r3, r0, #16
    b05c:	428b      	cmp	r3, r1
    b05e:	d302      	bcc.n	b066 <__udivsi3+0x32>
    b060:	1212      	asrs	r2, r2, #8
    b062:	0209      	lsls	r1, r1, #8
    b064:	d065      	beq.n	b132 <__udivsi3+0xfe>
    b066:	0b03      	lsrs	r3, r0, #12
    b068:	428b      	cmp	r3, r1
    b06a:	d319      	bcc.n	b0a0 <__udivsi3+0x6c>
    b06c:	e000      	b.n	b070 <__udivsi3+0x3c>
    b06e:	0a09      	lsrs	r1, r1, #8
    b070:	0bc3      	lsrs	r3, r0, #15
    b072:	428b      	cmp	r3, r1
    b074:	d301      	bcc.n	b07a <__udivsi3+0x46>
    b076:	03cb      	lsls	r3, r1, #15
    b078:	1ac0      	subs	r0, r0, r3
    b07a:	4152      	adcs	r2, r2
    b07c:	0b83      	lsrs	r3, r0, #14
    b07e:	428b      	cmp	r3, r1
    b080:	d301      	bcc.n	b086 <__udivsi3+0x52>
    b082:	038b      	lsls	r3, r1, #14
    b084:	1ac0      	subs	r0, r0, r3
    b086:	4152      	adcs	r2, r2
    b088:	0b43      	lsrs	r3, r0, #13
    b08a:	428b      	cmp	r3, r1
    b08c:	d301      	bcc.n	b092 <__udivsi3+0x5e>
    b08e:	034b      	lsls	r3, r1, #13
    b090:	1ac0      	subs	r0, r0, r3
    b092:	4152      	adcs	r2, r2
    b094:	0b03      	lsrs	r3, r0, #12
    b096:	428b      	cmp	r3, r1
    b098:	d301      	bcc.n	b09e <__udivsi3+0x6a>
    b09a:	030b      	lsls	r3, r1, #12
    b09c:	1ac0      	subs	r0, r0, r3
    b09e:	4152      	adcs	r2, r2
    b0a0:	0ac3      	lsrs	r3, r0, #11
    b0a2:	428b      	cmp	r3, r1
    b0a4:	d301      	bcc.n	b0aa <__udivsi3+0x76>
    b0a6:	02cb      	lsls	r3, r1, #11
    b0a8:	1ac0      	subs	r0, r0, r3
    b0aa:	4152      	adcs	r2, r2
    b0ac:	0a83      	lsrs	r3, r0, #10
    b0ae:	428b      	cmp	r3, r1
    b0b0:	d301      	bcc.n	b0b6 <__udivsi3+0x82>
    b0b2:	028b      	lsls	r3, r1, #10
    b0b4:	1ac0      	subs	r0, r0, r3
    b0b6:	4152      	adcs	r2, r2
    b0b8:	0a43      	lsrs	r3, r0, #9
    b0ba:	428b      	cmp	r3, r1
    b0bc:	d301      	bcc.n	b0c2 <__udivsi3+0x8e>
    b0be:	024b      	lsls	r3, r1, #9
    b0c0:	1ac0      	subs	r0, r0, r3
    b0c2:	4152      	adcs	r2, r2
    b0c4:	0a03      	lsrs	r3, r0, #8
    b0c6:	428b      	cmp	r3, r1
    b0c8:	d301      	bcc.n	b0ce <__udivsi3+0x9a>
    b0ca:	020b      	lsls	r3, r1, #8
    b0cc:	1ac0      	subs	r0, r0, r3
    b0ce:	4152      	adcs	r2, r2
    b0d0:	d2cd      	bcs.n	b06e <__udivsi3+0x3a>
    b0d2:	09c3      	lsrs	r3, r0, #7
    b0d4:	428b      	cmp	r3, r1
    b0d6:	d301      	bcc.n	b0dc <__udivsi3+0xa8>
    b0d8:	01cb      	lsls	r3, r1, #7
    b0da:	1ac0      	subs	r0, r0, r3
    b0dc:	4152      	adcs	r2, r2
    b0de:	0983      	lsrs	r3, r0, #6
    b0e0:	428b      	cmp	r3, r1
    b0e2:	d301      	bcc.n	b0e8 <__udivsi3+0xb4>
    b0e4:	018b      	lsls	r3, r1, #6
    b0e6:	1ac0      	subs	r0, r0, r3
    b0e8:	4152      	adcs	r2, r2
    b0ea:	0943      	lsrs	r3, r0, #5
    b0ec:	428b      	cmp	r3, r1
    b0ee:	d301      	bcc.n	b0f4 <__udivsi3+0xc0>
    b0f0:	014b      	lsls	r3, r1, #5
    b0f2:	1ac0      	subs	r0, r0, r3
    b0f4:	4152      	adcs	r2, r2
    b0f6:	0903      	lsrs	r3, r0, #4
    b0f8:	428b      	cmp	r3, r1
    b0fa:	d301      	bcc.n	b100 <__udivsi3+0xcc>
    b0fc:	010b      	lsls	r3, r1, #4
    b0fe:	1ac0      	subs	r0, r0, r3
    b100:	4152      	adcs	r2, r2
    b102:	08c3      	lsrs	r3, r0, #3
    b104:	428b      	cmp	r3, r1
    b106:	d301      	bcc.n	b10c <__udivsi3+0xd8>
    b108:	00cb      	lsls	r3, r1, #3
    b10a:	1ac0      	subs	r0, r0, r3
    b10c:	4152      	adcs	r2, r2
    b10e:	0883      	lsrs	r3, r0, #2
    b110:	428b      	cmp	r3, r1
    b112:	d301      	bcc.n	b118 <__udivsi3+0xe4>
    b114:	008b      	lsls	r3, r1, #2
    b116:	1ac0      	subs	r0, r0, r3
    b118:	4152      	adcs	r2, r2
    b11a:	0843      	lsrs	r3, r0, #1
    b11c:	428b      	cmp	r3, r1
    b11e:	d301      	bcc.n	b124 <__udivsi3+0xf0>
    b120:	004b      	lsls	r3, r1, #1
    b122:	1ac0      	subs	r0, r0, r3
    b124:	4152      	adcs	r2, r2
    b126:	1a41      	subs	r1, r0, r1
    b128:	d200      	bcs.n	b12c <__udivsi3+0xf8>
    b12a:	4601      	mov	r1, r0
    b12c:	4152      	adcs	r2, r2
    b12e:	4610      	mov	r0, r2
    b130:	4770      	bx	lr
    b132:	e7ff      	b.n	b134 <__udivsi3+0x100>
    b134:	b501      	push	{r0, lr}
    b136:	2000      	movs	r0, #0
    b138:	f000 f806 	bl	b148 <__aeabi_idiv0>
    b13c:	bd02      	pop	{r1, pc}
    b13e:	46c0      	nop			; (mov r8, r8)

0000b140 <__aeabi_uidivmod>:
    b140:	2900      	cmp	r1, #0
    b142:	d0f7      	beq.n	b134 <__udivsi3+0x100>
    b144:	e776      	b.n	b034 <__udivsi3>
    b146:	4770      	bx	lr

0000b148 <__aeabi_idiv0>:
    b148:	4770      	bx	lr
    b14a:	46c0      	nop			; (mov r8, r8)

0000b14c <__aeabi_d2uiz>:
    b14c:	b570      	push	{r4, r5, r6, lr}
    b14e:	2200      	movs	r2, #0
    b150:	4b0c      	ldr	r3, [pc, #48]	; (b184 <__aeabi_d2uiz+0x38>)
    b152:	0004      	movs	r4, r0
    b154:	000d      	movs	r5, r1
    b156:	f001 fa19 	bl	c58c <__aeabi_dcmpge>
    b15a:	2800      	cmp	r0, #0
    b15c:	d104      	bne.n	b168 <__aeabi_d2uiz+0x1c>
    b15e:	0020      	movs	r0, r4
    b160:	0029      	movs	r1, r5
    b162:	f001 f921 	bl	c3a8 <__aeabi_d2iz>
    b166:	bd70      	pop	{r4, r5, r6, pc}
    b168:	4b06      	ldr	r3, [pc, #24]	; (b184 <__aeabi_d2uiz+0x38>)
    b16a:	2200      	movs	r2, #0
    b16c:	0020      	movs	r0, r4
    b16e:	0029      	movs	r1, r5
    b170:	f000 fe04 	bl	bd7c <__aeabi_dsub>
    b174:	f001 f918 	bl	c3a8 <__aeabi_d2iz>
    b178:	2380      	movs	r3, #128	; 0x80
    b17a:	061b      	lsls	r3, r3, #24
    b17c:	469c      	mov	ip, r3
    b17e:	4460      	add	r0, ip
    b180:	e7f1      	b.n	b166 <__aeabi_d2uiz+0x1a>
    b182:	46c0      	nop			; (mov r8, r8)
    b184:	41e00000 	.word	0x41e00000

0000b188 <__aeabi_ui2f>:
    b188:	b510      	push	{r4, lr}
    b18a:	1e04      	subs	r4, r0, #0
    b18c:	d027      	beq.n	b1de <__aeabi_ui2f+0x56>
    b18e:	f001 fa07 	bl	c5a0 <__clzsi2>
    b192:	239e      	movs	r3, #158	; 0x9e
    b194:	1a1b      	subs	r3, r3, r0
    b196:	2b96      	cmp	r3, #150	; 0x96
    b198:	dc0a      	bgt.n	b1b0 <__aeabi_ui2f+0x28>
    b19a:	2296      	movs	r2, #150	; 0x96
    b19c:	1ad2      	subs	r2, r2, r3
    b19e:	4094      	lsls	r4, r2
    b1a0:	0264      	lsls	r4, r4, #9
    b1a2:	0a64      	lsrs	r4, r4, #9
    b1a4:	b2db      	uxtb	r3, r3
    b1a6:	0264      	lsls	r4, r4, #9
    b1a8:	05db      	lsls	r3, r3, #23
    b1aa:	0a60      	lsrs	r0, r4, #9
    b1ac:	4318      	orrs	r0, r3
    b1ae:	bd10      	pop	{r4, pc}
    b1b0:	2b99      	cmp	r3, #153	; 0x99
    b1b2:	dc17      	bgt.n	b1e4 <__aeabi_ui2f+0x5c>
    b1b4:	2299      	movs	r2, #153	; 0x99
    b1b6:	1ad2      	subs	r2, r2, r3
    b1b8:	2a00      	cmp	r2, #0
    b1ba:	dd27      	ble.n	b20c <__aeabi_ui2f+0x84>
    b1bc:	4094      	lsls	r4, r2
    b1be:	0022      	movs	r2, r4
    b1c0:	4c13      	ldr	r4, [pc, #76]	; (b210 <__aeabi_ui2f+0x88>)
    b1c2:	4014      	ands	r4, r2
    b1c4:	0751      	lsls	r1, r2, #29
    b1c6:	d004      	beq.n	b1d2 <__aeabi_ui2f+0x4a>
    b1c8:	210f      	movs	r1, #15
    b1ca:	400a      	ands	r2, r1
    b1cc:	2a04      	cmp	r2, #4
    b1ce:	d000      	beq.n	b1d2 <__aeabi_ui2f+0x4a>
    b1d0:	3404      	adds	r4, #4
    b1d2:	0162      	lsls	r2, r4, #5
    b1d4:	d412      	bmi.n	b1fc <__aeabi_ui2f+0x74>
    b1d6:	01a4      	lsls	r4, r4, #6
    b1d8:	0a64      	lsrs	r4, r4, #9
    b1da:	b2db      	uxtb	r3, r3
    b1dc:	e7e3      	b.n	b1a6 <__aeabi_ui2f+0x1e>
    b1de:	2300      	movs	r3, #0
    b1e0:	2400      	movs	r4, #0
    b1e2:	e7e0      	b.n	b1a6 <__aeabi_ui2f+0x1e>
    b1e4:	22b9      	movs	r2, #185	; 0xb9
    b1e6:	0021      	movs	r1, r4
    b1e8:	1ad2      	subs	r2, r2, r3
    b1ea:	4091      	lsls	r1, r2
    b1ec:	000a      	movs	r2, r1
    b1ee:	1e51      	subs	r1, r2, #1
    b1f0:	418a      	sbcs	r2, r1
    b1f2:	2105      	movs	r1, #5
    b1f4:	1a09      	subs	r1, r1, r0
    b1f6:	40cc      	lsrs	r4, r1
    b1f8:	4314      	orrs	r4, r2
    b1fa:	e7db      	b.n	b1b4 <__aeabi_ui2f+0x2c>
    b1fc:	4b04      	ldr	r3, [pc, #16]	; (b210 <__aeabi_ui2f+0x88>)
    b1fe:	401c      	ands	r4, r3
    b200:	239f      	movs	r3, #159	; 0x9f
    b202:	01a4      	lsls	r4, r4, #6
    b204:	1a1b      	subs	r3, r3, r0
    b206:	0a64      	lsrs	r4, r4, #9
    b208:	b2db      	uxtb	r3, r3
    b20a:	e7cc      	b.n	b1a6 <__aeabi_ui2f+0x1e>
    b20c:	0022      	movs	r2, r4
    b20e:	e7d7      	b.n	b1c0 <__aeabi_ui2f+0x38>
    b210:	fbffffff 	.word	0xfbffffff

0000b214 <__aeabi_ddiv>:
    b214:	b5f0      	push	{r4, r5, r6, r7, lr}
    b216:	4657      	mov	r7, sl
    b218:	4645      	mov	r5, r8
    b21a:	46de      	mov	lr, fp
    b21c:	464e      	mov	r6, r9
    b21e:	b5e0      	push	{r5, r6, r7, lr}
    b220:	004c      	lsls	r4, r1, #1
    b222:	030e      	lsls	r6, r1, #12
    b224:	b087      	sub	sp, #28
    b226:	4683      	mov	fp, r0
    b228:	4692      	mov	sl, r2
    b22a:	001d      	movs	r5, r3
    b22c:	4680      	mov	r8, r0
    b22e:	0b36      	lsrs	r6, r6, #12
    b230:	0d64      	lsrs	r4, r4, #21
    b232:	0fcf      	lsrs	r7, r1, #31
    b234:	2c00      	cmp	r4, #0
    b236:	d04f      	beq.n	b2d8 <__aeabi_ddiv+0xc4>
    b238:	4b6f      	ldr	r3, [pc, #444]	; (b3f8 <__aeabi_ddiv+0x1e4>)
    b23a:	429c      	cmp	r4, r3
    b23c:	d035      	beq.n	b2aa <__aeabi_ddiv+0x96>
    b23e:	2380      	movs	r3, #128	; 0x80
    b240:	0f42      	lsrs	r2, r0, #29
    b242:	041b      	lsls	r3, r3, #16
    b244:	00f6      	lsls	r6, r6, #3
    b246:	4313      	orrs	r3, r2
    b248:	4333      	orrs	r3, r6
    b24a:	4699      	mov	r9, r3
    b24c:	00c3      	lsls	r3, r0, #3
    b24e:	4698      	mov	r8, r3
    b250:	4b6a      	ldr	r3, [pc, #424]	; (b3fc <__aeabi_ddiv+0x1e8>)
    b252:	2600      	movs	r6, #0
    b254:	469c      	mov	ip, r3
    b256:	2300      	movs	r3, #0
    b258:	4464      	add	r4, ip
    b25a:	9303      	str	r3, [sp, #12]
    b25c:	032b      	lsls	r3, r5, #12
    b25e:	0b1b      	lsrs	r3, r3, #12
    b260:	469b      	mov	fp, r3
    b262:	006b      	lsls	r3, r5, #1
    b264:	0fed      	lsrs	r5, r5, #31
    b266:	4650      	mov	r0, sl
    b268:	0d5b      	lsrs	r3, r3, #21
    b26a:	9501      	str	r5, [sp, #4]
    b26c:	d05e      	beq.n	b32c <__aeabi_ddiv+0x118>
    b26e:	4a62      	ldr	r2, [pc, #392]	; (b3f8 <__aeabi_ddiv+0x1e4>)
    b270:	4293      	cmp	r3, r2
    b272:	d053      	beq.n	b31c <__aeabi_ddiv+0x108>
    b274:	465a      	mov	r2, fp
    b276:	00d1      	lsls	r1, r2, #3
    b278:	2280      	movs	r2, #128	; 0x80
    b27a:	0f40      	lsrs	r0, r0, #29
    b27c:	0412      	lsls	r2, r2, #16
    b27e:	4302      	orrs	r2, r0
    b280:	430a      	orrs	r2, r1
    b282:	4693      	mov	fp, r2
    b284:	4652      	mov	r2, sl
    b286:	00d1      	lsls	r1, r2, #3
    b288:	4a5c      	ldr	r2, [pc, #368]	; (b3fc <__aeabi_ddiv+0x1e8>)
    b28a:	4694      	mov	ip, r2
    b28c:	2200      	movs	r2, #0
    b28e:	4463      	add	r3, ip
    b290:	0038      	movs	r0, r7
    b292:	4068      	eors	r0, r5
    b294:	4684      	mov	ip, r0
    b296:	9002      	str	r0, [sp, #8]
    b298:	1ae4      	subs	r4, r4, r3
    b29a:	4316      	orrs	r6, r2
    b29c:	2e0f      	cmp	r6, #15
    b29e:	d900      	bls.n	b2a2 <__aeabi_ddiv+0x8e>
    b2a0:	e0b4      	b.n	b40c <__aeabi_ddiv+0x1f8>
    b2a2:	4b57      	ldr	r3, [pc, #348]	; (b400 <__aeabi_ddiv+0x1ec>)
    b2a4:	00b6      	lsls	r6, r6, #2
    b2a6:	599b      	ldr	r3, [r3, r6]
    b2a8:	469f      	mov	pc, r3
    b2aa:	0003      	movs	r3, r0
    b2ac:	4333      	orrs	r3, r6
    b2ae:	4699      	mov	r9, r3
    b2b0:	d16c      	bne.n	b38c <__aeabi_ddiv+0x178>
    b2b2:	2300      	movs	r3, #0
    b2b4:	4698      	mov	r8, r3
    b2b6:	3302      	adds	r3, #2
    b2b8:	2608      	movs	r6, #8
    b2ba:	9303      	str	r3, [sp, #12]
    b2bc:	e7ce      	b.n	b25c <__aeabi_ddiv+0x48>
    b2be:	46cb      	mov	fp, r9
    b2c0:	4641      	mov	r1, r8
    b2c2:	9a03      	ldr	r2, [sp, #12]
    b2c4:	9701      	str	r7, [sp, #4]
    b2c6:	2a02      	cmp	r2, #2
    b2c8:	d165      	bne.n	b396 <__aeabi_ddiv+0x182>
    b2ca:	9b01      	ldr	r3, [sp, #4]
    b2cc:	4c4a      	ldr	r4, [pc, #296]	; (b3f8 <__aeabi_ddiv+0x1e4>)
    b2ce:	469c      	mov	ip, r3
    b2d0:	2300      	movs	r3, #0
    b2d2:	2200      	movs	r2, #0
    b2d4:	4698      	mov	r8, r3
    b2d6:	e06b      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b2d8:	0003      	movs	r3, r0
    b2da:	4333      	orrs	r3, r6
    b2dc:	4699      	mov	r9, r3
    b2de:	d04e      	beq.n	b37e <__aeabi_ddiv+0x16a>
    b2e0:	2e00      	cmp	r6, #0
    b2e2:	d100      	bne.n	b2e6 <__aeabi_ddiv+0xd2>
    b2e4:	e1bc      	b.n	b660 <__aeabi_ddiv+0x44c>
    b2e6:	0030      	movs	r0, r6
    b2e8:	f001 f95a 	bl	c5a0 <__clzsi2>
    b2ec:	0003      	movs	r3, r0
    b2ee:	3b0b      	subs	r3, #11
    b2f0:	2b1c      	cmp	r3, #28
    b2f2:	dd00      	ble.n	b2f6 <__aeabi_ddiv+0xe2>
    b2f4:	e1ac      	b.n	b650 <__aeabi_ddiv+0x43c>
    b2f6:	221d      	movs	r2, #29
    b2f8:	1ad3      	subs	r3, r2, r3
    b2fa:	465a      	mov	r2, fp
    b2fc:	0001      	movs	r1, r0
    b2fe:	40da      	lsrs	r2, r3
    b300:	3908      	subs	r1, #8
    b302:	408e      	lsls	r6, r1
    b304:	0013      	movs	r3, r2
    b306:	4333      	orrs	r3, r6
    b308:	4699      	mov	r9, r3
    b30a:	465b      	mov	r3, fp
    b30c:	408b      	lsls	r3, r1
    b30e:	4698      	mov	r8, r3
    b310:	2300      	movs	r3, #0
    b312:	4c3c      	ldr	r4, [pc, #240]	; (b404 <__aeabi_ddiv+0x1f0>)
    b314:	2600      	movs	r6, #0
    b316:	1a24      	subs	r4, r4, r0
    b318:	9303      	str	r3, [sp, #12]
    b31a:	e79f      	b.n	b25c <__aeabi_ddiv+0x48>
    b31c:	4651      	mov	r1, sl
    b31e:	465a      	mov	r2, fp
    b320:	4311      	orrs	r1, r2
    b322:	d129      	bne.n	b378 <__aeabi_ddiv+0x164>
    b324:	2200      	movs	r2, #0
    b326:	4693      	mov	fp, r2
    b328:	3202      	adds	r2, #2
    b32a:	e7b1      	b.n	b290 <__aeabi_ddiv+0x7c>
    b32c:	4659      	mov	r1, fp
    b32e:	4301      	orrs	r1, r0
    b330:	d01e      	beq.n	b370 <__aeabi_ddiv+0x15c>
    b332:	465b      	mov	r3, fp
    b334:	2b00      	cmp	r3, #0
    b336:	d100      	bne.n	b33a <__aeabi_ddiv+0x126>
    b338:	e19e      	b.n	b678 <__aeabi_ddiv+0x464>
    b33a:	4658      	mov	r0, fp
    b33c:	f001 f930 	bl	c5a0 <__clzsi2>
    b340:	0003      	movs	r3, r0
    b342:	3b0b      	subs	r3, #11
    b344:	2b1c      	cmp	r3, #28
    b346:	dd00      	ble.n	b34a <__aeabi_ddiv+0x136>
    b348:	e18f      	b.n	b66a <__aeabi_ddiv+0x456>
    b34a:	0002      	movs	r2, r0
    b34c:	4659      	mov	r1, fp
    b34e:	3a08      	subs	r2, #8
    b350:	4091      	lsls	r1, r2
    b352:	468b      	mov	fp, r1
    b354:	211d      	movs	r1, #29
    b356:	1acb      	subs	r3, r1, r3
    b358:	4651      	mov	r1, sl
    b35a:	40d9      	lsrs	r1, r3
    b35c:	000b      	movs	r3, r1
    b35e:	4659      	mov	r1, fp
    b360:	430b      	orrs	r3, r1
    b362:	4651      	mov	r1, sl
    b364:	469b      	mov	fp, r3
    b366:	4091      	lsls	r1, r2
    b368:	4b26      	ldr	r3, [pc, #152]	; (b404 <__aeabi_ddiv+0x1f0>)
    b36a:	2200      	movs	r2, #0
    b36c:	1a1b      	subs	r3, r3, r0
    b36e:	e78f      	b.n	b290 <__aeabi_ddiv+0x7c>
    b370:	2300      	movs	r3, #0
    b372:	2201      	movs	r2, #1
    b374:	469b      	mov	fp, r3
    b376:	e78b      	b.n	b290 <__aeabi_ddiv+0x7c>
    b378:	4651      	mov	r1, sl
    b37a:	2203      	movs	r2, #3
    b37c:	e788      	b.n	b290 <__aeabi_ddiv+0x7c>
    b37e:	2300      	movs	r3, #0
    b380:	4698      	mov	r8, r3
    b382:	3301      	adds	r3, #1
    b384:	2604      	movs	r6, #4
    b386:	2400      	movs	r4, #0
    b388:	9303      	str	r3, [sp, #12]
    b38a:	e767      	b.n	b25c <__aeabi_ddiv+0x48>
    b38c:	2303      	movs	r3, #3
    b38e:	46b1      	mov	r9, r6
    b390:	9303      	str	r3, [sp, #12]
    b392:	260c      	movs	r6, #12
    b394:	e762      	b.n	b25c <__aeabi_ddiv+0x48>
    b396:	2a03      	cmp	r2, #3
    b398:	d100      	bne.n	b39c <__aeabi_ddiv+0x188>
    b39a:	e25c      	b.n	b856 <__aeabi_ddiv+0x642>
    b39c:	9b01      	ldr	r3, [sp, #4]
    b39e:	2a01      	cmp	r2, #1
    b3a0:	d000      	beq.n	b3a4 <__aeabi_ddiv+0x190>
    b3a2:	e1e4      	b.n	b76e <__aeabi_ddiv+0x55a>
    b3a4:	4013      	ands	r3, r2
    b3a6:	469c      	mov	ip, r3
    b3a8:	2300      	movs	r3, #0
    b3aa:	2400      	movs	r4, #0
    b3ac:	2200      	movs	r2, #0
    b3ae:	4698      	mov	r8, r3
    b3b0:	2100      	movs	r1, #0
    b3b2:	0312      	lsls	r2, r2, #12
    b3b4:	0b13      	lsrs	r3, r2, #12
    b3b6:	0d0a      	lsrs	r2, r1, #20
    b3b8:	0512      	lsls	r2, r2, #20
    b3ba:	431a      	orrs	r2, r3
    b3bc:	0523      	lsls	r3, r4, #20
    b3be:	4c12      	ldr	r4, [pc, #72]	; (b408 <__aeabi_ddiv+0x1f4>)
    b3c0:	4640      	mov	r0, r8
    b3c2:	4022      	ands	r2, r4
    b3c4:	4313      	orrs	r3, r2
    b3c6:	4662      	mov	r2, ip
    b3c8:	005b      	lsls	r3, r3, #1
    b3ca:	07d2      	lsls	r2, r2, #31
    b3cc:	085b      	lsrs	r3, r3, #1
    b3ce:	4313      	orrs	r3, r2
    b3d0:	0019      	movs	r1, r3
    b3d2:	b007      	add	sp, #28
    b3d4:	bc3c      	pop	{r2, r3, r4, r5}
    b3d6:	4690      	mov	r8, r2
    b3d8:	4699      	mov	r9, r3
    b3da:	46a2      	mov	sl, r4
    b3dc:	46ab      	mov	fp, r5
    b3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3e0:	2300      	movs	r3, #0
    b3e2:	2280      	movs	r2, #128	; 0x80
    b3e4:	469c      	mov	ip, r3
    b3e6:	0312      	lsls	r2, r2, #12
    b3e8:	4698      	mov	r8, r3
    b3ea:	4c03      	ldr	r4, [pc, #12]	; (b3f8 <__aeabi_ddiv+0x1e4>)
    b3ec:	e7e0      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b3ee:	2300      	movs	r3, #0
    b3f0:	4c01      	ldr	r4, [pc, #4]	; (b3f8 <__aeabi_ddiv+0x1e4>)
    b3f2:	2200      	movs	r2, #0
    b3f4:	4698      	mov	r8, r3
    b3f6:	e7db      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b3f8:	000007ff 	.word	0x000007ff
    b3fc:	fffffc01 	.word	0xfffffc01
    b400:	0000cbfc 	.word	0x0000cbfc
    b404:	fffffc0d 	.word	0xfffffc0d
    b408:	800fffff 	.word	0x800fffff
    b40c:	45d9      	cmp	r9, fp
    b40e:	d900      	bls.n	b412 <__aeabi_ddiv+0x1fe>
    b410:	e139      	b.n	b686 <__aeabi_ddiv+0x472>
    b412:	d100      	bne.n	b416 <__aeabi_ddiv+0x202>
    b414:	e134      	b.n	b680 <__aeabi_ddiv+0x46c>
    b416:	2300      	movs	r3, #0
    b418:	4646      	mov	r6, r8
    b41a:	464d      	mov	r5, r9
    b41c:	469a      	mov	sl, r3
    b41e:	3c01      	subs	r4, #1
    b420:	465b      	mov	r3, fp
    b422:	0e0a      	lsrs	r2, r1, #24
    b424:	021b      	lsls	r3, r3, #8
    b426:	431a      	orrs	r2, r3
    b428:	020b      	lsls	r3, r1, #8
    b42a:	0c17      	lsrs	r7, r2, #16
    b42c:	9303      	str	r3, [sp, #12]
    b42e:	0413      	lsls	r3, r2, #16
    b430:	0c1b      	lsrs	r3, r3, #16
    b432:	0039      	movs	r1, r7
    b434:	0028      	movs	r0, r5
    b436:	4690      	mov	r8, r2
    b438:	9301      	str	r3, [sp, #4]
    b43a:	f7ff fdfb 	bl	b034 <__udivsi3>
    b43e:	0002      	movs	r2, r0
    b440:	9b01      	ldr	r3, [sp, #4]
    b442:	4683      	mov	fp, r0
    b444:	435a      	muls	r2, r3
    b446:	0028      	movs	r0, r5
    b448:	0039      	movs	r1, r7
    b44a:	4691      	mov	r9, r2
    b44c:	f7ff fe78 	bl	b140 <__aeabi_uidivmod>
    b450:	0c35      	lsrs	r5, r6, #16
    b452:	0409      	lsls	r1, r1, #16
    b454:	430d      	orrs	r5, r1
    b456:	45a9      	cmp	r9, r5
    b458:	d90d      	bls.n	b476 <__aeabi_ddiv+0x262>
    b45a:	465b      	mov	r3, fp
    b45c:	4445      	add	r5, r8
    b45e:	3b01      	subs	r3, #1
    b460:	45a8      	cmp	r8, r5
    b462:	d900      	bls.n	b466 <__aeabi_ddiv+0x252>
    b464:	e13a      	b.n	b6dc <__aeabi_ddiv+0x4c8>
    b466:	45a9      	cmp	r9, r5
    b468:	d800      	bhi.n	b46c <__aeabi_ddiv+0x258>
    b46a:	e137      	b.n	b6dc <__aeabi_ddiv+0x4c8>
    b46c:	2302      	movs	r3, #2
    b46e:	425b      	negs	r3, r3
    b470:	469c      	mov	ip, r3
    b472:	4445      	add	r5, r8
    b474:	44e3      	add	fp, ip
    b476:	464b      	mov	r3, r9
    b478:	1aeb      	subs	r3, r5, r3
    b47a:	0039      	movs	r1, r7
    b47c:	0018      	movs	r0, r3
    b47e:	9304      	str	r3, [sp, #16]
    b480:	f7ff fdd8 	bl	b034 <__udivsi3>
    b484:	9b01      	ldr	r3, [sp, #4]
    b486:	0005      	movs	r5, r0
    b488:	4343      	muls	r3, r0
    b48a:	0039      	movs	r1, r7
    b48c:	9804      	ldr	r0, [sp, #16]
    b48e:	4699      	mov	r9, r3
    b490:	f7ff fe56 	bl	b140 <__aeabi_uidivmod>
    b494:	0433      	lsls	r3, r6, #16
    b496:	0409      	lsls	r1, r1, #16
    b498:	0c1b      	lsrs	r3, r3, #16
    b49a:	430b      	orrs	r3, r1
    b49c:	4599      	cmp	r9, r3
    b49e:	d909      	bls.n	b4b4 <__aeabi_ddiv+0x2a0>
    b4a0:	4443      	add	r3, r8
    b4a2:	1e6a      	subs	r2, r5, #1
    b4a4:	4598      	cmp	r8, r3
    b4a6:	d900      	bls.n	b4aa <__aeabi_ddiv+0x296>
    b4a8:	e11a      	b.n	b6e0 <__aeabi_ddiv+0x4cc>
    b4aa:	4599      	cmp	r9, r3
    b4ac:	d800      	bhi.n	b4b0 <__aeabi_ddiv+0x29c>
    b4ae:	e117      	b.n	b6e0 <__aeabi_ddiv+0x4cc>
    b4b0:	3d02      	subs	r5, #2
    b4b2:	4443      	add	r3, r8
    b4b4:	464a      	mov	r2, r9
    b4b6:	1a9b      	subs	r3, r3, r2
    b4b8:	465a      	mov	r2, fp
    b4ba:	0412      	lsls	r2, r2, #16
    b4bc:	432a      	orrs	r2, r5
    b4be:	9903      	ldr	r1, [sp, #12]
    b4c0:	4693      	mov	fp, r2
    b4c2:	0c10      	lsrs	r0, r2, #16
    b4c4:	0c0a      	lsrs	r2, r1, #16
    b4c6:	4691      	mov	r9, r2
    b4c8:	0409      	lsls	r1, r1, #16
    b4ca:	465a      	mov	r2, fp
    b4cc:	0c09      	lsrs	r1, r1, #16
    b4ce:	464e      	mov	r6, r9
    b4d0:	000d      	movs	r5, r1
    b4d2:	0412      	lsls	r2, r2, #16
    b4d4:	0c12      	lsrs	r2, r2, #16
    b4d6:	4345      	muls	r5, r0
    b4d8:	9105      	str	r1, [sp, #20]
    b4da:	4351      	muls	r1, r2
    b4dc:	4372      	muls	r2, r6
    b4de:	4370      	muls	r0, r6
    b4e0:	1952      	adds	r2, r2, r5
    b4e2:	0c0e      	lsrs	r6, r1, #16
    b4e4:	18b2      	adds	r2, r6, r2
    b4e6:	4295      	cmp	r5, r2
    b4e8:	d903      	bls.n	b4f2 <__aeabi_ddiv+0x2de>
    b4ea:	2580      	movs	r5, #128	; 0x80
    b4ec:	026d      	lsls	r5, r5, #9
    b4ee:	46ac      	mov	ip, r5
    b4f0:	4460      	add	r0, ip
    b4f2:	0c15      	lsrs	r5, r2, #16
    b4f4:	0409      	lsls	r1, r1, #16
    b4f6:	0412      	lsls	r2, r2, #16
    b4f8:	0c09      	lsrs	r1, r1, #16
    b4fa:	1828      	adds	r0, r5, r0
    b4fc:	1852      	adds	r2, r2, r1
    b4fe:	4283      	cmp	r3, r0
    b500:	d200      	bcs.n	b504 <__aeabi_ddiv+0x2f0>
    b502:	e0ce      	b.n	b6a2 <__aeabi_ddiv+0x48e>
    b504:	d100      	bne.n	b508 <__aeabi_ddiv+0x2f4>
    b506:	e0c8      	b.n	b69a <__aeabi_ddiv+0x486>
    b508:	1a1d      	subs	r5, r3, r0
    b50a:	4653      	mov	r3, sl
    b50c:	1a9e      	subs	r6, r3, r2
    b50e:	45b2      	cmp	sl, r6
    b510:	4192      	sbcs	r2, r2
    b512:	4252      	negs	r2, r2
    b514:	1aab      	subs	r3, r5, r2
    b516:	469a      	mov	sl, r3
    b518:	4598      	cmp	r8, r3
    b51a:	d100      	bne.n	b51e <__aeabi_ddiv+0x30a>
    b51c:	e117      	b.n	b74e <__aeabi_ddiv+0x53a>
    b51e:	0039      	movs	r1, r7
    b520:	0018      	movs	r0, r3
    b522:	f7ff fd87 	bl	b034 <__udivsi3>
    b526:	9b01      	ldr	r3, [sp, #4]
    b528:	0005      	movs	r5, r0
    b52a:	4343      	muls	r3, r0
    b52c:	0039      	movs	r1, r7
    b52e:	4650      	mov	r0, sl
    b530:	9304      	str	r3, [sp, #16]
    b532:	f7ff fe05 	bl	b140 <__aeabi_uidivmod>
    b536:	9804      	ldr	r0, [sp, #16]
    b538:	040b      	lsls	r3, r1, #16
    b53a:	0c31      	lsrs	r1, r6, #16
    b53c:	4319      	orrs	r1, r3
    b53e:	4288      	cmp	r0, r1
    b540:	d909      	bls.n	b556 <__aeabi_ddiv+0x342>
    b542:	4441      	add	r1, r8
    b544:	1e6b      	subs	r3, r5, #1
    b546:	4588      	cmp	r8, r1
    b548:	d900      	bls.n	b54c <__aeabi_ddiv+0x338>
    b54a:	e107      	b.n	b75c <__aeabi_ddiv+0x548>
    b54c:	4288      	cmp	r0, r1
    b54e:	d800      	bhi.n	b552 <__aeabi_ddiv+0x33e>
    b550:	e104      	b.n	b75c <__aeabi_ddiv+0x548>
    b552:	3d02      	subs	r5, #2
    b554:	4441      	add	r1, r8
    b556:	9b04      	ldr	r3, [sp, #16]
    b558:	1acb      	subs	r3, r1, r3
    b55a:	0018      	movs	r0, r3
    b55c:	0039      	movs	r1, r7
    b55e:	9304      	str	r3, [sp, #16]
    b560:	f7ff fd68 	bl	b034 <__udivsi3>
    b564:	9b01      	ldr	r3, [sp, #4]
    b566:	4682      	mov	sl, r0
    b568:	4343      	muls	r3, r0
    b56a:	0039      	movs	r1, r7
    b56c:	9804      	ldr	r0, [sp, #16]
    b56e:	9301      	str	r3, [sp, #4]
    b570:	f7ff fde6 	bl	b140 <__aeabi_uidivmod>
    b574:	9801      	ldr	r0, [sp, #4]
    b576:	040b      	lsls	r3, r1, #16
    b578:	0431      	lsls	r1, r6, #16
    b57a:	0c09      	lsrs	r1, r1, #16
    b57c:	4319      	orrs	r1, r3
    b57e:	4288      	cmp	r0, r1
    b580:	d90d      	bls.n	b59e <__aeabi_ddiv+0x38a>
    b582:	4653      	mov	r3, sl
    b584:	4441      	add	r1, r8
    b586:	3b01      	subs	r3, #1
    b588:	4588      	cmp	r8, r1
    b58a:	d900      	bls.n	b58e <__aeabi_ddiv+0x37a>
    b58c:	e0e8      	b.n	b760 <__aeabi_ddiv+0x54c>
    b58e:	4288      	cmp	r0, r1
    b590:	d800      	bhi.n	b594 <__aeabi_ddiv+0x380>
    b592:	e0e5      	b.n	b760 <__aeabi_ddiv+0x54c>
    b594:	2302      	movs	r3, #2
    b596:	425b      	negs	r3, r3
    b598:	469c      	mov	ip, r3
    b59a:	4441      	add	r1, r8
    b59c:	44e2      	add	sl, ip
    b59e:	9b01      	ldr	r3, [sp, #4]
    b5a0:	042d      	lsls	r5, r5, #16
    b5a2:	1ace      	subs	r6, r1, r3
    b5a4:	4651      	mov	r1, sl
    b5a6:	4329      	orrs	r1, r5
    b5a8:	9d05      	ldr	r5, [sp, #20]
    b5aa:	464f      	mov	r7, r9
    b5ac:	002a      	movs	r2, r5
    b5ae:	040b      	lsls	r3, r1, #16
    b5b0:	0c08      	lsrs	r0, r1, #16
    b5b2:	0c1b      	lsrs	r3, r3, #16
    b5b4:	435a      	muls	r2, r3
    b5b6:	4345      	muls	r5, r0
    b5b8:	437b      	muls	r3, r7
    b5ba:	4378      	muls	r0, r7
    b5bc:	195b      	adds	r3, r3, r5
    b5be:	0c17      	lsrs	r7, r2, #16
    b5c0:	18fb      	adds	r3, r7, r3
    b5c2:	429d      	cmp	r5, r3
    b5c4:	d903      	bls.n	b5ce <__aeabi_ddiv+0x3ba>
    b5c6:	2580      	movs	r5, #128	; 0x80
    b5c8:	026d      	lsls	r5, r5, #9
    b5ca:	46ac      	mov	ip, r5
    b5cc:	4460      	add	r0, ip
    b5ce:	0c1d      	lsrs	r5, r3, #16
    b5d0:	0412      	lsls	r2, r2, #16
    b5d2:	041b      	lsls	r3, r3, #16
    b5d4:	0c12      	lsrs	r2, r2, #16
    b5d6:	1828      	adds	r0, r5, r0
    b5d8:	189b      	adds	r3, r3, r2
    b5da:	4286      	cmp	r6, r0
    b5dc:	d200      	bcs.n	b5e0 <__aeabi_ddiv+0x3cc>
    b5de:	e093      	b.n	b708 <__aeabi_ddiv+0x4f4>
    b5e0:	d100      	bne.n	b5e4 <__aeabi_ddiv+0x3d0>
    b5e2:	e08e      	b.n	b702 <__aeabi_ddiv+0x4ee>
    b5e4:	2301      	movs	r3, #1
    b5e6:	4319      	orrs	r1, r3
    b5e8:	4ba0      	ldr	r3, [pc, #640]	; (b86c <__aeabi_ddiv+0x658>)
    b5ea:	18e3      	adds	r3, r4, r3
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	dc00      	bgt.n	b5f2 <__aeabi_ddiv+0x3de>
    b5f0:	e099      	b.n	b726 <__aeabi_ddiv+0x512>
    b5f2:	074a      	lsls	r2, r1, #29
    b5f4:	d000      	beq.n	b5f8 <__aeabi_ddiv+0x3e4>
    b5f6:	e09e      	b.n	b736 <__aeabi_ddiv+0x522>
    b5f8:	465a      	mov	r2, fp
    b5fa:	01d2      	lsls	r2, r2, #7
    b5fc:	d506      	bpl.n	b60c <__aeabi_ddiv+0x3f8>
    b5fe:	465a      	mov	r2, fp
    b600:	4b9b      	ldr	r3, [pc, #620]	; (b870 <__aeabi_ddiv+0x65c>)
    b602:	401a      	ands	r2, r3
    b604:	2380      	movs	r3, #128	; 0x80
    b606:	4693      	mov	fp, r2
    b608:	00db      	lsls	r3, r3, #3
    b60a:	18e3      	adds	r3, r4, r3
    b60c:	4a99      	ldr	r2, [pc, #612]	; (b874 <__aeabi_ddiv+0x660>)
    b60e:	4293      	cmp	r3, r2
    b610:	dd68      	ble.n	b6e4 <__aeabi_ddiv+0x4d0>
    b612:	2301      	movs	r3, #1
    b614:	9a02      	ldr	r2, [sp, #8]
    b616:	4c98      	ldr	r4, [pc, #608]	; (b878 <__aeabi_ddiv+0x664>)
    b618:	401a      	ands	r2, r3
    b61a:	2300      	movs	r3, #0
    b61c:	4694      	mov	ip, r2
    b61e:	4698      	mov	r8, r3
    b620:	2200      	movs	r2, #0
    b622:	e6c5      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b624:	2280      	movs	r2, #128	; 0x80
    b626:	464b      	mov	r3, r9
    b628:	0312      	lsls	r2, r2, #12
    b62a:	4213      	tst	r3, r2
    b62c:	d00a      	beq.n	b644 <__aeabi_ddiv+0x430>
    b62e:	465b      	mov	r3, fp
    b630:	4213      	tst	r3, r2
    b632:	d106      	bne.n	b642 <__aeabi_ddiv+0x42e>
    b634:	431a      	orrs	r2, r3
    b636:	0312      	lsls	r2, r2, #12
    b638:	0b12      	lsrs	r2, r2, #12
    b63a:	46ac      	mov	ip, r5
    b63c:	4688      	mov	r8, r1
    b63e:	4c8e      	ldr	r4, [pc, #568]	; (b878 <__aeabi_ddiv+0x664>)
    b640:	e6b6      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b642:	464b      	mov	r3, r9
    b644:	431a      	orrs	r2, r3
    b646:	0312      	lsls	r2, r2, #12
    b648:	0b12      	lsrs	r2, r2, #12
    b64a:	46bc      	mov	ip, r7
    b64c:	4c8a      	ldr	r4, [pc, #552]	; (b878 <__aeabi_ddiv+0x664>)
    b64e:	e6af      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b650:	0003      	movs	r3, r0
    b652:	465a      	mov	r2, fp
    b654:	3b28      	subs	r3, #40	; 0x28
    b656:	409a      	lsls	r2, r3
    b658:	2300      	movs	r3, #0
    b65a:	4691      	mov	r9, r2
    b65c:	4698      	mov	r8, r3
    b65e:	e657      	b.n	b310 <__aeabi_ddiv+0xfc>
    b660:	4658      	mov	r0, fp
    b662:	f000 ff9d 	bl	c5a0 <__clzsi2>
    b666:	3020      	adds	r0, #32
    b668:	e640      	b.n	b2ec <__aeabi_ddiv+0xd8>
    b66a:	0003      	movs	r3, r0
    b66c:	4652      	mov	r2, sl
    b66e:	3b28      	subs	r3, #40	; 0x28
    b670:	409a      	lsls	r2, r3
    b672:	2100      	movs	r1, #0
    b674:	4693      	mov	fp, r2
    b676:	e677      	b.n	b368 <__aeabi_ddiv+0x154>
    b678:	f000 ff92 	bl	c5a0 <__clzsi2>
    b67c:	3020      	adds	r0, #32
    b67e:	e65f      	b.n	b340 <__aeabi_ddiv+0x12c>
    b680:	4588      	cmp	r8, r1
    b682:	d200      	bcs.n	b686 <__aeabi_ddiv+0x472>
    b684:	e6c7      	b.n	b416 <__aeabi_ddiv+0x202>
    b686:	464b      	mov	r3, r9
    b688:	07de      	lsls	r6, r3, #31
    b68a:	085d      	lsrs	r5, r3, #1
    b68c:	4643      	mov	r3, r8
    b68e:	085b      	lsrs	r3, r3, #1
    b690:	431e      	orrs	r6, r3
    b692:	4643      	mov	r3, r8
    b694:	07db      	lsls	r3, r3, #31
    b696:	469a      	mov	sl, r3
    b698:	e6c2      	b.n	b420 <__aeabi_ddiv+0x20c>
    b69a:	2500      	movs	r5, #0
    b69c:	4592      	cmp	sl, r2
    b69e:	d300      	bcc.n	b6a2 <__aeabi_ddiv+0x48e>
    b6a0:	e733      	b.n	b50a <__aeabi_ddiv+0x2f6>
    b6a2:	9e03      	ldr	r6, [sp, #12]
    b6a4:	4659      	mov	r1, fp
    b6a6:	46b4      	mov	ip, r6
    b6a8:	44e2      	add	sl, ip
    b6aa:	45b2      	cmp	sl, r6
    b6ac:	41ad      	sbcs	r5, r5
    b6ae:	426d      	negs	r5, r5
    b6b0:	4445      	add	r5, r8
    b6b2:	18eb      	adds	r3, r5, r3
    b6b4:	3901      	subs	r1, #1
    b6b6:	4598      	cmp	r8, r3
    b6b8:	d207      	bcs.n	b6ca <__aeabi_ddiv+0x4b6>
    b6ba:	4298      	cmp	r0, r3
    b6bc:	d900      	bls.n	b6c0 <__aeabi_ddiv+0x4ac>
    b6be:	e07f      	b.n	b7c0 <__aeabi_ddiv+0x5ac>
    b6c0:	d100      	bne.n	b6c4 <__aeabi_ddiv+0x4b0>
    b6c2:	e0bc      	b.n	b83e <__aeabi_ddiv+0x62a>
    b6c4:	1a1d      	subs	r5, r3, r0
    b6c6:	468b      	mov	fp, r1
    b6c8:	e71f      	b.n	b50a <__aeabi_ddiv+0x2f6>
    b6ca:	4598      	cmp	r8, r3
    b6cc:	d1fa      	bne.n	b6c4 <__aeabi_ddiv+0x4b0>
    b6ce:	9d03      	ldr	r5, [sp, #12]
    b6d0:	4555      	cmp	r5, sl
    b6d2:	d9f2      	bls.n	b6ba <__aeabi_ddiv+0x4a6>
    b6d4:	4643      	mov	r3, r8
    b6d6:	468b      	mov	fp, r1
    b6d8:	1a1d      	subs	r5, r3, r0
    b6da:	e716      	b.n	b50a <__aeabi_ddiv+0x2f6>
    b6dc:	469b      	mov	fp, r3
    b6de:	e6ca      	b.n	b476 <__aeabi_ddiv+0x262>
    b6e0:	0015      	movs	r5, r2
    b6e2:	e6e7      	b.n	b4b4 <__aeabi_ddiv+0x2a0>
    b6e4:	465a      	mov	r2, fp
    b6e6:	08c9      	lsrs	r1, r1, #3
    b6e8:	0752      	lsls	r2, r2, #29
    b6ea:	430a      	orrs	r2, r1
    b6ec:	055b      	lsls	r3, r3, #21
    b6ee:	4690      	mov	r8, r2
    b6f0:	0d5c      	lsrs	r4, r3, #21
    b6f2:	465a      	mov	r2, fp
    b6f4:	2301      	movs	r3, #1
    b6f6:	9902      	ldr	r1, [sp, #8]
    b6f8:	0252      	lsls	r2, r2, #9
    b6fa:	4019      	ands	r1, r3
    b6fc:	0b12      	lsrs	r2, r2, #12
    b6fe:	468c      	mov	ip, r1
    b700:	e656      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b702:	2b00      	cmp	r3, #0
    b704:	d100      	bne.n	b708 <__aeabi_ddiv+0x4f4>
    b706:	e76f      	b.n	b5e8 <__aeabi_ddiv+0x3d4>
    b708:	4446      	add	r6, r8
    b70a:	1e4a      	subs	r2, r1, #1
    b70c:	45b0      	cmp	r8, r6
    b70e:	d929      	bls.n	b764 <__aeabi_ddiv+0x550>
    b710:	0011      	movs	r1, r2
    b712:	4286      	cmp	r6, r0
    b714:	d000      	beq.n	b718 <__aeabi_ddiv+0x504>
    b716:	e765      	b.n	b5e4 <__aeabi_ddiv+0x3d0>
    b718:	9a03      	ldr	r2, [sp, #12]
    b71a:	4293      	cmp	r3, r2
    b71c:	d000      	beq.n	b720 <__aeabi_ddiv+0x50c>
    b71e:	e761      	b.n	b5e4 <__aeabi_ddiv+0x3d0>
    b720:	e762      	b.n	b5e8 <__aeabi_ddiv+0x3d4>
    b722:	2101      	movs	r1, #1
    b724:	4249      	negs	r1, r1
    b726:	2001      	movs	r0, #1
    b728:	1ac2      	subs	r2, r0, r3
    b72a:	2a38      	cmp	r2, #56	; 0x38
    b72c:	dd21      	ble.n	b772 <__aeabi_ddiv+0x55e>
    b72e:	9b02      	ldr	r3, [sp, #8]
    b730:	4003      	ands	r3, r0
    b732:	469c      	mov	ip, r3
    b734:	e638      	b.n	b3a8 <__aeabi_ddiv+0x194>
    b736:	220f      	movs	r2, #15
    b738:	400a      	ands	r2, r1
    b73a:	2a04      	cmp	r2, #4
    b73c:	d100      	bne.n	b740 <__aeabi_ddiv+0x52c>
    b73e:	e75b      	b.n	b5f8 <__aeabi_ddiv+0x3e4>
    b740:	000a      	movs	r2, r1
    b742:	1d11      	adds	r1, r2, #4
    b744:	4291      	cmp	r1, r2
    b746:	4192      	sbcs	r2, r2
    b748:	4252      	negs	r2, r2
    b74a:	4493      	add	fp, r2
    b74c:	e754      	b.n	b5f8 <__aeabi_ddiv+0x3e4>
    b74e:	4b47      	ldr	r3, [pc, #284]	; (b86c <__aeabi_ddiv+0x658>)
    b750:	18e3      	adds	r3, r4, r3
    b752:	2b00      	cmp	r3, #0
    b754:	dde5      	ble.n	b722 <__aeabi_ddiv+0x50e>
    b756:	2201      	movs	r2, #1
    b758:	4252      	negs	r2, r2
    b75a:	e7f2      	b.n	b742 <__aeabi_ddiv+0x52e>
    b75c:	001d      	movs	r5, r3
    b75e:	e6fa      	b.n	b556 <__aeabi_ddiv+0x342>
    b760:	469a      	mov	sl, r3
    b762:	e71c      	b.n	b59e <__aeabi_ddiv+0x38a>
    b764:	42b0      	cmp	r0, r6
    b766:	d839      	bhi.n	b7dc <__aeabi_ddiv+0x5c8>
    b768:	d06e      	beq.n	b848 <__aeabi_ddiv+0x634>
    b76a:	0011      	movs	r1, r2
    b76c:	e73a      	b.n	b5e4 <__aeabi_ddiv+0x3d0>
    b76e:	9302      	str	r3, [sp, #8]
    b770:	e73a      	b.n	b5e8 <__aeabi_ddiv+0x3d4>
    b772:	2a1f      	cmp	r2, #31
    b774:	dc3c      	bgt.n	b7f0 <__aeabi_ddiv+0x5dc>
    b776:	2320      	movs	r3, #32
    b778:	1a9b      	subs	r3, r3, r2
    b77a:	000c      	movs	r4, r1
    b77c:	4658      	mov	r0, fp
    b77e:	4099      	lsls	r1, r3
    b780:	4098      	lsls	r0, r3
    b782:	1e4b      	subs	r3, r1, #1
    b784:	4199      	sbcs	r1, r3
    b786:	465b      	mov	r3, fp
    b788:	40d4      	lsrs	r4, r2
    b78a:	40d3      	lsrs	r3, r2
    b78c:	4320      	orrs	r0, r4
    b78e:	4308      	orrs	r0, r1
    b790:	001a      	movs	r2, r3
    b792:	0743      	lsls	r3, r0, #29
    b794:	d009      	beq.n	b7aa <__aeabi_ddiv+0x596>
    b796:	230f      	movs	r3, #15
    b798:	4003      	ands	r3, r0
    b79a:	2b04      	cmp	r3, #4
    b79c:	d005      	beq.n	b7aa <__aeabi_ddiv+0x596>
    b79e:	0001      	movs	r1, r0
    b7a0:	1d08      	adds	r0, r1, #4
    b7a2:	4288      	cmp	r0, r1
    b7a4:	419b      	sbcs	r3, r3
    b7a6:	425b      	negs	r3, r3
    b7a8:	18d2      	adds	r2, r2, r3
    b7aa:	0213      	lsls	r3, r2, #8
    b7ac:	d53a      	bpl.n	b824 <__aeabi_ddiv+0x610>
    b7ae:	2301      	movs	r3, #1
    b7b0:	9a02      	ldr	r2, [sp, #8]
    b7b2:	2401      	movs	r4, #1
    b7b4:	401a      	ands	r2, r3
    b7b6:	2300      	movs	r3, #0
    b7b8:	4694      	mov	ip, r2
    b7ba:	4698      	mov	r8, r3
    b7bc:	2200      	movs	r2, #0
    b7be:	e5f7      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b7c0:	2102      	movs	r1, #2
    b7c2:	4249      	negs	r1, r1
    b7c4:	468c      	mov	ip, r1
    b7c6:	9d03      	ldr	r5, [sp, #12]
    b7c8:	44e3      	add	fp, ip
    b7ca:	46ac      	mov	ip, r5
    b7cc:	44e2      	add	sl, ip
    b7ce:	45aa      	cmp	sl, r5
    b7d0:	41ad      	sbcs	r5, r5
    b7d2:	426d      	negs	r5, r5
    b7d4:	4445      	add	r5, r8
    b7d6:	18ed      	adds	r5, r5, r3
    b7d8:	1a2d      	subs	r5, r5, r0
    b7da:	e696      	b.n	b50a <__aeabi_ddiv+0x2f6>
    b7dc:	1e8a      	subs	r2, r1, #2
    b7de:	9903      	ldr	r1, [sp, #12]
    b7e0:	004d      	lsls	r5, r1, #1
    b7e2:	428d      	cmp	r5, r1
    b7e4:	4189      	sbcs	r1, r1
    b7e6:	4249      	negs	r1, r1
    b7e8:	4441      	add	r1, r8
    b7ea:	1876      	adds	r6, r6, r1
    b7ec:	9503      	str	r5, [sp, #12]
    b7ee:	e78f      	b.n	b710 <__aeabi_ddiv+0x4fc>
    b7f0:	201f      	movs	r0, #31
    b7f2:	4240      	negs	r0, r0
    b7f4:	1ac3      	subs	r3, r0, r3
    b7f6:	4658      	mov	r0, fp
    b7f8:	40d8      	lsrs	r0, r3
    b7fa:	0003      	movs	r3, r0
    b7fc:	2a20      	cmp	r2, #32
    b7fe:	d028      	beq.n	b852 <__aeabi_ddiv+0x63e>
    b800:	2040      	movs	r0, #64	; 0x40
    b802:	465d      	mov	r5, fp
    b804:	1a82      	subs	r2, r0, r2
    b806:	4095      	lsls	r5, r2
    b808:	4329      	orrs	r1, r5
    b80a:	1e4a      	subs	r2, r1, #1
    b80c:	4191      	sbcs	r1, r2
    b80e:	4319      	orrs	r1, r3
    b810:	2307      	movs	r3, #7
    b812:	2200      	movs	r2, #0
    b814:	400b      	ands	r3, r1
    b816:	d009      	beq.n	b82c <__aeabi_ddiv+0x618>
    b818:	230f      	movs	r3, #15
    b81a:	2200      	movs	r2, #0
    b81c:	400b      	ands	r3, r1
    b81e:	0008      	movs	r0, r1
    b820:	2b04      	cmp	r3, #4
    b822:	d1bd      	bne.n	b7a0 <__aeabi_ddiv+0x58c>
    b824:	0001      	movs	r1, r0
    b826:	0753      	lsls	r3, r2, #29
    b828:	0252      	lsls	r2, r2, #9
    b82a:	0b12      	lsrs	r2, r2, #12
    b82c:	08c9      	lsrs	r1, r1, #3
    b82e:	4319      	orrs	r1, r3
    b830:	2301      	movs	r3, #1
    b832:	4688      	mov	r8, r1
    b834:	9902      	ldr	r1, [sp, #8]
    b836:	2400      	movs	r4, #0
    b838:	4019      	ands	r1, r3
    b83a:	468c      	mov	ip, r1
    b83c:	e5b8      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b83e:	4552      	cmp	r2, sl
    b840:	d8be      	bhi.n	b7c0 <__aeabi_ddiv+0x5ac>
    b842:	468b      	mov	fp, r1
    b844:	2500      	movs	r5, #0
    b846:	e660      	b.n	b50a <__aeabi_ddiv+0x2f6>
    b848:	9d03      	ldr	r5, [sp, #12]
    b84a:	429d      	cmp	r5, r3
    b84c:	d3c6      	bcc.n	b7dc <__aeabi_ddiv+0x5c8>
    b84e:	0011      	movs	r1, r2
    b850:	e762      	b.n	b718 <__aeabi_ddiv+0x504>
    b852:	2500      	movs	r5, #0
    b854:	e7d8      	b.n	b808 <__aeabi_ddiv+0x5f4>
    b856:	2280      	movs	r2, #128	; 0x80
    b858:	465b      	mov	r3, fp
    b85a:	0312      	lsls	r2, r2, #12
    b85c:	431a      	orrs	r2, r3
    b85e:	9b01      	ldr	r3, [sp, #4]
    b860:	0312      	lsls	r2, r2, #12
    b862:	0b12      	lsrs	r2, r2, #12
    b864:	469c      	mov	ip, r3
    b866:	4688      	mov	r8, r1
    b868:	4c03      	ldr	r4, [pc, #12]	; (b878 <__aeabi_ddiv+0x664>)
    b86a:	e5a1      	b.n	b3b0 <__aeabi_ddiv+0x19c>
    b86c:	000003ff 	.word	0x000003ff
    b870:	feffffff 	.word	0xfeffffff
    b874:	000007fe 	.word	0x000007fe
    b878:	000007ff 	.word	0x000007ff

0000b87c <__aeabi_dmul>:
    b87c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b87e:	4657      	mov	r7, sl
    b880:	4645      	mov	r5, r8
    b882:	46de      	mov	lr, fp
    b884:	464e      	mov	r6, r9
    b886:	b5e0      	push	{r5, r6, r7, lr}
    b888:	030c      	lsls	r4, r1, #12
    b88a:	4698      	mov	r8, r3
    b88c:	004e      	lsls	r6, r1, #1
    b88e:	0b23      	lsrs	r3, r4, #12
    b890:	b087      	sub	sp, #28
    b892:	0007      	movs	r7, r0
    b894:	4692      	mov	sl, r2
    b896:	469b      	mov	fp, r3
    b898:	0d76      	lsrs	r6, r6, #21
    b89a:	0fcd      	lsrs	r5, r1, #31
    b89c:	2e00      	cmp	r6, #0
    b89e:	d06b      	beq.n	b978 <__aeabi_dmul+0xfc>
    b8a0:	4b6d      	ldr	r3, [pc, #436]	; (ba58 <__aeabi_dmul+0x1dc>)
    b8a2:	429e      	cmp	r6, r3
    b8a4:	d035      	beq.n	b912 <__aeabi_dmul+0x96>
    b8a6:	2480      	movs	r4, #128	; 0x80
    b8a8:	465b      	mov	r3, fp
    b8aa:	0f42      	lsrs	r2, r0, #29
    b8ac:	0424      	lsls	r4, r4, #16
    b8ae:	00db      	lsls	r3, r3, #3
    b8b0:	4314      	orrs	r4, r2
    b8b2:	431c      	orrs	r4, r3
    b8b4:	00c3      	lsls	r3, r0, #3
    b8b6:	4699      	mov	r9, r3
    b8b8:	4b68      	ldr	r3, [pc, #416]	; (ba5c <__aeabi_dmul+0x1e0>)
    b8ba:	46a3      	mov	fp, r4
    b8bc:	469c      	mov	ip, r3
    b8be:	2300      	movs	r3, #0
    b8c0:	2700      	movs	r7, #0
    b8c2:	4466      	add	r6, ip
    b8c4:	9302      	str	r3, [sp, #8]
    b8c6:	4643      	mov	r3, r8
    b8c8:	031c      	lsls	r4, r3, #12
    b8ca:	005a      	lsls	r2, r3, #1
    b8cc:	0fdb      	lsrs	r3, r3, #31
    b8ce:	4650      	mov	r0, sl
    b8d0:	0b24      	lsrs	r4, r4, #12
    b8d2:	0d52      	lsrs	r2, r2, #21
    b8d4:	4698      	mov	r8, r3
    b8d6:	d100      	bne.n	b8da <__aeabi_dmul+0x5e>
    b8d8:	e076      	b.n	b9c8 <__aeabi_dmul+0x14c>
    b8da:	4b5f      	ldr	r3, [pc, #380]	; (ba58 <__aeabi_dmul+0x1dc>)
    b8dc:	429a      	cmp	r2, r3
    b8de:	d06d      	beq.n	b9bc <__aeabi_dmul+0x140>
    b8e0:	2380      	movs	r3, #128	; 0x80
    b8e2:	0f41      	lsrs	r1, r0, #29
    b8e4:	041b      	lsls	r3, r3, #16
    b8e6:	430b      	orrs	r3, r1
    b8e8:	495c      	ldr	r1, [pc, #368]	; (ba5c <__aeabi_dmul+0x1e0>)
    b8ea:	00e4      	lsls	r4, r4, #3
    b8ec:	468c      	mov	ip, r1
    b8ee:	431c      	orrs	r4, r3
    b8f0:	00c3      	lsls	r3, r0, #3
    b8f2:	2000      	movs	r0, #0
    b8f4:	4462      	add	r2, ip
    b8f6:	4641      	mov	r1, r8
    b8f8:	18b6      	adds	r6, r6, r2
    b8fa:	4069      	eors	r1, r5
    b8fc:	1c72      	adds	r2, r6, #1
    b8fe:	9101      	str	r1, [sp, #4]
    b900:	4694      	mov	ip, r2
    b902:	4307      	orrs	r7, r0
    b904:	2f0f      	cmp	r7, #15
    b906:	d900      	bls.n	b90a <__aeabi_dmul+0x8e>
    b908:	e0b0      	b.n	ba6c <__aeabi_dmul+0x1f0>
    b90a:	4a55      	ldr	r2, [pc, #340]	; (ba60 <__aeabi_dmul+0x1e4>)
    b90c:	00bf      	lsls	r7, r7, #2
    b90e:	59d2      	ldr	r2, [r2, r7]
    b910:	4697      	mov	pc, r2
    b912:	465b      	mov	r3, fp
    b914:	4303      	orrs	r3, r0
    b916:	4699      	mov	r9, r3
    b918:	d000      	beq.n	b91c <__aeabi_dmul+0xa0>
    b91a:	e087      	b.n	ba2c <__aeabi_dmul+0x1b0>
    b91c:	2300      	movs	r3, #0
    b91e:	469b      	mov	fp, r3
    b920:	3302      	adds	r3, #2
    b922:	2708      	movs	r7, #8
    b924:	9302      	str	r3, [sp, #8]
    b926:	e7ce      	b.n	b8c6 <__aeabi_dmul+0x4a>
    b928:	4642      	mov	r2, r8
    b92a:	9201      	str	r2, [sp, #4]
    b92c:	2802      	cmp	r0, #2
    b92e:	d067      	beq.n	ba00 <__aeabi_dmul+0x184>
    b930:	2803      	cmp	r0, #3
    b932:	d100      	bne.n	b936 <__aeabi_dmul+0xba>
    b934:	e20e      	b.n	bd54 <__aeabi_dmul+0x4d8>
    b936:	2801      	cmp	r0, #1
    b938:	d000      	beq.n	b93c <__aeabi_dmul+0xc0>
    b93a:	e162      	b.n	bc02 <__aeabi_dmul+0x386>
    b93c:	2300      	movs	r3, #0
    b93e:	2400      	movs	r4, #0
    b940:	2200      	movs	r2, #0
    b942:	4699      	mov	r9, r3
    b944:	9901      	ldr	r1, [sp, #4]
    b946:	4001      	ands	r1, r0
    b948:	b2cd      	uxtb	r5, r1
    b94a:	2100      	movs	r1, #0
    b94c:	0312      	lsls	r2, r2, #12
    b94e:	0d0b      	lsrs	r3, r1, #20
    b950:	0b12      	lsrs	r2, r2, #12
    b952:	051b      	lsls	r3, r3, #20
    b954:	4313      	orrs	r3, r2
    b956:	4a43      	ldr	r2, [pc, #268]	; (ba64 <__aeabi_dmul+0x1e8>)
    b958:	0524      	lsls	r4, r4, #20
    b95a:	4013      	ands	r3, r2
    b95c:	431c      	orrs	r4, r3
    b95e:	0064      	lsls	r4, r4, #1
    b960:	07ed      	lsls	r5, r5, #31
    b962:	0864      	lsrs	r4, r4, #1
    b964:	432c      	orrs	r4, r5
    b966:	4648      	mov	r0, r9
    b968:	0021      	movs	r1, r4
    b96a:	b007      	add	sp, #28
    b96c:	bc3c      	pop	{r2, r3, r4, r5}
    b96e:	4690      	mov	r8, r2
    b970:	4699      	mov	r9, r3
    b972:	46a2      	mov	sl, r4
    b974:	46ab      	mov	fp, r5
    b976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b978:	4303      	orrs	r3, r0
    b97a:	4699      	mov	r9, r3
    b97c:	d04f      	beq.n	ba1e <__aeabi_dmul+0x1a2>
    b97e:	465b      	mov	r3, fp
    b980:	2b00      	cmp	r3, #0
    b982:	d100      	bne.n	b986 <__aeabi_dmul+0x10a>
    b984:	e189      	b.n	bc9a <__aeabi_dmul+0x41e>
    b986:	4658      	mov	r0, fp
    b988:	f000 fe0a 	bl	c5a0 <__clzsi2>
    b98c:	0003      	movs	r3, r0
    b98e:	3b0b      	subs	r3, #11
    b990:	2b1c      	cmp	r3, #28
    b992:	dd00      	ble.n	b996 <__aeabi_dmul+0x11a>
    b994:	e17a      	b.n	bc8c <__aeabi_dmul+0x410>
    b996:	221d      	movs	r2, #29
    b998:	1ad3      	subs	r3, r2, r3
    b99a:	003a      	movs	r2, r7
    b99c:	0001      	movs	r1, r0
    b99e:	465c      	mov	r4, fp
    b9a0:	40da      	lsrs	r2, r3
    b9a2:	3908      	subs	r1, #8
    b9a4:	408c      	lsls	r4, r1
    b9a6:	0013      	movs	r3, r2
    b9a8:	408f      	lsls	r7, r1
    b9aa:	4323      	orrs	r3, r4
    b9ac:	469b      	mov	fp, r3
    b9ae:	46b9      	mov	r9, r7
    b9b0:	2300      	movs	r3, #0
    b9b2:	4e2d      	ldr	r6, [pc, #180]	; (ba68 <__aeabi_dmul+0x1ec>)
    b9b4:	2700      	movs	r7, #0
    b9b6:	1a36      	subs	r6, r6, r0
    b9b8:	9302      	str	r3, [sp, #8]
    b9ba:	e784      	b.n	b8c6 <__aeabi_dmul+0x4a>
    b9bc:	4653      	mov	r3, sl
    b9be:	4323      	orrs	r3, r4
    b9c0:	d12a      	bne.n	ba18 <__aeabi_dmul+0x19c>
    b9c2:	2400      	movs	r4, #0
    b9c4:	2002      	movs	r0, #2
    b9c6:	e796      	b.n	b8f6 <__aeabi_dmul+0x7a>
    b9c8:	4653      	mov	r3, sl
    b9ca:	4323      	orrs	r3, r4
    b9cc:	d020      	beq.n	ba10 <__aeabi_dmul+0x194>
    b9ce:	2c00      	cmp	r4, #0
    b9d0:	d100      	bne.n	b9d4 <__aeabi_dmul+0x158>
    b9d2:	e157      	b.n	bc84 <__aeabi_dmul+0x408>
    b9d4:	0020      	movs	r0, r4
    b9d6:	f000 fde3 	bl	c5a0 <__clzsi2>
    b9da:	0003      	movs	r3, r0
    b9dc:	3b0b      	subs	r3, #11
    b9de:	2b1c      	cmp	r3, #28
    b9e0:	dd00      	ble.n	b9e4 <__aeabi_dmul+0x168>
    b9e2:	e149      	b.n	bc78 <__aeabi_dmul+0x3fc>
    b9e4:	211d      	movs	r1, #29
    b9e6:	1acb      	subs	r3, r1, r3
    b9e8:	4651      	mov	r1, sl
    b9ea:	0002      	movs	r2, r0
    b9ec:	40d9      	lsrs	r1, r3
    b9ee:	4653      	mov	r3, sl
    b9f0:	3a08      	subs	r2, #8
    b9f2:	4094      	lsls	r4, r2
    b9f4:	4093      	lsls	r3, r2
    b9f6:	430c      	orrs	r4, r1
    b9f8:	4a1b      	ldr	r2, [pc, #108]	; (ba68 <__aeabi_dmul+0x1ec>)
    b9fa:	1a12      	subs	r2, r2, r0
    b9fc:	2000      	movs	r0, #0
    b9fe:	e77a      	b.n	b8f6 <__aeabi_dmul+0x7a>
    ba00:	2501      	movs	r5, #1
    ba02:	9b01      	ldr	r3, [sp, #4]
    ba04:	4c14      	ldr	r4, [pc, #80]	; (ba58 <__aeabi_dmul+0x1dc>)
    ba06:	401d      	ands	r5, r3
    ba08:	2300      	movs	r3, #0
    ba0a:	2200      	movs	r2, #0
    ba0c:	4699      	mov	r9, r3
    ba0e:	e79c      	b.n	b94a <__aeabi_dmul+0xce>
    ba10:	2400      	movs	r4, #0
    ba12:	2200      	movs	r2, #0
    ba14:	2001      	movs	r0, #1
    ba16:	e76e      	b.n	b8f6 <__aeabi_dmul+0x7a>
    ba18:	4653      	mov	r3, sl
    ba1a:	2003      	movs	r0, #3
    ba1c:	e76b      	b.n	b8f6 <__aeabi_dmul+0x7a>
    ba1e:	2300      	movs	r3, #0
    ba20:	469b      	mov	fp, r3
    ba22:	3301      	adds	r3, #1
    ba24:	2704      	movs	r7, #4
    ba26:	2600      	movs	r6, #0
    ba28:	9302      	str	r3, [sp, #8]
    ba2a:	e74c      	b.n	b8c6 <__aeabi_dmul+0x4a>
    ba2c:	2303      	movs	r3, #3
    ba2e:	4681      	mov	r9, r0
    ba30:	270c      	movs	r7, #12
    ba32:	9302      	str	r3, [sp, #8]
    ba34:	e747      	b.n	b8c6 <__aeabi_dmul+0x4a>
    ba36:	2280      	movs	r2, #128	; 0x80
    ba38:	2300      	movs	r3, #0
    ba3a:	2500      	movs	r5, #0
    ba3c:	0312      	lsls	r2, r2, #12
    ba3e:	4699      	mov	r9, r3
    ba40:	4c05      	ldr	r4, [pc, #20]	; (ba58 <__aeabi_dmul+0x1dc>)
    ba42:	e782      	b.n	b94a <__aeabi_dmul+0xce>
    ba44:	465c      	mov	r4, fp
    ba46:	464b      	mov	r3, r9
    ba48:	9802      	ldr	r0, [sp, #8]
    ba4a:	e76f      	b.n	b92c <__aeabi_dmul+0xb0>
    ba4c:	465c      	mov	r4, fp
    ba4e:	464b      	mov	r3, r9
    ba50:	9501      	str	r5, [sp, #4]
    ba52:	9802      	ldr	r0, [sp, #8]
    ba54:	e76a      	b.n	b92c <__aeabi_dmul+0xb0>
    ba56:	46c0      	nop			; (mov r8, r8)
    ba58:	000007ff 	.word	0x000007ff
    ba5c:	fffffc01 	.word	0xfffffc01
    ba60:	0000cc3c 	.word	0x0000cc3c
    ba64:	800fffff 	.word	0x800fffff
    ba68:	fffffc0d 	.word	0xfffffc0d
    ba6c:	464a      	mov	r2, r9
    ba6e:	4649      	mov	r1, r9
    ba70:	0c17      	lsrs	r7, r2, #16
    ba72:	0c1a      	lsrs	r2, r3, #16
    ba74:	041b      	lsls	r3, r3, #16
    ba76:	0c1b      	lsrs	r3, r3, #16
    ba78:	0408      	lsls	r0, r1, #16
    ba7a:	0019      	movs	r1, r3
    ba7c:	0c00      	lsrs	r0, r0, #16
    ba7e:	4341      	muls	r1, r0
    ba80:	0015      	movs	r5, r2
    ba82:	4688      	mov	r8, r1
    ba84:	0019      	movs	r1, r3
    ba86:	437d      	muls	r5, r7
    ba88:	4379      	muls	r1, r7
    ba8a:	9503      	str	r5, [sp, #12]
    ba8c:	4689      	mov	r9, r1
    ba8e:	0029      	movs	r1, r5
    ba90:	0015      	movs	r5, r2
    ba92:	4345      	muls	r5, r0
    ba94:	444d      	add	r5, r9
    ba96:	9502      	str	r5, [sp, #8]
    ba98:	4645      	mov	r5, r8
    ba9a:	0c2d      	lsrs	r5, r5, #16
    ba9c:	46aa      	mov	sl, r5
    ba9e:	9d02      	ldr	r5, [sp, #8]
    baa0:	4455      	add	r5, sl
    baa2:	45a9      	cmp	r9, r5
    baa4:	d906      	bls.n	bab4 <__aeabi_dmul+0x238>
    baa6:	468a      	mov	sl, r1
    baa8:	2180      	movs	r1, #128	; 0x80
    baaa:	0249      	lsls	r1, r1, #9
    baac:	4689      	mov	r9, r1
    baae:	44ca      	add	sl, r9
    bab0:	4651      	mov	r1, sl
    bab2:	9103      	str	r1, [sp, #12]
    bab4:	0c29      	lsrs	r1, r5, #16
    bab6:	9104      	str	r1, [sp, #16]
    bab8:	4641      	mov	r1, r8
    baba:	0409      	lsls	r1, r1, #16
    babc:	042d      	lsls	r5, r5, #16
    babe:	0c09      	lsrs	r1, r1, #16
    bac0:	4688      	mov	r8, r1
    bac2:	0029      	movs	r1, r5
    bac4:	0c25      	lsrs	r5, r4, #16
    bac6:	0424      	lsls	r4, r4, #16
    bac8:	4441      	add	r1, r8
    baca:	0c24      	lsrs	r4, r4, #16
    bacc:	9105      	str	r1, [sp, #20]
    bace:	0021      	movs	r1, r4
    bad0:	4341      	muls	r1, r0
    bad2:	4688      	mov	r8, r1
    bad4:	0021      	movs	r1, r4
    bad6:	4379      	muls	r1, r7
    bad8:	468a      	mov	sl, r1
    bada:	4368      	muls	r0, r5
    badc:	4641      	mov	r1, r8
    bade:	4450      	add	r0, sl
    bae0:	4681      	mov	r9, r0
    bae2:	0c08      	lsrs	r0, r1, #16
    bae4:	4448      	add	r0, r9
    bae6:	436f      	muls	r7, r5
    bae8:	4582      	cmp	sl, r0
    baea:	d903      	bls.n	baf4 <__aeabi_dmul+0x278>
    baec:	2180      	movs	r1, #128	; 0x80
    baee:	0249      	lsls	r1, r1, #9
    baf0:	4689      	mov	r9, r1
    baf2:	444f      	add	r7, r9
    baf4:	0c01      	lsrs	r1, r0, #16
    baf6:	4689      	mov	r9, r1
    baf8:	0039      	movs	r1, r7
    bafa:	4449      	add	r1, r9
    bafc:	9102      	str	r1, [sp, #8]
    bafe:	4641      	mov	r1, r8
    bb00:	040f      	lsls	r7, r1, #16
    bb02:	9904      	ldr	r1, [sp, #16]
    bb04:	0c3f      	lsrs	r7, r7, #16
    bb06:	4688      	mov	r8, r1
    bb08:	0400      	lsls	r0, r0, #16
    bb0a:	19c0      	adds	r0, r0, r7
    bb0c:	4480      	add	r8, r0
    bb0e:	4641      	mov	r1, r8
    bb10:	9104      	str	r1, [sp, #16]
    bb12:	4659      	mov	r1, fp
    bb14:	0c0f      	lsrs	r7, r1, #16
    bb16:	0409      	lsls	r1, r1, #16
    bb18:	0c09      	lsrs	r1, r1, #16
    bb1a:	4688      	mov	r8, r1
    bb1c:	4359      	muls	r1, r3
    bb1e:	468a      	mov	sl, r1
    bb20:	0039      	movs	r1, r7
    bb22:	4351      	muls	r1, r2
    bb24:	4689      	mov	r9, r1
    bb26:	4641      	mov	r1, r8
    bb28:	434a      	muls	r2, r1
    bb2a:	4651      	mov	r1, sl
    bb2c:	0c09      	lsrs	r1, r1, #16
    bb2e:	468b      	mov	fp, r1
    bb30:	437b      	muls	r3, r7
    bb32:	18d2      	adds	r2, r2, r3
    bb34:	445a      	add	r2, fp
    bb36:	4293      	cmp	r3, r2
    bb38:	d903      	bls.n	bb42 <__aeabi_dmul+0x2c6>
    bb3a:	2380      	movs	r3, #128	; 0x80
    bb3c:	025b      	lsls	r3, r3, #9
    bb3e:	469b      	mov	fp, r3
    bb40:	44d9      	add	r9, fp
    bb42:	4651      	mov	r1, sl
    bb44:	0409      	lsls	r1, r1, #16
    bb46:	0c09      	lsrs	r1, r1, #16
    bb48:	468a      	mov	sl, r1
    bb4a:	4641      	mov	r1, r8
    bb4c:	4361      	muls	r1, r4
    bb4e:	437c      	muls	r4, r7
    bb50:	0c13      	lsrs	r3, r2, #16
    bb52:	0412      	lsls	r2, r2, #16
    bb54:	444b      	add	r3, r9
    bb56:	4452      	add	r2, sl
    bb58:	46a1      	mov	r9, r4
    bb5a:	468a      	mov	sl, r1
    bb5c:	003c      	movs	r4, r7
    bb5e:	4641      	mov	r1, r8
    bb60:	436c      	muls	r4, r5
    bb62:	434d      	muls	r5, r1
    bb64:	4651      	mov	r1, sl
    bb66:	444d      	add	r5, r9
    bb68:	0c0f      	lsrs	r7, r1, #16
    bb6a:	197d      	adds	r5, r7, r5
    bb6c:	45a9      	cmp	r9, r5
    bb6e:	d903      	bls.n	bb78 <__aeabi_dmul+0x2fc>
    bb70:	2180      	movs	r1, #128	; 0x80
    bb72:	0249      	lsls	r1, r1, #9
    bb74:	4688      	mov	r8, r1
    bb76:	4444      	add	r4, r8
    bb78:	9f04      	ldr	r7, [sp, #16]
    bb7a:	9903      	ldr	r1, [sp, #12]
    bb7c:	46b8      	mov	r8, r7
    bb7e:	4441      	add	r1, r8
    bb80:	468b      	mov	fp, r1
    bb82:	4583      	cmp	fp, r0
    bb84:	4180      	sbcs	r0, r0
    bb86:	4241      	negs	r1, r0
    bb88:	4688      	mov	r8, r1
    bb8a:	4651      	mov	r1, sl
    bb8c:	0408      	lsls	r0, r1, #16
    bb8e:	042f      	lsls	r7, r5, #16
    bb90:	0c00      	lsrs	r0, r0, #16
    bb92:	183f      	adds	r7, r7, r0
    bb94:	4658      	mov	r0, fp
    bb96:	9902      	ldr	r1, [sp, #8]
    bb98:	1810      	adds	r0, r2, r0
    bb9a:	4689      	mov	r9, r1
    bb9c:	4290      	cmp	r0, r2
    bb9e:	4192      	sbcs	r2, r2
    bba0:	444f      	add	r7, r9
    bba2:	46ba      	mov	sl, r7
    bba4:	4252      	negs	r2, r2
    bba6:	4699      	mov	r9, r3
    bba8:	4693      	mov	fp, r2
    bbaa:	44c2      	add	sl, r8
    bbac:	44d1      	add	r9, sl
    bbae:	44cb      	add	fp, r9
    bbb0:	428f      	cmp	r7, r1
    bbb2:	41bf      	sbcs	r7, r7
    bbb4:	45c2      	cmp	sl, r8
    bbb6:	4189      	sbcs	r1, r1
    bbb8:	4599      	cmp	r9, r3
    bbba:	419b      	sbcs	r3, r3
    bbbc:	4593      	cmp	fp, r2
    bbbe:	4192      	sbcs	r2, r2
    bbc0:	427f      	negs	r7, r7
    bbc2:	4249      	negs	r1, r1
    bbc4:	0c2d      	lsrs	r5, r5, #16
    bbc6:	4252      	negs	r2, r2
    bbc8:	430f      	orrs	r7, r1
    bbca:	425b      	negs	r3, r3
    bbcc:	4313      	orrs	r3, r2
    bbce:	197f      	adds	r7, r7, r5
    bbd0:	18ff      	adds	r7, r7, r3
    bbd2:	465b      	mov	r3, fp
    bbd4:	193c      	adds	r4, r7, r4
    bbd6:	0ddb      	lsrs	r3, r3, #23
    bbd8:	9a05      	ldr	r2, [sp, #20]
    bbda:	0264      	lsls	r4, r4, #9
    bbdc:	431c      	orrs	r4, r3
    bbde:	0243      	lsls	r3, r0, #9
    bbe0:	4313      	orrs	r3, r2
    bbe2:	1e5d      	subs	r5, r3, #1
    bbe4:	41ab      	sbcs	r3, r5
    bbe6:	465a      	mov	r2, fp
    bbe8:	0dc0      	lsrs	r0, r0, #23
    bbea:	4303      	orrs	r3, r0
    bbec:	0252      	lsls	r2, r2, #9
    bbee:	4313      	orrs	r3, r2
    bbf0:	01e2      	lsls	r2, r4, #7
    bbf2:	d556      	bpl.n	bca2 <__aeabi_dmul+0x426>
    bbf4:	2001      	movs	r0, #1
    bbf6:	085a      	lsrs	r2, r3, #1
    bbf8:	4003      	ands	r3, r0
    bbfa:	4313      	orrs	r3, r2
    bbfc:	07e2      	lsls	r2, r4, #31
    bbfe:	4313      	orrs	r3, r2
    bc00:	0864      	lsrs	r4, r4, #1
    bc02:	485a      	ldr	r0, [pc, #360]	; (bd6c <__aeabi_dmul+0x4f0>)
    bc04:	4460      	add	r0, ip
    bc06:	2800      	cmp	r0, #0
    bc08:	dd4d      	ble.n	bca6 <__aeabi_dmul+0x42a>
    bc0a:	075a      	lsls	r2, r3, #29
    bc0c:	d009      	beq.n	bc22 <__aeabi_dmul+0x3a6>
    bc0e:	220f      	movs	r2, #15
    bc10:	401a      	ands	r2, r3
    bc12:	2a04      	cmp	r2, #4
    bc14:	d005      	beq.n	bc22 <__aeabi_dmul+0x3a6>
    bc16:	1d1a      	adds	r2, r3, #4
    bc18:	429a      	cmp	r2, r3
    bc1a:	419b      	sbcs	r3, r3
    bc1c:	425b      	negs	r3, r3
    bc1e:	18e4      	adds	r4, r4, r3
    bc20:	0013      	movs	r3, r2
    bc22:	01e2      	lsls	r2, r4, #7
    bc24:	d504      	bpl.n	bc30 <__aeabi_dmul+0x3b4>
    bc26:	2080      	movs	r0, #128	; 0x80
    bc28:	4a51      	ldr	r2, [pc, #324]	; (bd70 <__aeabi_dmul+0x4f4>)
    bc2a:	00c0      	lsls	r0, r0, #3
    bc2c:	4014      	ands	r4, r2
    bc2e:	4460      	add	r0, ip
    bc30:	4a50      	ldr	r2, [pc, #320]	; (bd74 <__aeabi_dmul+0x4f8>)
    bc32:	4290      	cmp	r0, r2
    bc34:	dd00      	ble.n	bc38 <__aeabi_dmul+0x3bc>
    bc36:	e6e3      	b.n	ba00 <__aeabi_dmul+0x184>
    bc38:	2501      	movs	r5, #1
    bc3a:	08db      	lsrs	r3, r3, #3
    bc3c:	0762      	lsls	r2, r4, #29
    bc3e:	431a      	orrs	r2, r3
    bc40:	0264      	lsls	r4, r4, #9
    bc42:	9b01      	ldr	r3, [sp, #4]
    bc44:	4691      	mov	r9, r2
    bc46:	0b22      	lsrs	r2, r4, #12
    bc48:	0544      	lsls	r4, r0, #21
    bc4a:	0d64      	lsrs	r4, r4, #21
    bc4c:	401d      	ands	r5, r3
    bc4e:	e67c      	b.n	b94a <__aeabi_dmul+0xce>
    bc50:	2280      	movs	r2, #128	; 0x80
    bc52:	4659      	mov	r1, fp
    bc54:	0312      	lsls	r2, r2, #12
    bc56:	4211      	tst	r1, r2
    bc58:	d008      	beq.n	bc6c <__aeabi_dmul+0x3f0>
    bc5a:	4214      	tst	r4, r2
    bc5c:	d106      	bne.n	bc6c <__aeabi_dmul+0x3f0>
    bc5e:	4322      	orrs	r2, r4
    bc60:	0312      	lsls	r2, r2, #12
    bc62:	0b12      	lsrs	r2, r2, #12
    bc64:	4645      	mov	r5, r8
    bc66:	4699      	mov	r9, r3
    bc68:	4c43      	ldr	r4, [pc, #268]	; (bd78 <__aeabi_dmul+0x4fc>)
    bc6a:	e66e      	b.n	b94a <__aeabi_dmul+0xce>
    bc6c:	465b      	mov	r3, fp
    bc6e:	431a      	orrs	r2, r3
    bc70:	0312      	lsls	r2, r2, #12
    bc72:	0b12      	lsrs	r2, r2, #12
    bc74:	4c40      	ldr	r4, [pc, #256]	; (bd78 <__aeabi_dmul+0x4fc>)
    bc76:	e668      	b.n	b94a <__aeabi_dmul+0xce>
    bc78:	0003      	movs	r3, r0
    bc7a:	4654      	mov	r4, sl
    bc7c:	3b28      	subs	r3, #40	; 0x28
    bc7e:	409c      	lsls	r4, r3
    bc80:	2300      	movs	r3, #0
    bc82:	e6b9      	b.n	b9f8 <__aeabi_dmul+0x17c>
    bc84:	f000 fc8c 	bl	c5a0 <__clzsi2>
    bc88:	3020      	adds	r0, #32
    bc8a:	e6a6      	b.n	b9da <__aeabi_dmul+0x15e>
    bc8c:	0003      	movs	r3, r0
    bc8e:	3b28      	subs	r3, #40	; 0x28
    bc90:	409f      	lsls	r7, r3
    bc92:	2300      	movs	r3, #0
    bc94:	46bb      	mov	fp, r7
    bc96:	4699      	mov	r9, r3
    bc98:	e68a      	b.n	b9b0 <__aeabi_dmul+0x134>
    bc9a:	f000 fc81 	bl	c5a0 <__clzsi2>
    bc9e:	3020      	adds	r0, #32
    bca0:	e674      	b.n	b98c <__aeabi_dmul+0x110>
    bca2:	46b4      	mov	ip, r6
    bca4:	e7ad      	b.n	bc02 <__aeabi_dmul+0x386>
    bca6:	2501      	movs	r5, #1
    bca8:	1a2a      	subs	r2, r5, r0
    bcaa:	2a38      	cmp	r2, #56	; 0x38
    bcac:	dd06      	ble.n	bcbc <__aeabi_dmul+0x440>
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	2400      	movs	r4, #0
    bcb2:	401d      	ands	r5, r3
    bcb4:	2300      	movs	r3, #0
    bcb6:	2200      	movs	r2, #0
    bcb8:	4699      	mov	r9, r3
    bcba:	e646      	b.n	b94a <__aeabi_dmul+0xce>
    bcbc:	2a1f      	cmp	r2, #31
    bcbe:	dc21      	bgt.n	bd04 <__aeabi_dmul+0x488>
    bcc0:	2520      	movs	r5, #32
    bcc2:	0020      	movs	r0, r4
    bcc4:	1aad      	subs	r5, r5, r2
    bcc6:	001e      	movs	r6, r3
    bcc8:	40ab      	lsls	r3, r5
    bcca:	40a8      	lsls	r0, r5
    bccc:	40d6      	lsrs	r6, r2
    bcce:	1e5d      	subs	r5, r3, #1
    bcd0:	41ab      	sbcs	r3, r5
    bcd2:	4330      	orrs	r0, r6
    bcd4:	4318      	orrs	r0, r3
    bcd6:	40d4      	lsrs	r4, r2
    bcd8:	0743      	lsls	r3, r0, #29
    bcda:	d009      	beq.n	bcf0 <__aeabi_dmul+0x474>
    bcdc:	230f      	movs	r3, #15
    bcde:	4003      	ands	r3, r0
    bce0:	2b04      	cmp	r3, #4
    bce2:	d005      	beq.n	bcf0 <__aeabi_dmul+0x474>
    bce4:	0003      	movs	r3, r0
    bce6:	1d18      	adds	r0, r3, #4
    bce8:	4298      	cmp	r0, r3
    bcea:	419b      	sbcs	r3, r3
    bcec:	425b      	negs	r3, r3
    bcee:	18e4      	adds	r4, r4, r3
    bcf0:	0223      	lsls	r3, r4, #8
    bcf2:	d521      	bpl.n	bd38 <__aeabi_dmul+0x4bc>
    bcf4:	2501      	movs	r5, #1
    bcf6:	9b01      	ldr	r3, [sp, #4]
    bcf8:	2401      	movs	r4, #1
    bcfa:	401d      	ands	r5, r3
    bcfc:	2300      	movs	r3, #0
    bcfe:	2200      	movs	r2, #0
    bd00:	4699      	mov	r9, r3
    bd02:	e622      	b.n	b94a <__aeabi_dmul+0xce>
    bd04:	251f      	movs	r5, #31
    bd06:	0021      	movs	r1, r4
    bd08:	426d      	negs	r5, r5
    bd0a:	1a28      	subs	r0, r5, r0
    bd0c:	40c1      	lsrs	r1, r0
    bd0e:	0008      	movs	r0, r1
    bd10:	2a20      	cmp	r2, #32
    bd12:	d01d      	beq.n	bd50 <__aeabi_dmul+0x4d4>
    bd14:	355f      	adds	r5, #95	; 0x5f
    bd16:	1aaa      	subs	r2, r5, r2
    bd18:	4094      	lsls	r4, r2
    bd1a:	4323      	orrs	r3, r4
    bd1c:	1e5c      	subs	r4, r3, #1
    bd1e:	41a3      	sbcs	r3, r4
    bd20:	2507      	movs	r5, #7
    bd22:	4303      	orrs	r3, r0
    bd24:	401d      	ands	r5, r3
    bd26:	2200      	movs	r2, #0
    bd28:	2d00      	cmp	r5, #0
    bd2a:	d009      	beq.n	bd40 <__aeabi_dmul+0x4c4>
    bd2c:	220f      	movs	r2, #15
    bd2e:	2400      	movs	r4, #0
    bd30:	401a      	ands	r2, r3
    bd32:	0018      	movs	r0, r3
    bd34:	2a04      	cmp	r2, #4
    bd36:	d1d6      	bne.n	bce6 <__aeabi_dmul+0x46a>
    bd38:	0003      	movs	r3, r0
    bd3a:	0765      	lsls	r5, r4, #29
    bd3c:	0264      	lsls	r4, r4, #9
    bd3e:	0b22      	lsrs	r2, r4, #12
    bd40:	08db      	lsrs	r3, r3, #3
    bd42:	432b      	orrs	r3, r5
    bd44:	2501      	movs	r5, #1
    bd46:	4699      	mov	r9, r3
    bd48:	9b01      	ldr	r3, [sp, #4]
    bd4a:	2400      	movs	r4, #0
    bd4c:	401d      	ands	r5, r3
    bd4e:	e5fc      	b.n	b94a <__aeabi_dmul+0xce>
    bd50:	2400      	movs	r4, #0
    bd52:	e7e2      	b.n	bd1a <__aeabi_dmul+0x49e>
    bd54:	2280      	movs	r2, #128	; 0x80
    bd56:	2501      	movs	r5, #1
    bd58:	0312      	lsls	r2, r2, #12
    bd5a:	4322      	orrs	r2, r4
    bd5c:	9901      	ldr	r1, [sp, #4]
    bd5e:	0312      	lsls	r2, r2, #12
    bd60:	0b12      	lsrs	r2, r2, #12
    bd62:	400d      	ands	r5, r1
    bd64:	4699      	mov	r9, r3
    bd66:	4c04      	ldr	r4, [pc, #16]	; (bd78 <__aeabi_dmul+0x4fc>)
    bd68:	e5ef      	b.n	b94a <__aeabi_dmul+0xce>
    bd6a:	46c0      	nop			; (mov r8, r8)
    bd6c:	000003ff 	.word	0x000003ff
    bd70:	feffffff 	.word	0xfeffffff
    bd74:	000007fe 	.word	0x000007fe
    bd78:	000007ff 	.word	0x000007ff

0000bd7c <__aeabi_dsub>:
    bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd7e:	4646      	mov	r6, r8
    bd80:	46d6      	mov	lr, sl
    bd82:	464f      	mov	r7, r9
    bd84:	030c      	lsls	r4, r1, #12
    bd86:	b5c0      	push	{r6, r7, lr}
    bd88:	0fcd      	lsrs	r5, r1, #31
    bd8a:	004e      	lsls	r6, r1, #1
    bd8c:	0a61      	lsrs	r1, r4, #9
    bd8e:	0f44      	lsrs	r4, r0, #29
    bd90:	430c      	orrs	r4, r1
    bd92:	00c1      	lsls	r1, r0, #3
    bd94:	0058      	lsls	r0, r3, #1
    bd96:	0d40      	lsrs	r0, r0, #21
    bd98:	4684      	mov	ip, r0
    bd9a:	468a      	mov	sl, r1
    bd9c:	000f      	movs	r7, r1
    bd9e:	0319      	lsls	r1, r3, #12
    bda0:	0f50      	lsrs	r0, r2, #29
    bda2:	0a49      	lsrs	r1, r1, #9
    bda4:	4301      	orrs	r1, r0
    bda6:	48c6      	ldr	r0, [pc, #792]	; (c0c0 <__aeabi_dsub+0x344>)
    bda8:	0d76      	lsrs	r6, r6, #21
    bdaa:	46a8      	mov	r8, r5
    bdac:	0fdb      	lsrs	r3, r3, #31
    bdae:	00d2      	lsls	r2, r2, #3
    bdb0:	4584      	cmp	ip, r0
    bdb2:	d100      	bne.n	bdb6 <__aeabi_dsub+0x3a>
    bdb4:	e0d8      	b.n	bf68 <__aeabi_dsub+0x1ec>
    bdb6:	2001      	movs	r0, #1
    bdb8:	4043      	eors	r3, r0
    bdba:	42ab      	cmp	r3, r5
    bdbc:	d100      	bne.n	bdc0 <__aeabi_dsub+0x44>
    bdbe:	e0a6      	b.n	bf0e <__aeabi_dsub+0x192>
    bdc0:	4660      	mov	r0, ip
    bdc2:	1a35      	subs	r5, r6, r0
    bdc4:	2d00      	cmp	r5, #0
    bdc6:	dc00      	bgt.n	bdca <__aeabi_dsub+0x4e>
    bdc8:	e105      	b.n	bfd6 <__aeabi_dsub+0x25a>
    bdca:	2800      	cmp	r0, #0
    bdcc:	d110      	bne.n	bdf0 <__aeabi_dsub+0x74>
    bdce:	000b      	movs	r3, r1
    bdd0:	4313      	orrs	r3, r2
    bdd2:	d100      	bne.n	bdd6 <__aeabi_dsub+0x5a>
    bdd4:	e0d7      	b.n	bf86 <__aeabi_dsub+0x20a>
    bdd6:	1e6b      	subs	r3, r5, #1
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d000      	beq.n	bdde <__aeabi_dsub+0x62>
    bddc:	e14b      	b.n	c076 <__aeabi_dsub+0x2fa>
    bdde:	4653      	mov	r3, sl
    bde0:	1a9f      	subs	r7, r3, r2
    bde2:	45ba      	cmp	sl, r7
    bde4:	4180      	sbcs	r0, r0
    bde6:	1a64      	subs	r4, r4, r1
    bde8:	4240      	negs	r0, r0
    bdea:	1a24      	subs	r4, r4, r0
    bdec:	2601      	movs	r6, #1
    bdee:	e01e      	b.n	be2e <__aeabi_dsub+0xb2>
    bdf0:	4bb3      	ldr	r3, [pc, #716]	; (c0c0 <__aeabi_dsub+0x344>)
    bdf2:	429e      	cmp	r6, r3
    bdf4:	d048      	beq.n	be88 <__aeabi_dsub+0x10c>
    bdf6:	2380      	movs	r3, #128	; 0x80
    bdf8:	041b      	lsls	r3, r3, #16
    bdfa:	4319      	orrs	r1, r3
    bdfc:	2d38      	cmp	r5, #56	; 0x38
    bdfe:	dd00      	ble.n	be02 <__aeabi_dsub+0x86>
    be00:	e119      	b.n	c036 <__aeabi_dsub+0x2ba>
    be02:	2d1f      	cmp	r5, #31
    be04:	dd00      	ble.n	be08 <__aeabi_dsub+0x8c>
    be06:	e14c      	b.n	c0a2 <__aeabi_dsub+0x326>
    be08:	2320      	movs	r3, #32
    be0a:	000f      	movs	r7, r1
    be0c:	1b5b      	subs	r3, r3, r5
    be0e:	0010      	movs	r0, r2
    be10:	409a      	lsls	r2, r3
    be12:	409f      	lsls	r7, r3
    be14:	40e8      	lsrs	r0, r5
    be16:	1e53      	subs	r3, r2, #1
    be18:	419a      	sbcs	r2, r3
    be1a:	40e9      	lsrs	r1, r5
    be1c:	4307      	orrs	r7, r0
    be1e:	4317      	orrs	r7, r2
    be20:	4653      	mov	r3, sl
    be22:	1bdf      	subs	r7, r3, r7
    be24:	1a61      	subs	r1, r4, r1
    be26:	45ba      	cmp	sl, r7
    be28:	41a4      	sbcs	r4, r4
    be2a:	4264      	negs	r4, r4
    be2c:	1b0c      	subs	r4, r1, r4
    be2e:	0223      	lsls	r3, r4, #8
    be30:	d400      	bmi.n	be34 <__aeabi_dsub+0xb8>
    be32:	e0c5      	b.n	bfc0 <__aeabi_dsub+0x244>
    be34:	0264      	lsls	r4, r4, #9
    be36:	0a65      	lsrs	r5, r4, #9
    be38:	2d00      	cmp	r5, #0
    be3a:	d100      	bne.n	be3e <__aeabi_dsub+0xc2>
    be3c:	e0f6      	b.n	c02c <__aeabi_dsub+0x2b0>
    be3e:	0028      	movs	r0, r5
    be40:	f000 fbae 	bl	c5a0 <__clzsi2>
    be44:	0003      	movs	r3, r0
    be46:	3b08      	subs	r3, #8
    be48:	2b1f      	cmp	r3, #31
    be4a:	dd00      	ble.n	be4e <__aeabi_dsub+0xd2>
    be4c:	e0e9      	b.n	c022 <__aeabi_dsub+0x2a6>
    be4e:	2220      	movs	r2, #32
    be50:	003c      	movs	r4, r7
    be52:	1ad2      	subs	r2, r2, r3
    be54:	409d      	lsls	r5, r3
    be56:	40d4      	lsrs	r4, r2
    be58:	409f      	lsls	r7, r3
    be5a:	4325      	orrs	r5, r4
    be5c:	429e      	cmp	r6, r3
    be5e:	dd00      	ble.n	be62 <__aeabi_dsub+0xe6>
    be60:	e0db      	b.n	c01a <__aeabi_dsub+0x29e>
    be62:	1b9e      	subs	r6, r3, r6
    be64:	1c73      	adds	r3, r6, #1
    be66:	2b1f      	cmp	r3, #31
    be68:	dd00      	ble.n	be6c <__aeabi_dsub+0xf0>
    be6a:	e10a      	b.n	c082 <__aeabi_dsub+0x306>
    be6c:	2220      	movs	r2, #32
    be6e:	0038      	movs	r0, r7
    be70:	1ad2      	subs	r2, r2, r3
    be72:	0029      	movs	r1, r5
    be74:	4097      	lsls	r7, r2
    be76:	002c      	movs	r4, r5
    be78:	4091      	lsls	r1, r2
    be7a:	40d8      	lsrs	r0, r3
    be7c:	1e7a      	subs	r2, r7, #1
    be7e:	4197      	sbcs	r7, r2
    be80:	40dc      	lsrs	r4, r3
    be82:	2600      	movs	r6, #0
    be84:	4301      	orrs	r1, r0
    be86:	430f      	orrs	r7, r1
    be88:	077b      	lsls	r3, r7, #29
    be8a:	d009      	beq.n	bea0 <__aeabi_dsub+0x124>
    be8c:	230f      	movs	r3, #15
    be8e:	403b      	ands	r3, r7
    be90:	2b04      	cmp	r3, #4
    be92:	d005      	beq.n	bea0 <__aeabi_dsub+0x124>
    be94:	1d3b      	adds	r3, r7, #4
    be96:	42bb      	cmp	r3, r7
    be98:	41bf      	sbcs	r7, r7
    be9a:	427f      	negs	r7, r7
    be9c:	19e4      	adds	r4, r4, r7
    be9e:	001f      	movs	r7, r3
    bea0:	0223      	lsls	r3, r4, #8
    bea2:	d525      	bpl.n	bef0 <__aeabi_dsub+0x174>
    bea4:	4b86      	ldr	r3, [pc, #536]	; (c0c0 <__aeabi_dsub+0x344>)
    bea6:	3601      	adds	r6, #1
    bea8:	429e      	cmp	r6, r3
    beaa:	d100      	bne.n	beae <__aeabi_dsub+0x132>
    beac:	e0af      	b.n	c00e <__aeabi_dsub+0x292>
    beae:	4b85      	ldr	r3, [pc, #532]	; (c0c4 <__aeabi_dsub+0x348>)
    beb0:	2501      	movs	r5, #1
    beb2:	401c      	ands	r4, r3
    beb4:	4643      	mov	r3, r8
    beb6:	0762      	lsls	r2, r4, #29
    beb8:	08ff      	lsrs	r7, r7, #3
    beba:	0264      	lsls	r4, r4, #9
    bebc:	0576      	lsls	r6, r6, #21
    bebe:	4317      	orrs	r7, r2
    bec0:	0b24      	lsrs	r4, r4, #12
    bec2:	0d76      	lsrs	r6, r6, #21
    bec4:	401d      	ands	r5, r3
    bec6:	2100      	movs	r1, #0
    bec8:	0324      	lsls	r4, r4, #12
    beca:	0b23      	lsrs	r3, r4, #12
    becc:	0d0c      	lsrs	r4, r1, #20
    bece:	4a7e      	ldr	r2, [pc, #504]	; (c0c8 <__aeabi_dsub+0x34c>)
    bed0:	0524      	lsls	r4, r4, #20
    bed2:	431c      	orrs	r4, r3
    bed4:	4014      	ands	r4, r2
    bed6:	0533      	lsls	r3, r6, #20
    bed8:	4323      	orrs	r3, r4
    beda:	005b      	lsls	r3, r3, #1
    bedc:	07ed      	lsls	r5, r5, #31
    bede:	085b      	lsrs	r3, r3, #1
    bee0:	432b      	orrs	r3, r5
    bee2:	0038      	movs	r0, r7
    bee4:	0019      	movs	r1, r3
    bee6:	bc1c      	pop	{r2, r3, r4}
    bee8:	4690      	mov	r8, r2
    beea:	4699      	mov	r9, r3
    beec:	46a2      	mov	sl, r4
    beee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bef0:	2501      	movs	r5, #1
    bef2:	4643      	mov	r3, r8
    bef4:	0762      	lsls	r2, r4, #29
    bef6:	08ff      	lsrs	r7, r7, #3
    bef8:	4317      	orrs	r7, r2
    befa:	08e4      	lsrs	r4, r4, #3
    befc:	401d      	ands	r5, r3
    befe:	4b70      	ldr	r3, [pc, #448]	; (c0c0 <__aeabi_dsub+0x344>)
    bf00:	429e      	cmp	r6, r3
    bf02:	d036      	beq.n	bf72 <__aeabi_dsub+0x1f6>
    bf04:	0324      	lsls	r4, r4, #12
    bf06:	0576      	lsls	r6, r6, #21
    bf08:	0b24      	lsrs	r4, r4, #12
    bf0a:	0d76      	lsrs	r6, r6, #21
    bf0c:	e7db      	b.n	bec6 <__aeabi_dsub+0x14a>
    bf0e:	4663      	mov	r3, ip
    bf10:	1af3      	subs	r3, r6, r3
    bf12:	2b00      	cmp	r3, #0
    bf14:	dc00      	bgt.n	bf18 <__aeabi_dsub+0x19c>
    bf16:	e094      	b.n	c042 <__aeabi_dsub+0x2c6>
    bf18:	4660      	mov	r0, ip
    bf1a:	2800      	cmp	r0, #0
    bf1c:	d035      	beq.n	bf8a <__aeabi_dsub+0x20e>
    bf1e:	4868      	ldr	r0, [pc, #416]	; (c0c0 <__aeabi_dsub+0x344>)
    bf20:	4286      	cmp	r6, r0
    bf22:	d0b1      	beq.n	be88 <__aeabi_dsub+0x10c>
    bf24:	2780      	movs	r7, #128	; 0x80
    bf26:	043f      	lsls	r7, r7, #16
    bf28:	4339      	orrs	r1, r7
    bf2a:	2b38      	cmp	r3, #56	; 0x38
    bf2c:	dc00      	bgt.n	bf30 <__aeabi_dsub+0x1b4>
    bf2e:	e0fd      	b.n	c12c <__aeabi_dsub+0x3b0>
    bf30:	430a      	orrs	r2, r1
    bf32:	0017      	movs	r7, r2
    bf34:	2100      	movs	r1, #0
    bf36:	1e7a      	subs	r2, r7, #1
    bf38:	4197      	sbcs	r7, r2
    bf3a:	4457      	add	r7, sl
    bf3c:	4557      	cmp	r7, sl
    bf3e:	4180      	sbcs	r0, r0
    bf40:	1909      	adds	r1, r1, r4
    bf42:	4244      	negs	r4, r0
    bf44:	190c      	adds	r4, r1, r4
    bf46:	0223      	lsls	r3, r4, #8
    bf48:	d53a      	bpl.n	bfc0 <__aeabi_dsub+0x244>
    bf4a:	4b5d      	ldr	r3, [pc, #372]	; (c0c0 <__aeabi_dsub+0x344>)
    bf4c:	3601      	adds	r6, #1
    bf4e:	429e      	cmp	r6, r3
    bf50:	d100      	bne.n	bf54 <__aeabi_dsub+0x1d8>
    bf52:	e14b      	b.n	c1ec <__aeabi_dsub+0x470>
    bf54:	2201      	movs	r2, #1
    bf56:	4b5b      	ldr	r3, [pc, #364]	; (c0c4 <__aeabi_dsub+0x348>)
    bf58:	401c      	ands	r4, r3
    bf5a:	087b      	lsrs	r3, r7, #1
    bf5c:	4017      	ands	r7, r2
    bf5e:	431f      	orrs	r7, r3
    bf60:	07e2      	lsls	r2, r4, #31
    bf62:	4317      	orrs	r7, r2
    bf64:	0864      	lsrs	r4, r4, #1
    bf66:	e78f      	b.n	be88 <__aeabi_dsub+0x10c>
    bf68:	0008      	movs	r0, r1
    bf6a:	4310      	orrs	r0, r2
    bf6c:	d000      	beq.n	bf70 <__aeabi_dsub+0x1f4>
    bf6e:	e724      	b.n	bdba <__aeabi_dsub+0x3e>
    bf70:	e721      	b.n	bdb6 <__aeabi_dsub+0x3a>
    bf72:	0023      	movs	r3, r4
    bf74:	433b      	orrs	r3, r7
    bf76:	d100      	bne.n	bf7a <__aeabi_dsub+0x1fe>
    bf78:	e1b9      	b.n	c2ee <__aeabi_dsub+0x572>
    bf7a:	2280      	movs	r2, #128	; 0x80
    bf7c:	0312      	lsls	r2, r2, #12
    bf7e:	4314      	orrs	r4, r2
    bf80:	0324      	lsls	r4, r4, #12
    bf82:	0b24      	lsrs	r4, r4, #12
    bf84:	e79f      	b.n	bec6 <__aeabi_dsub+0x14a>
    bf86:	002e      	movs	r6, r5
    bf88:	e77e      	b.n	be88 <__aeabi_dsub+0x10c>
    bf8a:	0008      	movs	r0, r1
    bf8c:	4310      	orrs	r0, r2
    bf8e:	d100      	bne.n	bf92 <__aeabi_dsub+0x216>
    bf90:	e0ca      	b.n	c128 <__aeabi_dsub+0x3ac>
    bf92:	1e58      	subs	r0, r3, #1
    bf94:	4684      	mov	ip, r0
    bf96:	2800      	cmp	r0, #0
    bf98:	d000      	beq.n	bf9c <__aeabi_dsub+0x220>
    bf9a:	e0e7      	b.n	c16c <__aeabi_dsub+0x3f0>
    bf9c:	4452      	add	r2, sl
    bf9e:	4552      	cmp	r2, sl
    bfa0:	4180      	sbcs	r0, r0
    bfa2:	1864      	adds	r4, r4, r1
    bfa4:	4240      	negs	r0, r0
    bfa6:	1824      	adds	r4, r4, r0
    bfa8:	0017      	movs	r7, r2
    bfaa:	2601      	movs	r6, #1
    bfac:	0223      	lsls	r3, r4, #8
    bfae:	d507      	bpl.n	bfc0 <__aeabi_dsub+0x244>
    bfb0:	2602      	movs	r6, #2
    bfb2:	e7cf      	b.n	bf54 <__aeabi_dsub+0x1d8>
    bfb4:	4664      	mov	r4, ip
    bfb6:	432c      	orrs	r4, r5
    bfb8:	d100      	bne.n	bfbc <__aeabi_dsub+0x240>
    bfba:	e1b3      	b.n	c324 <__aeabi_dsub+0x5a8>
    bfbc:	002c      	movs	r4, r5
    bfbe:	4667      	mov	r7, ip
    bfc0:	077b      	lsls	r3, r7, #29
    bfc2:	d000      	beq.n	bfc6 <__aeabi_dsub+0x24a>
    bfc4:	e762      	b.n	be8c <__aeabi_dsub+0x110>
    bfc6:	0763      	lsls	r3, r4, #29
    bfc8:	08ff      	lsrs	r7, r7, #3
    bfca:	431f      	orrs	r7, r3
    bfcc:	2501      	movs	r5, #1
    bfce:	4643      	mov	r3, r8
    bfd0:	08e4      	lsrs	r4, r4, #3
    bfd2:	401d      	ands	r5, r3
    bfd4:	e793      	b.n	befe <__aeabi_dsub+0x182>
    bfd6:	2d00      	cmp	r5, #0
    bfd8:	d178      	bne.n	c0cc <__aeabi_dsub+0x350>
    bfda:	1c75      	adds	r5, r6, #1
    bfdc:	056d      	lsls	r5, r5, #21
    bfde:	0d6d      	lsrs	r5, r5, #21
    bfe0:	2d01      	cmp	r5, #1
    bfe2:	dc00      	bgt.n	bfe6 <__aeabi_dsub+0x26a>
    bfe4:	e0f2      	b.n	c1cc <__aeabi_dsub+0x450>
    bfe6:	4650      	mov	r0, sl
    bfe8:	1a80      	subs	r0, r0, r2
    bfea:	4582      	cmp	sl, r0
    bfec:	41bf      	sbcs	r7, r7
    bfee:	1a65      	subs	r5, r4, r1
    bff0:	427f      	negs	r7, r7
    bff2:	1bed      	subs	r5, r5, r7
    bff4:	4684      	mov	ip, r0
    bff6:	0228      	lsls	r0, r5, #8
    bff8:	d400      	bmi.n	bffc <__aeabi_dsub+0x280>
    bffa:	e08c      	b.n	c116 <__aeabi_dsub+0x39a>
    bffc:	4650      	mov	r0, sl
    bffe:	1a17      	subs	r7, r2, r0
    c000:	42ba      	cmp	r2, r7
    c002:	4192      	sbcs	r2, r2
    c004:	1b0c      	subs	r4, r1, r4
    c006:	4255      	negs	r5, r2
    c008:	1b65      	subs	r5, r4, r5
    c00a:	4698      	mov	r8, r3
    c00c:	e714      	b.n	be38 <__aeabi_dsub+0xbc>
    c00e:	2501      	movs	r5, #1
    c010:	4643      	mov	r3, r8
    c012:	2400      	movs	r4, #0
    c014:	401d      	ands	r5, r3
    c016:	2700      	movs	r7, #0
    c018:	e755      	b.n	bec6 <__aeabi_dsub+0x14a>
    c01a:	4c2a      	ldr	r4, [pc, #168]	; (c0c4 <__aeabi_dsub+0x348>)
    c01c:	1af6      	subs	r6, r6, r3
    c01e:	402c      	ands	r4, r5
    c020:	e732      	b.n	be88 <__aeabi_dsub+0x10c>
    c022:	003d      	movs	r5, r7
    c024:	3828      	subs	r0, #40	; 0x28
    c026:	4085      	lsls	r5, r0
    c028:	2700      	movs	r7, #0
    c02a:	e717      	b.n	be5c <__aeabi_dsub+0xe0>
    c02c:	0038      	movs	r0, r7
    c02e:	f000 fab7 	bl	c5a0 <__clzsi2>
    c032:	3020      	adds	r0, #32
    c034:	e706      	b.n	be44 <__aeabi_dsub+0xc8>
    c036:	430a      	orrs	r2, r1
    c038:	0017      	movs	r7, r2
    c03a:	2100      	movs	r1, #0
    c03c:	1e7a      	subs	r2, r7, #1
    c03e:	4197      	sbcs	r7, r2
    c040:	e6ee      	b.n	be20 <__aeabi_dsub+0xa4>
    c042:	2b00      	cmp	r3, #0
    c044:	d000      	beq.n	c048 <__aeabi_dsub+0x2cc>
    c046:	e0e5      	b.n	c214 <__aeabi_dsub+0x498>
    c048:	1c73      	adds	r3, r6, #1
    c04a:	469c      	mov	ip, r3
    c04c:	055b      	lsls	r3, r3, #21
    c04e:	0d5b      	lsrs	r3, r3, #21
    c050:	2b01      	cmp	r3, #1
    c052:	dc00      	bgt.n	c056 <__aeabi_dsub+0x2da>
    c054:	e09f      	b.n	c196 <__aeabi_dsub+0x41a>
    c056:	4b1a      	ldr	r3, [pc, #104]	; (c0c0 <__aeabi_dsub+0x344>)
    c058:	459c      	cmp	ip, r3
    c05a:	d100      	bne.n	c05e <__aeabi_dsub+0x2e2>
    c05c:	e0c5      	b.n	c1ea <__aeabi_dsub+0x46e>
    c05e:	4452      	add	r2, sl
    c060:	4552      	cmp	r2, sl
    c062:	4180      	sbcs	r0, r0
    c064:	1864      	adds	r4, r4, r1
    c066:	4240      	negs	r0, r0
    c068:	1824      	adds	r4, r4, r0
    c06a:	07e7      	lsls	r7, r4, #31
    c06c:	0852      	lsrs	r2, r2, #1
    c06e:	4317      	orrs	r7, r2
    c070:	0864      	lsrs	r4, r4, #1
    c072:	4666      	mov	r6, ip
    c074:	e708      	b.n	be88 <__aeabi_dsub+0x10c>
    c076:	4812      	ldr	r0, [pc, #72]	; (c0c0 <__aeabi_dsub+0x344>)
    c078:	4285      	cmp	r5, r0
    c07a:	d100      	bne.n	c07e <__aeabi_dsub+0x302>
    c07c:	e085      	b.n	c18a <__aeabi_dsub+0x40e>
    c07e:	001d      	movs	r5, r3
    c080:	e6bc      	b.n	bdfc <__aeabi_dsub+0x80>
    c082:	0029      	movs	r1, r5
    c084:	3e1f      	subs	r6, #31
    c086:	40f1      	lsrs	r1, r6
    c088:	2b20      	cmp	r3, #32
    c08a:	d100      	bne.n	c08e <__aeabi_dsub+0x312>
    c08c:	e07f      	b.n	c18e <__aeabi_dsub+0x412>
    c08e:	2240      	movs	r2, #64	; 0x40
    c090:	1ad3      	subs	r3, r2, r3
    c092:	409d      	lsls	r5, r3
    c094:	432f      	orrs	r7, r5
    c096:	1e7d      	subs	r5, r7, #1
    c098:	41af      	sbcs	r7, r5
    c09a:	2400      	movs	r4, #0
    c09c:	430f      	orrs	r7, r1
    c09e:	2600      	movs	r6, #0
    c0a0:	e78e      	b.n	bfc0 <__aeabi_dsub+0x244>
    c0a2:	002b      	movs	r3, r5
    c0a4:	000f      	movs	r7, r1
    c0a6:	3b20      	subs	r3, #32
    c0a8:	40df      	lsrs	r7, r3
    c0aa:	2d20      	cmp	r5, #32
    c0ac:	d071      	beq.n	c192 <__aeabi_dsub+0x416>
    c0ae:	2340      	movs	r3, #64	; 0x40
    c0b0:	1b5d      	subs	r5, r3, r5
    c0b2:	40a9      	lsls	r1, r5
    c0b4:	430a      	orrs	r2, r1
    c0b6:	1e51      	subs	r1, r2, #1
    c0b8:	418a      	sbcs	r2, r1
    c0ba:	2100      	movs	r1, #0
    c0bc:	4317      	orrs	r7, r2
    c0be:	e6af      	b.n	be20 <__aeabi_dsub+0xa4>
    c0c0:	000007ff 	.word	0x000007ff
    c0c4:	ff7fffff 	.word	0xff7fffff
    c0c8:	800fffff 	.word	0x800fffff
    c0cc:	2e00      	cmp	r6, #0
    c0ce:	d03e      	beq.n	c14e <__aeabi_dsub+0x3d2>
    c0d0:	4eb3      	ldr	r6, [pc, #716]	; (c3a0 <__aeabi_dsub+0x624>)
    c0d2:	45b4      	cmp	ip, r6
    c0d4:	d045      	beq.n	c162 <__aeabi_dsub+0x3e6>
    c0d6:	2680      	movs	r6, #128	; 0x80
    c0d8:	0436      	lsls	r6, r6, #16
    c0da:	426d      	negs	r5, r5
    c0dc:	4334      	orrs	r4, r6
    c0de:	2d38      	cmp	r5, #56	; 0x38
    c0e0:	dd00      	ble.n	c0e4 <__aeabi_dsub+0x368>
    c0e2:	e0a8      	b.n	c236 <__aeabi_dsub+0x4ba>
    c0e4:	2d1f      	cmp	r5, #31
    c0e6:	dd00      	ble.n	c0ea <__aeabi_dsub+0x36e>
    c0e8:	e11f      	b.n	c32a <__aeabi_dsub+0x5ae>
    c0ea:	2620      	movs	r6, #32
    c0ec:	0027      	movs	r7, r4
    c0ee:	4650      	mov	r0, sl
    c0f0:	1b76      	subs	r6, r6, r5
    c0f2:	40b7      	lsls	r7, r6
    c0f4:	40e8      	lsrs	r0, r5
    c0f6:	4307      	orrs	r7, r0
    c0f8:	4650      	mov	r0, sl
    c0fa:	40b0      	lsls	r0, r6
    c0fc:	1e46      	subs	r6, r0, #1
    c0fe:	41b0      	sbcs	r0, r6
    c100:	40ec      	lsrs	r4, r5
    c102:	4338      	orrs	r0, r7
    c104:	1a17      	subs	r7, r2, r0
    c106:	42ba      	cmp	r2, r7
    c108:	4192      	sbcs	r2, r2
    c10a:	1b0c      	subs	r4, r1, r4
    c10c:	4252      	negs	r2, r2
    c10e:	1aa4      	subs	r4, r4, r2
    c110:	4666      	mov	r6, ip
    c112:	4698      	mov	r8, r3
    c114:	e68b      	b.n	be2e <__aeabi_dsub+0xb2>
    c116:	4664      	mov	r4, ip
    c118:	4667      	mov	r7, ip
    c11a:	432c      	orrs	r4, r5
    c11c:	d000      	beq.n	c120 <__aeabi_dsub+0x3a4>
    c11e:	e68b      	b.n	be38 <__aeabi_dsub+0xbc>
    c120:	2500      	movs	r5, #0
    c122:	2600      	movs	r6, #0
    c124:	2700      	movs	r7, #0
    c126:	e6ea      	b.n	befe <__aeabi_dsub+0x182>
    c128:	001e      	movs	r6, r3
    c12a:	e6ad      	b.n	be88 <__aeabi_dsub+0x10c>
    c12c:	2b1f      	cmp	r3, #31
    c12e:	dc60      	bgt.n	c1f2 <__aeabi_dsub+0x476>
    c130:	2720      	movs	r7, #32
    c132:	1af8      	subs	r0, r7, r3
    c134:	000f      	movs	r7, r1
    c136:	4684      	mov	ip, r0
    c138:	4087      	lsls	r7, r0
    c13a:	0010      	movs	r0, r2
    c13c:	40d8      	lsrs	r0, r3
    c13e:	4307      	orrs	r7, r0
    c140:	4660      	mov	r0, ip
    c142:	4082      	lsls	r2, r0
    c144:	1e50      	subs	r0, r2, #1
    c146:	4182      	sbcs	r2, r0
    c148:	40d9      	lsrs	r1, r3
    c14a:	4317      	orrs	r7, r2
    c14c:	e6f5      	b.n	bf3a <__aeabi_dsub+0x1be>
    c14e:	0026      	movs	r6, r4
    c150:	4650      	mov	r0, sl
    c152:	4306      	orrs	r6, r0
    c154:	d005      	beq.n	c162 <__aeabi_dsub+0x3e6>
    c156:	43ed      	mvns	r5, r5
    c158:	2d00      	cmp	r5, #0
    c15a:	d0d3      	beq.n	c104 <__aeabi_dsub+0x388>
    c15c:	4e90      	ldr	r6, [pc, #576]	; (c3a0 <__aeabi_dsub+0x624>)
    c15e:	45b4      	cmp	ip, r6
    c160:	d1bd      	bne.n	c0de <__aeabi_dsub+0x362>
    c162:	000c      	movs	r4, r1
    c164:	0017      	movs	r7, r2
    c166:	4666      	mov	r6, ip
    c168:	4698      	mov	r8, r3
    c16a:	e68d      	b.n	be88 <__aeabi_dsub+0x10c>
    c16c:	488c      	ldr	r0, [pc, #560]	; (c3a0 <__aeabi_dsub+0x624>)
    c16e:	4283      	cmp	r3, r0
    c170:	d00b      	beq.n	c18a <__aeabi_dsub+0x40e>
    c172:	4663      	mov	r3, ip
    c174:	e6d9      	b.n	bf2a <__aeabi_dsub+0x1ae>
    c176:	2d00      	cmp	r5, #0
    c178:	d000      	beq.n	c17c <__aeabi_dsub+0x400>
    c17a:	e096      	b.n	c2aa <__aeabi_dsub+0x52e>
    c17c:	0008      	movs	r0, r1
    c17e:	4310      	orrs	r0, r2
    c180:	d100      	bne.n	c184 <__aeabi_dsub+0x408>
    c182:	e0e2      	b.n	c34a <__aeabi_dsub+0x5ce>
    c184:	000c      	movs	r4, r1
    c186:	0017      	movs	r7, r2
    c188:	4698      	mov	r8, r3
    c18a:	4e85      	ldr	r6, [pc, #532]	; (c3a0 <__aeabi_dsub+0x624>)
    c18c:	e67c      	b.n	be88 <__aeabi_dsub+0x10c>
    c18e:	2500      	movs	r5, #0
    c190:	e780      	b.n	c094 <__aeabi_dsub+0x318>
    c192:	2100      	movs	r1, #0
    c194:	e78e      	b.n	c0b4 <__aeabi_dsub+0x338>
    c196:	0023      	movs	r3, r4
    c198:	4650      	mov	r0, sl
    c19a:	4303      	orrs	r3, r0
    c19c:	2e00      	cmp	r6, #0
    c19e:	d000      	beq.n	c1a2 <__aeabi_dsub+0x426>
    c1a0:	e0a8      	b.n	c2f4 <__aeabi_dsub+0x578>
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d100      	bne.n	c1a8 <__aeabi_dsub+0x42c>
    c1a6:	e0de      	b.n	c366 <__aeabi_dsub+0x5ea>
    c1a8:	000b      	movs	r3, r1
    c1aa:	4313      	orrs	r3, r2
    c1ac:	d100      	bne.n	c1b0 <__aeabi_dsub+0x434>
    c1ae:	e66b      	b.n	be88 <__aeabi_dsub+0x10c>
    c1b0:	4452      	add	r2, sl
    c1b2:	4552      	cmp	r2, sl
    c1b4:	4180      	sbcs	r0, r0
    c1b6:	1864      	adds	r4, r4, r1
    c1b8:	4240      	negs	r0, r0
    c1ba:	1824      	adds	r4, r4, r0
    c1bc:	0017      	movs	r7, r2
    c1be:	0223      	lsls	r3, r4, #8
    c1c0:	d400      	bmi.n	c1c4 <__aeabi_dsub+0x448>
    c1c2:	e6fd      	b.n	bfc0 <__aeabi_dsub+0x244>
    c1c4:	4b77      	ldr	r3, [pc, #476]	; (c3a4 <__aeabi_dsub+0x628>)
    c1c6:	4666      	mov	r6, ip
    c1c8:	401c      	ands	r4, r3
    c1ca:	e65d      	b.n	be88 <__aeabi_dsub+0x10c>
    c1cc:	0025      	movs	r5, r4
    c1ce:	4650      	mov	r0, sl
    c1d0:	4305      	orrs	r5, r0
    c1d2:	2e00      	cmp	r6, #0
    c1d4:	d1cf      	bne.n	c176 <__aeabi_dsub+0x3fa>
    c1d6:	2d00      	cmp	r5, #0
    c1d8:	d14f      	bne.n	c27a <__aeabi_dsub+0x4fe>
    c1da:	000c      	movs	r4, r1
    c1dc:	4314      	orrs	r4, r2
    c1de:	d100      	bne.n	c1e2 <__aeabi_dsub+0x466>
    c1e0:	e0a0      	b.n	c324 <__aeabi_dsub+0x5a8>
    c1e2:	000c      	movs	r4, r1
    c1e4:	0017      	movs	r7, r2
    c1e6:	4698      	mov	r8, r3
    c1e8:	e64e      	b.n	be88 <__aeabi_dsub+0x10c>
    c1ea:	4666      	mov	r6, ip
    c1ec:	2400      	movs	r4, #0
    c1ee:	2700      	movs	r7, #0
    c1f0:	e685      	b.n	befe <__aeabi_dsub+0x182>
    c1f2:	001f      	movs	r7, r3
    c1f4:	0008      	movs	r0, r1
    c1f6:	3f20      	subs	r7, #32
    c1f8:	40f8      	lsrs	r0, r7
    c1fa:	0007      	movs	r7, r0
    c1fc:	2b20      	cmp	r3, #32
    c1fe:	d100      	bne.n	c202 <__aeabi_dsub+0x486>
    c200:	e08e      	b.n	c320 <__aeabi_dsub+0x5a4>
    c202:	2040      	movs	r0, #64	; 0x40
    c204:	1ac3      	subs	r3, r0, r3
    c206:	4099      	lsls	r1, r3
    c208:	430a      	orrs	r2, r1
    c20a:	1e51      	subs	r1, r2, #1
    c20c:	418a      	sbcs	r2, r1
    c20e:	2100      	movs	r1, #0
    c210:	4317      	orrs	r7, r2
    c212:	e692      	b.n	bf3a <__aeabi_dsub+0x1be>
    c214:	2e00      	cmp	r6, #0
    c216:	d114      	bne.n	c242 <__aeabi_dsub+0x4c6>
    c218:	0026      	movs	r6, r4
    c21a:	4650      	mov	r0, sl
    c21c:	4306      	orrs	r6, r0
    c21e:	d062      	beq.n	c2e6 <__aeabi_dsub+0x56a>
    c220:	43db      	mvns	r3, r3
    c222:	2b00      	cmp	r3, #0
    c224:	d15c      	bne.n	c2e0 <__aeabi_dsub+0x564>
    c226:	1887      	adds	r7, r0, r2
    c228:	4297      	cmp	r7, r2
    c22a:	4192      	sbcs	r2, r2
    c22c:	1864      	adds	r4, r4, r1
    c22e:	4252      	negs	r2, r2
    c230:	18a4      	adds	r4, r4, r2
    c232:	4666      	mov	r6, ip
    c234:	e687      	b.n	bf46 <__aeabi_dsub+0x1ca>
    c236:	4650      	mov	r0, sl
    c238:	4320      	orrs	r0, r4
    c23a:	1e44      	subs	r4, r0, #1
    c23c:	41a0      	sbcs	r0, r4
    c23e:	2400      	movs	r4, #0
    c240:	e760      	b.n	c104 <__aeabi_dsub+0x388>
    c242:	4e57      	ldr	r6, [pc, #348]	; (c3a0 <__aeabi_dsub+0x624>)
    c244:	45b4      	cmp	ip, r6
    c246:	d04e      	beq.n	c2e6 <__aeabi_dsub+0x56a>
    c248:	2680      	movs	r6, #128	; 0x80
    c24a:	0436      	lsls	r6, r6, #16
    c24c:	425b      	negs	r3, r3
    c24e:	4334      	orrs	r4, r6
    c250:	2b38      	cmp	r3, #56	; 0x38
    c252:	dd00      	ble.n	c256 <__aeabi_dsub+0x4da>
    c254:	e07f      	b.n	c356 <__aeabi_dsub+0x5da>
    c256:	2b1f      	cmp	r3, #31
    c258:	dd00      	ble.n	c25c <__aeabi_dsub+0x4e0>
    c25a:	e08b      	b.n	c374 <__aeabi_dsub+0x5f8>
    c25c:	2620      	movs	r6, #32
    c25e:	0027      	movs	r7, r4
    c260:	4650      	mov	r0, sl
    c262:	1af6      	subs	r6, r6, r3
    c264:	40b7      	lsls	r7, r6
    c266:	40d8      	lsrs	r0, r3
    c268:	4307      	orrs	r7, r0
    c26a:	4650      	mov	r0, sl
    c26c:	40b0      	lsls	r0, r6
    c26e:	1e46      	subs	r6, r0, #1
    c270:	41b0      	sbcs	r0, r6
    c272:	4307      	orrs	r7, r0
    c274:	40dc      	lsrs	r4, r3
    c276:	18bf      	adds	r7, r7, r2
    c278:	e7d6      	b.n	c228 <__aeabi_dsub+0x4ac>
    c27a:	000d      	movs	r5, r1
    c27c:	4315      	orrs	r5, r2
    c27e:	d100      	bne.n	c282 <__aeabi_dsub+0x506>
    c280:	e602      	b.n	be88 <__aeabi_dsub+0x10c>
    c282:	4650      	mov	r0, sl
    c284:	1a80      	subs	r0, r0, r2
    c286:	4582      	cmp	sl, r0
    c288:	41bf      	sbcs	r7, r7
    c28a:	1a65      	subs	r5, r4, r1
    c28c:	427f      	negs	r7, r7
    c28e:	1bed      	subs	r5, r5, r7
    c290:	4684      	mov	ip, r0
    c292:	0228      	lsls	r0, r5, #8
    c294:	d400      	bmi.n	c298 <__aeabi_dsub+0x51c>
    c296:	e68d      	b.n	bfb4 <__aeabi_dsub+0x238>
    c298:	4650      	mov	r0, sl
    c29a:	1a17      	subs	r7, r2, r0
    c29c:	42ba      	cmp	r2, r7
    c29e:	4192      	sbcs	r2, r2
    c2a0:	1b0c      	subs	r4, r1, r4
    c2a2:	4252      	negs	r2, r2
    c2a4:	1aa4      	subs	r4, r4, r2
    c2a6:	4698      	mov	r8, r3
    c2a8:	e5ee      	b.n	be88 <__aeabi_dsub+0x10c>
    c2aa:	000d      	movs	r5, r1
    c2ac:	4315      	orrs	r5, r2
    c2ae:	d100      	bne.n	c2b2 <__aeabi_dsub+0x536>
    c2b0:	e76b      	b.n	c18a <__aeabi_dsub+0x40e>
    c2b2:	4650      	mov	r0, sl
    c2b4:	0767      	lsls	r7, r4, #29
    c2b6:	08c0      	lsrs	r0, r0, #3
    c2b8:	4307      	orrs	r7, r0
    c2ba:	2080      	movs	r0, #128	; 0x80
    c2bc:	08e4      	lsrs	r4, r4, #3
    c2be:	0300      	lsls	r0, r0, #12
    c2c0:	4204      	tst	r4, r0
    c2c2:	d007      	beq.n	c2d4 <__aeabi_dsub+0x558>
    c2c4:	08cd      	lsrs	r5, r1, #3
    c2c6:	4205      	tst	r5, r0
    c2c8:	d104      	bne.n	c2d4 <__aeabi_dsub+0x558>
    c2ca:	002c      	movs	r4, r5
    c2cc:	4698      	mov	r8, r3
    c2ce:	08d7      	lsrs	r7, r2, #3
    c2d0:	0749      	lsls	r1, r1, #29
    c2d2:	430f      	orrs	r7, r1
    c2d4:	0f7b      	lsrs	r3, r7, #29
    c2d6:	00e4      	lsls	r4, r4, #3
    c2d8:	431c      	orrs	r4, r3
    c2da:	00ff      	lsls	r7, r7, #3
    c2dc:	4e30      	ldr	r6, [pc, #192]	; (c3a0 <__aeabi_dsub+0x624>)
    c2de:	e5d3      	b.n	be88 <__aeabi_dsub+0x10c>
    c2e0:	4e2f      	ldr	r6, [pc, #188]	; (c3a0 <__aeabi_dsub+0x624>)
    c2e2:	45b4      	cmp	ip, r6
    c2e4:	d1b4      	bne.n	c250 <__aeabi_dsub+0x4d4>
    c2e6:	000c      	movs	r4, r1
    c2e8:	0017      	movs	r7, r2
    c2ea:	4666      	mov	r6, ip
    c2ec:	e5cc      	b.n	be88 <__aeabi_dsub+0x10c>
    c2ee:	2700      	movs	r7, #0
    c2f0:	2400      	movs	r4, #0
    c2f2:	e5e8      	b.n	bec6 <__aeabi_dsub+0x14a>
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	d039      	beq.n	c36c <__aeabi_dsub+0x5f0>
    c2f8:	000b      	movs	r3, r1
    c2fa:	4313      	orrs	r3, r2
    c2fc:	d100      	bne.n	c300 <__aeabi_dsub+0x584>
    c2fe:	e744      	b.n	c18a <__aeabi_dsub+0x40e>
    c300:	08c0      	lsrs	r0, r0, #3
    c302:	0767      	lsls	r7, r4, #29
    c304:	4307      	orrs	r7, r0
    c306:	2080      	movs	r0, #128	; 0x80
    c308:	08e4      	lsrs	r4, r4, #3
    c30a:	0300      	lsls	r0, r0, #12
    c30c:	4204      	tst	r4, r0
    c30e:	d0e1      	beq.n	c2d4 <__aeabi_dsub+0x558>
    c310:	08cb      	lsrs	r3, r1, #3
    c312:	4203      	tst	r3, r0
    c314:	d1de      	bne.n	c2d4 <__aeabi_dsub+0x558>
    c316:	08d7      	lsrs	r7, r2, #3
    c318:	0749      	lsls	r1, r1, #29
    c31a:	430f      	orrs	r7, r1
    c31c:	001c      	movs	r4, r3
    c31e:	e7d9      	b.n	c2d4 <__aeabi_dsub+0x558>
    c320:	2100      	movs	r1, #0
    c322:	e771      	b.n	c208 <__aeabi_dsub+0x48c>
    c324:	2500      	movs	r5, #0
    c326:	2700      	movs	r7, #0
    c328:	e5e9      	b.n	befe <__aeabi_dsub+0x182>
    c32a:	002e      	movs	r6, r5
    c32c:	0027      	movs	r7, r4
    c32e:	3e20      	subs	r6, #32
    c330:	40f7      	lsrs	r7, r6
    c332:	2d20      	cmp	r5, #32
    c334:	d02f      	beq.n	c396 <__aeabi_dsub+0x61a>
    c336:	2640      	movs	r6, #64	; 0x40
    c338:	1b75      	subs	r5, r6, r5
    c33a:	40ac      	lsls	r4, r5
    c33c:	4650      	mov	r0, sl
    c33e:	4320      	orrs	r0, r4
    c340:	1e44      	subs	r4, r0, #1
    c342:	41a0      	sbcs	r0, r4
    c344:	2400      	movs	r4, #0
    c346:	4338      	orrs	r0, r7
    c348:	e6dc      	b.n	c104 <__aeabi_dsub+0x388>
    c34a:	2480      	movs	r4, #128	; 0x80
    c34c:	2500      	movs	r5, #0
    c34e:	0324      	lsls	r4, r4, #12
    c350:	4e13      	ldr	r6, [pc, #76]	; (c3a0 <__aeabi_dsub+0x624>)
    c352:	2700      	movs	r7, #0
    c354:	e5d3      	b.n	befe <__aeabi_dsub+0x182>
    c356:	4650      	mov	r0, sl
    c358:	4320      	orrs	r0, r4
    c35a:	0007      	movs	r7, r0
    c35c:	1e78      	subs	r0, r7, #1
    c35e:	4187      	sbcs	r7, r0
    c360:	2400      	movs	r4, #0
    c362:	18bf      	adds	r7, r7, r2
    c364:	e760      	b.n	c228 <__aeabi_dsub+0x4ac>
    c366:	000c      	movs	r4, r1
    c368:	0017      	movs	r7, r2
    c36a:	e58d      	b.n	be88 <__aeabi_dsub+0x10c>
    c36c:	000c      	movs	r4, r1
    c36e:	0017      	movs	r7, r2
    c370:	4e0b      	ldr	r6, [pc, #44]	; (c3a0 <__aeabi_dsub+0x624>)
    c372:	e589      	b.n	be88 <__aeabi_dsub+0x10c>
    c374:	001e      	movs	r6, r3
    c376:	0027      	movs	r7, r4
    c378:	3e20      	subs	r6, #32
    c37a:	40f7      	lsrs	r7, r6
    c37c:	2b20      	cmp	r3, #32
    c37e:	d00c      	beq.n	c39a <__aeabi_dsub+0x61e>
    c380:	2640      	movs	r6, #64	; 0x40
    c382:	1af3      	subs	r3, r6, r3
    c384:	409c      	lsls	r4, r3
    c386:	4650      	mov	r0, sl
    c388:	4320      	orrs	r0, r4
    c38a:	1e44      	subs	r4, r0, #1
    c38c:	41a0      	sbcs	r0, r4
    c38e:	4307      	orrs	r7, r0
    c390:	2400      	movs	r4, #0
    c392:	18bf      	adds	r7, r7, r2
    c394:	e748      	b.n	c228 <__aeabi_dsub+0x4ac>
    c396:	2400      	movs	r4, #0
    c398:	e7d0      	b.n	c33c <__aeabi_dsub+0x5c0>
    c39a:	2400      	movs	r4, #0
    c39c:	e7f3      	b.n	c386 <__aeabi_dsub+0x60a>
    c39e:	46c0      	nop			; (mov r8, r8)
    c3a0:	000007ff 	.word	0x000007ff
    c3a4:	ff7fffff 	.word	0xff7fffff

0000c3a8 <__aeabi_d2iz>:
    c3a8:	b530      	push	{r4, r5, lr}
    c3aa:	4d13      	ldr	r5, [pc, #76]	; (c3f8 <__aeabi_d2iz+0x50>)
    c3ac:	030a      	lsls	r2, r1, #12
    c3ae:	004b      	lsls	r3, r1, #1
    c3b0:	0b12      	lsrs	r2, r2, #12
    c3b2:	0d5b      	lsrs	r3, r3, #21
    c3b4:	0fc9      	lsrs	r1, r1, #31
    c3b6:	2400      	movs	r4, #0
    c3b8:	42ab      	cmp	r3, r5
    c3ba:	dd10      	ble.n	c3de <__aeabi_d2iz+0x36>
    c3bc:	4c0f      	ldr	r4, [pc, #60]	; (c3fc <__aeabi_d2iz+0x54>)
    c3be:	42a3      	cmp	r3, r4
    c3c0:	dc0f      	bgt.n	c3e2 <__aeabi_d2iz+0x3a>
    c3c2:	2480      	movs	r4, #128	; 0x80
    c3c4:	4d0e      	ldr	r5, [pc, #56]	; (c400 <__aeabi_d2iz+0x58>)
    c3c6:	0364      	lsls	r4, r4, #13
    c3c8:	4322      	orrs	r2, r4
    c3ca:	1aed      	subs	r5, r5, r3
    c3cc:	2d1f      	cmp	r5, #31
    c3ce:	dd0b      	ble.n	c3e8 <__aeabi_d2iz+0x40>
    c3d0:	480c      	ldr	r0, [pc, #48]	; (c404 <__aeabi_d2iz+0x5c>)
    c3d2:	1ac3      	subs	r3, r0, r3
    c3d4:	40da      	lsrs	r2, r3
    c3d6:	4254      	negs	r4, r2
    c3d8:	2900      	cmp	r1, #0
    c3da:	d100      	bne.n	c3de <__aeabi_d2iz+0x36>
    c3dc:	0014      	movs	r4, r2
    c3de:	0020      	movs	r0, r4
    c3e0:	bd30      	pop	{r4, r5, pc}
    c3e2:	4b09      	ldr	r3, [pc, #36]	; (c408 <__aeabi_d2iz+0x60>)
    c3e4:	18cc      	adds	r4, r1, r3
    c3e6:	e7fa      	b.n	c3de <__aeabi_d2iz+0x36>
    c3e8:	4c08      	ldr	r4, [pc, #32]	; (c40c <__aeabi_d2iz+0x64>)
    c3ea:	40e8      	lsrs	r0, r5
    c3ec:	46a4      	mov	ip, r4
    c3ee:	4463      	add	r3, ip
    c3f0:	409a      	lsls	r2, r3
    c3f2:	4302      	orrs	r2, r0
    c3f4:	e7ef      	b.n	c3d6 <__aeabi_d2iz+0x2e>
    c3f6:	46c0      	nop			; (mov r8, r8)
    c3f8:	000003fe 	.word	0x000003fe
    c3fc:	0000041d 	.word	0x0000041d
    c400:	00000433 	.word	0x00000433
    c404:	00000413 	.word	0x00000413
    c408:	7fffffff 	.word	0x7fffffff
    c40c:	fffffbed 	.word	0xfffffbed

0000c410 <__aeabi_ui2d>:
    c410:	b510      	push	{r4, lr}
    c412:	1e04      	subs	r4, r0, #0
    c414:	d028      	beq.n	c468 <__aeabi_ui2d+0x58>
    c416:	f000 f8c3 	bl	c5a0 <__clzsi2>
    c41a:	4b15      	ldr	r3, [pc, #84]	; (c470 <__aeabi_ui2d+0x60>)
    c41c:	4a15      	ldr	r2, [pc, #84]	; (c474 <__aeabi_ui2d+0x64>)
    c41e:	1a1b      	subs	r3, r3, r0
    c420:	1ad2      	subs	r2, r2, r3
    c422:	2a1f      	cmp	r2, #31
    c424:	dd15      	ble.n	c452 <__aeabi_ui2d+0x42>
    c426:	4a14      	ldr	r2, [pc, #80]	; (c478 <__aeabi_ui2d+0x68>)
    c428:	1ad2      	subs	r2, r2, r3
    c42a:	4094      	lsls	r4, r2
    c42c:	2200      	movs	r2, #0
    c42e:	0324      	lsls	r4, r4, #12
    c430:	055b      	lsls	r3, r3, #21
    c432:	0b24      	lsrs	r4, r4, #12
    c434:	0d5b      	lsrs	r3, r3, #21
    c436:	2100      	movs	r1, #0
    c438:	0010      	movs	r0, r2
    c43a:	0324      	lsls	r4, r4, #12
    c43c:	0d0a      	lsrs	r2, r1, #20
    c43e:	0b24      	lsrs	r4, r4, #12
    c440:	0512      	lsls	r2, r2, #20
    c442:	4322      	orrs	r2, r4
    c444:	4c0d      	ldr	r4, [pc, #52]	; (c47c <__aeabi_ui2d+0x6c>)
    c446:	051b      	lsls	r3, r3, #20
    c448:	4022      	ands	r2, r4
    c44a:	4313      	orrs	r3, r2
    c44c:	005b      	lsls	r3, r3, #1
    c44e:	0859      	lsrs	r1, r3, #1
    c450:	bd10      	pop	{r4, pc}
    c452:	0021      	movs	r1, r4
    c454:	4091      	lsls	r1, r2
    c456:	000a      	movs	r2, r1
    c458:	210b      	movs	r1, #11
    c45a:	1a08      	subs	r0, r1, r0
    c45c:	40c4      	lsrs	r4, r0
    c45e:	055b      	lsls	r3, r3, #21
    c460:	0324      	lsls	r4, r4, #12
    c462:	0b24      	lsrs	r4, r4, #12
    c464:	0d5b      	lsrs	r3, r3, #21
    c466:	e7e6      	b.n	c436 <__aeabi_ui2d+0x26>
    c468:	2300      	movs	r3, #0
    c46a:	2400      	movs	r4, #0
    c46c:	2200      	movs	r2, #0
    c46e:	e7e2      	b.n	c436 <__aeabi_ui2d+0x26>
    c470:	0000041e 	.word	0x0000041e
    c474:	00000433 	.word	0x00000433
    c478:	00000413 	.word	0x00000413
    c47c:	800fffff 	.word	0x800fffff

0000c480 <__aeabi_f2d>:
    c480:	0041      	lsls	r1, r0, #1
    c482:	0e09      	lsrs	r1, r1, #24
    c484:	1c4b      	adds	r3, r1, #1
    c486:	b570      	push	{r4, r5, r6, lr}
    c488:	b2db      	uxtb	r3, r3
    c48a:	0246      	lsls	r6, r0, #9
    c48c:	0a75      	lsrs	r5, r6, #9
    c48e:	0fc4      	lsrs	r4, r0, #31
    c490:	2b01      	cmp	r3, #1
    c492:	dd14      	ble.n	c4be <__aeabi_f2d+0x3e>
    c494:	23e0      	movs	r3, #224	; 0xe0
    c496:	009b      	lsls	r3, r3, #2
    c498:	076d      	lsls	r5, r5, #29
    c49a:	0b36      	lsrs	r6, r6, #12
    c49c:	18cb      	adds	r3, r1, r3
    c49e:	2100      	movs	r1, #0
    c4a0:	0d0a      	lsrs	r2, r1, #20
    c4a2:	0028      	movs	r0, r5
    c4a4:	0512      	lsls	r2, r2, #20
    c4a6:	4d1c      	ldr	r5, [pc, #112]	; (c518 <__aeabi_f2d+0x98>)
    c4a8:	4332      	orrs	r2, r6
    c4aa:	055b      	lsls	r3, r3, #21
    c4ac:	402a      	ands	r2, r5
    c4ae:	085b      	lsrs	r3, r3, #1
    c4b0:	4313      	orrs	r3, r2
    c4b2:	005b      	lsls	r3, r3, #1
    c4b4:	07e4      	lsls	r4, r4, #31
    c4b6:	085b      	lsrs	r3, r3, #1
    c4b8:	4323      	orrs	r3, r4
    c4ba:	0019      	movs	r1, r3
    c4bc:	bd70      	pop	{r4, r5, r6, pc}
    c4be:	2900      	cmp	r1, #0
    c4c0:	d114      	bne.n	c4ec <__aeabi_f2d+0x6c>
    c4c2:	2d00      	cmp	r5, #0
    c4c4:	d01e      	beq.n	c504 <__aeabi_f2d+0x84>
    c4c6:	0028      	movs	r0, r5
    c4c8:	f000 f86a 	bl	c5a0 <__clzsi2>
    c4cc:	280a      	cmp	r0, #10
    c4ce:	dc1c      	bgt.n	c50a <__aeabi_f2d+0x8a>
    c4d0:	230b      	movs	r3, #11
    c4d2:	002a      	movs	r2, r5
    c4d4:	1a1b      	subs	r3, r3, r0
    c4d6:	40da      	lsrs	r2, r3
    c4d8:	0003      	movs	r3, r0
    c4da:	3315      	adds	r3, #21
    c4dc:	409d      	lsls	r5, r3
    c4de:	4b0f      	ldr	r3, [pc, #60]	; (c51c <__aeabi_f2d+0x9c>)
    c4e0:	0312      	lsls	r2, r2, #12
    c4e2:	1a1b      	subs	r3, r3, r0
    c4e4:	055b      	lsls	r3, r3, #21
    c4e6:	0b16      	lsrs	r6, r2, #12
    c4e8:	0d5b      	lsrs	r3, r3, #21
    c4ea:	e7d8      	b.n	c49e <__aeabi_f2d+0x1e>
    c4ec:	2d00      	cmp	r5, #0
    c4ee:	d006      	beq.n	c4fe <__aeabi_f2d+0x7e>
    c4f0:	0b32      	lsrs	r2, r6, #12
    c4f2:	2680      	movs	r6, #128	; 0x80
    c4f4:	0336      	lsls	r6, r6, #12
    c4f6:	076d      	lsls	r5, r5, #29
    c4f8:	4316      	orrs	r6, r2
    c4fa:	4b09      	ldr	r3, [pc, #36]	; (c520 <__aeabi_f2d+0xa0>)
    c4fc:	e7cf      	b.n	c49e <__aeabi_f2d+0x1e>
    c4fe:	4b08      	ldr	r3, [pc, #32]	; (c520 <__aeabi_f2d+0xa0>)
    c500:	2600      	movs	r6, #0
    c502:	e7cc      	b.n	c49e <__aeabi_f2d+0x1e>
    c504:	2300      	movs	r3, #0
    c506:	2600      	movs	r6, #0
    c508:	e7c9      	b.n	c49e <__aeabi_f2d+0x1e>
    c50a:	0003      	movs	r3, r0
    c50c:	002a      	movs	r2, r5
    c50e:	3b0b      	subs	r3, #11
    c510:	409a      	lsls	r2, r3
    c512:	2500      	movs	r5, #0
    c514:	e7e3      	b.n	c4de <__aeabi_f2d+0x5e>
    c516:	46c0      	nop			; (mov r8, r8)
    c518:	800fffff 	.word	0x800fffff
    c51c:	00000389 	.word	0x00000389
    c520:	000007ff 	.word	0x000007ff

0000c524 <__aeabi_cdrcmple>:
    c524:	4684      	mov	ip, r0
    c526:	1c10      	adds	r0, r2, #0
    c528:	4662      	mov	r2, ip
    c52a:	468c      	mov	ip, r1
    c52c:	1c19      	adds	r1, r3, #0
    c52e:	4663      	mov	r3, ip
    c530:	e000      	b.n	c534 <__aeabi_cdcmpeq>
    c532:	46c0      	nop			; (mov r8, r8)

0000c534 <__aeabi_cdcmpeq>:
    c534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c536:	f000 f8ef 	bl	c718 <__ledf2>
    c53a:	2800      	cmp	r0, #0
    c53c:	d401      	bmi.n	c542 <__aeabi_cdcmpeq+0xe>
    c53e:	2100      	movs	r1, #0
    c540:	42c8      	cmn	r0, r1
    c542:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c544 <__aeabi_dcmpeq>:
    c544:	b510      	push	{r4, lr}
    c546:	f000 f849 	bl	c5dc <__eqdf2>
    c54a:	4240      	negs	r0, r0
    c54c:	3001      	adds	r0, #1
    c54e:	bd10      	pop	{r4, pc}

0000c550 <__aeabi_dcmplt>:
    c550:	b510      	push	{r4, lr}
    c552:	f000 f8e1 	bl	c718 <__ledf2>
    c556:	2800      	cmp	r0, #0
    c558:	db01      	blt.n	c55e <__aeabi_dcmplt+0xe>
    c55a:	2000      	movs	r0, #0
    c55c:	bd10      	pop	{r4, pc}
    c55e:	2001      	movs	r0, #1
    c560:	bd10      	pop	{r4, pc}
    c562:	46c0      	nop			; (mov r8, r8)

0000c564 <__aeabi_dcmple>:
    c564:	b510      	push	{r4, lr}
    c566:	f000 f8d7 	bl	c718 <__ledf2>
    c56a:	2800      	cmp	r0, #0
    c56c:	dd01      	ble.n	c572 <__aeabi_dcmple+0xe>
    c56e:	2000      	movs	r0, #0
    c570:	bd10      	pop	{r4, pc}
    c572:	2001      	movs	r0, #1
    c574:	bd10      	pop	{r4, pc}
    c576:	46c0      	nop			; (mov r8, r8)

0000c578 <__aeabi_dcmpgt>:
    c578:	b510      	push	{r4, lr}
    c57a:	f000 f869 	bl	c650 <__gedf2>
    c57e:	2800      	cmp	r0, #0
    c580:	dc01      	bgt.n	c586 <__aeabi_dcmpgt+0xe>
    c582:	2000      	movs	r0, #0
    c584:	bd10      	pop	{r4, pc}
    c586:	2001      	movs	r0, #1
    c588:	bd10      	pop	{r4, pc}
    c58a:	46c0      	nop			; (mov r8, r8)

0000c58c <__aeabi_dcmpge>:
    c58c:	b510      	push	{r4, lr}
    c58e:	f000 f85f 	bl	c650 <__gedf2>
    c592:	2800      	cmp	r0, #0
    c594:	da01      	bge.n	c59a <__aeabi_dcmpge+0xe>
    c596:	2000      	movs	r0, #0
    c598:	bd10      	pop	{r4, pc}
    c59a:	2001      	movs	r0, #1
    c59c:	bd10      	pop	{r4, pc}
    c59e:	46c0      	nop			; (mov r8, r8)

0000c5a0 <__clzsi2>:
    c5a0:	211c      	movs	r1, #28
    c5a2:	2301      	movs	r3, #1
    c5a4:	041b      	lsls	r3, r3, #16
    c5a6:	4298      	cmp	r0, r3
    c5a8:	d301      	bcc.n	c5ae <__clzsi2+0xe>
    c5aa:	0c00      	lsrs	r0, r0, #16
    c5ac:	3910      	subs	r1, #16
    c5ae:	0a1b      	lsrs	r3, r3, #8
    c5b0:	4298      	cmp	r0, r3
    c5b2:	d301      	bcc.n	c5b8 <__clzsi2+0x18>
    c5b4:	0a00      	lsrs	r0, r0, #8
    c5b6:	3908      	subs	r1, #8
    c5b8:	091b      	lsrs	r3, r3, #4
    c5ba:	4298      	cmp	r0, r3
    c5bc:	d301      	bcc.n	c5c2 <__clzsi2+0x22>
    c5be:	0900      	lsrs	r0, r0, #4
    c5c0:	3904      	subs	r1, #4
    c5c2:	a202      	add	r2, pc, #8	; (adr r2, c5cc <__clzsi2+0x2c>)
    c5c4:	5c10      	ldrb	r0, [r2, r0]
    c5c6:	1840      	adds	r0, r0, r1
    c5c8:	4770      	bx	lr
    c5ca:	46c0      	nop			; (mov r8, r8)
    c5cc:	02020304 	.word	0x02020304
    c5d0:	01010101 	.word	0x01010101
	...

0000c5dc <__eqdf2>:
    c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5de:	464f      	mov	r7, r9
    c5e0:	4646      	mov	r6, r8
    c5e2:	46d6      	mov	lr, sl
    c5e4:	005c      	lsls	r4, r3, #1
    c5e6:	b5c0      	push	{r6, r7, lr}
    c5e8:	031f      	lsls	r7, r3, #12
    c5ea:	0fdb      	lsrs	r3, r3, #31
    c5ec:	469a      	mov	sl, r3
    c5ee:	4b17      	ldr	r3, [pc, #92]	; (c64c <__eqdf2+0x70>)
    c5f0:	030e      	lsls	r6, r1, #12
    c5f2:	004d      	lsls	r5, r1, #1
    c5f4:	4684      	mov	ip, r0
    c5f6:	4680      	mov	r8, r0
    c5f8:	0b36      	lsrs	r6, r6, #12
    c5fa:	0d6d      	lsrs	r5, r5, #21
    c5fc:	0fc9      	lsrs	r1, r1, #31
    c5fe:	4691      	mov	r9, r2
    c600:	0b3f      	lsrs	r7, r7, #12
    c602:	0d64      	lsrs	r4, r4, #21
    c604:	2001      	movs	r0, #1
    c606:	429d      	cmp	r5, r3
    c608:	d008      	beq.n	c61c <__eqdf2+0x40>
    c60a:	429c      	cmp	r4, r3
    c60c:	d001      	beq.n	c612 <__eqdf2+0x36>
    c60e:	42a5      	cmp	r5, r4
    c610:	d00b      	beq.n	c62a <__eqdf2+0x4e>
    c612:	bc1c      	pop	{r2, r3, r4}
    c614:	4690      	mov	r8, r2
    c616:	4699      	mov	r9, r3
    c618:	46a2      	mov	sl, r4
    c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c61c:	4663      	mov	r3, ip
    c61e:	4333      	orrs	r3, r6
    c620:	d1f7      	bne.n	c612 <__eqdf2+0x36>
    c622:	42ac      	cmp	r4, r5
    c624:	d1f5      	bne.n	c612 <__eqdf2+0x36>
    c626:	433a      	orrs	r2, r7
    c628:	d1f3      	bne.n	c612 <__eqdf2+0x36>
    c62a:	2001      	movs	r0, #1
    c62c:	42be      	cmp	r6, r7
    c62e:	d1f0      	bne.n	c612 <__eqdf2+0x36>
    c630:	45c8      	cmp	r8, r9
    c632:	d1ee      	bne.n	c612 <__eqdf2+0x36>
    c634:	4551      	cmp	r1, sl
    c636:	d007      	beq.n	c648 <__eqdf2+0x6c>
    c638:	2d00      	cmp	r5, #0
    c63a:	d1ea      	bne.n	c612 <__eqdf2+0x36>
    c63c:	4663      	mov	r3, ip
    c63e:	431e      	orrs	r6, r3
    c640:	0030      	movs	r0, r6
    c642:	1e46      	subs	r6, r0, #1
    c644:	41b0      	sbcs	r0, r6
    c646:	e7e4      	b.n	c612 <__eqdf2+0x36>
    c648:	2000      	movs	r0, #0
    c64a:	e7e2      	b.n	c612 <__eqdf2+0x36>
    c64c:	000007ff 	.word	0x000007ff

0000c650 <__gedf2>:
    c650:	b5f0      	push	{r4, r5, r6, r7, lr}
    c652:	4645      	mov	r5, r8
    c654:	46de      	mov	lr, fp
    c656:	4657      	mov	r7, sl
    c658:	464e      	mov	r6, r9
    c65a:	b5e0      	push	{r5, r6, r7, lr}
    c65c:	031f      	lsls	r7, r3, #12
    c65e:	0b3d      	lsrs	r5, r7, #12
    c660:	4f2c      	ldr	r7, [pc, #176]	; (c714 <__gedf2+0xc4>)
    c662:	030e      	lsls	r6, r1, #12
    c664:	004c      	lsls	r4, r1, #1
    c666:	46ab      	mov	fp, r5
    c668:	005d      	lsls	r5, r3, #1
    c66a:	4684      	mov	ip, r0
    c66c:	0b36      	lsrs	r6, r6, #12
    c66e:	0d64      	lsrs	r4, r4, #21
    c670:	0fc9      	lsrs	r1, r1, #31
    c672:	4690      	mov	r8, r2
    c674:	0d6d      	lsrs	r5, r5, #21
    c676:	0fdb      	lsrs	r3, r3, #31
    c678:	42bc      	cmp	r4, r7
    c67a:	d02a      	beq.n	c6d2 <__gedf2+0x82>
    c67c:	4f25      	ldr	r7, [pc, #148]	; (c714 <__gedf2+0xc4>)
    c67e:	42bd      	cmp	r5, r7
    c680:	d02d      	beq.n	c6de <__gedf2+0x8e>
    c682:	2c00      	cmp	r4, #0
    c684:	d10f      	bne.n	c6a6 <__gedf2+0x56>
    c686:	4330      	orrs	r0, r6
    c688:	0007      	movs	r7, r0
    c68a:	4681      	mov	r9, r0
    c68c:	4278      	negs	r0, r7
    c68e:	4178      	adcs	r0, r7
    c690:	b2c0      	uxtb	r0, r0
    c692:	2d00      	cmp	r5, #0
    c694:	d117      	bne.n	c6c6 <__gedf2+0x76>
    c696:	465f      	mov	r7, fp
    c698:	433a      	orrs	r2, r7
    c69a:	d114      	bne.n	c6c6 <__gedf2+0x76>
    c69c:	464b      	mov	r3, r9
    c69e:	2000      	movs	r0, #0
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d00a      	beq.n	c6ba <__gedf2+0x6a>
    c6a4:	e006      	b.n	c6b4 <__gedf2+0x64>
    c6a6:	2d00      	cmp	r5, #0
    c6a8:	d102      	bne.n	c6b0 <__gedf2+0x60>
    c6aa:	4658      	mov	r0, fp
    c6ac:	4302      	orrs	r2, r0
    c6ae:	d001      	beq.n	c6b4 <__gedf2+0x64>
    c6b0:	4299      	cmp	r1, r3
    c6b2:	d018      	beq.n	c6e6 <__gedf2+0x96>
    c6b4:	4248      	negs	r0, r1
    c6b6:	2101      	movs	r1, #1
    c6b8:	4308      	orrs	r0, r1
    c6ba:	bc3c      	pop	{r2, r3, r4, r5}
    c6bc:	4690      	mov	r8, r2
    c6be:	4699      	mov	r9, r3
    c6c0:	46a2      	mov	sl, r4
    c6c2:	46ab      	mov	fp, r5
    c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6c6:	2800      	cmp	r0, #0
    c6c8:	d0f2      	beq.n	c6b0 <__gedf2+0x60>
    c6ca:	2001      	movs	r0, #1
    c6cc:	3b01      	subs	r3, #1
    c6ce:	4318      	orrs	r0, r3
    c6d0:	e7f3      	b.n	c6ba <__gedf2+0x6a>
    c6d2:	0037      	movs	r7, r6
    c6d4:	4307      	orrs	r7, r0
    c6d6:	d0d1      	beq.n	c67c <__gedf2+0x2c>
    c6d8:	2002      	movs	r0, #2
    c6da:	4240      	negs	r0, r0
    c6dc:	e7ed      	b.n	c6ba <__gedf2+0x6a>
    c6de:	465f      	mov	r7, fp
    c6e0:	4317      	orrs	r7, r2
    c6e2:	d0ce      	beq.n	c682 <__gedf2+0x32>
    c6e4:	e7f8      	b.n	c6d8 <__gedf2+0x88>
    c6e6:	42ac      	cmp	r4, r5
    c6e8:	dce4      	bgt.n	c6b4 <__gedf2+0x64>
    c6ea:	da03      	bge.n	c6f4 <__gedf2+0xa4>
    c6ec:	1e48      	subs	r0, r1, #1
    c6ee:	2101      	movs	r1, #1
    c6f0:	4308      	orrs	r0, r1
    c6f2:	e7e2      	b.n	c6ba <__gedf2+0x6a>
    c6f4:	455e      	cmp	r6, fp
    c6f6:	d8dd      	bhi.n	c6b4 <__gedf2+0x64>
    c6f8:	d006      	beq.n	c708 <__gedf2+0xb8>
    c6fa:	2000      	movs	r0, #0
    c6fc:	455e      	cmp	r6, fp
    c6fe:	d2dc      	bcs.n	c6ba <__gedf2+0x6a>
    c700:	2301      	movs	r3, #1
    c702:	1e48      	subs	r0, r1, #1
    c704:	4318      	orrs	r0, r3
    c706:	e7d8      	b.n	c6ba <__gedf2+0x6a>
    c708:	45c4      	cmp	ip, r8
    c70a:	d8d3      	bhi.n	c6b4 <__gedf2+0x64>
    c70c:	2000      	movs	r0, #0
    c70e:	45c4      	cmp	ip, r8
    c710:	d3f6      	bcc.n	c700 <__gedf2+0xb0>
    c712:	e7d2      	b.n	c6ba <__gedf2+0x6a>
    c714:	000007ff 	.word	0x000007ff

0000c718 <__ledf2>:
    c718:	b5f0      	push	{r4, r5, r6, r7, lr}
    c71a:	464e      	mov	r6, r9
    c71c:	4645      	mov	r5, r8
    c71e:	46de      	mov	lr, fp
    c720:	4657      	mov	r7, sl
    c722:	005c      	lsls	r4, r3, #1
    c724:	b5e0      	push	{r5, r6, r7, lr}
    c726:	031f      	lsls	r7, r3, #12
    c728:	0fdb      	lsrs	r3, r3, #31
    c72a:	4699      	mov	r9, r3
    c72c:	4b2a      	ldr	r3, [pc, #168]	; (c7d8 <__ledf2+0xc0>)
    c72e:	030e      	lsls	r6, r1, #12
    c730:	004d      	lsls	r5, r1, #1
    c732:	0fc9      	lsrs	r1, r1, #31
    c734:	4684      	mov	ip, r0
    c736:	0b36      	lsrs	r6, r6, #12
    c738:	0d6d      	lsrs	r5, r5, #21
    c73a:	468b      	mov	fp, r1
    c73c:	4690      	mov	r8, r2
    c73e:	0b3f      	lsrs	r7, r7, #12
    c740:	0d64      	lsrs	r4, r4, #21
    c742:	429d      	cmp	r5, r3
    c744:	d020      	beq.n	c788 <__ledf2+0x70>
    c746:	4b24      	ldr	r3, [pc, #144]	; (c7d8 <__ledf2+0xc0>)
    c748:	429c      	cmp	r4, r3
    c74a:	d022      	beq.n	c792 <__ledf2+0x7a>
    c74c:	2d00      	cmp	r5, #0
    c74e:	d112      	bne.n	c776 <__ledf2+0x5e>
    c750:	4330      	orrs	r0, r6
    c752:	4243      	negs	r3, r0
    c754:	4143      	adcs	r3, r0
    c756:	b2db      	uxtb	r3, r3
    c758:	2c00      	cmp	r4, #0
    c75a:	d01f      	beq.n	c79c <__ledf2+0x84>
    c75c:	2b00      	cmp	r3, #0
    c75e:	d00c      	beq.n	c77a <__ledf2+0x62>
    c760:	464b      	mov	r3, r9
    c762:	2001      	movs	r0, #1
    c764:	3b01      	subs	r3, #1
    c766:	4303      	orrs	r3, r0
    c768:	0018      	movs	r0, r3
    c76a:	bc3c      	pop	{r2, r3, r4, r5}
    c76c:	4690      	mov	r8, r2
    c76e:	4699      	mov	r9, r3
    c770:	46a2      	mov	sl, r4
    c772:	46ab      	mov	fp, r5
    c774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c776:	2c00      	cmp	r4, #0
    c778:	d016      	beq.n	c7a8 <__ledf2+0x90>
    c77a:	45cb      	cmp	fp, r9
    c77c:	d017      	beq.n	c7ae <__ledf2+0x96>
    c77e:	465b      	mov	r3, fp
    c780:	4259      	negs	r1, r3
    c782:	2301      	movs	r3, #1
    c784:	430b      	orrs	r3, r1
    c786:	e7ef      	b.n	c768 <__ledf2+0x50>
    c788:	0031      	movs	r1, r6
    c78a:	2302      	movs	r3, #2
    c78c:	4301      	orrs	r1, r0
    c78e:	d1eb      	bne.n	c768 <__ledf2+0x50>
    c790:	e7d9      	b.n	c746 <__ledf2+0x2e>
    c792:	0039      	movs	r1, r7
    c794:	2302      	movs	r3, #2
    c796:	4311      	orrs	r1, r2
    c798:	d1e6      	bne.n	c768 <__ledf2+0x50>
    c79a:	e7d7      	b.n	c74c <__ledf2+0x34>
    c79c:	433a      	orrs	r2, r7
    c79e:	d1dd      	bne.n	c75c <__ledf2+0x44>
    c7a0:	2300      	movs	r3, #0
    c7a2:	2800      	cmp	r0, #0
    c7a4:	d0e0      	beq.n	c768 <__ledf2+0x50>
    c7a6:	e7ea      	b.n	c77e <__ledf2+0x66>
    c7a8:	433a      	orrs	r2, r7
    c7aa:	d1e6      	bne.n	c77a <__ledf2+0x62>
    c7ac:	e7e7      	b.n	c77e <__ledf2+0x66>
    c7ae:	42a5      	cmp	r5, r4
    c7b0:	dce5      	bgt.n	c77e <__ledf2+0x66>
    c7b2:	db05      	blt.n	c7c0 <__ledf2+0xa8>
    c7b4:	42be      	cmp	r6, r7
    c7b6:	d8e2      	bhi.n	c77e <__ledf2+0x66>
    c7b8:	d007      	beq.n	c7ca <__ledf2+0xb2>
    c7ba:	2300      	movs	r3, #0
    c7bc:	42be      	cmp	r6, r7
    c7be:	d2d3      	bcs.n	c768 <__ledf2+0x50>
    c7c0:	4659      	mov	r1, fp
    c7c2:	2301      	movs	r3, #1
    c7c4:	3901      	subs	r1, #1
    c7c6:	430b      	orrs	r3, r1
    c7c8:	e7ce      	b.n	c768 <__ledf2+0x50>
    c7ca:	45c4      	cmp	ip, r8
    c7cc:	d8d7      	bhi.n	c77e <__ledf2+0x66>
    c7ce:	2300      	movs	r3, #0
    c7d0:	45c4      	cmp	ip, r8
    c7d2:	d3f5      	bcc.n	c7c0 <__ledf2+0xa8>
    c7d4:	e7c8      	b.n	c768 <__ledf2+0x50>
    c7d6:	46c0      	nop			; (mov r8, r8)
    c7d8:	000007ff 	.word	0x000007ff

0000c7dc <__libc_init_array>:
    c7dc:	b570      	push	{r4, r5, r6, lr}
    c7de:	4e0d      	ldr	r6, [pc, #52]	; (c814 <__libc_init_array+0x38>)
    c7e0:	4d0d      	ldr	r5, [pc, #52]	; (c818 <__libc_init_array+0x3c>)
    c7e2:	2400      	movs	r4, #0
    c7e4:	1bad      	subs	r5, r5, r6
    c7e6:	10ad      	asrs	r5, r5, #2
    c7e8:	d005      	beq.n	c7f6 <__libc_init_array+0x1a>
    c7ea:	00a3      	lsls	r3, r4, #2
    c7ec:	58f3      	ldr	r3, [r6, r3]
    c7ee:	3401      	adds	r4, #1
    c7f0:	4798      	blx	r3
    c7f2:	42a5      	cmp	r5, r4
    c7f4:	d1f9      	bne.n	c7ea <__libc_init_array+0xe>
    c7f6:	f000 fa43 	bl	cc80 <_init>
    c7fa:	4e08      	ldr	r6, [pc, #32]	; (c81c <__libc_init_array+0x40>)
    c7fc:	4d08      	ldr	r5, [pc, #32]	; (c820 <__libc_init_array+0x44>)
    c7fe:	2400      	movs	r4, #0
    c800:	1bad      	subs	r5, r5, r6
    c802:	10ad      	asrs	r5, r5, #2
    c804:	d005      	beq.n	c812 <__libc_init_array+0x36>
    c806:	00a3      	lsls	r3, r4, #2
    c808:	58f3      	ldr	r3, [r6, r3]
    c80a:	3401      	adds	r4, #1
    c80c:	4798      	blx	r3
    c80e:	42a5      	cmp	r5, r4
    c810:	d1f9      	bne.n	c806 <__libc_init_array+0x2a>
    c812:	bd70      	pop	{r4, r5, r6, pc}
    c814:	0000cc8c 	.word	0x0000cc8c
    c818:	0000cc8c 	.word	0x0000cc8c
    c81c:	0000cc8c 	.word	0x0000cc8c
    c820:	0000cc94 	.word	0x0000cc94

0000c824 <memcpy>:
    c824:	b5f0      	push	{r4, r5, r6, r7, lr}
    c826:	0005      	movs	r5, r0
    c828:	2a0f      	cmp	r2, #15
    c82a:	d92f      	bls.n	c88c <memcpy+0x68>
    c82c:	000b      	movs	r3, r1
    c82e:	4303      	orrs	r3, r0
    c830:	079b      	lsls	r3, r3, #30
    c832:	d134      	bne.n	c89e <memcpy+0x7a>
    c834:	0016      	movs	r6, r2
    c836:	000c      	movs	r4, r1
    c838:	0003      	movs	r3, r0
    c83a:	3e10      	subs	r6, #16
    c83c:	0935      	lsrs	r5, r6, #4
    c83e:	3501      	adds	r5, #1
    c840:	012d      	lsls	r5, r5, #4
    c842:	1945      	adds	r5, r0, r5
    c844:	6827      	ldr	r7, [r4, #0]
    c846:	601f      	str	r7, [r3, #0]
    c848:	6867      	ldr	r7, [r4, #4]
    c84a:	605f      	str	r7, [r3, #4]
    c84c:	68a7      	ldr	r7, [r4, #8]
    c84e:	609f      	str	r7, [r3, #8]
    c850:	68e7      	ldr	r7, [r4, #12]
    c852:	3410      	adds	r4, #16
    c854:	60df      	str	r7, [r3, #12]
    c856:	3310      	adds	r3, #16
    c858:	429d      	cmp	r5, r3
    c85a:	d1f3      	bne.n	c844 <memcpy+0x20>
    c85c:	230f      	movs	r3, #15
    c85e:	439e      	bics	r6, r3
    c860:	3610      	adds	r6, #16
    c862:	1985      	adds	r5, r0, r6
    c864:	1989      	adds	r1, r1, r6
    c866:	4013      	ands	r3, r2
    c868:	2b03      	cmp	r3, #3
    c86a:	d91a      	bls.n	c8a2 <memcpy+0x7e>
    c86c:	1f1e      	subs	r6, r3, #4
    c86e:	2300      	movs	r3, #0
    c870:	08b4      	lsrs	r4, r6, #2
    c872:	3401      	adds	r4, #1
    c874:	00a4      	lsls	r4, r4, #2
    c876:	58cf      	ldr	r7, [r1, r3]
    c878:	50ef      	str	r7, [r5, r3]
    c87a:	3304      	adds	r3, #4
    c87c:	42a3      	cmp	r3, r4
    c87e:	d1fa      	bne.n	c876 <memcpy+0x52>
    c880:	2403      	movs	r4, #3
    c882:	43a6      	bics	r6, r4
    c884:	1d33      	adds	r3, r6, #4
    c886:	4022      	ands	r2, r4
    c888:	18c9      	adds	r1, r1, r3
    c88a:	18ed      	adds	r5, r5, r3
    c88c:	2a00      	cmp	r2, #0
    c88e:	d005      	beq.n	c89c <memcpy+0x78>
    c890:	2300      	movs	r3, #0
    c892:	5ccc      	ldrb	r4, [r1, r3]
    c894:	54ec      	strb	r4, [r5, r3]
    c896:	3301      	adds	r3, #1
    c898:	4293      	cmp	r3, r2
    c89a:	d1fa      	bne.n	c892 <memcpy+0x6e>
    c89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c89e:	0005      	movs	r5, r0
    c8a0:	e7f6      	b.n	c890 <memcpy+0x6c>
    c8a2:	001a      	movs	r2, r3
    c8a4:	e7f2      	b.n	c88c <memcpy+0x68>
    c8a6:	46c0      	nop			; (mov r8, r8)

0000c8a8 <memset>:
    c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8aa:	0783      	lsls	r3, r0, #30
    c8ac:	d043      	beq.n	c936 <memset+0x8e>
    c8ae:	1e54      	subs	r4, r2, #1
    c8b0:	2a00      	cmp	r2, #0
    c8b2:	d03f      	beq.n	c934 <memset+0x8c>
    c8b4:	b2ce      	uxtb	r6, r1
    c8b6:	0002      	movs	r2, r0
    c8b8:	2503      	movs	r5, #3
    c8ba:	e002      	b.n	c8c2 <memset+0x1a>
    c8bc:	001a      	movs	r2, r3
    c8be:	3c01      	subs	r4, #1
    c8c0:	d338      	bcc.n	c934 <memset+0x8c>
    c8c2:	1c53      	adds	r3, r2, #1
    c8c4:	7016      	strb	r6, [r2, #0]
    c8c6:	422b      	tst	r3, r5
    c8c8:	d1f8      	bne.n	c8bc <memset+0x14>
    c8ca:	2c03      	cmp	r4, #3
    c8cc:	d92a      	bls.n	c924 <memset+0x7c>
    c8ce:	22ff      	movs	r2, #255	; 0xff
    c8d0:	400a      	ands	r2, r1
    c8d2:	0215      	lsls	r5, r2, #8
    c8d4:	4315      	orrs	r5, r2
    c8d6:	042a      	lsls	r2, r5, #16
    c8d8:	4315      	orrs	r5, r2
    c8da:	2c0f      	cmp	r4, #15
    c8dc:	d914      	bls.n	c908 <memset+0x60>
    c8de:	0027      	movs	r7, r4
    c8e0:	001a      	movs	r2, r3
    c8e2:	3f10      	subs	r7, #16
    c8e4:	093e      	lsrs	r6, r7, #4
    c8e6:	3601      	adds	r6, #1
    c8e8:	0136      	lsls	r6, r6, #4
    c8ea:	199e      	adds	r6, r3, r6
    c8ec:	6015      	str	r5, [r2, #0]
    c8ee:	6055      	str	r5, [r2, #4]
    c8f0:	6095      	str	r5, [r2, #8]
    c8f2:	60d5      	str	r5, [r2, #12]
    c8f4:	3210      	adds	r2, #16
    c8f6:	4296      	cmp	r6, r2
    c8f8:	d1f8      	bne.n	c8ec <memset+0x44>
    c8fa:	220f      	movs	r2, #15
    c8fc:	4397      	bics	r7, r2
    c8fe:	3710      	adds	r7, #16
    c900:	19db      	adds	r3, r3, r7
    c902:	4014      	ands	r4, r2
    c904:	2c03      	cmp	r4, #3
    c906:	d90d      	bls.n	c924 <memset+0x7c>
    c908:	001a      	movs	r2, r3
    c90a:	1f27      	subs	r7, r4, #4
    c90c:	08be      	lsrs	r6, r7, #2
    c90e:	3601      	adds	r6, #1
    c910:	00b6      	lsls	r6, r6, #2
    c912:	199e      	adds	r6, r3, r6
    c914:	c220      	stmia	r2!, {r5}
    c916:	42b2      	cmp	r2, r6
    c918:	d1fc      	bne.n	c914 <memset+0x6c>
    c91a:	2203      	movs	r2, #3
    c91c:	4397      	bics	r7, r2
    c91e:	3704      	adds	r7, #4
    c920:	19db      	adds	r3, r3, r7
    c922:	4014      	ands	r4, r2
    c924:	2c00      	cmp	r4, #0
    c926:	d005      	beq.n	c934 <memset+0x8c>
    c928:	b2c9      	uxtb	r1, r1
    c92a:	191c      	adds	r4, r3, r4
    c92c:	7019      	strb	r1, [r3, #0]
    c92e:	3301      	adds	r3, #1
    c930:	429c      	cmp	r4, r3
    c932:	d1fb      	bne.n	c92c <memset+0x84>
    c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c936:	0014      	movs	r4, r2
    c938:	0003      	movs	r3, r0
    c93a:	e7c6      	b.n	c8ca <memset+0x22>

0000c93c <register_fini>:
    c93c:	4b03      	ldr	r3, [pc, #12]	; (c94c <register_fini+0x10>)
    c93e:	b510      	push	{r4, lr}
    c940:	2b00      	cmp	r3, #0
    c942:	d002      	beq.n	c94a <register_fini+0xe>
    c944:	4802      	ldr	r0, [pc, #8]	; (c950 <register_fini+0x14>)
    c946:	f000 f805 	bl	c954 <atexit>
    c94a:	bd10      	pop	{r4, pc}
    c94c:	00000000 	.word	0x00000000
    c950:	0000c965 	.word	0x0000c965

0000c954 <atexit>:
    c954:	b510      	push	{r4, lr}
    c956:	0001      	movs	r1, r0
    c958:	2300      	movs	r3, #0
    c95a:	2200      	movs	r2, #0
    c95c:	2000      	movs	r0, #0
    c95e:	f000 f81f 	bl	c9a0 <__register_exitproc>
    c962:	bd10      	pop	{r4, pc}

0000c964 <__libc_fini_array>:
    c964:	b570      	push	{r4, r5, r6, lr}
    c966:	4b09      	ldr	r3, [pc, #36]	; (c98c <__libc_fini_array+0x28>)
    c968:	4c09      	ldr	r4, [pc, #36]	; (c990 <__libc_fini_array+0x2c>)
    c96a:	1ae4      	subs	r4, r4, r3
    c96c:	10a4      	asrs	r4, r4, #2
    c96e:	d009      	beq.n	c984 <__libc_fini_array+0x20>
    c970:	4a08      	ldr	r2, [pc, #32]	; (c994 <__libc_fini_array+0x30>)
    c972:	18a5      	adds	r5, r4, r2
    c974:	00ad      	lsls	r5, r5, #2
    c976:	18ed      	adds	r5, r5, r3
    c978:	682b      	ldr	r3, [r5, #0]
    c97a:	3c01      	subs	r4, #1
    c97c:	4798      	blx	r3
    c97e:	3d04      	subs	r5, #4
    c980:	2c00      	cmp	r4, #0
    c982:	d1f9      	bne.n	c978 <__libc_fini_array+0x14>
    c984:	f000 f986 	bl	cc94 <_fini>
    c988:	bd70      	pop	{r4, r5, r6, pc}
    c98a:	46c0      	nop			; (mov r8, r8)
    c98c:	0000cca0 	.word	0x0000cca0
    c990:	0000cca4 	.word	0x0000cca4
    c994:	3fffffff 	.word	0x3fffffff

0000c998 <__retarget_lock_acquire_recursive>:
    c998:	4770      	bx	lr
    c99a:	46c0      	nop			; (mov r8, r8)

0000c99c <__retarget_lock_release_recursive>:
    c99c:	4770      	bx	lr
    c99e:	46c0      	nop			; (mov r8, r8)

0000c9a0 <__register_exitproc>:
    c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9a2:	464e      	mov	r6, r9
    c9a4:	4645      	mov	r5, r8
    c9a6:	46de      	mov	lr, fp
    c9a8:	4657      	mov	r7, sl
    c9aa:	b5e0      	push	{r5, r6, r7, lr}
    c9ac:	4d36      	ldr	r5, [pc, #216]	; (ca88 <__register_exitproc+0xe8>)
    c9ae:	b083      	sub	sp, #12
    c9b0:	0006      	movs	r6, r0
    c9b2:	6828      	ldr	r0, [r5, #0]
    c9b4:	4698      	mov	r8, r3
    c9b6:	000f      	movs	r7, r1
    c9b8:	4691      	mov	r9, r2
    c9ba:	f7ff ffed 	bl	c998 <__retarget_lock_acquire_recursive>
    c9be:	4b33      	ldr	r3, [pc, #204]	; (ca8c <__register_exitproc+0xec>)
    c9c0:	681c      	ldr	r4, [r3, #0]
    c9c2:	23a4      	movs	r3, #164	; 0xa4
    c9c4:	005b      	lsls	r3, r3, #1
    c9c6:	58e0      	ldr	r0, [r4, r3]
    c9c8:	2800      	cmp	r0, #0
    c9ca:	d052      	beq.n	ca72 <__register_exitproc+0xd2>
    c9cc:	6843      	ldr	r3, [r0, #4]
    c9ce:	2b1f      	cmp	r3, #31
    c9d0:	dc13      	bgt.n	c9fa <__register_exitproc+0x5a>
    c9d2:	1c5a      	adds	r2, r3, #1
    c9d4:	9201      	str	r2, [sp, #4]
    c9d6:	2e00      	cmp	r6, #0
    c9d8:	d128      	bne.n	ca2c <__register_exitproc+0x8c>
    c9da:	9a01      	ldr	r2, [sp, #4]
    c9dc:	3302      	adds	r3, #2
    c9de:	009b      	lsls	r3, r3, #2
    c9e0:	6042      	str	r2, [r0, #4]
    c9e2:	501f      	str	r7, [r3, r0]
    c9e4:	6828      	ldr	r0, [r5, #0]
    c9e6:	f7ff ffd9 	bl	c99c <__retarget_lock_release_recursive>
    c9ea:	2000      	movs	r0, #0
    c9ec:	b003      	add	sp, #12
    c9ee:	bc3c      	pop	{r2, r3, r4, r5}
    c9f0:	4690      	mov	r8, r2
    c9f2:	4699      	mov	r9, r3
    c9f4:	46a2      	mov	sl, r4
    c9f6:	46ab      	mov	fp, r5
    c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9fa:	4b25      	ldr	r3, [pc, #148]	; (ca90 <__register_exitproc+0xf0>)
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d03d      	beq.n	ca7c <__register_exitproc+0xdc>
    ca00:	20c8      	movs	r0, #200	; 0xc8
    ca02:	0040      	lsls	r0, r0, #1
    ca04:	e000      	b.n	ca08 <__register_exitproc+0x68>
    ca06:	bf00      	nop
    ca08:	2800      	cmp	r0, #0
    ca0a:	d037      	beq.n	ca7c <__register_exitproc+0xdc>
    ca0c:	22a4      	movs	r2, #164	; 0xa4
    ca0e:	2300      	movs	r3, #0
    ca10:	0052      	lsls	r2, r2, #1
    ca12:	58a1      	ldr	r1, [r4, r2]
    ca14:	6043      	str	r3, [r0, #4]
    ca16:	6001      	str	r1, [r0, #0]
    ca18:	50a0      	str	r0, [r4, r2]
    ca1a:	3240      	adds	r2, #64	; 0x40
    ca1c:	5083      	str	r3, [r0, r2]
    ca1e:	3204      	adds	r2, #4
    ca20:	5083      	str	r3, [r0, r2]
    ca22:	3301      	adds	r3, #1
    ca24:	9301      	str	r3, [sp, #4]
    ca26:	2300      	movs	r3, #0
    ca28:	2e00      	cmp	r6, #0
    ca2a:	d0d6      	beq.n	c9da <__register_exitproc+0x3a>
    ca2c:	009a      	lsls	r2, r3, #2
    ca2e:	4692      	mov	sl, r2
    ca30:	4482      	add	sl, r0
    ca32:	464a      	mov	r2, r9
    ca34:	2188      	movs	r1, #136	; 0x88
    ca36:	4654      	mov	r4, sl
    ca38:	5062      	str	r2, [r4, r1]
    ca3a:	22c4      	movs	r2, #196	; 0xc4
    ca3c:	0052      	lsls	r2, r2, #1
    ca3e:	4691      	mov	r9, r2
    ca40:	4481      	add	r9, r0
    ca42:	464a      	mov	r2, r9
    ca44:	3987      	subs	r1, #135	; 0x87
    ca46:	4099      	lsls	r1, r3
    ca48:	6812      	ldr	r2, [r2, #0]
    ca4a:	468b      	mov	fp, r1
    ca4c:	430a      	orrs	r2, r1
    ca4e:	4694      	mov	ip, r2
    ca50:	464a      	mov	r2, r9
    ca52:	4661      	mov	r1, ip
    ca54:	6011      	str	r1, [r2, #0]
    ca56:	2284      	movs	r2, #132	; 0x84
    ca58:	4641      	mov	r1, r8
    ca5a:	0052      	lsls	r2, r2, #1
    ca5c:	50a1      	str	r1, [r4, r2]
    ca5e:	2e02      	cmp	r6, #2
    ca60:	d1bb      	bne.n	c9da <__register_exitproc+0x3a>
    ca62:	0002      	movs	r2, r0
    ca64:	465c      	mov	r4, fp
    ca66:	328d      	adds	r2, #141	; 0x8d
    ca68:	32ff      	adds	r2, #255	; 0xff
    ca6a:	6811      	ldr	r1, [r2, #0]
    ca6c:	430c      	orrs	r4, r1
    ca6e:	6014      	str	r4, [r2, #0]
    ca70:	e7b3      	b.n	c9da <__register_exitproc+0x3a>
    ca72:	0020      	movs	r0, r4
    ca74:	304d      	adds	r0, #77	; 0x4d
    ca76:	30ff      	adds	r0, #255	; 0xff
    ca78:	50e0      	str	r0, [r4, r3]
    ca7a:	e7a7      	b.n	c9cc <__register_exitproc+0x2c>
    ca7c:	6828      	ldr	r0, [r5, #0]
    ca7e:	f7ff ff8d 	bl	c99c <__retarget_lock_release_recursive>
    ca82:	2001      	movs	r0, #1
    ca84:	4240      	negs	r0, r0
    ca86:	e7b1      	b.n	c9ec <__register_exitproc+0x4c>
    ca88:	20000430 	.word	0x20000430
    ca8c:	0000cc7c 	.word	0x0000cc7c
    ca90:	00000000 	.word	0x00000000
    ca94:	696d6461 	.word	0x696d6461
    ca98:	0000006e 	.word	0x0000006e
    ca9c:	72657375 	.word	0x72657375
    caa0:	00000000 	.word	0x00000000
    caa4:	53434d5f 	.word	0x53434d5f
    caa8:	2d303031 	.word	0x2d303031
    caac:	54315234 	.word	0x54315234
    cab0:	00000000 	.word	0x00000000
    cab4:	2e302e30 	.word	0x2e302e30
    cab8:	34302e30 	.word	0x34302e30
    cabc:	00000000 	.word	0x00000000
    cac0:	00004b0c 	.word	0x00004b0c
    cac4:	00004b50 	.word	0x00004b50
    cac8:	00005796 	.word	0x00005796
    cacc:	00005796 	.word	0x00005796
    cad0:	00005796 	.word	0x00005796
    cad4:	00005796 	.word	0x00005796
    cad8:	00005796 	.word	0x00005796
    cadc:	00004de0 	.word	0x00004de0
    cae0:	00004eea 	.word	0x00004eea
    cae4:	00005796 	.word	0x00005796
    cae8:	00005796 	.word	0x00005796
    caec:	00005796 	.word	0x00005796
    caf0:	00005796 	.word	0x00005796
    caf4:	00005796 	.word	0x00005796
    caf8:	00005796 	.word	0x00005796
    cafc:	00005796 	.word	0x00005796
    cb00:	00005014 	.word	0x00005014
    cb04:	00005796 	.word	0x00005796
    cb08:	00005796 	.word	0x00005796
    cb0c:	00005796 	.word	0x00005796
    cb10:	00005796 	.word	0x00005796
    cb14:	00005796 	.word	0x00005796
    cb18:	00005796 	.word	0x00005796
    cb1c:	00005052 	.word	0x00005052
    cb20:	00005796 	.word	0x00005796
    cb24:	00005796 	.word	0x00005796
    cb28:	00005796 	.word	0x00005796
    cb2c:	00005796 	.word	0x00005796
    cb30:	00005796 	.word	0x00005796
    cb34:	00005796 	.word	0x00005796
    cb38:	00005796 	.word	0x00005796
    cb3c:	00005796 	.word	0x00005796
    cb40:	00005146 	.word	0x00005146
    cb44:	00005302 	.word	0x00005302
    cb48:	00005420 	.word	0x00005420
    cb4c:	000054e6 	.word	0x000054e6
    cb50:	00005796 	.word	0x00005796
    cb54:	00005796 	.word	0x00005796
    cb58:	00005796 	.word	0x00005796
    cb5c:	00005556 	.word	0x00005556
    cb60:	00005796 	.word	0x00005796
    cb64:	0000561c 	.word	0x0000561c
    cb68:	0000985a 	.word	0x0000985a
    cb6c:	0000986c 	.word	0x0000986c
    cb70:	000098a0 	.word	0x000098a0
    cb74:	000098d8 	.word	0x000098d8
    cb78:	000098fe 	.word	0x000098fe
    cb7c:	00009936 	.word	0x00009936
    cb80:	000099de 	.word	0x000099de
    cb84:	00009a26 	.word	0x00009a26
    cb88:	00009b4a 	.word	0x00009b4a
    cb8c:	00009bfa 	.word	0x00009bfa
    cb90:	00009c54 	.word	0x00009c54
    cb94:	00009d06 	.word	0x00009d06
    cb98:	00009d4c 	.word	0x00009d4c
    cb9c:	00009d90 	.word	0x00009d90
    cba0:	00009dd6 	.word	0x00009dd6
    cba4:	00009ec0 	.word	0x00009ec0
    cba8:	00009f6e 	.word	0x00009f6e
    cbac:	00009ff6 	.word	0x00009ff6
    cbb0:	0000a070 	.word	0x0000a070
    cbb4:	0000a118 	.word	0x0000a118
    cbb8:	0000a188 	.word	0x0000a188
    cbbc:	0000a370 	.word	0x0000a370
    cbc0:	0000a5a0 	.word	0x0000a5a0
    cbc4:	0000a4fc 	.word	0x0000a4fc
    cbc8:	0000a5f4 	.word	0x0000a5f4
    cbcc:	0000a272 	.word	0x0000a272
    cbd0:	0000a2b4 	.word	0x0000a2b4
    cbd4:	0000a69e 	.word	0x0000a69e
    cbd8:	0000a6e4 	.word	0x0000a6e4
    cbdc:	0000a864 	.word	0x0000a864
    cbe0:	0000a912 	.word	0x0000a912
    cbe4:	0000a99a 	.word	0x0000a99a
    cbe8:	0000aa18 	.word	0x0000aa18
    cbec:	0000aac0 	.word	0x0000aac0
    cbf0:	3153434d 	.word	0x3153434d
    cbf4:	342d3030 	.word	0x342d3030
    cbf8:	00543152 	.word	0x00543152
    cbfc:	0000b40c 	.word	0x0000b40c
    cc00:	0000b3ee 	.word	0x0000b3ee
    cc04:	0000b3a8 	.word	0x0000b3a8
    cc08:	0000b2c6 	.word	0x0000b2c6
    cc0c:	0000b3a8 	.word	0x0000b3a8
    cc10:	0000b3e0 	.word	0x0000b3e0
    cc14:	0000b3a8 	.word	0x0000b3a8
    cc18:	0000b2c6 	.word	0x0000b2c6
    cc1c:	0000b3ee 	.word	0x0000b3ee
    cc20:	0000b3ee 	.word	0x0000b3ee
    cc24:	0000b3e0 	.word	0x0000b3e0
    cc28:	0000b2c6 	.word	0x0000b2c6
    cc2c:	0000b2be 	.word	0x0000b2be
    cc30:	0000b2be 	.word	0x0000b2be
    cc34:	0000b2be 	.word	0x0000b2be
    cc38:	0000b624 	.word	0x0000b624
    cc3c:	0000ba6c 	.word	0x0000ba6c
    cc40:	0000b92c 	.word	0x0000b92c
    cc44:	0000b92c 	.word	0x0000b92c
    cc48:	0000b928 	.word	0x0000b928
    cc4c:	0000ba44 	.word	0x0000ba44
    cc50:	0000ba44 	.word	0x0000ba44
    cc54:	0000ba36 	.word	0x0000ba36
    cc58:	0000b928 	.word	0x0000b928
    cc5c:	0000ba44 	.word	0x0000ba44
    cc60:	0000ba36 	.word	0x0000ba36
    cc64:	0000ba44 	.word	0x0000ba44
    cc68:	0000b928 	.word	0x0000b928
    cc6c:	0000ba4c 	.word	0x0000ba4c
    cc70:	0000ba4c 	.word	0x0000ba4c
    cc74:	0000ba4c 	.word	0x0000ba4c
    cc78:	0000bc50 	.word	0x0000bc50

0000cc7c <_global_impure_ptr>:
    cc7c:	20000008                                ... 

0000cc80 <_init>:
    cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc82:	46c0      	nop			; (mov r8, r8)
    cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc86:	bc08      	pop	{r3}
    cc88:	469e      	mov	lr, r3
    cc8a:	4770      	bx	lr

0000cc8c <__init_array_start>:
    cc8c:	0000c93d 	.word	0x0000c93d

0000cc90 <__frame_dummy_init_array_entry>:
    cc90:	000040dd                                .@..

0000cc94 <_fini>:
    cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc96:	46c0      	nop			; (mov r8, r8)
    cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc9a:	bc08      	pop	{r3}
    cc9c:	469e      	mov	lr, r3
    cc9e:	4770      	bx	lr

0000cca0 <__fini_array_start>:
    cca0:	000040b5 	.word	0x000040b5
