
eth-rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c60  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000cc60  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ab4  20000434  0000d094  00010434  2**2
                  ALLOC
  3 .stack        00002000  20003ee8  00010b48  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000473db  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b5  00000000  00000000  00057890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001208  00000000  00000000  0005ad45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0005bf4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017045  00000000  00000000  0005c18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a70b  00000000  00000000  000731d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00071a7d  00000000  00000000  0007d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001054  00000000  00000000  000ef35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000f03b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	e8 5e 00 20 15 41 00 00 0d 42 00 00 0d 42 00 00     .^. .A...B...B..
	...
    402c:	0d 42 00 00 00 00 00 00 00 00 00 00 0d 42 00 00     .B...........B..
    403c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    404c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    405c:	0d 42 00 00 0d 42 00 00 51 96 00 00 61 96 00 00     .B...B..Q...a...
    406c:	41 96 00 00 31 96 00 00 0d 42 00 00 61 7c 00 00     A...1....B..a|..
    407c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 f1 7f 00 00     .B...B...B......
    408c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    409c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
	...

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000434 	.word	0x20000434
    40d4:	00000000 	.word	0x00000000
    40d8:	0000cc60 	.word	0x0000cc60

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000438 	.word	0x20000438
    4108:	0000cc60 	.word	0x0000cc60
    410c:	0000cc60 	.word	0x0000cc60
    4110:	00000000 	.word	0x00000000

00004114 <Reset_Handler>:
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	4b2f      	ldr	r3, [pc, #188]	; (41d8 <Reset_Handler+0xc4>)
    411c:	607b      	str	r3, [r7, #4]
    411e:	4b2f      	ldr	r3, [pc, #188]	; (41dc <Reset_Handler+0xc8>)
    4120:	603b      	str	r3, [r7, #0]
    4122:	687a      	ldr	r2, [r7, #4]
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d00c      	beq.n	4144 <Reset_Handler+0x30>
    412a:	e007      	b.n	413c <Reset_Handler+0x28>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	1d1a      	adds	r2, r3, #4
    4130:	603a      	str	r2, [r7, #0]
    4132:	687a      	ldr	r2, [r7, #4]
    4134:	1d11      	adds	r1, r2, #4
    4136:	6079      	str	r1, [r7, #4]
    4138:	6812      	ldr	r2, [r2, #0]
    413a:	601a      	str	r2, [r3, #0]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	4b28      	ldr	r3, [pc, #160]	; (41e0 <Reset_Handler+0xcc>)
    4140:	429a      	cmp	r2, r3
    4142:	d3f3      	bcc.n	412c <Reset_Handler+0x18>
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <Reset_Handler+0xd0>)
    4146:	603b      	str	r3, [r7, #0]
    4148:	e004      	b.n	4154 <Reset_Handler+0x40>
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	1d1a      	adds	r2, r3, #4
    414e:	603a      	str	r2, [r7, #0]
    4150:	2200      	movs	r2, #0
    4152:	601a      	str	r2, [r3, #0]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	4b24      	ldr	r3, [pc, #144]	; (41e8 <Reset_Handler+0xd4>)
    4158:	429a      	cmp	r2, r3
    415a:	d3f6      	bcc.n	414a <Reset_Handler+0x36>
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <Reset_Handler+0xd8>)
    415e:	607b      	str	r3, [r7, #4]
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <Reset_Handler+0xdc>)
    4162:	687a      	ldr	r2, [r7, #4]
    4164:	21ff      	movs	r1, #255	; 0xff
    4166:	438a      	bics	r2, r1
    4168:	609a      	str	r2, [r3, #8]
    416a:	4a22      	ldr	r2, [pc, #136]	; (41f4 <Reset_Handler+0xe0>)
    416c:	2390      	movs	r3, #144	; 0x90
    416e:	005b      	lsls	r3, r3, #1
    4170:	2102      	movs	r1, #2
    4172:	50d1      	str	r1, [r2, r3]
    4174:	4a20      	ldr	r2, [pc, #128]	; (41f8 <Reset_Handler+0xe4>)
    4176:	78d3      	ldrb	r3, [r2, #3]
    4178:	2103      	movs	r1, #3
    417a:	438b      	bics	r3, r1
    417c:	1c19      	adds	r1, r3, #0
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	70d3      	strb	r3, [r2, #3]
    4184:	4a1c      	ldr	r2, [pc, #112]	; (41f8 <Reset_Handler+0xe4>)
    4186:	78d3      	ldrb	r3, [r2, #3]
    4188:	210c      	movs	r1, #12
    418a:	438b      	bics	r3, r1
    418c:	1c19      	adds	r1, r3, #0
    418e:	2308      	movs	r3, #8
    4190:	430b      	orrs	r3, r1
    4192:	70d3      	strb	r3, [r2, #3]
    4194:	4a19      	ldr	r2, [pc, #100]	; (41fc <Reset_Handler+0xe8>)
    4196:	7b93      	ldrb	r3, [r2, #14]
    4198:	2130      	movs	r1, #48	; 0x30
    419a:	438b      	bics	r3, r1
    419c:	1c19      	adds	r1, r3, #0
    419e:	2320      	movs	r3, #32
    41a0:	430b      	orrs	r3, r1
    41a2:	7393      	strb	r3, [r2, #14]
    41a4:	4a15      	ldr	r2, [pc, #84]	; (41fc <Reset_Handler+0xe8>)
    41a6:	7b93      	ldrb	r3, [r2, #14]
    41a8:	210c      	movs	r1, #12
    41aa:	438b      	bics	r3, r1
    41ac:	1c19      	adds	r1, r3, #0
    41ae:	2308      	movs	r3, #8
    41b0:	430b      	orrs	r3, r1
    41b2:	7393      	strb	r3, [r2, #14]
    41b4:	4a11      	ldr	r2, [pc, #68]	; (41fc <Reset_Handler+0xe8>)
    41b6:	7b93      	ldrb	r3, [r2, #14]
    41b8:	2103      	movs	r1, #3
    41ba:	438b      	bics	r3, r1
    41bc:	1c19      	adds	r1, r3, #0
    41be:	2302      	movs	r3, #2
    41c0:	430b      	orrs	r3, r1
    41c2:	7393      	strb	r3, [r2, #14]
    41c4:	4a0e      	ldr	r2, [pc, #56]	; (4200 <Reset_Handler+0xec>)
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	2180      	movs	r1, #128	; 0x80
    41ca:	430b      	orrs	r3, r1
    41cc:	6053      	str	r3, [r2, #4]
    41ce:	4b0d      	ldr	r3, [pc, #52]	; (4204 <Reset_Handler+0xf0>)
    41d0:	4798      	blx	r3
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <Reset_Handler+0xf4>)
    41d4:	4798      	blx	r3
    41d6:	e7fe      	b.n	41d6 <Reset_Handler+0xc2>
    41d8:	0000cc60 	.word	0x0000cc60
    41dc:	20000000 	.word	0x20000000
    41e0:	20000434 	.word	0x20000434
    41e4:	20000434 	.word	0x20000434
    41e8:	20003ee8 	.word	0x20003ee8
    41ec:	00004000 	.word	0x00004000
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	41007000 	.word	0x41007000
    41f8:	41005000 	.word	0x41005000
    41fc:	41004800 	.word	0x41004800
    4200:	41004000 	.word	0x41004000
    4204:	0000c799 	.word	0x0000c799
    4208:	000071f9 	.word	0x000071f9

0000420c <Dummy_Handler>:
    420c:	b580      	push	{r7, lr}
    420e:	af00      	add	r7, sp, #0
    4210:	e7fe      	b.n	4210 <Dummy_Handler+0x4>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <acc>:
#include "def.h"

void acc(BYTE cmd)//command(читать, записать, сбросить)
{
    4214:	b5b0      	push	{r4, r5, r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	0002      	movs	r2, r0
    421c:	1dfb      	adds	r3, r7, #7
    421e:	701a      	strb	r2, [r3, #0]
	if (sizeof(ACCOUNTS) != 256) {cmd = 109;}
	switch(cmd)
    4220:	1dfb      	adds	r3, r7, #7
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	2b01      	cmp	r3, #1
    4226:	d00b      	beq.n	4240 <acc+0x2c>
    4228:	2b02      	cmp	r3, #2
    422a:	d01e      	beq.n	426a <acc+0x56>
    422c:	2b00      	cmp	r3, #0
    422e:	d174      	bne.n	431a <acc+0x106>
	{
		case READ:
			memcpy(&accnts.accnt[0].login[0], ACCOUNT_PLACE, sizeof(ACCOUNTS));
    4230:	2380      	movs	r3, #128	; 0x80
    4232:	005a      	lsls	r2, r3, #1
    4234:	4948      	ldr	r1, [pc, #288]	; (4358 <acc+0x144>)
    4236:	4b49      	ldr	r3, [pc, #292]	; (435c <acc+0x148>)
    4238:	0018      	movs	r0, r3
    423a:	4b49      	ldr	r3, [pc, #292]	; (4360 <acc+0x14c>)
    423c:	4798      	blx	r3
		break;
    423e:	e087      	b.n	4350 <acc+0x13c>
		case WRITE:
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    4240:	2380      	movs	r3, #128	; 0x80
    4242:	005b      	lsls	r3, r3, #1
    4244:	4a44      	ldr	r2, [pc, #272]	; (4358 <acc+0x144>)
    4246:	0019      	movs	r1, r3
    4248:	0010      	movs	r0, r2
    424a:	4b46      	ldr	r3, [pc, #280]	; (4364 <acc+0x150>)
    424c:	4798      	blx	r3
    424e:	1e03      	subs	r3, r0, #0
    4250:	d103      	bne.n	425a <acc+0x46>
    4252:	4b41      	ldr	r3, [pc, #260]	; (4358 <acc+0x144>)
    4254:	0018      	movs	r0, r3
    4256:	4b44      	ldr	r3, [pc, #272]	; (4368 <acc+0x154>)
    4258:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0], sizeof(ACCOUNTS));
    425a:	2380      	movs	r3, #128	; 0x80
    425c:	005a      	lsls	r2, r3, #1
    425e:	4b3f      	ldr	r3, [pc, #252]	; (435c <acc+0x148>)
    4260:	483d      	ldr	r0, [pc, #244]	; (4358 <acc+0x144>)
    4262:	0019      	movs	r1, r3
    4264:	4b41      	ldr	r3, [pc, #260]	; (436c <acc+0x158>)
    4266:	4798      	blx	r3
		break;
    4268:	e072      	b.n	4350 <acc+0x13c>
		case DROP:

			memset(&accnts.accnt[0].login[0], 0, 64);
    426a:	4b3c      	ldr	r3, [pc, #240]	; (435c <acc+0x148>)
    426c:	2240      	movs	r2, #64	; 0x40
    426e:	2100      	movs	r1, #0
    4270:	0018      	movs	r0, r3
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <acc+0x15c>)
    4274:	4798      	blx	r3
			memcpy(&accnts.accnt[0].login[0], ADMIN, sizeof(ADMIN));
    4276:	493f      	ldr	r1, [pc, #252]	; (4374 <acc+0x160>)
    4278:	4b38      	ldr	r3, [pc, #224]	; (435c <acc+0x148>)
    427a:	2206      	movs	r2, #6
    427c:	0018      	movs	r0, r3
    427e:	4b38      	ldr	r3, [pc, #224]	; (4360 <acc+0x14c>)
    4280:	4798      	blx	r3
			memcpy(&accnts.accnt[0].password[0], ADMIN, sizeof(ADMIN));
    4282:	493c      	ldr	r1, [pc, #240]	; (4374 <acc+0x160>)
    4284:	4b3c      	ldr	r3, [pc, #240]	; (4378 <acc+0x164>)
    4286:	2206      	movs	r2, #6
    4288:	0018      	movs	r0, r3
    428a:	4b35      	ldr	r3, [pc, #212]	; (4360 <acc+0x14c>)
    428c:	4798      	blx	r3

			memset(&accnts.accnt[1].login[0], 0, 64);
    428e:	4b3b      	ldr	r3, [pc, #236]	; (437c <acc+0x168>)
    4290:	2240      	movs	r2, #64	; 0x40
    4292:	2100      	movs	r1, #0
    4294:	0018      	movs	r0, r3
    4296:	4b36      	ldr	r3, [pc, #216]	; (4370 <acc+0x15c>)
    4298:	4798      	blx	r3
			memcpy(&accnts.accnt[1].login[0], USER, sizeof(USER));
    429a:	4939      	ldr	r1, [pc, #228]	; (4380 <acc+0x16c>)
    429c:	4b37      	ldr	r3, [pc, #220]	; (437c <acc+0x168>)
    429e:	2205      	movs	r2, #5
    42a0:	0018      	movs	r0, r3
    42a2:	4b2f      	ldr	r3, [pc, #188]	; (4360 <acc+0x14c>)
    42a4:	4798      	blx	r3
			memcpy(&accnts.accnt[1].password[0], USER, sizeof(USER));
    42a6:	4936      	ldr	r1, [pc, #216]	; (4380 <acc+0x16c>)
    42a8:	4b36      	ldr	r3, [pc, #216]	; (4384 <acc+0x170>)
    42aa:	2205      	movs	r2, #5
    42ac:	0018      	movs	r0, r3
    42ae:	4b2c      	ldr	r3, [pc, #176]	; (4360 <acc+0x14c>)
    42b0:	4798      	blx	r3
			
			accnts.cs = crc16_ccit(&accnts.accnt[0].login, sizeof(ACCOUNTS));
    42b2:	2380      	movs	r3, #128	; 0x80
    42b4:	005a      	lsls	r2, r3, #1
    42b6:	4b29      	ldr	r3, [pc, #164]	; (435c <acc+0x148>)
    42b8:	0011      	movs	r1, r2
    42ba:	0018      	movs	r0, r3
    42bc:	4b32      	ldr	r3, [pc, #200]	; (4388 <acc+0x174>)
    42be:	4798      	blx	r3
    42c0:	0003      	movs	r3, r0
    42c2:	0019      	movs	r1, r3
    42c4:	4b25      	ldr	r3, [pc, #148]	; (435c <acc+0x148>)
    42c6:	22fe      	movs	r2, #254	; 0xfe
    42c8:	20ff      	movs	r0, #255	; 0xff
    42ca:	4008      	ands	r0, r1
    42cc:	0005      	movs	r5, r0
    42ce:	5c98      	ldrb	r0, [r3, r2]
    42d0:	2400      	movs	r4, #0
    42d2:	4020      	ands	r0, r4
    42d4:	1c04      	adds	r4, r0, #0
    42d6:	1c28      	adds	r0, r5, #0
    42d8:	4320      	orrs	r0, r4
    42da:	5498      	strb	r0, [r3, r2]
    42dc:	0a09      	lsrs	r1, r1, #8
    42de:	b288      	uxth	r0, r1
    42e0:	189b      	adds	r3, r3, r2
    42e2:	785a      	ldrb	r2, [r3, #1]
    42e4:	2100      	movs	r1, #0
    42e6:	400a      	ands	r2, r1
    42e8:	1c11      	adds	r1, r2, #0
    42ea:	1c02      	adds	r2, r0, #0
    42ec:	430a      	orrs	r2, r1
    42ee:	705a      	strb	r2, [r3, #1]
			
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	4a18      	ldr	r2, [pc, #96]	; (4358 <acc+0x144>)
    42f6:	0019      	movs	r1, r3
    42f8:	0010      	movs	r0, r2
    42fa:	4b1a      	ldr	r3, [pc, #104]	; (4364 <acc+0x150>)
    42fc:	4798      	blx	r3
    42fe:	1e03      	subs	r3, r0, #0
    4300:	d103      	bne.n	430a <acc+0xf6>
    4302:	4b15      	ldr	r3, [pc, #84]	; (4358 <acc+0x144>)
    4304:	0018      	movs	r0, r3
    4306:	4b18      	ldr	r3, [pc, #96]	; (4368 <acc+0x154>)
    4308:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
    430a:	2380      	movs	r3, #128	; 0x80
    430c:	005a      	lsls	r2, r3, #1
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <acc+0x148>)
    4310:	4811      	ldr	r0, [pc, #68]	; (4358 <acc+0x144>)
    4312:	0019      	movs	r1, r3
    4314:	4b15      	ldr	r3, [pc, #84]	; (436c <acc+0x158>)
    4316:	4798      	blx	r3
		break;
    4318:	e01a      	b.n	4350 <acc+0x13c>
		default:
			warning_led(3);
    431a:	230f      	movs	r3, #15
    431c:	18fb      	adds	r3, r7, r3
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
    4322:	e00f      	b.n	4344 <acc+0x130>
    4324:	2202      	movs	r2, #2
    4326:	2100      	movs	r1, #0
    4328:	2001      	movs	r0, #1
    432a:	4b18      	ldr	r3, [pc, #96]	; (438c <acc+0x178>)
    432c:	4798      	blx	r3
    432e:	4b18      	ldr	r3, [pc, #96]	; (4390 <acc+0x17c>)
    4330:	0018      	movs	r0, r3
    4332:	4b18      	ldr	r3, [pc, #96]	; (4394 <acc+0x180>)
    4334:	4798      	blx	r3
    4336:	230f      	movs	r3, #15
    4338:	18fb      	adds	r3, r7, r3
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	230f      	movs	r3, #15
    433e:	18fb      	adds	r3, r7, r3
    4340:	3201      	adds	r2, #1
    4342:	701a      	strb	r2, [r3, #0]
    4344:	230f      	movs	r3, #15
    4346:	18fb      	adds	r3, r7, r3
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	2b05      	cmp	r3, #5
    434c:	d9ea      	bls.n	4324 <acc+0x110>
		break;
    434e:	46c0      	nop			; (mov r8, r8)
	}
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b004      	add	sp, #16
    4356:	bdb0      	pop	{r4, r5, r7, pc}
    4358:	0003f300 	.word	0x0003f300
    435c:	20002554 	.word	0x20002554
    4360:	0000c7e1 	.word	0x0000c7e1
    4364:	00006699 	.word	0x00006699
    4368:	000066df 	.word	0x000066df
    436c:	0000672d 	.word	0x0000672d
    4370:	0000c865 	.word	0x0000c865
    4374:	0000ca50 	.word	0x0000ca50
    4378:	20002574 	.word	0x20002574
    437c:	20002594 	.word	0x20002594
    4380:	0000ca58 	.word	0x0000ca58
    4384:	200025b4 	.word	0x200025b4
    4388:	00005ce9 	.word	0x00005ce9
    438c:	00006d31 	.word	0x00006d31
    4390:	00000dac 	.word	0x00000dac
    4394:	000081a1 	.word	0x000081a1

00004398 <acces_ip>:

BYTE acces_ip(BYTE n_port)//True-1,F-0;
{
    4398:	b580      	push	{r7, lr}
    439a:	b084      	sub	sp, #16
    439c:	af00      	add	r7, sp, #0
    439e:	0002      	movs	r2, r0
    43a0:	1dfb      	adds	r3, r7, #7
    43a2:	701a      	strb	r2, [r3, #0]
	BYTE ch = 0;
    43a4:	230f      	movs	r3, #15
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2200      	movs	r2, #0
    43aa:	701a      	strb	r2, [r3, #0]
	if		(SRAV(4, &cfg_1.access[n_port].ip[0], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	781a      	ldrb	r2, [r3, #0]
    43b0:	0013      	movs	r3, r2
    43b2:	00db      	lsls	r3, r3, #3
    43b4:	189b      	adds	r3, r3, r2
    43b6:	005b      	lsls	r3, r3, #1
    43b8:	3368      	adds	r3, #104	; 0x68
    43ba:	001a      	movs	r2, r3
    43bc:	4b3e      	ldr	r3, [pc, #248]	; (44b8 <acces_ip+0x120>)
    43be:	18d3      	adds	r3, r2, r3
    43c0:	1d19      	adds	r1, r3, #4
    43c2:	1dfb      	adds	r3, r7, #7
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	3301      	adds	r3, #1
    43c8:	4a3c      	ldr	r2, [pc, #240]	; (44bc <acces_ip+0x124>)
    43ca:	435a      	muls	r2, r3
    43cc:	4b3c      	ldr	r3, [pc, #240]	; (44c0 <acces_ip+0x128>)
    43ce:	18d3      	adds	r3, r2, r3
    43d0:	001a      	movs	r2, r3
    43d2:	2004      	movs	r0, #4
    43d4:	4b3b      	ldr	r3, [pc, #236]	; (44c4 <acces_ip+0x12c>)
    43d6:	4798      	blx	r3
    43d8:	1e03      	subs	r3, r0, #0
    43da:	d007      	beq.n	43ec <acces_ip+0x54>
    43dc:	230f      	movs	r3, #15
    43de:	18fb      	adds	r3, r7, r3
    43e0:	781a      	ldrb	r2, [r3, #0]
    43e2:	230f      	movs	r3, #15
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	3201      	adds	r2, #1
    43e8:	701a      	strb	r2, [r3, #0]
    43ea:	e05e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[1], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ec:	1dfb      	adds	r3, r7, #7
    43ee:	781a      	ldrb	r2, [r3, #0]
    43f0:	0013      	movs	r3, r2
    43f2:	00db      	lsls	r3, r3, #3
    43f4:	189b      	adds	r3, r3, r2
    43f6:	005b      	lsls	r3, r3, #1
    43f8:	336c      	adds	r3, #108	; 0x6c
    43fa:	001a      	movs	r2, r3
    43fc:	4b2e      	ldr	r3, [pc, #184]	; (44b8 <acces_ip+0x120>)
    43fe:	18d3      	adds	r3, r2, r3
    4400:	1d19      	adds	r1, r3, #4
    4402:	1dfb      	adds	r3, r7, #7
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	3301      	adds	r3, #1
    4408:	4a2c      	ldr	r2, [pc, #176]	; (44bc <acces_ip+0x124>)
    440a:	435a      	muls	r2, r3
    440c:	4b2c      	ldr	r3, [pc, #176]	; (44c0 <acces_ip+0x128>)
    440e:	18d3      	adds	r3, r2, r3
    4410:	001a      	movs	r2, r3
    4412:	2004      	movs	r0, #4
    4414:	4b2b      	ldr	r3, [pc, #172]	; (44c4 <acces_ip+0x12c>)
    4416:	4798      	blx	r3
    4418:	1e03      	subs	r3, r0, #0
    441a:	d007      	beq.n	442c <acces_ip+0x94>
    441c:	230f      	movs	r3, #15
    441e:	18fb      	adds	r3, r7, r3
    4420:	781a      	ldrb	r2, [r3, #0]
    4422:	230f      	movs	r3, #15
    4424:	18fb      	adds	r3, r7, r3
    4426:	3201      	adds	r2, #1
    4428:	701a      	strb	r2, [r3, #0]
    442a:	e03e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[2], eth_sock[n_port+1].ip_addr)) {ch++;}
    442c:	1dfb      	adds	r3, r7, #7
    442e:	781a      	ldrb	r2, [r3, #0]
    4430:	0013      	movs	r3, r2
    4432:	00db      	lsls	r3, r3, #3
    4434:	189b      	adds	r3, r3, r2
    4436:	005b      	lsls	r3, r3, #1
    4438:	3370      	adds	r3, #112	; 0x70
    443a:	001a      	movs	r2, r3
    443c:	4b1e      	ldr	r3, [pc, #120]	; (44b8 <acces_ip+0x120>)
    443e:	18d3      	adds	r3, r2, r3
    4440:	1d19      	adds	r1, r3, #4
    4442:	1dfb      	adds	r3, r7, #7
    4444:	781b      	ldrb	r3, [r3, #0]
    4446:	3301      	adds	r3, #1
    4448:	4a1c      	ldr	r2, [pc, #112]	; (44bc <acces_ip+0x124>)
    444a:	435a      	muls	r2, r3
    444c:	4b1c      	ldr	r3, [pc, #112]	; (44c0 <acces_ip+0x128>)
    444e:	18d3      	adds	r3, r2, r3
    4450:	001a      	movs	r2, r3
    4452:	2004      	movs	r0, #4
    4454:	4b1b      	ldr	r3, [pc, #108]	; (44c4 <acces_ip+0x12c>)
    4456:	4798      	blx	r3
    4458:	1e03      	subs	r3, r0, #0
    445a:	d007      	beq.n	446c <acces_ip+0xd4>
    445c:	230f      	movs	r3, #15
    445e:	18fb      	adds	r3, r7, r3
    4460:	781a      	ldrb	r2, [r3, #0]
    4462:	230f      	movs	r3, #15
    4464:	18fb      	adds	r3, r7, r3
    4466:	3201      	adds	r2, #1
    4468:	701a      	strb	r2, [r3, #0]
    446a:	e01e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[3], eth_sock[n_port+1].ip_addr)) {ch++;}
    446c:	1dfb      	adds	r3, r7, #7
    446e:	781a      	ldrb	r2, [r3, #0]
    4470:	0013      	movs	r3, r2
    4472:	00db      	lsls	r3, r3, #3
    4474:	189b      	adds	r3, r3, r2
    4476:	005b      	lsls	r3, r3, #1
    4478:	3374      	adds	r3, #116	; 0x74
    447a:	001a      	movs	r2, r3
    447c:	4b0e      	ldr	r3, [pc, #56]	; (44b8 <acces_ip+0x120>)
    447e:	18d3      	adds	r3, r2, r3
    4480:	1d19      	adds	r1, r3, #4
    4482:	1dfb      	adds	r3, r7, #7
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	3301      	adds	r3, #1
    4488:	4a0c      	ldr	r2, [pc, #48]	; (44bc <acces_ip+0x124>)
    448a:	435a      	muls	r2, r3
    448c:	4b0c      	ldr	r3, [pc, #48]	; (44c0 <acces_ip+0x128>)
    448e:	18d3      	adds	r3, r2, r3
    4490:	001a      	movs	r2, r3
    4492:	2004      	movs	r0, #4
    4494:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <acces_ip+0x12c>)
    4496:	4798      	blx	r3
    4498:	1e03      	subs	r3, r0, #0
    449a:	d006      	beq.n	44aa <acces_ip+0x112>
    449c:	230f      	movs	r3, #15
    449e:	18fb      	adds	r3, r7, r3
    44a0:	781a      	ldrb	r2, [r3, #0]
    44a2:	230f      	movs	r3, #15
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	3201      	adds	r2, #1
    44a8:	701a      	strb	r2, [r3, #0]
	return ch;
    44aa:	230f      	movs	r3, #15
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
}
    44b0:	0018      	movs	r0, r3
    44b2:	46bd      	mov	sp, r7
    44b4:	b004      	add	sp, #16
    44b6:	bd80      	pop	{r7, pc}
    44b8:	20003dc4 	.word	0x20003dc4
    44bc:	000005e5 	.word	0x000005e5
    44c0:	200005cc 	.word	0x200005cc
    44c4:	0000495b 	.word	0x0000495b

000044c8 <log_ch>:

void log_ch( )
{
    44c8:	b580      	push	{r7, lr}
    44ca:	4f21      	ldr	r7, [pc, #132]	; (4550 <log_ch+0x88>)
    44cc:	44bd      	add	sp, r7
    44ce:	af00      	add	r7, sp, #0
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    44d0:	2380      	movs	r3, #128	; 0x80
    44d2:	00da      	lsls	r2, r3, #3
    44d4:	23b0      	movs	r3, #176	; 0xb0
    44d6:	029b      	lsls	r3, r3, #10
    44d8:	0011      	movs	r1, r2
    44da:	0018      	movs	r0, r3
    44dc:	4b1d      	ldr	r3, [pc, #116]	; (4554 <log_ch+0x8c>)
    44de:	4798      	blx	r3
    44e0:	1e03      	subs	r3, r0, #0
    44e2:	d02f      	beq.n	4544 <log_ch+0x7c>
	
	LOG_DATA data;
	data.cell[0].ip				= 0x00000000;
    44e4:	4b1a      	ldr	r3, [pc, #104]	; (4550 <log_ch+0x88>)
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	0152      	lsls	r2, r2, #5
    44ea:	4694      	mov	ip, r2
    44ec:	44bc      	add	ip, r7
    44ee:	4463      	add	r3, ip
    44f0:	2200      	movs	r2, #0
    44f2:	601a      	str	r2, [r3, #0]
	data.cell[0].times			= 0x00000000;
    44f4:	4b16      	ldr	r3, [pc, #88]	; (4550 <log_ch+0x88>)
    44f6:	2280      	movs	r2, #128	; 0x80
    44f8:	0152      	lsls	r2, r2, #5
    44fa:	4694      	mov	ip, r2
    44fc:	44bc      	add	ip, r7
    44fe:	4463      	add	r3, ip
    4500:	2200      	movs	r2, #0
    4502:	605a      	str	r2, [r3, #4]
	data.cell[0].indx			= 0;
    4504:	4b12      	ldr	r3, [pc, #72]	; (4550 <log_ch+0x88>)
    4506:	2280      	movs	r2, #128	; 0x80
    4508:	0152      	lsls	r2, r2, #5
    450a:	4694      	mov	ip, r2
    450c:	44bc      	add	ip, r7
    450e:	4463      	add	r3, ip
    4510:	2200      	movs	r2, #0
    4512:	609a      	str	r2, [r3, #8]
	data.cell[0].operat_code	= START;
    4514:	4b0e      	ldr	r3, [pc, #56]	; (4550 <log_ch+0x88>)
    4516:	2280      	movs	r2, #128	; 0x80
    4518:	0152      	lsls	r2, r2, #5
    451a:	4694      	mov	ip, r2
    451c:	44bc      	add	ip, r7
    451e:	4463      	add	r3, ip
    4520:	2204      	movs	r2, #4
    4522:	819a      	strh	r2, [r3, #12]
	data.cell[0].version		= VERSION_B;
    4524:	4b0a      	ldr	r3, [pc, #40]	; (4550 <log_ch+0x88>)
    4526:	2280      	movs	r2, #128	; 0x80
    4528:	0152      	lsls	r2, r2, #5
    452a:	4694      	mov	ip, r2
    452c:	44bc      	add	ip, r7
    452e:	4463      	add	r3, ip
    4530:	2204      	movs	r2, #4
    4532:	81da      	strh	r2, [r3, #14]
	flash_write(LOGS_ADDR ,&data.cell[0] , 16);
    4534:	0039      	movs	r1, r7
    4536:	23b0      	movs	r3, #176	; 0xb0
    4538:	029b      	lsls	r3, r3, #10
    453a:	2210      	movs	r2, #16
    453c:	0018      	movs	r0, r3
    453e:	4b06      	ldr	r3, [pc, #24]	; (4558 <log_ch+0x90>)
    4540:	4798      	blx	r3
    4542:	e000      	b.n	4546 <log_ch+0x7e>
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    4544:	46c0      	nop			; (mov r8, r8)
}
    4546:	46bd      	mov	sp, r7
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	015b      	lsls	r3, r3, #5
    454c:	449d      	add	sp, r3
    454e:	bd80      	pop	{r7, pc}
    4550:	fffff000 	.word	0xfffff000
    4554:	00006699 	.word	0x00006699
    4558:	0000672d 	.word	0x0000672d

0000455c <log_safe>:

void log_safe(BYTE actv_user_id, DWORD ip, DWORD times, WORD operat_code)
{
    455c:	b580      	push	{r7, lr}
    455e:	4f69      	ldr	r7, [pc, #420]	; (4704 <log_safe+0x1a8>)
    4560:	44bd      	add	sp, r7
    4562:	af00      	add	r7, sp, #0
    4564:	60b9      	str	r1, [r7, #8]
    4566:	607a      	str	r2, [r7, #4]
    4568:	0019      	movs	r1, r3
    456a:	4b67      	ldr	r3, [pc, #412]	; (4708 <log_safe+0x1ac>)
    456c:	4a67      	ldr	r2, [pc, #412]	; (470c <log_safe+0x1b0>)
    456e:	4694      	mov	ip, r2
    4570:	44bc      	add	ip, r7
    4572:	4463      	add	r3, ip
    4574:	1c02      	adds	r2, r0, #0
    4576:	701a      	strb	r2, [r3, #0]
    4578:	4b65      	ldr	r3, [pc, #404]	; (4710 <log_safe+0x1b4>)
    457a:	4a64      	ldr	r2, [pc, #400]	; (470c <log_safe+0x1b0>)
    457c:	4694      	mov	ip, r2
    457e:	44bc      	add	ip, r7
    4580:	4463      	add	r3, ip
    4582:	1c0a      	adds	r2, r1, #0
    4584:	801a      	strh	r2, [r3, #0]
	LOG_DATA data;
	flash_read(LOGS_ADDR, &data, 4096);
    4586:	2380      	movs	r3, #128	; 0x80
    4588:	015a      	lsls	r2, r3, #5
    458a:	2310      	movs	r3, #16
    458c:	18f9      	adds	r1, r7, r3
    458e:	23b0      	movs	r3, #176	; 0xb0
    4590:	029b      	lsls	r3, r3, #10
    4592:	0018      	movs	r0, r3
    4594:	4b5f      	ldr	r3, [pc, #380]	; (4714 <log_safe+0x1b8>)
    4596:	4798      	blx	r3
	BYTE ptr = 1;
    4598:	4b5f      	ldr	r3, [pc, #380]	; (4718 <log_safe+0x1bc>)
    459a:	18fb      	adds	r3, r7, r3
    459c:	2201      	movs	r2, #1
    459e:	701a      	strb	r2, [r3, #0]
	BYTE last_ptr = 0;
    45a0:	4b5e      	ldr	r3, [pc, #376]	; (471c <log_safe+0x1c0>)
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	2200      	movs	r2, #0
    45a6:	701a      	strb	r2, [r3, #0]
	
	while(1)	
	{
		if (ptr == CELLS)
			{ptr = 0; break;}//OVF
		if ((data.cell[last_ptr].indx + 1) != data.cell[ptr].indx) 
    45a8:	4b5c      	ldr	r3, [pc, #368]	; (471c <log_safe+0x1c0>)
    45aa:	18fb      	adds	r3, r7, r3
    45ac:	781b      	ldrb	r3, [r3, #0]
    45ae:	4a5c      	ldr	r2, [pc, #368]	; (4720 <log_safe+0x1c4>)
    45b0:	4956      	ldr	r1, [pc, #344]	; (470c <log_safe+0x1b0>)
    45b2:	468c      	mov	ip, r1
    45b4:	44bc      	add	ip, r7
    45b6:	4462      	add	r2, ip
    45b8:	011b      	lsls	r3, r3, #4
    45ba:	18d3      	adds	r3, r2, r3
    45bc:	3308      	adds	r3, #8
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	1c5a      	adds	r2, r3, #1
    45c2:	4b55      	ldr	r3, [pc, #340]	; (4718 <log_safe+0x1bc>)
    45c4:	18fb      	adds	r3, r7, r3
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	4955      	ldr	r1, [pc, #340]	; (4720 <log_safe+0x1c4>)
    45ca:	4850      	ldr	r0, [pc, #320]	; (470c <log_safe+0x1b0>)
    45cc:	4684      	mov	ip, r0
    45ce:	44bc      	add	ip, r7
    45d0:	4461      	add	r1, ip
    45d2:	011b      	lsls	r3, r3, #4
    45d4:	18cb      	adds	r3, r1, r3
    45d6:	3308      	adds	r3, #8
    45d8:	681b      	ldr	r3, [r3, #0]
    45da:	429a      	cmp	r2, r3
    45dc:	d10e      	bne.n	45fc <log_safe+0xa0>
			{ break;}
		last_ptr++;	ptr++;	
    45de:	4b4f      	ldr	r3, [pc, #316]	; (471c <log_safe+0x1c0>)
    45e0:	18fb      	adds	r3, r7, r3
    45e2:	781a      	ldrb	r2, [r3, #0]
    45e4:	4b4d      	ldr	r3, [pc, #308]	; (471c <log_safe+0x1c0>)
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	3201      	adds	r2, #1
    45ea:	701a      	strb	r2, [r3, #0]
    45ec:	4b4a      	ldr	r3, [pc, #296]	; (4718 <log_safe+0x1bc>)
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	781a      	ldrb	r2, [r3, #0]
    45f2:	4b49      	ldr	r3, [pc, #292]	; (4718 <log_safe+0x1bc>)
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	3201      	adds	r2, #1
    45f8:	701a      	strb	r2, [r3, #0]
		if (ptr == CELLS)
    45fa:	e7d5      	b.n	45a8 <log_safe+0x4c>
			{ break;}
    45fc:	46c0      	nop			; (mov r8, r8)
	}
	data.cell[ptr].ip			= ip;
    45fe:	4b46      	ldr	r3, [pc, #280]	; (4718 <log_safe+0x1bc>)
    4600:	18fb      	adds	r3, r7, r3
    4602:	781a      	ldrb	r2, [r3, #0]
    4604:	4b46      	ldr	r3, [pc, #280]	; (4720 <log_safe+0x1c4>)
    4606:	4941      	ldr	r1, [pc, #260]	; (470c <log_safe+0x1b0>)
    4608:	468c      	mov	ip, r1
    460a:	44bc      	add	ip, r7
    460c:	4463      	add	r3, ip
    460e:	0112      	lsls	r2, r2, #4
    4610:	68b9      	ldr	r1, [r7, #8]
    4612:	50d1      	str	r1, [r2, r3]
	data.cell[ptr].times		= times;
    4614:	4b40      	ldr	r3, [pc, #256]	; (4718 <log_safe+0x1bc>)
    4616:	18fb      	adds	r3, r7, r3
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	4a41      	ldr	r2, [pc, #260]	; (4720 <log_safe+0x1c4>)
    461c:	493b      	ldr	r1, [pc, #236]	; (470c <log_safe+0x1b0>)
    461e:	468c      	mov	ip, r1
    4620:	44bc      	add	ip, r7
    4622:	4462      	add	r2, ip
    4624:	011b      	lsls	r3, r3, #4
    4626:	18d3      	adds	r3, r2, r3
    4628:	3304      	adds	r3, #4
    462a:	687a      	ldr	r2, [r7, #4]
    462c:	601a      	str	r2, [r3, #0]
	data.cell[ptr].indx			= data.cell[last_ptr].indx + 1;
    462e:	4b3a      	ldr	r3, [pc, #232]	; (4718 <log_safe+0x1bc>)
    4630:	18fb      	adds	r3, r7, r3
    4632:	7818      	ldrb	r0, [r3, #0]
    4634:	4b39      	ldr	r3, [pc, #228]	; (471c <log_safe+0x1c0>)
    4636:	18fb      	adds	r3, r7, r3
    4638:	781b      	ldrb	r3, [r3, #0]
    463a:	4a39      	ldr	r2, [pc, #228]	; (4720 <log_safe+0x1c4>)
    463c:	4933      	ldr	r1, [pc, #204]	; (470c <log_safe+0x1b0>)
    463e:	468c      	mov	ip, r1
    4640:	44bc      	add	ip, r7
    4642:	4462      	add	r2, ip
    4644:	011b      	lsls	r3, r3, #4
    4646:	18d3      	adds	r3, r2, r3
    4648:	3308      	adds	r3, #8
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	1c5a      	adds	r2, r3, #1
    464e:	4b34      	ldr	r3, [pc, #208]	; (4720 <log_safe+0x1c4>)
    4650:	492e      	ldr	r1, [pc, #184]	; (470c <log_safe+0x1b0>)
    4652:	1879      	adds	r1, r7, r1
    4654:	18c9      	adds	r1, r1, r3
    4656:	0103      	lsls	r3, r0, #4
    4658:	18cb      	adds	r3, r1, r3
    465a:	3308      	adds	r3, #8
    465c:	601a      	str	r2, [r3, #0]
	data.cell[ptr].operat_code	= operat_code;
    465e:	4b2e      	ldr	r3, [pc, #184]	; (4718 <log_safe+0x1bc>)
    4660:	18fb      	adds	r3, r7, r3
    4662:	781b      	ldrb	r3, [r3, #0]
    4664:	4a2e      	ldr	r2, [pc, #184]	; (4720 <log_safe+0x1c4>)
    4666:	4929      	ldr	r1, [pc, #164]	; (470c <log_safe+0x1b0>)
    4668:	468c      	mov	ip, r1
    466a:	44bc      	add	ip, r7
    466c:	4462      	add	r2, ip
    466e:	011b      	lsls	r3, r3, #4
    4670:	18d3      	adds	r3, r2, r3
    4672:	330c      	adds	r3, #12
    4674:	4a26      	ldr	r2, [pc, #152]	; (4710 <log_safe+0x1b4>)
    4676:	4925      	ldr	r1, [pc, #148]	; (470c <log_safe+0x1b0>)
    4678:	468c      	mov	ip, r1
    467a:	44bc      	add	ip, r7
    467c:	4462      	add	r2, ip
    467e:	8812      	ldrh	r2, [r2, #0]
    4680:	801a      	strh	r2, [r3, #0]
	data.cell[ptr].version		= VERSION_B;
    4682:	4b25      	ldr	r3, [pc, #148]	; (4718 <log_safe+0x1bc>)
    4684:	18fb      	adds	r3, r7, r3
    4686:	781b      	ldrb	r3, [r3, #0]
    4688:	4a25      	ldr	r2, [pc, #148]	; (4720 <log_safe+0x1c4>)
    468a:	4920      	ldr	r1, [pc, #128]	; (470c <log_safe+0x1b0>)
    468c:	468c      	mov	ip, r1
    468e:	44bc      	add	ip, r7
    4690:	4462      	add	r2, ip
    4692:	011b      	lsls	r3, r3, #4
    4694:	18d3      	adds	r3, r2, r3
    4696:	330e      	adds	r3, #14
    4698:	2204      	movs	r2, #4
    469a:	801a      	strh	r2, [r3, #0]
	
	dst = LOGS_ADDR + (ptr * CELL);
    469c:	4b1e      	ldr	r3, [pc, #120]	; (4718 <log_safe+0x1bc>)
    469e:	18fb      	adds	r3, r7, r3
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	011b      	lsls	r3, r3, #4
    46a4:	22b0      	movs	r2, #176	; 0xb0
    46a6:	0292      	lsls	r2, r2, #10
    46a8:	4694      	mov	ip, r2
    46aa:	4463      	add	r3, ip
    46ac:	4a1d      	ldr	r2, [pc, #116]	; (4724 <log_safe+0x1c8>)
    46ae:	18ba      	adds	r2, r7, r2
    46b0:	6013      	str	r3, [r2, #0]
		
	if ((ptr % 16) == 0) 
    46b2:	4b19      	ldr	r3, [pc, #100]	; (4718 <log_safe+0x1bc>)
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	220f      	movs	r2, #15
    46ba:	4013      	ands	r3, r2
    46bc:	b2db      	uxtb	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	d10c      	bne.n	46dc <log_safe+0x180>
	{
		flash_erase_row(LOGS_ADDR + ((ptr/CELL) * BLOCK));
    46c2:	4b15      	ldr	r3, [pc, #84]	; (4718 <log_safe+0x1bc>)
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	091b      	lsrs	r3, r3, #4
    46ca:	b2db      	uxtb	r3, r3
    46cc:	021b      	lsls	r3, r3, #8
    46ce:	22b0      	movs	r2, #176	; 0xb0
    46d0:	0292      	lsls	r2, r2, #10
    46d2:	4694      	mov	ip, r2
    46d4:	4463      	add	r3, ip
    46d6:	0018      	movs	r0, r3
    46d8:	4b13      	ldr	r3, [pc, #76]	; (4728 <log_safe+0x1cc>)
    46da:	4798      	blx	r3
	} 
	flash_write(dst, &data.cell[ptr].ip, 16);
    46dc:	4b11      	ldr	r3, [pc, #68]	; (4724 <log_safe+0x1c8>)
    46de:	18fb      	adds	r3, r7, r3
    46e0:	6818      	ldr	r0, [r3, #0]
    46e2:	4b0d      	ldr	r3, [pc, #52]	; (4718 <log_safe+0x1bc>)
    46e4:	18fb      	adds	r3, r7, r3
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	2210      	movs	r2, #16
    46ea:	18ba      	adds	r2, r7, r2
    46ec:	011b      	lsls	r3, r3, #4
    46ee:	18d3      	adds	r3, r2, r3
    46f0:	2210      	movs	r2, #16
    46f2:	0019      	movs	r1, r3
    46f4:	4b0d      	ldr	r3, [pc, #52]	; (472c <log_safe+0x1d0>)
    46f6:	4798      	blx	r3
}
    46f8:	46c0      	nop			; (mov r8, r8)
    46fa:	46bd      	mov	sp, r7
    46fc:	4b03      	ldr	r3, [pc, #12]	; (470c <log_safe+0x1b0>)
    46fe:	449d      	add	sp, r3
    4700:	bd80      	pop	{r7, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	ffffefe8 	.word	0xffffefe8
    4708:	ffffeff7 	.word	0xffffeff7
    470c:	00001018 	.word	0x00001018
    4710:	ffffeff4 	.word	0xffffeff4
    4714:	000068e9 	.word	0x000068e9
    4718:	00001017 	.word	0x00001017
    471c:	00001016 	.word	0x00001016
    4720:	ffffeff8 	.word	0xffffeff8
    4724:	00001010 	.word	0x00001010
    4728:	00006971 	.word	0x00006971
    472c:	0000672d 	.word	0x0000672d

00004730 <log_clear>:

void log_clear()
{
    4730:	b580      	push	{r7, lr}
    4732:	b082      	sub	sp, #8
    4734:	af00      	add	r7, sp, #0
	for (BYTE i = 0; i < 16; i++)	
    4736:	1dfb      	adds	r3, r7, #7
    4738:	2200      	movs	r2, #0
    473a:	701a      	strb	r2, [r3, #0]
    473c:	e01c      	b.n	4778 <log_clear+0x48>
	{
		if(!flash_empty(LOGS_ADDR + (i * 256), 256))	
    473e:	1dfb      	adds	r3, r7, #7
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	021b      	lsls	r3, r3, #8
    4744:	22b0      	movs	r2, #176	; 0xb0
    4746:	0292      	lsls	r2, r2, #10
    4748:	189a      	adds	r2, r3, r2
    474a:	2380      	movs	r3, #128	; 0x80
    474c:	005b      	lsls	r3, r3, #1
    474e:	0019      	movs	r1, r3
    4750:	0010      	movs	r0, r2
    4752:	4b0d      	ldr	r3, [pc, #52]	; (4788 <log_clear+0x58>)
    4754:	4798      	blx	r3
    4756:	1e03      	subs	r3, r0, #0
    4758:	d109      	bne.n	476e <log_clear+0x3e>
		{flash_erase_page(LOGS_ADDR + (i * 256));}	
    475a:	1dfb      	adds	r3, r7, #7
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	021b      	lsls	r3, r3, #8
    4760:	22b0      	movs	r2, #176	; 0xb0
    4762:	0292      	lsls	r2, r2, #10
    4764:	4694      	mov	ip, r2
    4766:	4463      	add	r3, ip
    4768:	0018      	movs	r0, r3
    476a:	4b08      	ldr	r3, [pc, #32]	; (478c <log_clear+0x5c>)
    476c:	4798      	blx	r3
	for (BYTE i = 0; i < 16; i++)	
    476e:	1dfb      	adds	r3, r7, #7
    4770:	781a      	ldrb	r2, [r3, #0]
    4772:	1dfb      	adds	r3, r7, #7
    4774:	3201      	adds	r2, #1
    4776:	701a      	strb	r2, [r3, #0]
    4778:	1dfb      	adds	r3, r7, #7
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	2b0f      	cmp	r3, #15
    477e:	d9de      	bls.n	473e <log_clear+0xe>
	}
}
    4780:	46c0      	nop			; (mov r8, r8)
    4782:	46bd      	mov	sp, r7
    4784:	b002      	add	sp, #8
    4786:	bd80      	pop	{r7, pc}
    4788:	00006699 	.word	0x00006699
    478c:	000066df 	.word	0x000066df

00004790 <random_gen>:
#include "def.h"

void random_gen(BYTE size,BYTE* ptr)//size, place for write
{
    4790:	b590      	push	{r4, r7, lr}
    4792:	b085      	sub	sp, #20
    4794:	af00      	add	r7, sp, #0
    4796:	0002      	movs	r2, r0
    4798:	6039      	str	r1, [r7, #0]
    479a:	1dfb      	adds	r3, r7, #7
    479c:	701a      	strb	r2, [r3, #0]
	BYTE tc3 = 0;
    479e:	230e      	movs	r3, #14
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	2200      	movs	r2, #0
    47a4:	701a      	strb	r2, [r3, #0]
	for (BYTE i = 0; i < size; i++) 	{*ptr++ = ((tc3_cnt + 3) ^ (i + 1)) % 0xFF;}
    47a6:	230f      	movs	r3, #15
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	2200      	movs	r2, #0
    47ac:	701a      	strb	r2, [r3, #0]
    47ae:	e018      	b.n	47e2 <random_gen+0x52>
    47b0:	683c      	ldr	r4, [r7, #0]
    47b2:	1c63      	adds	r3, r4, #1
    47b4:	603b      	str	r3, [r7, #0]
    47b6:	4b10      	ldr	r3, [pc, #64]	; (47f8 <random_gen+0x68>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	3303      	adds	r3, #3
    47bc:	220f      	movs	r2, #15
    47be:	18ba      	adds	r2, r7, r2
    47c0:	7812      	ldrb	r2, [r2, #0]
    47c2:	3201      	adds	r2, #1
    47c4:	405a      	eors	r2, r3
    47c6:	4b0d      	ldr	r3, [pc, #52]	; (47fc <random_gen+0x6c>)
    47c8:	21ff      	movs	r1, #255	; 0xff
    47ca:	0010      	movs	r0, r2
    47cc:	4798      	blx	r3
    47ce:	000b      	movs	r3, r1
    47d0:	b2db      	uxtb	r3, r3
    47d2:	7023      	strb	r3, [r4, #0]
    47d4:	230f      	movs	r3, #15
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	781a      	ldrb	r2, [r3, #0]
    47da:	230f      	movs	r3, #15
    47dc:	18fb      	adds	r3, r7, r3
    47de:	3201      	adds	r2, #1
    47e0:	701a      	strb	r2, [r3, #0]
    47e2:	230f      	movs	r3, #15
    47e4:	18fa      	adds	r2, r7, r3
    47e6:	1dfb      	adds	r3, r7, #7
    47e8:	7812      	ldrb	r2, [r2, #0]
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	429a      	cmp	r2, r3
    47ee:	d3df      	bcc.n	47b0 <random_gen+0x20>
}
    47f0:	46c0      	nop			; (mov r8, r8)
    47f2:	46bd      	mov	sp, r7
    47f4:	b005      	add	sp, #20
    47f6:	bd90      	pop	{r4, r7, pc}
    47f8:	2000046c 	.word	0x2000046c
    47fc:	0000b0fd 	.word	0x0000b0fd

00004800 <num_to_byte>:
BYTE num_to_byte(DWORD num, BYTE len, BYTE* dst, BYTE side)//write number as bite line
{
    4800:	b580      	push	{r7, lr}
    4802:	b086      	sub	sp, #24
    4804:	af00      	add	r7, sp, #0
    4806:	60f8      	str	r0, [r7, #12]
    4808:	0008      	movs	r0, r1
    480a:	607a      	str	r2, [r7, #4]
    480c:	0019      	movs	r1, r3
    480e:	230b      	movs	r3, #11
    4810:	18fb      	adds	r3, r7, r3
    4812:	1c02      	adds	r2, r0, #0
    4814:	701a      	strb	r2, [r3, #0]
    4816:	230a      	movs	r3, #10
    4818:	18fb      	adds	r3, r7, r3
    481a:	1c0a      	adds	r2, r1, #0
    481c:	701a      	strb	r2, [r3, #0]
	if((len != W_LEN)    &&  (len != DW_LEN))         {return LEN_ERR;}
    481e:	230b      	movs	r3, #11
    4820:	18fb      	adds	r3, r7, r3
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b02      	cmp	r3, #2
    4826:	d006      	beq.n	4836 <num_to_byte+0x36>
    4828:	230b      	movs	r3, #11
    482a:	18fb      	adds	r3, r7, r3
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b04      	cmp	r3, #4
    4830:	d001      	beq.n	4836 <num_to_byte+0x36>
    4832:	2365      	movs	r3, #101	; 0x65
    4834:	e042      	b.n	48bc <num_to_byte+0xbc>
	if((side != L_SIDE)  &&  (side != R_SIDE))     {return SIDE_ERR;}
    4836:	230a      	movs	r3, #10
    4838:	18fb      	adds	r3, r7, r3
    483a:	781b      	ldrb	r3, [r3, #0]
    483c:	2b01      	cmp	r3, #1
    483e:	d006      	beq.n	484e <num_to_byte+0x4e>
    4840:	230a      	movs	r3, #10
    4842:	18fb      	adds	r3, r7, r3
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	2b00      	cmp	r3, #0
    4848:	d001      	beq.n	484e <num_to_byte+0x4e>
    484a:	2366      	movs	r3, #102	; 0x66
    484c:	e036      	b.n	48bc <num_to_byte+0xbc>

	for (BYTE i = 0; i < len; i++)
    484e:	2317      	movs	r3, #23
    4850:	18fb      	adds	r3, r7, r3
    4852:	2200      	movs	r2, #0
    4854:	701a      	strb	r2, [r3, #0]
    4856:	e028      	b.n	48aa <num_to_byte+0xaa>
	{
		if(side)    {*dst = num >> (( 8 * (len - 1 ) ) - ( i * 8 ));}
    4858:	230a      	movs	r3, #10
    485a:	18fb      	adds	r3, r7, r3
    485c:	781b      	ldrb	r3, [r3, #0]
    485e:	2b00      	cmp	r3, #0
    4860:	d00f      	beq.n	4882 <num_to_byte+0x82>
    4862:	230b      	movs	r3, #11
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
    4868:	1e5a      	subs	r2, r3, #1
    486a:	2317      	movs	r3, #23
    486c:	18fb      	adds	r3, r7, r3
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	1ad3      	subs	r3, r2, r3
    4872:	00db      	lsls	r3, r3, #3
    4874:	68fa      	ldr	r2, [r7, #12]
    4876:	40da      	lsrs	r2, r3
    4878:	0013      	movs	r3, r2
    487a:	b2da      	uxtb	r2, r3
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	701a      	strb	r2, [r3, #0]
    4880:	e009      	b.n	4896 <num_to_byte+0x96>
		else        {*dst = num >> ( i * 8 );}
    4882:	2317      	movs	r3, #23
    4884:	18fb      	adds	r3, r7, r3
    4886:	781b      	ldrb	r3, [r3, #0]
    4888:	00db      	lsls	r3, r3, #3
    488a:	68fa      	ldr	r2, [r7, #12]
    488c:	40da      	lsrs	r2, r3
    488e:	0013      	movs	r3, r2
    4890:	b2da      	uxtb	r2, r3
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	701a      	strb	r2, [r3, #0]
		dst++;
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	3301      	adds	r3, #1
    489a:	607b      	str	r3, [r7, #4]
	for (BYTE i = 0; i < len; i++)
    489c:	2317      	movs	r3, #23
    489e:	18fb      	adds	r3, r7, r3
    48a0:	781a      	ldrb	r2, [r3, #0]
    48a2:	2317      	movs	r3, #23
    48a4:	18fb      	adds	r3, r7, r3
    48a6:	3201      	adds	r2, #1
    48a8:	701a      	strb	r2, [r3, #0]
    48aa:	2317      	movs	r3, #23
    48ac:	18fa      	adds	r2, r7, r3
    48ae:	230b      	movs	r3, #11
    48b0:	18fb      	adds	r3, r7, r3
    48b2:	7812      	ldrb	r2, [r2, #0]
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	429a      	cmp	r2, r3
    48b8:	d3ce      	bcc.n	4858 <num_to_byte+0x58>
	}
	return SUCCESS;
    48ba:	2300      	movs	r3, #0
}
    48bc:	0018      	movs	r0, r3
    48be:	46bd      	mov	sp, r7
    48c0:	b006      	add	sp, #24
    48c2:	bd80      	pop	{r7, pc}

000048c4 <num_aus_byte>:
DWORD num_aus_byte(BYTE len, BYTE* src, BYTE side)//read bite line as number
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b084      	sub	sp, #16
    48c8:	af00      	add	r7, sp, #0
    48ca:	6039      	str	r1, [r7, #0]
    48cc:	0011      	movs	r1, r2
    48ce:	1dfb      	adds	r3, r7, #7
    48d0:	1c02      	adds	r2, r0, #0
    48d2:	701a      	strb	r2, [r3, #0]
    48d4:	1dbb      	adds	r3, r7, #6
    48d6:	1c0a      	adds	r2, r1, #0
    48d8:	701a      	strb	r2, [r3, #0]
	DWORD num = 0;
    48da:	2300      	movs	r3, #0
    48dc:	60fb      	str	r3, [r7, #12]
	for (BYTE i = 0; i < len;i++)
    48de:	230b      	movs	r3, #11
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	2200      	movs	r2, #0
    48e4:	701a      	strb	r2, [r3, #0]
    48e6:	e02c      	b.n	4942 <num_aus_byte+0x7e>
	{
		if(side)    {num += *src << (((len - 1) * 8) - (i * 8));}
    48e8:	1dbb      	adds	r3, r7, #6
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d011      	beq.n	4914 <num_aus_byte+0x50>
    48f0:	683b      	ldr	r3, [r7, #0]
    48f2:	781b      	ldrb	r3, [r3, #0]
    48f4:	0019      	movs	r1, r3
    48f6:	1dfb      	adds	r3, r7, #7
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	1e5a      	subs	r2, r3, #1
    48fc:	230b      	movs	r3, #11
    48fe:	18fb      	adds	r3, r7, r3
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	1ad3      	subs	r3, r2, r3
    4904:	00db      	lsls	r3, r3, #3
    4906:	4099      	lsls	r1, r3
    4908:	000b      	movs	r3, r1
    490a:	001a      	movs	r2, r3
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	189b      	adds	r3, r3, r2
    4910:	60fb      	str	r3, [r7, #12]
    4912:	e00c      	b.n	492e <num_aus_byte+0x6a>
		else        {num += *src << ( i * 8 );}
    4914:	683b      	ldr	r3, [r7, #0]
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	001a      	movs	r2, r3
    491a:	230b      	movs	r3, #11
    491c:	18fb      	adds	r3, r7, r3
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	00db      	lsls	r3, r3, #3
    4922:	409a      	lsls	r2, r3
    4924:	0013      	movs	r3, r2
    4926:	001a      	movs	r2, r3
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	189b      	adds	r3, r3, r2
    492c:	60fb      	str	r3, [r7, #12]
		src++;
    492e:	683b      	ldr	r3, [r7, #0]
    4930:	3301      	adds	r3, #1
    4932:	603b      	str	r3, [r7, #0]
	for (BYTE i = 0; i < len;i++)
    4934:	230b      	movs	r3, #11
    4936:	18fb      	adds	r3, r7, r3
    4938:	781a      	ldrb	r2, [r3, #0]
    493a:	230b      	movs	r3, #11
    493c:	18fb      	adds	r3, r7, r3
    493e:	3201      	adds	r2, #1
    4940:	701a      	strb	r2, [r3, #0]
    4942:	230b      	movs	r3, #11
    4944:	18fa      	adds	r2, r7, r3
    4946:	1dfb      	adds	r3, r7, #7
    4948:	7812      	ldrb	r2, [r2, #0]
    494a:	781b      	ldrb	r3, [r3, #0]
    494c:	429a      	cmp	r2, r3
    494e:	d3cb      	bcc.n	48e8 <num_aus_byte+0x24>
	}
	return num;
    4950:	68fb      	ldr	r3, [r7, #12]
}
    4952:	0018      	movs	r0, r3
    4954:	46bd      	mov	sp, r7
    4956:	b004      	add	sp, #16
    4958:	bd80      	pop	{r7, pc}

0000495a <SRAV>:

BYTE SRAV(BYTE len, BYTE* buf1, BYTE* buf2)//True-1,F-0;
{	for(BYTE i = 0; i < len; i++)	
    495a:	b580      	push	{r7, lr}
    495c:	b086      	sub	sp, #24
    495e:	af00      	add	r7, sp, #0
    4960:	60b9      	str	r1, [r7, #8]
    4962:	607a      	str	r2, [r7, #4]
    4964:	230f      	movs	r3, #15
    4966:	18fb      	adds	r3, r7, r3
    4968:	1c02      	adds	r2, r0, #0
    496a:	701a      	strb	r2, [r3, #0]
    496c:	2317      	movs	r3, #23
    496e:	18fb      	adds	r3, r7, r3
    4970:	2200      	movs	r2, #0
    4972:	701a      	strb	r2, [r3, #0]
    4974:	e012      	b.n	499c <SRAV+0x42>
	{	
		if(*buf1++ != *buf2++) 
    4976:	68bb      	ldr	r3, [r7, #8]
    4978:	1c5a      	adds	r2, r3, #1
    497a:	60ba      	str	r2, [r7, #8]
    497c:	781a      	ldrb	r2, [r3, #0]
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	1c59      	adds	r1, r3, #1
    4982:	6079      	str	r1, [r7, #4]
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	429a      	cmp	r2, r3
    4988:	d001      	beq.n	498e <SRAV+0x34>
		{return FALSE;}	
    498a:	2300      	movs	r3, #0
    498c:	e00f      	b.n	49ae <SRAV+0x54>
{	for(BYTE i = 0; i < len; i++)	
    498e:	2317      	movs	r3, #23
    4990:	18fb      	adds	r3, r7, r3
    4992:	781a      	ldrb	r2, [r3, #0]
    4994:	2317      	movs	r3, #23
    4996:	18fb      	adds	r3, r7, r3
    4998:	3201      	adds	r2, #1
    499a:	701a      	strb	r2, [r3, #0]
    499c:	2317      	movs	r3, #23
    499e:	18fa      	adds	r2, r7, r3
    49a0:	230f      	movs	r3, #15
    49a2:	18fb      	adds	r3, r7, r3
    49a4:	7812      	ldrb	r2, [r2, #0]
    49a6:	781b      	ldrb	r3, [r3, #0]
    49a8:	429a      	cmp	r2, r3
    49aa:	d3e4      	bcc.n	4976 <SRAV+0x1c>
	}
	return TRUE;	
    49ac:	2301      	movs	r3, #1
    49ae:	0018      	movs	r0, r3
    49b0:	46bd      	mov	sp, r7
    49b2:	b006      	add	sp, #24
    49b4:	bd80      	pop	{r7, pc}
    49b6:	46c0      	nop			; (mov r8, r8)

000049b8 <cmd_process>:

#define CM2_STATUS_PACK 0x02
#define UID_STATUS_PACK 0x8002

void cmd_process(void)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	af00      	add	r7, sp, #0
	cmd_common_process ();
    49bc:	f000 f805 	bl	49ca <cmd_common_process>
	cmd_usart_process ();
    49c0:	f000 feea 	bl	5798 <cmd_usart_process>
}
    49c4:	46c0      	nop			; (mov r8, r8)
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}

000049ca <cmd_common_process>:


void cmd_common_process (void)
{
    49ca:	b590      	push	{r4, r7, lr}
    49cc:	b085      	sub	sp, #20
    49ce:	af00      	add	r7, sp, #0
	WORD	size	= 0;
    49d0:	230e      	movs	r3, #14
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	2200      	movs	r2, #0
    49d6:	801a      	strh	r2, [r3, #0]
	WORD	addr	= 0;
    49d8:	1d3b      	adds	r3, r7, #4
    49da:	2200      	movs	r2, #0
    49dc:	801a      	strh	r2, [r3, #0]
	WORD	cnt		= 0;
    49de:	230c      	movs	r3, #12
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	2200      	movs	r2, #0
    49e4:	801a      	strh	r2, [r3, #0]
	WORD	wn		= 0;
    49e6:	230a      	movs	r3, #10
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	2200      	movs	r2, #0
    49ec:	801a      	strh	r2, [r3, #0]
	WORD	cs		= 0;
    49ee:	1cbb      	adds	r3, r7, #2
    49f0:	2200      	movs	r2, #0
    49f2:	801a      	strh	r2, [r3, #0]
	BYTE	i		= 0;
    49f4:	2309      	movs	r3, #9
    49f6:	18fb      	adds	r3, r7, r3
    49f8:	2200      	movs	r2, #0
    49fa:	701a      	strb	r2, [r3, #0]
	WORD	ixo		= 0;
    49fc:	003b      	movs	r3, r7
    49fe:	2200      	movs	r2, #0
    4a00:	801a      	strh	r2, [r3, #0]
	
	if (log_stat == 1)	
    4a02:	4b96      	ldr	r3, [pc, #600]	; (4c5c <cmd_common_process+0x292>)
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b01      	cmp	r3, #1
    4a0a:	d107      	bne.n	4a1c <cmd_common_process+0x52>
	{
		if (loggin_timeout > (300 * 10000)) 
    4a0c:	4b94      	ldr	r3, [pc, #592]	; (4c60 <cmd_common_process+0x296>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	4a94      	ldr	r2, [pc, #592]	; (4c64 <cmd_common_process+0x29a>)
    4a12:	4293      	cmp	r3, r2
    4a14:	d902      	bls.n	4a1c <cmd_common_process+0x52>
		{log_stat = 0;}
    4a16:	4b91      	ldr	r3, [pc, #580]	; (4c5c <cmd_common_process+0x292>)
    4a18:	2200      	movs	r2, #0
    4a1a:	701a      	strb	r2, [r3, #0]
	}
			
	if(eth_sock[0].r_status==FALSE) {return;}
    4a1c:	4b92      	ldr	r3, [pc, #584]	; (4c68 <cmd_common_process+0x29e>)
    4a1e:	4a93      	ldr	r2, [pc, #588]	; (4c6c <cmd_common_process+0x2a2>)
    4a20:	5c9b      	ldrb	r3, [r3, r2]
    4a22:	2b00      	cmp	r3, #0
    4a24:	d101      	bne.n	4a2a <cmd_common_process+0x60>
    4a26:	f000 fe84 	bl	5732 <cmd_common_process+0xd68>
	eth_sock[0].r_status=FALSE;
    4a2a:	4b8f      	ldr	r3, [pc, #572]	; (4c68 <cmd_common_process+0x29e>)
    4a2c:	4a8f      	ldr	r2, [pc, #572]	; (4c6c <cmd_common_process+0x2a2>)
    4a2e:	2100      	movs	r1, #0
    4a30:	5499      	strb	r1, [r3, r2]

	size=((eth_sock[0].len[0]<<8) | (eth_sock[0].len[1]));
    4a32:	4b8d      	ldr	r3, [pc, #564]	; (4c68 <cmd_common_process+0x29e>)
    4a34:	799b      	ldrb	r3, [r3, #6]
    4a36:	021b      	lsls	r3, r3, #8
    4a38:	b21a      	sxth	r2, r3
    4a3a:	4b8b      	ldr	r3, [pc, #556]	; (4c68 <cmd_common_process+0x29e>)
    4a3c:	79db      	ldrb	r3, [r3, #7]
    4a3e:	b21b      	sxth	r3, r3
    4a40:	4313      	orrs	r3, r2
    4a42:	b21a      	sxth	r2, r3
    4a44:	230e      	movs	r3, #14
    4a46:	18fb      	adds	r3, r7, r3
    4a48:	801a      	strh	r2, [r3, #0]
	
	if(size  >    sizeof(cbuf))	{size=sizeof(cbuf);}
    4a4a:	230e      	movs	r3, #14
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	881a      	ldrh	r2, [r3, #0]
    4a50:	2396      	movs	r3, #150	; 0x96
    4a52:	005b      	lsls	r3, r3, #1
    4a54:	429a      	cmp	r2, r3
    4a56:	d904      	bls.n	4a62 <cmd_common_process+0x98>
    4a58:	230e      	movs	r3, #14
    4a5a:	18fb      	adds	r3, r7, r3
    4a5c:	2296      	movs	r2, #150	; 0x96
    4a5e:	0052      	lsls	r2, r2, #1
    4a60:	801a      	strh	r2, [r3, #0]
	if(size	 <    5			  )	{ return; }
    4a62:	230e      	movs	r3, #14
    4a64:	18fb      	adds	r3, r7, r3
    4a66:	881b      	ldrh	r3, [r3, #0]
    4a68:	2b04      	cmp	r3, #4
    4a6a:	d801      	bhi.n	4a70 <cmd_common_process+0xa6>
    4a6c:	f000 fe63 	bl	5736 <cmd_common_process+0xd6c>
	
	memcpy(cbuf,(BYTE*)&eth_sock[0].data,size);
    4a70:	230e      	movs	r3, #14
    4a72:	18fb      	adds	r3, r7, r3
    4a74:	881a      	ldrh	r2, [r3, #0]
    4a76:	497e      	ldr	r1, [pc, #504]	; (4c70 <cmd_common_process+0x2a6>)
    4a78:	4b7e      	ldr	r3, [pc, #504]	; (4c74 <cmd_common_process+0x2aa>)
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b7e      	ldr	r3, [pc, #504]	; (4c78 <cmd_common_process+0x2ae>)
    4a7e:	4798      	blx	r3

	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    4a80:	230e      	movs	r3, #14
    4a82:	18fb      	adds	r3, r7, r3
    4a84:	881a      	ldrh	r2, [r3, #0]
    4a86:	4b7b      	ldr	r3, [pc, #492]	; (4c74 <cmd_common_process+0x2aa>)
    4a88:	0011      	movs	r1, r2
    4a8a:	0018      	movs	r0, r3
    4a8c:	4b7b      	ldr	r3, [pc, #492]	; (4c7c <cmd_common_process+0x2b2>)
    4a8e:	4798      	blx	r3
    4a90:	1e03      	subs	r3, r0, #0
    4a92:	d001      	beq.n	4a98 <cmd_common_process+0xce>
    4a94:	f000 fe51 	bl	573a <cmd_common_process+0xd70>
	
	addr  = *(__packed WORD*)(cbuf+0);      wn=+sizeof(WORD);
    4a98:	4a76      	ldr	r2, [pc, #472]	; (4c74 <cmd_common_process+0x2aa>)
    4a9a:	1d3b      	adds	r3, r7, #4
    4a9c:	8812      	ldrh	r2, [r2, #0]
    4a9e:	801a      	strh	r2, [r3, #0]
    4aa0:	230a      	movs	r3, #10
    4aa2:	18fb      	adds	r3, r7, r3
    4aa4:	2202      	movs	r2, #2
    4aa6:	801a      	strh	r2, [r3, #0]

	if(addr !=  0){return;}
    4aa8:	1d3b      	adds	r3, r7, #4
    4aaa:	881b      	ldrh	r3, [r3, #0]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d001      	beq.n	4ab4 <cmd_common_process+0xea>
    4ab0:	f000 fe45 	bl	573e <cmd_common_process+0xd74>
	wn++;//cmd
    4ab4:	230a      	movs	r3, #10
    4ab6:	18fb      	adds	r3, r7, r3
    4ab8:	881a      	ldrh	r2, [r3, #0]
    4aba:	230a      	movs	r3, #10
    4abc:	18fb      	adds	r3, r7, r3
    4abe:	3201      	adds	r2, #1
    4ac0:	801a      	strh	r2, [r3, #0]
//logging
	if (!SRAV(4, &eth_sock[0].ip_addr[0], &ip_addrs)) {log_stat = 0;}
    4ac2:	4a6f      	ldr	r2, [pc, #444]	; (4c80 <cmd_common_process+0x2b6>)
    4ac4:	4b68      	ldr	r3, [pc, #416]	; (4c68 <cmd_common_process+0x29e>)
    4ac6:	0019      	movs	r1, r3
    4ac8:	2004      	movs	r0, #4
    4aca:	4b6e      	ldr	r3, [pc, #440]	; (4c84 <cmd_common_process+0x2ba>)
    4acc:	4798      	blx	r3
    4ace:	1e03      	subs	r3, r0, #0
    4ad0:	d102      	bne.n	4ad8 <cmd_common_process+0x10e>
    4ad2:	4b62      	ldr	r3, [pc, #392]	; (4c5c <cmd_common_process+0x292>)
    4ad4:	2200      	movs	r2, #0
    4ad6:	701a      	strb	r2, [r3, #0]
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    4ad8:	4b66      	ldr	r3, [pc, #408]	; (4c74 <cmd_common_process+0x2aa>)
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	2b00      	cmp	r3, #0
    4ade:	d103      	bne.n	4ae8 <cmd_common_process+0x11e>
    4ae0:	4b64      	ldr	r3, [pc, #400]	; (4c74 <cmd_common_process+0x2aa>)
    4ae2:	789b      	ldrb	r3, [r3, #2]
    4ae4:	2b20      	cmp	r3, #32
    4ae6:	d006      	beq.n	4af6 <cmd_common_process+0x12c>
    4ae8:	4b5c      	ldr	r3, [pc, #368]	; (4c5c <cmd_common_process+0x292>)
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	b2db      	uxtb	r3, r3
    4aee:	2b00      	cmp	r3, #0
    4af0:	d101      	bne.n	4af6 <cmd_common_process+0x12c>
    4af2:	f000 fe26 	bl	5742 <cmd_common_process+0xd78>
	
	
	
	
	switch(cbuf[2])
    4af6:	4b5f      	ldr	r3, [pc, #380]	; (4c74 <cmd_common_process+0x2aa>)
    4af8:	789b      	ldrb	r3, [r3, #2]
    4afa:	2b29      	cmp	r3, #41	; 0x29
    4afc:	d901      	bls.n	4b02 <cmd_common_process+0x138>
    4afe:	f000 fe22 	bl	5746 <cmd_common_process+0xd7c>
    4b02:	009a      	lsls	r2, r3, #2
    4b04:	4b60      	ldr	r3, [pc, #384]	; (4c88 <cmd_common_process+0x2be>)
    4b06:	18d3      	adds	r3, r2, r3
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	469f      	mov	pc, r3
	{
		case 0x00:	if(size  !=  9) { return; }
    4b0c:	230e      	movs	r3, #14
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	881b      	ldrh	r3, [r3, #0]
    4b12:	2b09      	cmp	r3, #9
    4b14:	d001      	beq.n	4b1a <cmd_common_process+0x150>
    4b16:	f000 fe18 	bl	574a <cmd_common_process+0xd80>
					rsv_time = num_aus_byte(DW_LEN, &cbuf[3], R_SIDE);
    4b1a:	4b5c      	ldr	r3, [pc, #368]	; (4c8c <cmd_common_process+0x2c2>)
    4b1c:	2200      	movs	r2, #0
    4b1e:	0019      	movs	r1, r3
    4b20:	2004      	movs	r0, #4
    4b22:	4b5b      	ldr	r3, [pc, #364]	; (4c90 <cmd_common_process+0x2c6>)
    4b24:	4798      	blx	r3
    4b26:	0002      	movs	r2, r0
    4b28:	4b5a      	ldr	r3, [pc, #360]	; (4c94 <cmd_common_process+0x2ca>)
    4b2a:	601a      	str	r2, [r3, #0]
					loggin_timeout = 0;
    4b2c:	4b4c      	ldr	r3, [pc, #304]	; (4c60 <cmd_common_process+0x296>)
    4b2e:	2200      	movs	r2, #0
    4b30:	601a      	str	r2, [r3, #0]
					send_admin();
    4b32:	230a      	movs	r3, #10
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	881b      	ldrh	r3, [r3, #0]
    4b38:	4a4e      	ldr	r2, [pc, #312]	; (4c74 <cmd_common_process+0x2aa>)
    4b3a:	2101      	movs	r1, #1
    4b3c:	54d1      	strb	r1, [r2, r3]
    4b3e:	230a      	movs	r3, #10
    4b40:	18fb      	adds	r3, r7, r3
    4b42:	881a      	ldrh	r2, [r3, #0]
    4b44:	230a      	movs	r3, #10
    4b46:	18fb      	adds	r3, r7, r3
    4b48:	3201      	adds	r2, #1
    4b4a:	801a      	strh	r2, [r3, #0]
		break;
    4b4c:	f000 fda3 	bl	5696 <cmd_common_process+0xccc>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    4b50:	230e      	movs	r3, #14
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	881b      	ldrh	r3, [r3, #0]
    4b56:	2b06      	cmp	r3, #6
    4b58:	d001      	beq.n	4b5e <cmd_common_process+0x194>
    4b5a:	f000 fdf8 	bl	574e <cmd_common_process+0xd84>
					if(cbuf[wn]==0x01)
    4b5e:	230a      	movs	r3, #10
    4b60:	18fb      	adds	r3, r7, r3
    4b62:	881b      	ldrh	r3, [r3, #0]
    4b64:	4a43      	ldr	r2, [pc, #268]	; (4c74 <cmd_common_process+0x2aa>)
    4b66:	5cd3      	ldrb	r3, [r2, r3]
    4b68:	2b01      	cmp	r3, #1
    4b6a:	d13d      	bne.n	4be8 <cmd_common_process+0x21e>
					{
						cbuf[wn]  = (BYTE)UID_WHO_ARE_YOU;								wn += sizeof(BYTE);
    4b6c:	230a      	movs	r3, #10
    4b6e:	18fb      	adds	r3, r7, r3
    4b70:	881b      	ldrh	r3, [r3, #0]
    4b72:	4a40      	ldr	r2, [pc, #256]	; (4c74 <cmd_common_process+0x2aa>)
    4b74:	2101      	movs	r1, #1
    4b76:	54d1      	strb	r1, [r2, r3]
    4b78:	230a      	movs	r3, #10
    4b7a:	18fb      	adds	r3, r7, r3
    4b7c:	220a      	movs	r2, #10
    4b7e:	18ba      	adds	r2, r7, r2
    4b80:	8812      	ldrh	r2, [r2, #0]
    4b82:	3201      	adds	r2, #1
    4b84:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_WHO_ARE_YOU>>8);							wn += sizeof(BYTE);
    4b86:	230a      	movs	r3, #10
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	881b      	ldrh	r3, [r3, #0]
    4b8c:	4a39      	ldr	r2, [pc, #228]	; (4c74 <cmd_common_process+0x2aa>)
    4b8e:	2180      	movs	r1, #128	; 0x80
    4b90:	54d1      	strb	r1, [r2, r3]
    4b92:	230a      	movs	r3, #10
    4b94:	18fb      	adds	r3, r7, r3
    4b96:	220a      	movs	r2, #10
    4b98:	18ba      	adds	r2, r7, r2
    4b9a:	8812      	ldrh	r2, [r2, #0]
    4b9c:	3201      	adds	r2, #1
    4b9e:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],MODEL,sizeof(MODEL));							wn +=sizeof(MODEL);
    4ba0:	230a      	movs	r3, #10
    4ba2:	18fb      	adds	r3, r7, r3
    4ba4:	881a      	ldrh	r2, [r3, #0]
    4ba6:	4b33      	ldr	r3, [pc, #204]	; (4c74 <cmd_common_process+0x2aa>)
    4ba8:	18d3      	adds	r3, r2, r3
    4baa:	493b      	ldr	r1, [pc, #236]	; (4c98 <cmd_common_process+0x2ce>)
    4bac:	220d      	movs	r2, #13
    4bae:	0018      	movs	r0, r3
    4bb0:	4b31      	ldr	r3, [pc, #196]	; (4c78 <cmd_common_process+0x2ae>)
    4bb2:	4798      	blx	r3
    4bb4:	230a      	movs	r3, #10
    4bb6:	18fb      	adds	r3, r7, r3
    4bb8:	220a      	movs	r2, #10
    4bba:	18ba      	adds	r2, r7, r2
    4bbc:	8812      	ldrh	r2, [r2, #0]
    4bbe:	320d      	adds	r2, #13
    4bc0:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],VERSION,sizeof(VERSION));						wn +=sizeof(VERSION);
    4bc2:	230a      	movs	r3, #10
    4bc4:	18fb      	adds	r3, r7, r3
    4bc6:	881a      	ldrh	r2, [r3, #0]
    4bc8:	4b2a      	ldr	r3, [pc, #168]	; (4c74 <cmd_common_process+0x2aa>)
    4bca:	18d3      	adds	r3, r2, r3
    4bcc:	4933      	ldr	r1, [pc, #204]	; (4c9c <cmd_common_process+0x2d2>)
    4bce:	2209      	movs	r2, #9
    4bd0:	0018      	movs	r0, r3
    4bd2:	4b29      	ldr	r3, [pc, #164]	; (4c78 <cmd_common_process+0x2ae>)
    4bd4:	4798      	blx	r3
    4bd6:	230a      	movs	r3, #10
    4bd8:	18fb      	adds	r3, r7, r3
    4bda:	220a      	movs	r2, #10
    4bdc:	18ba      	adds	r2, r7, r2
    4bde:	8812      	ldrh	r2, [r2, #0]
    4be0:	3209      	adds	r2, #9
    4be2:	801a      	strh	r2, [r3, #0]
						break;
    4be4:	f000 fd57 	bl	5696 <cmd_common_process+0xccc>
					}
		
					if(cbuf[wn]==0x02)
    4be8:	230a      	movs	r3, #10
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	881b      	ldrh	r3, [r3, #0]
    4bee:	4a21      	ldr	r2, [pc, #132]	; (4c74 <cmd_common_process+0x2aa>)
    4bf0:	5cd3      	ldrb	r3, [r2, r3]
    4bf2:	2b02      	cmp	r3, #2
    4bf4:	d001      	beq.n	4bfa <cmd_common_process+0x230>
    4bf6:	f000 fd18 	bl	562a <cmd_common_process+0xc60>
					{
						cbuf[wn]  = (BYTE)UID_STATUS_PACK;								wn += sizeof(BYTE);
    4bfa:	230a      	movs	r3, #10
    4bfc:	18fb      	adds	r3, r7, r3
    4bfe:	881b      	ldrh	r3, [r3, #0]
    4c00:	4a1c      	ldr	r2, [pc, #112]	; (4c74 <cmd_common_process+0x2aa>)
    4c02:	2102      	movs	r1, #2
    4c04:	54d1      	strb	r1, [r2, r3]
    4c06:	230a      	movs	r3, #10
    4c08:	18fb      	adds	r3, r7, r3
    4c0a:	220a      	movs	r2, #10
    4c0c:	18ba      	adds	r2, r7, r2
    4c0e:	8812      	ldrh	r2, [r2, #0]
    4c10:	3201      	adds	r2, #1
    4c12:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_STATUS_PACK>>8);							wn += sizeof(BYTE); //uid device
    4c14:	230a      	movs	r3, #10
    4c16:	18fb      	adds	r3, r7, r3
    4c18:	881b      	ldrh	r3, [r3, #0]
    4c1a:	4a16      	ldr	r2, [pc, #88]	; (4c74 <cmd_common_process+0x2aa>)
    4c1c:	2180      	movs	r1, #128	; 0x80
    4c1e:	54d1      	strb	r1, [r2, r3]
    4c20:	230a      	movs	r3, #10
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	220a      	movs	r2, #10
    4c26:	18ba      	adds	r2, r7, r2
    4c28:	8812      	ldrh	r2, [r2, #0]
    4c2a:	3201      	adds	r2, #1
    4c2c:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],(BYTE*)&TTL,4);								wn += sizeof(DWORD);//TTL
    4c2e:	230a      	movs	r3, #10
    4c30:	18fb      	adds	r3, r7, r3
    4c32:	881a      	ldrh	r2, [r3, #0]
    4c34:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <cmd_common_process+0x2aa>)
    4c36:	18d3      	adds	r3, r2, r3
    4c38:	4919      	ldr	r1, [pc, #100]	; (4ca0 <cmd_common_process+0x2d6>)
    4c3a:	2204      	movs	r2, #4
    4c3c:	0018      	movs	r0, r3
    4c3e:	4b0e      	ldr	r3, [pc, #56]	; (4c78 <cmd_common_process+0x2ae>)
    4c40:	4798      	blx	r3
    4c42:	230a      	movs	r3, #10
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	220a      	movs	r2, #10
    4c48:	18ba      	adds	r2, r7, r2
    4c4a:	8812      	ldrh	r2, [r2, #0]
    4c4c:	3204      	adds	r2, #4
    4c4e:	801a      	strh	r2, [r3, #0]
			
						for (i = 0; i < 4; i++)
    4c50:	2309      	movs	r3, #9
    4c52:	18fb      	adds	r3, r7, r3
    4c54:	2200      	movs	r2, #0
    4c56:	701a      	strb	r2, [r3, #0]
    4c58:	e0ba      	b.n	4dd0 <cmd_common_process+0x406>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	20000450 	.word	0x20000450
    4c60:	20000470 	.word	0x20000470
    4c64:	002dc6c0 	.word	0x002dc6c0
    4c68:	200005cc 	.word	0x200005cc
    4c6c:	000005d1 	.word	0x000005d1
    4c70:	200005d4 	.word	0x200005d4
    4c74:	200004a0 	.word	0x200004a0
    4c78:	0000c7e1 	.word	0x0000c7e1
    4c7c:	00005ce9 	.word	0x00005ce9
    4c80:	2000049c 	.word	0x2000049c
    4c84:	0000495b 	.word	0x0000495b
    4c88:	0000ca7c 	.word	0x0000ca7c
    4c8c:	200004a3 	.word	0x200004a3
    4c90:	000048c5 	.word	0x000048c5
    4c94:	20000454 	.word	0x20000454
    4c98:	0000ca60 	.word	0x0000ca60
    4c9c:	0000ca70 	.word	0x0000ca70
    4ca0:	2000047c 	.word	0x2000047c
							{
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.rx,4);		wn += sizeof(DWORD);
    4ca4:	230a      	movs	r3, #10
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	881a      	ldrh	r2, [r3, #0]
    4caa:	4bd2      	ldr	r3, [pc, #840]	; (4ff4 <cmd_common_process+0x62a>)
    4cac:	18d0      	adds	r0, r2, r3
    4cae:	2309      	movs	r3, #9
    4cb0:	18fb      	adds	r3, r7, r3
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	3301      	adds	r3, #1
    4cb6:	4ad0      	ldr	r2, [pc, #832]	; (4ff8 <cmd_common_process+0x62e>)
    4cb8:	4353      	muls	r3, r2
    4cba:	22ba      	movs	r2, #186	; 0xba
    4cbc:	00d2      	lsls	r2, r2, #3
    4cbe:	189a      	adds	r2, r3, r2
    4cc0:	4bce      	ldr	r3, [pc, #824]	; (4ffc <cmd_common_process+0x632>)
    4cc2:	18d3      	adds	r3, r2, r3
    4cc4:	330b      	adds	r3, #11
    4cc6:	2204      	movs	r2, #4
    4cc8:	0019      	movs	r1, r3
    4cca:	4bcd      	ldr	r3, [pc, #820]	; (5000 <cmd_common_process+0x636>)
    4ccc:	4798      	blx	r3
    4cce:	230a      	movs	r3, #10
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	220a      	movs	r2, #10
    4cd4:	18ba      	adds	r2, r7, r2
    4cd6:	8812      	ldrh	r2, [r2, #0]
    4cd8:	3204      	adds	r2, #4
    4cda:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.tx,4);		wn += sizeof(DWORD);
    4cdc:	230a      	movs	r3, #10
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	881a      	ldrh	r2, [r3, #0]
    4ce2:	4bc4      	ldr	r3, [pc, #784]	; (4ff4 <cmd_common_process+0x62a>)
    4ce4:	18d0      	adds	r0, r2, r3
    4ce6:	2309      	movs	r3, #9
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	3301      	adds	r3, #1
    4cee:	4ac2      	ldr	r2, [pc, #776]	; (4ff8 <cmd_common_process+0x62e>)
    4cf0:	4353      	muls	r3, r2
    4cf2:	22ba      	movs	r2, #186	; 0xba
    4cf4:	00d2      	lsls	r2, r2, #3
    4cf6:	189a      	adds	r2, r3, r2
    4cf8:	4bc0      	ldr	r3, [pc, #768]	; (4ffc <cmd_common_process+0x632>)
    4cfa:	18d3      	adds	r3, r2, r3
    4cfc:	3307      	adds	r3, #7
    4cfe:	2204      	movs	r2, #4
    4d00:	0019      	movs	r1, r3
    4d02:	4bbf      	ldr	r3, [pc, #764]	; (5000 <cmd_common_process+0x636>)
    4d04:	4798      	blx	r3
    4d06:	230a      	movs	r3, #10
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	220a      	movs	r2, #10
    4d0c:	18ba      	adds	r2, r7, r2
    4d0e:	8812      	ldrh	r2, [r2, #0]
    4d10:	3204      	adds	r2, #4
    4d12:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.rx,4);			wn += sizeof(DWORD);
    4d14:	230a      	movs	r3, #10
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	881a      	ldrh	r2, [r3, #0]
    4d1a:	4bb6      	ldr	r3, [pc, #728]	; (4ff4 <cmd_common_process+0x62a>)
    4d1c:	18d0      	adds	r0, r2, r3
    4d1e:	2309      	movs	r3, #9
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	781a      	ldrb	r2, [r3, #0]
    4d24:	0013      	movs	r3, r2
    4d26:	00db      	lsls	r3, r3, #3
    4d28:	189b      	adds	r3, r3, r2
    4d2a:	019b      	lsls	r3, r3, #6
    4d2c:	228c      	movs	r2, #140	; 0x8c
    4d2e:	0092      	lsls	r2, r2, #2
    4d30:	189a      	adds	r2, r3, r2
    4d32:	4bb4      	ldr	r3, [pc, #720]	; (5004 <cmd_common_process+0x63a>)
    4d34:	18d3      	adds	r3, r2, r3
    4d36:	3308      	adds	r3, #8
    4d38:	2204      	movs	r2, #4
    4d3a:	0019      	movs	r1, r3
    4d3c:	4bb0      	ldr	r3, [pc, #704]	; (5000 <cmd_common_process+0x636>)
    4d3e:	4798      	blx	r3
    4d40:	230a      	movs	r3, #10
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	220a      	movs	r2, #10
    4d46:	18ba      	adds	r2, r7, r2
    4d48:	8812      	ldrh	r2, [r2, #0]
    4d4a:	3204      	adds	r2, #4
    4d4c:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.tx,4);			wn += sizeof(DWORD);
    4d4e:	230a      	movs	r3, #10
    4d50:	18fb      	adds	r3, r7, r3
    4d52:	881a      	ldrh	r2, [r3, #0]
    4d54:	4ba7      	ldr	r3, [pc, #668]	; (4ff4 <cmd_common_process+0x62a>)
    4d56:	18d0      	adds	r0, r2, r3
    4d58:	2309      	movs	r3, #9
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	781a      	ldrb	r2, [r3, #0]
    4d5e:	0013      	movs	r3, r2
    4d60:	00db      	lsls	r3, r3, #3
    4d62:	189b      	adds	r3, r3, r2
    4d64:	019b      	lsls	r3, r3, #6
    4d66:	228c      	movs	r2, #140	; 0x8c
    4d68:	0092      	lsls	r2, r2, #2
    4d6a:	189a      	adds	r2, r3, r2
    4d6c:	4ba5      	ldr	r3, [pc, #660]	; (5004 <cmd_common_process+0x63a>)
    4d6e:	18d3      	adds	r3, r2, r3
    4d70:	3304      	adds	r3, #4
    4d72:	2204      	movs	r2, #4
    4d74:	0019      	movs	r1, r3
    4d76:	4ba2      	ldr	r3, [pc, #648]	; (5000 <cmd_common_process+0x636>)
    4d78:	4798      	blx	r3
    4d7a:	230a      	movs	r3, #10
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	220a      	movs	r2, #10
    4d80:	18ba      	adds	r2, r7, r2
    4d82:	8812      	ldrh	r2, [r2, #0]
    4d84:	3204      	adds	r2, #4
    4d86:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].dt,2);						wn += sizeof(WORD);//dt port0
    4d88:	230a      	movs	r3, #10
    4d8a:	18fb      	adds	r3, r7, r3
    4d8c:	881a      	ldrh	r2, [r3, #0]
    4d8e:	4b99      	ldr	r3, [pc, #612]	; (4ff4 <cmd_common_process+0x62a>)
    4d90:	18d0      	adds	r0, r2, r3
    4d92:	2309      	movs	r3, #9
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	781a      	ldrb	r2, [r3, #0]
    4d98:	0013      	movs	r3, r2
    4d9a:	00db      	lsls	r3, r3, #3
    4d9c:	189b      	adds	r3, r3, r2
    4d9e:	019b      	lsls	r3, r3, #6
    4da0:	2286      	movs	r2, #134	; 0x86
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	189a      	adds	r2, r3, r2
    4da6:	4b97      	ldr	r3, [pc, #604]	; (5004 <cmd_common_process+0x63a>)
    4da8:	18d3      	adds	r3, r2, r3
    4daa:	3302      	adds	r3, #2
    4dac:	2202      	movs	r2, #2
    4dae:	0019      	movs	r1, r3
    4db0:	4b93      	ldr	r3, [pc, #588]	; (5000 <cmd_common_process+0x636>)
    4db2:	4798      	blx	r3
    4db4:	230a      	movs	r3, #10
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	220a      	movs	r2, #10
    4dba:	18ba      	adds	r2, r7, r2
    4dbc:	8812      	ldrh	r2, [r2, #0]
    4dbe:	3202      	adds	r2, #2
    4dc0:	801a      	strh	r2, [r3, #0]
						for (i = 0; i < 4; i++)
    4dc2:	2309      	movs	r3, #9
    4dc4:	18fb      	adds	r3, r7, r3
    4dc6:	781a      	ldrb	r2, [r3, #0]
    4dc8:	2309      	movs	r3, #9
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	3201      	adds	r2, #1
    4dce:	701a      	strb	r2, [r3, #0]
    4dd0:	2309      	movs	r3, #9
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	781b      	ldrb	r3, [r3, #0]
    4dd6:	2b03      	cmp	r3, #3
    4dd8:	d800      	bhi.n	4ddc <cmd_common_process+0x412>
    4dda:	e763      	b.n	4ca4 <cmd_common_process+0x2da>
							}			
					}
		break;
    4ddc:	f000 fc25 	bl	562a <cmd_common_process+0xc60>
		//......................................................................
		//......................................................................
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    4de0:	230e      	movs	r3, #14
    4de2:	18fb      	adds	r3, r7, r3
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	2b07      	cmp	r3, #7
    4de8:	d001      	beq.n	4dee <cmd_common_process+0x424>
    4dea:	f000 fcb2 	bl	5752 <cmd_common_process+0xd88>
					check_permission();	
    4dee:	4b86      	ldr	r3, [pc, #536]	; (5008 <cmd_common_process+0x63e>)
    4df0:	781b      	ldrb	r3, [r3, #0]
    4df2:	2b01      	cmp	r3, #1
    4df4:	d00e      	beq.n	4e14 <cmd_common_process+0x44a>
    4df6:	230a      	movs	r3, #10
    4df8:	18fb      	adds	r3, r7, r3
    4dfa:	881b      	ldrh	r3, [r3, #0]
    4dfc:	4a7d      	ldr	r2, [pc, #500]	; (4ff4 <cmd_common_process+0x62a>)
    4dfe:	2100      	movs	r1, #0
    4e00:	54d1      	strb	r1, [r2, r3]
    4e02:	230a      	movs	r3, #10
    4e04:	18fb      	adds	r3, r7, r3
    4e06:	881a      	ldrh	r2, [r3, #0]
    4e08:	230a      	movs	r3, #10
    4e0a:	18fb      	adds	r3, r7, r3
    4e0c:	3201      	adds	r2, #1
    4e0e:	801a      	strh	r2, [r3, #0]
    4e10:	f000 fc41 	bl	5696 <cmd_common_process+0xccc>
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4e14:	4b77      	ldr	r3, [pc, #476]	; (4ff4 <cmd_common_process+0x62a>)
    4e16:	78db      	ldrb	r3, [r3, #3]
    4e18:	b21a      	sxth	r2, r3
    4e1a:	4b76      	ldr	r3, [pc, #472]	; (4ff4 <cmd_common_process+0x62a>)
    4e1c:	791b      	ldrb	r3, [r3, #4]
    4e1e:	021b      	lsls	r3, r3, #8
    4e20:	b21b      	sxth	r3, r3
    4e22:	4313      	orrs	r3, r2
    4e24:	b21a      	sxth	r2, r3
    4e26:	003b      	movs	r3, r7
    4e28:	801a      	strh	r2, [r3, #0]
    4e2a:	230a      	movs	r3, #10
    4e2c:	18fb      	adds	r3, r7, r3
    4e2e:	220a      	movs	r2, #10
    4e30:	18ba      	adds	r2, r7, r2
    4e32:	8812      	ldrh	r2, [r2, #0]
    4e34:	3202      	adds	r2, #2
    4e36:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_1) - ixo;
    4e38:	230c      	movs	r3, #12
    4e3a:	18fb      	adds	r3, r7, r3
    4e3c:	003a      	movs	r2, r7
    4e3e:	8812      	ldrh	r2, [r2, #0]
    4e40:	2180      	movs	r1, #128	; 0x80
    4e42:	0049      	lsls	r1, r1, #1
    4e44:	1a8a      	subs	r2, r1, r2
    4e46:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_1)	) { break;  }
    4e48:	003b      	movs	r3, r7
    4e4a:	881a      	ldrh	r2, [r3, #0]
    4e4c:	2380      	movs	r3, #128	; 0x80
    4e4e:	005b      	lsls	r3, r3, #1
    4e50:	429a      	cmp	r2, r3
    4e52:	d901      	bls.n	4e58 <cmd_common_process+0x48e>
    4e54:	f000 fbeb 	bl	562e <cmd_common_process+0xc64>
					if(cnt > 256			) { cnt=256;  }
    4e58:	230c      	movs	r3, #12
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	881a      	ldrh	r2, [r3, #0]
    4e5e:	2380      	movs	r3, #128	; 0x80
    4e60:	005b      	lsls	r3, r3, #1
    4e62:	429a      	cmp	r2, r3
    4e64:	d904      	bls.n	4e70 <cmd_common_process+0x4a6>
    4e66:	230c      	movs	r3, #12
    4e68:	18fb      	adds	r3, r7, r3
    4e6a:	2280      	movs	r2, #128	; 0x80
    4e6c:	0052      	lsls	r2, r2, #1
    4e6e:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4e70:	230a      	movs	r3, #10
    4e72:	18fb      	adds	r3, r7, r3
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	220c      	movs	r2, #12
    4e78:	18ba      	adds	r2, r7, r2
    4e7a:	8812      	ldrh	r2, [r2, #0]
    4e7c:	b2d1      	uxtb	r1, r2
    4e7e:	4a5d      	ldr	r2, [pc, #372]	; (4ff4 <cmd_common_process+0x62a>)
    4e80:	54d1      	strb	r1, [r2, r3]
    4e82:	230a      	movs	r3, #10
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	220a      	movs	r2, #10
    4e88:	18ba      	adds	r2, r7, r2
    4e8a:	8812      	ldrh	r2, [r2, #0]
    4e8c:	3201      	adds	r2, #1
    4e8e:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4e90:	230a      	movs	r3, #10
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	881b      	ldrh	r3, [r3, #0]
    4e96:	220c      	movs	r2, #12
    4e98:	18ba      	adds	r2, r7, r2
    4e9a:	8812      	ldrh	r2, [r2, #0]
    4e9c:	0a12      	lsrs	r2, r2, #8
    4e9e:	b292      	uxth	r2, r2
    4ea0:	b2d1      	uxtb	r1, r2
    4ea2:	4a54      	ldr	r2, [pc, #336]	; (4ff4 <cmd_common_process+0x62a>)
    4ea4:	54d1      	strb	r1, [r2, r3]
    4ea6:	230a      	movs	r3, #10
    4ea8:	18fb      	adds	r3, r7, r3
    4eaa:	220a      	movs	r2, #10
    4eac:	18ba      	adds	r2, r7, r2
    4eae:	8812      	ldrh	r2, [r2, #0]
    4eb0:	3201      	adds	r2, #1
    4eb2:	801a      	strh	r2, [r3, #0]

					memcpy(&cbuf[wn],((BYTE*)&cfg_1)+ixo,cnt);				wn+=cnt;
    4eb4:	230a      	movs	r3, #10
    4eb6:	18fb      	adds	r3, r7, r3
    4eb8:	881a      	ldrh	r2, [r3, #0]
    4eba:	4b4e      	ldr	r3, [pc, #312]	; (4ff4 <cmd_common_process+0x62a>)
    4ebc:	18d0      	adds	r0, r2, r3
    4ebe:	003b      	movs	r3, r7
    4ec0:	881a      	ldrh	r2, [r3, #0]
    4ec2:	4b52      	ldr	r3, [pc, #328]	; (500c <cmd_common_process+0x642>)
    4ec4:	18d1      	adds	r1, r2, r3
    4ec6:	230c      	movs	r3, #12
    4ec8:	18fb      	adds	r3, r7, r3
    4eca:	881b      	ldrh	r3, [r3, #0]
    4ecc:	001a      	movs	r2, r3
    4ece:	4b4c      	ldr	r3, [pc, #304]	; (5000 <cmd_common_process+0x636>)
    4ed0:	4798      	blx	r3
    4ed2:	230a      	movs	r3, #10
    4ed4:	18fb      	adds	r3, r7, r3
    4ed6:	220a      	movs	r2, #10
    4ed8:	18b9      	adds	r1, r7, r2
    4eda:	220c      	movs	r2, #12
    4edc:	18ba      	adds	r2, r7, r2
    4ede:	8809      	ldrh	r1, [r1, #0]
    4ee0:	8812      	ldrh	r2, [r2, #0]
    4ee2:	188a      	adds	r2, r1, r2
    4ee4:	801a      	strh	r2, [r3, #0]
		break;
    4ee6:	f000 fbd6 	bl	5696 <cmd_common_process+0xccc>

		//......................................................................
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    4eea:	230e      	movs	r3, #14
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	881b      	ldrh	r3, [r3, #0]
    4ef0:	2b07      	cmp	r3, #7
    4ef2:	d001      	beq.n	4ef8 <cmd_common_process+0x52e>
    4ef4:	f000 fc2f 	bl	5756 <cmd_common_process+0xd8c>
					check_permission();	
    4ef8:	4b43      	ldr	r3, [pc, #268]	; (5008 <cmd_common_process+0x63e>)
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	2b01      	cmp	r3, #1
    4efe:	d00e      	beq.n	4f1e <cmd_common_process+0x554>
    4f00:	230a      	movs	r3, #10
    4f02:	18fb      	adds	r3, r7, r3
    4f04:	881b      	ldrh	r3, [r3, #0]
    4f06:	4a3b      	ldr	r2, [pc, #236]	; (4ff4 <cmd_common_process+0x62a>)
    4f08:	2100      	movs	r1, #0
    4f0a:	54d1      	strb	r1, [r2, r3]
    4f0c:	230a      	movs	r3, #10
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	881a      	ldrh	r2, [r3, #0]
    4f12:	230a      	movs	r3, #10
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	3201      	adds	r2, #1
    4f18:	801a      	strh	r2, [r3, #0]
    4f1a:	f000 fbbc 	bl	5696 <cmd_common_process+0xccc>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4f1e:	4b35      	ldr	r3, [pc, #212]	; (4ff4 <cmd_common_process+0x62a>)
    4f20:	78db      	ldrb	r3, [r3, #3]
    4f22:	b21a      	sxth	r2, r3
    4f24:	4b33      	ldr	r3, [pc, #204]	; (4ff4 <cmd_common_process+0x62a>)
    4f26:	791b      	ldrb	r3, [r3, #4]
    4f28:	021b      	lsls	r3, r3, #8
    4f2a:	b21b      	sxth	r3, r3
    4f2c:	4313      	orrs	r3, r2
    4f2e:	b21a      	sxth	r2, r3
    4f30:	003b      	movs	r3, r7
    4f32:	801a      	strh	r2, [r3, #0]
    4f34:	230a      	movs	r3, #10
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	220a      	movs	r2, #10
    4f3a:	18ba      	adds	r2, r7, r2
    4f3c:	8812      	ldrh	r2, [r2, #0]
    4f3e:	3202      	adds	r2, #2
    4f40:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_2) - ixo;
    4f42:	230c      	movs	r3, #12
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	003a      	movs	r2, r7
    4f48:	8812      	ldrh	r2, [r2, #0]
    4f4a:	2180      	movs	r1, #128	; 0x80
    4f4c:	0049      	lsls	r1, r1, #1
    4f4e:	1a8a      	subs	r2, r1, r2
    4f50:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_2)	) { break;  }
    4f52:	003b      	movs	r3, r7
    4f54:	881a      	ldrh	r2, [r3, #0]
    4f56:	2380      	movs	r3, #128	; 0x80
    4f58:	005b      	lsls	r3, r3, #1
    4f5a:	429a      	cmp	r2, r3
    4f5c:	d901      	bls.n	4f62 <cmd_common_process+0x598>
    4f5e:	f000 fb68 	bl	5632 <cmd_common_process+0xc68>
					if(cnt > 256			) { cnt=256;  }
    4f62:	230c      	movs	r3, #12
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	881a      	ldrh	r2, [r3, #0]
    4f68:	2380      	movs	r3, #128	; 0x80
    4f6a:	005b      	lsls	r3, r3, #1
    4f6c:	429a      	cmp	r2, r3
    4f6e:	d904      	bls.n	4f7a <cmd_common_process+0x5b0>
    4f70:	230c      	movs	r3, #12
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	2280      	movs	r2, #128	; 0x80
    4f76:	0052      	lsls	r2, r2, #1
    4f78:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4f7a:	230a      	movs	r3, #10
    4f7c:	18fb      	adds	r3, r7, r3
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	220c      	movs	r2, #12
    4f82:	18ba      	adds	r2, r7, r2
    4f84:	8812      	ldrh	r2, [r2, #0]
    4f86:	b2d1      	uxtb	r1, r2
    4f88:	4a1a      	ldr	r2, [pc, #104]	; (4ff4 <cmd_common_process+0x62a>)
    4f8a:	54d1      	strb	r1, [r2, r3]
    4f8c:	230a      	movs	r3, #10
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	220a      	movs	r2, #10
    4f92:	18ba      	adds	r2, r7, r2
    4f94:	8812      	ldrh	r2, [r2, #0]
    4f96:	3201      	adds	r2, #1
    4f98:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4f9a:	230a      	movs	r3, #10
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	220c      	movs	r2, #12
    4fa2:	18ba      	adds	r2, r7, r2
    4fa4:	8812      	ldrh	r2, [r2, #0]
    4fa6:	0a12      	lsrs	r2, r2, #8
    4fa8:	b292      	uxth	r2, r2
    4faa:	b2d1      	uxtb	r1, r2
    4fac:	4a11      	ldr	r2, [pc, #68]	; (4ff4 <cmd_common_process+0x62a>)
    4fae:	54d1      	strb	r1, [r2, r3]
    4fb0:	230a      	movs	r3, #10
    4fb2:	18fb      	adds	r3, r7, r3
    4fb4:	220a      	movs	r2, #10
    4fb6:	18ba      	adds	r2, r7, r2
    4fb8:	8812      	ldrh	r2, [r2, #0]
    4fba:	3201      	adds	r2, #1
    4fbc:	801a      	strh	r2, [r3, #0]

					
					memcpy(&cbuf[wn],((BYTE*)&cfg_2)+ixo,cnt);				wn+=cnt;
    4fbe:	230a      	movs	r3, #10
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	881a      	ldrh	r2, [r3, #0]
    4fc4:	4b0b      	ldr	r3, [pc, #44]	; (4ff4 <cmd_common_process+0x62a>)
    4fc6:	18d0      	adds	r0, r2, r3
    4fc8:	003b      	movs	r3, r7
    4fca:	881a      	ldrh	r2, [r3, #0]
    4fcc:	4b10      	ldr	r3, [pc, #64]	; (5010 <cmd_common_process+0x646>)
    4fce:	18d1      	adds	r1, r2, r3
    4fd0:	230c      	movs	r3, #12
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	881b      	ldrh	r3, [r3, #0]
    4fd6:	001a      	movs	r2, r3
    4fd8:	4b09      	ldr	r3, [pc, #36]	; (5000 <cmd_common_process+0x636>)
    4fda:	4798      	blx	r3
    4fdc:	230a      	movs	r3, #10
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	220a      	movs	r2, #10
    4fe2:	18b9      	adds	r1, r7, r2
    4fe4:	220c      	movs	r2, #12
    4fe6:	18ba      	adds	r2, r7, r2
    4fe8:	8809      	ldrh	r1, [r1, #0]
    4fea:	8812      	ldrh	r2, [r2, #0]
    4fec:	188a      	adds	r2, r1, r2
    4fee:	801a      	strh	r2, [r3, #0]
		break;
    4ff0:	e351      	b.n	5696 <cmd_common_process+0xccc>
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	200004a0 	.word	0x200004a0
    4ff8:	000005e5 	.word	0x000005e5
    4ffc:	200005cc 	.word	0x200005cc
    5000:	0000c7e1 	.word	0x0000c7e1
    5004:	200031fc 	.word	0x200031fc
    5008:	20000451 	.word	0x20000451
    500c:	20003dc4 	.word	0x20003dc4
    5010:	20003bc4 	.word	0x20003bc4

		//......................................................................

		case 0x10:	if(size <  6) { return; }
    5014:	230e      	movs	r3, #14
    5016:	18fb      	adds	r3, r7, r3
    5018:	881b      	ldrh	r3, [r3, #0]
    501a:	2b05      	cmp	r3, #5
    501c:	d801      	bhi.n	5022 <cmd_common_process+0x658>
    501e:	f000 fb9c 	bl	575a <cmd_common_process+0xd90>
					wn+=iap_process(&cbuf[wn],size-5);
    5022:	230a      	movs	r3, #10
    5024:	18fb      	adds	r3, r7, r3
    5026:	881a      	ldrh	r2, [r3, #0]
    5028:	4bb5      	ldr	r3, [pc, #724]	; (5300 <cmd_common_process+0x936>)
    502a:	18d2      	adds	r2, r2, r3
    502c:	230e      	movs	r3, #14
    502e:	18fb      	adds	r3, r7, r3
    5030:	881b      	ldrh	r3, [r3, #0]
    5032:	3b05      	subs	r3, #5
    5034:	b29b      	uxth	r3, r3
    5036:	0019      	movs	r1, r3
    5038:	0010      	movs	r0, r2
    503a:	4bb2      	ldr	r3, [pc, #712]	; (5304 <cmd_common_process+0x93a>)
    503c:	4798      	blx	r3
    503e:	0003      	movs	r3, r0
    5040:	0019      	movs	r1, r3
    5042:	230a      	movs	r3, #10
    5044:	18fb      	adds	r3, r7, r3
    5046:	220a      	movs	r2, #10
    5048:	18ba      	adds	r2, r7, r2
    504a:	8812      	ldrh	r2, [r2, #0]
    504c:	188a      	adds	r2, r1, r2
    504e:	801a      	strh	r2, [r3, #0]
		break;
    5050:	e321      	b.n	5696 <cmd_common_process+0xccc>

		//......................................................................
		case 0x17:	if(size  <  7) { return; }
    5052:	230e      	movs	r3, #14
    5054:	18fb      	adds	r3, r7, r3
    5056:	881b      	ldrh	r3, [r3, #0]
    5058:	2b06      	cmp	r3, #6
    505a:	d801      	bhi.n	5060 <cmd_common_process+0x696>
    505c:	f000 fb7f 	bl	575e <cmd_common_process+0xd94>
		
					ixo = cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    5060:	4ba7      	ldr	r3, [pc, #668]	; (5300 <cmd_common_process+0x936>)
    5062:	78db      	ldrb	r3, [r3, #3]
    5064:	b21a      	sxth	r2, r3
    5066:	4ba6      	ldr	r3, [pc, #664]	; (5300 <cmd_common_process+0x936>)
    5068:	791b      	ldrb	r3, [r3, #4]
    506a:	021b      	lsls	r3, r3, #8
    506c:	b21b      	sxth	r3, r3
    506e:	4313      	orrs	r3, r2
    5070:	b21a      	sxth	r2, r3
    5072:	003b      	movs	r3, r7
    5074:	801a      	strh	r2, [r3, #0]
    5076:	230a      	movs	r3, #10
    5078:	18fb      	adds	r3, r7, r3
    507a:	220a      	movs	r2, #10
    507c:	18ba      	adds	r2, r7, r2
    507e:	8812      	ldrh	r2, [r2, #0]
    5080:	3202      	adds	r2, #2
    5082:	801a      	strh	r2, [r3, #0]
					cnt = cbuf[5] | (cbuf[6]<<8);							wn+=sizeof(WORD);
    5084:	4b9e      	ldr	r3, [pc, #632]	; (5300 <cmd_common_process+0x936>)
    5086:	795b      	ldrb	r3, [r3, #5]
    5088:	b21a      	sxth	r2, r3
    508a:	4b9d      	ldr	r3, [pc, #628]	; (5300 <cmd_common_process+0x936>)
    508c:	799b      	ldrb	r3, [r3, #6]
    508e:	021b      	lsls	r3, r3, #8
    5090:	b21b      	sxth	r3, r3
    5092:	4313      	orrs	r3, r2
    5094:	b21a      	sxth	r2, r3
    5096:	230c      	movs	r3, #12
    5098:	18fb      	adds	r3, r7, r3
    509a:	801a      	strh	r2, [r3, #0]
    509c:	230a      	movs	r3, #10
    509e:	18fb      	adds	r3, r7, r3
    50a0:	220a      	movs	r2, #10
    50a2:	18ba      	adds	r2, r7, r2
    50a4:	8812      	ldrh	r2, [r2, #0]
    50a6:	3202      	adds	r2, #2
    50a8:	801a      	strh	r2, [r3, #0]
					
					if(cnt  ==  0) { break; }
    50aa:	230c      	movs	r3, #12
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	881b      	ldrh	r3, [r3, #0]
    50b0:	2b00      	cmp	r3, #0
    50b2:	d100      	bne.n	50b6 <cmd_common_process+0x6ec>
    50b4:	e2bf      	b.n	5636 <cmd_common_process+0xc6c>
					if(ixo  ==  0) {memset(&cfg_1_tmp,0x00,sizeof(CFG_1));}
    50b6:	003b      	movs	r3, r7
    50b8:	881b      	ldrh	r3, [r3, #0]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d106      	bne.n	50cc <cmd_common_process+0x702>
    50be:	2380      	movs	r3, #128	; 0x80
    50c0:	005a      	lsls	r2, r3, #1
    50c2:	4b91      	ldr	r3, [pc, #580]	; (5308 <cmd_common_process+0x93e>)
    50c4:	2100      	movs	r1, #0
    50c6:	0018      	movs	r0, r3
    50c8:	4b90      	ldr	r3, [pc, #576]	; (530c <cmd_common_process+0x942>)
    50ca:	4798      	blx	r3
					
					if(ixo       >= sizeof(CFG_1)) { break; }
    50cc:	003b      	movs	r3, r7
    50ce:	881b      	ldrh	r3, [r3, #0]
    50d0:	2bff      	cmp	r3, #255	; 0xff
    50d2:	d900      	bls.n	50d6 <cmd_common_process+0x70c>
    50d4:	e2b1      	b.n	563a <cmd_common_process+0xc70>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    50d6:	230c      	movs	r3, #12
    50d8:	18fb      	adds	r3, r7, r3
    50da:	881a      	ldrh	r2, [r3, #0]
    50dc:	003b      	movs	r3, r7
    50de:	881b      	ldrh	r3, [r3, #0]
    50e0:	18d3      	adds	r3, r2, r3
    50e2:	001a      	movs	r2, r3
    50e4:	2380      	movs	r3, #128	; 0x80
    50e6:	005b      	lsls	r3, r3, #1
    50e8:	429a      	cmp	r2, r3
    50ea:	d900      	bls.n	50ee <cmd_common_process+0x724>
    50ec:	e2a7      	b.n	563e <cmd_common_process+0xc74>
					
					memcpy(((BYTE*)&cfg_1_tmp)+ixo,cbuf+wn                  ,cnt);
    50ee:	003b      	movs	r3, r7
    50f0:	881a      	ldrh	r2, [r3, #0]
    50f2:	4b85      	ldr	r3, [pc, #532]	; (5308 <cmd_common_process+0x93e>)
    50f4:	18d0      	adds	r0, r2, r3
    50f6:	230a      	movs	r3, #10
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	881a      	ldrh	r2, [r3, #0]
    50fc:	4b80      	ldr	r3, [pc, #512]	; (5300 <cmd_common_process+0x936>)
    50fe:	18d1      	adds	r1, r2, r3
    5100:	230c      	movs	r3, #12
    5102:	18fb      	adds	r3, r7, r3
    5104:	881b      	ldrh	r3, [r3, #0]
    5106:	001a      	movs	r2, r3
    5108:	4b81      	ldr	r3, [pc, #516]	; (5310 <cmd_common_process+0x946>)
    510a:	4798      	blx	r3
					memcpy(cbuf+wn                  ,((BYTE*)&cfg_1_tmp)+ixo,cnt);
    510c:	230a      	movs	r3, #10
    510e:	18fb      	adds	r3, r7, r3
    5110:	881a      	ldrh	r2, [r3, #0]
    5112:	4b7b      	ldr	r3, [pc, #492]	; (5300 <cmd_common_process+0x936>)
    5114:	18d0      	adds	r0, r2, r3
    5116:	003b      	movs	r3, r7
    5118:	881a      	ldrh	r2, [r3, #0]
    511a:	4b7b      	ldr	r3, [pc, #492]	; (5308 <cmd_common_process+0x93e>)
    511c:	18d1      	adds	r1, r2, r3
    511e:	230c      	movs	r3, #12
    5120:	18fb      	adds	r3, r7, r3
    5122:	881b      	ldrh	r3, [r3, #0]
    5124:	001a      	movs	r2, r3
    5126:	4b7a      	ldr	r3, [pc, #488]	; (5310 <cmd_common_process+0x946>)
    5128:	4798      	blx	r3
					wn+=cnt;
    512a:	230a      	movs	r3, #10
    512c:	18fb      	adds	r3, r7, r3
    512e:	220a      	movs	r2, #10
    5130:	18b9      	adds	r1, r7, r2
    5132:	220c      	movs	r2, #12
    5134:	18ba      	adds	r2, r7, r2
    5136:	8809      	ldrh	r1, [r1, #0]
    5138:	8812      	ldrh	r2, [r2, #0]
    513a:	188a      	adds	r2, r1, r2
    513c:	801a      	strh	r2, [r3, #0]
					wr_flag_cfg = 1;
    513e:	4b75      	ldr	r3, [pc, #468]	; (5314 <cmd_common_process+0x94a>)
    5140:	2201      	movs	r2, #1
    5142:	701a      	strb	r2, [r3, #0]
		break;
    5144:	e2a7      	b.n	5696 <cmd_common_process+0xccc>
		//......................................................................
		case 0x20:	if(size <  7)		{ return; }								//login
    5146:	230e      	movs	r3, #14
    5148:	18fb      	adds	r3, r7, r3
    514a:	881b      	ldrh	r3, [r3, #0]
    514c:	2b06      	cmp	r3, #6
    514e:	d800      	bhi.n	5152 <cmd_common_process+0x788>
    5150:	e307      	b.n	5762 <cmd_common_process+0xd98>
					
					
					BYTE ch = 0;
    5152:	2308      	movs	r3, #8
    5154:	18fb      	adds	r3, r7, r3
    5156:	2200      	movs	r2, #0
    5158:	701a      	strb	r2, [r3, #0]
					cnt = 3;
    515a:	230c      	movs	r3, #12
    515c:	18fb      	adds	r3, r7, r3
    515e:	2203      	movs	r2, #3
    5160:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);
    5162:	230c      	movs	r3, #12
    5164:	18fb      	adds	r3, r7, r3
    5166:	881a      	ldrh	r2, [r3, #0]
    5168:	4b65      	ldr	r3, [pc, #404]	; (5300 <cmd_common_process+0x936>)
    516a:	18d3      	adds	r3, r2, r3
    516c:	0018      	movs	r0, r3
    516e:	4b6a      	ldr	r3, [pc, #424]	; (5318 <cmd_common_process+0x94e>)
    5170:	4798      	blx	r3
					
					ch = 0;
    5172:	2308      	movs	r3, #8
    5174:	18fb      	adds	r3, r7, r3
    5176:	2200      	movs	r2, #0
    5178:	701a      	strb	r2, [r3, #0]
					
					for (BYTE i = 0; i < 2; i++ ) { if (SRAV(32, &cbuf[3], &accnts.accnt[i].login[0])) 	{ch = i + 1; break;	} } //compare login
    517a:	1dfb      	adds	r3, r7, #7
    517c:	2200      	movs	r2, #0
    517e:	701a      	strb	r2, [r3, #0]
    5180:	e017      	b.n	51b2 <cmd_common_process+0x7e8>
    5182:	1dfb      	adds	r3, r7, #7
    5184:	781b      	ldrb	r3, [r3, #0]
    5186:	019a      	lsls	r2, r3, #6
    5188:	4b64      	ldr	r3, [pc, #400]	; (531c <cmd_common_process+0x952>)
    518a:	18d2      	adds	r2, r2, r3
    518c:	4b64      	ldr	r3, [pc, #400]	; (5320 <cmd_common_process+0x956>)
    518e:	0019      	movs	r1, r3
    5190:	2020      	movs	r0, #32
    5192:	4b64      	ldr	r3, [pc, #400]	; (5324 <cmd_common_process+0x95a>)
    5194:	4798      	blx	r3
    5196:	1e03      	subs	r3, r0, #0
    5198:	d006      	beq.n	51a8 <cmd_common_process+0x7de>
    519a:	2308      	movs	r3, #8
    519c:	18fb      	adds	r3, r7, r3
    519e:	1dfa      	adds	r2, r7, #7
    51a0:	7812      	ldrb	r2, [r2, #0]
    51a2:	3201      	adds	r2, #1
    51a4:	701a      	strb	r2, [r3, #0]
    51a6:	e008      	b.n	51ba <cmd_common_process+0x7f0>
    51a8:	1dfb      	adds	r3, r7, #7
    51aa:	781a      	ldrb	r2, [r3, #0]
    51ac:	1dfb      	adds	r3, r7, #7
    51ae:	3201      	adds	r2, #1
    51b0:	701a      	strb	r2, [r3, #0]
    51b2:	1dfb      	adds	r3, r7, #7
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	2b01      	cmp	r3, #1
    51b8:	d9e3      	bls.n	5182 <cmd_common_process+0x7b8>
					if (!ch) {send_error();}																				//if login not searched
    51ba:	2308      	movs	r3, #8
    51bc:	18fb      	adds	r3, r7, r3
    51be:	781b      	ldrb	r3, [r3, #0]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d10d      	bne.n	51e0 <cmd_common_process+0x816>
    51c4:	230a      	movs	r3, #10
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	881b      	ldrh	r3, [r3, #0]
    51ca:	4a4d      	ldr	r2, [pc, #308]	; (5300 <cmd_common_process+0x936>)
    51cc:	2100      	movs	r1, #0
    51ce:	54d1      	strb	r1, [r2, r3]
    51d0:	230a      	movs	r3, #10
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	881a      	ldrh	r2, [r3, #0]
    51d6:	230a      	movs	r3, #10
    51d8:	18fb      	adds	r3, r7, r3
    51da:	3201      	adds	r2, #1
    51dc:	801a      	strh	r2, [r3, #0]
    51de:	e25a      	b.n	5696 <cmd_common_process+0xccc>

					cnt += 32;
    51e0:	230c      	movs	r3, #12
    51e2:	18fb      	adds	r3, r7, r3
    51e4:	220c      	movs	r2, #12
    51e6:	18ba      	adds	r2, r7, r2
    51e8:	8812      	ldrh	r2, [r2, #0]
    51ea:	3220      	adds	r2, #32
    51ec:	801a      	strh	r2, [r3, #0]
					if (!SRAV(32, &cbuf[cnt], &accnts.accnt[ch-1].password[0])) {send_error();}									//if password no match
    51ee:	230c      	movs	r3, #12
    51f0:	18fb      	adds	r3, r7, r3
    51f2:	881a      	ldrh	r2, [r3, #0]
    51f4:	4b42      	ldr	r3, [pc, #264]	; (5300 <cmd_common_process+0x936>)
    51f6:	18d1      	adds	r1, r2, r3
    51f8:	2308      	movs	r3, #8
    51fa:	18fb      	adds	r3, r7, r3
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	3b01      	subs	r3, #1
    5200:	019b      	lsls	r3, r3, #6
    5202:	3320      	adds	r3, #32
    5204:	001a      	movs	r2, r3
    5206:	4b45      	ldr	r3, [pc, #276]	; (531c <cmd_common_process+0x952>)
    5208:	18d3      	adds	r3, r2, r3
    520a:	001a      	movs	r2, r3
    520c:	2020      	movs	r0, #32
    520e:	4b45      	ldr	r3, [pc, #276]	; (5324 <cmd_common_process+0x95a>)
    5210:	4798      	blx	r3
    5212:	1e03      	subs	r3, r0, #0
    5214:	d10d      	bne.n	5232 <cmd_common_process+0x868>
    5216:	230a      	movs	r3, #10
    5218:	18fb      	adds	r3, r7, r3
    521a:	881b      	ldrh	r3, [r3, #0]
    521c:	4a38      	ldr	r2, [pc, #224]	; (5300 <cmd_common_process+0x936>)
    521e:	2100      	movs	r1, #0
    5220:	54d1      	strb	r1, [r2, r3]
    5222:	230a      	movs	r3, #10
    5224:	18fb      	adds	r3, r7, r3
    5226:	881a      	ldrh	r2, [r3, #0]
    5228:	230a      	movs	r3, #10
    522a:	18fb      	adds	r3, r7, r3
    522c:	3201      	adds	r2, #1
    522e:	801a      	strh	r2, [r3, #0]
    5230:	e231      	b.n	5696 <cmd_common_process+0xccc>
																
					if (ch == ADMIN_LOGIN) {save_log(ADMIN_LOGIN); send_admin();} else {send_user();}
    5232:	2308      	movs	r3, #8
    5234:	18fb      	adds	r3, r7, r3
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	2b01      	cmp	r3, #1
    523a:	d11b      	bne.n	5274 <cmd_common_process+0x8aa>
    523c:	4b3a      	ldr	r3, [pc, #232]	; (5328 <cmd_common_process+0x95e>)
    523e:	681b      	ldr	r3, [r3, #0]
    5240:	2b00      	cmp	r3, #0
    5242:	d009      	beq.n	5258 <cmd_common_process+0x88e>
    5244:	4b39      	ldr	r3, [pc, #228]	; (532c <cmd_common_process+0x962>)
    5246:	781b      	ldrb	r3, [r3, #0]
    5248:	0018      	movs	r0, r3
    524a:	4b39      	ldr	r3, [pc, #228]	; (5330 <cmd_common_process+0x966>)
    524c:	6819      	ldr	r1, [r3, #0]
    524e:	4b36      	ldr	r3, [pc, #216]	; (5328 <cmd_common_process+0x95e>)
    5250:	681a      	ldr	r2, [r3, #0]
    5252:	2301      	movs	r3, #1
    5254:	4c37      	ldr	r4, [pc, #220]	; (5334 <cmd_common_process+0x96a>)
    5256:	47a0      	blx	r4
    5258:	230a      	movs	r3, #10
    525a:	18fb      	adds	r3, r7, r3
    525c:	881b      	ldrh	r3, [r3, #0]
    525e:	4a28      	ldr	r2, [pc, #160]	; (5300 <cmd_common_process+0x936>)
    5260:	2101      	movs	r1, #1
    5262:	54d1      	strb	r1, [r2, r3]
    5264:	230a      	movs	r3, #10
    5266:	18fb      	adds	r3, r7, r3
    5268:	881a      	ldrh	r2, [r3, #0]
    526a:	230a      	movs	r3, #10
    526c:	18fb      	adds	r3, r7, r3
    526e:	3201      	adds	r2, #1
    5270:	801a      	strh	r2, [r3, #0]
    5272:	e00c      	b.n	528e <cmd_common_process+0x8c4>
    5274:	230a      	movs	r3, #10
    5276:	18fb      	adds	r3, r7, r3
    5278:	881b      	ldrh	r3, [r3, #0]
    527a:	4a21      	ldr	r2, [pc, #132]	; (5300 <cmd_common_process+0x936>)
    527c:	2102      	movs	r1, #2
    527e:	54d1      	strb	r1, [r2, r3]
    5280:	230a      	movs	r3, #10
    5282:	18fb      	adds	r3, r7, r3
    5284:	881a      	ldrh	r2, [r3, #0]
    5286:	230a      	movs	r3, #10
    5288:	18fb      	adds	r3, r7, r3
    528a:	3201      	adds	r2, #1
    528c:	801a      	strh	r2, [r3, #0]
					actv_user_id = ch;
    528e:	4b27      	ldr	r3, [pc, #156]	; (532c <cmd_common_process+0x962>)
    5290:	2208      	movs	r2, #8
    5292:	18ba      	adds	r2, r7, r2
    5294:	7812      	ldrb	r2, [r2, #0]
    5296:	701a      	strb	r2, [r3, #0]
					log_stat = 1;																							//login status up
    5298:	4b27      	ldr	r3, [pc, #156]	; (5338 <cmd_common_process+0x96e>)
    529a:	2201      	movs	r2, #1
    529c:	701a      	strb	r2, [r3, #0]
					memcpy(&ip_addrs, &eth_sock[0].ip_addr[0], DW_LEN);														//write access ip addr
    529e:	4927      	ldr	r1, [pc, #156]	; (533c <cmd_common_process+0x972>)
    52a0:	4b23      	ldr	r3, [pc, #140]	; (5330 <cmd_common_process+0x966>)
    52a2:	2204      	movs	r2, #4
    52a4:	0018      	movs	r0, r3
    52a6:	4b1a      	ldr	r3, [pc, #104]	; (5310 <cmd_common_process+0x946>)
    52a8:	4798      	blx	r3
					num_to_byte(crc_fw, DW_LEN, &cbuf[wn], L_SIDE);			wn += 4;
    52aa:	4b25      	ldr	r3, [pc, #148]	; (5340 <cmd_common_process+0x976>)
    52ac:	6818      	ldr	r0, [r3, #0]
    52ae:	230a      	movs	r3, #10
    52b0:	18fb      	adds	r3, r7, r3
    52b2:	881a      	ldrh	r2, [r3, #0]
    52b4:	4b12      	ldr	r3, [pc, #72]	; (5300 <cmd_common_process+0x936>)
    52b6:	18d2      	adds	r2, r2, r3
    52b8:	2301      	movs	r3, #1
    52ba:	2104      	movs	r1, #4
    52bc:	4c21      	ldr	r4, [pc, #132]	; (5344 <cmd_common_process+0x97a>)
    52be:	47a0      	blx	r4
    52c0:	230a      	movs	r3, #10
    52c2:	18fb      	adds	r3, r7, r3
    52c4:	220a      	movs	r2, #10
    52c6:	18ba      	adds	r2, r7, r2
    52c8:	8812      	ldrh	r2, [r2, #0]
    52ca:	3204      	adds	r2, #4
    52cc:	801a      	strh	r2, [r3, #0]
		break;
    52ce:	e1e2      	b.n	5696 <cmd_common_process+0xccc>
		//......................................................................
		case 0x21:	if(size < 5)		{ return; }								//login send
    52d0:	230e      	movs	r3, #14
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	881b      	ldrh	r3, [r3, #0]
    52d6:	2b04      	cmp	r3, #4
    52d8:	d800      	bhi.n	52dc <cmd_common_process+0x912>
    52da:	e244      	b.n	5766 <cmd_common_process+0xd9c>
 					check_permission();
    52dc:	4b13      	ldr	r3, [pc, #76]	; (532c <cmd_common_process+0x962>)
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	2b01      	cmp	r3, #1
    52e2:	d031      	beq.n	5348 <cmd_common_process+0x97e>
    52e4:	230a      	movs	r3, #10
    52e6:	18fb      	adds	r3, r7, r3
    52e8:	881b      	ldrh	r3, [r3, #0]
    52ea:	4a05      	ldr	r2, [pc, #20]	; (5300 <cmd_common_process+0x936>)
    52ec:	2100      	movs	r1, #0
    52ee:	54d1      	strb	r1, [r2, r3]
    52f0:	230a      	movs	r3, #10
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	881a      	ldrh	r2, [r3, #0]
    52f6:	230a      	movs	r3, #10
    52f8:	18fb      	adds	r3, r7, r3
    52fa:	3201      	adds	r2, #1
    52fc:	801a      	strh	r2, [r3, #0]
    52fe:	e1ca      	b.n	5696 <cmd_common_process+0xccc>
    5300:	200004a0 	.word	0x200004a0
    5304:	00006f69 	.word	0x00006f69
    5308:	20003cc4 	.word	0x20003cc4
    530c:	0000c865 	.word	0x0000c865
    5310:	0000c7e1 	.word	0x0000c7e1
    5314:	20000458 	.word	0x20000458
    5318:	00005feb 	.word	0x00005feb
    531c:	20002554 	.word	0x20002554
    5320:	200004a3 	.word	0x200004a3
    5324:	0000495b 	.word	0x0000495b
    5328:	20000454 	.word	0x20000454
    532c:	20000451 	.word	0x20000451
    5330:	2000049c 	.word	0x2000049c
    5334:	0000455d 	.word	0x0000455d
    5338:	20000450 	.word	0x20000450
    533c:	200005cc 	.word	0x200005cc
    5340:	2000254c 	.word	0x2000254c
    5344:	00004801 	.word	0x00004801
					cnt = 3;
    5348:	230c      	movs	r3, #12
    534a:	18fb      	adds	r3, r7, r3
    534c:	2203      	movs	r2, #3
    534e:	801a      	strh	r2, [r3, #0]
					
					memcpy(&cbuf[3], &accnts.accnt[0].login[0], 256);
    5350:	2380      	movs	r3, #128	; 0x80
    5352:	005a      	lsls	r2, r3, #1
    5354:	49bb      	ldr	r1, [pc, #748]	; (5644 <cmd_common_process+0xc7a>)
    5356:	4bbc      	ldr	r3, [pc, #752]	; (5648 <cmd_common_process+0xc7e>)
    5358:	0018      	movs	r0, r3
    535a:	4bbc      	ldr	r3, [pc, #752]	; (564c <cmd_common_process+0xc82>)
    535c:	4798      	blx	r3
					crypted(&cbuf[cnt]);		cnt += 64;
    535e:	230c      	movs	r3, #12
    5360:	18fb      	adds	r3, r7, r3
    5362:	881a      	ldrh	r2, [r3, #0]
    5364:	4bba      	ldr	r3, [pc, #744]	; (5650 <cmd_common_process+0xc86>)
    5366:	18d3      	adds	r3, r2, r3
    5368:	0018      	movs	r0, r3
    536a:	4bba      	ldr	r3, [pc, #744]	; (5654 <cmd_common_process+0xc8a>)
    536c:	4798      	blx	r3
    536e:	230c      	movs	r3, #12
    5370:	18fb      	adds	r3, r7, r3
    5372:	220c      	movs	r2, #12
    5374:	18ba      	adds	r2, r7, r2
    5376:	8812      	ldrh	r2, [r2, #0]
    5378:	3240      	adds	r2, #64	; 0x40
    537a:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    537c:	230c      	movs	r3, #12
    537e:	18fb      	adds	r3, r7, r3
    5380:	881a      	ldrh	r2, [r3, #0]
    5382:	4bb3      	ldr	r3, [pc, #716]	; (5650 <cmd_common_process+0xc86>)
    5384:	18d3      	adds	r3, r2, r3
    5386:	0018      	movs	r0, r3
    5388:	4bb2      	ldr	r3, [pc, #712]	; (5654 <cmd_common_process+0xc8a>)
    538a:	4798      	blx	r3
    538c:	230c      	movs	r3, #12
    538e:	18fb      	adds	r3, r7, r3
    5390:	220c      	movs	r2, #12
    5392:	18ba      	adds	r2, r7, r2
    5394:	8812      	ldrh	r2, [r2, #0]
    5396:	3240      	adds	r2, #64	; 0x40
    5398:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    539a:	230c      	movs	r3, #12
    539c:	18fb      	adds	r3, r7, r3
    539e:	881a      	ldrh	r2, [r3, #0]
    53a0:	4bab      	ldr	r3, [pc, #684]	; (5650 <cmd_common_process+0xc86>)
    53a2:	18d3      	adds	r3, r2, r3
    53a4:	0018      	movs	r0, r3
    53a6:	4bab      	ldr	r3, [pc, #684]	; (5654 <cmd_common_process+0xc8a>)
    53a8:	4798      	blx	r3
    53aa:	230c      	movs	r3, #12
    53ac:	18fb      	adds	r3, r7, r3
    53ae:	220c      	movs	r2, #12
    53b0:	18ba      	adds	r2, r7, r2
    53b2:	8812      	ldrh	r2, [r2, #0]
    53b4:	3240      	adds	r2, #64	; 0x40
    53b6:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53b8:	230c      	movs	r3, #12
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	881a      	ldrh	r2, [r3, #0]
    53be:	4ba4      	ldr	r3, [pc, #656]	; (5650 <cmd_common_process+0xc86>)
    53c0:	18d3      	adds	r3, r2, r3
    53c2:	0018      	movs	r0, r3
    53c4:	4ba3      	ldr	r3, [pc, #652]	; (5654 <cmd_common_process+0xc8a>)
    53c6:	4798      	blx	r3
    53c8:	230c      	movs	r3, #12
    53ca:	18fb      	adds	r3, r7, r3
    53cc:	220c      	movs	r2, #12
    53ce:	18ba      	adds	r2, r7, r2
    53d0:	8812      	ldrh	r2, [r2, #0]
    53d2:	3240      	adds	r2, #64	; 0x40
    53d4:	801a      	strh	r2, [r3, #0]
					wn += 256;
    53d6:	230a      	movs	r3, #10
    53d8:	18fb      	adds	r3, r7, r3
    53da:	220a      	movs	r2, #10
    53dc:	18ba      	adds	r2, r7, r2
    53de:	8812      	ldrh	r2, [r2, #0]
    53e0:	3201      	adds	r2, #1
    53e2:	32ff      	adds	r2, #255	; 0xff
    53e4:	801a      	strh	r2, [r3, #0]
		break;
    53e6:	e156      	b.n	5696 <cmd_common_process+0xccc>
		//......................................................................
		case 0x22:	if(size <  5)		{ return; }								//login change
    53e8:	230e      	movs	r3, #14
    53ea:	18fb      	adds	r3, r7, r3
    53ec:	881b      	ldrh	r3, [r3, #0]
    53ee:	2b04      	cmp	r3, #4
    53f0:	d800      	bhi.n	53f4 <cmd_common_process+0xa2a>
    53f2:	e1ba      	b.n	576a <cmd_common_process+0xda0>
					check_permission();
    53f4:	4b98      	ldr	r3, [pc, #608]	; (5658 <cmd_common_process+0xc8e>)
    53f6:	781b      	ldrb	r3, [r3, #0]
    53f8:	2b01      	cmp	r3, #1
    53fa:	d00d      	beq.n	5418 <cmd_common_process+0xa4e>
    53fc:	230a      	movs	r3, #10
    53fe:	18fb      	adds	r3, r7, r3
    5400:	881b      	ldrh	r3, [r3, #0]
    5402:	4a93      	ldr	r2, [pc, #588]	; (5650 <cmd_common_process+0xc86>)
    5404:	2100      	movs	r1, #0
    5406:	54d1      	strb	r1, [r2, r3]
    5408:	230a      	movs	r3, #10
    540a:	18fb      	adds	r3, r7, r3
    540c:	881a      	ldrh	r2, [r3, #0]
    540e:	230a      	movs	r3, #10
    5410:	18fb      	adds	r3, r7, r3
    5412:	3201      	adds	r2, #1
    5414:	801a      	strh	r2, [r3, #0]
    5416:	e13e      	b.n	5696 <cmd_common_process+0xccc>
					cnt = 3;
    5418:	230c      	movs	r3, #12
    541a:	18fb      	adds	r3, r7, r3
    541c:	2203      	movs	r2, #3
    541e:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5420:	230c      	movs	r3, #12
    5422:	18fb      	adds	r3, r7, r3
    5424:	881a      	ldrh	r2, [r3, #0]
    5426:	4b8a      	ldr	r3, [pc, #552]	; (5650 <cmd_common_process+0xc86>)
    5428:	18d3      	adds	r3, r2, r3
    542a:	0018      	movs	r0, r3
    542c:	4b8b      	ldr	r3, [pc, #556]	; (565c <cmd_common_process+0xc92>)
    542e:	4798      	blx	r3
    5430:	230c      	movs	r3, #12
    5432:	18fb      	adds	r3, r7, r3
    5434:	220c      	movs	r2, #12
    5436:	18ba      	adds	r2, r7, r2
    5438:	8812      	ldrh	r2, [r2, #0]
    543a:	3240      	adds	r2, #64	; 0x40
    543c:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    543e:	230c      	movs	r3, #12
    5440:	18fb      	adds	r3, r7, r3
    5442:	881a      	ldrh	r2, [r3, #0]
    5444:	4b82      	ldr	r3, [pc, #520]	; (5650 <cmd_common_process+0xc86>)
    5446:	18d3      	adds	r3, r2, r3
    5448:	0018      	movs	r0, r3
    544a:	4b84      	ldr	r3, [pc, #528]	; (565c <cmd_common_process+0xc92>)
    544c:	4798      	blx	r3
    544e:	230c      	movs	r3, #12
    5450:	18fb      	adds	r3, r7, r3
    5452:	220c      	movs	r2, #12
    5454:	18ba      	adds	r2, r7, r2
    5456:	8812      	ldrh	r2, [r2, #0]
    5458:	3240      	adds	r2, #64	; 0x40
    545a:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    545c:	230c      	movs	r3, #12
    545e:	18fb      	adds	r3, r7, r3
    5460:	881a      	ldrh	r2, [r3, #0]
    5462:	4b7b      	ldr	r3, [pc, #492]	; (5650 <cmd_common_process+0xc86>)
    5464:	18d3      	adds	r3, r2, r3
    5466:	0018      	movs	r0, r3
    5468:	4b7c      	ldr	r3, [pc, #496]	; (565c <cmd_common_process+0xc92>)
    546a:	4798      	blx	r3
    546c:	230c      	movs	r3, #12
    546e:	18fb      	adds	r3, r7, r3
    5470:	220c      	movs	r2, #12
    5472:	18ba      	adds	r2, r7, r2
    5474:	8812      	ldrh	r2, [r2, #0]
    5476:	3240      	adds	r2, #64	; 0x40
    5478:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;
    547a:	230c      	movs	r3, #12
    547c:	18fb      	adds	r3, r7, r3
    547e:	881a      	ldrh	r2, [r3, #0]
    5480:	4b73      	ldr	r3, [pc, #460]	; (5650 <cmd_common_process+0xc86>)
    5482:	18d3      	adds	r3, r2, r3
    5484:	0018      	movs	r0, r3
    5486:	4b75      	ldr	r3, [pc, #468]	; (565c <cmd_common_process+0xc92>)
    5488:	4798      	blx	r3
    548a:	230c      	movs	r3, #12
    548c:	18fb      	adds	r3, r7, r3
    548e:	220c      	movs	r2, #12
    5490:	18ba      	adds	r2, r7, r2
    5492:	8812      	ldrh	r2, [r2, #0]
    5494:	3240      	adds	r2, #64	; 0x40
    5496:	801a      	strh	r2, [r3, #0]
					
					memcpy(&accnts.accnt[0].login[0], &cbuf[3], 256);
    5498:	2380      	movs	r3, #128	; 0x80
    549a:	005a      	lsls	r2, r3, #1
    549c:	496a      	ldr	r1, [pc, #424]	; (5648 <cmd_common_process+0xc7e>)
    549e:	4b69      	ldr	r3, [pc, #420]	; (5644 <cmd_common_process+0xc7a>)
    54a0:	0018      	movs	r0, r3
    54a2:	4b6a      	ldr	r3, [pc, #424]	; (564c <cmd_common_process+0xc82>)
    54a4:	4798      	blx	r3
					wr_flag_acc = 1;
    54a6:	4b6e      	ldr	r3, [pc, #440]	; (5660 <cmd_common_process+0xc96>)
    54a8:	2201      	movs	r2, #1
    54aa:	701a      	strb	r2, [r3, #0]

		break;
    54ac:	e0f3      	b.n	5696 <cmd_common_process+0xccc>
		
		//......................................................................
		case 0x23:	if(size <  5)		{ return; }								//read logs
    54ae:	230e      	movs	r3, #14
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	881b      	ldrh	r3, [r3, #0]
    54b4:	2b04      	cmp	r3, #4
    54b6:	d800      	bhi.n	54ba <cmd_common_process+0xaf0>
    54b8:	e159      	b.n	576e <cmd_common_process+0xda4>
 					check_permission();
    54ba:	4b67      	ldr	r3, [pc, #412]	; (5658 <cmd_common_process+0xc8e>)
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	2b01      	cmp	r3, #1
    54c0:	d00d      	beq.n	54de <cmd_common_process+0xb14>
    54c2:	230a      	movs	r3, #10
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	881b      	ldrh	r3, [r3, #0]
    54c8:	4a61      	ldr	r2, [pc, #388]	; (5650 <cmd_common_process+0xc86>)
    54ca:	2100      	movs	r1, #0
    54cc:	54d1      	strb	r1, [r2, r3]
    54ce:	230a      	movs	r3, #10
    54d0:	18fb      	adds	r3, r7, r3
    54d2:	881a      	ldrh	r2, [r3, #0]
    54d4:	230a      	movs	r3, #10
    54d6:	18fb      	adds	r3, r7, r3
    54d8:	3201      	adds	r2, #1
    54da:	801a      	strh	r2, [r3, #0]
    54dc:	e0db      	b.n	5696 <cmd_common_process+0xccc>
					cnt = 3; wn++;
    54de:	230c      	movs	r3, #12
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	2203      	movs	r2, #3
    54e4:	801a      	strh	r2, [r3, #0]
    54e6:	230a      	movs	r3, #10
    54e8:	18fb      	adds	r3, r7, r3
    54ea:	881a      	ldrh	r2, [r3, #0]
    54ec:	230a      	movs	r3, #10
    54ee:	18fb      	adds	r3, r7, r3
    54f0:	3201      	adds	r2, #1
    54f2:	801a      	strh	r2, [r3, #0]
					flash_read(LOGS_ADDR + (256 * cbuf[3]), &cbuf[4], 256);		wn +=256;
    54f4:	4b56      	ldr	r3, [pc, #344]	; (5650 <cmd_common_process+0xc86>)
    54f6:	78db      	ldrb	r3, [r3, #3]
    54f8:	021b      	lsls	r3, r3, #8
    54fa:	22b0      	movs	r2, #176	; 0xb0
    54fc:	0292      	lsls	r2, r2, #10
    54fe:	1898      	adds	r0, r3, r2
    5500:	2380      	movs	r3, #128	; 0x80
    5502:	005a      	lsls	r2, r3, #1
    5504:	4b57      	ldr	r3, [pc, #348]	; (5664 <cmd_common_process+0xc9a>)
    5506:	0019      	movs	r1, r3
    5508:	4b57      	ldr	r3, [pc, #348]	; (5668 <cmd_common_process+0xc9e>)
    550a:	4798      	blx	r3
    550c:	230a      	movs	r3, #10
    550e:	18fb      	adds	r3, r7, r3
    5510:	220a      	movs	r2, #10
    5512:	18ba      	adds	r2, r7, r2
    5514:	8812      	ldrh	r2, [r2, #0]
    5516:	3201      	adds	r2, #1
    5518:	32ff      	adds	r2, #255	; 0xff
    551a:	801a      	strh	r2, [r3, #0]
		break;
    551c:	e0bb      	b.n	5696 <cmd_common_process+0xccc>
		//......................................................................
		case 0x27:	if(size  !=  5) { return; }									//change config
    551e:	230e      	movs	r3, #14
    5520:	18fb      	adds	r3, r7, r3
    5522:	881b      	ldrh	r3, [r3, #0]
    5524:	2b05      	cmp	r3, #5
    5526:	d000      	beq.n	552a <cmd_common_process+0xb60>
    5528:	e123      	b.n	5772 <cmd_common_process+0xda8>
					check_permission();	
    552a:	4b4b      	ldr	r3, [pc, #300]	; (5658 <cmd_common_process+0xc8e>)
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2b01      	cmp	r3, #1
    5530:	d00d      	beq.n	554e <cmd_common_process+0xb84>
    5532:	230a      	movs	r3, #10
    5534:	18fb      	adds	r3, r7, r3
    5536:	881b      	ldrh	r3, [r3, #0]
    5538:	4a45      	ldr	r2, [pc, #276]	; (5650 <cmd_common_process+0xc86>)
    553a:	2100      	movs	r1, #0
    553c:	54d1      	strb	r1, [r2, r3]
    553e:	230a      	movs	r3, #10
    5540:	18fb      	adds	r3, r7, r3
    5542:	881a      	ldrh	r2, [r3, #0]
    5544:	230a      	movs	r3, #10
    5546:	18fb      	adds	r3, r7, r3
    5548:	3201      	adds	r2, #1
    554a:	801a      	strh	r2, [r3, #0]
    554c:	e0a3      	b.n	5696 <cmd_common_process+0xccc>
					
					if (wr_flag_cfg)
    554e:	4b47      	ldr	r3, [pc, #284]	; (566c <cmd_common_process+0xca2>)
    5550:	781b      	ldrb	r3, [r3, #0]
    5552:	2b00      	cmp	r3, #0
    5554:	d02d      	beq.n	55b2 <cmd_common_process+0xbe8>
					{	
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    5556:	2380      	movs	r3, #128	; 0x80
    5558:	005a      	lsls	r2, r3, #1
    555a:	4b45      	ldr	r3, [pc, #276]	; (5670 <cmd_common_process+0xca6>)
    555c:	0011      	movs	r1, r2
    555e:	0018      	movs	r0, r3
    5560:	4b44      	ldr	r3, [pc, #272]	; (5674 <cmd_common_process+0xcaa>)
    5562:	4798      	blx	r3
    5564:	1e03      	subs	r3, r0, #0
    5566:	d000      	beq.n	556a <cmd_common_process+0xba0>
    5568:	e094      	b.n	5694 <cmd_common_process+0xcca>
						memcpy(&cfg_1,&cfg_1_tmp,sizeof(CFG_1));
    556a:	4a43      	ldr	r2, [pc, #268]	; (5678 <cmd_common_process+0xcae>)
    556c:	4b40      	ldr	r3, [pc, #256]	; (5670 <cmd_common_process+0xca6>)
    556e:	0010      	movs	r0, r2
    5570:	0019      	movs	r1, r3
    5572:	2380      	movs	r3, #128	; 0x80
    5574:	005b      	lsls	r3, r3, #1
    5576:	001a      	movs	r2, r3
    5578:	4b34      	ldr	r3, [pc, #208]	; (564c <cmd_common_process+0xc82>)
    557a:	4798      	blx	r3
						save_log(EEPROM);
    557c:	4b3f      	ldr	r3, [pc, #252]	; (567c <cmd_common_process+0xcb2>)
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	2b00      	cmp	r3, #0
    5582:	d009      	beq.n	5598 <cmd_common_process+0xbce>
    5584:	4b34      	ldr	r3, [pc, #208]	; (5658 <cmd_common_process+0xc8e>)
    5586:	781b      	ldrb	r3, [r3, #0]
    5588:	0018      	movs	r0, r3
    558a:	4b3d      	ldr	r3, [pc, #244]	; (5680 <cmd_common_process+0xcb6>)
    558c:	6819      	ldr	r1, [r3, #0]
    558e:	4b3b      	ldr	r3, [pc, #236]	; (567c <cmd_common_process+0xcb2>)
    5590:	681a      	ldr	r2, [r3, #0]
    5592:	2302      	movs	r3, #2
    5594:	4c3b      	ldr	r4, [pc, #236]	; (5684 <cmd_common_process+0xcba>)
    5596:	47a0      	blx	r4
						wn |=+cfg_save();
    5598:	4b3b      	ldr	r3, [pc, #236]	; (5688 <cmd_common_process+0xcbe>)
    559a:	4798      	blx	r3
    559c:	0003      	movs	r3, r0
    559e:	b21a      	sxth	r2, r3
    55a0:	230a      	movs	r3, #10
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	2100      	movs	r1, #0
    55a6:	5e5b      	ldrsh	r3, [r3, r1]
    55a8:	4313      	orrs	r3, r2
    55aa:	b21a      	sxth	r2, r3
    55ac:	230a      	movs	r3, #10
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	801a      	strh	r2, [r3, #0]
					}
					
					if (wr_flag_acc)
    55b2:	4b2b      	ldr	r3, [pc, #172]	; (5660 <cmd_common_process+0xc96>)
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d010      	beq.n	55dc <cmd_common_process+0xc12>
					{
						acc(WRITE);
    55ba:	2001      	movs	r0, #1
    55bc:	4b33      	ldr	r3, [pc, #204]	; (568c <cmd_common_process+0xcc2>)
    55be:	4798      	blx	r3
						save_log(ACC_CHANGE);
    55c0:	4b2e      	ldr	r3, [pc, #184]	; (567c <cmd_common_process+0xcb2>)
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d009      	beq.n	55dc <cmd_common_process+0xc12>
    55c8:	4b23      	ldr	r3, [pc, #140]	; (5658 <cmd_common_process+0xc8e>)
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	0018      	movs	r0, r3
    55ce:	4b2c      	ldr	r3, [pc, #176]	; (5680 <cmd_common_process+0xcb6>)
    55d0:	6819      	ldr	r1, [r3, #0]
    55d2:	4b2a      	ldr	r3, [pc, #168]	; (567c <cmd_common_process+0xcb2>)
    55d4:	681a      	ldr	r2, [r3, #0]
    55d6:	2303      	movs	r3, #3
    55d8:	4c2a      	ldr	r4, [pc, #168]	; (5684 <cmd_common_process+0xcba>)
    55da:	47a0      	blx	r4
					}
					
					
					reset=1;
    55dc:	4b2c      	ldr	r3, [pc, #176]	; (5690 <cmd_common_process+0xcc6>)
    55de:	2201      	movs	r2, #1
    55e0:	801a      	strh	r2, [r3, #0]
		break;
    55e2:	e058      	b.n	5696 <cmd_common_process+0xccc>
		//......................................................................
		case 0x29:	if(size  !=  5) { return; }									//reboot
    55e4:	230e      	movs	r3, #14
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	881b      	ldrh	r3, [r3, #0]
    55ea:	2b05      	cmp	r3, #5
    55ec:	d000      	beq.n	55f0 <cmd_common_process+0xc26>
    55ee:	e0c2      	b.n	5776 <cmd_common_process+0xdac>
					check_permission();
    55f0:	4b19      	ldr	r3, [pc, #100]	; (5658 <cmd_common_process+0xc8e>)
    55f2:	781b      	ldrb	r3, [r3, #0]
    55f4:	2b01      	cmp	r3, #1
    55f6:	d00d      	beq.n	5614 <cmd_common_process+0xc4a>
    55f8:	230a      	movs	r3, #10
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	881b      	ldrh	r3, [r3, #0]
    55fe:	4a14      	ldr	r2, [pc, #80]	; (5650 <cmd_common_process+0xc86>)
    5600:	2100      	movs	r1, #0
    5602:	54d1      	strb	r1, [r2, r3]
    5604:	230a      	movs	r3, #10
    5606:	18fb      	adds	r3, r7, r3
    5608:	881a      	ldrh	r2, [r3, #0]
    560a:	230a      	movs	r3, #10
    560c:	18fb      	adds	r3, r7, r3
    560e:	3201      	adds	r2, #1
    5610:	801a      	strh	r2, [r3, #0]
    5612:	e040      	b.n	5696 <cmd_common_process+0xccc>
					reset=1; wn++;
    5614:	4b1e      	ldr	r3, [pc, #120]	; (5690 <cmd_common_process+0xcc6>)
    5616:	2201      	movs	r2, #1
    5618:	801a      	strh	r2, [r3, #0]
    561a:	230a      	movs	r3, #10
    561c:	18fb      	adds	r3, r7, r3
    561e:	881a      	ldrh	r2, [r3, #0]
    5620:	230a      	movs	r3, #10
    5622:	18fb      	adds	r3, r7, r3
    5624:	3201      	adds	r2, #1
    5626:	801a      	strh	r2, [r3, #0]
		break;
    5628:	e035      	b.n	5696 <cmd_common_process+0xccc>
		break;
    562a:	46c0      	nop			; (mov r8, r8)
    562c:	e033      	b.n	5696 <cmd_common_process+0xccc>
					if(ixo > sizeof(CFG_1)	) { break;  }
    562e:	46c0      	nop			; (mov r8, r8)
    5630:	e031      	b.n	5696 <cmd_common_process+0xccc>
					if(ixo > sizeof(CFG_2)	) { break;  }
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	e02f      	b.n	5696 <cmd_common_process+0xccc>
					if(cnt  ==  0) { break; }
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	e02d      	b.n	5696 <cmd_common_process+0xccc>
					if(ixo       >= sizeof(CFG_1)) { break; }
    563a:	46c0      	nop			; (mov r8, r8)
    563c:	e02b      	b.n	5696 <cmd_common_process+0xccc>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	e029      	b.n	5696 <cmd_common_process+0xccc>
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	20002554 	.word	0x20002554
    5648:	200004a3 	.word	0x200004a3
    564c:	0000c7e1 	.word	0x0000c7e1
    5650:	200004a0 	.word	0x200004a0
    5654:	00005fbd 	.word	0x00005fbd
    5658:	20000451 	.word	0x20000451
    565c:	00005feb 	.word	0x00005feb
    5660:	20000459 	.word	0x20000459
    5664:	200004a4 	.word	0x200004a4
    5668:	000068e9 	.word	0x000068e9
    566c:	20000458 	.word	0x20000458
    5670:	20003cc4 	.word	0x20003cc4
    5674:	00005ce9 	.word	0x00005ce9
    5678:	20003dc4 	.word	0x20003dc4
    567c:	20000454 	.word	0x20000454
    5680:	2000049c 	.word	0x2000049c
    5684:	0000455d 	.word	0x0000455d
    5688:	0000afa5 	.word	0x0000afa5
    568c:	00004215 	.word	0x00004215
    5690:	20002548 	.word	0x20002548
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    5694:	46c0      	nop			; (mov r8, r8)
		//......................................................................
		
		default :	   return;
	}
	
	cbuf[2]|=0x80;
    5696:	4b3a      	ldr	r3, [pc, #232]	; (5780 <cmd_common_process+0xdb6>)
    5698:	789b      	ldrb	r3, [r3, #2]
    569a:	2280      	movs	r2, #128	; 0x80
    569c:	4252      	negs	r2, r2
    569e:	4313      	orrs	r3, r2
    56a0:	b2da      	uxtb	r2, r3
    56a2:	4b37      	ldr	r3, [pc, #220]	; (5780 <cmd_common_process+0xdb6>)
    56a4:	709a      	strb	r2, [r3, #2]

	cs= crc16_ccit(cbuf,wn);
    56a6:	1cbc      	adds	r4, r7, #2
    56a8:	230a      	movs	r3, #10
    56aa:	18fb      	adds	r3, r7, r3
    56ac:	881a      	ldrh	r2, [r3, #0]
    56ae:	4b34      	ldr	r3, [pc, #208]	; (5780 <cmd_common_process+0xdb6>)
    56b0:	0011      	movs	r1, r2
    56b2:	0018      	movs	r0, r3
    56b4:	4b33      	ldr	r3, [pc, #204]	; (5784 <cmd_common_process+0xdba>)
    56b6:	4798      	blx	r3
    56b8:	0003      	movs	r3, r0
    56ba:	8023      	strh	r3, [r4, #0]
	
	cbuf[wn] = (BYTE)(cs & 0x00ff);         wn++;
    56bc:	230a      	movs	r3, #10
    56be:	18fb      	adds	r3, r7, r3
    56c0:	881b      	ldrh	r3, [r3, #0]
    56c2:	1cba      	adds	r2, r7, #2
    56c4:	8812      	ldrh	r2, [r2, #0]
    56c6:	b2d1      	uxtb	r1, r2
    56c8:	4a2d      	ldr	r2, [pc, #180]	; (5780 <cmd_common_process+0xdb6>)
    56ca:	54d1      	strb	r1, [r2, r3]
    56cc:	230a      	movs	r3, #10
    56ce:	18fb      	adds	r3, r7, r3
    56d0:	881a      	ldrh	r2, [r3, #0]
    56d2:	230a      	movs	r3, #10
    56d4:	18fb      	adds	r3, r7, r3
    56d6:	3201      	adds	r2, #1
    56d8:	801a      	strh	r2, [r3, #0]
	cbuf[wn] = (BYTE)((cs & 0xff00) >> 8);  wn++;
    56da:	230a      	movs	r3, #10
    56dc:	18fb      	adds	r3, r7, r3
    56de:	881b      	ldrh	r3, [r3, #0]
    56e0:	1cba      	adds	r2, r7, #2
    56e2:	8812      	ldrh	r2, [r2, #0]
    56e4:	0a12      	lsrs	r2, r2, #8
    56e6:	b292      	uxth	r2, r2
    56e8:	b2d1      	uxtb	r1, r2
    56ea:	4a25      	ldr	r2, [pc, #148]	; (5780 <cmd_common_process+0xdb6>)
    56ec:	54d1      	strb	r1, [r2, r3]
    56ee:	230a      	movs	r3, #10
    56f0:	18fb      	adds	r3, r7, r3
    56f2:	881a      	ldrh	r2, [r3, #0]
    56f4:	230a      	movs	r3, #10
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	3201      	adds	r2, #1
    56fa:	801a      	strh	r2, [r3, #0]
	
	memcpy((BYTE*)&eth_sock[0].data,cbuf,wn);
    56fc:	230a      	movs	r3, #10
    56fe:	18fb      	adds	r3, r7, r3
    5700:	881a      	ldrh	r2, [r3, #0]
    5702:	491f      	ldr	r1, [pc, #124]	; (5780 <cmd_common_process+0xdb6>)
    5704:	4b20      	ldr	r3, [pc, #128]	; (5788 <cmd_common_process+0xdbe>)
    5706:	0018      	movs	r0, r3
    5708:	4b20      	ldr	r3, [pc, #128]	; (578c <cmd_common_process+0xdc2>)
    570a:	4798      	blx	r3
	
	eth_sock[0].len[0]=((wn & 0xFF00)>>8);
    570c:	230a      	movs	r3, #10
    570e:	18fb      	adds	r3, r7, r3
    5710:	881b      	ldrh	r3, [r3, #0]
    5712:	0a1b      	lsrs	r3, r3, #8
    5714:	b29b      	uxth	r3, r3
    5716:	b2da      	uxtb	r2, r3
    5718:	4b1d      	ldr	r3, [pc, #116]	; (5790 <cmd_common_process+0xdc6>)
    571a:	719a      	strb	r2, [r3, #6]
	eth_sock[0].len[1]=(wn & 0x00FF);
    571c:	230a      	movs	r3, #10
    571e:	18fb      	adds	r3, r7, r3
    5720:	881b      	ldrh	r3, [r3, #0]
    5722:	b2da      	uxtb	r2, r3
    5724:	4b1a      	ldr	r3, [pc, #104]	; (5790 <cmd_common_process+0xdc6>)
    5726:	71da      	strb	r2, [r3, #7]
	eth_sock[0].w_status=1;
    5728:	4b19      	ldr	r3, [pc, #100]	; (5790 <cmd_common_process+0xdc6>)
    572a:	4a1a      	ldr	r2, [pc, #104]	; (5794 <cmd_common_process+0xdca>)
    572c:	2101      	movs	r1, #1
    572e:	5499      	strb	r1, [r3, r2]
    5730:	e022      	b.n	5778 <cmd_common_process+0xdae>
	if(eth_sock[0].r_status==FALSE) {return;}
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	e020      	b.n	5778 <cmd_common_process+0xdae>
	if(size	 <    5			  )	{ return; }
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	e01e      	b.n	5778 <cmd_common_process+0xdae>
	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	e01c      	b.n	5778 <cmd_common_process+0xdae>
	if(addr !=  0){return;}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	e01a      	b.n	5778 <cmd_common_process+0xdae>
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	e018      	b.n	5778 <cmd_common_process+0xdae>
		default :	   return;
    5746:	46c0      	nop			; (mov r8, r8)
    5748:	e016      	b.n	5778 <cmd_common_process+0xdae>
		case 0x00:	if(size  !=  9) { return; }
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	e014      	b.n	5778 <cmd_common_process+0xdae>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	e012      	b.n	5778 <cmd_common_process+0xdae>
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	e010      	b.n	5778 <cmd_common_process+0xdae>
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	e00e      	b.n	5778 <cmd_common_process+0xdae>
		case 0x10:	if(size <  6) { return; }
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	e00c      	b.n	5778 <cmd_common_process+0xdae>
		case 0x17:	if(size  <  7) { return; }
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	e00a      	b.n	5778 <cmd_common_process+0xdae>
		case 0x20:	if(size <  7)		{ return; }								//login
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	e008      	b.n	5778 <cmd_common_process+0xdae>
		case 0x21:	if(size < 5)		{ return; }								//login send
    5766:	46c0      	nop			; (mov r8, r8)
    5768:	e006      	b.n	5778 <cmd_common_process+0xdae>
		case 0x22:	if(size <  5)		{ return; }								//login change
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	e004      	b.n	5778 <cmd_common_process+0xdae>
		case 0x23:	if(size <  5)		{ return; }								//read logs
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	e002      	b.n	5778 <cmd_common_process+0xdae>
		case 0x27:	if(size  !=  5) { return; }									//change config
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	e000      	b.n	5778 <cmd_common_process+0xdae>
		case 0x29:	if(size  !=  5) { return; }									//reboot
    5776:	46c0      	nop			; (mov r8, r8)
}
    5778:	46bd      	mov	sp, r7
    577a:	b005      	add	sp, #20
    577c:	bd90      	pop	{r4, r7, pc}
    577e:	46c0      	nop			; (mov r8, r8)
    5780:	200004a0 	.word	0x200004a0
    5784:	00005ce9 	.word	0x00005ce9
    5788:	200005d4 	.word	0x200005d4
    578c:	0000c7e1 	.word	0x0000c7e1
    5790:	200005cc 	.word	0x200005cc
    5794:	000005d2 	.word	0x000005d2

00005798 <cmd_usart_process>:

void cmd_usart_process (void)
{
    5798:	b580      	push	{r7, lr}
    579a:	af00      	add	r7, sp, #0
	static BYTE n_port=1;
	
	for(n_port=1;n_port<5;n_port++)
    579c:	4b13      	ldr	r3, [pc, #76]	; (57ec <cmd_usart_process+0x54>)
    579e:	2201      	movs	r2, #1
    57a0:	701a      	strb	r2, [r3, #0]
    57a2:	e01b      	b.n	57dc <cmd_usart_process+0x44>
	{
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57a4:	4b11      	ldr	r3, [pc, #68]	; (57ec <cmd_usart_process+0x54>)
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	1e5a      	subs	r2, r3, #1
    57aa:	4911      	ldr	r1, [pc, #68]	; (57f0 <cmd_usart_process+0x58>)
    57ac:	2034      	movs	r0, #52	; 0x34
    57ae:	0013      	movs	r3, r2
    57b0:	005b      	lsls	r3, r3, #1
    57b2:	189b      	adds	r3, r3, r2
    57b4:	009b      	lsls	r3, r3, #2
    57b6:	189b      	adds	r3, r3, r2
    57b8:	18cb      	adds	r3, r1, r3
    57ba:	181b      	adds	r3, r3, r0
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	2b00      	cmp	r3, #0
    57c0:	d005      	beq.n	57ce <cmd_usart_process+0x36>
		usart_process(n_port);
    57c2:	4b0a      	ldr	r3, [pc, #40]	; (57ec <cmd_usart_process+0x54>)
    57c4:	781b      	ldrb	r3, [r3, #0]
    57c6:	0018      	movs	r0, r3
    57c8:	f000 f814 	bl	57f4 <usart_process>
    57cc:	e000      	b.n	57d0 <cmd_usart_process+0x38>
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57ce:	46c0      	nop			; (mov r8, r8)
	for(n_port=1;n_port<5;n_port++)
    57d0:	4b06      	ldr	r3, [pc, #24]	; (57ec <cmd_usart_process+0x54>)
    57d2:	781b      	ldrb	r3, [r3, #0]
    57d4:	3301      	adds	r3, #1
    57d6:	b2da      	uxtb	r2, r3
    57d8:	4b04      	ldr	r3, [pc, #16]	; (57ec <cmd_usart_process+0x54>)
    57da:	701a      	strb	r2, [r3, #0]
    57dc:	4b03      	ldr	r3, [pc, #12]	; (57ec <cmd_usart_process+0x54>)
    57de:	781b      	ldrb	r3, [r3, #0]
    57e0:	2b04      	cmp	r3, #4
    57e2:	d9df      	bls.n	57a4 <cmd_usart_process+0xc>
	}
}
    57e4:	46c0      	nop			; (mov r8, r8)
    57e6:	46bd      	mov	sp, r7
    57e8:	bd80      	pop	{r7, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	20000000 	.word	0x20000000
    57f0:	20003dc4 	.word	0x20003dc4

000057f4 <usart_process>:

void usart_process (BYTE n_port)
{
    57f4:	b5b0      	push	{r4, r5, r7, lr}
    57f6:	b084      	sub	sp, #16
    57f8:	af00      	add	r7, sp, #0
    57fa:	0002      	movs	r2, r0
    57fc:	1dfb      	adds	r3, r7, #7
    57fe:	701a      	strb	r2, [r3, #0]
	WORD size=0;
    5800:	230e      	movs	r3, #14
    5802:	18fb      	adds	r3, r7, r3
    5804:	2200      	movs	r2, #0
    5806:	801a      	strh	r2, [r3, #0]
	WORD crc;
	
	switch(port[n_port-1].stage)
    5808:	1dfb      	adds	r3, r7, #7
    580a:	781b      	ldrb	r3, [r3, #0]
    580c:	1e5a      	subs	r2, r3, #1
    580e:	48b8      	ldr	r0, [pc, #736]	; (5af0 <usart_process+0x2fc>)
    5810:	2387      	movs	r3, #135	; 0x87
    5812:	0099      	lsls	r1, r3, #2
    5814:	0013      	movs	r3, r2
    5816:	00db      	lsls	r3, r3, #3
    5818:	189b      	adds	r3, r3, r2
    581a:	019b      	lsls	r3, r3, #6
    581c:	18c3      	adds	r3, r0, r3
    581e:	185b      	adds	r3, r3, r1
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	b2db      	uxtb	r3, r3
    5824:	2b00      	cmp	r3, #0
    5826:	d003      	beq.n	5830 <usart_process+0x3c>
    5828:	2b01      	cmp	r3, #1
    582a:	d100      	bne.n	582e <usart_process+0x3a>
    582c:	e0fd      	b.n	5a2a <usart_process+0x236>
    582e:	e235      	b.n	5c9c <usart_process+0x4a8>
	{
		case RS485_WRITE:
			//ETH message check
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5830:	1dfb      	adds	r3, r7, #7
    5832:	781b      	ldrb	r3, [r3, #0]
    5834:	4aaf      	ldr	r2, [pc, #700]	; (5af4 <usart_process+0x300>)
    5836:	49b0      	ldr	r1, [pc, #704]	; (5af8 <usart_process+0x304>)
    5838:	48b0      	ldr	r0, [pc, #704]	; (5afc <usart_process+0x308>)
    583a:	4343      	muls	r3, r0
    583c:	18d3      	adds	r3, r2, r3
    583e:	185b      	adds	r3, r3, r1
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	2b00      	cmp	r3, #0
    5844:	d100      	bne.n	5848 <usart_process+0x54>
    5846:	e239      	b.n	5cbc <usart_process+0x4c8>
			
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5848:	1dfb      	adds	r3, r7, #7
    584a:	781b      	ldrb	r3, [r3, #0]
    584c:	1e5a      	subs	r2, r3, #1
    584e:	49ac      	ldr	r1, [pc, #688]	; (5b00 <usart_process+0x30c>)
    5850:	206a      	movs	r0, #106	; 0x6a
    5852:	0013      	movs	r3, r2
    5854:	00db      	lsls	r3, r3, #3
    5856:	189b      	adds	r3, r3, r2
    5858:	005b      	lsls	r3, r3, #1
    585a:	18cb      	adds	r3, r1, r3
    585c:	181b      	adds	r3, r3, r0
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	2b00      	cmp	r3, #0
    5862:	d108      	bne.n	5876 <usart_process+0x82>
    5864:	1dfb      	adds	r3, r7, #7
    5866:	781b      	ldrb	r3, [r3, #0]
    5868:	3b01      	subs	r3, #1
    586a:	0018      	movs	r0, r3
    586c:	4ba5      	ldr	r3, [pc, #660]	; (5b04 <usart_process+0x310>)
    586e:	4798      	blx	r3
    5870:	1e03      	subs	r3, r0, #0
    5872:	d100      	bne.n	5876 <usart_process+0x82>
    5874:	e224      	b.n	5cc0 <usart_process+0x4cc>
			
			port[n_port-1].time_port = port[n_port-1].tout_port*10;							//check timeout
    5876:	1dfb      	adds	r3, r7, #7
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	1e5a      	subs	r2, r3, #1
    587c:	1dfb      	adds	r3, r7, #7
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	1e59      	subs	r1, r3, #1
    5882:	4c9b      	ldr	r4, [pc, #620]	; (5af0 <usart_process+0x2fc>)
    5884:	2386      	movs	r3, #134	; 0x86
    5886:	0098      	lsls	r0, r3, #2
    5888:	000b      	movs	r3, r1
    588a:	00db      	lsls	r3, r3, #3
    588c:	185b      	adds	r3, r3, r1
    588e:	019b      	lsls	r3, r3, #6
    5890:	18e3      	adds	r3, r4, r3
    5892:	181b      	adds	r3, r3, r0
    5894:	881b      	ldrh	r3, [r3, #0]
    5896:	b29b      	uxth	r3, r3
    5898:	0019      	movs	r1, r3
    589a:	000b      	movs	r3, r1
    589c:	009b      	lsls	r3, r3, #2
    589e:	185b      	adds	r3, r3, r1
    58a0:	005b      	lsls	r3, r3, #1
    58a2:	001c      	movs	r4, r3
    58a4:	4892      	ldr	r0, [pc, #584]	; (5af0 <usart_process+0x2fc>)
    58a6:	2388      	movs	r3, #136	; 0x88
    58a8:	0099      	lsls	r1, r3, #2
    58aa:	0013      	movs	r3, r2
    58ac:	00db      	lsls	r3, r3, #3
    58ae:	189b      	adds	r3, r3, r2
    58b0:	019b      	lsls	r3, r3, #6
    58b2:	18c3      	adds	r3, r0, r3
    58b4:	185b      	adds	r3, r3, r1
    58b6:	601c      	str	r4, [r3, #0]
		
			size = eth_sock[n_port].len[0] << 8 | eth_sock[n_port].len[1];				//give size
    58b8:	1dfb      	adds	r3, r7, #7
    58ba:	781b      	ldrb	r3, [r3, #0]
    58bc:	4a8d      	ldr	r2, [pc, #564]	; (5af4 <usart_process+0x300>)
    58be:	498f      	ldr	r1, [pc, #572]	; (5afc <usart_process+0x308>)
    58c0:	434b      	muls	r3, r1
    58c2:	18d3      	adds	r3, r2, r3
    58c4:	3306      	adds	r3, #6
    58c6:	781b      	ldrb	r3, [r3, #0]
    58c8:	021b      	lsls	r3, r3, #8
    58ca:	b21a      	sxth	r2, r3
    58cc:	1dfb      	adds	r3, r7, #7
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	4988      	ldr	r1, [pc, #544]	; (5af4 <usart_process+0x300>)
    58d2:	488a      	ldr	r0, [pc, #552]	; (5afc <usart_process+0x308>)
    58d4:	4343      	muls	r3, r0
    58d6:	18cb      	adds	r3, r1, r3
    58d8:	3307      	adds	r3, #7
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	b21b      	sxth	r3, r3
    58de:	4313      	orrs	r3, r2
    58e0:	b21a      	sxth	r2, r3
    58e2:	230e      	movs	r3, #14
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	801a      	strh	r2, [r3, #0]
		
			if(size>USART_BUF_SIZE)	{eth_sock[n_port].r_status = 0; return;}			//check overload
    58e8:	230e      	movs	r3, #14
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	881a      	ldrh	r2, [r3, #0]
    58ee:	2380      	movs	r3, #128	; 0x80
    58f0:	005b      	lsls	r3, r3, #1
    58f2:	429a      	cmp	r2, r3
    58f4:	d90a      	bls.n	590c <usart_process+0x118>
    58f6:	1dfb      	adds	r3, r7, #7
    58f8:	781b      	ldrb	r3, [r3, #0]
    58fa:	4a7e      	ldr	r2, [pc, #504]	; (5af4 <usart_process+0x300>)
    58fc:	497e      	ldr	r1, [pc, #504]	; (5af8 <usart_process+0x304>)
    58fe:	487f      	ldr	r0, [pc, #508]	; (5afc <usart_process+0x308>)
    5900:	4343      	muls	r3, r0
    5902:	18d3      	adds	r3, r2, r3
    5904:	185b      	adds	r3, r3, r1
    5906:	2200      	movs	r2, #0
    5908:	701a      	strb	r2, [r3, #0]
    590a:	e1dc      	b.n	5cc6 <usart_process+0x4d2>
				
			switch(cfg_1.sock_rs485[n_port - 1].pl)
    590c:	1dfb      	adds	r3, r7, #7
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	1e5a      	subs	r2, r3, #1
    5912:	497b      	ldr	r1, [pc, #492]	; (5b00 <usart_process+0x30c>)
    5914:	2036      	movs	r0, #54	; 0x36
    5916:	0013      	movs	r3, r2
    5918:	005b      	lsls	r3, r3, #1
    591a:	189b      	adds	r3, r3, r2
    591c:	009b      	lsls	r3, r3, #2
    591e:	189b      	adds	r3, r3, r2
    5920:	18cb      	adds	r3, r1, r3
    5922:	181b      	adds	r3, r3, r0
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	2b02      	cmp	r3, #2
    5928:	d150      	bne.n	59cc <usart_process+0x1d8>
			{
				case MBUS:		
					crc = crc16_mbus(eth_sock[n_port].data+MBAP_HDR_LEN, size - MBAP_HDR_LEN);
    592a:	1dfb      	adds	r3, r7, #7
    592c:	781b      	ldrb	r3, [r3, #0]
    592e:	4a73      	ldr	r2, [pc, #460]	; (5afc <usart_process+0x308>)
    5930:	4353      	muls	r3, r2
    5932:	3308      	adds	r3, #8
    5934:	001a      	movs	r2, r3
    5936:	4b6f      	ldr	r3, [pc, #444]	; (5af4 <usart_process+0x300>)
    5938:	18d3      	adds	r3, r2, r3
    593a:	1d9a      	adds	r2, r3, #6
    593c:	230e      	movs	r3, #14
    593e:	18fb      	adds	r3, r7, r3
    5940:	881b      	ldrh	r3, [r3, #0]
    5942:	3b06      	subs	r3, #6
    5944:	b29b      	uxth	r3, r3
    5946:	210c      	movs	r1, #12
    5948:	187c      	adds	r4, r7, r1
    594a:	0019      	movs	r1, r3
    594c:	0010      	movs	r0, r2
    594e:	4b6e      	ldr	r3, [pc, #440]	; (5b08 <usart_process+0x314>)
    5950:	4798      	blx	r3
    5952:	0003      	movs	r3, r0
    5954:	8023      	strh	r3, [r4, #0]
					eth_sock[n_port].data[size] = crc; 
    5956:	1dfb      	adds	r3, r7, #7
    5958:	781a      	ldrb	r2, [r3, #0]
    595a:	230e      	movs	r3, #14
    595c:	18fb      	adds	r3, r7, r3
    595e:	881b      	ldrh	r3, [r3, #0]
    5960:	210c      	movs	r1, #12
    5962:	1879      	adds	r1, r7, r1
    5964:	8809      	ldrh	r1, [r1, #0]
    5966:	b2cc      	uxtb	r4, r1
    5968:	4962      	ldr	r1, [pc, #392]	; (5af4 <usart_process+0x300>)
    596a:	4864      	ldr	r0, [pc, #400]	; (5afc <usart_process+0x308>)
    596c:	4342      	muls	r2, r0
    596e:	188a      	adds	r2, r1, r2
    5970:	18d3      	adds	r3, r2, r3
    5972:	3308      	adds	r3, #8
    5974:	1c22      	adds	r2, r4, #0
    5976:	701a      	strb	r2, [r3, #0]
					eth_sock[n_port].data[size + 1] = crc >> 8;
    5978:	1dfb      	adds	r3, r7, #7
    597a:	781a      	ldrb	r2, [r3, #0]
    597c:	230e      	movs	r3, #14
    597e:	18fb      	adds	r3, r7, r3
    5980:	881b      	ldrh	r3, [r3, #0]
    5982:	3301      	adds	r3, #1
    5984:	210c      	movs	r1, #12
    5986:	1879      	adds	r1, r7, r1
    5988:	8809      	ldrh	r1, [r1, #0]
    598a:	0a09      	lsrs	r1, r1, #8
    598c:	b289      	uxth	r1, r1
    598e:	b2cc      	uxtb	r4, r1
    5990:	4958      	ldr	r1, [pc, #352]	; (5af4 <usart_process+0x300>)
    5992:	485a      	ldr	r0, [pc, #360]	; (5afc <usart_process+0x308>)
    5994:	4342      	muls	r2, r0
    5996:	188a      	adds	r2, r1, r2
    5998:	18d3      	adds	r3, r2, r3
    599a:	3308      	adds	r3, #8
    599c:	1c22      	adds	r2, r4, #0
    599e:	701a      	strb	r2, [r3, #0]
					usart_write(n_port - 1, eth_sock[n_port].data + MBAP_HDR_LEN, size - MBAP_HDR_LEN + 2);
    59a0:	1dfb      	adds	r3, r7, #7
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	3b01      	subs	r3, #1
    59a6:	b2d8      	uxtb	r0, r3
    59a8:	1dfb      	adds	r3, r7, #7
    59aa:	781b      	ldrb	r3, [r3, #0]
    59ac:	4a53      	ldr	r2, [pc, #332]	; (5afc <usart_process+0x308>)
    59ae:	4353      	muls	r3, r2
    59b0:	3308      	adds	r3, #8
    59b2:	001a      	movs	r2, r3
    59b4:	4b4f      	ldr	r3, [pc, #316]	; (5af4 <usart_process+0x300>)
    59b6:	18d3      	adds	r3, r2, r3
    59b8:	1d99      	adds	r1, r3, #6
    59ba:	230e      	movs	r3, #14
    59bc:	18fb      	adds	r3, r7, r3
    59be:	881b      	ldrh	r3, [r3, #0]
    59c0:	3b04      	subs	r3, #4
    59c2:	b29b      	uxth	r3, r3
    59c4:	001a      	movs	r2, r3
    59c6:	4b51      	ldr	r3, [pc, #324]	; (5b0c <usart_process+0x318>)
    59c8:	4798      	blx	r3
				break;
    59ca:	e012      	b.n	59f2 <usart_process+0x1fe>
				default://GATE
					usart_write(n_port - 1, eth_sock[n_port].data, size);
    59cc:	1dfb      	adds	r3, r7, #7
    59ce:	781b      	ldrb	r3, [r3, #0]
    59d0:	3b01      	subs	r3, #1
    59d2:	b2d8      	uxtb	r0, r3
    59d4:	1dfb      	adds	r3, r7, #7
    59d6:	781b      	ldrb	r3, [r3, #0]
    59d8:	4a48      	ldr	r2, [pc, #288]	; (5afc <usart_process+0x308>)
    59da:	4353      	muls	r3, r2
    59dc:	3308      	adds	r3, #8
    59de:	001a      	movs	r2, r3
    59e0:	4b44      	ldr	r3, [pc, #272]	; (5af4 <usart_process+0x300>)
    59e2:	18d1      	adds	r1, r2, r3
    59e4:	230e      	movs	r3, #14
    59e6:	18fb      	adds	r3, r7, r3
    59e8:	881b      	ldrh	r3, [r3, #0]
    59ea:	001a      	movs	r2, r3
    59ec:	4b47      	ldr	r3, [pc, #284]	; (5b0c <usart_process+0x318>)
    59ee:	4798      	blx	r3
				break;
    59f0:	46c0      	nop			; (mov r8, r8)
			}
			port[n_port-1].stage = RS485_READ;
    59f2:	1dfb      	adds	r3, r7, #7
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	1e5a      	subs	r2, r3, #1
    59f8:	483d      	ldr	r0, [pc, #244]	; (5af0 <usart_process+0x2fc>)
    59fa:	2387      	movs	r3, #135	; 0x87
    59fc:	0099      	lsls	r1, r3, #2
    59fe:	0013      	movs	r3, r2
    5a00:	00db      	lsls	r3, r3, #3
    5a02:	189b      	adds	r3, r3, r2
    5a04:	019b      	lsls	r3, r3, #6
    5a06:	18c3      	adds	r3, r0, r3
    5a08:	185b      	adds	r3, r3, r1
    5a0a:	2201      	movs	r2, #1
    5a0c:	701a      	strb	r2, [r3, #0]
			port[n_port-1].rn = 0;
    5a0e:	1dfb      	adds	r3, r7, #7
    5a10:	781b      	ldrb	r3, [r3, #0]
    5a12:	1e5a      	subs	r2, r3, #1
    5a14:	4936      	ldr	r1, [pc, #216]	; (5af0 <usart_process+0x2fc>)
    5a16:	483e      	ldr	r0, [pc, #248]	; (5b10 <usart_process+0x31c>)
    5a18:	0013      	movs	r3, r2
    5a1a:	00db      	lsls	r3, r3, #3
    5a1c:	189b      	adds	r3, r3, r2
    5a1e:	019b      	lsls	r3, r3, #6
    5a20:	18cb      	adds	r3, r1, r3
    5a22:	181b      	adds	r3, r3, r0
    5a24:	2200      	movs	r2, #0
    5a26:	801a      	strh	r2, [r3, #0]

		return;
    5a28:	e14d      	b.n	5cc6 <usart_process+0x4d2>
		case RS485_READ://UP
			size = usart_read(n_port - 1, port[n_port-1].rbuf, USART_BUF_SIZE);   //give mess size
    5a2a:	1dfb      	adds	r3, r7, #7
    5a2c:	781b      	ldrb	r3, [r3, #0]
    5a2e:	3b01      	subs	r3, #1
    5a30:	b2d8      	uxtb	r0, r3
    5a32:	1dfb      	adds	r3, r7, #7
    5a34:	781b      	ldrb	r3, [r3, #0]
    5a36:	1e5a      	subs	r2, r3, #1
    5a38:	0013      	movs	r3, r2
    5a3a:	00db      	lsls	r3, r3, #3
    5a3c:	189b      	adds	r3, r3, r2
    5a3e:	019b      	lsls	r3, r3, #6
    5a40:	3309      	adds	r3, #9
    5a42:	33ff      	adds	r3, #255	; 0xff
    5a44:	001a      	movs	r2, r3
    5a46:	4b2a      	ldr	r3, [pc, #168]	; (5af0 <usart_process+0x2fc>)
    5a48:	18d3      	adds	r3, r2, r3
    5a4a:	1c59      	adds	r1, r3, #1
    5a4c:	230e      	movs	r3, #14
    5a4e:	18fc      	adds	r4, r7, r3
    5a50:	2380      	movs	r3, #128	; 0x80
    5a52:	005b      	lsls	r3, r3, #1
    5a54:	001a      	movs	r2, r3
    5a56:	4b2f      	ldr	r3, [pc, #188]	; (5b14 <usart_process+0x320>)
    5a58:	4798      	blx	r3
    5a5a:	0003      	movs	r3, r0
    5a5c:	8023      	strh	r3, [r4, #0]
			if (size != 0)
    5a5e:	230e      	movs	r3, #14
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	881b      	ldrh	r3, [r3, #0]
    5a64:	2b00      	cmp	r3, #0
    5a66:	d100      	bne.n	5a6a <usart_process+0x276>
    5a68:	e0e3      	b.n	5c32 <usart_process+0x43e>
			{
				switch (cfg_1.sock_rs485[n_port - 1].pl)
    5a6a:	1dfb      	adds	r3, r7, #7
    5a6c:	781b      	ldrb	r3, [r3, #0]
    5a6e:	1e5a      	subs	r2, r3, #1
    5a70:	4923      	ldr	r1, [pc, #140]	; (5b00 <usart_process+0x30c>)
    5a72:	2036      	movs	r0, #54	; 0x36
    5a74:	0013      	movs	r3, r2
    5a76:	005b      	lsls	r3, r3, #1
    5a78:	189b      	adds	r3, r3, r2
    5a7a:	009b      	lsls	r3, r3, #2
    5a7c:	189b      	adds	r3, r3, r2
    5a7e:	18cb      	adds	r3, r1, r3
    5a80:	181b      	adds	r3, r3, r0
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	2b02      	cmp	r3, #2
    5a86:	d149      	bne.n	5b1c <usart_process+0x328>
				{
					case MBUS:
					
						memcpy(eth_sock[n_port].data + MBAP_HDR_LEN, port[n_port-1].rbuf, size);
    5a88:	1dfb      	adds	r3, r7, #7
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	4a1b      	ldr	r2, [pc, #108]	; (5afc <usart_process+0x308>)
    5a8e:	4353      	muls	r3, r2
    5a90:	3308      	adds	r3, #8
    5a92:	001a      	movs	r2, r3
    5a94:	4b17      	ldr	r3, [pc, #92]	; (5af4 <usart_process+0x300>)
    5a96:	18d3      	adds	r3, r2, r3
    5a98:	1d98      	adds	r0, r3, #6
    5a9a:	1dfb      	adds	r3, r7, #7
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	1e5a      	subs	r2, r3, #1
    5aa0:	0013      	movs	r3, r2
    5aa2:	00db      	lsls	r3, r3, #3
    5aa4:	189b      	adds	r3, r3, r2
    5aa6:	019b      	lsls	r3, r3, #6
    5aa8:	3309      	adds	r3, #9
    5aaa:	33ff      	adds	r3, #255	; 0xff
    5aac:	001a      	movs	r2, r3
    5aae:	4b10      	ldr	r3, [pc, #64]	; (5af0 <usart_process+0x2fc>)
    5ab0:	18d3      	adds	r3, r2, r3
    5ab2:	1c59      	adds	r1, r3, #1
    5ab4:	230e      	movs	r3, #14
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	881b      	ldrh	r3, [r3, #0]
    5aba:	001a      	movs	r2, r3
    5abc:	4b16      	ldr	r3, [pc, #88]	; (5b18 <usart_process+0x324>)
    5abe:	4798      	blx	r3
						size += MBAP_HDR_LEN - 2;
    5ac0:	230e      	movs	r3, #14
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	220e      	movs	r2, #14
    5ac6:	18ba      	adds	r2, r7, r2
    5ac8:	8812      	ldrh	r2, [r2, #0]
    5aca:	3204      	adds	r2, #4
    5acc:	801a      	strh	r2, [r3, #0]
						eth_sock[n_port].data[5]=size-MBAP_HDR_LEN;
    5ace:	1dfb      	adds	r3, r7, #7
    5ad0:	781b      	ldrb	r3, [r3, #0]
    5ad2:	220e      	movs	r2, #14
    5ad4:	18ba      	adds	r2, r7, r2
    5ad6:	8812      	ldrh	r2, [r2, #0]
    5ad8:	b2d2      	uxtb	r2, r2
    5ada:	3a06      	subs	r2, #6
    5adc:	b2d0      	uxtb	r0, r2
    5ade:	4a05      	ldr	r2, [pc, #20]	; (5af4 <usart_process+0x300>)
    5ae0:	4906      	ldr	r1, [pc, #24]	; (5afc <usart_process+0x308>)
    5ae2:	434b      	muls	r3, r1
    5ae4:	18d3      	adds	r3, r2, r3
    5ae6:	330d      	adds	r3, #13
    5ae8:	1c02      	adds	r2, r0, #0
    5aea:	701a      	strb	r2, [r3, #0]
					break;
    5aec:	e032      	b.n	5b54 <usart_process+0x360>
    5aee:	46c0      	nop			; (mov r8, r8)
    5af0:	200031fc 	.word	0x200031fc
    5af4:	200005cc 	.word	0x200005cc
    5af8:	000005d1 	.word	0x000005d1
    5afc:	000005e5 	.word	0x000005e5
    5b00:	20003dc4 	.word	0x20003dc4
    5b04:	00004399 	.word	0x00004399
    5b08:	00005da9 	.word	0x00005da9
    5b0c:	00008e9d 	.word	0x00008e9d
    5b10:	0000020e 	.word	0x0000020e
    5b14:	00008fb1 	.word	0x00008fb1
    5b18:	0000c7e1 	.word	0x0000c7e1
					default://GATE
						memcpy(eth_sock[n_port].data, port[n_port-1].rbuf, size); 
    5b1c:	1dfb      	adds	r3, r7, #7
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	4a6a      	ldr	r2, [pc, #424]	; (5ccc <usart_process+0x4d8>)
    5b22:	4353      	muls	r3, r2
    5b24:	3308      	adds	r3, #8
    5b26:	001a      	movs	r2, r3
    5b28:	4b69      	ldr	r3, [pc, #420]	; (5cd0 <usart_process+0x4dc>)
    5b2a:	18d0      	adds	r0, r2, r3
    5b2c:	1dfb      	adds	r3, r7, #7
    5b2e:	781b      	ldrb	r3, [r3, #0]
    5b30:	1e5a      	subs	r2, r3, #1
    5b32:	0013      	movs	r3, r2
    5b34:	00db      	lsls	r3, r3, #3
    5b36:	189b      	adds	r3, r3, r2
    5b38:	019b      	lsls	r3, r3, #6
    5b3a:	3309      	adds	r3, #9
    5b3c:	33ff      	adds	r3, #255	; 0xff
    5b3e:	001a      	movs	r2, r3
    5b40:	4b64      	ldr	r3, [pc, #400]	; (5cd4 <usart_process+0x4e0>)
    5b42:	18d3      	adds	r3, r2, r3
    5b44:	1c59      	adds	r1, r3, #1
    5b46:	230e      	movs	r3, #14
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	881b      	ldrh	r3, [r3, #0]
    5b4c:	001a      	movs	r2, r3
    5b4e:	4b62      	ldr	r3, [pc, #392]	; (5cd8 <usart_process+0x4e4>)
    5b50:	4798      	blx	r3
					break;
    5b52:	46c0      	nop			; (mov r8, r8)
				}
			
				eth_sock[n_port].len[0]		= (size & 0xFF00) >> 8;
    5b54:	1dfb      	adds	r3, r7, #7
    5b56:	781b      	ldrb	r3, [r3, #0]
    5b58:	220e      	movs	r2, #14
    5b5a:	18ba      	adds	r2, r7, r2
    5b5c:	8812      	ldrh	r2, [r2, #0]
    5b5e:	0a12      	lsrs	r2, r2, #8
    5b60:	b292      	uxth	r2, r2
    5b62:	b2d0      	uxtb	r0, r2
    5b64:	4a5a      	ldr	r2, [pc, #360]	; (5cd0 <usart_process+0x4dc>)
    5b66:	4959      	ldr	r1, [pc, #356]	; (5ccc <usart_process+0x4d8>)
    5b68:	434b      	muls	r3, r1
    5b6a:	18d3      	adds	r3, r2, r3
    5b6c:	3306      	adds	r3, #6
    5b6e:	1c02      	adds	r2, r0, #0
    5b70:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].len[1]		=  size & 0x00FF;
    5b72:	1dfb      	adds	r3, r7, #7
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	220e      	movs	r2, #14
    5b78:	18ba      	adds	r2, r7, r2
    5b7a:	8812      	ldrh	r2, [r2, #0]
    5b7c:	b2d0      	uxtb	r0, r2
    5b7e:	4a54      	ldr	r2, [pc, #336]	; (5cd0 <usart_process+0x4dc>)
    5b80:	4952      	ldr	r1, [pc, #328]	; (5ccc <usart_process+0x4d8>)
    5b82:	434b      	muls	r3, r1
    5b84:	18d3      	adds	r3, r2, r3
    5b86:	3307      	adds	r3, #7
    5b88:	1c02      	adds	r2, r0, #0
    5b8a:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].w_status	= 1;
    5b8c:	1dfb      	adds	r3, r7, #7
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	4a4f      	ldr	r2, [pc, #316]	; (5cd0 <usart_process+0x4dc>)
    5b92:	4952      	ldr	r1, [pc, #328]	; (5cdc <usart_process+0x4e8>)
    5b94:	484d      	ldr	r0, [pc, #308]	; (5ccc <usart_process+0x4d8>)
    5b96:	4343      	muls	r3, r0
    5b98:	18d3      	adds	r3, r2, r3
    5b9a:	185b      	adds	r3, r3, r1
    5b9c:	2201      	movs	r2, #1
    5b9e:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt			= (port[n_port-1].tout_port*10)-port[n_port-1].time_port;
    5ba0:	1dfb      	adds	r3, r7, #7
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	1e5a      	subs	r2, r3, #1
    5ba6:	1dfb      	adds	r3, r7, #7
    5ba8:	781b      	ldrb	r3, [r3, #0]
    5baa:	1e59      	subs	r1, r3, #1
    5bac:	4c49      	ldr	r4, [pc, #292]	; (5cd4 <usart_process+0x4e0>)
    5bae:	2386      	movs	r3, #134	; 0x86
    5bb0:	0098      	lsls	r0, r3, #2
    5bb2:	000b      	movs	r3, r1
    5bb4:	00db      	lsls	r3, r3, #3
    5bb6:	185b      	adds	r3, r3, r1
    5bb8:	019b      	lsls	r3, r3, #6
    5bba:	18e3      	adds	r3, r4, r3
    5bbc:	181b      	adds	r3, r3, r0
    5bbe:	881b      	ldrh	r3, [r3, #0]
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	1c19      	adds	r1, r3, #0
    5bc4:	0089      	lsls	r1, r1, #2
    5bc6:	18cb      	adds	r3, r1, r3
    5bc8:	18db      	adds	r3, r3, r3
    5bca:	b298      	uxth	r0, r3
    5bcc:	1dfb      	adds	r3, r7, #7
    5bce:	781b      	ldrb	r3, [r3, #0]
    5bd0:	1e59      	subs	r1, r3, #1
    5bd2:	4d40      	ldr	r5, [pc, #256]	; (5cd4 <usart_process+0x4e0>)
    5bd4:	2388      	movs	r3, #136	; 0x88
    5bd6:	009c      	lsls	r4, r3, #2
    5bd8:	000b      	movs	r3, r1
    5bda:	00db      	lsls	r3, r3, #3
    5bdc:	185b      	adds	r3, r3, r1
    5bde:	019b      	lsls	r3, r3, #6
    5be0:	18eb      	adds	r3, r5, r3
    5be2:	191b      	adds	r3, r3, r4
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	b29b      	uxth	r3, r3
    5be8:	1ac3      	subs	r3, r0, r3
    5bea:	b29c      	uxth	r4, r3
    5bec:	4939      	ldr	r1, [pc, #228]	; (5cd4 <usart_process+0x4e0>)
    5bee:	483c      	ldr	r0, [pc, #240]	; (5ce0 <usart_process+0x4ec>)
    5bf0:	0013      	movs	r3, r2
    5bf2:	00db      	lsls	r3, r3, #3
    5bf4:	189b      	adds	r3, r3, r2
    5bf6:	019b      	lsls	r3, r3, #6
    5bf8:	18cb      	adds	r3, r1, r3
    5bfa:	181b      	adds	r3, r3, r0
    5bfc:	1c22      	adds	r2, r4, #0
    5bfe:	801a      	strh	r2, [r3, #0]
				port[n_port-1].stage		= RS485_WRITE;
    5c00:	1dfb      	adds	r3, r7, #7
    5c02:	781b      	ldrb	r3, [r3, #0]
    5c04:	1e5a      	subs	r2, r3, #1
    5c06:	4833      	ldr	r0, [pc, #204]	; (5cd4 <usart_process+0x4e0>)
    5c08:	2387      	movs	r3, #135	; 0x87
    5c0a:	0099      	lsls	r1, r3, #2
    5c0c:	0013      	movs	r3, r2
    5c0e:	00db      	lsls	r3, r3, #3
    5c10:	189b      	adds	r3, r3, r2
    5c12:	019b      	lsls	r3, r3, #6
    5c14:	18c3      	adds	r3, r0, r3
    5c16:	185b      	adds	r3, r3, r1
    5c18:	2200      	movs	r2, #0
    5c1a:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].r_status	= 0;
    5c1c:	1dfb      	adds	r3, r7, #7
    5c1e:	781b      	ldrb	r3, [r3, #0]
    5c20:	4a2b      	ldr	r2, [pc, #172]	; (5cd0 <usart_process+0x4dc>)
    5c22:	4930      	ldr	r1, [pc, #192]	; (5ce4 <usart_process+0x4f0>)
    5c24:	4829      	ldr	r0, [pc, #164]	; (5ccc <usart_process+0x4d8>)
    5c26:	4343      	muls	r3, r0
    5c28:	18d3      	adds	r3, r2, r3
    5c2a:	185b      	adds	r3, r3, r1
    5c2c:	2200      	movs	r2, #0
    5c2e:	701a      	strb	r2, [r3, #0]
				return;
    5c30:	e049      	b.n	5cc6 <usart_process+0x4d2>
			}
			if (port[n_port-1].time_port==0)
    5c32:	1dfb      	adds	r3, r7, #7
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	1e5a      	subs	r2, r3, #1
    5c38:	4826      	ldr	r0, [pc, #152]	; (5cd4 <usart_process+0x4e0>)
    5c3a:	2388      	movs	r3, #136	; 0x88
    5c3c:	0099      	lsls	r1, r3, #2
    5c3e:	0013      	movs	r3, r2
    5c40:	00db      	lsls	r3, r3, #3
    5c42:	189b      	adds	r3, r3, r2
    5c44:	019b      	lsls	r3, r3, #6
    5c46:	18c3      	adds	r3, r0, r3
    5c48:	185b      	adds	r3, r3, r1
    5c4a:	681b      	ldr	r3, [r3, #0]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d139      	bne.n	5cc4 <usart_process+0x4d0>
			{
				port[n_port-1].stage = RS485_WRITE;
    5c50:	1dfb      	adds	r3, r7, #7
    5c52:	781b      	ldrb	r3, [r3, #0]
    5c54:	1e5a      	subs	r2, r3, #1
    5c56:	481f      	ldr	r0, [pc, #124]	; (5cd4 <usart_process+0x4e0>)
    5c58:	2387      	movs	r3, #135	; 0x87
    5c5a:	0099      	lsls	r1, r3, #2
    5c5c:	0013      	movs	r3, r2
    5c5e:	00db      	lsls	r3, r3, #3
    5c60:	189b      	adds	r3, r3, r2
    5c62:	019b      	lsls	r3, r3, #6
    5c64:	18c3      	adds	r3, r0, r3
    5c66:	185b      	adds	r3, r3, r1
    5c68:	2200      	movs	r2, #0
    5c6a:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt 	 = 0;
    5c6c:	1dfb      	adds	r3, r7, #7
    5c6e:	781b      	ldrb	r3, [r3, #0]
    5c70:	1e5a      	subs	r2, r3, #1
    5c72:	4918      	ldr	r1, [pc, #96]	; (5cd4 <usart_process+0x4e0>)
    5c74:	481a      	ldr	r0, [pc, #104]	; (5ce0 <usart_process+0x4ec>)
    5c76:	0013      	movs	r3, r2
    5c78:	00db      	lsls	r3, r3, #3
    5c7a:	189b      	adds	r3, r3, r2
    5c7c:	019b      	lsls	r3, r3, #6
    5c7e:	18cb      	adds	r3, r1, r3
    5c80:	181b      	adds	r3, r3, r0
    5c82:	2200      	movs	r2, #0
    5c84:	801a      	strh	r2, [r3, #0]
				eth_sock[n_port].r_status = 0;
    5c86:	1dfb      	adds	r3, r7, #7
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	4a11      	ldr	r2, [pc, #68]	; (5cd0 <usart_process+0x4dc>)
    5c8c:	4915      	ldr	r1, [pc, #84]	; (5ce4 <usart_process+0x4f0>)
    5c8e:	480f      	ldr	r0, [pc, #60]	; (5ccc <usart_process+0x4d8>)
    5c90:	4343      	muls	r3, r0
    5c92:	18d3      	adds	r3, r2, r3
    5c94:	185b      	adds	r3, r3, r1
    5c96:	2200      	movs	r2, #0
    5c98:	701a      	strb	r2, [r3, #0]
			}
		return;
    5c9a:	e013      	b.n	5cc4 <usart_process+0x4d0>
		default:
			port[n_port-1].stage = RS485_WRITE;
    5c9c:	1dfb      	adds	r3, r7, #7
    5c9e:	781b      	ldrb	r3, [r3, #0]
    5ca0:	1e5a      	subs	r2, r3, #1
    5ca2:	480c      	ldr	r0, [pc, #48]	; (5cd4 <usart_process+0x4e0>)
    5ca4:	2387      	movs	r3, #135	; 0x87
    5ca6:	0099      	lsls	r1, r3, #2
    5ca8:	0013      	movs	r3, r2
    5caa:	00db      	lsls	r3, r3, #3
    5cac:	189b      	adds	r3, r3, r2
    5cae:	019b      	lsls	r3, r3, #6
    5cb0:	18c3      	adds	r3, r0, r3
    5cb2:	185b      	adds	r3, r3, r1
    5cb4:	2200      	movs	r2, #0
    5cb6:	701a      	strb	r2, [r3, #0]
		break;
    5cb8:	46c0      	nop			; (mov r8, r8)
    5cba:	e004      	b.n	5cc6 <usart_process+0x4d2>
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5cbc:	46c0      	nop			; (mov r8, r8)
    5cbe:	e002      	b.n	5cc6 <usart_process+0x4d2>
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5cc0:	46c0      	nop			; (mov r8, r8)
    5cc2:	e000      	b.n	5cc6 <usart_process+0x4d2>
		return;
    5cc4:	46c0      	nop			; (mov r8, r8)
	}
    5cc6:	46bd      	mov	sp, r7
    5cc8:	b004      	add	sp, #16
    5cca:	bdb0      	pop	{r4, r5, r7, pc}
    5ccc:	000005e5 	.word	0x000005e5
    5cd0:	200005cc 	.word	0x200005cc
    5cd4:	200031fc 	.word	0x200031fc
    5cd8:	0000c7e1 	.word	0x0000c7e1
    5cdc:	000005d2 	.word	0x000005d2
    5ce0:	0000021a 	.word	0x0000021a
    5ce4:	000005d1 	.word	0x000005d1

00005ce8 <crc16_ccit>:
#include "def.h"

WORD crc16_ccit(BYTE *buf,WORD size)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b084      	sub	sp, #16
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	000a      	movs	r2, r1
    5cf2:	1cbb      	adds	r3, r7, #2
    5cf4:	801a      	strh	r2, [r3, #0]
	WORD crc = 0xFFFF;
    5cf6:	230e      	movs	r3, #14
    5cf8:	18fb      	adds	r3, r7, r3
    5cfa:	2201      	movs	r2, #1
    5cfc:	4252      	negs	r2, r2
    5cfe:	801a      	strh	r2, [r3, #0]
	BYTE i;

	while (size--)
    5d00:	e037      	b.n	5d72 <crc16_ccit+0x8a>
	{
		crc ^= *buf++ << 8;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	1c5a      	adds	r2, r3, #1
    5d06:	607a      	str	r2, [r7, #4]
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	021b      	lsls	r3, r3, #8
    5d0c:	b21a      	sxth	r2, r3
    5d0e:	230e      	movs	r3, #14
    5d10:	18fb      	adds	r3, r7, r3
    5d12:	2100      	movs	r1, #0
    5d14:	5e5b      	ldrsh	r3, [r3, r1]
    5d16:	4053      	eors	r3, r2
    5d18:	b21a      	sxth	r2, r3
    5d1a:	230e      	movs	r3, #14
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++)
    5d20:	230d      	movs	r3, #13
    5d22:	18fb      	adds	r3, r7, r3
    5d24:	2200      	movs	r2, #0
    5d26:	701a      	strb	r2, [r3, #0]
    5d28:	e01e      	b.n	5d68 <crc16_ccit+0x80>
		crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
    5d2a:	230e      	movs	r3, #14
    5d2c:	18fb      	adds	r3, r7, r3
    5d2e:	2200      	movs	r2, #0
    5d30:	5e9b      	ldrsh	r3, [r3, r2]
    5d32:	2b00      	cmp	r3, #0
    5d34:	da09      	bge.n	5d4a <crc16_ccit+0x62>
    5d36:	230e      	movs	r3, #14
    5d38:	18fb      	adds	r3, r7, r3
    5d3a:	881b      	ldrh	r3, [r3, #0]
    5d3c:	005b      	lsls	r3, r3, #1
    5d3e:	b21b      	sxth	r3, r3
    5d40:	4a18      	ldr	r2, [pc, #96]	; (5da4 <crc16_ccit+0xbc>)
    5d42:	4053      	eors	r3, r2
    5d44:	b21b      	sxth	r3, r3
    5d46:	b29b      	uxth	r3, r3
    5d48:	e004      	b.n	5d54 <crc16_ccit+0x6c>
    5d4a:	230e      	movs	r3, #14
    5d4c:	18fb      	adds	r3, r7, r3
    5d4e:	881b      	ldrh	r3, [r3, #0]
    5d50:	18db      	adds	r3, r3, r3
    5d52:	b29b      	uxth	r3, r3
    5d54:	220e      	movs	r2, #14
    5d56:	18ba      	adds	r2, r7, r2
    5d58:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++)
    5d5a:	230d      	movs	r3, #13
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	781a      	ldrb	r2, [r3, #0]
    5d60:	230d      	movs	r3, #13
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	3201      	adds	r2, #1
    5d66:	701a      	strb	r2, [r3, #0]
    5d68:	230d      	movs	r3, #13
    5d6a:	18fb      	adds	r3, r7, r3
    5d6c:	781b      	ldrb	r3, [r3, #0]
    5d6e:	2b07      	cmp	r3, #7
    5d70:	d9db      	bls.n	5d2a <crc16_ccit+0x42>
	while (size--)
    5d72:	1cbb      	adds	r3, r7, #2
    5d74:	881b      	ldrh	r3, [r3, #0]
    5d76:	1cba      	adds	r2, r7, #2
    5d78:	1e59      	subs	r1, r3, #1
    5d7a:	8011      	strh	r1, [r2, #0]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d1c0      	bne.n	5d02 <crc16_ccit+0x1a>
	}
	return ((crc>>8) | (crc<<8));
    5d80:	230e      	movs	r3, #14
    5d82:	18fb      	adds	r3, r7, r3
    5d84:	881b      	ldrh	r3, [r3, #0]
    5d86:	0a1b      	lsrs	r3, r3, #8
    5d88:	b29b      	uxth	r3, r3
    5d8a:	b21a      	sxth	r2, r3
    5d8c:	230e      	movs	r3, #14
    5d8e:	18fb      	adds	r3, r7, r3
    5d90:	881b      	ldrh	r3, [r3, #0]
    5d92:	021b      	lsls	r3, r3, #8
    5d94:	b21b      	sxth	r3, r3
    5d96:	4313      	orrs	r3, r2
    5d98:	b21b      	sxth	r3, r3
    5d9a:	b29b      	uxth	r3, r3
}
    5d9c:	0018      	movs	r0, r3
    5d9e:	46bd      	mov	sp, r7
    5da0:	b004      	add	sp, #16
    5da2:	bd80      	pop	{r7, pc}
    5da4:	00001021 	.word	0x00001021

00005da8 <crc16_mbus>:

WORD crc16_mbus( BYTE *buf, WORD size )
{
    5da8:	b580      	push	{r7, lr}
    5daa:	b084      	sub	sp, #16
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
    5db0:	000a      	movs	r2, r1
    5db2:	1cbb      	adds	r3, r7, #2
    5db4:	801a      	strh	r2, [r3, #0]
	 WORD n;
	 uint8_t i;
	 WORD crc = 0xFFFF;
    5db6:	230a      	movs	r3, #10
    5db8:	18fb      	adds	r3, r7, r3
    5dba:	2201      	movs	r2, #1
    5dbc:	4252      	negs	r2, r2
    5dbe:	801a      	strh	r2, [r3, #0]
	 for ( n = 0; n < size; n++ )
    5dc0:	230e      	movs	r3, #14
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	2200      	movs	r2, #0
    5dc6:	801a      	strh	r2, [r3, #0]
    5dc8:	e042      	b.n	5e50 <crc16_mbus+0xa8>
	 {
		 crc ^= buf[n];
    5dca:	230e      	movs	r3, #14
    5dcc:	18fb      	adds	r3, r7, r3
    5dce:	881b      	ldrh	r3, [r3, #0]
    5dd0:	687a      	ldr	r2, [r7, #4]
    5dd2:	18d3      	adds	r3, r2, r3
    5dd4:	781b      	ldrb	r3, [r3, #0]
    5dd6:	b299      	uxth	r1, r3
    5dd8:	230a      	movs	r3, #10
    5dda:	18fb      	adds	r3, r7, r3
    5ddc:	220a      	movs	r2, #10
    5dde:	18ba      	adds	r2, r7, r2
    5de0:	8812      	ldrh	r2, [r2, #0]
    5de2:	404a      	eors	r2, r1
    5de4:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5de6:	230d      	movs	r3, #13
    5de8:	18fb      	adds	r3, r7, r3
    5dea:	2208      	movs	r2, #8
    5dec:	701a      	strb	r2, [r3, #0]
    5dee:	e023      	b.n	5e38 <crc16_mbus+0x90>
		 {
			 if ( crc & 0x0001 )
    5df0:	230a      	movs	r3, #10
    5df2:	18fb      	adds	r3, r7, r3
    5df4:	881b      	ldrh	r3, [r3, #0]
    5df6:	2201      	movs	r2, #1
    5df8:	4013      	ands	r3, r2
    5dfa:	d00f      	beq.n	5e1c <crc16_mbus+0x74>
			 {
				 crc >>= 1;
    5dfc:	230a      	movs	r3, #10
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	220a      	movs	r2, #10
    5e02:	18ba      	adds	r2, r7, r2
    5e04:	8812      	ldrh	r2, [r2, #0]
    5e06:	0852      	lsrs	r2, r2, #1
    5e08:	801a      	strh	r2, [r3, #0]
				 crc ^= 0xA001;
    5e0a:	230a      	movs	r3, #10
    5e0c:	18fb      	adds	r3, r7, r3
    5e0e:	220a      	movs	r2, #10
    5e10:	18ba      	adds	r2, r7, r2
    5e12:	8812      	ldrh	r2, [r2, #0]
    5e14:	4915      	ldr	r1, [pc, #84]	; (5e6c <crc16_mbus+0xc4>)
    5e16:	404a      	eors	r2, r1
    5e18:	801a      	strh	r2, [r3, #0]
    5e1a:	e006      	b.n	5e2a <crc16_mbus+0x82>
			 }
			 else
			 {
				 crc >>= 1;
    5e1c:	230a      	movs	r3, #10
    5e1e:	18fb      	adds	r3, r7, r3
    5e20:	220a      	movs	r2, #10
    5e22:	18ba      	adds	r2, r7, r2
    5e24:	8812      	ldrh	r2, [r2, #0]
    5e26:	0852      	lsrs	r2, r2, #1
    5e28:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e2a:	230d      	movs	r3, #13
    5e2c:	18fb      	adds	r3, r7, r3
    5e2e:	781a      	ldrb	r2, [r3, #0]
    5e30:	230d      	movs	r3, #13
    5e32:	18fb      	adds	r3, r7, r3
    5e34:	3a01      	subs	r2, #1
    5e36:	701a      	strb	r2, [r3, #0]
    5e38:	230d      	movs	r3, #13
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d1d6      	bne.n	5df0 <crc16_mbus+0x48>
	 for ( n = 0; n < size; n++ )
    5e42:	230e      	movs	r3, #14
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	881a      	ldrh	r2, [r3, #0]
    5e48:	230e      	movs	r3, #14
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	3201      	adds	r2, #1
    5e4e:	801a      	strh	r2, [r3, #0]
    5e50:	230e      	movs	r3, #14
    5e52:	18fa      	adds	r2, r7, r3
    5e54:	1cbb      	adds	r3, r7, #2
    5e56:	8812      	ldrh	r2, [r2, #0]
    5e58:	881b      	ldrh	r3, [r3, #0]
    5e5a:	429a      	cmp	r2, r3
    5e5c:	d3b5      	bcc.n	5dca <crc16_mbus+0x22>
			 }
		 }
	 }
	 return crc;
    5e5e:	230a      	movs	r3, #10
    5e60:	18fb      	adds	r3, r7, r3
    5e62:	881b      	ldrh	r3, [r3, #0]
}
    5e64:	0018      	movs	r0, r3
    5e66:	46bd      	mov	sp, r7
    5e68:	b004      	add	sp, #16
    5e6a:	bd80      	pop	{r7, pc}
    5e6c:	ffffa001 	.word	0xffffa001

00005e70 <crc32>:

uint_least32_t crc32(unsigned char *buf, size_t len)
{
    5e70:	b580      	push	{r7, lr}
    5e72:	4f4c      	ldr	r7, [pc, #304]	; (5fa4 <crc32+0x134>)
    5e74:	44bd      	add	sp, r7
    5e76:	af00      	add	r7, sp, #0
    5e78:	6078      	str	r0, [r7, #4]
    5e7a:	6039      	str	r1, [r7, #0]
	uint_least32_t crc_table[256];
	uint_least32_t crc; int i, j;
	
	for (i = 0; i < 256; i++)
    5e7c:	2300      	movs	r3, #0
    5e7e:	2282      	movs	r2, #130	; 0x82
    5e80:	00d2      	lsls	r2, r2, #3
    5e82:	18ba      	adds	r2, r7, r2
    5e84:	6013      	str	r3, [r2, #0]
    5e86:	e043      	b.n	5f10 <crc32+0xa0>
	{
		crc = i;
    5e88:	2382      	movs	r3, #130	; 0x82
    5e8a:	00db      	lsls	r3, r3, #3
    5e8c:	18fb      	adds	r3, r7, r3
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	4a45      	ldr	r2, [pc, #276]	; (5fa8 <crc32+0x138>)
    5e92:	18ba      	adds	r2, r7, r2
    5e94:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5e96:	2300      	movs	r3, #0
    5e98:	4a44      	ldr	r2, [pc, #272]	; (5fac <crc32+0x13c>)
    5e9a:	18ba      	adds	r2, r7, r2
    5e9c:	6013      	str	r3, [r2, #0]
    5e9e:	e01a      	b.n	5ed6 <crc32+0x66>
		crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
    5ea0:	4b41      	ldr	r3, [pc, #260]	; (5fa8 <crc32+0x138>)
    5ea2:	18fb      	adds	r3, r7, r3
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	2201      	movs	r2, #1
    5ea8:	4013      	ands	r3, r2
    5eaa:	d006      	beq.n	5eba <crc32+0x4a>
    5eac:	4b3e      	ldr	r3, [pc, #248]	; (5fa8 <crc32+0x138>)
    5eae:	18fb      	adds	r3, r7, r3
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	085b      	lsrs	r3, r3, #1
    5eb4:	4a3e      	ldr	r2, [pc, #248]	; (5fb0 <crc32+0x140>)
    5eb6:	4053      	eors	r3, r2
    5eb8:	e003      	b.n	5ec2 <crc32+0x52>
    5eba:	4b3b      	ldr	r3, [pc, #236]	; (5fa8 <crc32+0x138>)
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	681b      	ldr	r3, [r3, #0]
    5ec0:	085b      	lsrs	r3, r3, #1
    5ec2:	4a39      	ldr	r2, [pc, #228]	; (5fa8 <crc32+0x138>)
    5ec4:	18ba      	adds	r2, r7, r2
    5ec6:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5ec8:	4b38      	ldr	r3, [pc, #224]	; (5fac <crc32+0x13c>)
    5eca:	18fb      	adds	r3, r7, r3
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	3301      	adds	r3, #1
    5ed0:	4a36      	ldr	r2, [pc, #216]	; (5fac <crc32+0x13c>)
    5ed2:	18ba      	adds	r2, r7, r2
    5ed4:	6013      	str	r3, [r2, #0]
    5ed6:	4b35      	ldr	r3, [pc, #212]	; (5fac <crc32+0x13c>)
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	681b      	ldr	r3, [r3, #0]
    5edc:	2b07      	cmp	r3, #7
    5ede:	dddf      	ble.n	5ea0 <crc32+0x30>

		crc_table[i] = crc;
    5ee0:	4b34      	ldr	r3, [pc, #208]	; (5fb4 <crc32+0x144>)
    5ee2:	2283      	movs	r2, #131	; 0x83
    5ee4:	00d2      	lsls	r2, r2, #3
    5ee6:	4694      	mov	ip, r2
    5ee8:	44bc      	add	ip, r7
    5eea:	4463      	add	r3, ip
    5eec:	2282      	movs	r2, #130	; 0x82
    5eee:	00d2      	lsls	r2, r2, #3
    5ef0:	18ba      	adds	r2, r7, r2
    5ef2:	6812      	ldr	r2, [r2, #0]
    5ef4:	0092      	lsls	r2, r2, #2
    5ef6:	492c      	ldr	r1, [pc, #176]	; (5fa8 <crc32+0x138>)
    5ef8:	1879      	adds	r1, r7, r1
    5efa:	6809      	ldr	r1, [r1, #0]
    5efc:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 256; i++)
    5efe:	2382      	movs	r3, #130	; 0x82
    5f00:	00db      	lsls	r3, r3, #3
    5f02:	18fb      	adds	r3, r7, r3
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	3301      	adds	r3, #1
    5f08:	2282      	movs	r2, #130	; 0x82
    5f0a:	00d2      	lsls	r2, r2, #3
    5f0c:	18ba      	adds	r2, r7, r2
    5f0e:	6013      	str	r3, [r2, #0]
    5f10:	2382      	movs	r3, #130	; 0x82
    5f12:	00db      	lsls	r3, r3, #3
    5f14:	18fb      	adds	r3, r7, r3
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	2bff      	cmp	r3, #255	; 0xff
    5f1a:	ddb5      	ble.n	5e88 <crc32+0x18>
	};

	crc = 0xFFFFFFFFUL;
    5f1c:	2301      	movs	r3, #1
    5f1e:	425b      	negs	r3, r3
    5f20:	4a21      	ldr	r2, [pc, #132]	; (5fa8 <crc32+0x138>)
    5f22:	18ba      	adds	r2, r7, r2
    5f24:	6013      	str	r3, [r2, #0]
	

	
	while (len--)
    5f26:	e02d      	b.n	5f84 <crc32+0x114>
	{
		if(!(len % 32768)) 
    5f28:	683b      	ldr	r3, [r7, #0]
    5f2a:	045b      	lsls	r3, r3, #17
    5f2c:	0c5b      	lsrs	r3, r3, #17
    5f2e:	d10e      	bne.n	5f4e <crc32+0xde>
		{wdt_reset();}
    5f30:	4b21      	ldr	r3, [pc, #132]	; (5fb8 <crc32+0x148>)
    5f32:	799b      	ldrb	r3, [r3, #6]
    5f34:	07db      	lsls	r3, r3, #31
    5f36:	0fdb      	lsrs	r3, r3, #31
    5f38:	b2db      	uxtb	r3, r3
    5f3a:	2b01      	cmp	r3, #1
    5f3c:	d107      	bne.n	5f4e <crc32+0xde>
    5f3e:	4a1e      	ldr	r2, [pc, #120]	; (5fb8 <crc32+0x148>)
    5f40:	7993      	ldrb	r3, [r2, #6]
    5f42:	2101      	movs	r1, #1
    5f44:	430b      	orrs	r3, r1
    5f46:	7193      	strb	r3, [r2, #6]
    5f48:	4b1b      	ldr	r3, [pc, #108]	; (5fb8 <crc32+0x148>)
    5f4a:	22a5      	movs	r2, #165	; 0xa5
    5f4c:	721a      	strb	r2, [r3, #8]
		crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	1c5a      	adds	r2, r3, #1
    5f52:	607a      	str	r2, [r7, #4]
    5f54:	781b      	ldrb	r3, [r3, #0]
    5f56:	001a      	movs	r2, r3
    5f58:	4b13      	ldr	r3, [pc, #76]	; (5fa8 <crc32+0x138>)
    5f5a:	18fb      	adds	r3, r7, r3
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	4053      	eors	r3, r2
    5f60:	22ff      	movs	r2, #255	; 0xff
    5f62:	401a      	ands	r2, r3
    5f64:	4b13      	ldr	r3, [pc, #76]	; (5fb4 <crc32+0x144>)
    5f66:	2183      	movs	r1, #131	; 0x83
    5f68:	00c9      	lsls	r1, r1, #3
    5f6a:	468c      	mov	ip, r1
    5f6c:	44bc      	add	ip, r7
    5f6e:	4463      	add	r3, ip
    5f70:	0092      	lsls	r2, r2, #2
    5f72:	58d2      	ldr	r2, [r2, r3]
    5f74:	4b0c      	ldr	r3, [pc, #48]	; (5fa8 <crc32+0x138>)
    5f76:	18fb      	adds	r3, r7, r3
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	0a1b      	lsrs	r3, r3, #8
    5f7c:	4053      	eors	r3, r2
    5f7e:	4a0a      	ldr	r2, [pc, #40]	; (5fa8 <crc32+0x138>)
    5f80:	18ba      	adds	r2, r7, r2
    5f82:	6013      	str	r3, [r2, #0]
	while (len--)
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	1e5a      	subs	r2, r3, #1
    5f88:	603a      	str	r2, [r7, #0]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d1cc      	bne.n	5f28 <crc32+0xb8>
	}
	

	return crc ^ 0xFFFFFFFFUL;
    5f8e:	4b06      	ldr	r3, [pc, #24]	; (5fa8 <crc32+0x138>)
    5f90:	18fb      	adds	r3, r7, r3
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	43db      	mvns	r3, r3
    5f96:	0018      	movs	r0, r3
    5f98:	46bd      	mov	sp, r7
    5f9a:	2383      	movs	r3, #131	; 0x83
    5f9c:	00db      	lsls	r3, r3, #3
    5f9e:	449d      	add	sp, r3
    5fa0:	bd80      	pop	{r7, pc}
    5fa2:	46c0      	nop			; (mov r8, r8)
    5fa4:	fffffbe8 	.word	0xfffffbe8
    5fa8:	00000414 	.word	0x00000414
    5fac:	0000040c 	.word	0x0000040c
    5fb0:	edb88320 	.word	0xedb88320
    5fb4:	fffffbf4 	.word	0xfffffbf4
    5fb8:	40001000 	.word	0x40001000

00005fbc <crypted>:
//#define admin 		"admin"
#define CRYPTED 	1
#define DECRYPTED 	0

void crypted(char* str)
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	6078      	str	r0, [r7, #4]
	move(str, CRYPTED);
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	2101      	movs	r1, #1
    5fc8:	0018      	movs	r0, r3
    5fca:	f000 f8f7 	bl	61bc <move>
	wave(str, CRYPTED);
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	2101      	movs	r1, #1
    5fd2:	0018      	movs	r0, r3
    5fd4:	f000 f820 	bl	6018 <wave>
	shell_game(str,CRYPTED);
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	2101      	movs	r1, #1
    5fdc:	0018      	movs	r0, r3
    5fde:	f000 f876 	bl	60ce <shell_game>
}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	46bd      	mov	sp, r7
    5fe6:	b002      	add	sp, #8
    5fe8:	bd80      	pop	{r7, pc}

00005fea <decrypted>:

void decrypted(char* str)
{
    5fea:	b580      	push	{r7, lr}
    5fec:	b082      	sub	sp, #8
    5fee:	af00      	add	r7, sp, #0
    5ff0:	6078      	str	r0, [r7, #4]
	shell_game(str,DECRYPTED);
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	2100      	movs	r1, #0
    5ff6:	0018      	movs	r0, r3
    5ff8:	f000 f869 	bl	60ce <shell_game>
	wave(str, DECRYPTED);
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	2100      	movs	r1, #0
    6000:	0018      	movs	r0, r3
    6002:	f000 f809 	bl	6018 <wave>
	move(str, DECRYPTED);
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	2100      	movs	r1, #0
    600a:	0018      	movs	r0, r3
    600c:	f000 f8d6 	bl	61bc <move>
}
    6010:	46c0      	nop			; (mov r8, r8)
    6012:	46bd      	mov	sp, r7
    6014:	b002      	add	sp, #8
    6016:	bd80      	pop	{r7, pc}

00006018 <wave>:

void wave(char* ptr, char mode)
{
    6018:	b580      	push	{r7, lr}
    601a:	b084      	sub	sp, #16
    601c:	af00      	add	r7, sp, #0
    601e:	6078      	str	r0, [r7, #4]
    6020:	000a      	movs	r2, r1
    6022:	1cfb      	adds	r3, r7, #3
    6024:	701a      	strb	r2, [r3, #0]
	char plus;
	char sign = -1;
    6026:	230f      	movs	r3, #15
    6028:	18fb      	adds	r3, r7, r3
    602a:	22ff      	movs	r2, #255	; 0xff
    602c:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED) {sign = 1;}
    602e:	1cfb      	adds	r3, r7, #3
    6030:	781b      	ldrb	r3, [r3, #0]
    6032:	2b01      	cmp	r3, #1
    6034:	d103      	bne.n	603e <wave+0x26>
    6036:	230f      	movs	r3, #15
    6038:	18fb      	adds	r3, r7, r3
    603a:	2201      	movs	r2, #1
    603c:	701a      	strb	r2, [r3, #0]
	for (char i = 0; i < 64; i++)
    603e:	230e      	movs	r3, #14
    6040:	18fb      	adds	r3, r7, r3
    6042:	2200      	movs	r2, #0
    6044:	701a      	strb	r2, [r3, #0]
    6046:	e039      	b.n	60bc <wave+0xa4>
	{
		char step = i % 2;
    6048:	230d      	movs	r3, #13
    604a:	18fb      	adds	r3, r7, r3
    604c:	220e      	movs	r2, #14
    604e:	18ba      	adds	r2, r7, r2
    6050:	7812      	ldrb	r2, [r2, #0]
    6052:	2101      	movs	r1, #1
    6054:	400a      	ands	r2, r1
    6056:	701a      	strb	r2, [r3, #0]
		plus = ((63 - i) / 2) * sign;
    6058:	230e      	movs	r3, #14
    605a:	18fb      	adds	r3, r7, r3
    605c:	781b      	ldrb	r3, [r3, #0]
    605e:	223f      	movs	r2, #63	; 0x3f
    6060:	1ad3      	subs	r3, r2, r3
    6062:	d500      	bpl.n	6066 <wave+0x4e>
    6064:	3301      	adds	r3, #1
    6066:	105b      	asrs	r3, r3, #1
    6068:	b2da      	uxtb	r2, r3
    606a:	230c      	movs	r3, #12
    606c:	18fb      	adds	r3, r7, r3
    606e:	210f      	movs	r1, #15
    6070:	1879      	adds	r1, r7, r1
    6072:	7809      	ldrb	r1, [r1, #0]
    6074:	434a      	muls	r2, r1
    6076:	701a      	strb	r2, [r3, #0]
		if (step) { *ptr -= plus; } else {*ptr += plus;}
    6078:	230d      	movs	r3, #13
    607a:	18fb      	adds	r3, r7, r3
    607c:	781b      	ldrb	r3, [r3, #0]
    607e:	2b00      	cmp	r3, #0
    6080:	d009      	beq.n	6096 <wave+0x7e>
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	781a      	ldrb	r2, [r3, #0]
    6086:	230c      	movs	r3, #12
    6088:	18fb      	adds	r3, r7, r3
    608a:	781b      	ldrb	r3, [r3, #0]
    608c:	1ad3      	subs	r3, r2, r3
    608e:	b2da      	uxtb	r2, r3
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	701a      	strb	r2, [r3, #0]
    6094:	e008      	b.n	60a8 <wave+0x90>
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	781a      	ldrb	r2, [r3, #0]
    609a:	230c      	movs	r3, #12
    609c:	18fb      	adds	r3, r7, r3
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	18d3      	adds	r3, r2, r3
    60a2:	b2da      	uxtb	r2, r3
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	701a      	strb	r2, [r3, #0]
		ptr++;
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	3301      	adds	r3, #1
    60ac:	607b      	str	r3, [r7, #4]
	for (char i = 0; i < 64; i++)
    60ae:	230e      	movs	r3, #14
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	781a      	ldrb	r2, [r3, #0]
    60b4:	230e      	movs	r3, #14
    60b6:	18fb      	adds	r3, r7, r3
    60b8:	3201      	adds	r2, #1
    60ba:	701a      	strb	r2, [r3, #0]
    60bc:	230e      	movs	r3, #14
    60be:	18fb      	adds	r3, r7, r3
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	2b3f      	cmp	r3, #63	; 0x3f
    60c4:	d9c0      	bls.n	6048 <wave+0x30>
	}
}
    60c6:	46c0      	nop			; (mov r8, r8)
    60c8:	46bd      	mov	sp, r7
    60ca:	b004      	add	sp, #16
    60cc:	bd80      	pop	{r7, pc}

000060ce <shell_game>:

void shell_game(char* ptr, char mode)
{
    60ce:	b580      	push	{r7, lr}
    60d0:	b098      	sub	sp, #96	; 0x60
    60d2:	af00      	add	r7, sp, #0
    60d4:	6078      	str	r0, [r7, #4]
    60d6:	000a      	movs	r2, r1
    60d8:	1cfb      	adds	r3, r7, #3
    60da:	701a      	strb	r2, [r3, #0]
	char buf[64];
	char region[8];
	char lap = 0;
    60dc:	235f      	movs	r3, #95	; 0x5f
    60de:	18fb      	adds	r3, r7, r3
    60e0:	2200      	movs	r2, #0
    60e2:	701a      	strb	r2, [r3, #0]
	char cursour = 0;
    60e4:	235e      	movs	r3, #94	; 0x5e
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	2200      	movs	r2, #0
    60ea:	701a      	strb	r2, [r3, #0]
	char* debug = ptr;
    60ec:	687b      	ldr	r3, [r7, #4]
    60ee:	653b      	str	r3, [r7, #80]	; 0x50
	memcpy(buf, ptr, 64);
    60f0:	2310      	movs	r3, #16
    60f2:	18fa      	adds	r2, r7, r3
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	0010      	movs	r0, r2
    60f8:	0019      	movs	r1, r3
    60fa:	2340      	movs	r3, #64	; 0x40
    60fc:	001a      	movs	r2, r3
    60fe:	4b2e      	ldr	r3, [pc, #184]	; (61b8 <shell_game+0xea>)
    6100:	4798      	blx	r3
	if (mode == CRYPTED) {mode = 3;} else {mode = 1;}
    6102:	1cfb      	adds	r3, r7, #3
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	2b01      	cmp	r3, #1
    6108:	d103      	bne.n	6112 <shell_game+0x44>
    610a:	1cfb      	adds	r3, r7, #3
    610c:	2203      	movs	r2, #3
    610e:	701a      	strb	r2, [r3, #0]
    6110:	e002      	b.n	6118 <shell_game+0x4a>
    6112:	1cfb      	adds	r3, r7, #3
    6114:	2201      	movs	r2, #1
    6116:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < mode; j++)
    6118:	2300      	movs	r3, #0
    611a:	65bb      	str	r3, [r7, #88]	; 0x58
    611c:	e042      	b.n	61a4 <shell_game+0xd6>
	{
		for (int i = 0; i < 63 ; i++)
    611e:	2300      	movs	r3, #0
    6120:	657b      	str	r3, [r7, #84]	; 0x54
    6122:	e026      	b.n	6172 <shell_game+0xa4>
		{
			if (cursour > 63)	{lap++; cursour = lap;}
    6124:	235e      	movs	r3, #94	; 0x5e
    6126:	18fb      	adds	r3, r7, r3
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	2b3f      	cmp	r3, #63	; 0x3f
    612c:	d90c      	bls.n	6148 <shell_game+0x7a>
    612e:	235f      	movs	r3, #95	; 0x5f
    6130:	18fb      	adds	r3, r7, r3
    6132:	781a      	ldrb	r2, [r3, #0]
    6134:	235f      	movs	r3, #95	; 0x5f
    6136:	18fb      	adds	r3, r7, r3
    6138:	3201      	adds	r2, #1
    613a:	701a      	strb	r2, [r3, #0]
    613c:	235e      	movs	r3, #94	; 0x5e
    613e:	18fb      	adds	r3, r7, r3
    6140:	225f      	movs	r2, #95	; 0x5f
    6142:	18ba      	adds	r2, r7, r2
    6144:	7812      	ldrb	r2, [r2, #0]
    6146:	701a      	strb	r2, [r3, #0]
			*ptr = buf[cursour];
    6148:	235e      	movs	r3, #94	; 0x5e
    614a:	18fb      	adds	r3, r7, r3
    614c:	781b      	ldrb	r3, [r3, #0]
    614e:	2210      	movs	r2, #16
    6150:	18ba      	adds	r2, r7, r2
    6152:	5cd2      	ldrb	r2, [r2, r3]
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	701a      	strb	r2, [r3, #0]
			ptr++;
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	3301      	adds	r3, #1
    615c:	607b      	str	r3, [r7, #4]
			cursour += 8;
    615e:	235e      	movs	r3, #94	; 0x5e
    6160:	18fb      	adds	r3, r7, r3
    6162:	225e      	movs	r2, #94	; 0x5e
    6164:	18ba      	adds	r2, r7, r2
    6166:	7812      	ldrb	r2, [r2, #0]
    6168:	3208      	adds	r2, #8
    616a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 63 ; i++)
    616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    616e:	3301      	adds	r3, #1
    6170:	657b      	str	r3, [r7, #84]	; 0x54
    6172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6174:	2b3e      	cmp	r3, #62	; 0x3e
    6176:	ddd5      	ble.n	6124 <shell_game+0x56>
		}
		lap = 0;
    6178:	235f      	movs	r3, #95	; 0x5f
    617a:	18fb      	adds	r3, r7, r3
    617c:	2200      	movs	r2, #0
    617e:	701a      	strb	r2, [r3, #0]
		cursour = 0;
    6180:	235e      	movs	r3, #94	; 0x5e
    6182:	18fb      	adds	r3, r7, r3
    6184:	2200      	movs	r2, #0
    6186:	701a      	strb	r2, [r3, #0]
		ptr = debug;
    6188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    618a:	607b      	str	r3, [r7, #4]
		memcpy(buf, ptr, 64);
    618c:	2310      	movs	r3, #16
    618e:	18fa      	adds	r2, r7, r3
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	0010      	movs	r0, r2
    6194:	0019      	movs	r1, r3
    6196:	2340      	movs	r3, #64	; 0x40
    6198:	001a      	movs	r2, r3
    619a:	4b07      	ldr	r3, [pc, #28]	; (61b8 <shell_game+0xea>)
    619c:	4798      	blx	r3
	for (int j = 0; j < mode; j++)
    619e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61a0:	3301      	adds	r3, #1
    61a2:	65bb      	str	r3, [r7, #88]	; 0x58
    61a4:	1cfb      	adds	r3, r7, #3
    61a6:	781a      	ldrb	r2, [r3, #0]
    61a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61aa:	429a      	cmp	r2, r3
    61ac:	dcb7      	bgt.n	611e <shell_game+0x50>
	}
}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	46bd      	mov	sp, r7
    61b2:	b018      	add	sp, #96	; 0x60
    61b4:	bd80      	pop	{r7, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	0000c7e1 	.word	0x0000c7e1

000061bc <move>:

void move(char* ptr, char mode)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b084      	sub	sp, #16
    61c0:	af00      	add	r7, sp, #0
    61c2:	6078      	str	r0, [r7, #4]
    61c4:	000a      	movs	r2, r1
    61c6:	1cfb      	adds	r3, r7, #3
    61c8:	701a      	strb	r2, [r3, #0]
	char sign = - 1;
    61ca:	230f      	movs	r3, #15
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	22ff      	movs	r2, #255	; 0xff
    61d0:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED){sign = 1;}
    61d2:	1cfb      	adds	r3, r7, #3
    61d4:	781b      	ldrb	r3, [r3, #0]
    61d6:	2b01      	cmp	r3, #1
    61d8:	d103      	bne.n	61e2 <move+0x26>
    61da:	230f      	movs	r3, #15
    61dc:	18fb      	adds	r3, r7, r3
    61de:	2201      	movs	r2, #1
    61e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    61e2:	2300      	movs	r3, #0
    61e4:	60bb      	str	r3, [r7, #8]
    61e6:	e00e      	b.n	6206 <move+0x4a>
	{
		*ptr += 68 * sign;
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	781a      	ldrb	r2, [r3, #0]
    61ec:	230f      	movs	r3, #15
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	2144      	movs	r1, #68	; 0x44
    61f4:	434b      	muls	r3, r1
    61f6:	b2db      	uxtb	r3, r3
    61f8:	18d3      	adds	r3, r2, r3
    61fa:	b2da      	uxtb	r2, r3
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    6200:	68bb      	ldr	r3, [r7, #8]
    6202:	3301      	adds	r3, #1
    6204:	60bb      	str	r3, [r7, #8]
    6206:	68bb      	ldr	r3, [r7, #8]
    6208:	2b3e      	cmp	r3, #62	; 0x3e
    620a:	dded      	ble.n	61e8 <move+0x2c>
	}	
    620c:	46c0      	nop			; (mov r8, r8)
    620e:	46bd      	mov	sp, r7
    6210:	b004      	add	sp, #16
    6212:	bd80      	pop	{r7, pc}

00006214 <eth_init>:
#include "def.h"

ETH_HDR eth_sock[MAX_SOCKETS_CNT];

void eth_init(void)
{
    6214:	b5b0      	push	{r4, r5, r7, lr}
    6216:	b082      	sub	sp, #8
    6218:	af00      	add	r7, sp, #0
	w5500_init_reg();
    621a:	4b3f      	ldr	r3, [pc, #252]	; (6318 <eth_init+0x104>)
    621c:	4798      	blx	r3
	
	//common socket for settings
	if(socket_init(SOCKET_0,cfg_1.com_network.src_port,UDP)) {err_dword.common_sock = 1;}
    621e:	4b3f      	ldr	r3, [pc, #252]	; (631c <eth_init+0x108>)
    6220:	2226      	movs	r2, #38	; 0x26
    6222:	5c9a      	ldrb	r2, [r3, r2]
    6224:	2127      	movs	r1, #39	; 0x27
    6226:	5c5b      	ldrb	r3, [r3, r1]
    6228:	021b      	lsls	r3, r3, #8
    622a:	4313      	orrs	r3, r2
    622c:	b29b      	uxth	r3, r3
    622e:	2201      	movs	r2, #1
    6230:	0019      	movs	r1, r3
    6232:	2000      	movs	r0, #0
    6234:	4b3a      	ldr	r3, [pc, #232]	; (6320 <eth_init+0x10c>)
    6236:	4798      	blx	r3
    6238:	1e03      	subs	r3, r0, #0
    623a:	d004      	beq.n	6246 <eth_init+0x32>
    623c:	4b39      	ldr	r3, [pc, #228]	; (6324 <eth_init+0x110>)
    623e:	781a      	ldrb	r2, [r3, #0]
    6240:	2104      	movs	r1, #4
    6242:	430a      	orrs	r2, r1
    6244:	701a      	strb	r2, [r3, #0]

	//port socket
	for(BYTE i=0; i<4; i++)
    6246:	1dfb      	adds	r3, r7, #7
    6248:	2200      	movs	r2, #0
    624a:	701a      	strb	r2, [r3, #0]
    624c:	e05b      	b.n	6306 <eth_init+0xf2>
	{
		if(cfg_1.sock_rs485[i].en==FALSE) {i++; continue;} 
    624e:	1dfb      	adds	r3, r7, #7
    6250:	781a      	ldrb	r2, [r3, #0]
    6252:	4932      	ldr	r1, [pc, #200]	; (631c <eth_init+0x108>)
    6254:	2034      	movs	r0, #52	; 0x34
    6256:	0013      	movs	r3, r2
    6258:	005b      	lsls	r3, r3, #1
    625a:	189b      	adds	r3, r3, r2
    625c:	009b      	lsls	r3, r3, #2
    625e:	189b      	adds	r3, r3, r2
    6260:	18cb      	adds	r3, r1, r3
    6262:	181b      	adds	r3, r3, r0
    6264:	781b      	ldrb	r3, [r3, #0]
    6266:	2b00      	cmp	r3, #0
    6268:	d105      	bne.n	6276 <eth_init+0x62>
    626a:	1dfb      	adds	r3, r7, #7
    626c:	781a      	ldrb	r2, [r3, #0]
    626e:	1dfb      	adds	r3, r7, #7
    6270:	3201      	adds	r2, #1
    6272:	701a      	strb	r2, [r3, #0]
    6274:	e042      	b.n	62fc <eth_init+0xe8>
		if(socket_init(i+1,cfg_1.sock_rs485[i].src_port,cfg_1.sock_rs485[i].mode)) {err_dword.socket += (1 << i);}
    6276:	1dfb      	adds	r3, r7, #7
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	3301      	adds	r3, #1
    627c:	b2dc      	uxtb	r4, r3
    627e:	1dfb      	adds	r3, r7, #7
    6280:	781a      	ldrb	r2, [r3, #0]
    6282:	4926      	ldr	r1, [pc, #152]	; (631c <eth_init+0x108>)
    6284:	0013      	movs	r3, r2
    6286:	005b      	lsls	r3, r3, #1
    6288:	189b      	adds	r3, r3, r2
    628a:	009b      	lsls	r3, r3, #2
    628c:	189b      	adds	r3, r3, r2
    628e:	18cb      	adds	r3, r1, r3
    6290:	3330      	adds	r3, #48	; 0x30
    6292:	79da      	ldrb	r2, [r3, #7]
    6294:	7a1b      	ldrb	r3, [r3, #8]
    6296:	021b      	lsls	r3, r3, #8
    6298:	4313      	orrs	r3, r2
    629a:	b29d      	uxth	r5, r3
    629c:	1dfb      	adds	r3, r7, #7
    629e:	781a      	ldrb	r2, [r3, #0]
    62a0:	491e      	ldr	r1, [pc, #120]	; (631c <eth_init+0x108>)
    62a2:	2035      	movs	r0, #53	; 0x35
    62a4:	0013      	movs	r3, r2
    62a6:	005b      	lsls	r3, r3, #1
    62a8:	189b      	adds	r3, r3, r2
    62aa:	009b      	lsls	r3, r3, #2
    62ac:	189b      	adds	r3, r3, r2
    62ae:	18cb      	adds	r3, r1, r3
    62b0:	181b      	adds	r3, r3, r0
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	001a      	movs	r2, r3
    62b6:	0029      	movs	r1, r5
    62b8:	0020      	movs	r0, r4
    62ba:	4b19      	ldr	r3, [pc, #100]	; (6320 <eth_init+0x10c>)
    62bc:	4798      	blx	r3
    62be:	1e03      	subs	r3, r0, #0
    62c0:	d01c      	beq.n	62fc <eth_init+0xe8>
    62c2:	4b18      	ldr	r3, [pc, #96]	; (6324 <eth_init+0x110>)
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	065b      	lsls	r3, r3, #25
    62c8:	0f1b      	lsrs	r3, r3, #28
    62ca:	b2db      	uxtb	r3, r3
    62cc:	0019      	movs	r1, r3
    62ce:	1dfb      	adds	r3, r7, #7
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	2201      	movs	r2, #1
    62d4:	409a      	lsls	r2, r3
    62d6:	0013      	movs	r3, r2
    62d8:	b2db      	uxtb	r3, r3
    62da:	18cb      	adds	r3, r1, r3
    62dc:	b2db      	uxtb	r3, r3
    62de:	1c1a      	adds	r2, r3, #0
    62e0:	230f      	movs	r3, #15
    62e2:	4013      	ands	r3, r2
    62e4:	b2da      	uxtb	r2, r3
    62e6:	4b0f      	ldr	r3, [pc, #60]	; (6324 <eth_init+0x110>)
    62e8:	210f      	movs	r1, #15
    62ea:	400a      	ands	r2, r1
    62ec:	00d0      	lsls	r0, r2, #3
    62ee:	781a      	ldrb	r2, [r3, #0]
    62f0:	2178      	movs	r1, #120	; 0x78
    62f2:	438a      	bics	r2, r1
    62f4:	1c11      	adds	r1, r2, #0
    62f6:	1c02      	adds	r2, r0, #0
    62f8:	430a      	orrs	r2, r1
    62fa:	701a      	strb	r2, [r3, #0]
	for(BYTE i=0; i<4; i++)
    62fc:	1dfb      	adds	r3, r7, #7
    62fe:	781a      	ldrb	r2, [r3, #0]
    6300:	1dfb      	adds	r3, r7, #7
    6302:	3201      	adds	r2, #1
    6304:	701a      	strb	r2, [r3, #0]
    6306:	1dfb      	adds	r3, r7, #7
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	2b03      	cmp	r3, #3
    630c:	d99f      	bls.n	624e <eth_init+0x3a>
	}
}
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	46bd      	mov	sp, r7
    6312:	b002      	add	sp, #8
    6314:	bdb0      	pop	{r4, r5, r7, pc}
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	00009671 	.word	0x00009671
    631c:	20003dc4 	.word	0x20003dc4
    6320:	0000738d 	.word	0x0000738d
    6324:	20002550 	.word	0x20002550

00006328 <eth_process>:

void eth_process(void)
{
    6328:	b590      	push	{r4, r7, lr}
    632a:	b083      	sub	sp, #12
    632c:	af00      	add	r7, sp, #0
	static BYTE eth_st=0;
	WORD rtrn = 0;
    632e:	1dbb      	adds	r3, r7, #6
    6330:	2200      	movs	r2, #0
    6332:	801a      	strh	r2, [r3, #0]
	
	switch(eth_st)
    6334:	4b40      	ldr	r3, [pc, #256]	; (6438 <eth_process+0x110>)
    6336:	781b      	ldrb	r3, [r3, #0]
    6338:	2b01      	cmp	r3, #1
    633a:	d038      	beq.n	63ae <eth_process+0x86>
    633c:	2b02      	cmp	r3, #2
    633e:	d059      	beq.n	63f4 <eth_process+0xcc>
    6340:	2b00      	cmp	r3, #0
    6342:	d000      	beq.n	6346 <eth_process+0x1e>
    6344:	e069      	b.n	641a <eth_process+0xf2>
	{
		case CHECK:				
			rtrn = check_data_wr_process();	
    6346:	f000 f92d 	bl	65a4 <check_data_wr_process>
    634a:	0003      	movs	r3, r0
    634c:	001a      	movs	r2, r3
    634e:	1dbb      	adds	r3, r7, #6
    6350:	801a      	strh	r2, [r3, #0]
			if(rtrn != NO_SOKET)								
    6352:	1dbb      	adds	r3, r7, #6
    6354:	881b      	ldrh	r3, [r3, #0]
    6356:	2b6d      	cmp	r3, #109	; 0x6d
    6358:	d021      	beq.n	639e <eth_process+0x76>
			{
				eth_st					= WRITE_PROCESS;
    635a:	4b37      	ldr	r3, [pc, #220]	; (6438 <eth_process+0x110>)
    635c:	2202      	movs	r2, #2
    635e:	701a      	strb	r2, [r3, #0]
				w5500_mode.mode_op		= MODE_OP_WRITE_UDP;
    6360:	4b36      	ldr	r3, [pc, #216]	; (643c <eth_process+0x114>)
    6362:	2203      	movs	r2, #3
    6364:	701a      	strb	r2, [r3, #0]
				w5500_mode.numb_socket	= rtrn;
    6366:	1dbb      	adds	r3, r7, #6
    6368:	881b      	ldrh	r3, [r3, #0]
    636a:	b2da      	uxtb	r2, r3
    636c:	4b33      	ldr	r3, [pc, #204]	; (643c <eth_process+0x114>)
    636e:	705a      	strb	r2, [r3, #1]
				switch(rtrn)
    6370:	1dbb      	adds	r3, r7, #6
    6372:	881b      	ldrh	r3, [r3, #0]
    6374:	2b00      	cmp	r3, #0
    6376:	d055      	beq.n	6424 <eth_process+0xfc>
				{
					case COMMON_SOCK_VAL:																						return;
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    6378:	1dbb      	adds	r3, r7, #6
    637a:	881b      	ldrh	r3, [r3, #0]
    637c:	1e5a      	subs	r2, r3, #1
    637e:	4930      	ldr	r1, [pc, #192]	; (6440 <eth_process+0x118>)
    6380:	2035      	movs	r0, #53	; 0x35
    6382:	0013      	movs	r3, r2
    6384:	005b      	lsls	r3, r3, #1
    6386:	189b      	adds	r3, r3, r2
    6388:	009b      	lsls	r3, r3, #2
    638a:	189b      	adds	r3, r3, r2
    638c:	18cb      	adds	r3, r1, r3
    638e:	181b      	adds	r3, r3, r0
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	2b02      	cmp	r3, #2
    6394:	d148      	bne.n	6428 <eth_process+0x100>
    6396:	4b29      	ldr	r3, [pc, #164]	; (643c <eth_process+0x114>)
    6398:	2205      	movs	r2, #5
    639a:	701a      	strb	r2, [r3, #0]
    639c:	e044      	b.n	6428 <eth_process+0x100>
				} 
			}

			check_sockets_process((BYTE*)&w5500_mode);//select sockets for read			
    639e:	4b27      	ldr	r3, [pc, #156]	; (643c <eth_process+0x114>)
    63a0:	0018      	movs	r0, r3
    63a2:	f000 f851 	bl	6448 <check_sockets_process>
			eth_st = READ_PROCESS;
    63a6:	4b24      	ldr	r3, [pc, #144]	; (6438 <eth_process+0x110>)
    63a8:	2201      	movs	r2, #1
    63aa:	701a      	strb	r2, [r3, #0]
		break;
    63ac:	e041      	b.n	6432 <eth_process+0x10a>
		case READ_PROCESS:
			rtrn = w5500_process (w5500_mode.mode_op,w5500_mode.numb_socket);
    63ae:	4b23      	ldr	r3, [pc, #140]	; (643c <eth_process+0x114>)
    63b0:	781a      	ldrb	r2, [r3, #0]
    63b2:	4b22      	ldr	r3, [pc, #136]	; (643c <eth_process+0x114>)
    63b4:	785b      	ldrb	r3, [r3, #1]
    63b6:	1dbc      	adds	r4, r7, #6
    63b8:	0019      	movs	r1, r3
    63ba:	0010      	movs	r0, r2
    63bc:	4b21      	ldr	r3, [pc, #132]	; (6444 <eth_process+0x11c>)
    63be:	4798      	blx	r3
    63c0:	0003      	movs	r3, r0
    63c2:	8023      	strh	r3, [r4, #0]
			if(rtrn == 2)	{eth_st=0;break;}
    63c4:	1dbb      	adds	r3, r7, #6
    63c6:	881b      	ldrh	r3, [r3, #0]
    63c8:	2b02      	cmp	r3, #2
    63ca:	d103      	bne.n	63d4 <eth_process+0xac>
    63cc:	4b1a      	ldr	r3, [pc, #104]	; (6438 <eth_process+0x110>)
    63ce:	2200      	movs	r2, #0
    63d0:	701a      	strb	r2, [r3, #0]
    63d2:	e02e      	b.n	6432 <eth_process+0x10a>
			if(rtrn)		{eth_parse(w5500_mode.numb_socket,rtrn); eth_st=0;}
    63d4:	1dbb      	adds	r3, r7, #6
    63d6:	881b      	ldrh	r3, [r3, #0]
    63d8:	2b00      	cmp	r3, #0
    63da:	d027      	beq.n	642c <eth_process+0x104>
    63dc:	4b17      	ldr	r3, [pc, #92]	; (643c <eth_process+0x114>)
    63de:	785a      	ldrb	r2, [r3, #1]
    63e0:	1dbb      	adds	r3, r7, #6
    63e2:	881b      	ldrh	r3, [r3, #0]
    63e4:	0019      	movs	r1, r3
    63e6:	0010      	movs	r0, r2
    63e8:	f000 f86e 	bl	64c8 <eth_parse>
    63ec:	4b12      	ldr	r3, [pc, #72]	; (6438 <eth_process+0x110>)
    63ee:	2200      	movs	r2, #0
    63f0:	701a      	strb	r2, [r3, #0]
		break;
    63f2:	e01b      	b.n	642c <eth_process+0x104>
		case WRITE_PROCESS:
			rtrn = w5500_process(w5500_mode.mode_op,w5500_mode.numb_socket);
    63f4:	4b11      	ldr	r3, [pc, #68]	; (643c <eth_process+0x114>)
    63f6:	781a      	ldrb	r2, [r3, #0]
    63f8:	4b10      	ldr	r3, [pc, #64]	; (643c <eth_process+0x114>)
    63fa:	785b      	ldrb	r3, [r3, #1]
    63fc:	1dbc      	adds	r4, r7, #6
    63fe:	0019      	movs	r1, r3
    6400:	0010      	movs	r0, r2
    6402:	4b10      	ldr	r3, [pc, #64]	; (6444 <eth_process+0x11c>)
    6404:	4798      	blx	r3
    6406:	0003      	movs	r3, r0
    6408:	8023      	strh	r3, [r4, #0]
			if(rtrn)		{eth_st=0;}
    640a:	1dbb      	adds	r3, r7, #6
    640c:	881b      	ldrh	r3, [r3, #0]
    640e:	2b00      	cmp	r3, #0
    6410:	d00e      	beq.n	6430 <eth_process+0x108>
    6412:	4b09      	ldr	r3, [pc, #36]	; (6438 <eth_process+0x110>)
    6414:	2200      	movs	r2, #0
    6416:	701a      	strb	r2, [r3, #0]
		break;
    6418:	e00a      	b.n	6430 <eth_process+0x108>
		default:
			eth_st = CHECK;
    641a:	4b07      	ldr	r3, [pc, #28]	; (6438 <eth_process+0x110>)
    641c:	2200      	movs	r2, #0
    641e:	701a      	strb	r2, [r3, #0]
		break;
    6420:	46c0      	nop			; (mov r8, r8)
    6422:	e006      	b.n	6432 <eth_process+0x10a>
					case COMMON_SOCK_VAL:																						return;
    6424:	46c0      	nop			; (mov r8, r8)
    6426:	e004      	b.n	6432 <eth_process+0x10a>
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    6428:	46c0      	nop			; (mov r8, r8)
    642a:	e002      	b.n	6432 <eth_process+0x10a>
		break;
    642c:	46c0      	nop			; (mov r8, r8)
    642e:	e000      	b.n	6432 <eth_process+0x10a>
		break;
    6430:	46c0      	nop			; (mov r8, r8)

	}
}
    6432:	46bd      	mov	sp, r7
    6434:	b003      	add	sp, #12
    6436:	bd90      	pop	{r4, r7, pc}
    6438:	2000045a 	.word	0x2000045a
    643c:	20003b00 	.word	0x20003b00
    6440:	20003dc4 	.word	0x20003dc4
    6444:	000097e9 	.word	0x000097e9

00006448 <check_sockets_process>:

void check_sockets_process (BYTE *buf)
{
    6448:	b580      	push	{r7, lr}
    644a:	b082      	sub	sp, #8
    644c:	af00      	add	r7, sp, #0
    644e:	6078      	str	r0, [r7, #4]
	static BYTE index = MAX_SOCKETS_VAL;
	
	index++;
    6450:	4b1a      	ldr	r3, [pc, #104]	; (64bc <check_sockets_process+0x74>)
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	3301      	adds	r3, #1
    6456:	b2da      	uxtb	r2, r3
    6458:	4b18      	ldr	r3, [pc, #96]	; (64bc <check_sockets_process+0x74>)
    645a:	701a      	strb	r2, [r3, #0]
	if(index > MAX_SOCKETS_VAL){index=0;}
    645c:	4b17      	ldr	r3, [pc, #92]	; (64bc <check_sockets_process+0x74>)
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	2b04      	cmp	r3, #4
    6462:	d902      	bls.n	646a <check_sockets_process+0x22>
    6464:	4b15      	ldr	r3, [pc, #84]	; (64bc <check_sockets_process+0x74>)
    6466:	2200      	movs	r2, #0
    6468:	701a      	strb	r2, [r3, #0]
	
	switch (index)
    646a:	4b14      	ldr	r3, [pc, #80]	; (64bc <check_sockets_process+0x74>)
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	2b00      	cmp	r3, #0
    6470:	d106      	bne.n	6480 <check_sockets_process+0x38>
	{
		case COMMON_SOCK_VAL:
			w5500_mode.numb_socket	= SOCKET_0;
    6472:	4b13      	ldr	r3, [pc, #76]	; (64c0 <check_sockets_process+0x78>)
    6474:	2200      	movs	r2, #0
    6476:	705a      	strb	r2, [r3, #1]
			w5500_mode.mode_op		= MODE_OP_READ_UDP;
    6478:	4b11      	ldr	r3, [pc, #68]	; (64c0 <check_sockets_process+0x78>)
    647a:	2202      	movs	r2, #2
    647c:	701a      	strb	r2, [r3, #0]
		return;
    647e:	e01a      	b.n	64b6 <check_sockets_process+0x6e>
		default:
			w5500_mode.numb_socket = index;
    6480:	4b0e      	ldr	r3, [pc, #56]	; (64bc <check_sockets_process+0x74>)
    6482:	781a      	ldrb	r2, [r3, #0]
    6484:	4b0e      	ldr	r3, [pc, #56]	; (64c0 <check_sockets_process+0x78>)
    6486:	705a      	strb	r2, [r3, #1]
			if (cfg_1.sock_rs485[index-1].mode == TCP)	
    6488:	4b0c      	ldr	r3, [pc, #48]	; (64bc <check_sockets_process+0x74>)
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	1e5a      	subs	r2, r3, #1
    648e:	490d      	ldr	r1, [pc, #52]	; (64c4 <check_sockets_process+0x7c>)
    6490:	2035      	movs	r0, #53	; 0x35
    6492:	0013      	movs	r3, r2
    6494:	005b      	lsls	r3, r3, #1
    6496:	189b      	adds	r3, r3, r2
    6498:	009b      	lsls	r3, r3, #2
    649a:	189b      	adds	r3, r3, r2
    649c:	18cb      	adds	r3, r1, r3
    649e:	181b      	adds	r3, r3, r0
    64a0:	781b      	ldrb	r3, [r3, #0]
    64a2:	2b02      	cmp	r3, #2
    64a4:	d103      	bne.n	64ae <check_sockets_process+0x66>
			{w5500_mode.mode_op = MODE_OP_READ_TCP;}
    64a6:	4b06      	ldr	r3, [pc, #24]	; (64c0 <check_sockets_process+0x78>)
    64a8:	2204      	movs	r2, #4
    64aa:	701a      	strb	r2, [r3, #0]
			else										
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
		return;
    64ac:	e003      	b.n	64b6 <check_sockets_process+0x6e>
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
    64ae:	4b04      	ldr	r3, [pc, #16]	; (64c0 <check_sockets_process+0x78>)
    64b0:	2202      	movs	r2, #2
    64b2:	701a      	strb	r2, [r3, #0]
		return;
    64b4:	46c0      	nop			; (mov r8, r8)
	}									{w5500_mode.mode_op=MODE_OP_READ_UDP;}
	return;
}
    64b6:	46bd      	mov	sp, r7
    64b8:	b002      	add	sp, #8
    64ba:	bd80      	pop	{r7, pc}
    64bc:	20000001 	.word	0x20000001
    64c0:	20003b00 	.word	0x20003b00
    64c4:	20003dc4 	.word	0x20003dc4

000064c8 <eth_parse>:

void eth_parse (BYTE numb_sock,WORD size)
{	
    64c8:	b590      	push	{r4, r7, lr}
    64ca:	b083      	sub	sp, #12
    64cc:	af00      	add	r7, sp, #0
    64ce:	0002      	movs	r2, r0
    64d0:	1dfb      	adds	r3, r7, #7
    64d2:	701a      	strb	r2, [r3, #0]
    64d4:	1d3b      	adds	r3, r7, #4
    64d6:	1c0a      	adds	r2, r1, #0
    64d8:	801a      	strh	r2, [r3, #0]
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    64da:	1dfb      	adds	r3, r7, #7
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	4a2e      	ldr	r2, [pc, #184]	; (6598 <eth_parse+0xd0>)
    64e0:	492e      	ldr	r1, [pc, #184]	; (659c <eth_parse+0xd4>)
    64e2:	482f      	ldr	r0, [pc, #188]	; (65a0 <eth_parse+0xd8>)
    64e4:	4343      	muls	r3, r0
    64e6:	18d3      	adds	r3, r2, r3
    64e8:	185b      	adds	r3, r3, r1
    64ea:	781b      	ldrb	r3, [r3, #0]
    64ec:	2b01      	cmp	r3, #1
    64ee:	d04e      	beq.n	658e <eth_parse+0xc6>
		
	eth_sock[numb_sock].counters.rx++;
    64f0:	1dfb      	adds	r3, r7, #7
    64f2:	7819      	ldrb	r1, [r3, #0]
    64f4:	4828      	ldr	r0, [pc, #160]	; (6598 <eth_parse+0xd0>)
    64f6:	23ba      	movs	r3, #186	; 0xba
    64f8:	00db      	lsls	r3, r3, #3
    64fa:	4a29      	ldr	r2, [pc, #164]	; (65a0 <eth_parse+0xd8>)
    64fc:	434a      	muls	r2, r1
    64fe:	1882      	adds	r2, r0, r2
    6500:	18d3      	adds	r3, r2, r3
    6502:	7ada      	ldrb	r2, [r3, #11]
    6504:	7b18      	ldrb	r0, [r3, #12]
    6506:	0200      	lsls	r0, r0, #8
    6508:	4302      	orrs	r2, r0
    650a:	7b58      	ldrb	r0, [r3, #13]
    650c:	0400      	lsls	r0, r0, #16
    650e:	4302      	orrs	r2, r0
    6510:	7b9b      	ldrb	r3, [r3, #14]
    6512:	061b      	lsls	r3, r3, #24
    6514:	4313      	orrs	r3, r2
    6516:	1c5a      	adds	r2, r3, #1
    6518:	481f      	ldr	r0, [pc, #124]	; (6598 <eth_parse+0xd0>)
    651a:	23ba      	movs	r3, #186	; 0xba
    651c:	00db      	lsls	r3, r3, #3
    651e:	4c20      	ldr	r4, [pc, #128]	; (65a0 <eth_parse+0xd8>)
    6520:	4361      	muls	r1, r4
    6522:	1841      	adds	r1, r0, r1
    6524:	18cb      	adds	r3, r1, r3
    6526:	330b      	adds	r3, #11
    6528:	21ff      	movs	r1, #255	; 0xff
    652a:	4011      	ands	r1, r2
    652c:	000c      	movs	r4, r1
    652e:	7819      	ldrb	r1, [r3, #0]
    6530:	2000      	movs	r0, #0
    6532:	4001      	ands	r1, r0
    6534:	1c08      	adds	r0, r1, #0
    6536:	1c21      	adds	r1, r4, #0
    6538:	4301      	orrs	r1, r0
    653a:	7019      	strb	r1, [r3, #0]
    653c:	0a11      	lsrs	r1, r2, #8
    653e:	20ff      	movs	r0, #255	; 0xff
    6540:	4001      	ands	r1, r0
    6542:	000c      	movs	r4, r1
    6544:	7859      	ldrb	r1, [r3, #1]
    6546:	2000      	movs	r0, #0
    6548:	4001      	ands	r1, r0
    654a:	1c08      	adds	r0, r1, #0
    654c:	1c21      	adds	r1, r4, #0
    654e:	4301      	orrs	r1, r0
    6550:	7059      	strb	r1, [r3, #1]
    6552:	0c11      	lsrs	r1, r2, #16
    6554:	20ff      	movs	r0, #255	; 0xff
    6556:	4001      	ands	r1, r0
    6558:	000c      	movs	r4, r1
    655a:	7899      	ldrb	r1, [r3, #2]
    655c:	2000      	movs	r0, #0
    655e:	4001      	ands	r1, r0
    6560:	1c08      	adds	r0, r1, #0
    6562:	1c21      	adds	r1, r4, #0
    6564:	4301      	orrs	r1, r0
    6566:	7099      	strb	r1, [r3, #2]
    6568:	0e10      	lsrs	r0, r2, #24
    656a:	78da      	ldrb	r2, [r3, #3]
    656c:	2100      	movs	r1, #0
    656e:	400a      	ands	r2, r1
    6570:	1c11      	adds	r1, r2, #0
    6572:	1c02      	adds	r2, r0, #0
    6574:	430a      	orrs	r2, r1
    6576:	70da      	strb	r2, [r3, #3]
	eth_sock[numb_sock].r_status = 1;
    6578:	1dfb      	adds	r3, r7, #7
    657a:	781b      	ldrb	r3, [r3, #0]
    657c:	4a06      	ldr	r2, [pc, #24]	; (6598 <eth_parse+0xd0>)
    657e:	4907      	ldr	r1, [pc, #28]	; (659c <eth_parse+0xd4>)
    6580:	4807      	ldr	r0, [pc, #28]	; (65a0 <eth_parse+0xd8>)
    6582:	4343      	muls	r3, r0
    6584:	18d3      	adds	r3, r2, r3
    6586:	185b      	adds	r3, r3, r1
    6588:	2201      	movs	r2, #1
    658a:	701a      	strb	r2, [r3, #0]
    658c:	e000      	b.n	6590 <eth_parse+0xc8>
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    658e:	46c0      	nop			; (mov r8, r8)
}
    6590:	46bd      	mov	sp, r7
    6592:	b003      	add	sp, #12
    6594:	bd90      	pop	{r4, r7, pc}
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	200005cc 	.word	0x200005cc
    659c:	000005d1 	.word	0x000005d1
    65a0:	000005e5 	.word	0x000005e5

000065a4 <check_data_wr_process>:

BYTE check_data_wr_process (void)
{
    65a4:	b590      	push	{r4, r7, lr}
    65a6:	b083      	sub	sp, #12
    65a8:	af00      	add	r7, sp, #0
	BYTE numb_sock=0;
    65aa:	1dfb      	adds	r3, r7, #7
    65ac:	2200      	movs	r2, #0
    65ae:	701a      	strb	r2, [r3, #0]

	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    65b0:	1dfb      	adds	r3, r7, #7
    65b2:	2200      	movs	r2, #0
    65b4:	701a      	strb	r2, [r3, #0]
    65b6:	e060      	b.n	667a <check_data_wr_process+0xd6>
	{
		if( eth_sock[numb_sock].w_status == 1 )
    65b8:	1dfb      	adds	r3, r7, #7
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	4a33      	ldr	r2, [pc, #204]	; (668c <check_data_wr_process+0xe8>)
    65be:	4934      	ldr	r1, [pc, #208]	; (6690 <check_data_wr_process+0xec>)
    65c0:	4834      	ldr	r0, [pc, #208]	; (6694 <check_data_wr_process+0xf0>)
    65c2:	4343      	muls	r3, r0
    65c4:	18d3      	adds	r3, r2, r3
    65c6:	185b      	adds	r3, r3, r1
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	2b01      	cmp	r3, #1
    65cc:	d150      	bne.n	6670 <check_data_wr_process+0xcc>
		{
			eth_sock[numb_sock].w_status = 0;
    65ce:	1dfb      	adds	r3, r7, #7
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	4a2e      	ldr	r2, [pc, #184]	; (668c <check_data_wr_process+0xe8>)
    65d4:	492e      	ldr	r1, [pc, #184]	; (6690 <check_data_wr_process+0xec>)
    65d6:	482f      	ldr	r0, [pc, #188]	; (6694 <check_data_wr_process+0xf0>)
    65d8:	4343      	muls	r3, r0
    65da:	18d3      	adds	r3, r2, r3
    65dc:	185b      	adds	r3, r3, r1
    65de:	2200      	movs	r2, #0
    65e0:	701a      	strb	r2, [r3, #0]
			eth_sock[numb_sock].counters.tx++;
    65e2:	1dfb      	adds	r3, r7, #7
    65e4:	7819      	ldrb	r1, [r3, #0]
    65e6:	4829      	ldr	r0, [pc, #164]	; (668c <check_data_wr_process+0xe8>)
    65e8:	23ba      	movs	r3, #186	; 0xba
    65ea:	00db      	lsls	r3, r3, #3
    65ec:	4a29      	ldr	r2, [pc, #164]	; (6694 <check_data_wr_process+0xf0>)
    65ee:	434a      	muls	r2, r1
    65f0:	1882      	adds	r2, r0, r2
    65f2:	18d3      	adds	r3, r2, r3
    65f4:	79da      	ldrb	r2, [r3, #7]
    65f6:	7a18      	ldrb	r0, [r3, #8]
    65f8:	0200      	lsls	r0, r0, #8
    65fa:	4302      	orrs	r2, r0
    65fc:	7a58      	ldrb	r0, [r3, #9]
    65fe:	0400      	lsls	r0, r0, #16
    6600:	4302      	orrs	r2, r0
    6602:	7a9b      	ldrb	r3, [r3, #10]
    6604:	061b      	lsls	r3, r3, #24
    6606:	4313      	orrs	r3, r2
    6608:	1c5a      	adds	r2, r3, #1
    660a:	4820      	ldr	r0, [pc, #128]	; (668c <check_data_wr_process+0xe8>)
    660c:	23ba      	movs	r3, #186	; 0xba
    660e:	00db      	lsls	r3, r3, #3
    6610:	4c20      	ldr	r4, [pc, #128]	; (6694 <check_data_wr_process+0xf0>)
    6612:	4361      	muls	r1, r4
    6614:	1841      	adds	r1, r0, r1
    6616:	18cb      	adds	r3, r1, r3
    6618:	3307      	adds	r3, #7
    661a:	21ff      	movs	r1, #255	; 0xff
    661c:	4011      	ands	r1, r2
    661e:	000c      	movs	r4, r1
    6620:	7819      	ldrb	r1, [r3, #0]
    6622:	2000      	movs	r0, #0
    6624:	4001      	ands	r1, r0
    6626:	1c08      	adds	r0, r1, #0
    6628:	1c21      	adds	r1, r4, #0
    662a:	4301      	orrs	r1, r0
    662c:	7019      	strb	r1, [r3, #0]
    662e:	0a11      	lsrs	r1, r2, #8
    6630:	20ff      	movs	r0, #255	; 0xff
    6632:	4001      	ands	r1, r0
    6634:	000c      	movs	r4, r1
    6636:	7859      	ldrb	r1, [r3, #1]
    6638:	2000      	movs	r0, #0
    663a:	4001      	ands	r1, r0
    663c:	1c08      	adds	r0, r1, #0
    663e:	1c21      	adds	r1, r4, #0
    6640:	4301      	orrs	r1, r0
    6642:	7059      	strb	r1, [r3, #1]
    6644:	0c11      	lsrs	r1, r2, #16
    6646:	20ff      	movs	r0, #255	; 0xff
    6648:	4001      	ands	r1, r0
    664a:	000c      	movs	r4, r1
    664c:	7899      	ldrb	r1, [r3, #2]
    664e:	2000      	movs	r0, #0
    6650:	4001      	ands	r1, r0
    6652:	1c08      	adds	r0, r1, #0
    6654:	1c21      	adds	r1, r4, #0
    6656:	4301      	orrs	r1, r0
    6658:	7099      	strb	r1, [r3, #2]
    665a:	0e10      	lsrs	r0, r2, #24
    665c:	78da      	ldrb	r2, [r3, #3]
    665e:	2100      	movs	r1, #0
    6660:	400a      	ands	r2, r1
    6662:	1c11      	adds	r1, r2, #0
    6664:	1c02      	adds	r2, r0, #0
    6666:	430a      	orrs	r2, r1
    6668:	70da      	strb	r2, [r3, #3]
			return (numb_sock);
    666a:	1dfb      	adds	r3, r7, #7
    666c:	781b      	ldrb	r3, [r3, #0]
    666e:	e009      	b.n	6684 <check_data_wr_process+0xe0>
	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    6670:	1dfb      	adds	r3, r7, #7
    6672:	781a      	ldrb	r2, [r3, #0]
    6674:	1dfb      	adds	r3, r7, #7
    6676:	3201      	adds	r2, #1
    6678:	701a      	strb	r2, [r3, #0]
    667a:	1dfb      	adds	r3, r7, #7
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	2b04      	cmp	r3, #4
    6680:	d99a      	bls.n	65b8 <check_data_wr_process+0x14>
		}
	}
	return (NO_SOKET);	
    6682:	236d      	movs	r3, #109	; 0x6d
}
    6684:	0018      	movs	r0, r3
    6686:	46bd      	mov	sp, r7
    6688:	b003      	add	sp, #12
    668a:	bd90      	pop	{r4, r7, pc}
    668c:	200005cc 	.word	0x200005cc
    6690:	000005d2 	.word	0x000005d2
    6694:	000005e5 	.word	0x000005e5

00006698 <flash_empty>:
#include "def.h"



WORD flash_empty(DWORD addr,WORD size)
{
    6698:	b580      	push	{r7, lr}
    669a:	b084      	sub	sp, #16
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
    66a0:	000a      	movs	r2, r1
    66a2:	1cbb      	adds	r3, r7, #2
    66a4:	801a      	strh	r2, [r3, #0]
	DWORD  v    = 0;
    66a6:	2300      	movs	r3, #0
    66a8:	60fb      	str	r3, [r7, #12]
	for(;size;addr+=4,size-=4)
    66aa:	e00f      	b.n	66cc <flash_empty+0x34>
	{
		v = *(__IO DWORD*)(addr);
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	681b      	ldr	r3, [r3, #0]
    66b0:	60fb      	str	r3, [r7, #12]
		if(v != 0xFFFFFFFF)
    66b2:	68fb      	ldr	r3, [r7, #12]
    66b4:	3301      	adds	r3, #1
    66b6:	d001      	beq.n	66bc <flash_empty+0x24>
		{
			return(0);
    66b8:	2300      	movs	r3, #0
    66ba:	e00c      	b.n	66d6 <flash_empty+0x3e>
	for(;size;addr+=4,size-=4)
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	3304      	adds	r3, #4
    66c0:	607b      	str	r3, [r7, #4]
    66c2:	1cbb      	adds	r3, r7, #2
    66c4:	1cba      	adds	r2, r7, #2
    66c6:	8812      	ldrh	r2, [r2, #0]
    66c8:	3a04      	subs	r2, #4
    66ca:	801a      	strh	r2, [r3, #0]
    66cc:	1cbb      	adds	r3, r7, #2
    66ce:	881b      	ldrh	r3, [r3, #0]
    66d0:	2b00      	cmp	r3, #0
    66d2:	d1eb      	bne.n	66ac <flash_empty+0x14>
		}
	}


	return(1);
    66d4:	2301      	movs	r3, #1
}
    66d6:	0018      	movs	r0, r3
    66d8:	46bd      	mov	sp, r7
    66da:	b004      	add	sp, #16
    66dc:	bd80      	pop	{r7, pc}

000066de <flash_erase_page>:

void flash_erase_page(DWORD addr)
//-----------------------------------------------------------------------------
{
    66de:	b580      	push	{r7, lr}
    66e0:	b082      	sub	sp, #8
    66e2:	af00      	add	r7, sp, #0
    66e4:	6078      	str	r0, [r7, #4]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	4b0e      	ldr	r3, [pc, #56]	; (6724 <flash_erase_page+0x46>)
    66ea:	7d1b      	ldrb	r3, [r3, #20]
    66ec:	07db      	lsls	r3, r3, #31
    66ee:	0fdb      	lsrs	r3, r3, #31
    66f0:	b2db      	uxtb	r3, r3
    66f2:	2b00      	cmp	r3, #0
    66f4:	d0f8      	beq.n	66e8 <flash_erase_page+0xa>
	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    66f6:	4b0b      	ldr	r3, [pc, #44]	; (6724 <flash_erase_page+0x46>)
    66f8:	2220      	movs	r2, #32
    66fa:	32ff      	adds	r2, #255	; 0xff
    66fc:	831a      	strh	r2, [r3, #24]
	*(__IO DWORD *)(addr)=0xFFFFFFFF;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	2201      	movs	r2, #1
    6702:	4252      	negs	r2, r2
    6704:	601a      	str	r2, [r3, #0]
	NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    6706:	4b07      	ldr	r3, [pc, #28]	; (6724 <flash_erase_page+0x46>)
    6708:	4a07      	ldr	r2, [pc, #28]	; (6728 <flash_erase_page+0x4a>)
    670a:	801a      	strh	r2, [r3, #0]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    670c:	46c0      	nop			; (mov r8, r8)
    670e:	4b05      	ldr	r3, [pc, #20]	; (6724 <flash_erase_page+0x46>)
    6710:	7d1b      	ldrb	r3, [r3, #20]
    6712:	07db      	lsls	r3, r3, #31
    6714:	0fdb      	lsrs	r3, r3, #31
    6716:	b2db      	uxtb	r3, r3
    6718:	2b00      	cmp	r3, #0
    671a:	d0f8      	beq.n	670e <flash_erase_page+0x30>
}
    671c:	46c0      	nop			; (mov r8, r8)
    671e:	46bd      	mov	sp, r7
    6720:	b002      	add	sp, #8
    6722:	bd80      	pop	{r7, pc}
    6724:	41004000 	.word	0x41004000
    6728:	ffffa502 	.word	0xffffa502

0000672c <flash_write>:

void flash_write(DWORD addr,BYTE *buf,WORD size)
//-----------------------------------------------------------------------------
{
    672c:	b580      	push	{r7, lr}
    672e:	b088      	sub	sp, #32
    6730:	af00      	add	r7, sp, #0
    6732:	60f8      	str	r0, [r7, #12]
    6734:	60b9      	str	r1, [r7, #8]
    6736:	1dbb      	adds	r3, r7, #6
    6738:	801a      	strh	r2, [r3, #0]
	WORD wn   = 0;
    673a:	231e      	movs	r3, #30
    673c:	18fb      	adds	r3, r7, r3
    673e:	2200      	movs	r2, #0
    6740:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6742:	2300      	movs	r3, #0
    6744:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    6746:	2300      	movs	r3, #0
    6748:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    674a:	4a2b      	ldr	r2, [pc, #172]	; (67f8 <flash_write+0xcc>)
    674c:	6853      	ldr	r3, [r2, #4]
    674e:	2180      	movs	r1, #128	; 0x80
    6750:	438b      	bics	r3, r1
    6752:	6053      	str	r3, [r2, #4]

	while(size > 0)
    6754:	e048      	b.n	67e8 <flash_write+0xbc>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    6756:	1dbb      	adds	r3, r7, #6
    6758:	881b      	ldrh	r3, [r3, #0]
    675a:	2b10      	cmp	r3, #16
    675c:	d802      	bhi.n	6764 <flash_write+0x38>
    675e:	1dbb      	adds	r3, r7, #6
    6760:	881b      	ldrh	r3, [r3, #0]
    6762:	e000      	b.n	6766 <flash_write+0x3a>
    6764:	2310      	movs	r3, #16
    6766:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6768:	697b      	ldr	r3, [r7, #20]
    676a:	b29a      	uxth	r2, r3
    676c:	1dbb      	adds	r3, r7, #6
    676e:	1db9      	adds	r1, r7, #6
    6770:	8809      	ldrh	r1, [r1, #0]
    6772:	1a8a      	subs	r2, r1, r2
    6774:	801a      	strh	r2, [r3, #0]
		
		//wdt_reset();
		
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6776:	4b20      	ldr	r3, [pc, #128]	; (67f8 <flash_write+0xcc>)
    6778:	4a20      	ldr	r2, [pc, #128]	; (67fc <flash_write+0xd0>)
    677a:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    677c:	46c0      	nop			; (mov r8, r8)
    677e:	4b1e      	ldr	r3, [pc, #120]	; (67f8 <flash_write+0xcc>)
    6780:	7d1b      	ldrb	r3, [r3, #20]
    6782:	07db      	lsls	r3, r3, #31
    6784:	0fdb      	lsrs	r3, r3, #31
    6786:	b2db      	uxtb	r3, r3
    6788:	2b00      	cmp	r3, #0
    678a:	d0f8      	beq.n	677e <flash_write+0x52>

		for(wn=0;wn<len;wn+=4,addr+=4)
    678c:	231e      	movs	r3, #30
    678e:	18fb      	adds	r3, r7, r3
    6790:	2200      	movs	r2, #0
    6792:	801a      	strh	r2, [r3, #0]
    6794:	e013      	b.n	67be <flash_write+0x92>
		{
			*(__IO DWORD*)(addr) = *(DWORD*)&buf[wn+cnt];
    6796:	68fb      	ldr	r3, [r7, #12]
    6798:	221e      	movs	r2, #30
    679a:	18ba      	adds	r2, r7, r2
    679c:	8811      	ldrh	r1, [r2, #0]
    679e:	69ba      	ldr	r2, [r7, #24]
    67a0:	188a      	adds	r2, r1, r2
    67a2:	68b9      	ldr	r1, [r7, #8]
    67a4:	188a      	adds	r2, r1, r2
    67a6:	6812      	ldr	r2, [r2, #0]
    67a8:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,addr+=4)
    67aa:	231e      	movs	r3, #30
    67ac:	18fb      	adds	r3, r7, r3
    67ae:	221e      	movs	r2, #30
    67b0:	18ba      	adds	r2, r7, r2
    67b2:	8812      	ldrh	r2, [r2, #0]
    67b4:	3204      	adds	r2, #4
    67b6:	801a      	strh	r2, [r3, #0]
    67b8:	68fb      	ldr	r3, [r7, #12]
    67ba:	3304      	adds	r3, #4
    67bc:	60fb      	str	r3, [r7, #12]
    67be:	231e      	movs	r3, #30
    67c0:	18fb      	adds	r3, r7, r3
    67c2:	881a      	ldrh	r2, [r3, #0]
    67c4:	697b      	ldr	r3, [r7, #20]
    67c6:	429a      	cmp	r2, r3
    67c8:	d3e5      	bcc.n	6796 <flash_write+0x6a>
		}
		
		cnt=cnt+len;
    67ca:	69ba      	ldr	r2, [r7, #24]
    67cc:	697b      	ldr	r3, [r7, #20]
    67ce:	18d3      	adds	r3, r2, r3
    67d0:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    67d2:	4b09      	ldr	r3, [pc, #36]	; (67f8 <flash_write+0xcc>)
    67d4:	4a0a      	ldr	r2, [pc, #40]	; (6800 <flash_write+0xd4>)
    67d6:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    67d8:	46c0      	nop			; (mov r8, r8)
    67da:	4b07      	ldr	r3, [pc, #28]	; (67f8 <flash_write+0xcc>)
    67dc:	7d1b      	ldrb	r3, [r3, #20]
    67de:	07db      	lsls	r3, r3, #31
    67e0:	0fdb      	lsrs	r3, r3, #31
    67e2:	b2db      	uxtb	r3, r3
    67e4:	2b00      	cmp	r3, #0
    67e6:	d0f8      	beq.n	67da <flash_write+0xae>
	while(size > 0)
    67e8:	1dbb      	adds	r3, r7, #6
    67ea:	881b      	ldrh	r3, [r3, #0]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d1b2      	bne.n	6756 <flash_write+0x2a>
	}
}
    67f0:	46c0      	nop			; (mov r8, r8)
    67f2:	46bd      	mov	sp, r7
    67f4:	b008      	add	sp, #32
    67f6:	bd80      	pop	{r7, pc}
    67f8:	41004000 	.word	0x41004000
    67fc:	ffffa544 	.word	0xffffa544
    6800:	ffffa504 	.word	0xffffa504

00006804 <flash_copy>:

WORD flash_copy(DWORD dst,DWORD src,DWORD size)
//--------------------------------------------------------------------------
{
    6804:	b580      	push	{r7, lr}
    6806:	b088      	sub	sp, #32
    6808:	af00      	add	r7, sp, #0
    680a:	60f8      	str	r0, [r7, #12]
    680c:	60b9      	str	r1, [r7, #8]
    680e:	607a      	str	r2, [r7, #4]
	WORD wn   = 0;
    6810:	231e      	movs	r3, #30
    6812:	18fb      	adds	r3, r7, r3
    6814:	2200      	movs	r2, #0
    6816:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6818:	2300      	movs	r3, #0
    681a:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    681c:	2300      	movs	r3, #0
    681e:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    6820:	4a2d      	ldr	r2, [pc, #180]	; (68d8 <flash_copy+0xd4>)
    6822:	6853      	ldr	r3, [r2, #4]
    6824:	2180      	movs	r1, #128	; 0x80
    6826:	438b      	bics	r3, r1
    6828:	6053      	str	r3, [r2, #4]

	while(size > 0)
    682a:	e04d      	b.n	68c8 <flash_copy+0xc4>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	2b10      	cmp	r3, #16
    6830:	d900      	bls.n	6834 <flash_copy+0x30>
    6832:	2310      	movs	r3, #16
    6834:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6836:	687a      	ldr	r2, [r7, #4]
    6838:	697b      	ldr	r3, [r7, #20]
    683a:	1ad3      	subs	r3, r2, r3
    683c:	607b      	str	r3, [r7, #4]
		wdt_reset();
    683e:	4b27      	ldr	r3, [pc, #156]	; (68dc <flash_copy+0xd8>)
    6840:	799b      	ldrb	r3, [r3, #6]
    6842:	07db      	lsls	r3, r3, #31
    6844:	0fdb      	lsrs	r3, r3, #31
    6846:	b2db      	uxtb	r3, r3
    6848:	2b01      	cmp	r3, #1
    684a:	d107      	bne.n	685c <flash_copy+0x58>
    684c:	4a23      	ldr	r2, [pc, #140]	; (68dc <flash_copy+0xd8>)
    684e:	7993      	ldrb	r3, [r2, #6]
    6850:	2101      	movs	r1, #1
    6852:	430b      	orrs	r3, r1
    6854:	7193      	strb	r3, [r2, #6]
    6856:	4b21      	ldr	r3, [pc, #132]	; (68dc <flash_copy+0xd8>)
    6858:	22a5      	movs	r2, #165	; 0xa5
    685a:	721a      	strb	r2, [r3, #8]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    685c:	4b1e      	ldr	r3, [pc, #120]	; (68d8 <flash_copy+0xd4>)
    685e:	4a20      	ldr	r2, [pc, #128]	; (68e0 <flash_copy+0xdc>)
    6860:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6862:	46c0      	nop			; (mov r8, r8)
    6864:	4b1c      	ldr	r3, [pc, #112]	; (68d8 <flash_copy+0xd4>)
    6866:	7d1b      	ldrb	r3, [r3, #20]
    6868:	07db      	lsls	r3, r3, #31
    686a:	0fdb      	lsrs	r3, r3, #31
    686c:	b2db      	uxtb	r3, r3
    686e:	2b00      	cmp	r3, #0
    6870:	d0f8      	beq.n	6864 <flash_copy+0x60>

		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    6872:	231e      	movs	r3, #30
    6874:	18fb      	adds	r3, r7, r3
    6876:	2200      	movs	r2, #0
    6878:	801a      	strh	r2, [r3, #0]
    687a:	e010      	b.n	689e <flash_copy+0x9a>
		{
			
			*(__IO DWORD*)(dst) = *(__IO DWORD*)(src);
    687c:	68fb      	ldr	r3, [r7, #12]
    687e:	68ba      	ldr	r2, [r7, #8]
    6880:	6812      	ldr	r2, [r2, #0]
    6882:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    6884:	231e      	movs	r3, #30
    6886:	18fb      	adds	r3, r7, r3
    6888:	221e      	movs	r2, #30
    688a:	18ba      	adds	r2, r7, r2
    688c:	8812      	ldrh	r2, [r2, #0]
    688e:	3204      	adds	r2, #4
    6890:	801a      	strh	r2, [r3, #0]
    6892:	68fb      	ldr	r3, [r7, #12]
    6894:	3304      	adds	r3, #4
    6896:	60fb      	str	r3, [r7, #12]
    6898:	68bb      	ldr	r3, [r7, #8]
    689a:	3304      	adds	r3, #4
    689c:	60bb      	str	r3, [r7, #8]
    689e:	231e      	movs	r3, #30
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	881a      	ldrh	r2, [r3, #0]
    68a4:	697b      	ldr	r3, [r7, #20]
    68a6:	429a      	cmp	r2, r3
    68a8:	d3e8      	bcc.n	687c <flash_copy+0x78>
		}
		
		cnt=cnt+len;
    68aa:	69ba      	ldr	r2, [r7, #24]
    68ac:	697b      	ldr	r3, [r7, #20]
    68ae:	18d3      	adds	r3, r2, r3
    68b0:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    68b2:	4b09      	ldr	r3, [pc, #36]	; (68d8 <flash_copy+0xd4>)
    68b4:	4a0b      	ldr	r2, [pc, #44]	; (68e4 <flash_copy+0xe0>)
    68b6:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    68b8:	46c0      	nop			; (mov r8, r8)
    68ba:	4b07      	ldr	r3, [pc, #28]	; (68d8 <flash_copy+0xd4>)
    68bc:	7d1b      	ldrb	r3, [r3, #20]
    68be:	07db      	lsls	r3, r3, #31
    68c0:	0fdb      	lsrs	r3, r3, #31
    68c2:	b2db      	uxtb	r3, r3
    68c4:	2b00      	cmp	r3, #0
    68c6:	d0f8      	beq.n	68ba <flash_copy+0xb6>
	while(size > 0)
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d1ae      	bne.n	682c <flash_copy+0x28>
	}
	return 0;
    68ce:	2300      	movs	r3, #0
}
    68d0:	0018      	movs	r0, r3
    68d2:	46bd      	mov	sp, r7
    68d4:	b008      	add	sp, #32
    68d6:	bd80      	pop	{r7, pc}
    68d8:	41004000 	.word	0x41004000
    68dc:	40001000 	.word	0x40001000
    68e0:	ffffa544 	.word	0xffffa544
    68e4:	ffffa504 	.word	0xffffa504

000068e8 <flash_read>:

WORD flash_read(DWORD addr,void* buf,WORD size)
//--------------------------------------------------------------------------
{
    68e8:	b580      	push	{r7, lr}
    68ea:	b086      	sub	sp, #24
    68ec:	af00      	add	r7, sp, #0
    68ee:	60f8      	str	r0, [r7, #12]
    68f0:	60b9      	str	r1, [r7, #8]
    68f2:	1dbb      	adds	r3, r7, #6
    68f4:	801a      	strh	r2, [r3, #0]
	WORD  cnt  = 0;
    68f6:	2316      	movs	r3, #22
    68f8:	18fb      	adds	r3, r7, r3
    68fa:	2200      	movs	r2, #0
    68fc:	801a      	strh	r2, [r3, #0]
	WORD* ptr = (WORD*)buf;
    68fe:	68bb      	ldr	r3, [r7, #8]
    6900:	613b      	str	r3, [r7, #16]
	
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    6902:	2316      	movs	r3, #22
    6904:	18fb      	adds	r3, r7, r3
    6906:	2200      	movs	r2, #0
    6908:	801a      	strh	r2, [r3, #0]
    690a:	e020      	b.n	694e <flash_read+0x66>
	{
		*ptr = *(__IO uint16_t*)(addr);
    690c:	68fb      	ldr	r3, [r7, #12]
    690e:	881b      	ldrh	r3, [r3, #0]
    6910:	b29a      	uxth	r2, r3
    6912:	693b      	ldr	r3, [r7, #16]
    6914:	801a      	strh	r2, [r3, #0]
		ptr++;
    6916:	693b      	ldr	r3, [r7, #16]
    6918:	3302      	adds	r3, #2
    691a:	613b      	str	r3, [r7, #16]
		wdt_reset();
    691c:	4b13      	ldr	r3, [pc, #76]	; (696c <flash_read+0x84>)
    691e:	799b      	ldrb	r3, [r3, #6]
    6920:	07db      	lsls	r3, r3, #31
    6922:	0fdb      	lsrs	r3, r3, #31
    6924:	b2db      	uxtb	r3, r3
    6926:	2b01      	cmp	r3, #1
    6928:	d107      	bne.n	693a <flash_read+0x52>
    692a:	4a10      	ldr	r2, [pc, #64]	; (696c <flash_read+0x84>)
    692c:	7993      	ldrb	r3, [r2, #6]
    692e:	2101      	movs	r1, #1
    6930:	430b      	orrs	r3, r1
    6932:	7193      	strb	r3, [r2, #6]
    6934:	4b0d      	ldr	r3, [pc, #52]	; (696c <flash_read+0x84>)
    6936:	22a5      	movs	r2, #165	; 0xa5
    6938:	721a      	strb	r2, [r3, #8]
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    693a:	68fb      	ldr	r3, [r7, #12]
    693c:	3302      	adds	r3, #2
    693e:	60fb      	str	r3, [r7, #12]
    6940:	2316      	movs	r3, #22
    6942:	18fb      	adds	r3, r7, r3
    6944:	2216      	movs	r2, #22
    6946:	18ba      	adds	r2, r7, r2
    6948:	8812      	ldrh	r2, [r2, #0]
    694a:	3202      	adds	r2, #2
    694c:	801a      	strh	r2, [r3, #0]
    694e:	2316      	movs	r3, #22
    6950:	18fa      	adds	r2, r7, r3
    6952:	1dbb      	adds	r3, r7, #6
    6954:	8812      	ldrh	r2, [r2, #0]
    6956:	881b      	ldrh	r3, [r3, #0]
    6958:	429a      	cmp	r2, r3
    695a:	d3d7      	bcc.n	690c <flash_read+0x24>
	}
	return(cnt);
    695c:	2316      	movs	r3, #22
    695e:	18fb      	adds	r3, r7, r3
    6960:	881b      	ldrh	r3, [r3, #0]
}
    6962:	0018      	movs	r0, r3
    6964:	46bd      	mov	sp, r7
    6966:	b006      	add	sp, #24
    6968:	bd80      	pop	{r7, pc}
    696a:	46c0      	nop			; (mov r8, r8)
    696c:	40001000 	.word	0x40001000

00006970 <flash_erase_row>:

void flash_erase_row(DWORD *dst) 
//-----------------------------------------------------------------------------
{
    6970:	b580      	push	{r7, lr}
    6972:	b082      	sub	sp, #8
    6974:	af00      	add	r7, sp, #0
    6976:	6078      	str	r0, [r7, #4]
while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6978:	46c0      	nop			; (mov r8, r8)
    697a:	4b0f      	ldr	r3, [pc, #60]	; (69b8 <flash_erase_row+0x48>)
    697c:	7d1b      	ldrb	r3, [r3, #20]
    697e:	07db      	lsls	r3, r3, #31
    6980:	0fdb      	lsrs	r3, r3, #31
    6982:	b2db      	uxtb	r3, r3
    6984:	2b00      	cmp	r3, #0
    6986:	d0f8      	beq.n	697a <flash_erase_row+0xa>

NVMCTRL->STATUS.reg=NVMCTRL_STATUS_MASK;
    6988:	4b0b      	ldr	r3, [pc, #44]	; (69b8 <flash_erase_row+0x48>)
    698a:	2220      	movs	r2, #32
    698c:	32ff      	adds	r2, #255	; 0xff
    698e:	831a      	strh	r2, [r3, #24]
*dst=0xFFFFFFFF;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	2201      	movs	r2, #1
    6994:	4252      	negs	r2, r2
    6996:	601a      	str	r2, [r3, #0]
NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    6998:	4b07      	ldr	r3, [pc, #28]	; (69b8 <flash_erase_row+0x48>)
    699a:	4a08      	ldr	r2, [pc, #32]	; (69bc <flash_erase_row+0x4c>)
    699c:	801a      	strh	r2, [r3, #0]

while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    699e:	46c0      	nop			; (mov r8, r8)
    69a0:	4b05      	ldr	r3, [pc, #20]	; (69b8 <flash_erase_row+0x48>)
    69a2:	7d1b      	ldrb	r3, [r3, #20]
    69a4:	07db      	lsls	r3, r3, #31
    69a6:	0fdb      	lsrs	r3, r3, #31
    69a8:	b2db      	uxtb	r3, r3
    69aa:	2b00      	cmp	r3, #0
    69ac:	d0f8      	beq.n	69a0 <flash_erase_row+0x30>
}
    69ae:	46c0      	nop			; (mov r8, r8)
    69b0:	46bd      	mov	sp, r7
    69b2:	b002      	add	sp, #8
    69b4:	bd80      	pop	{r7, pc}
    69b6:	46c0      	nop			; (mov r8, r8)
    69b8:	41004000 	.word	0x41004000
    69bc:	ffffa502 	.word	0xffffa502

000069c0 <flash_write_dword>:

void flash_write_dword(DWORD *dst,DWORD* val) 
//-----------------------------------------------------------------------------
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b082      	sub	sp, #8
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
    69c8:	6039      	str	r1, [r7, #0]
NVMCTRL->CTRLB.bit.MANW=0;
    69ca:	4a11      	ldr	r2, [pc, #68]	; (6a10 <flash_write_dword+0x50>)
    69cc:	6853      	ldr	r3, [r2, #4]
    69ce:	2180      	movs	r1, #128	; 0x80
    69d0:	438b      	bics	r3, r1
    69d2:	6053      	str	r3, [r2, #4]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    69d4:	4b0e      	ldr	r3, [pc, #56]	; (6a10 <flash_write_dword+0x50>)
    69d6:	4a0f      	ldr	r2, [pc, #60]	; (6a14 <flash_write_dword+0x54>)
    69d8:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	4b0c      	ldr	r3, [pc, #48]	; (6a10 <flash_write_dword+0x50>)
    69de:	7d1b      	ldrb	r3, [r3, #20]
    69e0:	07db      	lsls	r3, r3, #31
    69e2:	0fdb      	lsrs	r3, r3, #31
    69e4:	b2db      	uxtb	r3, r3
    69e6:	2b00      	cmp	r3, #0
    69e8:	d0f8      	beq.n	69dc <flash_write_dword+0x1c>

*dst=*val;
    69ea:	683b      	ldr	r3, [r7, #0]
    69ec:	681a      	ldr	r2, [r3, #0]
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	601a      	str	r2, [r3, #0]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    69f2:	4b07      	ldr	r3, [pc, #28]	; (6a10 <flash_write_dword+0x50>)
    69f4:	4a08      	ldr	r2, [pc, #32]	; (6a18 <flash_write_dword+0x58>)
    69f6:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69f8:	46c0      	nop			; (mov r8, r8)
    69fa:	4b05      	ldr	r3, [pc, #20]	; (6a10 <flash_write_dword+0x50>)
    69fc:	7d1b      	ldrb	r3, [r3, #20]
    69fe:	07db      	lsls	r3, r3, #31
    6a00:	0fdb      	lsrs	r3, r3, #31
    6a02:	b2db      	uxtb	r3, r3
    6a04:	2b00      	cmp	r3, #0
    6a06:	d0f8      	beq.n	69fa <flash_write_dword+0x3a>
}
    6a08:	46c0      	nop			; (mov r8, r8)
    6a0a:	46bd      	mov	sp, r7
    6a0c:	b002      	add	sp, #8
    6a0e:	bd80      	pop	{r7, pc}
    6a10:	41004000 	.word	0x41004000
    6a14:	ffffa544 	.word	0xffffa544
    6a18:	ffffa504 	.word	0xffffa504

00006a1c <gpio_init>:
#include "def.h"

void gpio_init (void)
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	af00      	add	r7, sp, #0
	//.............................................................................
	// LED ........................................................................
	//.............................................................................

	PORT->Group[1].OUTSET.reg=PORT_PB03;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a20:	4ac2      	ldr	r2, [pc, #776]	; (6d2c <gpio_init+0x310>)
    6a22:	2398      	movs	r3, #152	; 0x98
    6a24:	2108      	movs	r1, #8
    6a26:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIRSET.reg=PORT_PB03;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6a28:	4ac0      	ldr	r2, [pc, #768]	; (6d2c <gpio_init+0x310>)
    6a2a:	2388      	movs	r3, #136	; 0x88
    6a2c:	2108      	movs	r1, #8
    6a2e:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a30:	49be      	ldr	r1, [pc, #760]	; (6d2c <gpio_init+0x310>)
    6a32:	22c3      	movs	r2, #195	; 0xc3
    6a34:	5c8b      	ldrb	r3, [r1, r2]
    6a36:	2001      	movs	r0, #1
    6a38:	4383      	bics	r3, r0
    6a3a:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART1 SERCOM1_ALT ............................................................
	//.............................................................................
 
	// PA12 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA12;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a3c:	4bbb      	ldr	r3, [pc, #748]	; (6d2c <gpio_init+0x310>)
    6a3e:	2280      	movs	r2, #128	; 0x80
    6a40:	0152      	lsls	r2, r2, #5
    6a42:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA12;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6a44:	4bb9      	ldr	r3, [pc, #740]	; (6d2c <gpio_init+0x310>)
    6a46:	2280      	movs	r2, #128	; 0x80
    6a48:	0152      	lsls	r2, r2, #5
    6a4a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[12].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a4c:	49b7      	ldr	r1, [pc, #732]	; (6d2c <gpio_init+0x310>)
    6a4e:	224c      	movs	r2, #76	; 0x4c
    6a50:	5c8b      	ldrb	r3, [r1, r2]
    6a52:	2001      	movs	r0, #1
    6a54:	4383      	bics	r3, r0
    6a56:	548b      	strb	r3, [r1, r2]

	// PA00 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA00;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a58:	4bb4      	ldr	r3, [pc, #720]	; (6d2c <gpio_init+0x310>)
    6a5a:	2201      	movs	r2, #1
    6a5c:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA00;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6a5e:	4bb3      	ldr	r3, [pc, #716]	; (6d2c <gpio_init+0x310>)
    6a60:	2201      	movs	r2, #1
    6a62:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[0].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6a64:	49b1      	ldr	r1, [pc, #708]	; (6d2c <gpio_init+0x310>)
    6a66:	2240      	movs	r2, #64	; 0x40
    6a68:	5c8b      	ldrb	r3, [r1, r2]
    6a6a:	2001      	movs	r0, #1
    6a6c:	4303      	orrs	r3, r0
    6a6e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6a70:	49ae      	ldr	r1, [pc, #696]	; (6d2c <gpio_init+0x310>)
    6a72:	2230      	movs	r2, #48	; 0x30
    6a74:	5c8b      	ldrb	r3, [r1, r2]
    6a76:	200f      	movs	r0, #15
    6a78:	4383      	bics	r3, r0
    6a7a:	1c18      	adds	r0, r3, #0
    6a7c:	2303      	movs	r3, #3
    6a7e:	4303      	orrs	r3, r0
    6a80:	548b      	strb	r3, [r1, r2]

	// PA01 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA01;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6a82:	4baa      	ldr	r3, [pc, #680]	; (6d2c <gpio_init+0x310>)
    6a84:	2202      	movs	r2, #2
    6a86:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[1].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6a88:	49a8      	ldr	r1, [pc, #672]	; (6d2c <gpio_init+0x310>)
    6a8a:	2241      	movs	r2, #65	; 0x41
    6a8c:	5c8b      	ldrb	r3, [r1, r2]
    6a8e:	2002      	movs	r0, #2
    6a90:	4303      	orrs	r3, r0
    6a92:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[1].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6a94:	49a5      	ldr	r1, [pc, #660]	; (6d2c <gpio_init+0x310>)
    6a96:	2241      	movs	r2, #65	; 0x41
    6a98:	5c8b      	ldrb	r3, [r1, r2]
    6a9a:	2001      	movs	r0, #1
    6a9c:	4303      	orrs	r3, r0
    6a9e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6aa0:	49a2      	ldr	r1, [pc, #648]	; (6d2c <gpio_init+0x310>)
    6aa2:	2230      	movs	r2, #48	; 0x30
    6aa4:	5c8b      	ldrb	r3, [r1, r2]
    6aa6:	200f      	movs	r0, #15
    6aa8:	4003      	ands	r3, r0
    6aaa:	1c18      	adds	r0, r3, #0
    6aac:	2330      	movs	r3, #48	; 0x30
    6aae:	4303      	orrs	r3, r0
    6ab0:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART2 SERCOM0_ALT ............................................................
	//.............................................................................
	
	// PA13 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA13;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ab2:	4b9e      	ldr	r3, [pc, #632]	; (6d2c <gpio_init+0x310>)
    6ab4:	2280      	movs	r2, #128	; 0x80
    6ab6:	0192      	lsls	r2, r2, #6
    6ab8:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA13;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6aba:	4b9c      	ldr	r3, [pc, #624]	; (6d2c <gpio_init+0x310>)
    6abc:	2280      	movs	r2, #128	; 0x80
    6abe:	0192      	lsls	r2, r2, #6
    6ac0:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[13].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6ac2:	499a      	ldr	r1, [pc, #616]	; (6d2c <gpio_init+0x310>)
    6ac4:	224d      	movs	r2, #77	; 0x4d
    6ac6:	5c8b      	ldrb	r3, [r1, r2]
    6ac8:	2001      	movs	r0, #1
    6aca:	4383      	bics	r3, r0
    6acc:	548b      	strb	r3, [r1, r2]

	// PA04 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA04;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ace:	4b97      	ldr	r3, [pc, #604]	; (6d2c <gpio_init+0x310>)
    6ad0:	2210      	movs	r2, #16
    6ad2:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA04;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6ad4:	4b95      	ldr	r3, [pc, #596]	; (6d2c <gpio_init+0x310>)
    6ad6:	2210      	movs	r2, #16
    6ad8:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[4].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ada:	4994      	ldr	r1, [pc, #592]	; (6d2c <gpio_init+0x310>)
    6adc:	2244      	movs	r2, #68	; 0x44
    6ade:	5c8b      	ldrb	r3, [r1, r2]
    6ae0:	2001      	movs	r0, #1
    6ae2:	4303      	orrs	r3, r0
    6ae4:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6ae6:	4991      	ldr	r1, [pc, #580]	; (6d2c <gpio_init+0x310>)
    6ae8:	2232      	movs	r2, #50	; 0x32
    6aea:	5c8b      	ldrb	r3, [r1, r2]
    6aec:	200f      	movs	r0, #15
    6aee:	4383      	bics	r3, r0
    6af0:	1c18      	adds	r0, r3, #0
    6af2:	2303      	movs	r3, #3
    6af4:	4303      	orrs	r3, r0
    6af6:	548b      	strb	r3, [r1, r2]

	// PA05 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA05;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6af8:	4b8c      	ldr	r3, [pc, #560]	; (6d2c <gpio_init+0x310>)
    6afa:	2220      	movs	r2, #32
    6afc:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[5].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6afe:	498b      	ldr	r1, [pc, #556]	; (6d2c <gpio_init+0x310>)
    6b00:	2245      	movs	r2, #69	; 0x45
    6b02:	5c8b      	ldrb	r3, [r1, r2]
    6b04:	2002      	movs	r0, #2
    6b06:	4303      	orrs	r3, r0
    6b08:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[5].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b0a:	4988      	ldr	r1, [pc, #544]	; (6d2c <gpio_init+0x310>)
    6b0c:	2245      	movs	r2, #69	; 0x45
    6b0e:	5c8b      	ldrb	r3, [r1, r2]
    6b10:	2001      	movs	r0, #1
    6b12:	4303      	orrs	r3, r0
    6b14:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6b16:	4985      	ldr	r1, [pc, #532]	; (6d2c <gpio_init+0x310>)
    6b18:	2232      	movs	r2, #50	; 0x32
    6b1a:	5c8b      	ldrb	r3, [r1, r2]
    6b1c:	200f      	movs	r0, #15
    6b1e:	4003      	ands	r3, r0
    6b20:	1c18      	adds	r0, r3, #0
    6b22:	2330      	movs	r3, #48	; 0x30
    6b24:	4303      	orrs	r3, r0
    6b26:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART3 SERCOM2_ALT ............................................................
	//.............................................................................
		
	// PA14 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA14;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b28:	4b80      	ldr	r3, [pc, #512]	; (6d2c <gpio_init+0x310>)
    6b2a:	2280      	movs	r2, #128	; 0x80
    6b2c:	01d2      	lsls	r2, r2, #7
    6b2e:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA14;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b30:	4b7e      	ldr	r3, [pc, #504]	; (6d2c <gpio_init+0x310>)
    6b32:	2280      	movs	r2, #128	; 0x80
    6b34:	01d2      	lsls	r2, r2, #7
    6b36:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[14].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6b38:	497c      	ldr	r1, [pc, #496]	; (6d2c <gpio_init+0x310>)
    6b3a:	224e      	movs	r2, #78	; 0x4e
    6b3c:	5c8b      	ldrb	r3, [r1, r2]
    6b3e:	2001      	movs	r0, #1
    6b40:	4383      	bics	r3, r0
    6b42:	548b      	strb	r3, [r1, r2]

	// PA08 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA08;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b44:	4b79      	ldr	r3, [pc, #484]	; (6d2c <gpio_init+0x310>)
    6b46:	2280      	movs	r2, #128	; 0x80
    6b48:	0052      	lsls	r2, r2, #1
    6b4a:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA08;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b4c:	4b77      	ldr	r3, [pc, #476]	; (6d2c <gpio_init+0x310>)
    6b4e:	2280      	movs	r2, #128	; 0x80
    6b50:	0052      	lsls	r2, r2, #1
    6b52:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[8].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b54:	4975      	ldr	r1, [pc, #468]	; (6d2c <gpio_init+0x310>)
    6b56:	2248      	movs	r2, #72	; 0x48
    6b58:	5c8b      	ldrb	r3, [r1, r2]
    6b5a:	2001      	movs	r0, #1
    6b5c:	4303      	orrs	r3, r0
    6b5e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b60:	4972      	ldr	r1, [pc, #456]	; (6d2c <gpio_init+0x310>)
    6b62:	2234      	movs	r2, #52	; 0x34
    6b64:	5c8b      	ldrb	r3, [r1, r2]
    6b66:	200f      	movs	r0, #15
    6b68:	4383      	bics	r3, r0
    6b6a:	1c18      	adds	r0, r3, #0
    6b6c:	2303      	movs	r3, #3
    6b6e:	4303      	orrs	r3, r0
    6b70:	548b      	strb	r3, [r1, r2]

	// PA09 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA09;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6b72:	4b6e      	ldr	r3, [pc, #440]	; (6d2c <gpio_init+0x310>)
    6b74:	2280      	movs	r2, #128	; 0x80
    6b76:	0092      	lsls	r2, r2, #2
    6b78:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[9].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6b7a:	496c      	ldr	r1, [pc, #432]	; (6d2c <gpio_init+0x310>)
    6b7c:	2249      	movs	r2, #73	; 0x49
    6b7e:	5c8b      	ldrb	r3, [r1, r2]
    6b80:	2002      	movs	r0, #2
    6b82:	4303      	orrs	r3, r0
    6b84:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[9].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b86:	4969      	ldr	r1, [pc, #420]	; (6d2c <gpio_init+0x310>)
    6b88:	2249      	movs	r2, #73	; 0x49
    6b8a:	5c8b      	ldrb	r3, [r1, r2]
    6b8c:	2001      	movs	r0, #1
    6b8e:	4303      	orrs	r3, r0
    6b90:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6b92:	4966      	ldr	r1, [pc, #408]	; (6d2c <gpio_init+0x310>)
    6b94:	2234      	movs	r2, #52	; 0x34
    6b96:	5c8b      	ldrb	r3, [r1, r2]
    6b98:	200f      	movs	r0, #15
    6b9a:	4003      	ands	r3, r0
    6b9c:	1c18      	adds	r0, r3, #0
    6b9e:	2330      	movs	r3, #48	; 0x30
    6ba0:	4303      	orrs	r3, r0
    6ba2:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART4 SERCOM3_ALT ............................................................
	//.............................................................................
		
	// PA15 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA15;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ba4:	4b61      	ldr	r3, [pc, #388]	; (6d2c <gpio_init+0x310>)
    6ba6:	2280      	movs	r2, #128	; 0x80
    6ba8:	0212      	lsls	r2, r2, #8
    6baa:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA15;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bac:	4b5f      	ldr	r3, [pc, #380]	; (6d2c <gpio_init+0x310>)
    6bae:	2280      	movs	r2, #128	; 0x80
    6bb0:	0212      	lsls	r2, r2, #8
    6bb2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[15].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6bb4:	495d      	ldr	r1, [pc, #372]	; (6d2c <gpio_init+0x310>)
    6bb6:	224f      	movs	r2, #79	; 0x4f
    6bb8:	5c8b      	ldrb	r3, [r1, r2]
    6bba:	2001      	movs	r0, #1
    6bbc:	4383      	bics	r3, r0
    6bbe:	548b      	strb	r3, [r1, r2]

	// PA16 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA16;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6bc0:	4b5a      	ldr	r3, [pc, #360]	; (6d2c <gpio_init+0x310>)
    6bc2:	2280      	movs	r2, #128	; 0x80
    6bc4:	0252      	lsls	r2, r2, #9
    6bc6:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA16;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bc8:	4b58      	ldr	r3, [pc, #352]	; (6d2c <gpio_init+0x310>)
    6bca:	2280      	movs	r2, #128	; 0x80
    6bcc:	0252      	lsls	r2, r2, #9
    6bce:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[16].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6bd0:	4956      	ldr	r1, [pc, #344]	; (6d2c <gpio_init+0x310>)
    6bd2:	2250      	movs	r2, #80	; 0x50
    6bd4:	5c8b      	ldrb	r3, [r1, r2]
    6bd6:	2001      	movs	r0, #1
    6bd8:	4303      	orrs	r3, r0
    6bda:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6bdc:	4953      	ldr	r1, [pc, #332]	; (6d2c <gpio_init+0x310>)
    6bde:	2238      	movs	r2, #56	; 0x38
    6be0:	5c8b      	ldrb	r3, [r1, r2]
    6be2:	200f      	movs	r0, #15
    6be4:	4383      	bics	r3, r0
    6be6:	1c18      	adds	r0, r3, #0
    6be8:	2303      	movs	r3, #3
    6bea:	4303      	orrs	r3, r0
    6bec:	548b      	strb	r3, [r1, r2]

	// PA17 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA17;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6bee:	4b4f      	ldr	r3, [pc, #316]	; (6d2c <gpio_init+0x310>)
    6bf0:	2280      	movs	r2, #128	; 0x80
    6bf2:	0292      	lsls	r2, r2, #10
    6bf4:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[17].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6bf6:	494d      	ldr	r1, [pc, #308]	; (6d2c <gpio_init+0x310>)
    6bf8:	2251      	movs	r2, #81	; 0x51
    6bfa:	5c8b      	ldrb	r3, [r1, r2]
    6bfc:	2002      	movs	r0, #2
    6bfe:	4303      	orrs	r3, r0
    6c00:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[17].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c02:	494a      	ldr	r1, [pc, #296]	; (6d2c <gpio_init+0x310>)
    6c04:	2251      	movs	r2, #81	; 0x51
    6c06:	5c8b      	ldrb	r3, [r1, r2]
    6c08:	2001      	movs	r0, #1
    6c0a:	4303      	orrs	r3, r0
    6c0c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6c0e:	4947      	ldr	r1, [pc, #284]	; (6d2c <gpio_init+0x310>)
    6c10:	2238      	movs	r2, #56	; 0x38
    6c12:	5c8b      	ldrb	r3, [r1, r2]
    6c14:	200f      	movs	r0, #15
    6c16:	4003      	ands	r3, r0
    6c18:	1c18      	adds	r0, r3, #0
    6c1a:	2330      	movs	r3, #48	; 0x30
    6c1c:	4303      	orrs	r3, r0
    6c1e:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// SPI SERCOM5_ALT ....................................................................
	//.............................................................................*/

	// PA23 - SPI_MOSI (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA23;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c20:	4b42      	ldr	r3, [pc, #264]	; (6d2c <gpio_init+0x310>)
    6c22:	2280      	movs	r2, #128	; 0x80
    6c24:	0412      	lsls	r2, r2, #16
    6c26:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA23;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c28:	4b40      	ldr	r3, [pc, #256]	; (6d2c <gpio_init+0x310>)
    6c2a:	2280      	movs	r2, #128	; 0x80
    6c2c:	0412      	lsls	r2, r2, #16
    6c2e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[23].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c30:	493e      	ldr	r1, [pc, #248]	; (6d2c <gpio_init+0x310>)
    6c32:	2257      	movs	r2, #87	; 0x57
    6c34:	5c8b      	ldrb	r3, [r1, r2]
    6c36:	2001      	movs	r0, #1
    6c38:	4303      	orrs	r3, r0
    6c3a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXO=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6c3c:	493b      	ldr	r1, [pc, #236]	; (6d2c <gpio_init+0x310>)
    6c3e:	223b      	movs	r2, #59	; 0x3b
    6c40:	5c8b      	ldrb	r3, [r1, r2]
    6c42:	200f      	movs	r0, #15
    6c44:	4003      	ands	r3, r0
    6c46:	1c18      	adds	r0, r3, #0
    6c48:	2330      	movs	r3, #48	; 0x30
    6c4a:	4303      	orrs	r3, r0
    6c4c:	548b      	strb	r3, [r1, r2]

	// PA22 - SPI_MISO (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA22;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c4e:	4b37      	ldr	r3, [pc, #220]	; (6d2c <gpio_init+0x310>)
    6c50:	2280      	movs	r2, #128	; 0x80
    6c52:	03d2      	lsls	r2, r2, #15
    6c54:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[22].bit.INEN  =0x01; // Bit  17   - INEN:   Input Enable
    6c56:	4935      	ldr	r1, [pc, #212]	; (6d2c <gpio_init+0x310>)
    6c58:	2256      	movs	r2, #86	; 0x56
    6c5a:	5c8b      	ldrb	r3, [r1, r2]
    6c5c:	2002      	movs	r0, #2
    6c5e:	4303      	orrs	r3, r0
    6c60:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c62:	4932      	ldr	r1, [pc, #200]	; (6d2c <gpio_init+0x310>)
    6c64:	2256      	movs	r2, #86	; 0x56
    6c66:	5c8b      	ldrb	r3, [r1, r2]
    6c68:	2001      	movs	r0, #1
    6c6a:	4303      	orrs	r3, r0
    6c6c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXE=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6c6e:	492f      	ldr	r1, [pc, #188]	; (6d2c <gpio_init+0x310>)
    6c70:	223b      	movs	r2, #59	; 0x3b
    6c72:	5c8b      	ldrb	r3, [r1, r2]
    6c74:	200f      	movs	r0, #15
    6c76:	4383      	bics	r3, r0
    6c78:	1c18      	adds	r0, r3, #0
    6c7a:	2303      	movs	r3, #3
    6c7c:	4303      	orrs	r3, r0
    6c7e:	548b      	strb	r3, [r1, r2]

	// PA24 - SPI_SCK (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA25;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c80:	4b2a      	ldr	r3, [pc, #168]	; (6d2c <gpio_init+0x310>)
    6c82:	2280      	movs	r2, #128	; 0x80
    6c84:	0492      	lsls	r2, r2, #18
    6c86:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA25;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c88:	4b28      	ldr	r3, [pc, #160]	; (6d2c <gpio_init+0x310>)
    6c8a:	2280      	movs	r2, #128	; 0x80
    6c8c:	0492      	lsls	r2, r2, #18
    6c8e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[25].bit.PMUXEN=0x01; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c90:	4926      	ldr	r1, [pc, #152]	; (6d2c <gpio_init+0x310>)
    6c92:	2259      	movs	r2, #89	; 0x59
    6c94:	5c8b      	ldrb	r3, [r1, r2]
    6c96:	2001      	movs	r0, #1
    6c98:	4303      	orrs	r3, r0
    6c9a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [12].bit.PMUXO=3;  // Bits 3:0  - PMUXO: Peripheral Multiplexing Odd (5: Peripheral function F selected)
    6c9c:	4923      	ldr	r1, [pc, #140]	; (6d2c <gpio_init+0x310>)
    6c9e:	223c      	movs	r2, #60	; 0x3c
    6ca0:	5c8b      	ldrb	r3, [r1, r2]
    6ca2:	200f      	movs	r0, #15
    6ca4:	4003      	ands	r3, r0
    6ca6:	1c18      	adds	r0, r3, #0
    6ca8:	2330      	movs	r3, #48	; 0x30
    6caa:	4303      	orrs	r3, r0
    6cac:	548b      	strb	r3, [r1, r2]

	// PA25 - SPI_CS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA24;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6cae:	4b1f      	ldr	r3, [pc, #124]	; (6d2c <gpio_init+0x310>)
    6cb0:	2280      	movs	r2, #128	; 0x80
    6cb2:	0452      	lsls	r2, r2, #17
    6cb4:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA24;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cb6:	4b1d      	ldr	r3, [pc, #116]	; (6d2c <gpio_init+0x310>)
    6cb8:	2280      	movs	r2, #128	; 0x80
    6cba:	0452      	lsls	r2, r2, #17
    6cbc:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[24].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6cbe:	491b      	ldr	r1, [pc, #108]	; (6d2c <gpio_init+0x310>)
    6cc0:	2258      	movs	r2, #88	; 0x58
    6cc2:	5c8b      	ldrb	r3, [r1, r2]
    6cc4:	2001      	movs	r0, #1
    6cc6:	4383      	bics	r3, r0
    6cc8:	548b      	strb	r3, [r1, r2]
	
	// PA19 - SPI_INT (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA19;       // Bits 31:0 - DIRCLR: Port Data Direction Clear
    6cca:	4b18      	ldr	r3, [pc, #96]	; (6d2c <gpio_init+0x310>)
    6ccc:	2280      	movs	r2, #128	; 0x80
    6cce:	0312      	lsls	r2, r2, #12
    6cd0:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[19].bit.PMUXEN=0x00; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cd2:	4916      	ldr	r1, [pc, #88]	; (6d2c <gpio_init+0x310>)
    6cd4:	2253      	movs	r2, #83	; 0x53
    6cd6:	5c8b      	ldrb	r3, [r1, r2]
    6cd8:	2001      	movs	r0, #1
    6cda:	4383      	bics	r3, r0
    6cdc:	548b      	strb	r3, [r1, r2]

    // PA18 - SPI_RESET (Output)
    PORT->Group[0].OUTSET.reg=PORT_PA18;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6cde:	4b13      	ldr	r3, [pc, #76]	; (6d2c <gpio_init+0x310>)
    6ce0:	2280      	movs	r2, #128	; 0x80
    6ce2:	02d2      	lsls	r2, r2, #11
    6ce4:	619a      	str	r2, [r3, #24]
    PORT->Group[0].DIRSET.reg=PORT_PA18;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6ce6:	4b11      	ldr	r3, [pc, #68]	; (6d2c <gpio_init+0x310>)
    6ce8:	2280      	movs	r2, #128	; 0x80
    6cea:	02d2      	lsls	r2, r2, #11
    6cec:	609a      	str	r2, [r3, #8]
    PORT->Group[0].PINCFG[18].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)*/  
    6cee:	490f      	ldr	r1, [pc, #60]	; (6d2c <gpio_init+0x310>)
    6cf0:	2252      	movs	r2, #82	; 0x52
    6cf2:	5c8b      	ldrb	r3, [r1, r2]
    6cf4:	2001      	movs	r0, #1
    6cf6:	4383      	bics	r3, r0
    6cf8:	548b      	strb	r3, [r1, r2]
	PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;  
    6cfa:	23c0      	movs	r3, #192	; 0xc0
    6cfc:	05db      	lsls	r3, r3, #23
    6cfe:	2280      	movs	r2, #128	; 0x80
    6d00:	02d2      	lsls	r2, r2, #11
    6d02:	619a      	str	r2, [r3, #24]
	/*
	//.............................................................................
	// Gerkon ....................................................................
	//.............................................................................*/
	
	PORT->Group[1].DIRCLR.reg=PORT_PB23;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6d04:	4909      	ldr	r1, [pc, #36]	; (6d2c <gpio_init+0x310>)
    6d06:	2284      	movs	r2, #132	; 0x84
    6d08:	2380      	movs	r3, #128	; 0x80
    6d0a:	041b      	lsls	r3, r3, #16
    6d0c:	508b      	str	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6d0e:	4907      	ldr	r1, [pc, #28]	; (6d2c <gpio_init+0x310>)
    6d10:	22d7      	movs	r2, #215	; 0xd7
    6d12:	5c8b      	ldrb	r3, [r1, r2]
    6d14:	2002      	movs	r0, #2
    6d16:	4303      	orrs	r3, r0
    6d18:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.PMUXEN=0x00;
    6d1a:	4904      	ldr	r1, [pc, #16]	; (6d2c <gpio_init+0x310>)
    6d1c:	22d7      	movs	r2, #215	; 0xd7
    6d1e:	5c8b      	ldrb	r3, [r1, r2]
    6d20:	2001      	movs	r0, #1
    6d22:	4383      	bics	r3, r0
    6d24:	548b      	strb	r3, [r1, r2]
}
    6d26:	46c0      	nop			; (mov r8, r8)
    6d28:	46bd      	mov	sp, r7
    6d2a:	bd80      	pop	{r7, pc}
    6d2c:	41004400 	.word	0x41004400

00006d30 <pin_ctrl>:

DWORD pin_ctrl(BYTE device, BYTE  numb, BYTE mod)
{
    6d30:	b590      	push	{r4, r7, lr}
    6d32:	b083      	sub	sp, #12
    6d34:	af00      	add	r7, sp, #0
    6d36:	0004      	movs	r4, r0
    6d38:	0008      	movs	r0, r1
    6d3a:	0011      	movs	r1, r2
    6d3c:	1dfb      	adds	r3, r7, #7
    6d3e:	1c22      	adds	r2, r4, #0
    6d40:	701a      	strb	r2, [r3, #0]
    6d42:	1dbb      	adds	r3, r7, #6
    6d44:	1c02      	adds	r2, r0, #0
    6d46:	701a      	strb	r2, [r3, #0]
    6d48:	1d7b      	adds	r3, r7, #5
    6d4a:	1c0a      	adds	r2, r1, #0
    6d4c:	701a      	strb	r2, [r3, #0]
	switch(device << 8 | numb << 4 | mod)
    6d4e:	1dfb      	adds	r3, r7, #7
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	021a      	lsls	r2, r3, #8
    6d54:	1dbb      	adds	r3, r7, #6
    6d56:	781b      	ldrb	r3, [r3, #0]
    6d58:	011b      	lsls	r3, r3, #4
    6d5a:	431a      	orrs	r2, r3
    6d5c:	1d7b      	adds	r3, r7, #5
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	4313      	orrs	r3, r2
    6d62:	2b22      	cmp	r3, #34	; 0x22
    6d64:	d100      	bne.n	6d68 <pin_ctrl+0x38>
    6d66:	e067      	b.n	6e38 <pin_ctrl+0x108>
    6d68:	dc11      	bgt.n	6d8e <pin_ctrl+0x5e>
    6d6a:	2b10      	cmp	r3, #16
    6d6c:	d043      	beq.n	6df6 <pin_ctrl+0xc6>
    6d6e:	dc06      	bgt.n	6d7e <pin_ctrl+0x4e>
    6d70:	2b01      	cmp	r3, #1
    6d72:	d032      	beq.n	6dda <pin_ctrl+0xaa>
    6d74:	2b02      	cmp	r3, #2
    6d76:	d037      	beq.n	6de8 <pin_ctrl+0xb8>
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d028      	beq.n	6dce <pin_ctrl+0x9e>
    6d7c:	e09a      	b.n	6eb4 <pin_ctrl+0x184>
    6d7e:	2b12      	cmp	r3, #18
    6d80:	d046      	beq.n	6e10 <pin_ctrl+0xe0>
    6d82:	db3e      	blt.n	6e02 <pin_ctrl+0xd2>
    6d84:	2b20      	cmp	r3, #32
    6d86:	d04a      	beq.n	6e1e <pin_ctrl+0xee>
    6d88:	2b21      	cmp	r3, #33	; 0x21
    6d8a:	d04e      	beq.n	6e2a <pin_ctrl+0xfa>
    6d8c:	e092      	b.n	6eb4 <pin_ctrl+0x184>
    6d8e:	2280      	movs	r2, #128	; 0x80
    6d90:	0052      	lsls	r2, r2, #1
    6d92:	4293      	cmp	r3, r2
    6d94:	d100      	bne.n	6d98 <pin_ctrl+0x68>
    6d96:	e071      	b.n	6e7c <pin_ctrl+0x14c>
    6d98:	2280      	movs	r2, #128	; 0x80
    6d9a:	0052      	lsls	r2, r2, #1
    6d9c:	4293      	cmp	r3, r2
    6d9e:	dc06      	bgt.n	6dae <pin_ctrl+0x7e>
    6da0:	2b31      	cmp	r3, #49	; 0x31
    6da2:	d056      	beq.n	6e52 <pin_ctrl+0x122>
    6da4:	2b32      	cmp	r3, #50	; 0x32
    6da6:	d05b      	beq.n	6e60 <pin_ctrl+0x130>
    6da8:	2b30      	cmp	r3, #48	; 0x30
    6daa:	d04c      	beq.n	6e46 <pin_ctrl+0x116>
    6dac:	e082      	b.n	6eb4 <pin_ctrl+0x184>
    6dae:	2281      	movs	r2, #129	; 0x81
    6db0:	0052      	lsls	r2, r2, #1
    6db2:	4293      	cmp	r3, r2
    6db4:	d069      	beq.n	6e8a <pin_ctrl+0x15a>
    6db6:	2281      	movs	r2, #129	; 0x81
    6db8:	0052      	lsls	r2, r2, #1
    6dba:	4293      	cmp	r3, r2
    6dbc:	db57      	blt.n	6e6e <pin_ctrl+0x13e>
    6dbe:	4a3f      	ldr	r2, [pc, #252]	; (6ebc <pin_ctrl+0x18c>)
    6dc0:	4293      	cmp	r3, r2
    6dc2:	d100      	bne.n	6dc6 <pin_ctrl+0x96>
    6dc4:	e06f      	b.n	6ea6 <pin_ctrl+0x176>
    6dc6:	4a3e      	ldr	r2, [pc, #248]	; (6ec0 <pin_ctrl+0x190>)
    6dc8:	4293      	cmp	r3, r2
    6dca:	d065      	beq.n	6e98 <pin_ctrl+0x168>
    6dcc:	e072      	b.n	6eb4 <pin_ctrl+0x184>
	{
		//RTS
		case (RTS << 8| PORT485_0 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA15);
    6dce:	4b3d      	ldr	r3, [pc, #244]	; (6ec4 <pin_ctrl+0x194>)
    6dd0:	6a1a      	ldr	r2, [r3, #32]
    6dd2:	2380      	movs	r3, #128	; 0x80
    6dd4:	021b      	lsls	r3, r3, #8
    6dd6:	4013      	ands	r3, r2
    6dd8:	e06c      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA15;return 0;
    6dda:	23c0      	movs	r3, #192	; 0xc0
    6ddc:	05db      	lsls	r3, r3, #23
    6dde:	2280      	movs	r2, #128	; 0x80
    6de0:	0212      	lsls	r2, r2, #8
    6de2:	619a      	str	r2, [r3, #24]
    6de4:	2300      	movs	r3, #0
    6de6:	e065      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA15;return 0;
    6de8:	23c0      	movs	r3, #192	; 0xc0
    6dea:	05db      	lsls	r3, r3, #23
    6dec:	2280      	movs	r2, #128	; 0x80
    6dee:	0212      	lsls	r2, r2, #8
    6df0:	615a      	str	r2, [r3, #20]
    6df2:	2300      	movs	r3, #0
    6df4:	e05e      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA14);
    6df6:	4b33      	ldr	r3, [pc, #204]	; (6ec4 <pin_ctrl+0x194>)
    6df8:	6a1a      	ldr	r2, [r3, #32]
    6dfa:	2380      	movs	r3, #128	; 0x80
    6dfc:	01db      	lsls	r3, r3, #7
    6dfe:	4013      	ands	r3, r2
    6e00:	e058      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA14;return 0;
    6e02:	23c0      	movs	r3, #192	; 0xc0
    6e04:	05db      	lsls	r3, r3, #23
    6e06:	2280      	movs	r2, #128	; 0x80
    6e08:	01d2      	lsls	r2, r2, #7
    6e0a:	619a      	str	r2, [r3, #24]
    6e0c:	2300      	movs	r3, #0
    6e0e:	e051      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA14;return 0;		
    6e10:	23c0      	movs	r3, #192	; 0xc0
    6e12:	05db      	lsls	r3, r3, #23
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	01d2      	lsls	r2, r2, #7
    6e18:	615a      	str	r2, [r3, #20]
    6e1a:	2300      	movs	r3, #0
    6e1c:	e04a      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA13);
    6e1e:	4b29      	ldr	r3, [pc, #164]	; (6ec4 <pin_ctrl+0x194>)
    6e20:	6a1a      	ldr	r2, [r3, #32]
    6e22:	2380      	movs	r3, #128	; 0x80
    6e24:	019b      	lsls	r3, r3, #6
    6e26:	4013      	ands	r3, r2
    6e28:	e044      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA13;return 0;
    6e2a:	23c0      	movs	r3, #192	; 0xc0
    6e2c:	05db      	lsls	r3, r3, #23
    6e2e:	2280      	movs	r2, #128	; 0x80
    6e30:	0192      	lsls	r2, r2, #6
    6e32:	619a      	str	r2, [r3, #24]
    6e34:	2300      	movs	r3, #0
    6e36:	e03d      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA13;return 0;				
    6e38:	23c0      	movs	r3, #192	; 0xc0
    6e3a:	05db      	lsls	r3, r3, #23
    6e3c:	2280      	movs	r2, #128	; 0x80
    6e3e:	0192      	lsls	r2, r2, #6
    6e40:	615a      	str	r2, [r3, #20]
    6e42:	2300      	movs	r3, #0
    6e44:	e036      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA12);
    6e46:	4b1f      	ldr	r3, [pc, #124]	; (6ec4 <pin_ctrl+0x194>)
    6e48:	6a1a      	ldr	r2, [r3, #32]
    6e4a:	2380      	movs	r3, #128	; 0x80
    6e4c:	015b      	lsls	r3, r3, #5
    6e4e:	4013      	ands	r3, r2
    6e50:	e030      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA12;return 0;
    6e52:	23c0      	movs	r3, #192	; 0xc0
    6e54:	05db      	lsls	r3, r3, #23
    6e56:	2280      	movs	r2, #128	; 0x80
    6e58:	0152      	lsls	r2, r2, #5
    6e5a:	619a      	str	r2, [r3, #24]
    6e5c:	2300      	movs	r3, #0
    6e5e:	e029      	b.n	6eb4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA12;return 0;
    6e60:	23c0      	movs	r3, #192	; 0xc0
    6e62:	05db      	lsls	r3, r3, #23
    6e64:	2280      	movs	r2, #128	; 0x80
    6e66:	0152      	lsls	r2, r2, #5
    6e68:	615a      	str	r2, [r3, #20]
    6e6a:	2300      	movs	r3, #0
    6e6c:	e022      	b.n	6eb4 <pin_ctrl+0x184>

		//LED TX
		case (LED << 8| PWR << 4| ON):		PORT_IOBUS->Group[1].OUTCLR.reg=PORT_PB03;return 0; 
    6e6e:	23c0      	movs	r3, #192	; 0xc0
    6e70:	05db      	lsls	r3, r3, #23
    6e72:	2294      	movs	r2, #148	; 0x94
    6e74:	2108      	movs	r1, #8
    6e76:	5099      	str	r1, [r3, r2]
    6e78:	2300      	movs	r3, #0
    6e7a:	e01b      	b.n	6eb4 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| OFF):		PORT_IOBUS->Group[1].OUTSET.reg=PORT_PB03;return 0;
    6e7c:	23c0      	movs	r3, #192	; 0xc0
    6e7e:	05db      	lsls	r3, r3, #23
    6e80:	2298      	movs	r2, #152	; 0x98
    6e82:	2108      	movs	r1, #8
    6e84:	5099      	str	r1, [r3, r2]
    6e86:	2300      	movs	r3, #0
    6e88:	e014      	b.n	6eb4 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| TGL):		PORT_IOBUS->Group[1].OUTTGL.reg=PORT_PB03;return 0;
    6e8a:	23c0      	movs	r3, #192	; 0xc0
    6e8c:	05db      	lsls	r3, r3, #23
    6e8e:	229c      	movs	r2, #156	; 0x9c
    6e90:	2108      	movs	r1, #8
    6e92:	5099      	str	r1, [r3, r2]
    6e94:	2300      	movs	r3, #0
    6e96:	e00d      	b.n	6eb4 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| CLR):     PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA18;return 0;
    6e98:	23c0      	movs	r3, #192	; 0xc0
    6e9a:	05db      	lsls	r3, r3, #23
    6e9c:	2280      	movs	r2, #128	; 0x80
    6e9e:	02d2      	lsls	r2, r2, #11
    6ea0:	615a      	str	r2, [r3, #20]
    6ea2:	2300      	movs	r3, #0
    6ea4:	e006      	b.n	6eb4 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| SET):     PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;return 0;
    6ea6:	23c0      	movs	r3, #192	; 0xc0
    6ea8:	05db      	lsls	r3, r3, #23
    6eaa:	2280      	movs	r2, #128	; 0x80
    6eac:	02d2      	lsls	r2, r2, #11
    6eae:	619a      	str	r2, [r3, #24]
    6eb0:	2300      	movs	r3, #0
    6eb2:	e7ff      	b.n	6eb4 <pin_ctrl+0x184>
		
	}
}
    6eb4:	0018      	movs	r0, r3
    6eb6:	46bd      	mov	sp, r7
    6eb8:	b003      	add	sp, #12
    6eba:	bd90      	pop	{r4, r7, pc}
    6ebc:	00000201 	.word	0x00000201
    6ec0:	00000202 	.word	0x00000202
    6ec4:	41004400 	.word	0x41004400

00006ec8 <check_gerkon>:

void check_gerkon(void)
{
    6ec8:	b580      	push	{r7, lr}
    6eca:	af00      	add	r7, sp, #0
	static BYTE gerkon_st = 0;
	
	if (PORT->Group[1].IN.reg & PORT_PB23)	{if(PORT->Group[1].OUTSET.reg & PORT_PB03){pin_ctrl(LED,PWR,ON);} gerkon_st = 0; return;}
    6ecc:	4a1e      	ldr	r2, [pc, #120]	; (6f48 <check_gerkon+0x80>)
    6ece:	23a0      	movs	r3, #160	; 0xa0
    6ed0:	58d2      	ldr	r2, [r2, r3]
    6ed2:	2380      	movs	r3, #128	; 0x80
    6ed4:	041b      	lsls	r3, r3, #16
    6ed6:	4013      	ands	r3, r2
    6ed8:	d00e      	beq.n	6ef8 <check_gerkon+0x30>
    6eda:	4a1b      	ldr	r2, [pc, #108]	; (6f48 <check_gerkon+0x80>)
    6edc:	2398      	movs	r3, #152	; 0x98
    6ede:	58d3      	ldr	r3, [r2, r3]
    6ee0:	2208      	movs	r2, #8
    6ee2:	4013      	ands	r3, r2
    6ee4:	d004      	beq.n	6ef0 <check_gerkon+0x28>
    6ee6:	2201      	movs	r2, #1
    6ee8:	2100      	movs	r1, #0
    6eea:	2001      	movs	r0, #1
    6eec:	f7ff ff20 	bl	6d30 <pin_ctrl>
    6ef0:	4b16      	ldr	r3, [pc, #88]	; (6f4c <check_gerkon+0x84>)
    6ef2:	2200      	movs	r2, #0
    6ef4:	701a      	strb	r2, [r3, #0]
    6ef6:	e025      	b.n	6f44 <check_gerkon+0x7c>
	
	switch (gerkon_st)
    6ef8:	4b14      	ldr	r3, [pc, #80]	; (6f4c <check_gerkon+0x84>)
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d002      	beq.n	6f06 <check_gerkon+0x3e>
    6f00:	2b01      	cmp	r3, #1
    6f02:	d00c      	beq.n	6f1e <check_gerkon+0x56>
    6f04:	e01e      	b.n	6f44 <check_gerkon+0x7c>
	{
		case 0:
			pin_ctrl(LED,PWR,OFF);
    6f06:	2200      	movs	r2, #0
    6f08:	2100      	movs	r1, #0
    6f0a:	2001      	movs	r0, #1
    6f0c:	f7ff ff10 	bl	6d30 <pin_ctrl>
			ger_wait = 30;
    6f10:	4b0f      	ldr	r3, [pc, #60]	; (6f50 <check_gerkon+0x88>)
    6f12:	221e      	movs	r2, #30
    6f14:	601a      	str	r2, [r3, #0]
			gerkon_st = 1;
    6f16:	4b0d      	ldr	r3, [pc, #52]	; (6f4c <check_gerkon+0x84>)
    6f18:	2201      	movs	r2, #1
    6f1a:	701a      	strb	r2, [r3, #0]
		break;
    6f1c:	e012      	b.n	6f44 <check_gerkon+0x7c>
		case 1:
			if (ger_wait)	{return;}
    6f1e:	4b0c      	ldr	r3, [pc, #48]	; (6f50 <check_gerkon+0x88>)
    6f20:	681b      	ldr	r3, [r3, #0]
    6f22:	2b00      	cmp	r3, #0
    6f24:	d10d      	bne.n	6f42 <check_gerkon+0x7a>
			reset = 1; 
    6f26:	4b0b      	ldr	r3, [pc, #44]	; (6f54 <check_gerkon+0x8c>)
    6f28:	2201      	movs	r2, #1
    6f2a:	801a      	strh	r2, [r3, #0]
			cfg_default(); 
    6f2c:	4b0a      	ldr	r3, [pc, #40]	; (6f58 <check_gerkon+0x90>)
    6f2e:	4798      	blx	r3
			cfg_save();
    6f30:	4b0a      	ldr	r3, [pc, #40]	; (6f5c <check_gerkon+0x94>)
    6f32:	4798      	blx	r3
			log_clear();
    6f34:	4b0a      	ldr	r3, [pc, #40]	; (6f60 <check_gerkon+0x98>)
    6f36:	4798      	blx	r3
			acc(DROP);
    6f38:	2002      	movs	r0, #2
    6f3a:	4b0a      	ldr	r3, [pc, #40]	; (6f64 <check_gerkon+0x9c>)
    6f3c:	4798      	blx	r3
		break;
    6f3e:	46c0      	nop			; (mov r8, r8)
    6f40:	e000      	b.n	6f44 <check_gerkon+0x7c>
			if (ger_wait)	{return;}
    6f42:	46c0      	nop			; (mov r8, r8)
	}
    6f44:	46bd      	mov	sp, r7
    6f46:	bd80      	pop	{r7, pc}
    6f48:	41004400 	.word	0x41004400
    6f4c:	2000045b 	.word	0x2000045b
    6f50:	20000474 	.word	0x20000474
    6f54:	20002548 	.word	0x20002548
    6f58:	0000abcd 	.word	0x0000abcd
    6f5c:	0000afa5 	.word	0x0000afa5
    6f60:	00004731 	.word	0x00004731
    6f64:	00004215 	.word	0x00004215

00006f68 <iap_process>:

DWORD iap_key=0;

WORD iap_process(BYTE *buf, WORD size)
//--------------------------------------------------------------------------
{
    6f68:	b580      	push	{r7, lr}
    6f6a:	b084      	sub	sp, #16
    6f6c:	af00      	add	r7, sp, #0
    6f6e:	6078      	str	r0, [r7, #4]
    6f70:	000a      	movs	r2, r1
    6f72:	1cbb      	adds	r3, r7, #2
    6f74:	801a      	strh	r2, [r3, #0]
	DWORD page;
	WORD  wn = 0;
    6f76:	230a      	movs	r3, #10
    6f78:	18fb      	adds	r3, r7, r3
    6f7a:	2200      	movs	r2, #0
    6f7c:	801a      	strh	r2, [r3, #0]
	memcpy(iap_buf,buf,size);
    6f7e:	1cbb      	adds	r3, r7, #2
    6f80:	881a      	ldrh	r2, [r3, #0]
    6f82:	6879      	ldr	r1, [r7, #4]
    6f84:	4b8c      	ldr	r3, [pc, #560]	; (71b8 <iap_process+0x250>)
    6f86:	0018      	movs	r0, r3
    6f88:	4b8c      	ldr	r3, [pc, #560]	; (71bc <iap_process+0x254>)
    6f8a:	4798      	blx	r3
	static BYTE flwr=0;
	
	switch(iap_buf[wn])
    6f8c:	230a      	movs	r3, #10
    6f8e:	18fb      	adds	r3, r7, r3
    6f90:	881b      	ldrh	r3, [r3, #0]
    6f92:	4a89      	ldr	r2, [pc, #548]	; (71b8 <iap_process+0x250>)
    6f94:	5cd3      	ldrb	r3, [r2, r3]
    6f96:	2b03      	cmp	r3, #3
    6f98:	d040      	beq.n	701c <iap_process+0xb4>
    6f9a:	dc02      	bgt.n	6fa2 <iap_process+0x3a>
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d007      	beq.n	6fb0 <iap_process+0x48>
    6fa0:	e0f7      	b.n	7192 <iap_process+0x22a>
    6fa2:	2b05      	cmp	r3, #5
    6fa4:	d100      	bne.n	6fa8 <iap_process+0x40>
    6fa6:	e0a2      	b.n	70ee <iap_process+0x186>
    6fa8:	2b07      	cmp	r3, #7
    6faa:	d100      	bne.n	6fae <iap_process+0x46>
    6fac:	e0ca      	b.n	7144 <iap_process+0x1dc>
    6fae:	e0f0      	b.n	7192 <iap_process+0x22a>
	{
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6fb0:	23c0      	movs	r3, #192	; 0xc0
    6fb2:	025b      	lsls	r3, r3, #9
    6fb4:	60fb      	str	r3, [r7, #12]
    6fb6:	e01f      	b.n	6ff8 <iap_process+0x90>
											{
												wdt_reset();
    6fb8:	4b81      	ldr	r3, [pc, #516]	; (71c0 <iap_process+0x258>)
    6fba:	799b      	ldrb	r3, [r3, #6]
    6fbc:	07db      	lsls	r3, r3, #31
    6fbe:	0fdb      	lsrs	r3, r3, #31
    6fc0:	b2db      	uxtb	r3, r3
    6fc2:	2b01      	cmp	r3, #1
    6fc4:	d107      	bne.n	6fd6 <iap_process+0x6e>
    6fc6:	4a7e      	ldr	r2, [pc, #504]	; (71c0 <iap_process+0x258>)
    6fc8:	7993      	ldrb	r3, [r2, #6]
    6fca:	2101      	movs	r1, #1
    6fcc:	430b      	orrs	r3, r1
    6fce:	7193      	strb	r3, [r2, #6]
    6fd0:	4b7b      	ldr	r3, [pc, #492]	; (71c0 <iap_process+0x258>)
    6fd2:	22a5      	movs	r2, #165	; 0xa5
    6fd4:	721a      	strb	r2, [r3, #8]
												if(!flash_empty(page,256)){flash_erase_page(page);}
    6fd6:	2380      	movs	r3, #128	; 0x80
    6fd8:	005a      	lsls	r2, r3, #1
    6fda:	68fb      	ldr	r3, [r7, #12]
    6fdc:	0011      	movs	r1, r2
    6fde:	0018      	movs	r0, r3
    6fe0:	4b78      	ldr	r3, [pc, #480]	; (71c4 <iap_process+0x25c>)
    6fe2:	4798      	blx	r3
    6fe4:	1e03      	subs	r3, r0, #0
    6fe6:	d103      	bne.n	6ff0 <iap_process+0x88>
    6fe8:	68fb      	ldr	r3, [r7, #12]
    6fea:	0018      	movs	r0, r3
    6fec:	4b76      	ldr	r3, [pc, #472]	; (71c8 <iap_process+0x260>)
    6fee:	4798      	blx	r3
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6ff0:	68fb      	ldr	r3, [r7, #12]
    6ff2:	3301      	adds	r3, #1
    6ff4:	33ff      	adds	r3, #255	; 0xff
    6ff6:	60fb      	str	r3, [r7, #12]
    6ff8:	68fb      	ldr	r3, [r7, #12]
    6ffa:	4a74      	ldr	r2, [pc, #464]	; (71cc <iap_process+0x264>)
    6ffc:	4293      	cmp	r3, r2
    6ffe:	d9db      	bls.n	6fb8 <iap_process+0x50>
											}
											iap_buf[wn] = CM2_A_BOOTLOADER_READY;		wn += sizeof(BYTE );
    7000:	230a      	movs	r3, #10
    7002:	18fb      	adds	r3, r7, r3
    7004:	881b      	ldrh	r3, [r3, #0]
    7006:	4a6c      	ldr	r2, [pc, #432]	; (71b8 <iap_process+0x250>)
    7008:	2102      	movs	r1, #2
    700a:	54d1      	strb	r1, [r2, r3]
    700c:	230a      	movs	r3, #10
    700e:	18fb      	adds	r3, r7, r3
    7010:	220a      	movs	r2, #10
    7012:	18ba      	adds	r2, r7, r2
    7014:	8812      	ldrh	r2, [r2, #0]
    7016:	3201      	adds	r2, #1
    7018:	801a      	strh	r2, [r3, #0]
		
	break;
    701a:	e0ba      	b.n	7192 <iap_process+0x22a>
	case CM2_R_LOAD_DATA_PAGE   :			iap_buf[wn] = CM2_A_DATA_PAGE_LOAD;			wn += sizeof(BYTE );
    701c:	230a      	movs	r3, #10
    701e:	18fb      	adds	r3, r7, r3
    7020:	881b      	ldrh	r3, [r3, #0]
    7022:	4a65      	ldr	r2, [pc, #404]	; (71b8 <iap_process+0x250>)
    7024:	2104      	movs	r1, #4
    7026:	54d1      	strb	r1, [r2, r3]
    7028:	230a      	movs	r3, #10
    702a:	18fb      	adds	r3, r7, r3
    702c:	220a      	movs	r2, #10
    702e:	18ba      	adds	r2, r7, r2
    7030:	8812      	ldrh	r2, [r2, #0]
    7032:	3201      	adds	r2, #1
    7034:	801a      	strh	r2, [r3, #0]
											iap_size  =iap_buf[wn] | (iap_buf[wn+1]<<8);		wn += sizeof(WORD );
    7036:	230a      	movs	r3, #10
    7038:	18fb      	adds	r3, r7, r3
    703a:	881b      	ldrh	r3, [r3, #0]
    703c:	4a5e      	ldr	r2, [pc, #376]	; (71b8 <iap_process+0x250>)
    703e:	5cd3      	ldrb	r3, [r2, r3]
    7040:	b21a      	sxth	r2, r3
    7042:	230a      	movs	r3, #10
    7044:	18fb      	adds	r3, r7, r3
    7046:	881b      	ldrh	r3, [r3, #0]
    7048:	3301      	adds	r3, #1
    704a:	495b      	ldr	r1, [pc, #364]	; (71b8 <iap_process+0x250>)
    704c:	5ccb      	ldrb	r3, [r1, r3]
    704e:	021b      	lsls	r3, r3, #8
    7050:	b21b      	sxth	r3, r3
    7052:	4313      	orrs	r3, r2
    7054:	b21b      	sxth	r3, r3
    7056:	b29a      	uxth	r2, r3
    7058:	4b5d      	ldr	r3, [pc, #372]	; (71d0 <iap_process+0x268>)
    705a:	801a      	strh	r2, [r3, #0]
    705c:	230a      	movs	r3, #10
    705e:	18fb      	adds	r3, r7, r3
    7060:	220a      	movs	r2, #10
    7062:	18ba      	adds	r2, r7, r2
    7064:	8812      	ldrh	r2, [r2, #0]
    7066:	3202      	adds	r2, #2
    7068:	801a      	strh	r2, [r3, #0]
											iap_addr  =iap_buf[wn] | (iap_buf[wn+1]<<8) | (iap_buf[wn+2]<<16) | (iap_buf[wn+3]<<24);
    706a:	230a      	movs	r3, #10
    706c:	18fb      	adds	r3, r7, r3
    706e:	881b      	ldrh	r3, [r3, #0]
    7070:	4a51      	ldr	r2, [pc, #324]	; (71b8 <iap_process+0x250>)
    7072:	5cd3      	ldrb	r3, [r2, r3]
    7074:	0019      	movs	r1, r3
    7076:	230a      	movs	r3, #10
    7078:	18fb      	adds	r3, r7, r3
    707a:	881b      	ldrh	r3, [r3, #0]
    707c:	3301      	adds	r3, #1
    707e:	4a4e      	ldr	r2, [pc, #312]	; (71b8 <iap_process+0x250>)
    7080:	5cd3      	ldrb	r3, [r2, r3]
    7082:	021b      	lsls	r3, r3, #8
    7084:	000a      	movs	r2, r1
    7086:	431a      	orrs	r2, r3
    7088:	230a      	movs	r3, #10
    708a:	18fb      	adds	r3, r7, r3
    708c:	881b      	ldrh	r3, [r3, #0]
    708e:	3302      	adds	r3, #2
    7090:	4949      	ldr	r1, [pc, #292]	; (71b8 <iap_process+0x250>)
    7092:	5ccb      	ldrb	r3, [r1, r3]
    7094:	041b      	lsls	r3, r3, #16
    7096:	431a      	orrs	r2, r3
    7098:	230a      	movs	r3, #10
    709a:	18fb      	adds	r3, r7, r3
    709c:	881b      	ldrh	r3, [r3, #0]
    709e:	3303      	adds	r3, #3
    70a0:	4945      	ldr	r1, [pc, #276]	; (71b8 <iap_process+0x250>)
    70a2:	5ccb      	ldrb	r3, [r1, r3]
    70a4:	061b      	lsls	r3, r3, #24
    70a6:	4313      	orrs	r3, r2
    70a8:	001a      	movs	r2, r3
    70aa:	4b4a      	ldr	r3, [pc, #296]	; (71d4 <iap_process+0x26c>)
    70ac:	601a      	str	r2, [r3, #0]
											wn += sizeof(DWORD);
    70ae:	230a      	movs	r3, #10
    70b0:	18fb      	adds	r3, r7, r3
    70b2:	220a      	movs	r2, #10
    70b4:	18ba      	adds	r2, r7, r2
    70b6:	8812      	ldrh	r2, [r2, #0]
    70b8:	3204      	adds	r2, #4
    70ba:	801a      	strh	r2, [r3, #0]
											
											memcpy(iap_page,iap_buf+wn,iap_size);		wn += iap_size;
    70bc:	230a      	movs	r3, #10
    70be:	18fb      	adds	r3, r7, r3
    70c0:	881a      	ldrh	r2, [r3, #0]
    70c2:	4b3d      	ldr	r3, [pc, #244]	; (71b8 <iap_process+0x250>)
    70c4:	18d1      	adds	r1, r2, r3
    70c6:	4b42      	ldr	r3, [pc, #264]	; (71d0 <iap_process+0x268>)
    70c8:	881b      	ldrh	r3, [r3, #0]
    70ca:	001a      	movs	r2, r3
    70cc:	4b42      	ldr	r3, [pc, #264]	; (71d8 <iap_process+0x270>)
    70ce:	0018      	movs	r0, r3
    70d0:	4b3a      	ldr	r3, [pc, #232]	; (71bc <iap_process+0x254>)
    70d2:	4798      	blx	r3
    70d4:	4b3e      	ldr	r3, [pc, #248]	; (71d0 <iap_process+0x268>)
    70d6:	8819      	ldrh	r1, [r3, #0]
    70d8:	230a      	movs	r3, #10
    70da:	18fb      	adds	r3, r7, r3
    70dc:	220a      	movs	r2, #10
    70de:	18ba      	adds	r2, r7, r2
    70e0:	8812      	ldrh	r2, [r2, #0]
    70e2:	188a      	adds	r2, r1, r2
    70e4:	801a      	strh	r2, [r3, #0]
											
											flwr=1;
    70e6:	4b3d      	ldr	r3, [pc, #244]	; (71dc <iap_process+0x274>)
    70e8:	2201      	movs	r2, #1
    70ea:	701a      	strb	r2, [r3, #0]
	
	break;
    70ec:	e051      	b.n	7192 <iap_process+0x22a>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    70ee:	4b39      	ldr	r3, [pc, #228]	; (71d4 <iap_process+0x26c>)
    70f0:	681b      	ldr	r3, [r3, #0]
    70f2:	4a3b      	ldr	r2, [pc, #236]	; (71e0 <iap_process+0x278>)
    70f4:	4293      	cmp	r3, r2
    70f6:	d958      	bls.n	71aa <iap_process+0x242>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    70f8:	4b36      	ldr	r3, [pc, #216]	; (71d4 <iap_process+0x26c>)
    70fa:	681a      	ldr	r2, [r3, #0]
    70fc:	23c0      	movs	r3, #192	; 0xc0
    70fe:	025b      	lsls	r3, r3, #9
    7100:	429a      	cmp	r2, r3
    7102:	d854      	bhi.n	71ae <iap_process+0x246>
											
											if(flwr)
    7104:	4b35      	ldr	r3, [pc, #212]	; (71dc <iap_process+0x274>)
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	2b00      	cmp	r3, #0
    710a:	d00d      	beq.n	7128 <iap_process+0x1c0>
											{
												flash_write(iap_addr+IAP_SIZE,iap_page,iap_size);
    710c:	4b31      	ldr	r3, [pc, #196]	; (71d4 <iap_process+0x26c>)
    710e:	681b      	ldr	r3, [r3, #0]
    7110:	22a0      	movs	r2, #160	; 0xa0
    7112:	0252      	lsls	r2, r2, #9
    7114:	1898      	adds	r0, r3, r2
    7116:	4b2e      	ldr	r3, [pc, #184]	; (71d0 <iap_process+0x268>)
    7118:	881a      	ldrh	r2, [r3, #0]
    711a:	4b2f      	ldr	r3, [pc, #188]	; (71d8 <iap_process+0x270>)
    711c:	0019      	movs	r1, r3
    711e:	4b31      	ldr	r3, [pc, #196]	; (71e4 <iap_process+0x27c>)
    7120:	4798      	blx	r3
												flwr=0;
    7122:	4b2e      	ldr	r3, [pc, #184]	; (71dc <iap_process+0x274>)
    7124:	2200      	movs	r2, #0
    7126:	701a      	strb	r2, [r3, #0]
											}
											iap_buf[wn] = CM2_A_DATA_PAGE_UPDATE;		wn += sizeof(BYTE );
    7128:	230a      	movs	r3, #10
    712a:	18fb      	adds	r3, r7, r3
    712c:	881b      	ldrh	r3, [r3, #0]
    712e:	4a22      	ldr	r2, [pc, #136]	; (71b8 <iap_process+0x250>)
    7130:	2106      	movs	r1, #6
    7132:	54d1      	strb	r1, [r2, r3]
    7134:	230a      	movs	r3, #10
    7136:	18fb      	adds	r3, r7, r3
    7138:	220a      	movs	r2, #10
    713a:	18ba      	adds	r2, r7, r2
    713c:	8812      	ldrh	r2, [r2, #0]
    713e:	3201      	adds	r2, #1
    7140:	801a      	strh	r2, [r3, #0]
	break;
    7142:	e026      	b.n	7192 <iap_process+0x22a>
	case CM2_R_STOP_BOOTLOADER  :  			iap_key = IAP_VAL;
    7144:	4b28      	ldr	r3, [pc, #160]	; (71e8 <iap_process+0x280>)
    7146:	4a29      	ldr	r2, [pc, #164]	; (71ec <iap_process+0x284>)
    7148:	601a      	str	r2, [r3, #0]
											if(!flash_empty(IAP_KEY,256)){flash_erase_page(IAP_KEY);}
    714a:	2380      	movs	r3, #128	; 0x80
    714c:	005b      	lsls	r3, r3, #1
    714e:	4a28      	ldr	r2, [pc, #160]	; (71f0 <iap_process+0x288>)
    7150:	0019      	movs	r1, r3
    7152:	0010      	movs	r0, r2
    7154:	4b1b      	ldr	r3, [pc, #108]	; (71c4 <iap_process+0x25c>)
    7156:	4798      	blx	r3
    7158:	1e03      	subs	r3, r0, #0
    715a:	d103      	bne.n	7164 <iap_process+0x1fc>
    715c:	4b24      	ldr	r3, [pc, #144]	; (71f0 <iap_process+0x288>)
    715e:	0018      	movs	r0, r3
    7160:	4b19      	ldr	r3, [pc, #100]	; (71c8 <iap_process+0x260>)
    7162:	4798      	blx	r3
											flash_write(IAP_KEY,&iap_key,4);
    7164:	4b20      	ldr	r3, [pc, #128]	; (71e8 <iap_process+0x280>)
    7166:	4822      	ldr	r0, [pc, #136]	; (71f0 <iap_process+0x288>)
    7168:	2204      	movs	r2, #4
    716a:	0019      	movs	r1, r3
    716c:	4b1d      	ldr	r3, [pc, #116]	; (71e4 <iap_process+0x27c>)
    716e:	4798      	blx	r3
											
											iap_buf[wn] = CM2_A_BOOTLOADER_STOP;		wn += sizeof(BYTE );
    7170:	230a      	movs	r3, #10
    7172:	18fb      	adds	r3, r7, r3
    7174:	881b      	ldrh	r3, [r3, #0]
    7176:	4a10      	ldr	r2, [pc, #64]	; (71b8 <iap_process+0x250>)
    7178:	2108      	movs	r1, #8
    717a:	54d1      	strb	r1, [r2, r3]
    717c:	230a      	movs	r3, #10
    717e:	18fb      	adds	r3, r7, r3
    7180:	220a      	movs	r2, #10
    7182:	18ba      	adds	r2, r7, r2
    7184:	8812      	ldrh	r2, [r2, #0]
    7186:	3201      	adds	r2, #1
    7188:	801a      	strh	r2, [r3, #0]
											reset = TRUE;
    718a:	4b1a      	ldr	r3, [pc, #104]	; (71f4 <iap_process+0x28c>)
    718c:	2201      	movs	r2, #1
    718e:	801a      	strh	r2, [r3, #0]
	break;
    7190:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(buf,iap_buf,wn);
    7192:	230a      	movs	r3, #10
    7194:	18fb      	adds	r3, r7, r3
    7196:	881a      	ldrh	r2, [r3, #0]
    7198:	4907      	ldr	r1, [pc, #28]	; (71b8 <iap_process+0x250>)
    719a:	687b      	ldr	r3, [r7, #4]
    719c:	0018      	movs	r0, r3
    719e:	4b07      	ldr	r3, [pc, #28]	; (71bc <iap_process+0x254>)
    71a0:	4798      	blx	r3
	return	(wn);
    71a2:	230a      	movs	r3, #10
    71a4:	18fb      	adds	r3, r7, r3
    71a6:	881b      	ldrh	r3, [r3, #0]
    71a8:	e002      	b.n	71b0 <iap_process+0x248>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    71aa:	46c0      	nop			; (mov r8, r8)
    71ac:	e000      	b.n	71b0 <iap_process+0x248>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    71ae:	46c0      	nop			; (mov r8, r8)
}
    71b0:	0018      	movs	r0, r3
    71b2:	46bd      	mov	sp, r7
    71b4:	b004      	add	sp, #16
    71b6:	bd80      	pop	{r7, pc}
    71b8:	20002448 	.word	0x20002448
    71bc:	0000c7e1 	.word	0x0000c7e1
    71c0:	40001000 	.word	0x40001000
    71c4:	00006699 	.word	0x00006699
    71c8:	000066df 	.word	0x000066df
    71cc:	0002bfff 	.word	0x0002bfff
    71d0:	20000460 	.word	0x20000460
    71d4:	2000045c 	.word	0x2000045c
    71d8:	20002348 	.word	0x20002348
    71dc:	20000468 	.word	0x20000468
    71e0:	00003fff 	.word	0x00003fff
    71e4:	0000672d 	.word	0x0000672d
    71e8:	20000464 	.word	0x20000464
    71ec:	43ff56ac 	.word	0x43ff56ac
    71f0:	0003f200 	.word	0x0003f200
    71f4:	20002548 	.word	0x20002548

000071f8 <main>:
WORD reset;
ACCOUNTS accnts;
DWORD crc_fw;
BYTE deb = 0;
int main(void)
{
    71f8:	b5b0      	push	{r4, r5, r7, lr}
    71fa:	af00      	add	r7, sp, #0
	SCB->VTOR=0x00004000;
    71fc:	4b4a      	ldr	r3, [pc, #296]	; (7328 <main+0x130>)
    71fe:	2280      	movs	r2, #128	; 0x80
    7200:	01d2      	lsls	r2, r2, #7
    7202:	609a      	str	r2, [r3, #8]
	
	if (PROC_HERZ == (8 * 1000000))	{sys_clock_init_USE_OSC8M();}   //8MHz
	else							{sys_clock_init_USE_DFLL48M();}	//48MHz
    7204:	4b49      	ldr	r3, [pc, #292]	; (732c <main+0x134>)
    7206:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    7208:	b662      	cpsie	i
		
	__enable_irq();
	wdt_reset();
    720a:	4b49      	ldr	r3, [pc, #292]	; (7330 <main+0x138>)
    720c:	799b      	ldrb	r3, [r3, #6]
    720e:	07db      	lsls	r3, r3, #31
    7210:	0fdb      	lsrs	r3, r3, #31
    7212:	b2db      	uxtb	r3, r3
    7214:	2b01      	cmp	r3, #1
    7216:	d107      	bne.n	7228 <main+0x30>
    7218:	4a45      	ldr	r2, [pc, #276]	; (7330 <main+0x138>)
    721a:	7993      	ldrb	r3, [r2, #6]
    721c:	2101      	movs	r1, #1
    721e:	430b      	orrs	r3, r1
    7220:	7193      	strb	r3, [r2, #6]
    7222:	4b43      	ldr	r3, [pc, #268]	; (7330 <main+0x138>)
    7224:	22a5      	movs	r2, #165	; 0xa5
    7226:	721a      	strb	r2, [r3, #8]
	wdt_start();	
    7228:	4b41      	ldr	r3, [pc, #260]	; (7330 <main+0x138>)
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	079b      	lsls	r3, r3, #30
    722e:	0fdb      	lsrs	r3, r3, #31
    7230:	b2db      	uxtb	r3, r3
    7232:	2b00      	cmp	r3, #0
    7234:	d119      	bne.n	726a <main+0x72>
    7236:	4a3e      	ldr	r2, [pc, #248]	; (7330 <main+0x138>)
    7238:	7853      	ldrb	r3, [r2, #1]
    723a:	210f      	movs	r1, #15
    723c:	438b      	bics	r3, r1
    723e:	1c19      	adds	r1, r3, #0
    7240:	230b      	movs	r3, #11
    7242:	430b      	orrs	r3, r1
    7244:	7053      	strb	r3, [r2, #1]
    7246:	4a3a      	ldr	r2, [pc, #232]	; (7330 <main+0x138>)
    7248:	7893      	ldrb	r3, [r2, #2]
    724a:	210f      	movs	r1, #15
    724c:	438b      	bics	r3, r1
    724e:	1c19      	adds	r1, r3, #0
    7250:	230a      	movs	r3, #10
    7252:	430b      	orrs	r3, r1
    7254:	7093      	strb	r3, [r2, #2]
    7256:	4a36      	ldr	r2, [pc, #216]	; (7330 <main+0x138>)
    7258:	7953      	ldrb	r3, [r2, #5]
    725a:	2101      	movs	r1, #1
    725c:	430b      	orrs	r3, r1
    725e:	7153      	strb	r3, [r2, #5]
    7260:	4a33      	ldr	r2, [pc, #204]	; (7330 <main+0x138>)
    7262:	7813      	ldrb	r3, [r2, #0]
    7264:	2102      	movs	r1, #2
    7266:	430b      	orrs	r3, r1
    7268:	7013      	strb	r3, [r2, #0]
			
	cfg_init  ();
    726a:	4b32      	ldr	r3, [pc, #200]	; (7334 <main+0x13c>)
    726c:	4798      	blx	r3
	if(cfg_2_read() == CFG_ERR) {cfg_2_err = CFG_ERR; err_dword.cfg_2_init = 1; }
    726e:	4b32      	ldr	r3, [pc, #200]	; (7338 <main+0x140>)
    7270:	4798      	blx	r3
    7272:	1e03      	subs	r3, r0, #0
    7274:	d107      	bne.n	7286 <main+0x8e>
    7276:	4b31      	ldr	r3, [pc, #196]	; (733c <main+0x144>)
    7278:	2200      	movs	r2, #0
    727a:	701a      	strb	r2, [r3, #0]
    727c:	4b30      	ldr	r3, [pc, #192]	; (7340 <main+0x148>)
    727e:	781a      	ldrb	r2, [r3, #0]
    7280:	2102      	movs	r1, #2
    7282:	430a      	orrs	r2, r1
    7284:	701a      	strb	r2, [r3, #0]
	if(cfg_read()   == CFG_ERR)	{err_dword.cfg_2_init = 1; cfg_default(); acc(DROP);}
    7286:	4b2f      	ldr	r3, [pc, #188]	; (7344 <main+0x14c>)
    7288:	4798      	blx	r3
    728a:	1e03      	subs	r3, r0, #0
    728c:	d109      	bne.n	72a2 <main+0xaa>
    728e:	4b2c      	ldr	r3, [pc, #176]	; (7340 <main+0x148>)
    7290:	781a      	ldrb	r2, [r3, #0]
    7292:	2102      	movs	r1, #2
    7294:	430a      	orrs	r2, r1
    7296:	701a      	strb	r2, [r3, #0]
    7298:	4b2b      	ldr	r3, [pc, #172]	; (7348 <main+0x150>)
    729a:	4798      	blx	r3
    729c:	2002      	movs	r0, #2
    729e:	4b2b      	ldr	r3, [pc, #172]	; (734c <main+0x154>)
    72a0:	4798      	blx	r3
	cfg_check();
    72a2:	4b2b      	ldr	r3, [pc, #172]	; (7350 <main+0x158>)
    72a4:	4798      	blx	r3

	gpio_init();
    72a6:	4b2b      	ldr	r3, [pc, #172]	; (7354 <main+0x15c>)
    72a8:	4798      	blx	r3
	TC3_init();
    72aa:	4b2b      	ldr	r3, [pc, #172]	; (7358 <main+0x160>)
    72ac:	4798      	blx	r3
	spi_init();
    72ae:	4b2b      	ldr	r3, [pc, #172]	; (735c <main+0x164>)
    72b0:	4798      	blx	r3
	usart_init();
    72b2:	4b2b      	ldr	r3, [pc, #172]	; (7360 <main+0x168>)
    72b4:	4798      	blx	r3
	eth_init();
    72b6:	4b2b      	ldr	r3, [pc, #172]	; (7364 <main+0x16c>)
    72b8:	4798      	blx	r3
	
	acc(READ);
    72ba:	2000      	movs	r0, #0
    72bc:	4b23      	ldr	r3, [pc, #140]	; (734c <main+0x154>)
    72be:	4798      	blx	r3
	log_ch();
    72c0:	4b29      	ldr	r3, [pc, #164]	; (7368 <main+0x170>)
    72c2:	4798      	blx	r3
	log_safe(0, 0x00000000, 0x00000000, START);
    72c4:	2304      	movs	r3, #4
    72c6:	2200      	movs	r2, #0
    72c8:	2100      	movs	r1, #0
    72ca:	2000      	movs	r0, #0
    72cc:	4c27      	ldr	r4, [pc, #156]	; (736c <main+0x174>)
    72ce:	47a0      	blx	r4
	
	crc_fw = crc32(0x00004000, 0x00014000);
    72d0:	23a0      	movs	r3, #160	; 0xa0
    72d2:	025a      	lsls	r2, r3, #9
    72d4:	2380      	movs	r3, #128	; 0x80
    72d6:	01db      	lsls	r3, r3, #7
    72d8:	0011      	movs	r1, r2
    72da:	0018      	movs	r0, r3
    72dc:	4b24      	ldr	r3, [pc, #144]	; (7370 <main+0x178>)
    72de:	4798      	blx	r3
    72e0:	0003      	movs	r3, r0
    72e2:	001a      	movs	r2, r3
    72e4:	4b23      	ldr	r3, [pc, #140]	; (7374 <main+0x17c>)
    72e6:	601a      	str	r2, [r3, #0]
	
	led_init();
    72e8:	2201      	movs	r2, #1
    72ea:	2100      	movs	r1, #0
    72ec:	2001      	movs	r0, #1
    72ee:	4b22      	ldr	r3, [pc, #136]	; (7378 <main+0x180>)
    72f0:	4798      	blx	r3
	if (sizeof(CFG_1) != 0x100 ) { warning_led(1); DWORD ERR1 = sizeof(CFG_1);}
	if (sizeof(CFG_2) != 0x100 ) { warning_led(2); DWORD ERR2 = sizeof(CFG_2);}
/*DEBUG*/				
	while (1)
	{
	    if(reset == NULL)
    72f2:	4b22      	ldr	r3, [pc, #136]	; (737c <main+0x184>)
    72f4:	881b      	ldrh	r3, [r3, #0]
    72f6:	2b00      	cmp	r3, #0
    72f8:	d10e      	bne.n	7318 <main+0x120>
		 {wdt_reset();}//wdt-drop timer
    72fa:	4b0d      	ldr	r3, [pc, #52]	; (7330 <main+0x138>)
    72fc:	799b      	ldrb	r3, [r3, #6]
    72fe:	07db      	lsls	r3, r3, #31
    7300:	0fdb      	lsrs	r3, r3, #31
    7302:	b2db      	uxtb	r3, r3
    7304:	2b01      	cmp	r3, #1
    7306:	d107      	bne.n	7318 <main+0x120>
    7308:	4a09      	ldr	r2, [pc, #36]	; (7330 <main+0x138>)
    730a:	7993      	ldrb	r3, [r2, #6]
    730c:	2101      	movs	r1, #1
    730e:	430b      	orrs	r3, r1
    7310:	7193      	strb	r3, [r2, #6]
    7312:	4b07      	ldr	r3, [pc, #28]	; (7330 <main+0x138>)
    7314:	22a5      	movs	r2, #165	; 0xa5
    7316:	721a      	strb	r2, [r3, #8]
		eth_process();
    7318:	4b19      	ldr	r3, [pc, #100]	; (7380 <main+0x188>)
    731a:	4798      	blx	r3
		cmd_process();
    731c:	4b19      	ldr	r3, [pc, #100]	; (7384 <main+0x18c>)
    731e:	4798      	blx	r3
		tc3_process();
    7320:	4b19      	ldr	r3, [pc, #100]	; (7388 <main+0x190>)
    7322:	4798      	blx	r3
	    if(reset == NULL)
    7324:	e7e5      	b.n	72f2 <main+0xfa>
    7326:	46c0      	nop			; (mov r8, r8)
    7328:	e000ed00 	.word	0xe000ed00
    732c:	00007d99 	.word	0x00007d99
    7330:	40001000 	.word	0x40001000
    7334:	0000aad9 	.word	0x0000aad9
    7338:	0000ab6d 	.word	0x0000ab6d
    733c:	20000002 	.word	0x20000002
    7340:	20002550 	.word	0x20002550
    7344:	0000ab0d 	.word	0x0000ab0d
    7348:	0000abcd 	.word	0x0000abcd
    734c:	00004215 	.word	0x00004215
    7350:	0000aedd 	.word	0x0000aedd
    7354:	00006a1d 	.word	0x00006a1d
    7358:	000080a5 	.word	0x000080a5
    735c:	000076a1 	.word	0x000076a1
    7360:	00008615 	.word	0x00008615
    7364:	00006215 	.word	0x00006215
    7368:	000044c9 	.word	0x000044c9
    736c:	0000455d 	.word	0x0000455d
    7370:	00005e71 	.word	0x00005e71
    7374:	2000254c 	.word	0x2000254c
    7378:	00006d31 	.word	0x00006d31
    737c:	20002548 	.word	0x20002548
    7380:	00006329 	.word	0x00006329
    7384:	000049b9 	.word	0x000049b9
    7388:	000081f9 	.word	0x000081f9

0000738c <socket_init>:




BYTE socket_init (BYTE numb, WORD src_port, BYTE mode)
{
    738c:	b590      	push	{r4, r7, lr}
    738e:	b085      	sub	sp, #20
    7390:	af00      	add	r7, sp, #0
    7392:	0004      	movs	r4, r0
    7394:	0008      	movs	r0, r1
    7396:	0011      	movs	r1, r2
    7398:	1dfb      	adds	r3, r7, #7
    739a:	1c22      	adds	r2, r4, #0
    739c:	701a      	strb	r2, [r3, #0]
    739e:	1d3b      	adds	r3, r7, #4
    73a0:	1c02      	adds	r2, r0, #0
    73a2:	801a      	strh	r2, [r3, #0]
    73a4:	1dbb      	adds	r3, r7, #6
    73a6:	1c0a      	adds	r2, r1, #0
    73a8:	701a      	strb	r2, [r3, #0]
	BYTE buf[2];
	
	//mode
	if(mode==UDP){buf[0]=SR_00_P2;}
    73aa:	1dbb      	adds	r3, r7, #6
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	2b01      	cmp	r3, #1
    73b0:	d103      	bne.n	73ba <socket_init+0x2e>
    73b2:	230c      	movs	r3, #12
    73b4:	18fb      	adds	r3, r7, r3
    73b6:	2202      	movs	r2, #2
    73b8:	701a      	strb	r2, [r3, #0]
	if(mode==TCP){buf[0]=SR_00_P1;}	
    73ba:	1dbb      	adds	r3, r7, #6
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	2b02      	cmp	r3, #2
    73c0:	d103      	bne.n	73ca <socket_init+0x3e>
    73c2:	230c      	movs	r3, #12
    73c4:	18fb      	adds	r3, r7, r3
    73c6:	2201      	movs	r2, #1
    73c8:	701a      	strb	r2, [r3, #0]
		
	spi_write_timeout(ADDR_SOC_MODE,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    73ca:	4b5f      	ldr	r3, [pc, #380]	; (7548 <socket_init+0x1bc>)
    73cc:	220a      	movs	r2, #10
    73ce:	801a      	strh	r2, [r3, #0]
    73d0:	e006      	b.n	73e0 <socket_init+0x54>
    73d2:	4b5d      	ldr	r3, [pc, #372]	; (7548 <socket_init+0x1bc>)
    73d4:	881b      	ldrh	r3, [r3, #0]
    73d6:	b29b      	uxth	r3, r3
    73d8:	2b00      	cmp	r3, #0
    73da:	d101      	bne.n	73e0 <socket_init+0x54>
    73dc:	2301      	movs	r3, #1
    73de:	e0af      	b.n	7540 <socket_init+0x1b4>
    73e0:	1dfb      	adds	r3, r7, #7
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	015b      	lsls	r3, r3, #5
    73e6:	b25b      	sxtb	r3, r3
    73e8:	2208      	movs	r2, #8
    73ea:	4313      	orrs	r3, r2
    73ec:	b25b      	sxtb	r3, r3
    73ee:	b2d9      	uxtb	r1, r3
    73f0:	230c      	movs	r3, #12
    73f2:	18fa      	adds	r2, r7, r3
    73f4:	2301      	movs	r3, #1
    73f6:	2000      	movs	r0, #0
    73f8:	4c54      	ldr	r4, [pc, #336]	; (754c <socket_init+0x1c0>)
    73fa:	47a0      	blx	r4
    73fc:	1e03      	subs	r3, r0, #0
    73fe:	d0e8      	beq.n	73d2 <socket_init+0x46>
	
	//src_port
	buf[0]=((src_port & 0xFF00)>>8);
    7400:	1d3b      	adds	r3, r7, #4
    7402:	881b      	ldrh	r3, [r3, #0]
    7404:	0a1b      	lsrs	r3, r3, #8
    7406:	b29b      	uxth	r3, r3
    7408:	b2da      	uxtb	r2, r3
    740a:	230c      	movs	r3, #12
    740c:	18fb      	adds	r3, r7, r3
    740e:	701a      	strb	r2, [r3, #0]
	buf[1]=( src_port & 0x00FF);
    7410:	1d3b      	adds	r3, r7, #4
    7412:	881b      	ldrh	r3, [r3, #0]
    7414:	b2da      	uxtb	r2, r3
    7416:	230c      	movs	r3, #12
    7418:	18fb      	adds	r3, r7, r3
    741a:	705a      	strb	r2, [r3, #1]
	spi_write_timeout(ADDR_SOC_SRC_PORT0,(SOCKET_REGISTER | SOCKET(numb)),buf,2,10);
    741c:	4b4a      	ldr	r3, [pc, #296]	; (7548 <socket_init+0x1bc>)
    741e:	220a      	movs	r2, #10
    7420:	801a      	strh	r2, [r3, #0]
    7422:	e006      	b.n	7432 <socket_init+0xa6>
    7424:	4b48      	ldr	r3, [pc, #288]	; (7548 <socket_init+0x1bc>)
    7426:	881b      	ldrh	r3, [r3, #0]
    7428:	b29b      	uxth	r3, r3
    742a:	2b00      	cmp	r3, #0
    742c:	d101      	bne.n	7432 <socket_init+0xa6>
    742e:	2301      	movs	r3, #1
    7430:	e086      	b.n	7540 <socket_init+0x1b4>
    7432:	1dfb      	adds	r3, r7, #7
    7434:	781b      	ldrb	r3, [r3, #0]
    7436:	015b      	lsls	r3, r3, #5
    7438:	b25b      	sxtb	r3, r3
    743a:	2208      	movs	r2, #8
    743c:	4313      	orrs	r3, r2
    743e:	b25b      	sxtb	r3, r3
    7440:	b2d9      	uxtb	r1, r3
    7442:	230c      	movs	r3, #12
    7444:	18fa      	adds	r2, r7, r3
    7446:	2302      	movs	r3, #2
    7448:	2004      	movs	r0, #4
    744a:	4c40      	ldr	r4, [pc, #256]	; (754c <socket_init+0x1c0>)
    744c:	47a0      	blx	r4
    744e:	1e03      	subs	r3, r0, #0
    7450:	d0e8      	beq.n	7424 <socket_init+0x98>
	
	
	//socket_cmd_open
	buf[0]=CMD_OPEN;
    7452:	230c      	movs	r3, #12
    7454:	18fb      	adds	r3, r7, r3
    7456:	2201      	movs	r2, #1
    7458:	701a      	strb	r2, [r3, #0]
	spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    745a:	4b3b      	ldr	r3, [pc, #236]	; (7548 <socket_init+0x1bc>)
    745c:	220a      	movs	r2, #10
    745e:	801a      	strh	r2, [r3, #0]
    7460:	e006      	b.n	7470 <socket_init+0xe4>
    7462:	4b39      	ldr	r3, [pc, #228]	; (7548 <socket_init+0x1bc>)
    7464:	881b      	ldrh	r3, [r3, #0]
    7466:	b29b      	uxth	r3, r3
    7468:	2b00      	cmp	r3, #0
    746a:	d101      	bne.n	7470 <socket_init+0xe4>
    746c:	2301      	movs	r3, #1
    746e:	e067      	b.n	7540 <socket_init+0x1b4>
    7470:	1dfb      	adds	r3, r7, #7
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	015b      	lsls	r3, r3, #5
    7476:	b25b      	sxtb	r3, r3
    7478:	2208      	movs	r2, #8
    747a:	4313      	orrs	r3, r2
    747c:	b25b      	sxtb	r3, r3
    747e:	b2d9      	uxtb	r1, r3
    7480:	230c      	movs	r3, #12
    7482:	18fa      	adds	r2, r7, r3
    7484:	2301      	movs	r3, #1
    7486:	2001      	movs	r0, #1
    7488:	4c30      	ldr	r4, [pc, #192]	; (754c <socket_init+0x1c0>)
    748a:	47a0      	blx	r4
    748c:	1e03      	subs	r3, r0, #0
    748e:	d0e8      	beq.n	7462 <socket_init+0xd6>
	
	if (mode == TCP)
    7490:	1dbb      	adds	r3, r7, #6
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	2b02      	cmp	r3, #2
    7496:	d152      	bne.n	753e <socket_init+0x1b2>
	{
		//socket_set_RTR
		buf[0]=0x0F;
    7498:	230c      	movs	r3, #12
    749a:	18fb      	adds	r3, r7, r3
    749c:	220f      	movs	r2, #15
    749e:	701a      	strb	r2, [r3, #0]
		buf[1]=0xA0;
    74a0:	230c      	movs	r3, #12
    74a2:	18fb      	adds	r3, r7, r3
    74a4:	22a0      	movs	r2, #160	; 0xa0
    74a6:	705a      	strb	r2, [r3, #1]
		spi_write_timeout(ADDR_COM_RETRY_TIME_0,COMMON_REGISTER,buf,2,10);
    74a8:	4b27      	ldr	r3, [pc, #156]	; (7548 <socket_init+0x1bc>)
    74aa:	220a      	movs	r2, #10
    74ac:	801a      	strh	r2, [r3, #0]
    74ae:	e006      	b.n	74be <socket_init+0x132>
    74b0:	4b25      	ldr	r3, [pc, #148]	; (7548 <socket_init+0x1bc>)
    74b2:	881b      	ldrh	r3, [r3, #0]
    74b4:	b29b      	uxth	r3, r3
    74b6:	2b00      	cmp	r3, #0
    74b8:	d101      	bne.n	74be <socket_init+0x132>
    74ba:	2301      	movs	r3, #1
    74bc:	e040      	b.n	7540 <socket_init+0x1b4>
    74be:	230c      	movs	r3, #12
    74c0:	18fa      	adds	r2, r7, r3
    74c2:	2302      	movs	r3, #2
    74c4:	2100      	movs	r1, #0
    74c6:	2019      	movs	r0, #25
    74c8:	4c20      	ldr	r4, [pc, #128]	; (754c <socket_init+0x1c0>)
    74ca:	47a0      	blx	r4
    74cc:	1e03      	subs	r3, r0, #0
    74ce:	d0ef      	beq.n	74b0 <socket_init+0x124>
		//socket_set_RCR
		buf[0]=0x04;
    74d0:	230c      	movs	r3, #12
    74d2:	18fb      	adds	r3, r7, r3
    74d4:	2204      	movs	r2, #4
    74d6:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_COM_RETRY_COUNT,COMMON_REGISTER,buf,1,10);
    74d8:	4b1b      	ldr	r3, [pc, #108]	; (7548 <socket_init+0x1bc>)
    74da:	220a      	movs	r2, #10
    74dc:	801a      	strh	r2, [r3, #0]
    74de:	e006      	b.n	74ee <socket_init+0x162>
    74e0:	4b19      	ldr	r3, [pc, #100]	; (7548 <socket_init+0x1bc>)
    74e2:	881b      	ldrh	r3, [r3, #0]
    74e4:	b29b      	uxth	r3, r3
    74e6:	2b00      	cmp	r3, #0
    74e8:	d101      	bne.n	74ee <socket_init+0x162>
    74ea:	2301      	movs	r3, #1
    74ec:	e028      	b.n	7540 <socket_init+0x1b4>
    74ee:	230c      	movs	r3, #12
    74f0:	18fa      	adds	r2, r7, r3
    74f2:	2301      	movs	r3, #1
    74f4:	2100      	movs	r1, #0
    74f6:	201b      	movs	r0, #27
    74f8:	4c14      	ldr	r4, [pc, #80]	; (754c <socket_init+0x1c0>)
    74fa:	47a0      	blx	r4
    74fc:	1e03      	subs	r3, r0, #0
    74fe:	d0ef      	beq.n	74e0 <socket_init+0x154>
		//socket_cmd_listen
		buf[0]=CMD_LISTEN;
    7500:	230c      	movs	r3, #12
    7502:	18fb      	adds	r3, r7, r3
    7504:	2202      	movs	r2, #2
    7506:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    7508:	4b0f      	ldr	r3, [pc, #60]	; (7548 <socket_init+0x1bc>)
    750a:	220a      	movs	r2, #10
    750c:	801a      	strh	r2, [r3, #0]
    750e:	e006      	b.n	751e <socket_init+0x192>
    7510:	4b0d      	ldr	r3, [pc, #52]	; (7548 <socket_init+0x1bc>)
    7512:	881b      	ldrh	r3, [r3, #0]
    7514:	b29b      	uxth	r3, r3
    7516:	2b00      	cmp	r3, #0
    7518:	d101      	bne.n	751e <socket_init+0x192>
    751a:	2301      	movs	r3, #1
    751c:	e010      	b.n	7540 <socket_init+0x1b4>
    751e:	1dfb      	adds	r3, r7, #7
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	015b      	lsls	r3, r3, #5
    7524:	b25b      	sxtb	r3, r3
    7526:	2208      	movs	r2, #8
    7528:	4313      	orrs	r3, r2
    752a:	b25b      	sxtb	r3, r3
    752c:	b2d9      	uxtb	r1, r3
    752e:	230c      	movs	r3, #12
    7530:	18fa      	adds	r2, r7, r3
    7532:	2301      	movs	r3, #1
    7534:	2001      	movs	r0, #1
    7536:	4c05      	ldr	r4, [pc, #20]	; (754c <socket_init+0x1c0>)
    7538:	47a0      	blx	r4
    753a:	1e03      	subs	r3, r0, #0
    753c:	d0e8      	beq.n	7510 <socket_init+0x184>
	}
		
	return SUCCESS;
    753e:	2300      	movs	r3, #0
	
    7540:	0018      	movs	r0, r3
    7542:	46bd      	mov	sp, r7
    7544:	b005      	add	sp, #20
    7546:	bd90      	pop	{r4, r7, pc}
    7548:	200031f4 	.word	0x200031f4
    754c:	00007925 	.word	0x00007925

00007550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7550:	b580      	push	{r7, lr}
    7552:	b082      	sub	sp, #8
    7554:	af00      	add	r7, sp, #0
    7556:	0002      	movs	r2, r0
    7558:	1dfb      	adds	r3, r7, #7
    755a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    755c:	1dfb      	adds	r3, r7, #7
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	2b7f      	cmp	r3, #127	; 0x7f
    7562:	d809      	bhi.n	7578 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7564:	4b06      	ldr	r3, [pc, #24]	; (7580 <__NVIC_EnableIRQ+0x30>)
    7566:	1dfa      	adds	r2, r7, #7
    7568:	7812      	ldrb	r2, [r2, #0]
    756a:	0011      	movs	r1, r2
    756c:	221f      	movs	r2, #31
    756e:	400a      	ands	r2, r1
    7570:	2101      	movs	r1, #1
    7572:	4091      	lsls	r1, r2
    7574:	000a      	movs	r2, r1
    7576:	601a      	str	r2, [r3, #0]
  }
}
    7578:	46c0      	nop			; (mov r8, r8)
    757a:	46bd      	mov	sp, r7
    757c:	b002      	add	sp, #8
    757e:	bd80      	pop	{r7, pc}
    7580:	e000e100 	.word	0xe000e100

00007584 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7584:	b580      	push	{r7, lr}
    7586:	b082      	sub	sp, #8
    7588:	af00      	add	r7, sp, #0
    758a:	0002      	movs	r2, r0
    758c:	1dfb      	adds	r3, r7, #7
    758e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7590:	1dfb      	adds	r3, r7, #7
    7592:	781b      	ldrb	r3, [r3, #0]
    7594:	2b7f      	cmp	r3, #127	; 0x7f
    7596:	d80e      	bhi.n	75b6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7598:	4909      	ldr	r1, [pc, #36]	; (75c0 <__NVIC_DisableIRQ+0x3c>)
    759a:	1dfb      	adds	r3, r7, #7
    759c:	781b      	ldrb	r3, [r3, #0]
    759e:	001a      	movs	r2, r3
    75a0:	231f      	movs	r3, #31
    75a2:	4013      	ands	r3, r2
    75a4:	2201      	movs	r2, #1
    75a6:	409a      	lsls	r2, r3
    75a8:	0013      	movs	r3, r2
    75aa:	2280      	movs	r2, #128	; 0x80
    75ac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    75ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75b2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	46bd      	mov	sp, r7
    75ba:	b002      	add	sp, #8
    75bc:	bd80      	pop	{r7, pc}
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	e000e100 	.word	0xe000e100

000075c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    75c4:	b5b0      	push	{r4, r5, r7, lr}
    75c6:	b082      	sub	sp, #8
    75c8:	af00      	add	r7, sp, #0
    75ca:	0002      	movs	r2, r0
    75cc:	6039      	str	r1, [r7, #0]
    75ce:	1dfb      	adds	r3, r7, #7
    75d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    75d2:	1dfb      	adds	r3, r7, #7
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	2b7f      	cmp	r3, #127	; 0x7f
    75d8:	d828      	bhi.n	762c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    75da:	4c2f      	ldr	r4, [pc, #188]	; (7698 <__NVIC_SetPriority+0xd4>)
    75dc:	1dfb      	adds	r3, r7, #7
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	b25b      	sxtb	r3, r3
    75e2:	089b      	lsrs	r3, r3, #2
    75e4:	492c      	ldr	r1, [pc, #176]	; (7698 <__NVIC_SetPriority+0xd4>)
    75e6:	1dfa      	adds	r2, r7, #7
    75e8:	7812      	ldrb	r2, [r2, #0]
    75ea:	b252      	sxtb	r2, r2
    75ec:	0892      	lsrs	r2, r2, #2
    75ee:	32c0      	adds	r2, #192	; 0xc0
    75f0:	0092      	lsls	r2, r2, #2
    75f2:	5852      	ldr	r2, [r2, r1]
    75f4:	1df9      	adds	r1, r7, #7
    75f6:	7809      	ldrb	r1, [r1, #0]
    75f8:	0008      	movs	r0, r1
    75fa:	2103      	movs	r1, #3
    75fc:	4001      	ands	r1, r0
    75fe:	00c9      	lsls	r1, r1, #3
    7600:	20ff      	movs	r0, #255	; 0xff
    7602:	4088      	lsls	r0, r1
    7604:	0001      	movs	r1, r0
    7606:	43c9      	mvns	r1, r1
    7608:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    760a:	683a      	ldr	r2, [r7, #0]
    760c:	0192      	lsls	r2, r2, #6
    760e:	20ff      	movs	r0, #255	; 0xff
    7610:	4010      	ands	r0, r2
    7612:	1dfa      	adds	r2, r7, #7
    7614:	7812      	ldrb	r2, [r2, #0]
    7616:	0015      	movs	r5, r2
    7618:	2203      	movs	r2, #3
    761a:	402a      	ands	r2, r5
    761c:	00d2      	lsls	r2, r2, #3
    761e:	4090      	lsls	r0, r2
    7620:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7622:	430a      	orrs	r2, r1
    7624:	33c0      	adds	r3, #192	; 0xc0
    7626:	009b      	lsls	r3, r3, #2
    7628:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    762a:	e031      	b.n	7690 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    762c:	4c1b      	ldr	r4, [pc, #108]	; (769c <__NVIC_SetPriority+0xd8>)
    762e:	1dfb      	adds	r3, r7, #7
    7630:	781b      	ldrb	r3, [r3, #0]
    7632:	001a      	movs	r2, r3
    7634:	230f      	movs	r3, #15
    7636:	4013      	ands	r3, r2
    7638:	3b08      	subs	r3, #8
    763a:	0899      	lsrs	r1, r3, #2
    763c:	4a17      	ldr	r2, [pc, #92]	; (769c <__NVIC_SetPriority+0xd8>)
    763e:	1dfb      	adds	r3, r7, #7
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	0018      	movs	r0, r3
    7644:	230f      	movs	r3, #15
    7646:	4003      	ands	r3, r0
    7648:	3b08      	subs	r3, #8
    764a:	089b      	lsrs	r3, r3, #2
    764c:	3306      	adds	r3, #6
    764e:	009b      	lsls	r3, r3, #2
    7650:	18d3      	adds	r3, r2, r3
    7652:	3304      	adds	r3, #4
    7654:	681b      	ldr	r3, [r3, #0]
    7656:	1dfa      	adds	r2, r7, #7
    7658:	7812      	ldrb	r2, [r2, #0]
    765a:	0010      	movs	r0, r2
    765c:	2203      	movs	r2, #3
    765e:	4002      	ands	r2, r0
    7660:	00d2      	lsls	r2, r2, #3
    7662:	20ff      	movs	r0, #255	; 0xff
    7664:	4090      	lsls	r0, r2
    7666:	0002      	movs	r2, r0
    7668:	43d2      	mvns	r2, r2
    766a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    766c:	683b      	ldr	r3, [r7, #0]
    766e:	019b      	lsls	r3, r3, #6
    7670:	20ff      	movs	r0, #255	; 0xff
    7672:	4018      	ands	r0, r3
    7674:	1dfb      	adds	r3, r7, #7
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	001d      	movs	r5, r3
    767a:	2303      	movs	r3, #3
    767c:	402b      	ands	r3, r5
    767e:	00db      	lsls	r3, r3, #3
    7680:	4098      	lsls	r0, r3
    7682:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7684:	431a      	orrs	r2, r3
    7686:	1d8b      	adds	r3, r1, #6
    7688:	009b      	lsls	r3, r3, #2
    768a:	18e3      	adds	r3, r4, r3
    768c:	3304      	adds	r3, #4
    768e:	601a      	str	r2, [r3, #0]
}
    7690:	46c0      	nop			; (mov r8, r8)
    7692:	46bd      	mov	sp, r7
    7694:	b002      	add	sp, #8
    7696:	bdb0      	pop	{r4, r5, r7, pc}
    7698:	e000e100 	.word	0xe000e100
    769c:	e000ed00 	.word	0xe000ed00

000076a0 <spi_init>:
SPI spi;


void spi_init(void)
//-----------------------------------------------------------------------------
{
    76a0:	b580      	push	{r7, lr}
    76a2:	af00      	add	r7, sp, #0
	PM->APBCMASK.bit.SERCOM5_ =1; // Bit  2    - SERCOM4: SERCOM4 APB Clock Enable (1 - enabled)
    76a4:	4a67      	ldr	r2, [pc, #412]	; (7844 <spi_init+0x1a4>)
    76a6:	6a13      	ldr	r3, [r2, #32]
    76a8:	2180      	movs	r1, #128	; 0x80
    76aa:	430b      	orrs	r3, r1
    76ac:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.bit.ID   =GCLK_CLKCTRL_ID_SERCOM5_CORE; // Bits 5:0  - ID: Generic Clock Selection ID (0x18 - SERCOM4_CORE)
    76ae:	4a66      	ldr	r2, [pc, #408]	; (7848 <spi_init+0x1a8>)
    76b0:	8853      	ldrh	r3, [r2, #2]
    76b2:	213f      	movs	r1, #63	; 0x3f
    76b4:	438b      	bics	r3, r1
    76b6:	1c19      	adds	r1, r3, #0
    76b8:	2319      	movs	r3, #25
    76ba:	430b      	orrs	r3, r1
    76bc:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    76be:	4a62      	ldr	r2, [pc, #392]	; (7848 <spi_init+0x1a8>)
    76c0:	8853      	ldrh	r3, [r2, #2]
    76c2:	4962      	ldr	r1, [pc, #392]	; (784c <spi_init+0x1ac>)
    76c4:	400b      	ands	r3, r1
    76c6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    76c8:	4a5f      	ldr	r2, [pc, #380]	; (7848 <spi_init+0x1a8>)
    76ca:	8853      	ldrh	r3, [r2, #2]
    76cc:	2180      	movs	r1, #128	; 0x80
    76ce:	01c9      	lsls	r1, r1, #7
    76d0:	430b      	orrs	r3, r1
    76d2:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	if(SERCOM5->SPI.SYNCBUSY.bit.SWRST)   // Bit 0 - SWRST: Software Reset Synchronization Busy
    76d4:	4b5e      	ldr	r3, [pc, #376]	; (7850 <spi_init+0x1b0>)
    76d6:	69db      	ldr	r3, [r3, #28]
    76d8:	07db      	lsls	r3, r3, #31
    76da:	0fdb      	lsrs	r3, r3, #31
    76dc:	b2db      	uxtb	r3, r3
    76de:	2b00      	cmp	r3, #0
    76e0:	d01b      	beq.n	771a <spi_init+0x7a>
	{
		if(SERCOM5->SPI.CTRLA.bit.ENABLE)   // Bit 1 - ENABLE: Enable
    76e2:	4b5b      	ldr	r3, [pc, #364]	; (7850 <spi_init+0x1b0>)
    76e4:	681b      	ldr	r3, [r3, #0]
    76e6:	079b      	lsls	r3, r3, #30
    76e8:	0fdb      	lsrs	r3, r3, #31
    76ea:	b2db      	uxtb	r3, r3
    76ec:	2b00      	cmp	r3, #0
    76ee:	d014      	beq.n	771a <spi_init+0x7a>
		{
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    76f0:	46c0      	nop			; (mov r8, r8)
    76f2:	4b57      	ldr	r3, [pc, #348]	; (7850 <spi_init+0x1b0>)
    76f4:	69db      	ldr	r3, [r3, #28]
    76f6:	079b      	lsls	r3, r3, #30
    76f8:	0fdb      	lsrs	r3, r3, #31
    76fa:	b2db      	uxtb	r3, r3
    76fc:	2b00      	cmp	r3, #0
    76fe:	d1f8      	bne.n	76f2 <spi_init+0x52>
			SERCOM5->SPI.CTRLA.bit.ENABLE=0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    7700:	4a53      	ldr	r2, [pc, #332]	; (7850 <spi_init+0x1b0>)
    7702:	6813      	ldr	r3, [r2, #0]
    7704:	2102      	movs	r1, #2
    7706:	438b      	bics	r3, r1
    7708:	6013      	str	r3, [r2, #0]
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	4b50      	ldr	r3, [pc, #320]	; (7850 <spi_init+0x1b0>)
    770e:	69db      	ldr	r3, [r3, #28]
    7710:	079b      	lsls	r3, r3, #30
    7712:	0fdb      	lsrs	r3, r3, #31
    7714:	b2db      	uxtb	r3, r3
    7716:	2b00      	cmp	r3, #0
    7718:	d1f8      	bne.n	770c <spi_init+0x6c>
		}
	}

	//.............................................................................

	SERCOM5->SPI.CTRLA.bit.SWRST   =0x01; // Bit  0     - SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    771a:	4a4d      	ldr	r2, [pc, #308]	; (7850 <spi_init+0x1b0>)
    771c:	6813      	ldr	r3, [r2, #0]
    771e:	2101      	movs	r1, #1
    7720:	430b      	orrs	r3, r1
    7722:	6013      	str	r3, [r2, #0]
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    7724:	46c0      	nop			; (mov r8, r8)
    7726:	4b4a      	ldr	r3, [pc, #296]	; (7850 <spi_init+0x1b0>)
    7728:	69db      	ldr	r3, [r3, #28]
    772a:	07db      	lsls	r3, r3, #31
    772c:	0fdb      	lsrs	r3, r3, #31
    772e:	b2db      	uxtb	r3, r3
    7730:	2b00      	cmp	r3, #0
    7732:	d1f8      	bne.n	7726 <spi_init+0x86>

	SERCOM5->SPI.CTRLA.bit.DORD    =0x00; // Bit  30    - DORD: Data Order (0: MSB is transferred first)
    7734:	4a46      	ldr	r2, [pc, #280]	; (7850 <spi_init+0x1b0>)
    7736:	6813      	ldr	r3, [r2, #0]
    7738:	4946      	ldr	r1, [pc, #280]	; (7854 <spi_init+0x1b4>)
    773a:	400b      	ands	r3, r1
    773c:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL    =0x00; // Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    773e:	4a44      	ldr	r2, [pc, #272]	; (7850 <spi_init+0x1b0>)
    7740:	6813      	ldr	r3, [r2, #0]
    7742:	4945      	ldr	r1, [pc, #276]	; (7858 <spi_init+0x1b8>)
    7744:	400b      	ands	r3, r1
    7746:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPHA    =0x00; // Bit  28    - CPHA: Clock Phase (0: The data is sampled on a leading SCK edge and changed on a trailing SCK edge)
    7748:	4a41      	ldr	r2, [pc, #260]	; (7850 <spi_init+0x1b0>)
    774a:	6813      	ldr	r3, [r2, #0]
    774c:	4943      	ldr	r1, [pc, #268]	; (785c <spi_init+0x1bc>)
    774e:	400b      	ands	r3, r1
    7750:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.FORM    =0x00; // Bits 27:24 - FORM: Frame Format (0: SPI frame)
    7752:	4a3f      	ldr	r2, [pc, #252]	; (7850 <spi_init+0x1b0>)
    7754:	6813      	ldr	r3, [r2, #0]
    7756:	4942      	ldr	r1, [pc, #264]	; (7860 <spi_init+0x1c0>)
    7758:	400b      	ands	r3, r1
    775a:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.IBON    =0x00; // Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    775c:	4a3c      	ldr	r2, [pc, #240]	; (7850 <spi_init+0x1b0>)
    775e:	6813      	ldr	r3, [r2, #0]
    7760:	4940      	ldr	r1, [pc, #256]	; (7864 <spi_init+0x1c4>)
    7762:	400b      	ands	r3, r1
    7764:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.RUNSTDBY=0x00; // Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    7766:	4a3a      	ldr	r2, [pc, #232]	; (7850 <spi_init+0x1b0>)
    7768:	6813      	ldr	r3, [r2, #0]
    776a:	2180      	movs	r1, #128	; 0x80
    776c:	438b      	bics	r3, r1
    776e:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.MODE    =0x03; // Bits 4:2   - MODE: Operating Mode (3: SPI master operation)
    7770:	4a37      	ldr	r2, [pc, #220]	; (7850 <spi_init+0x1b0>)
    7772:	6813      	ldr	r3, [r2, #0]
    7774:	211c      	movs	r1, #28
    7776:	438b      	bics	r3, r1
    7778:	210c      	movs	r1, #12
    777a:	430b      	orrs	r3, r1
    777c:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	4b33      	ldr	r3, [pc, #204]	; (7850 <spi_init+0x1b0>)
    7782:	69db      	ldr	r3, [r3, #28]
    7784:	2207      	movs	r2, #7
    7786:	4013      	ands	r3, r2
    7788:	d1fa      	bne.n	7780 <spi_init+0xe0>
	SERCOM5->SPI.CTRLA.bit.DOPO=0x02;     // Bits 17:16 - DOPO: Data Out Pinout (0: MOSI->PAD[3], SCK->PAD[1])
    778a:	4a31      	ldr	r2, [pc, #196]	; (7850 <spi_init+0x1b0>)
    778c:	6813      	ldr	r3, [r2, #0]
    778e:	4936      	ldr	r1, [pc, #216]	; (7868 <spi_init+0x1c8>)
    7790:	400b      	ands	r3, r1
    7792:	2180      	movs	r1, #128	; 0x80
    7794:	0289      	lsls	r1, r1, #10
    7796:	430b      	orrs	r3, r1
    7798:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    779a:	46c0      	nop			; (mov r8, r8)
    779c:	4b2c      	ldr	r3, [pc, #176]	; (7850 <spi_init+0x1b0>)
    779e:	69db      	ldr	r3, [r3, #28]
    77a0:	2207      	movs	r2, #7
    77a2:	4013      	ands	r3, r2
    77a4:	d1fa      	bne.n	779c <spi_init+0xfc>
	SERCOM5->SPI.CTRLA.bit.DIPO=0x00;     // Bits 21:20 - DIPO: Data In Pinout (0: SERCOM PAD[0] is used as data input)
    77a6:	4a2a      	ldr	r2, [pc, #168]	; (7850 <spi_init+0x1b0>)
    77a8:	6813      	ldr	r3, [r2, #0]
    77aa:	4930      	ldr	r1, [pc, #192]	; (786c <spi_init+0x1cc>)
    77ac:	400b      	ands	r3, r1
    77ae:	6013      	str	r3, [r2, #0]

	SERCOM5->SPI.CTRLB.bit.RXEN   =0x01;  // Bit  17    - RXEN: Receiver Enable (1: The receiver is enabled or it will be enabled when SPI is enabled.)
    77b0:	4a27      	ldr	r2, [pc, #156]	; (7850 <spi_init+0x1b0>)
    77b2:	6853      	ldr	r3, [r2, #4]
    77b4:	2180      	movs	r1, #128	; 0x80
    77b6:	0289      	lsls	r1, r1, #10
    77b8:	430b      	orrs	r3, r1
    77ba:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.MSSEN  =0x00;  // Bit  13    - MSSEN: Master Slave Select Enable (0: Hardware _SS control is disabled)
    77bc:	4a24      	ldr	r2, [pc, #144]	; (7850 <spi_init+0x1b0>)
    77be:	6853      	ldr	r3, [r2, #4]
    77c0:	492b      	ldr	r1, [pc, #172]	; (7870 <spi_init+0x1d0>)
    77c2:	400b      	ands	r3, r1
    77c4:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.AMODE  =0x00;  // Bits 15:14 - AMODE: Address Mode (0: ADDRMASK is used as a mask to the ADDR register)
    77c6:	4a22      	ldr	r2, [pc, #136]	; (7850 <spi_init+0x1b0>)
    77c8:	6853      	ldr	r3, [r2, #4]
    77ca:	492a      	ldr	r1, [pc, #168]	; (7874 <spi_init+0x1d4>)
    77cc:	400b      	ands	r3, r1
    77ce:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.SSDE   =0x00;  // Bit  9     - SSDE: Slave Select Low Detect Enable (0: _SS low detector is disabled.)
    77d0:	4a1f      	ldr	r2, [pc, #124]	; (7850 <spi_init+0x1b0>)
    77d2:	6853      	ldr	r3, [r2, #4]
    77d4:	4928      	ldr	r1, [pc, #160]	; (7878 <spi_init+0x1d8>)
    77d6:	400b      	ands	r3, r1
    77d8:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.PLOADEN=0x00;  // Bit 6      – PLOADEN: Slave Data Preload Enable ()
    77da:	4a1d      	ldr	r2, [pc, #116]	; (7850 <spi_init+0x1b0>)
    77dc:	6853      	ldr	r3, [r2, #4]
    77de:	2140      	movs	r1, #64	; 0x40
    77e0:	438b      	bics	r3, r1
    77e2:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.CHSIZE =0x00;  // Bits 2:0   - CHSIZE: Character Size (0: 8 bits)
    77e4:	4a1a      	ldr	r2, [pc, #104]	; (7850 <spi_init+0x1b0>)
    77e6:	6853      	ldr	r3, [r2, #4]
    77e8:	2107      	movs	r1, #7
    77ea:	438b      	bics	r3, r1
    77ec:	6053      	str	r3, [r2, #4]

	SERCOM5->SPI.BAUD.bit.BAUD        = (float)(PROC_HERZ ) / (2 * (float)(8000000 )) - 1;
    77ee:	4b18      	ldr	r3, [pc, #96]	; (7850 <spi_init+0x1b0>)
    77f0:	2202      	movs	r2, #2
    77f2:	731a      	strb	r2, [r3, #12]
	SERCOM5->SPI.INTENSET.bit.TXC	  = 0x00;
    77f4:	4a16      	ldr	r2, [pc, #88]	; (7850 <spi_init+0x1b0>)
    77f6:	7d93      	ldrb	r3, [r2, #22]
    77f8:	2102      	movs	r1, #2
    77fa:	438b      	bics	r3, r1
    77fc:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.DRE     = 0x00;
    77fe:	4a14      	ldr	r2, [pc, #80]	; (7850 <spi_init+0x1b0>)
    7800:	7d93      	ldrb	r3, [r2, #22]
    7802:	2101      	movs	r1, #1
    7804:	438b      	bics	r3, r1
    7806:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.RXC     = 0x00;	
    7808:	4a11      	ldr	r2, [pc, #68]	; (7850 <spi_init+0x1b0>)
    780a:	7d93      	ldrb	r3, [r2, #22]
    780c:	2104      	movs	r1, #4
    780e:	438b      	bics	r3, r1
    7810:	7593      	strb	r3, [r2, #22]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7812:	46c0      	nop			; (mov r8, r8)
    7814:	4b0e      	ldr	r3, [pc, #56]	; (7850 <spi_init+0x1b0>)
    7816:	69db      	ldr	r3, [r3, #28]
    7818:	2207      	movs	r2, #7
    781a:	4013      	ands	r3, r2
    781c:	d1fa      	bne.n	7814 <spi_init+0x174>
	SERCOM5->SPI.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    781e:	4a0c      	ldr	r2, [pc, #48]	; (7850 <spi_init+0x1b0>)
    7820:	6813      	ldr	r3, [r2, #0]
    7822:	2102      	movs	r1, #2
    7824:	430b      	orrs	r3, r1
    7826:	6013      	str	r3, [r2, #0]

	NVIC_DisableIRQ(SERCOM5_IRQn);
    7828:	200e      	movs	r0, #14
    782a:	f7ff feab 	bl	7584 <__NVIC_DisableIRQ>
	NVIC_SetPriority(SERCOM5_IRQn, 1);
    782e:	2101      	movs	r1, #1
    7830:	200e      	movs	r0, #14
    7832:	f7ff fec7 	bl	75c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SERCOM5_IRQn);
    7836:	200e      	movs	r0, #14
    7838:	f7ff fe8a 	bl	7550 <__NVIC_EnableIRQ>
}
    783c:	46c0      	nop			; (mov r8, r8)
    783e:	46bd      	mov	sp, r7
    7840:	bd80      	pop	{r7, pc}
    7842:	46c0      	nop			; (mov r8, r8)
    7844:	40000400 	.word	0x40000400
    7848:	40000c00 	.word	0x40000c00
    784c:	fffff0ff 	.word	0xfffff0ff
    7850:	42001c00 	.word	0x42001c00
    7854:	bfffffff 	.word	0xbfffffff
    7858:	dfffffff 	.word	0xdfffffff
    785c:	efffffff 	.word	0xefffffff
    7860:	f0ffffff 	.word	0xf0ffffff
    7864:	fffffeff 	.word	0xfffffeff
    7868:	fffcffff 	.word	0xfffcffff
    786c:	ffcfffff 	.word	0xffcfffff
    7870:	ffffdfff 	.word	0xffffdfff
    7874:	ffff3fff 	.word	0xffff3fff
    7878:	fffffdff 	.word	0xfffffdff

0000787c <spi_process>:


WORD spi_process (uint16_t addr, uint8_t cb, uint8_t *buf, uint16_t len, BYTE cmd)
{
    787c:	b5b0      	push	{r4, r5, r7, lr}
    787e:	b086      	sub	sp, #24
    7880:	af00      	add	r7, sp, #0
    7882:	0004      	movs	r4, r0
    7884:	0008      	movs	r0, r1
    7886:	60ba      	str	r2, [r7, #8]
    7888:	0019      	movs	r1, r3
    788a:	230e      	movs	r3, #14
    788c:	18fb      	adds	r3, r7, r3
    788e:	1c22      	adds	r2, r4, #0
    7890:	801a      	strh	r2, [r3, #0]
    7892:	230d      	movs	r3, #13
    7894:	18fb      	adds	r3, r7, r3
    7896:	1c02      	adds	r2, r0, #0
    7898:	701a      	strb	r2, [r3, #0]
    789a:	1dbb      	adds	r3, r7, #6
    789c:	1c0a      	adds	r2, r1, #0
    789e:	801a      	strh	r2, [r3, #0]
	BYTE st_spi=0;
    78a0:	2315      	movs	r3, #21
    78a2:	18fb      	adds	r3, r7, r3
    78a4:	2200      	movs	r2, #0
    78a6:	701a      	strb	r2, [r3, #0]
	WORD rn_wn=0;
    78a8:	2316      	movs	r3, #22
    78aa:	18fb      	adds	r3, r7, r3
    78ac:	2200      	movs	r2, #0
    78ae:	801a      	strh	r2, [r3, #0]
	
	st_spi = cmd;
    78b0:	2315      	movs	r3, #21
    78b2:	18fb      	adds	r3, r7, r3
    78b4:	2228      	movs	r2, #40	; 0x28
    78b6:	18ba      	adds	r2, r7, r2
    78b8:	7812      	ldrb	r2, [r2, #0]
    78ba:	701a      	strb	r2, [r3, #0]
	switch(st_spi)
    78bc:	2315      	movs	r3, #21
    78be:	18fb      	adds	r3, r7, r3
    78c0:	781b      	ldrb	r3, [r3, #0]
    78c2:	2b01      	cmp	r3, #1
    78c4:	d005      	beq.n	78d2 <spi_process+0x56>
    78c6:	2b02      	cmp	r3, #2
    78c8:	d014      	beq.n	78f4 <spi_process+0x78>
    78ca:	2b00      	cmp	r3, #0
    78cc:	d123      	bne.n	7916 <spi_process+0x9a>
	{
		case 0:
			return (1);
    78ce:	2301      	movs	r3, #1
    78d0:	e024      	b.n	791c <spi_process+0xa0>
		break;
		case READ_DATA:
			rn_wn=spi_read(addr,cb,buf,len);
    78d2:	2316      	movs	r3, #22
    78d4:	18fc      	adds	r4, r7, r3
    78d6:	1dbb      	adds	r3, r7, #6
    78d8:	881d      	ldrh	r5, [r3, #0]
    78da:	68ba      	ldr	r2, [r7, #8]
    78dc:	230d      	movs	r3, #13
    78de:	18fb      	adds	r3, r7, r3
    78e0:	7819      	ldrb	r1, [r3, #0]
    78e2:	230e      	movs	r3, #14
    78e4:	18fb      	adds	r3, r7, r3
    78e6:	8818      	ldrh	r0, [r3, #0]
    78e8:	002b      	movs	r3, r5
    78ea:	f000 f8f7 	bl	7adc <spi_read>
    78ee:	0003      	movs	r3, r0
    78f0:	8023      	strh	r3, [r4, #0]
		break;
    78f2:	e010      	b.n	7916 <spi_process+0x9a>
		case WRITE_DATA:
			rn_wn=spi_write(addr,cb,buf,len);
    78f4:	2316      	movs	r3, #22
    78f6:	18fc      	adds	r4, r7, r3
    78f8:	1dbb      	adds	r3, r7, #6
    78fa:	881d      	ldrh	r5, [r3, #0]
    78fc:	68ba      	ldr	r2, [r7, #8]
    78fe:	230d      	movs	r3, #13
    7900:	18fb      	adds	r3, r7, r3
    7902:	7819      	ldrb	r1, [r3, #0]
    7904:	230e      	movs	r3, #14
    7906:	18fb      	adds	r3, r7, r3
    7908:	8818      	ldrh	r0, [r3, #0]
    790a:	002b      	movs	r3, r5
    790c:	f000 f80a 	bl	7924 <spi_write>
    7910:	0003      	movs	r3, r0
    7912:	8023      	strh	r3, [r4, #0]
		break;			
    7914:	46c0      	nop			; (mov r8, r8)
	}
	return (rn_wn);
    7916:	2316      	movs	r3, #22
    7918:	18fb      	adds	r3, r7, r3
    791a:	881b      	ldrh	r3, [r3, #0]
}
    791c:	0018      	movs	r0, r3
    791e:	46bd      	mov	sp, r7
    7920:	b006      	add	sp, #24
    7922:	bdb0      	pop	{r4, r5, r7, pc}

00007924 <spi_write>:

WORD spi_write(uint16_t addr, uint8_t cb, uint8_t *tx_buf, uint16_t len)
{
    7924:	b590      	push	{r4, r7, lr}
    7926:	b087      	sub	sp, #28
    7928:	af00      	add	r7, sp, #0
    792a:	0004      	movs	r4, r0
    792c:	0008      	movs	r0, r1
    792e:	60ba      	str	r2, [r7, #8]
    7930:	0019      	movs	r1, r3
    7932:	230e      	movs	r3, #14
    7934:	18fb      	adds	r3, r7, r3
    7936:	1c22      	adds	r2, r4, #0
    7938:	801a      	strh	r2, [r3, #0]
    793a:	230d      	movs	r3, #13
    793c:	18fb      	adds	r3, r7, r3
    793e:	1c02      	adds	r2, r0, #0
    7940:	701a      	strb	r2, [r3, #0]
    7942:	1dbb      	adds	r3, r7, #6
    7944:	1c0a      	adds	r2, r1, #0
    7946:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7948:	2316      	movs	r3, #22
    794a:	18fb      	adds	r3, r7, r3
    794c:	2200      	movs	r2, #0
    794e:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7950:	4b5c      	ldr	r3, [pc, #368]	; (7ac4 <spi_write+0x1a0>)
    7952:	781b      	ldrb	r3, [r3, #0]
    7954:	2b00      	cmp	r3, #0
    7956:	d003      	beq.n	7960 <spi_write+0x3c>
    7958:	2b01      	cmp	r3, #1
    795a:	d100      	bne.n	795e <spi_write+0x3a>
    795c:	e08b      	b.n	7a76 <spi_write+0x152>
    795e:	e0ac      	b.n	7aba <spi_write+0x196>
	{
		case 0:
			CS_clr();			
    7960:	23c0      	movs	r3, #192	; 0xc0
    7962:	05db      	lsls	r3, r3, #23
    7964:	2280      	movs	r2, #128	; 0x80
    7966:	0452      	lsls	r2, r2, #17
    7968:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    796a:	2316      	movs	r3, #22
    796c:	18fb      	adds	r3, r7, r3
    796e:	881b      	ldrh	r3, [r3, #0]
    7970:	220e      	movs	r2, #14
    7972:	18ba      	adds	r2, r7, r2
    7974:	8812      	ldrh	r2, [r2, #0]
    7976:	0a12      	lsrs	r2, r2, #8
    7978:	b292      	uxth	r2, r2
    797a:	b2d1      	uxtb	r1, r2
    797c:	4a52      	ldr	r2, [pc, #328]	; (7ac8 <spi_write+0x1a4>)
    797e:	54d1      	strb	r1, [r2, r3]
    7980:	2316      	movs	r3, #22
    7982:	18fb      	adds	r3, r7, r3
    7984:	881a      	ldrh	r2, [r3, #0]
    7986:	2316      	movs	r3, #22
    7988:	18fb      	adds	r3, r7, r3
    798a:	3201      	adds	r2, #1
    798c:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    798e:	2316      	movs	r3, #22
    7990:	18fb      	adds	r3, r7, r3
    7992:	881b      	ldrh	r3, [r3, #0]
    7994:	220e      	movs	r2, #14
    7996:	18ba      	adds	r2, r7, r2
    7998:	8812      	ldrh	r2, [r2, #0]
    799a:	b2d1      	uxtb	r1, r2
    799c:	4a4a      	ldr	r2, [pc, #296]	; (7ac8 <spi_write+0x1a4>)
    799e:	54d1      	strb	r1, [r2, r3]
    79a0:	2316      	movs	r3, #22
    79a2:	18fb      	adds	r3, r7, r3
    79a4:	881a      	ldrh	r2, [r3, #0]
    79a6:	2316      	movs	r3, #22
    79a8:	18fb      	adds	r3, r7, r3
    79aa:	3201      	adds	r2, #1
    79ac:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | WRITE_REG | LEN_N_BYTES;		cnt++;
    79ae:	2316      	movs	r3, #22
    79b0:	18fb      	adds	r3, r7, r3
    79b2:	881b      	ldrh	r3, [r3, #0]
    79b4:	220d      	movs	r2, #13
    79b6:	18ba      	adds	r2, r7, r2
    79b8:	7812      	ldrb	r2, [r2, #0]
    79ba:	2104      	movs	r1, #4
    79bc:	430a      	orrs	r2, r1
    79be:	b2d1      	uxtb	r1, r2
    79c0:	4a41      	ldr	r2, [pc, #260]	; (7ac8 <spi_write+0x1a4>)
    79c2:	54d1      	strb	r1, [r2, r3]
    79c4:	2316      	movs	r3, #22
    79c6:	18fb      	adds	r3, r7, r3
    79c8:	881a      	ldrh	r2, [r3, #0]
    79ca:	2316      	movs	r3, #22
    79cc:	18fb      	adds	r3, r7, r3
    79ce:	3201      	adds	r2, #1
    79d0:	801a      	strh	r2, [r3, #0]
							
			if((len+cnt)>MAX_SIZE_BUF_SPI)		{len=MAX_SIZE_BUF_SPI-cnt;}
    79d2:	1dbb      	adds	r3, r7, #6
    79d4:	881a      	ldrh	r2, [r3, #0]
    79d6:	2316      	movs	r3, #22
    79d8:	18fb      	adds	r3, r7, r3
    79da:	881b      	ldrh	r3, [r3, #0]
    79dc:	18d2      	adds	r2, r2, r3
    79de:	23b9      	movs	r3, #185	; 0xb9
    79e0:	00db      	lsls	r3, r3, #3
    79e2:	429a      	cmp	r2, r3
    79e4:	dd07      	ble.n	79f6 <spi_write+0xd2>
    79e6:	1dbb      	adds	r3, r7, #6
    79e8:	2216      	movs	r2, #22
    79ea:	18ba      	adds	r2, r7, r2
    79ec:	8812      	ldrh	r2, [r2, #0]
    79ee:	21b9      	movs	r1, #185	; 0xb9
    79f0:	00c9      	lsls	r1, r1, #3
    79f2:	1a8a      	subs	r2, r1, r2
    79f4:	801a      	strh	r2, [r3, #0]
			memcpy(&spi.wbuf[cnt],tx_buf,len);  cnt=cnt+len;
    79f6:	2316      	movs	r3, #22
    79f8:	18fb      	adds	r3, r7, r3
    79fa:	881a      	ldrh	r2, [r3, #0]
    79fc:	4b32      	ldr	r3, [pc, #200]	; (7ac8 <spi_write+0x1a4>)
    79fe:	18d0      	adds	r0, r2, r3
    7a00:	1dbb      	adds	r3, r7, #6
    7a02:	881a      	ldrh	r2, [r3, #0]
    7a04:	68bb      	ldr	r3, [r7, #8]
    7a06:	0019      	movs	r1, r3
    7a08:	4b30      	ldr	r3, [pc, #192]	; (7acc <spi_write+0x1a8>)
    7a0a:	4798      	blx	r3
    7a0c:	2316      	movs	r3, #22
    7a0e:	18fb      	adds	r3, r7, r3
    7a10:	2216      	movs	r2, #22
    7a12:	18b9      	adds	r1, r7, r2
    7a14:	1dba      	adds	r2, r7, #6
    7a16:	8809      	ldrh	r1, [r1, #0]
    7a18:	8812      	ldrh	r2, [r2, #0]
    7a1a:	188a      	adds	r2, r1, r2
    7a1c:	801a      	strh	r2, [r3, #0]
							
			spi.wx = cnt; 
    7a1e:	4b2a      	ldr	r3, [pc, #168]	; (7ac8 <spi_write+0x1a4>)
    7a20:	2216      	movs	r2, #22
    7a22:	18ba      	adds	r2, r7, r2
    7a24:	492a      	ldr	r1, [pc, #168]	; (7ad0 <spi_write+0x1ac>)
    7a26:	8812      	ldrh	r2, [r2, #0]
    7a28:	525a      	strh	r2, [r3, r1]
			spi.wn = 0;
    7a2a:	4b27      	ldr	r3, [pc, #156]	; (7ac8 <spi_write+0x1a4>)
    7a2c:	4a29      	ldr	r2, [pc, #164]	; (7ad4 <spi_write+0x1b0>)
    7a2e:	2100      	movs	r1, #0
    7a30:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7a32:	4a25      	ldr	r2, [pc, #148]	; (7ac8 <spi_write+0x1a4>)
    7a34:	23b9      	movs	r3, #185	; 0xb9
    7a36:	011b      	lsls	r3, r3, #4
    7a38:	2100      	movs	r1, #0
    7a3a:	52d1      	strh	r1, [r2, r3]
							
			if(spi.wx>MAX_SIZE_BUF_SPI)			{spi.wx=MAX_SIZE_BUF_SPI;}
    7a3c:	4b22      	ldr	r3, [pc, #136]	; (7ac8 <spi_write+0x1a4>)
    7a3e:	4a24      	ldr	r2, [pc, #144]	; (7ad0 <spi_write+0x1ac>)
    7a40:	5a9a      	ldrh	r2, [r3, r2]
    7a42:	23b9      	movs	r3, #185	; 0xb9
    7a44:	00db      	lsls	r3, r3, #3
    7a46:	429a      	cmp	r2, r3
    7a48:	d904      	bls.n	7a54 <spi_write+0x130>
    7a4a:	4b1f      	ldr	r3, [pc, #124]	; (7ac8 <spi_write+0x1a4>)
    7a4c:	4a20      	ldr	r2, [pc, #128]	; (7ad0 <spi_write+0x1ac>)
    7a4e:	21b9      	movs	r1, #185	; 0xb9
    7a50:	00c9      	lsls	r1, r1, #3
    7a52:	5299      	strh	r1, [r3, r2]
			st_read++;
    7a54:	4b1b      	ldr	r3, [pc, #108]	; (7ac4 <spi_write+0x1a0>)
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	3301      	adds	r3, #1
    7a5a:	b2da      	uxtb	r2, r3
    7a5c:	4b19      	ldr	r3, [pc, #100]	; (7ac4 <spi_write+0x1a0>)
    7a5e:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7a60:	4a1d      	ldr	r2, [pc, #116]	; (7ad8 <spi_write+0x1b4>)
    7a62:	7d93      	ldrb	r3, [r2, #22]
    7a64:	2101      	movs	r1, #1
    7a66:	430b      	orrs	r3, r1
    7a68:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;							
    7a6a:	4a1b      	ldr	r2, [pc, #108]	; (7ad8 <spi_write+0x1b4>)
    7a6c:	7d93      	ldrb	r3, [r2, #22]
    7a6e:	2104      	movs	r1, #4
    7a70:	430b      	orrs	r3, r1
    7a72:	7593      	strb	r3, [r2, #22]
		break;
    7a74:	e021      	b.n	7aba <spi_write+0x196>
		case 1:	
			if(spi.wx)							{return 0;}
    7a76:	4b14      	ldr	r3, [pc, #80]	; (7ac8 <spi_write+0x1a4>)
    7a78:	4a15      	ldr	r2, [pc, #84]	; (7ad0 <spi_write+0x1ac>)
    7a7a:	5a9b      	ldrh	r3, [r3, r2]
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d001      	beq.n	7a84 <spi_write+0x160>
    7a80:	2300      	movs	r3, #0
    7a82:	e01b      	b.n	7abc <spi_write+0x198>
			if(spi.rn!=spi.wn)					{return 0;}
    7a84:	4a10      	ldr	r2, [pc, #64]	; (7ac8 <spi_write+0x1a4>)
    7a86:	23b9      	movs	r3, #185	; 0xb9
    7a88:	011b      	lsls	r3, r3, #4
    7a8a:	5ad2      	ldrh	r2, [r2, r3]
    7a8c:	4b0e      	ldr	r3, [pc, #56]	; (7ac8 <spi_write+0x1a4>)
    7a8e:	4911      	ldr	r1, [pc, #68]	; (7ad4 <spi_write+0x1b0>)
    7a90:	5a5b      	ldrh	r3, [r3, r1]
    7a92:	429a      	cmp	r2, r3
    7a94:	d001      	beq.n	7a9a <spi_write+0x176>
    7a96:	2300      	movs	r3, #0
    7a98:	e010      	b.n	7abc <spi_write+0x198>
			st_read--;
    7a9a:	4b0a      	ldr	r3, [pc, #40]	; (7ac4 <spi_write+0x1a0>)
    7a9c:	781b      	ldrb	r3, [r3, #0]
    7a9e:	3b01      	subs	r3, #1
    7aa0:	b2da      	uxtb	r2, r3
    7aa2:	4b08      	ldr	r3, [pc, #32]	; (7ac4 <spi_write+0x1a0>)
    7aa4:	701a      	strb	r2, [r3, #0]
			CS_set();
    7aa6:	23c0      	movs	r3, #192	; 0xc0
    7aa8:	05db      	lsls	r3, r3, #23
    7aaa:	2280      	movs	r2, #128	; 0x80
    7aac:	0452      	lsls	r2, r2, #17
    7aae:	619a      	str	r2, [r3, #24]
			
			return (spi.rn);
    7ab0:	4a05      	ldr	r2, [pc, #20]	; (7ac8 <spi_write+0x1a4>)
    7ab2:	23b9      	movs	r3, #185	; 0xb9
    7ab4:	011b      	lsls	r3, r3, #4
    7ab6:	5ad3      	ldrh	r3, [r2, r3]
    7ab8:	e000      	b.n	7abc <spi_write+0x198>
		break;
	}
	return 0;
    7aba:	2300      	movs	r3, #0
}
    7abc:	0018      	movs	r0, r3
    7abe:	46bd      	mov	sp, r7
    7ac0:	b007      	add	sp, #28
    7ac2:	bd90      	pop	{r4, r7, pc}
    7ac4:	20000469 	.word	0x20000469
    7ac8:	20002654 	.word	0x20002654
    7acc:	0000c7e1 	.word	0x0000c7e1
    7ad0:	00000b94 	.word	0x00000b94
    7ad4:	00000b92 	.word	0x00000b92
    7ad8:	42001c00 	.word	0x42001c00

00007adc <spi_read>:

WORD spi_read(uint16_t addr, uint8_t cb, uint8_t *rx_buf, uint16_t len)
{
    7adc:	b590      	push	{r4, r7, lr}
    7ade:	b087      	sub	sp, #28
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	0004      	movs	r4, r0
    7ae4:	0008      	movs	r0, r1
    7ae6:	60ba      	str	r2, [r7, #8]
    7ae8:	0019      	movs	r1, r3
    7aea:	230e      	movs	r3, #14
    7aec:	18fb      	adds	r3, r7, r3
    7aee:	1c22      	adds	r2, r4, #0
    7af0:	801a      	strh	r2, [r3, #0]
    7af2:	230d      	movs	r3, #13
    7af4:	18fb      	adds	r3, r7, r3
    7af6:	1c02      	adds	r2, r0, #0
    7af8:	701a      	strb	r2, [r3, #0]
    7afa:	1dbb      	adds	r3, r7, #6
    7afc:	1c0a      	adds	r2, r1, #0
    7afe:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7b00:	2316      	movs	r3, #22
    7b02:	18fb      	adds	r3, r7, r3
    7b04:	2200      	movs	r2, #0
    7b06:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7b08:	4b4e      	ldr	r3, [pc, #312]	; (7c44 <spi_read+0x168>)
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	2b00      	cmp	r3, #0
    7b0e:	d002      	beq.n	7b16 <spi_read+0x3a>
    7b10:	2b01      	cmp	r3, #1
    7b12:	d066      	beq.n	7be2 <spi_read+0x106>
    7b14:	e091      	b.n	7c3a <spi_read+0x15e>
	{
		case 0:
			CS_clr();
    7b16:	23c0      	movs	r3, #192	; 0xc0
    7b18:	05db      	lsls	r3, r3, #23
    7b1a:	2280      	movs	r2, #128	; 0x80
    7b1c:	0452      	lsls	r2, r2, #17
    7b1e:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    7b20:	2316      	movs	r3, #22
    7b22:	18fb      	adds	r3, r7, r3
    7b24:	881b      	ldrh	r3, [r3, #0]
    7b26:	220e      	movs	r2, #14
    7b28:	18ba      	adds	r2, r7, r2
    7b2a:	8812      	ldrh	r2, [r2, #0]
    7b2c:	0a12      	lsrs	r2, r2, #8
    7b2e:	b292      	uxth	r2, r2
    7b30:	b2d1      	uxtb	r1, r2
    7b32:	4a45      	ldr	r2, [pc, #276]	; (7c48 <spi_read+0x16c>)
    7b34:	54d1      	strb	r1, [r2, r3]
    7b36:	2316      	movs	r3, #22
    7b38:	18fb      	adds	r3, r7, r3
    7b3a:	881a      	ldrh	r2, [r3, #0]
    7b3c:	2316      	movs	r3, #22
    7b3e:	18fb      	adds	r3, r7, r3
    7b40:	3201      	adds	r2, #1
    7b42:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7b44:	2316      	movs	r3, #22
    7b46:	18fb      	adds	r3, r7, r3
    7b48:	881b      	ldrh	r3, [r3, #0]
    7b4a:	220e      	movs	r2, #14
    7b4c:	18ba      	adds	r2, r7, r2
    7b4e:	8812      	ldrh	r2, [r2, #0]
    7b50:	b2d1      	uxtb	r1, r2
    7b52:	4a3d      	ldr	r2, [pc, #244]	; (7c48 <spi_read+0x16c>)
    7b54:	54d1      	strb	r1, [r2, r3]
    7b56:	2316      	movs	r3, #22
    7b58:	18fb      	adds	r3, r7, r3
    7b5a:	881a      	ldrh	r2, [r3, #0]
    7b5c:	2316      	movs	r3, #22
    7b5e:	18fb      	adds	r3, r7, r3
    7b60:	3201      	adds	r2, #1
    7b62:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | READ_REG | LEN_N_BYTES;		cnt++;
    7b64:	2316      	movs	r3, #22
    7b66:	18fb      	adds	r3, r7, r3
    7b68:	881b      	ldrh	r3, [r3, #0]
    7b6a:	4a37      	ldr	r2, [pc, #220]	; (7c48 <spi_read+0x16c>)
    7b6c:	210d      	movs	r1, #13
    7b6e:	1879      	adds	r1, r7, r1
    7b70:	7809      	ldrb	r1, [r1, #0]
    7b72:	54d1      	strb	r1, [r2, r3]
    7b74:	2316      	movs	r3, #22
    7b76:	18fb      	adds	r3, r7, r3
    7b78:	881a      	ldrh	r2, [r3, #0]
    7b7a:	2316      	movs	r3, #22
    7b7c:	18fb      	adds	r3, r7, r3
    7b7e:	3201      	adds	r2, #1
    7b80:	801a      	strh	r2, [r3, #0]
			spi.wx = cnt + len;
    7b82:	2316      	movs	r3, #22
    7b84:	18fa      	adds	r2, r7, r3
    7b86:	1dbb      	adds	r3, r7, #6
    7b88:	8812      	ldrh	r2, [r2, #0]
    7b8a:	881b      	ldrh	r3, [r3, #0]
    7b8c:	18d3      	adds	r3, r2, r3
    7b8e:	b299      	uxth	r1, r3
    7b90:	4b2d      	ldr	r3, [pc, #180]	; (7c48 <spi_read+0x16c>)
    7b92:	4a2e      	ldr	r2, [pc, #184]	; (7c4c <spi_read+0x170>)
    7b94:	5299      	strh	r1, [r3, r2]
			spi.wn = 0;
    7b96:	4b2c      	ldr	r3, [pc, #176]	; (7c48 <spi_read+0x16c>)
    7b98:	4a2d      	ldr	r2, [pc, #180]	; (7c50 <spi_read+0x174>)
    7b9a:	2100      	movs	r1, #0
    7b9c:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7b9e:	4a2a      	ldr	r2, [pc, #168]	; (7c48 <spi_read+0x16c>)
    7ba0:	23b9      	movs	r3, #185	; 0xb9
    7ba2:	011b      	lsls	r3, r3, #4
    7ba4:	2100      	movs	r1, #0
    7ba6:	52d1      	strh	r1, [r2, r3]
			if(spi.wx>MAX_SIZE_BUF_SPI) {spi.wx=MAX_SIZE_BUF_SPI;}
    7ba8:	4b27      	ldr	r3, [pc, #156]	; (7c48 <spi_read+0x16c>)
    7baa:	4a28      	ldr	r2, [pc, #160]	; (7c4c <spi_read+0x170>)
    7bac:	5a9a      	ldrh	r2, [r3, r2]
    7bae:	23b9      	movs	r3, #185	; 0xb9
    7bb0:	00db      	lsls	r3, r3, #3
    7bb2:	429a      	cmp	r2, r3
    7bb4:	d904      	bls.n	7bc0 <spi_read+0xe4>
    7bb6:	4b24      	ldr	r3, [pc, #144]	; (7c48 <spi_read+0x16c>)
    7bb8:	4a24      	ldr	r2, [pc, #144]	; (7c4c <spi_read+0x170>)
    7bba:	21b9      	movs	r1, #185	; 0xb9
    7bbc:	00c9      	lsls	r1, r1, #3
    7bbe:	5299      	strh	r1, [r3, r2]
			st_read++;
    7bc0:	4b20      	ldr	r3, [pc, #128]	; (7c44 <spi_read+0x168>)
    7bc2:	781b      	ldrb	r3, [r3, #0]
    7bc4:	3301      	adds	r3, #1
    7bc6:	b2da      	uxtb	r2, r3
    7bc8:	4b1e      	ldr	r3, [pc, #120]	; (7c44 <spi_read+0x168>)
    7bca:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7bcc:	4a21      	ldr	r2, [pc, #132]	; (7c54 <spi_read+0x178>)
    7bce:	7d93      	ldrb	r3, [r2, #22]
    7bd0:	2101      	movs	r1, #1
    7bd2:	430b      	orrs	r3, r1
    7bd4:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;
    7bd6:	4a1f      	ldr	r2, [pc, #124]	; (7c54 <spi_read+0x178>)
    7bd8:	7d93      	ldrb	r3, [r2, #22]
    7bda:	2104      	movs	r1, #4
    7bdc:	430b      	orrs	r3, r1
    7bde:	7593      	strb	r3, [r2, #22]
		break;
    7be0:	e02b      	b.n	7c3a <spi_read+0x15e>
		case 1:
			if(spi.wx)							{return 0;}
    7be2:	4b19      	ldr	r3, [pc, #100]	; (7c48 <spi_read+0x16c>)
    7be4:	4a19      	ldr	r2, [pc, #100]	; (7c4c <spi_read+0x170>)
    7be6:	5a9b      	ldrh	r3, [r3, r2]
    7be8:	2b00      	cmp	r3, #0
    7bea:	d001      	beq.n	7bf0 <spi_read+0x114>
    7bec:	2300      	movs	r3, #0
    7bee:	e025      	b.n	7c3c <spi_read+0x160>
			if(spi.rn!=spi.wn)					{return 0;}
    7bf0:	4a15      	ldr	r2, [pc, #84]	; (7c48 <spi_read+0x16c>)
    7bf2:	23b9      	movs	r3, #185	; 0xb9
    7bf4:	011b      	lsls	r3, r3, #4
    7bf6:	5ad2      	ldrh	r2, [r2, r3]
    7bf8:	4b13      	ldr	r3, [pc, #76]	; (7c48 <spi_read+0x16c>)
    7bfa:	4915      	ldr	r1, [pc, #84]	; (7c50 <spi_read+0x174>)
    7bfc:	5a5b      	ldrh	r3, [r3, r1]
    7bfe:	429a      	cmp	r2, r3
    7c00:	d001      	beq.n	7c06 <spi_read+0x12a>
    7c02:	2300      	movs	r3, #0
    7c04:	e01a      	b.n	7c3c <spi_read+0x160>
			memcpy(rx_buf,&spi.rbuf[3],spi.rn);
    7c06:	4a10      	ldr	r2, [pc, #64]	; (7c48 <spi_read+0x16c>)
    7c08:	23b9      	movs	r3, #185	; 0xb9
    7c0a:	011b      	lsls	r3, r3, #4
    7c0c:	5ad3      	ldrh	r3, [r2, r3]
    7c0e:	001a      	movs	r2, r3
    7c10:	4911      	ldr	r1, [pc, #68]	; (7c58 <spi_read+0x17c>)
    7c12:	68bb      	ldr	r3, [r7, #8]
    7c14:	0018      	movs	r0, r3
    7c16:	4b11      	ldr	r3, [pc, #68]	; (7c5c <spi_read+0x180>)
    7c18:	4798      	blx	r3
			st_read--;
    7c1a:	4b0a      	ldr	r3, [pc, #40]	; (7c44 <spi_read+0x168>)
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	3b01      	subs	r3, #1
    7c20:	b2da      	uxtb	r2, r3
    7c22:	4b08      	ldr	r3, [pc, #32]	; (7c44 <spi_read+0x168>)
    7c24:	701a      	strb	r2, [r3, #0]
			CS_set();
    7c26:	23c0      	movs	r3, #192	; 0xc0
    7c28:	05db      	lsls	r3, r3, #23
    7c2a:	2280      	movs	r2, #128	; 0x80
    7c2c:	0452      	lsls	r2, r2, #17
    7c2e:	619a      	str	r2, [r3, #24]
				
			return (spi.rn);
    7c30:	4a05      	ldr	r2, [pc, #20]	; (7c48 <spi_read+0x16c>)
    7c32:	23b9      	movs	r3, #185	; 0xb9
    7c34:	011b      	lsls	r3, r3, #4
    7c36:	5ad3      	ldrh	r3, [r2, r3]
    7c38:	e000      	b.n	7c3c <spi_read+0x160>
		break;
	}
	return 0;
    7c3a:	2300      	movs	r3, #0
}
    7c3c:	0018      	movs	r0, r3
    7c3e:	46bd      	mov	sp, r7
    7c40:	b007      	add	sp, #28
    7c42:	bd90      	pop	{r4, r7, pc}
    7c44:	2000046a 	.word	0x2000046a
    7c48:	20002654 	.word	0x20002654
    7c4c:	00000b94 	.word	0x00000b94
    7c50:	00000b92 	.word	0x00000b92
    7c54:	42001c00 	.word	0x42001c00
    7c58:	20002c1f 	.word	0x20002c1f
    7c5c:	0000c7e1 	.word	0x0000c7e1

00007c60 <SERCOM5_Handler>:

void SERCOM5_Handler(void)
//-----------------------------------------------------------------------------
{
    7c60:	b580      	push	{r7, lr}
    7c62:	af00      	add	r7, sp, #0
	
	if(SERCOM5->SPI.INTFLAG.bit.RXC)
    7c64:	4b37      	ldr	r3, [pc, #220]	; (7d44 <SERCOM5_Handler+0xe4>)
    7c66:	7e1b      	ldrb	r3, [r3, #24]
    7c68:	075b      	lsls	r3, r3, #29
    7c6a:	0fdb      	lsrs	r3, r3, #31
    7c6c:	b2db      	uxtb	r3, r3
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d029      	beq.n	7cc6 <SERCOM5_Handler+0x66>
	{
		spi.rbuf[spi.rn] = SERCOM5->SPI.DATA.reg;
    7c72:	4a35      	ldr	r2, [pc, #212]	; (7d48 <SERCOM5_Handler+0xe8>)
    7c74:	23b9      	movs	r3, #185	; 0xb9
    7c76:	011b      	lsls	r3, r3, #4
    7c78:	5ad3      	ldrh	r3, [r2, r3]
    7c7a:	0018      	movs	r0, r3
    7c7c:	4b31      	ldr	r3, [pc, #196]	; (7d44 <SERCOM5_Handler+0xe4>)
    7c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c80:	b2d9      	uxtb	r1, r3
    7c82:	4a31      	ldr	r2, [pc, #196]	; (7d48 <SERCOM5_Handler+0xe8>)
    7c84:	23b9      	movs	r3, #185	; 0xb9
    7c86:	00db      	lsls	r3, r3, #3
    7c88:	1812      	adds	r2, r2, r0
    7c8a:	18d3      	adds	r3, r2, r3
    7c8c:	1c0a      	adds	r2, r1, #0
    7c8e:	701a      	strb	r2, [r3, #0]
		spi.rn++;	
    7c90:	4a2d      	ldr	r2, [pc, #180]	; (7d48 <SERCOM5_Handler+0xe8>)
    7c92:	23b9      	movs	r3, #185	; 0xb9
    7c94:	011b      	lsls	r3, r3, #4
    7c96:	5ad3      	ldrh	r3, [r2, r3]
    7c98:	3301      	adds	r3, #1
    7c9a:	b299      	uxth	r1, r3
    7c9c:	4a2a      	ldr	r2, [pc, #168]	; (7d48 <SERCOM5_Handler+0xe8>)
    7c9e:	23b9      	movs	r3, #185	; 0xb9
    7ca0:	011b      	lsls	r3, r3, #4
    7ca2:	52d1      	strh	r1, [r2, r3]
		spi.RXC_sum++;
    7ca4:	4b28      	ldr	r3, [pc, #160]	; (7d48 <SERCOM5_Handler+0xe8>)
    7ca6:	4a29      	ldr	r2, [pc, #164]	; (7d4c <SERCOM5_Handler+0xec>)
    7ca8:	589b      	ldr	r3, [r3, r2]
    7caa:	1c5a      	adds	r2, r3, #1
    7cac:	4b26      	ldr	r3, [pc, #152]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cae:	4927      	ldr	r1, [pc, #156]	; (7d4c <SERCOM5_Handler+0xec>)
    7cb0:	505a      	str	r2, [r3, r1]
		if(!spi.wx) 
    7cb2:	4b25      	ldr	r3, [pc, #148]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cb4:	4a26      	ldr	r2, [pc, #152]	; (7d50 <SERCOM5_Handler+0xf0>)
    7cb6:	5a9b      	ldrh	r3, [r3, r2]
    7cb8:	2b00      	cmp	r3, #0
    7cba:	d104      	bne.n	7cc6 <SERCOM5_Handler+0x66>
		{
			SERCOM5->SPI.INTENCLR.bit.RXC =0x01;
    7cbc:	4a21      	ldr	r2, [pc, #132]	; (7d44 <SERCOM5_Handler+0xe4>)
    7cbe:	7d13      	ldrb	r3, [r2, #20]
    7cc0:	2104      	movs	r1, #4
    7cc2:	430b      	orrs	r3, r1
    7cc4:	7513      	strb	r3, [r2, #20]
		}	
	}
	if(SERCOM5->SPI.INTFLAG.bit.DRE)
    7cc6:	4b1f      	ldr	r3, [pc, #124]	; (7d44 <SERCOM5_Handler+0xe4>)
    7cc8:	7e1b      	ldrb	r3, [r3, #24]
    7cca:	07db      	lsls	r3, r3, #31
    7ccc:	0fdb      	lsrs	r3, r3, #31
    7cce:	b2db      	uxtb	r3, r3
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	d034      	beq.n	7d3e <SERCOM5_Handler+0xde>
	{
		spi.DRE_sum++;
    7cd4:	4b1c      	ldr	r3, [pc, #112]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cd6:	4a1f      	ldr	r2, [pc, #124]	; (7d54 <SERCOM5_Handler+0xf4>)
    7cd8:	589b      	ldr	r3, [r3, r2]
    7cda:	1c5a      	adds	r2, r3, #1
    7cdc:	4b1a      	ldr	r3, [pc, #104]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cde:	491d      	ldr	r1, [pc, #116]	; (7d54 <SERCOM5_Handler+0xf4>)
    7ce0:	505a      	str	r2, [r3, r1]
		if(spi.rn!=spi.wn){return;}
    7ce2:	4a19      	ldr	r2, [pc, #100]	; (7d48 <SERCOM5_Handler+0xe8>)
    7ce4:	23b9      	movs	r3, #185	; 0xb9
    7ce6:	011b      	lsls	r3, r3, #4
    7ce8:	5ad2      	ldrh	r2, [r2, r3]
    7cea:	4b17      	ldr	r3, [pc, #92]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cec:	491a      	ldr	r1, [pc, #104]	; (7d58 <SERCOM5_Handler+0xf8>)
    7cee:	5a5b      	ldrh	r3, [r3, r1]
    7cf0:	429a      	cmp	r2, r3
    7cf2:	d123      	bne.n	7d3c <SERCOM5_Handler+0xdc>
		if(spi.wx)
    7cf4:	4b14      	ldr	r3, [pc, #80]	; (7d48 <SERCOM5_Handler+0xe8>)
    7cf6:	4a16      	ldr	r2, [pc, #88]	; (7d50 <SERCOM5_Handler+0xf0>)
    7cf8:	5a9b      	ldrh	r3, [r3, r2]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d018      	beq.n	7d30 <SERCOM5_Handler+0xd0>
		{ 
			SERCOM5->SPI.DATA.reg=spi.wbuf[spi.wn];
    7cfe:	4b11      	ldr	r3, [pc, #68]	; (7d44 <SERCOM5_Handler+0xe4>)
    7d00:	4a11      	ldr	r2, [pc, #68]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d02:	4915      	ldr	r1, [pc, #84]	; (7d58 <SERCOM5_Handler+0xf8>)
    7d04:	5a52      	ldrh	r2, [r2, r1]
    7d06:	0011      	movs	r1, r2
    7d08:	4a0f      	ldr	r2, [pc, #60]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d0a:	5c52      	ldrb	r2, [r2, r1]
    7d0c:	629a      	str	r2, [r3, #40]	; 0x28
			spi.wn++;
    7d0e:	4b0e      	ldr	r3, [pc, #56]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d10:	4a11      	ldr	r2, [pc, #68]	; (7d58 <SERCOM5_Handler+0xf8>)
    7d12:	5a9b      	ldrh	r3, [r3, r2]
    7d14:	3301      	adds	r3, #1
    7d16:	b299      	uxth	r1, r3
    7d18:	4b0b      	ldr	r3, [pc, #44]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d1a:	4a0f      	ldr	r2, [pc, #60]	; (7d58 <SERCOM5_Handler+0xf8>)
    7d1c:	5299      	strh	r1, [r3, r2]
			spi.wx--;
    7d1e:	4b0a      	ldr	r3, [pc, #40]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d20:	4a0b      	ldr	r2, [pc, #44]	; (7d50 <SERCOM5_Handler+0xf0>)
    7d22:	5a9b      	ldrh	r3, [r3, r2]
    7d24:	3b01      	subs	r3, #1
    7d26:	b299      	uxth	r1, r3
    7d28:	4b07      	ldr	r3, [pc, #28]	; (7d48 <SERCOM5_Handler+0xe8>)
    7d2a:	4a09      	ldr	r2, [pc, #36]	; (7d50 <SERCOM5_Handler+0xf0>)
    7d2c:	5299      	strh	r1, [r3, r2]
    7d2e:	e006      	b.n	7d3e <SERCOM5_Handler+0xde>
		}
		else {SERCOM5->SPI.INTENCLR.bit.DRE =0x01;}
    7d30:	4a04      	ldr	r2, [pc, #16]	; (7d44 <SERCOM5_Handler+0xe4>)
    7d32:	7d13      	ldrb	r3, [r2, #20]
    7d34:	2101      	movs	r1, #1
    7d36:	430b      	orrs	r3, r1
    7d38:	7513      	strb	r3, [r2, #20]
    7d3a:	e000      	b.n	7d3e <SERCOM5_Handler+0xde>
		if(spi.rn!=spi.wn){return;}
    7d3c:	46c0      	nop			; (mov r8, r8)
	}
}
    7d3e:	46bd      	mov	sp, r7
    7d40:	bd80      	pop	{r7, pc}
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	42001c00 	.word	0x42001c00
    7d48:	20002654 	.word	0x20002654
    7d4c:	00000b9c 	.word	0x00000b9c
    7d50:	00000b94 	.word	0x00000b94
    7d54:	00000b98 	.word	0x00000b98
    7d58:	00000b92 	.word	0x00000b92

00007d5c <sys_clock_init_USE_OSC8M>:



void sys_clock_init_USE_OSC8M(void)
//-----------------------------------------------------------------------------
{
    7d5c:	b580      	push	{r7, lr}
    7d5e:	b082      	sub	sp, #8
    7d60:	af00      	add	r7, sp, #0
	uint32_t temp = SYSCTRL->OSC8M.reg;
    7d62:	4b0c      	ldr	r3, [pc, #48]	; (7d94 <sys_clock_init_USE_OSC8M+0x38>)
    7d64:	6a1b      	ldr	r3, [r3, #32]
    7d66:	607b      	str	r3, [r7, #4]
	temp &= ~((uint32_t)0x0000FFFF);
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	0c1b      	lsrs	r3, r3, #16
    7d6c:	041b      	lsls	r3, r3, #16
    7d6e:	607b      	str	r3, [r7, #4]
	temp |= SYSCTRL_OSC8M_PRESC(0x00) | SYSCTRL_OSC8M_ENABLE;
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	2202      	movs	r2, #2
    7d74:	4313      	orrs	r3, r2
    7d76:	607b      	str	r3, [r7, #4]
	SYSCTRL->OSC8M.reg = temp;
    7d78:	4b06      	ldr	r3, [pc, #24]	; (7d94 <sys_clock_init_USE_OSC8M+0x38>)
    7d7a:	687a      	ldr	r2, [r7, #4]
    7d7c:	621a      	str	r2, [r3, #32]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY)){};
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	4b04      	ldr	r3, [pc, #16]	; (7d94 <sys_clock_init_USE_OSC8M+0x38>)
    7d82:	68db      	ldr	r3, [r3, #12]
    7d84:	2208      	movs	r2, #8
    7d86:	4013      	ands	r3, r2
    7d88:	d0fa      	beq.n	7d80 <sys_clock_init_USE_OSC8M+0x24>
}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	46bd      	mov	sp, r7
    7d8e:	b002      	add	sp, #8
    7d90:	bd80      	pop	{r7, pc}
    7d92:	46c0      	nop			; (mov r8, r8)
    7d94:	40000800 	.word	0x40000800

00007d98 <sys_clock_init_USE_DFLL48M>:


void sys_clock_init_USE_DFLL48M(void)
{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
	uint32_t coarse, fine;

	NVMCTRL->CTRLB.bit.RWS=2; //this is needed for 48 MHz
    7d9e:	4a2d      	ldr	r2, [pc, #180]	; (7e54 <sys_clock_init_USE_DFLL48M+0xbc>)
    7da0:	6853      	ldr	r3, [r2, #4]
    7da2:	211e      	movs	r1, #30
    7da4:	438b      	bics	r3, r1
    7da6:	2104      	movs	r1, #4
    7da8:	430b      	orrs	r3, r1
    7daa:	6053      	str	r3, [r2, #4]

	coarse=NVM_READ_CAL(DFLL48M_COARSE_CAL); //read coarse calibration value from NVM Software Calibration Area Map
    7dac:	4b2a      	ldr	r3, [pc, #168]	; (7e58 <sys_clock_init_USE_DFLL48M+0xc0>)
    7dae:	681b      	ldr	r3, [r3, #0]
    7db0:	0e9b      	lsrs	r3, r3, #26
    7db2:	607b      	str	r3, [r7, #4]
	fine  =NVM_READ_CAL(DFLL48M_FINE_CAL  ); //read fine calibration value from NVM Software Calibration Area Map
    7db4:	4b29      	ldr	r3, [pc, #164]	; (7e5c <sys_clock_init_USE_DFLL48M+0xc4>)
    7db6:	681b      	ldr	r3, [r3, #0]
    7db8:	059b      	lsls	r3, r3, #22
    7dba:	0d9b      	lsrs	r3, r3, #22
    7dbc:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLCTRL.reg=0; // See Errata 9905
    7dbe:	4b28      	ldr	r3, [pc, #160]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dc0:	2200      	movs	r2, #0
    7dc2:	849a      	strh	r2, [r3, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; }
    7dc4:	46c0      	nop			; (mov r8, r8)
    7dc6:	4b26      	ldr	r3, [pc, #152]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dc8:	68db      	ldr	r3, [r3, #12]
    7dca:	2210      	movs	r2, #16
    7dcc:	4013      	ands	r3, r2
    7dce:	d0fa      	beq.n	7dc6 <sys_clock_init_USE_DFLL48M+0x2e>

	SYSCTRL->DFLLVAL.reg=SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine); //this will set DFLL48 close to 48 MHz
    7dd0:	4b23      	ldr	r3, [pc, #140]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dd2:	687a      	ldr	r2, [r7, #4]
    7dd4:	0292      	lsls	r2, r2, #10
    7dd6:	0412      	lsls	r2, r2, #16
    7dd8:	0c11      	lsrs	r1, r2, #16
    7dda:	683a      	ldr	r2, [r7, #0]
    7ddc:	0592      	lsls	r2, r2, #22
    7dde:	0d92      	lsrs	r2, r2, #22
    7de0:	430a      	orrs	r2, r1
    7de2:	629a      	str	r2, [r3, #40]	; 0x28
	
	SYSCTRL->DFLLCTRL.bit.STABLE	=1; // Stable frequency (FINE calibration register value will be fixed after a fine lock)
    7de4:	4a1e      	ldr	r2, [pc, #120]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7de6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7de8:	2108      	movs	r1, #8
    7dea:	430b      	orrs	r3, r1
    7dec:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.BPLCKC	=1; // Bypass coarse clock enable
    7dee:	4a1c      	ldr	r2, [pc, #112]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7df0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7df2:	2180      	movs	r1, #128	; 0x80
    7df4:	00c9      	lsls	r1, r1, #3
    7df6:	430b      	orrs	r3, r1
    7df8:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.MODE		=0; // Open loop mode
    7dfa:	4a19      	ldr	r2, [pc, #100]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dfc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7dfe:	2104      	movs	r1, #4
    7e00:	438b      	bics	r3, r1
    7e02:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ONDEMAND  =0; // On Demand is disabled, the oscillator will always be running when enabled.
    7e04:	4a16      	ldr	r2, [pc, #88]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e06:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e08:	2180      	movs	r1, #128	; 0x80
    7e0a:	438b      	bics	r3, r1
    7e0c:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ENABLE	=1; // Enable DFLL48
    7e0e:	4a14      	ldr	r2, [pc, #80]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e10:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e12:	2102      	movs	r1, #2
    7e14:	430b      	orrs	r3, r1
    7e16:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.CCDIS		=1; // Chill Cycle is disabled
    7e18:	4a11      	ldr	r2, [pc, #68]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e1a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e1c:	2180      	movs	r1, #128	; 0x80
    7e1e:	0049      	lsls	r1, r1, #1
    7e20:	430b      	orrs	r3, r1
    7e22:	8493      	strh	r3, [r2, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; } // wait till DFLL is stable and ready to be used as a clock source
    7e24:	46c0      	nop			; (mov r8, r8)
    7e26:	4b0e      	ldr	r3, [pc, #56]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e28:	68db      	ldr	r3, [r3, #12]
    7e2a:	2210      	movs	r2, #16
    7e2c:	4013      	ands	r3, r2
    7e2e:	d0fa      	beq.n	7e26 <sys_clock_init_USE_DFLL48M+0x8e>

	GCLK->GENDIV.reg =GCLK_GENDIV_ID (GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENDIV_DIV (MAIN_CLK_DEVIDER);//16MHz
    7e30:	4b0c      	ldr	r3, [pc, #48]	; (7e64 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e32:	2280      	movs	r2, #128	; 0x80
    7e34:	0052      	lsls	r2, r2, #1
    7e36:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg=GCLK_GENCTRL_ID(GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENCTRL_SRC (GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    7e38:	4b0a      	ldr	r3, [pc, #40]	; (7e64 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e3a:	4a0b      	ldr	r2, [pc, #44]	; (7e68 <sys_clock_init_USE_DFLL48M+0xd0>)
    7e3c:	605a      	str	r2, [r3, #4]
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) { ; }
    7e3e:	46c0      	nop			; (mov r8, r8)
    7e40:	4b08      	ldr	r3, [pc, #32]	; (7e64 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e42:	785b      	ldrb	r3, [r3, #1]
    7e44:	b2db      	uxtb	r3, r3
    7e46:	b25b      	sxtb	r3, r3
    7e48:	2b00      	cmp	r3, #0
    7e4a:	dbf9      	blt.n	7e40 <sys_clock_init_USE_DFLL48M+0xa8>
}
    7e4c:	46c0      	nop			; (mov r8, r8)
    7e4e:	46bd      	mov	sp, r7
    7e50:	b002      	add	sp, #8
    7e52:	bd80      	pop	{r7, pc}
    7e54:	41004000 	.word	0x41004000
    7e58:	00806024 	.word	0x00806024
    7e5c:	00806028 	.word	0x00806028
    7e60:	40000800 	.word	0x40000800
    7e64:	40000c00 	.word	0x40000c00
    7e68:	00210700 	.word	0x00210700

00007e6c <__NVIC_EnableIRQ>:
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b082      	sub	sp, #8
    7e70:	af00      	add	r7, sp, #0
    7e72:	0002      	movs	r2, r0
    7e74:	1dfb      	adds	r3, r7, #7
    7e76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7e78:	1dfb      	adds	r3, r7, #7
    7e7a:	781b      	ldrb	r3, [r3, #0]
    7e7c:	2b7f      	cmp	r3, #127	; 0x7f
    7e7e:	d809      	bhi.n	7e94 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7e80:	4b06      	ldr	r3, [pc, #24]	; (7e9c <__NVIC_EnableIRQ+0x30>)
    7e82:	1dfa      	adds	r2, r7, #7
    7e84:	7812      	ldrb	r2, [r2, #0]
    7e86:	0011      	movs	r1, r2
    7e88:	221f      	movs	r2, #31
    7e8a:	400a      	ands	r2, r1
    7e8c:	2101      	movs	r1, #1
    7e8e:	4091      	lsls	r1, r2
    7e90:	000a      	movs	r2, r1
    7e92:	601a      	str	r2, [r3, #0]
}
    7e94:	46c0      	nop			; (mov r8, r8)
    7e96:	46bd      	mov	sp, r7
    7e98:	b002      	add	sp, #8
    7e9a:	bd80      	pop	{r7, pc}
    7e9c:	e000e100 	.word	0xe000e100

00007ea0 <__NVIC_DisableIRQ>:
{
    7ea0:	b580      	push	{r7, lr}
    7ea2:	b082      	sub	sp, #8
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	0002      	movs	r2, r0
    7ea8:	1dfb      	adds	r3, r7, #7
    7eaa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7eac:	1dfb      	adds	r3, r7, #7
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	2b7f      	cmp	r3, #127	; 0x7f
    7eb2:	d80e      	bhi.n	7ed2 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7eb4:	4909      	ldr	r1, [pc, #36]	; (7edc <__NVIC_DisableIRQ+0x3c>)
    7eb6:	1dfb      	adds	r3, r7, #7
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	001a      	movs	r2, r3
    7ebc:	231f      	movs	r3, #31
    7ebe:	4013      	ands	r3, r2
    7ec0:	2201      	movs	r2, #1
    7ec2:	409a      	lsls	r2, r3
    7ec4:	0013      	movs	r3, r2
    7ec6:	2280      	movs	r2, #128	; 0x80
    7ec8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    7eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ece:	f3bf 8f6f 	isb	sy
}
    7ed2:	46c0      	nop			; (mov r8, r8)
    7ed4:	46bd      	mov	sp, r7
    7ed6:	b002      	add	sp, #8
    7ed8:	bd80      	pop	{r7, pc}
    7eda:	46c0      	nop			; (mov r8, r8)
    7edc:	e000e100 	.word	0xe000e100

00007ee0 <__NVIC_SetPriority>:
{
    7ee0:	b5b0      	push	{r4, r5, r7, lr}
    7ee2:	b082      	sub	sp, #8
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	0002      	movs	r2, r0
    7ee8:	6039      	str	r1, [r7, #0]
    7eea:	1dfb      	adds	r3, r7, #7
    7eec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7eee:	1dfb      	adds	r3, r7, #7
    7ef0:	781b      	ldrb	r3, [r3, #0]
    7ef2:	2b7f      	cmp	r3, #127	; 0x7f
    7ef4:	d828      	bhi.n	7f48 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7ef6:	4c2f      	ldr	r4, [pc, #188]	; (7fb4 <__NVIC_SetPriority+0xd4>)
    7ef8:	1dfb      	adds	r3, r7, #7
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	b25b      	sxtb	r3, r3
    7efe:	089b      	lsrs	r3, r3, #2
    7f00:	492c      	ldr	r1, [pc, #176]	; (7fb4 <__NVIC_SetPriority+0xd4>)
    7f02:	1dfa      	adds	r2, r7, #7
    7f04:	7812      	ldrb	r2, [r2, #0]
    7f06:	b252      	sxtb	r2, r2
    7f08:	0892      	lsrs	r2, r2, #2
    7f0a:	32c0      	adds	r2, #192	; 0xc0
    7f0c:	0092      	lsls	r2, r2, #2
    7f0e:	5852      	ldr	r2, [r2, r1]
    7f10:	1df9      	adds	r1, r7, #7
    7f12:	7809      	ldrb	r1, [r1, #0]
    7f14:	0008      	movs	r0, r1
    7f16:	2103      	movs	r1, #3
    7f18:	4001      	ands	r1, r0
    7f1a:	00c9      	lsls	r1, r1, #3
    7f1c:	20ff      	movs	r0, #255	; 0xff
    7f1e:	4088      	lsls	r0, r1
    7f20:	0001      	movs	r1, r0
    7f22:	43c9      	mvns	r1, r1
    7f24:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f26:	683a      	ldr	r2, [r7, #0]
    7f28:	0192      	lsls	r2, r2, #6
    7f2a:	20ff      	movs	r0, #255	; 0xff
    7f2c:	4010      	ands	r0, r2
    7f2e:	1dfa      	adds	r2, r7, #7
    7f30:	7812      	ldrb	r2, [r2, #0]
    7f32:	0015      	movs	r5, r2
    7f34:	2203      	movs	r2, #3
    7f36:	402a      	ands	r2, r5
    7f38:	00d2      	lsls	r2, r2, #3
    7f3a:	4090      	lsls	r0, r2
    7f3c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f3e:	430a      	orrs	r2, r1
    7f40:	33c0      	adds	r3, #192	; 0xc0
    7f42:	009b      	lsls	r3, r3, #2
    7f44:	511a      	str	r2, [r3, r4]
}
    7f46:	e031      	b.n	7fac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f48:	4c1b      	ldr	r4, [pc, #108]	; (7fb8 <__NVIC_SetPriority+0xd8>)
    7f4a:	1dfb      	adds	r3, r7, #7
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	001a      	movs	r2, r3
    7f50:	230f      	movs	r3, #15
    7f52:	4013      	ands	r3, r2
    7f54:	3b08      	subs	r3, #8
    7f56:	0899      	lsrs	r1, r3, #2
    7f58:	4a17      	ldr	r2, [pc, #92]	; (7fb8 <__NVIC_SetPriority+0xd8>)
    7f5a:	1dfb      	adds	r3, r7, #7
    7f5c:	781b      	ldrb	r3, [r3, #0]
    7f5e:	0018      	movs	r0, r3
    7f60:	230f      	movs	r3, #15
    7f62:	4003      	ands	r3, r0
    7f64:	3b08      	subs	r3, #8
    7f66:	089b      	lsrs	r3, r3, #2
    7f68:	3306      	adds	r3, #6
    7f6a:	009b      	lsls	r3, r3, #2
    7f6c:	18d3      	adds	r3, r2, r3
    7f6e:	3304      	adds	r3, #4
    7f70:	681b      	ldr	r3, [r3, #0]
    7f72:	1dfa      	adds	r2, r7, #7
    7f74:	7812      	ldrb	r2, [r2, #0]
    7f76:	0010      	movs	r0, r2
    7f78:	2203      	movs	r2, #3
    7f7a:	4002      	ands	r2, r0
    7f7c:	00d2      	lsls	r2, r2, #3
    7f7e:	20ff      	movs	r0, #255	; 0xff
    7f80:	4090      	lsls	r0, r2
    7f82:	0002      	movs	r2, r0
    7f84:	43d2      	mvns	r2, r2
    7f86:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f88:	683b      	ldr	r3, [r7, #0]
    7f8a:	019b      	lsls	r3, r3, #6
    7f8c:	20ff      	movs	r0, #255	; 0xff
    7f8e:	4018      	ands	r0, r3
    7f90:	1dfb      	adds	r3, r7, #7
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	001d      	movs	r5, r3
    7f96:	2303      	movs	r3, #3
    7f98:	402b      	ands	r3, r5
    7f9a:	00db      	lsls	r3, r3, #3
    7f9c:	4098      	lsls	r0, r3
    7f9e:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fa0:	431a      	orrs	r2, r3
    7fa2:	1d8b      	adds	r3, r1, #6
    7fa4:	009b      	lsls	r3, r3, #2
    7fa6:	18e3      	adds	r3, r4, r3
    7fa8:	3304      	adds	r3, #4
    7faa:	601a      	str	r2, [r3, #0]
}
    7fac:	46c0      	nop			; (mov r8, r8)
    7fae:	46bd      	mov	sp, r7
    7fb0:	b002      	add	sp, #8
    7fb2:	bdb0      	pop	{r4, r5, r7, pc}
    7fb4:	e000e100 	.word	0xe000e100
    7fb8:	e000ed00 	.word	0xe000ed00

00007fbc <TC3_start>:
//funx
	extern void TC3_init(void);
	extern void wait(DWORD time_100mk);
	extern void tc3_process(void);
//inline
	static inline void TC3_start(WORD cc) { TC3->COUNT16.CC[0].reg=cc-1; TC3->COUNT16.CTRLBSET.bit.CMD=0x01; }
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b082      	sub	sp, #8
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	0002      	movs	r2, r0
    7fc4:	1dbb      	adds	r3, r7, #6
    7fc6:	801a      	strh	r2, [r3, #0]
    7fc8:	4a08      	ldr	r2, [pc, #32]	; (7fec <TC3_start+0x30>)
    7fca:	1dbb      	adds	r3, r7, #6
    7fcc:	881b      	ldrh	r3, [r3, #0]
    7fce:	3b01      	subs	r3, #1
    7fd0:	b29b      	uxth	r3, r3
    7fd2:	8313      	strh	r3, [r2, #24]
    7fd4:	4a05      	ldr	r2, [pc, #20]	; (7fec <TC3_start+0x30>)
    7fd6:	7953      	ldrb	r3, [r2, #5]
    7fd8:	213f      	movs	r1, #63	; 0x3f
    7fda:	400b      	ands	r3, r1
    7fdc:	1c19      	adds	r1, r3, #0
    7fde:	2340      	movs	r3, #64	; 0x40
    7fe0:	430b      	orrs	r3, r1
    7fe2:	7153      	strb	r3, [r2, #5]
    7fe4:	46c0      	nop			; (mov r8, r8)
    7fe6:	46bd      	mov	sp, r7
    7fe8:	b002      	add	sp, #8
    7fea:	bd80      	pop	{r7, pc}
    7fec:	42002c00 	.word	0x42002c00

00007ff0 <TC3_Handler>:
volatile DWORD  time_100mk=0;
volatile DWORD  TTL=0;

void TC3_Handler(void)
//-----------------------------------------------------------------------------
{
    7ff0:	b580      	push	{r7, lr}
    7ff2:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg|=0xFFFF;
    7ff4:	4b22      	ldr	r3, [pc, #136]	; (8080 <TC3_Handler+0x90>)
    7ff6:	7b9b      	ldrb	r3, [r3, #14]
    7ff8:	4b21      	ldr	r3, [pc, #132]	; (8080 <TC3_Handler+0x90>)
    7ffa:	22ff      	movs	r2, #255	; 0xff
    7ffc:	739a      	strb	r2, [r3, #14]
	
	tc3_cnt++;
    7ffe:	4b21      	ldr	r3, [pc, #132]	; (8084 <TC3_Handler+0x94>)
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	1c5a      	adds	r2, r3, #1
    8004:	4b1f      	ldr	r3, [pc, #124]	; (8084 <TC3_Handler+0x94>)
    8006:	601a      	str	r2, [r3, #0]
	time_wait++;
    8008:	4b1f      	ldr	r3, [pc, #124]	; (8088 <TC3_Handler+0x98>)
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	1c5a      	adds	r2, r3, #1
    800e:	4b1e      	ldr	r3, [pc, #120]	; (8088 <TC3_Handler+0x98>)
    8010:	601a      	str	r2, [r3, #0]
	port[0].rtime++;
    8012:	4a1e      	ldr	r2, [pc, #120]	; (808c <TC3_Handler+0x9c>)
    8014:	2385      	movs	r3, #133	; 0x85
    8016:	009b      	lsls	r3, r3, #2
    8018:	5ad3      	ldrh	r3, [r2, r3]
    801a:	b29b      	uxth	r3, r3
    801c:	3301      	adds	r3, #1
    801e:	b299      	uxth	r1, r3
    8020:	4a1a      	ldr	r2, [pc, #104]	; (808c <TC3_Handler+0x9c>)
    8022:	2385      	movs	r3, #133	; 0x85
    8024:	009b      	lsls	r3, r3, #2
    8026:	52d1      	strh	r1, [r2, r3]
	port[1].rtime++;
    8028:	4b18      	ldr	r3, [pc, #96]	; (808c <TC3_Handler+0x9c>)
    802a:	4a19      	ldr	r2, [pc, #100]	; (8090 <TC3_Handler+0xa0>)
    802c:	5a9b      	ldrh	r3, [r3, r2]
    802e:	b29b      	uxth	r3, r3
    8030:	3301      	adds	r3, #1
    8032:	b299      	uxth	r1, r3
    8034:	4b15      	ldr	r3, [pc, #84]	; (808c <TC3_Handler+0x9c>)
    8036:	4a16      	ldr	r2, [pc, #88]	; (8090 <TC3_Handler+0xa0>)
    8038:	5299      	strh	r1, [r3, r2]
	port[2].rtime++;
    803a:	4b14      	ldr	r3, [pc, #80]	; (808c <TC3_Handler+0x9c>)
    803c:	4a15      	ldr	r2, [pc, #84]	; (8094 <TC3_Handler+0xa4>)
    803e:	5a9b      	ldrh	r3, [r3, r2]
    8040:	b29b      	uxth	r3, r3
    8042:	3301      	adds	r3, #1
    8044:	b299      	uxth	r1, r3
    8046:	4b11      	ldr	r3, [pc, #68]	; (808c <TC3_Handler+0x9c>)
    8048:	4a12      	ldr	r2, [pc, #72]	; (8094 <TC3_Handler+0xa4>)
    804a:	5299      	strh	r1, [r3, r2]
	port[3].rtime++;
    804c:	4b0f      	ldr	r3, [pc, #60]	; (808c <TC3_Handler+0x9c>)
    804e:	4a12      	ldr	r2, [pc, #72]	; (8098 <TC3_Handler+0xa8>)
    8050:	5a9b      	ldrh	r3, [r3, r2]
    8052:	b29b      	uxth	r3, r3
    8054:	3301      	adds	r3, #1
    8056:	b299      	uxth	r1, r3
    8058:	4b0c      	ldr	r3, [pc, #48]	; (808c <TC3_Handler+0x9c>)
    805a:	4a0f      	ldr	r2, [pc, #60]	; (8098 <TC3_Handler+0xa8>)
    805c:	5299      	strh	r1, [r3, r2]
	
	
	if(spi_wait--);
    805e:	4b0f      	ldr	r3, [pc, #60]	; (809c <TC3_Handler+0xac>)
    8060:	881b      	ldrh	r3, [r3, #0]
    8062:	b29b      	uxth	r3, r3
    8064:	3b01      	subs	r3, #1
    8066:	b29a      	uxth	r2, r3
    8068:	4b0c      	ldr	r3, [pc, #48]	; (809c <TC3_Handler+0xac>)
    806a:	801a      	strh	r2, [r3, #0]
	if(cmd_spi_wait--);
    806c:	4b0c      	ldr	r3, [pc, #48]	; (80a0 <TC3_Handler+0xb0>)
    806e:	881b      	ldrh	r3, [r3, #0]
    8070:	b29b      	uxth	r3, r3
    8072:	3b01      	subs	r3, #1
    8074:	b29a      	uxth	r2, r3
    8076:	4b0a      	ldr	r3, [pc, #40]	; (80a0 <TC3_Handler+0xb0>)
    8078:	801a      	strh	r2, [r3, #0]
}
    807a:	46c0      	nop			; (mov r8, r8)
    807c:	46bd      	mov	sp, r7
    807e:	bd80      	pop	{r7, pc}
    8080:	42002c00 	.word	0x42002c00
    8084:	2000046c 	.word	0x2000046c
    8088:	200031f8 	.word	0x200031f8
    808c:	200031fc 	.word	0x200031fc
    8090:	00000454 	.word	0x00000454
    8094:	00000694 	.word	0x00000694
    8098:	000008d4 	.word	0x000008d4
    809c:	200031f4 	.word	0x200031f4
    80a0:	200031f6 	.word	0x200031f6

000080a4 <TC3_init>:

void TC3_init(void)
//-----------------------------------------------------------------------------
{
    80a4:	b580      	push	{r7, lr}
    80a6:	af00      	add	r7, sp, #0
	GCLK->CLKCTRL.bit.ID   =0x1B; // Bits 5:0  - ID: Generic Clock Selection ID (0x1B - TCC2,TC3)
    80a8:	4a37      	ldr	r2, [pc, #220]	; (8188 <TC3_init+0xe4>)
    80aa:	8853      	ldrh	r3, [r2, #2]
    80ac:	213f      	movs	r1, #63	; 0x3f
    80ae:	438b      	bics	r3, r1
    80b0:	1c19      	adds	r1, r3, #0
    80b2:	231b      	movs	r3, #27
    80b4:	430b      	orrs	r3, r1
    80b6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    80b8:	4a33      	ldr	r2, [pc, #204]	; (8188 <TC3_init+0xe4>)
    80ba:	8853      	ldrh	r3, [r2, #2]
    80bc:	4933      	ldr	r1, [pc, #204]	; (818c <TC3_init+0xe8>)
    80be:	400b      	ands	r3, r1
    80c0:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    80c2:	4a31      	ldr	r2, [pc, #196]	; (8188 <TC3_init+0xe4>)
    80c4:	8853      	ldrh	r3, [r2, #2]
    80c6:	2180      	movs	r1, #128	; 0x80
    80c8:	01c9      	lsls	r1, r1, #7
    80ca:	430b      	orrs	r3, r1
    80cc:	8053      	strh	r3, [r2, #2]

	PM->APBCSEL.bit.APBCDIV=0x00;
    80ce:	4a30      	ldr	r2, [pc, #192]	; (8190 <TC3_init+0xec>)
    80d0:	7ad3      	ldrb	r3, [r2, #11]
    80d2:	2107      	movs	r1, #7
    80d4:	438b      	bics	r3, r1
    80d6:	72d3      	strb	r3, [r2, #11]
	PM->APBCMASK.bit.TC3_  =0x01; //
    80d8:	4a2d      	ldr	r2, [pc, #180]	; (8190 <TC3_init+0xec>)
    80da:	6a13      	ldr	r3, [r2, #32]
    80dc:	2180      	movs	r1, #128	; 0x80
    80de:	0109      	lsls	r1, r1, #4
    80e0:	430b      	orrs	r3, r1
    80e2:	6213      	str	r3, [r2, #32]

	TC3->COUNT16.CTRLA.bit.MODE     =0x0; // Bits 3:2   - MODE: (0-Counter in 16-bit mode)
    80e4:	4a2b      	ldr	r2, [pc, #172]	; (8194 <TC3_init+0xf0>)
    80e6:	8813      	ldrh	r3, [r2, #0]
    80e8:	210c      	movs	r1, #12
    80ea:	438b      	bics	r3, r1
    80ec:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV16_Val; // Bits 10:8  - PRESCALER: Prescaler (4: GCLK_TC/16)
    80ee:	4a29      	ldr	r2, [pc, #164]	; (8194 <TC3_init+0xf0>)
    80f0:	8813      	ldrh	r3, [r2, #0]
    80f2:	4929      	ldr	r1, [pc, #164]	; (8198 <TC3_init+0xf4>)
    80f4:	400b      	ands	r3, r1
    80f6:	1c19      	adds	r1, r3, #0
    80f8:	2380      	movs	r3, #128	; 0x80
    80fa:	00db      	lsls	r3, r3, #3
    80fc:	430b      	orrs	r3, r1
    80fe:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.PRESCSYNC=0x00; // Bits 13:12 - PRESCSYNC: Prescaler and Counter Synchronization (Reload or reset the counter on next generic clock)
    8100:	4a24      	ldr	r2, [pc, #144]	; (8194 <TC3_init+0xf0>)
    8102:	8813      	ldrh	r3, [r2, #0]
    8104:	4925      	ldr	r1, [pc, #148]	; (819c <TC3_init+0xf8>)
    8106:	400b      	ands	r3, r1
    8108:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.WAVEGEN  =0x01; // Bits 6:5   - WAVEGEN: Waveform Generation Operation
    810a:	4a22      	ldr	r2, [pc, #136]	; (8194 <TC3_init+0xf0>)
    810c:	8813      	ldrh	r3, [r2, #0]
    810e:	2160      	movs	r1, #96	; 0x60
    8110:	438b      	bics	r3, r1
    8112:	1c19      	adds	r1, r3, #0
    8114:	2320      	movs	r3, #32
    8116:	430b      	orrs	r3, r1
    8118:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    811a:	4b1e      	ldr	r3, [pc, #120]	; (8194 <TC3_init+0xf0>)
    811c:	2201      	movs	r2, #1
    811e:	4252      	negs	r2, r2
    8120:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    8122:	4b1c      	ldr	r3, [pc, #112]	; (8194 <TC3_init+0xf0>)
    8124:	2201      	movs	r2, #1
    8126:	4252      	negs	r2, r2
    8128:	835a      	strh	r2, [r3, #26]

	//TC3->COUNT16.CTRLBSET.bit.ONESHOT=0x00; // Bit 2 - ONESHOT: One-Shot (1: The timer/counter will wrap around and stop on the next underflow/overflow condition.)
	TC3->COUNT16.CTRLBSET.bit.DIR    =0x00; // Bit 0 - DIR: Counter Direction (0: The timer/counter is counting up (incrementing))
    812a:	4a1a      	ldr	r2, [pc, #104]	; (8194 <TC3_init+0xf0>)
    812c:	7953      	ldrb	r3, [r2, #5]
    812e:	2101      	movs	r1, #1
    8130:	438b      	bics	r3, r1
    8132:	7153      	strb	r3, [r2, #5]
	TC3->COUNT16.CTRLA.bit.ENABLE    =0x01; // Bit 1 - ENABLE: Enable
    8134:	4a17      	ldr	r2, [pc, #92]	; (8194 <TC3_init+0xf0>)
    8136:	8813      	ldrh	r3, [r2, #0]
    8138:	2102      	movs	r1, #2
    813a:	430b      	orrs	r3, r1
    813c:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    813e:	4b15      	ldr	r3, [pc, #84]	; (8194 <TC3_init+0xf0>)
    8140:	2201      	movs	r2, #1
    8142:	4252      	negs	r2, r2
    8144:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    8146:	4b13      	ldr	r3, [pc, #76]	; (8194 <TC3_init+0xf0>)
    8148:	2201      	movs	r2, #1
    814a:	4252      	negs	r2, r2
    814c:	835a      	strh	r2, [r3, #26]
	
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 0x01); // wait for TC3 to be enabled
    814e:	46c0      	nop			; (mov r8, r8)
    8150:	4b10      	ldr	r3, [pc, #64]	; (8194 <TC3_init+0xf0>)
    8152:	7bdb      	ldrb	r3, [r3, #15]
    8154:	061b      	lsls	r3, r3, #24
    8156:	0fdb      	lsrs	r3, r3, #31
    8158:	b2db      	uxtb	r3, r3
    815a:	2b01      	cmp	r3, #1
    815c:	d0f8      	beq.n	8150 <TC3_init+0xac>

	NVIC_DisableIRQ(TC3_IRQn);					// Disable the interrupt
    815e:	2012      	movs	r0, #18
    8160:	f7ff fe9e 	bl	7ea0 <__NVIC_DisableIRQ>
	//TC3->COUNT16.INTENSET.bit.MC0=0x01;	// Enable match interrupts on compare channel 0
	TC3->COUNT16.INTENSET.bit.OVF=0x01;
    8164:	4a0b      	ldr	r2, [pc, #44]	; (8194 <TC3_init+0xf0>)
    8166:	7b53      	ldrb	r3, [r2, #13]
    8168:	2101      	movs	r1, #1
    816a:	430b      	orrs	r3, r1
    816c:	7353      	strb	r3, [r2, #13]
	NVIC_SetPriority(TC3_IRQn, 0);			// Set the interrupt priority to lowest value
    816e:	2100      	movs	r1, #0
    8170:	2012      	movs	r0, #18
    8172:	f7ff feb5 	bl	7ee0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TC3_IRQn);						// Enable the interrupt
    8176:	2012      	movs	r0, #18
    8178:	f7ff fe78 	bl	7e6c <__NVIC_EnableIRQ>
	
	TC3_start(TC3_100mk);
    817c:	204b      	movs	r0, #75	; 0x4b
    817e:	f7ff ff1d 	bl	7fbc <TC3_start>
}
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	46bd      	mov	sp, r7
    8186:	bd80      	pop	{r7, pc}
    8188:	40000c00 	.word	0x40000c00
    818c:	fffff0ff 	.word	0xfffff0ff
    8190:	40000400 	.word	0x40000400
    8194:	42002c00 	.word	0x42002c00
    8198:	fffff8ff 	.word	0xfffff8ff
    819c:	ffffcfff 	.word	0xffffcfff

000081a0 <wait>:


	void wait(DWORD time_100mk)
	{
    81a0:	b580      	push	{r7, lr}
    81a2:	b082      	sub	sp, #8
    81a4:	af00      	add	r7, sp, #0
    81a6:	6078      	str	r0, [r7, #4]
	time_wait=0;
    81a8:	4b10      	ldr	r3, [pc, #64]	; (81ec <wait+0x4c>)
    81aa:	2200      	movs	r2, #0
    81ac:	601a      	str	r2, [r3, #0]
	while(1){if(reset   == NULL) 
    81ae:	4b10      	ldr	r3, [pc, #64]	; (81f0 <wait+0x50>)
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	2b00      	cmp	r3, #0
    81b4:	d10e      	bne.n	81d4 <wait+0x34>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    81b6:	4b0f      	ldr	r3, [pc, #60]	; (81f4 <wait+0x54>)
    81b8:	799b      	ldrb	r3, [r3, #6]
    81ba:	07db      	lsls	r3, r3, #31
    81bc:	0fdb      	lsrs	r3, r3, #31
    81be:	b2db      	uxtb	r3, r3
    81c0:	2b01      	cmp	r3, #1
    81c2:	d107      	bne.n	81d4 <wait+0x34>
    81c4:	4a0b      	ldr	r2, [pc, #44]	; (81f4 <wait+0x54>)
    81c6:	7993      	ldrb	r3, [r2, #6]
    81c8:	2101      	movs	r1, #1
    81ca:	430b      	orrs	r3, r1
    81cc:	7193      	strb	r3, [r2, #6]
    81ce:	4b09      	ldr	r3, [pc, #36]	; (81f4 <wait+0x54>)
    81d0:	22a5      	movs	r2, #165	; 0xa5
    81d2:	721a      	strb	r2, [r3, #8]
    81d4:	4b05      	ldr	r3, [pc, #20]	; (81ec <wait+0x4c>)
    81d6:	681a      	ldr	r2, [r3, #0]
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	429a      	cmp	r2, r3
    81dc:	d800      	bhi.n	81e0 <wait+0x40>
	while(1){if(reset   == NULL) 
    81de:	e7e6      	b.n	81ae <wait+0xe>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    81e0:	46c0      	nop			; (mov r8, r8)
	}
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	46bd      	mov	sp, r7
    81e6:	b002      	add	sp, #8
    81e8:	bd80      	pop	{r7, pc}
    81ea:	46c0      	nop			; (mov r8, r8)
    81ec:	200031f8 	.word	0x200031f8
    81f0:	20002548 	.word	0x20002548
    81f4:	40001000 	.word	0x40001000

000081f8 <tc3_process>:
	
	
	
	void tc3_process(void)
	//-----------------------------------------------------------------------------
	{
    81f8:	b5b0      	push	{r4, r5, r7, lr}
    81fa:	af00      	add	r7, sp, #0
		if(!tc3_cnt) {return;}
    81fc:	4b9e      	ldr	r3, [pc, #632]	; (8478 <tc3_process+0x280>)
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	2b00      	cmp	r3, #0
    8202:	d100      	bne.n	8206 <tc3_process+0xe>
    8204:	e135      	b.n	8472 <tc3_process+0x27a>
			
		if(port[0].time_port){port[0].time_port--;}
    8206:	4a9d      	ldr	r2, [pc, #628]	; (847c <tc3_process+0x284>)
    8208:	2388      	movs	r3, #136	; 0x88
    820a:	009b      	lsls	r3, r3, #2
    820c:	58d3      	ldr	r3, [r2, r3]
    820e:	2b00      	cmp	r3, #0
    8210:	d008      	beq.n	8224 <tc3_process+0x2c>
    8212:	4a9a      	ldr	r2, [pc, #616]	; (847c <tc3_process+0x284>)
    8214:	2388      	movs	r3, #136	; 0x88
    8216:	009b      	lsls	r3, r3, #2
    8218:	58d3      	ldr	r3, [r2, r3]
    821a:	1e59      	subs	r1, r3, #1
    821c:	4a97      	ldr	r2, [pc, #604]	; (847c <tc3_process+0x284>)
    821e:	2388      	movs	r3, #136	; 0x88
    8220:	009b      	lsls	r3, r3, #2
    8222:	50d1      	str	r1, [r2, r3]
		if(port[1].time_port){port[1].time_port--;}
    8224:	4a95      	ldr	r2, [pc, #596]	; (847c <tc3_process+0x284>)
    8226:	238c      	movs	r3, #140	; 0x8c
    8228:	00db      	lsls	r3, r3, #3
    822a:	58d3      	ldr	r3, [r2, r3]
    822c:	2b00      	cmp	r3, #0
    822e:	d008      	beq.n	8242 <tc3_process+0x4a>
    8230:	4a92      	ldr	r2, [pc, #584]	; (847c <tc3_process+0x284>)
    8232:	238c      	movs	r3, #140	; 0x8c
    8234:	00db      	lsls	r3, r3, #3
    8236:	58d3      	ldr	r3, [r2, r3]
    8238:	1e59      	subs	r1, r3, #1
    823a:	4a90      	ldr	r2, [pc, #576]	; (847c <tc3_process+0x284>)
    823c:	238c      	movs	r3, #140	; 0x8c
    823e:	00db      	lsls	r3, r3, #3
    8240:	50d1      	str	r1, [r2, r3]
		if(port[2].time_port){port[2].time_port--;}
    8242:	4a8e      	ldr	r2, [pc, #568]	; (847c <tc3_process+0x284>)
    8244:	23d4      	movs	r3, #212	; 0xd4
    8246:	00db      	lsls	r3, r3, #3
    8248:	58d3      	ldr	r3, [r2, r3]
    824a:	2b00      	cmp	r3, #0
    824c:	d008      	beq.n	8260 <tc3_process+0x68>
    824e:	4a8b      	ldr	r2, [pc, #556]	; (847c <tc3_process+0x284>)
    8250:	23d4      	movs	r3, #212	; 0xd4
    8252:	00db      	lsls	r3, r3, #3
    8254:	58d3      	ldr	r3, [r2, r3]
    8256:	1e59      	subs	r1, r3, #1
    8258:	4a88      	ldr	r2, [pc, #544]	; (847c <tc3_process+0x284>)
    825a:	23d4      	movs	r3, #212	; 0xd4
    825c:	00db      	lsls	r3, r3, #3
    825e:	50d1      	str	r1, [r2, r3]
		if(port[3].time_port){port[3].time_port--;}
    8260:	4a86      	ldr	r2, [pc, #536]	; (847c <tc3_process+0x284>)
    8262:	238e      	movs	r3, #142	; 0x8e
    8264:	011b      	lsls	r3, r3, #4
    8266:	58d3      	ldr	r3, [r2, r3]
    8268:	2b00      	cmp	r3, #0
    826a:	d008      	beq.n	827e <tc3_process+0x86>
    826c:	4a83      	ldr	r2, [pc, #524]	; (847c <tc3_process+0x284>)
    826e:	238e      	movs	r3, #142	; 0x8e
    8270:	011b      	lsls	r3, r3, #4
    8272:	58d3      	ldr	r3, [r2, r3]
    8274:	1e59      	subs	r1, r3, #1
    8276:	4a81      	ldr	r2, [pc, #516]	; (847c <tc3_process+0x284>)
    8278:	238e      	movs	r3, #142	; 0x8e
    827a:	011b      	lsls	r3, r3, #4
    827c:	50d1      	str	r1, [r2, r3]
			
		
				
		if(eth_sock[0].time_wait_SEND_OK){eth_sock[0].time_wait_SEND_OK--;}
    827e:	4b80      	ldr	r3, [pc, #512]	; (8480 <tc3_process+0x288>)
    8280:	4a80      	ldr	r2, [pc, #512]	; (8484 <tc3_process+0x28c>)
    8282:	5c9a      	ldrb	r2, [r3, r2]
    8284:	4980      	ldr	r1, [pc, #512]	; (8488 <tc3_process+0x290>)
    8286:	5c5b      	ldrb	r3, [r3, r1]
    8288:	021b      	lsls	r3, r3, #8
    828a:	4313      	orrs	r3, r2
    828c:	b29b      	uxth	r3, r3
    828e:	2b00      	cmp	r3, #0
    8290:	d01f      	beq.n	82d2 <tc3_process+0xda>
    8292:	4b7b      	ldr	r3, [pc, #492]	; (8480 <tc3_process+0x288>)
    8294:	4a7b      	ldr	r2, [pc, #492]	; (8484 <tc3_process+0x28c>)
    8296:	5c9a      	ldrb	r2, [r3, r2]
    8298:	497b      	ldr	r1, [pc, #492]	; (8488 <tc3_process+0x290>)
    829a:	5c5b      	ldrb	r3, [r3, r1]
    829c:	021b      	lsls	r3, r3, #8
    829e:	4313      	orrs	r3, r2
    82a0:	b29b      	uxth	r3, r3
    82a2:	3b01      	subs	r3, #1
    82a4:	b299      	uxth	r1, r3
    82a6:	4b76      	ldr	r3, [pc, #472]	; (8480 <tc3_process+0x288>)
    82a8:	4a76      	ldr	r2, [pc, #472]	; (8484 <tc3_process+0x28c>)
    82aa:	20ff      	movs	r0, #255	; 0xff
    82ac:	4008      	ands	r0, r1
    82ae:	0005      	movs	r5, r0
    82b0:	5c98      	ldrb	r0, [r3, r2]
    82b2:	2400      	movs	r4, #0
    82b4:	4020      	ands	r0, r4
    82b6:	1c04      	adds	r4, r0, #0
    82b8:	1c28      	adds	r0, r5, #0
    82ba:	4320      	orrs	r0, r4
    82bc:	5498      	strb	r0, [r3, r2]
    82be:	0a09      	lsrs	r1, r1, #8
    82c0:	b288      	uxth	r0, r1
    82c2:	189b      	adds	r3, r3, r2
    82c4:	785a      	ldrb	r2, [r3, #1]
    82c6:	2100      	movs	r1, #0
    82c8:	400a      	ands	r2, r1
    82ca:	1c11      	adds	r1, r2, #0
    82cc:	1c02      	adds	r2, r0, #0
    82ce:	430a      	orrs	r2, r1
    82d0:	705a      	strb	r2, [r3, #1]
		if(eth_sock[1].time_wait_SEND_OK){eth_sock[1].time_wait_SEND_OK--;}
    82d2:	4b6b      	ldr	r3, [pc, #428]	; (8480 <tc3_process+0x288>)
    82d4:	4a6d      	ldr	r2, [pc, #436]	; (848c <tc3_process+0x294>)
    82d6:	5c9a      	ldrb	r2, [r3, r2]
    82d8:	496d      	ldr	r1, [pc, #436]	; (8490 <tc3_process+0x298>)
    82da:	5c5b      	ldrb	r3, [r3, r1]
    82dc:	021b      	lsls	r3, r3, #8
    82de:	4313      	orrs	r3, r2
    82e0:	b29b      	uxth	r3, r3
    82e2:	2b00      	cmp	r3, #0
    82e4:	d01f      	beq.n	8326 <tc3_process+0x12e>
    82e6:	4b66      	ldr	r3, [pc, #408]	; (8480 <tc3_process+0x288>)
    82e8:	4a68      	ldr	r2, [pc, #416]	; (848c <tc3_process+0x294>)
    82ea:	5c9a      	ldrb	r2, [r3, r2]
    82ec:	4968      	ldr	r1, [pc, #416]	; (8490 <tc3_process+0x298>)
    82ee:	5c5b      	ldrb	r3, [r3, r1]
    82f0:	021b      	lsls	r3, r3, #8
    82f2:	4313      	orrs	r3, r2
    82f4:	b29b      	uxth	r3, r3
    82f6:	3b01      	subs	r3, #1
    82f8:	b299      	uxth	r1, r3
    82fa:	4b61      	ldr	r3, [pc, #388]	; (8480 <tc3_process+0x288>)
    82fc:	4a63      	ldr	r2, [pc, #396]	; (848c <tc3_process+0x294>)
    82fe:	20ff      	movs	r0, #255	; 0xff
    8300:	4008      	ands	r0, r1
    8302:	0005      	movs	r5, r0
    8304:	5c98      	ldrb	r0, [r3, r2]
    8306:	2400      	movs	r4, #0
    8308:	4020      	ands	r0, r4
    830a:	1c04      	adds	r4, r0, #0
    830c:	1c28      	adds	r0, r5, #0
    830e:	4320      	orrs	r0, r4
    8310:	5498      	strb	r0, [r3, r2]
    8312:	0a09      	lsrs	r1, r1, #8
    8314:	b288      	uxth	r0, r1
    8316:	189b      	adds	r3, r3, r2
    8318:	785a      	ldrb	r2, [r3, #1]
    831a:	2100      	movs	r1, #0
    831c:	400a      	ands	r2, r1
    831e:	1c11      	adds	r1, r2, #0
    8320:	1c02      	adds	r2, r0, #0
    8322:	430a      	orrs	r2, r1
    8324:	705a      	strb	r2, [r3, #1]
		if(eth_sock[2].time_wait_SEND_OK){eth_sock[2].time_wait_SEND_OK--;}
    8326:	4b56      	ldr	r3, [pc, #344]	; (8480 <tc3_process+0x288>)
    8328:	4a5a      	ldr	r2, [pc, #360]	; (8494 <tc3_process+0x29c>)
    832a:	5c9a      	ldrb	r2, [r3, r2]
    832c:	495a      	ldr	r1, [pc, #360]	; (8498 <tc3_process+0x2a0>)
    832e:	5c5b      	ldrb	r3, [r3, r1]
    8330:	021b      	lsls	r3, r3, #8
    8332:	4313      	orrs	r3, r2
    8334:	b29b      	uxth	r3, r3
    8336:	2b00      	cmp	r3, #0
    8338:	d01f      	beq.n	837a <tc3_process+0x182>
    833a:	4b51      	ldr	r3, [pc, #324]	; (8480 <tc3_process+0x288>)
    833c:	4a55      	ldr	r2, [pc, #340]	; (8494 <tc3_process+0x29c>)
    833e:	5c9a      	ldrb	r2, [r3, r2]
    8340:	4955      	ldr	r1, [pc, #340]	; (8498 <tc3_process+0x2a0>)
    8342:	5c5b      	ldrb	r3, [r3, r1]
    8344:	021b      	lsls	r3, r3, #8
    8346:	4313      	orrs	r3, r2
    8348:	b29b      	uxth	r3, r3
    834a:	3b01      	subs	r3, #1
    834c:	b299      	uxth	r1, r3
    834e:	4b4c      	ldr	r3, [pc, #304]	; (8480 <tc3_process+0x288>)
    8350:	4a50      	ldr	r2, [pc, #320]	; (8494 <tc3_process+0x29c>)
    8352:	20ff      	movs	r0, #255	; 0xff
    8354:	4008      	ands	r0, r1
    8356:	0005      	movs	r5, r0
    8358:	5c98      	ldrb	r0, [r3, r2]
    835a:	2400      	movs	r4, #0
    835c:	4020      	ands	r0, r4
    835e:	1c04      	adds	r4, r0, #0
    8360:	1c28      	adds	r0, r5, #0
    8362:	4320      	orrs	r0, r4
    8364:	5498      	strb	r0, [r3, r2]
    8366:	0a09      	lsrs	r1, r1, #8
    8368:	b288      	uxth	r0, r1
    836a:	189b      	adds	r3, r3, r2
    836c:	785a      	ldrb	r2, [r3, #1]
    836e:	2100      	movs	r1, #0
    8370:	400a      	ands	r2, r1
    8372:	1c11      	adds	r1, r2, #0
    8374:	1c02      	adds	r2, r0, #0
    8376:	430a      	orrs	r2, r1
    8378:	705a      	strb	r2, [r3, #1]
		if(eth_sock[3].time_wait_SEND_OK){eth_sock[3].time_wait_SEND_OK--;}
    837a:	4b41      	ldr	r3, [pc, #260]	; (8480 <tc3_process+0x288>)
    837c:	4a47      	ldr	r2, [pc, #284]	; (849c <tc3_process+0x2a4>)
    837e:	5c9a      	ldrb	r2, [r3, r2]
    8380:	4947      	ldr	r1, [pc, #284]	; (84a0 <tc3_process+0x2a8>)
    8382:	5c5b      	ldrb	r3, [r3, r1]
    8384:	021b      	lsls	r3, r3, #8
    8386:	4313      	orrs	r3, r2
    8388:	b29b      	uxth	r3, r3
    838a:	2b00      	cmp	r3, #0
    838c:	d01f      	beq.n	83ce <tc3_process+0x1d6>
    838e:	4b3c      	ldr	r3, [pc, #240]	; (8480 <tc3_process+0x288>)
    8390:	4a42      	ldr	r2, [pc, #264]	; (849c <tc3_process+0x2a4>)
    8392:	5c9a      	ldrb	r2, [r3, r2]
    8394:	4942      	ldr	r1, [pc, #264]	; (84a0 <tc3_process+0x2a8>)
    8396:	5c5b      	ldrb	r3, [r3, r1]
    8398:	021b      	lsls	r3, r3, #8
    839a:	4313      	orrs	r3, r2
    839c:	b29b      	uxth	r3, r3
    839e:	3b01      	subs	r3, #1
    83a0:	b299      	uxth	r1, r3
    83a2:	4b37      	ldr	r3, [pc, #220]	; (8480 <tc3_process+0x288>)
    83a4:	4a3d      	ldr	r2, [pc, #244]	; (849c <tc3_process+0x2a4>)
    83a6:	20ff      	movs	r0, #255	; 0xff
    83a8:	4008      	ands	r0, r1
    83aa:	0005      	movs	r5, r0
    83ac:	5c98      	ldrb	r0, [r3, r2]
    83ae:	2400      	movs	r4, #0
    83b0:	4020      	ands	r0, r4
    83b2:	1c04      	adds	r4, r0, #0
    83b4:	1c28      	adds	r0, r5, #0
    83b6:	4320      	orrs	r0, r4
    83b8:	5498      	strb	r0, [r3, r2]
    83ba:	0a09      	lsrs	r1, r1, #8
    83bc:	b288      	uxth	r0, r1
    83be:	189b      	adds	r3, r3, r2
    83c0:	785a      	ldrb	r2, [r3, #1]
    83c2:	2100      	movs	r1, #0
    83c4:	400a      	ands	r2, r1
    83c6:	1c11      	adds	r1, r2, #0
    83c8:	1c02      	adds	r2, r0, #0
    83ca:	430a      	orrs	r2, r1
    83cc:	705a      	strb	r2, [r3, #1]
		if(eth_sock[4].time_wait_SEND_OK){eth_sock[4].time_wait_SEND_OK--;}	
    83ce:	4b2c      	ldr	r3, [pc, #176]	; (8480 <tc3_process+0x288>)
    83d0:	4a34      	ldr	r2, [pc, #208]	; (84a4 <tc3_process+0x2ac>)
    83d2:	5c9a      	ldrb	r2, [r3, r2]
    83d4:	4934      	ldr	r1, [pc, #208]	; (84a8 <tc3_process+0x2b0>)
    83d6:	5c5b      	ldrb	r3, [r3, r1]
    83d8:	021b      	lsls	r3, r3, #8
    83da:	4313      	orrs	r3, r2
    83dc:	b29b      	uxth	r3, r3
    83de:	2b00      	cmp	r3, #0
    83e0:	d01f      	beq.n	8422 <tc3_process+0x22a>
    83e2:	4b27      	ldr	r3, [pc, #156]	; (8480 <tc3_process+0x288>)
    83e4:	4a2f      	ldr	r2, [pc, #188]	; (84a4 <tc3_process+0x2ac>)
    83e6:	5c9a      	ldrb	r2, [r3, r2]
    83e8:	492f      	ldr	r1, [pc, #188]	; (84a8 <tc3_process+0x2b0>)
    83ea:	5c5b      	ldrb	r3, [r3, r1]
    83ec:	021b      	lsls	r3, r3, #8
    83ee:	4313      	orrs	r3, r2
    83f0:	b29b      	uxth	r3, r3
    83f2:	3b01      	subs	r3, #1
    83f4:	b299      	uxth	r1, r3
    83f6:	4b22      	ldr	r3, [pc, #136]	; (8480 <tc3_process+0x288>)
    83f8:	4a2a      	ldr	r2, [pc, #168]	; (84a4 <tc3_process+0x2ac>)
    83fa:	20ff      	movs	r0, #255	; 0xff
    83fc:	4008      	ands	r0, r1
    83fe:	0005      	movs	r5, r0
    8400:	5c98      	ldrb	r0, [r3, r2]
    8402:	2400      	movs	r4, #0
    8404:	4020      	ands	r0, r4
    8406:	1c04      	adds	r4, r0, #0
    8408:	1c28      	adds	r0, r5, #0
    840a:	4320      	orrs	r0, r4
    840c:	5498      	strb	r0, [r3, r2]
    840e:	0a09      	lsrs	r1, r1, #8
    8410:	b288      	uxth	r0, r1
    8412:	189b      	adds	r3, r3, r2
    8414:	785a      	ldrb	r2, [r3, #1]
    8416:	2100      	movs	r1, #0
    8418:	400a      	ands	r2, r1
    841a:	1c11      	adds	r1, r2, #0
    841c:	1c02      	adds	r2, r0, #0
    841e:	430a      	orrs	r2, r1
    8420:	705a      	strb	r2, [r3, #1]
		
		loggin_timeout++;
    8422:	4b22      	ldr	r3, [pc, #136]	; (84ac <tc3_process+0x2b4>)
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	1c5a      	adds	r2, r3, #1
    8428:	4b20      	ldr	r3, [pc, #128]	; (84ac <tc3_process+0x2b4>)
    842a:	601a      	str	r2, [r3, #0]
		time_100mk=time_100mk+tc3_cnt;	
    842c:	4b20      	ldr	r3, [pc, #128]	; (84b0 <tc3_process+0x2b8>)
    842e:	681a      	ldr	r2, [r3, #0]
    8430:	4b11      	ldr	r3, [pc, #68]	; (8478 <tc3_process+0x280>)
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	18d2      	adds	r2, r2, r3
    8436:	4b1e      	ldr	r3, [pc, #120]	; (84b0 <tc3_process+0x2b8>)
    8438:	601a      	str	r2, [r3, #0]
		if(time_100mk>=10000)
    843a:	4b1d      	ldr	r3, [pc, #116]	; (84b0 <tc3_process+0x2b8>)
    843c:	681b      	ldr	r3, [r3, #0]
    843e:	4a1d      	ldr	r2, [pc, #116]	; (84b4 <tc3_process+0x2bc>)
    8440:	4293      	cmp	r3, r2
    8442:	d912      	bls.n	846a <tc3_process+0x272>
		{time_100mk=0;TTL++; if(ger_wait){ger_wait--;} check_gerkon();}
    8444:	4b1a      	ldr	r3, [pc, #104]	; (84b0 <tc3_process+0x2b8>)
    8446:	2200      	movs	r2, #0
    8448:	601a      	str	r2, [r3, #0]
    844a:	4b1b      	ldr	r3, [pc, #108]	; (84b8 <tc3_process+0x2c0>)
    844c:	681b      	ldr	r3, [r3, #0]
    844e:	1c5a      	adds	r2, r3, #1
    8450:	4b19      	ldr	r3, [pc, #100]	; (84b8 <tc3_process+0x2c0>)
    8452:	601a      	str	r2, [r3, #0]
    8454:	4b19      	ldr	r3, [pc, #100]	; (84bc <tc3_process+0x2c4>)
    8456:	681b      	ldr	r3, [r3, #0]
    8458:	2b00      	cmp	r3, #0
    845a:	d004      	beq.n	8466 <tc3_process+0x26e>
    845c:	4b17      	ldr	r3, [pc, #92]	; (84bc <tc3_process+0x2c4>)
    845e:	681b      	ldr	r3, [r3, #0]
    8460:	1e5a      	subs	r2, r3, #1
    8462:	4b16      	ldr	r3, [pc, #88]	; (84bc <tc3_process+0x2c4>)
    8464:	601a      	str	r2, [r3, #0]
    8466:	4b16      	ldr	r3, [pc, #88]	; (84c0 <tc3_process+0x2c8>)
    8468:	4798      	blx	r3
		
		tc3_cnt=0;		
    846a:	4b03      	ldr	r3, [pc, #12]	; (8478 <tc3_process+0x280>)
    846c:	2200      	movs	r2, #0
    846e:	601a      	str	r2, [r3, #0]
    8470:	e000      	b.n	8474 <tc3_process+0x27c>
		if(!tc3_cnt) {return;}
    8472:	46c0      	nop			; (mov r8, r8)
		
	}
    8474:	46bd      	mov	sp, r7
    8476:	bdb0      	pop	{r4, r5, r7, pc}
    8478:	2000046c 	.word	0x2000046c
    847c:	200031fc 	.word	0x200031fc
    8480:	200005cc 	.word	0x200005cc
    8484:	000005e3 	.word	0x000005e3
    8488:	000005e4 	.word	0x000005e4
    848c:	00000bc8 	.word	0x00000bc8
    8490:	00000bc9 	.word	0x00000bc9
    8494:	000011ad 	.word	0x000011ad
    8498:	000011ae 	.word	0x000011ae
    849c:	00001792 	.word	0x00001792
    84a0:	00001793 	.word	0x00001793
    84a4:	00001d77 	.word	0x00001d77
    84a8:	00001d78 	.word	0x00001d78
    84ac:	20000470 	.word	0x20000470
    84b0:	20000478 	.word	0x20000478
    84b4:	0000270f 	.word	0x0000270f
    84b8:	2000047c 	.word	0x2000047c
    84bc:	20000474 	.word	0x20000474
    84c0:	00006ec9 	.word	0x00006ec9

000084c4 <__NVIC_EnableIRQ>:
{
    84c4:	b580      	push	{r7, lr}
    84c6:	b082      	sub	sp, #8
    84c8:	af00      	add	r7, sp, #0
    84ca:	0002      	movs	r2, r0
    84cc:	1dfb      	adds	r3, r7, #7
    84ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    84d0:	1dfb      	adds	r3, r7, #7
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	2b7f      	cmp	r3, #127	; 0x7f
    84d6:	d809      	bhi.n	84ec <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    84d8:	4b06      	ldr	r3, [pc, #24]	; (84f4 <__NVIC_EnableIRQ+0x30>)
    84da:	1dfa      	adds	r2, r7, #7
    84dc:	7812      	ldrb	r2, [r2, #0]
    84de:	0011      	movs	r1, r2
    84e0:	221f      	movs	r2, #31
    84e2:	400a      	ands	r2, r1
    84e4:	2101      	movs	r1, #1
    84e6:	4091      	lsls	r1, r2
    84e8:	000a      	movs	r2, r1
    84ea:	601a      	str	r2, [r3, #0]
}
    84ec:	46c0      	nop			; (mov r8, r8)
    84ee:	46bd      	mov	sp, r7
    84f0:	b002      	add	sp, #8
    84f2:	bd80      	pop	{r7, pc}
    84f4:	e000e100 	.word	0xe000e100

000084f8 <__NVIC_DisableIRQ>:
{
    84f8:	b580      	push	{r7, lr}
    84fa:	b082      	sub	sp, #8
    84fc:	af00      	add	r7, sp, #0
    84fe:	0002      	movs	r2, r0
    8500:	1dfb      	adds	r3, r7, #7
    8502:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8504:	1dfb      	adds	r3, r7, #7
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	2b7f      	cmp	r3, #127	; 0x7f
    850a:	d80e      	bhi.n	852a <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    850c:	4909      	ldr	r1, [pc, #36]	; (8534 <__NVIC_DisableIRQ+0x3c>)
    850e:	1dfb      	adds	r3, r7, #7
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	001a      	movs	r2, r3
    8514:	231f      	movs	r3, #31
    8516:	4013      	ands	r3, r2
    8518:	2201      	movs	r2, #1
    851a:	409a      	lsls	r2, r3
    851c:	0013      	movs	r3, r2
    851e:	2280      	movs	r2, #128	; 0x80
    8520:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    8522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8526:	f3bf 8f6f 	isb	sy
}
    852a:	46c0      	nop			; (mov r8, r8)
    852c:	46bd      	mov	sp, r7
    852e:	b002      	add	sp, #8
    8530:	bd80      	pop	{r7, pc}
    8532:	46c0      	nop			; (mov r8, r8)
    8534:	e000e100 	.word	0xe000e100

00008538 <__NVIC_SetPriority>:
{
    8538:	b5b0      	push	{r4, r5, r7, lr}
    853a:	b082      	sub	sp, #8
    853c:	af00      	add	r7, sp, #0
    853e:	0002      	movs	r2, r0
    8540:	6039      	str	r1, [r7, #0]
    8542:	1dfb      	adds	r3, r7, #7
    8544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8546:	1dfb      	adds	r3, r7, #7
    8548:	781b      	ldrb	r3, [r3, #0]
    854a:	2b7f      	cmp	r3, #127	; 0x7f
    854c:	d828      	bhi.n	85a0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    854e:	4c2f      	ldr	r4, [pc, #188]	; (860c <__NVIC_SetPriority+0xd4>)
    8550:	1dfb      	adds	r3, r7, #7
    8552:	781b      	ldrb	r3, [r3, #0]
    8554:	b25b      	sxtb	r3, r3
    8556:	089b      	lsrs	r3, r3, #2
    8558:	492c      	ldr	r1, [pc, #176]	; (860c <__NVIC_SetPriority+0xd4>)
    855a:	1dfa      	adds	r2, r7, #7
    855c:	7812      	ldrb	r2, [r2, #0]
    855e:	b252      	sxtb	r2, r2
    8560:	0892      	lsrs	r2, r2, #2
    8562:	32c0      	adds	r2, #192	; 0xc0
    8564:	0092      	lsls	r2, r2, #2
    8566:	5852      	ldr	r2, [r2, r1]
    8568:	1df9      	adds	r1, r7, #7
    856a:	7809      	ldrb	r1, [r1, #0]
    856c:	0008      	movs	r0, r1
    856e:	2103      	movs	r1, #3
    8570:	4001      	ands	r1, r0
    8572:	00c9      	lsls	r1, r1, #3
    8574:	20ff      	movs	r0, #255	; 0xff
    8576:	4088      	lsls	r0, r1
    8578:	0001      	movs	r1, r0
    857a:	43c9      	mvns	r1, r1
    857c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    857e:	683a      	ldr	r2, [r7, #0]
    8580:	0192      	lsls	r2, r2, #6
    8582:	20ff      	movs	r0, #255	; 0xff
    8584:	4010      	ands	r0, r2
    8586:	1dfa      	adds	r2, r7, #7
    8588:	7812      	ldrb	r2, [r2, #0]
    858a:	0015      	movs	r5, r2
    858c:	2203      	movs	r2, #3
    858e:	402a      	ands	r2, r5
    8590:	00d2      	lsls	r2, r2, #3
    8592:	4090      	lsls	r0, r2
    8594:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8596:	430a      	orrs	r2, r1
    8598:	33c0      	adds	r3, #192	; 0xc0
    859a:	009b      	lsls	r3, r3, #2
    859c:	511a      	str	r2, [r3, r4]
}
    859e:	e031      	b.n	8604 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85a0:	4c1b      	ldr	r4, [pc, #108]	; (8610 <__NVIC_SetPriority+0xd8>)
    85a2:	1dfb      	adds	r3, r7, #7
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	001a      	movs	r2, r3
    85a8:	230f      	movs	r3, #15
    85aa:	4013      	ands	r3, r2
    85ac:	3b08      	subs	r3, #8
    85ae:	0899      	lsrs	r1, r3, #2
    85b0:	4a17      	ldr	r2, [pc, #92]	; (8610 <__NVIC_SetPriority+0xd8>)
    85b2:	1dfb      	adds	r3, r7, #7
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	0018      	movs	r0, r3
    85b8:	230f      	movs	r3, #15
    85ba:	4003      	ands	r3, r0
    85bc:	3b08      	subs	r3, #8
    85be:	089b      	lsrs	r3, r3, #2
    85c0:	3306      	adds	r3, #6
    85c2:	009b      	lsls	r3, r3, #2
    85c4:	18d3      	adds	r3, r2, r3
    85c6:	3304      	adds	r3, #4
    85c8:	681b      	ldr	r3, [r3, #0]
    85ca:	1dfa      	adds	r2, r7, #7
    85cc:	7812      	ldrb	r2, [r2, #0]
    85ce:	0010      	movs	r0, r2
    85d0:	2203      	movs	r2, #3
    85d2:	4002      	ands	r2, r0
    85d4:	00d2      	lsls	r2, r2, #3
    85d6:	20ff      	movs	r0, #255	; 0xff
    85d8:	4090      	lsls	r0, r2
    85da:	0002      	movs	r2, r0
    85dc:	43d2      	mvns	r2, r2
    85de:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    85e0:	683b      	ldr	r3, [r7, #0]
    85e2:	019b      	lsls	r3, r3, #6
    85e4:	20ff      	movs	r0, #255	; 0xff
    85e6:	4018      	ands	r0, r3
    85e8:	1dfb      	adds	r3, r7, #7
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	001d      	movs	r5, r3
    85ee:	2303      	movs	r3, #3
    85f0:	402b      	ands	r3, r5
    85f2:	00db      	lsls	r3, r3, #3
    85f4:	4098      	lsls	r0, r3
    85f6:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85f8:	431a      	orrs	r2, r3
    85fa:	1d8b      	adds	r3, r1, #6
    85fc:	009b      	lsls	r3, r3, #2
    85fe:	18e3      	adds	r3, r4, r3
    8600:	3304      	adds	r3, #4
    8602:	601a      	str	r2, [r3, #0]
}
    8604:	46c0      	nop			; (mov r8, r8)
    8606:	46bd      	mov	sp, r7
    8608:	b002      	add	sp, #8
    860a:	bdb0      	pop	{r4, r5, r7, pc}
    860c:	e000e100 	.word	0xe000e100
    8610:	e000ed00 	.word	0xe000ed00

00008614 <usart_init>:
#include "def.h"

volatile USART port[4];

void usart_init(void)	{for(BYTE i= 0; i < 4; i++) {init(i);}}
    8614:	b580      	push	{r7, lr}
    8616:	b082      	sub	sp, #8
    8618:	af00      	add	r7, sp, #0
    861a:	1dfb      	adds	r3, r7, #7
    861c:	2200      	movs	r2, #0
    861e:	701a      	strb	r2, [r3, #0]
    8620:	e009      	b.n	8636 <usart_init+0x22>
    8622:	1dfb      	adds	r3, r7, #7
    8624:	781b      	ldrb	r3, [r3, #0]
    8626:	0018      	movs	r0, r3
    8628:	f000 f80d 	bl	8646 <init>
    862c:	1dfb      	adds	r3, r7, #7
    862e:	781a      	ldrb	r2, [r3, #0]
    8630:	1dfb      	adds	r3, r7, #7
    8632:	3201      	adds	r2, #1
    8634:	701a      	strb	r2, [r3, #0]
    8636:	1dfb      	adds	r3, r7, #7
    8638:	781b      	ldrb	r3, [r3, #0]
    863a:	2b03      	cmp	r3, #3
    863c:	d9f1      	bls.n	8622 <usart_init+0xe>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	46bd      	mov	sp, r7
    8642:	b002      	add	sp, #8
    8644:	bd80      	pop	{r7, pc}

00008646 <init>:
	
void init(BYTE n_port)
{
    8646:	b5b0      	push	{r4, r5, r7, lr}
    8648:	b088      	sub	sp, #32
    864a:	af00      	add	r7, sp, #0
    864c:	0002      	movs	r2, r0
    864e:	1dfb      	adds	r3, r7, #7
    8650:	701a      	strb	r2, [r3, #0]
	double tout = 0;
    8652:	2300      	movs	r3, #0
    8654:	2400      	movs	r4, #0
    8656:	613b      	str	r3, [r7, #16]
    8658:	617c      	str	r4, [r7, #20]
	double bsize = 0;
    865a:	2300      	movs	r3, #0
    865c:	2400      	movs	r4, #0
    865e:	60bb      	str	r3, [r7, #8]
    8660:	60fc      	str	r4, [r7, #12]
	DWORD val = 0;
    8662:	2300      	movs	r3, #0
    8664:	61fb      	str	r3, [r7, #28]
	bsize = 9;
    8666:	2300      	movs	r3, #0
    8668:	4c40      	ldr	r4, [pc, #256]	; (876c <init+0x126>)
    866a:	60bb      	str	r3, [r7, #8]
    866c:	60fc      	str	r4, [r7, #12]

	switch(n_port)
    866e:	1dfb      	adds	r3, r7, #7
    8670:	781b      	ldrb	r3, [r3, #0]
    8672:	2b01      	cmp	r3, #1
    8674:	d030      	beq.n	86d8 <init+0x92>
    8676:	dc03      	bgt.n	8680 <init+0x3a>
    8678:	2b00      	cmp	r3, #0
    867a:	d008      	beq.n	868e <init+0x48>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
			port[n_port].sercom = SERCOM1;
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
			port[n_port].irqn_sercom = SERCOM1_IRQn;
		break;
		default: /*error*/ return;
    867c:	f000 fbe9 	bl	8e52 <init+0x80c>
	switch(n_port)
    8680:	2b02      	cmp	r3, #2
    8682:	d04e      	beq.n	8722 <init+0xdc>
    8684:	2b03      	cmp	r3, #3
    8686:	d100      	bne.n	868a <init+0x44>
    8688:	e07c      	b.n	8784 <init+0x13e>
		default: /*error*/ return;
    868a:	f000 fbe2 	bl	8e52 <init+0x80c>
			PM->APBCMASK.bit.SERCOM3_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    868e:	4a38      	ldr	r2, [pc, #224]	; (8770 <init+0x12a>)
    8690:	6a13      	ldr	r3, [r2, #32]
    8692:	2120      	movs	r1, #32
    8694:	430b      	orrs	r3, r1
    8696:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM3;
    8698:	1dfb      	adds	r3, r7, #7
    869a:	781a      	ldrb	r2, [r3, #0]
    869c:	4935      	ldr	r1, [pc, #212]	; (8774 <init+0x12e>)
    869e:	0013      	movs	r3, r2
    86a0:	00db      	lsls	r3, r3, #3
    86a2:	189b      	adds	r3, r3, r2
    86a4:	019b      	lsls	r3, r3, #6
    86a6:	4a34      	ldr	r2, [pc, #208]	; (8778 <init+0x132>)
    86a8:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM3_CORE;
    86aa:	1dfb      	adds	r3, r7, #7
    86ac:	781a      	ldrb	r2, [r3, #0]
    86ae:	4931      	ldr	r1, [pc, #196]	; (8774 <init+0x12e>)
    86b0:	0013      	movs	r3, r2
    86b2:	00db      	lsls	r3, r3, #3
    86b4:	189b      	adds	r3, r3, r2
    86b6:	019b      	lsls	r3, r3, #6
    86b8:	18cb      	adds	r3, r1, r3
    86ba:	3304      	adds	r3, #4
    86bc:	2217      	movs	r2, #23
    86be:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM3_IRQn;
    86c0:	1dfb      	adds	r3, r7, #7
    86c2:	781a      	ldrb	r2, [r3, #0]
    86c4:	492b      	ldr	r1, [pc, #172]	; (8774 <init+0x12e>)
    86c6:	0013      	movs	r3, r2
    86c8:	00db      	lsls	r3, r3, #3
    86ca:	189b      	adds	r3, r3, r2
    86cc:	019b      	lsls	r3, r3, #6
    86ce:	18cb      	adds	r3, r1, r3
    86d0:	3308      	adds	r3, #8
    86d2:	220c      	movs	r2, #12
    86d4:	701a      	strb	r2, [r3, #0]
		break;
    86d6:	e07a      	b.n	87ce <init+0x188>
			PM->APBCMASK.bit.SERCOM2_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    86d8:	4a25      	ldr	r2, [pc, #148]	; (8770 <init+0x12a>)
    86da:	6a13      	ldr	r3, [r2, #32]
    86dc:	2110      	movs	r1, #16
    86de:	430b      	orrs	r3, r1
    86e0:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM2;
    86e2:	1dfb      	adds	r3, r7, #7
    86e4:	781a      	ldrb	r2, [r3, #0]
    86e6:	4923      	ldr	r1, [pc, #140]	; (8774 <init+0x12e>)
    86e8:	0013      	movs	r3, r2
    86ea:	00db      	lsls	r3, r3, #3
    86ec:	189b      	adds	r3, r3, r2
    86ee:	019b      	lsls	r3, r3, #6
    86f0:	4a22      	ldr	r2, [pc, #136]	; (877c <init+0x136>)
    86f2:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM2_CORE;
    86f4:	1dfb      	adds	r3, r7, #7
    86f6:	781a      	ldrb	r2, [r3, #0]
    86f8:	491e      	ldr	r1, [pc, #120]	; (8774 <init+0x12e>)
    86fa:	0013      	movs	r3, r2
    86fc:	00db      	lsls	r3, r3, #3
    86fe:	189b      	adds	r3, r3, r2
    8700:	019b      	lsls	r3, r3, #6
    8702:	18cb      	adds	r3, r1, r3
    8704:	3304      	adds	r3, #4
    8706:	2216      	movs	r2, #22
    8708:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM2_IRQn;
    870a:	1dfb      	adds	r3, r7, #7
    870c:	781a      	ldrb	r2, [r3, #0]
    870e:	4919      	ldr	r1, [pc, #100]	; (8774 <init+0x12e>)
    8710:	0013      	movs	r3, r2
    8712:	00db      	lsls	r3, r3, #3
    8714:	189b      	adds	r3, r3, r2
    8716:	019b      	lsls	r3, r3, #6
    8718:	18cb      	adds	r3, r1, r3
    871a:	3308      	adds	r3, #8
    871c:	220b      	movs	r2, #11
    871e:	701a      	strb	r2, [r3, #0]
		break;
    8720:	e055      	b.n	87ce <init+0x188>
			PM->APBCMASK.bit.SERCOM0_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8722:	4a13      	ldr	r2, [pc, #76]	; (8770 <init+0x12a>)
    8724:	6a13      	ldr	r3, [r2, #32]
    8726:	2104      	movs	r1, #4
    8728:	430b      	orrs	r3, r1
    872a:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM0;
    872c:	1dfb      	adds	r3, r7, #7
    872e:	781a      	ldrb	r2, [r3, #0]
    8730:	4910      	ldr	r1, [pc, #64]	; (8774 <init+0x12e>)
    8732:	0013      	movs	r3, r2
    8734:	00db      	lsls	r3, r3, #3
    8736:	189b      	adds	r3, r3, r2
    8738:	019b      	lsls	r3, r3, #6
    873a:	4a11      	ldr	r2, [pc, #68]	; (8780 <init+0x13a>)
    873c:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM0_CORE;
    873e:	1dfb      	adds	r3, r7, #7
    8740:	781a      	ldrb	r2, [r3, #0]
    8742:	490c      	ldr	r1, [pc, #48]	; (8774 <init+0x12e>)
    8744:	0013      	movs	r3, r2
    8746:	00db      	lsls	r3, r3, #3
    8748:	189b      	adds	r3, r3, r2
    874a:	019b      	lsls	r3, r3, #6
    874c:	18cb      	adds	r3, r1, r3
    874e:	3304      	adds	r3, #4
    8750:	2214      	movs	r2, #20
    8752:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM0_IRQn;
    8754:	1dfb      	adds	r3, r7, #7
    8756:	781a      	ldrb	r2, [r3, #0]
    8758:	4906      	ldr	r1, [pc, #24]	; (8774 <init+0x12e>)
    875a:	0013      	movs	r3, r2
    875c:	00db      	lsls	r3, r3, #3
    875e:	189b      	adds	r3, r3, r2
    8760:	019b      	lsls	r3, r3, #6
    8762:	18cb      	adds	r3, r1, r3
    8764:	3308      	adds	r3, #8
    8766:	2209      	movs	r2, #9
    8768:	701a      	strb	r2, [r3, #0]
		break;
    876a:	e030      	b.n	87ce <init+0x188>
    876c:	40220000 	.word	0x40220000
    8770:	40000400 	.word	0x40000400
    8774:	200031fc 	.word	0x200031fc
    8778:	42001400 	.word	0x42001400
    877c:	42001000 	.word	0x42001000
    8780:	42000800 	.word	0x42000800
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8784:	4aea      	ldr	r2, [pc, #936]	; (8b30 <init+0x4ea>)
    8786:	6a13      	ldr	r3, [r2, #32]
    8788:	2108      	movs	r1, #8
    878a:	430b      	orrs	r3, r1
    878c:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM1;
    878e:	1dfb      	adds	r3, r7, #7
    8790:	781a      	ldrb	r2, [r3, #0]
    8792:	49e8      	ldr	r1, [pc, #928]	; (8b34 <init+0x4ee>)
    8794:	0013      	movs	r3, r2
    8796:	00db      	lsls	r3, r3, #3
    8798:	189b      	adds	r3, r3, r2
    879a:	019b      	lsls	r3, r3, #6
    879c:	4ae6      	ldr	r2, [pc, #920]	; (8b38 <init+0x4f2>)
    879e:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
    87a0:	1dfb      	adds	r3, r7, #7
    87a2:	781a      	ldrb	r2, [r3, #0]
    87a4:	49e3      	ldr	r1, [pc, #908]	; (8b34 <init+0x4ee>)
    87a6:	0013      	movs	r3, r2
    87a8:	00db      	lsls	r3, r3, #3
    87aa:	189b      	adds	r3, r3, r2
    87ac:	019b      	lsls	r3, r3, #6
    87ae:	18cb      	adds	r3, r1, r3
    87b0:	3304      	adds	r3, #4
    87b2:	2215      	movs	r2, #21
    87b4:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM1_IRQn;
    87b6:	1dfb      	adds	r3, r7, #7
    87b8:	781a      	ldrb	r2, [r3, #0]
    87ba:	49de      	ldr	r1, [pc, #888]	; (8b34 <init+0x4ee>)
    87bc:	0013      	movs	r3, r2
    87be:	00db      	lsls	r3, r3, #3
    87c0:	189b      	adds	r3, r3, r2
    87c2:	019b      	lsls	r3, r3, #6
    87c4:	18cb      	adds	r3, r1, r3
    87c6:	3308      	adds	r3, #8
    87c8:	220a      	movs	r2, #10
    87ca:	701a      	strb	r2, [r3, #0]
		break;
    87cc:	46c0      	nop			; (mov r8, r8)
	}
	
	PM->APBCSEL.bit.APBCDIV   = 0x00;
    87ce:	4ad8      	ldr	r2, [pc, #864]	; (8b30 <init+0x4ea>)
    87d0:	7ad3      	ldrb	r3, [r2, #11]
    87d2:	2107      	movs	r1, #7
    87d4:	438b      	bics	r3, r1
    87d6:	72d3      	strb	r3, [r2, #11]
	GCLK->CLKCTRL.bit.WRTLOCK = 0x00;
    87d8:	4ad8      	ldr	r2, [pc, #864]	; (8b3c <init+0x4f6>)
    87da:	8853      	ldrh	r3, [r2, #2]
    87dc:	045b      	lsls	r3, r3, #17
    87de:	0c5b      	lsrs	r3, r3, #17
    87e0:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.ID      = port[n_port].gclk_sercom; // Bits 5:0  - ID: Generic Clock Selection ID (0x14 - SERCOM0_CORE)
    87e2:	4ad6      	ldr	r2, [pc, #856]	; (8b3c <init+0x4f6>)
    87e4:	1dfb      	adds	r3, r7, #7
    87e6:	7819      	ldrb	r1, [r3, #0]
    87e8:	48d2      	ldr	r0, [pc, #840]	; (8b34 <init+0x4ee>)
    87ea:	000b      	movs	r3, r1
    87ec:	00db      	lsls	r3, r3, #3
    87ee:	185b      	adds	r3, r3, r1
    87f0:	019b      	lsls	r3, r3, #6
    87f2:	18c3      	adds	r3, r0, r3
    87f4:	3304      	adds	r3, #4
    87f6:	681b      	ldr	r3, [r3, #0]
    87f8:	b2db      	uxtb	r3, r3
    87fa:	1c19      	adds	r1, r3, #0
    87fc:	233f      	movs	r3, #63	; 0x3f
    87fe:	400b      	ands	r3, r1
    8800:	b2d9      	uxtb	r1, r3
    8802:	8853      	ldrh	r3, [r2, #2]
    8804:	1c08      	adds	r0, r1, #0
    8806:	213f      	movs	r1, #63	; 0x3f
    8808:	4008      	ands	r0, r1
    880a:	213f      	movs	r1, #63	; 0x3f
    880c:	438b      	bics	r3, r1
    880e:	1c19      	adds	r1, r3, #0
    8810:	1c03      	adds	r3, r0, #0
    8812:	430b      	orrs	r3, r1
    8814:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN     = 0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    8816:	4ac9      	ldr	r2, [pc, #804]	; (8b3c <init+0x4f6>)
    8818:	8853      	ldrh	r3, [r2, #2]
    881a:	49c9      	ldr	r1, [pc, #804]	; (8b40 <init+0x4fa>)
    881c:	400b      	ands	r3, r1
    881e:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN   = 0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    8820:	4ac6      	ldr	r2, [pc, #792]	; (8b3c <init+0x4f6>)
    8822:	8853      	ldrh	r3, [r2, #2]
    8824:	2180      	movs	r1, #128	; 0x80
    8826:	01c9      	lsls	r1, r1, #7
    8828:	430b      	orrs	r3, r1
    882a:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.ENABLE = 0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    882c:	1dfb      	adds	r3, r7, #7
    882e:	781a      	ldrb	r2, [r3, #0]
    8830:	49c0      	ldr	r1, [pc, #768]	; (8b34 <init+0x4ee>)
    8832:	0013      	movs	r3, r2
    8834:	00db      	lsls	r3, r3, #3
    8836:	189b      	adds	r3, r3, r2
    8838:	019b      	lsls	r3, r3, #6
    883a:	585b      	ldr	r3, [r3, r1]
    883c:	681a      	ldr	r2, [r3, #0]
    883e:	2102      	movs	r1, #2
    8840:	438a      	bics	r2, r1
    8842:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.ENABLE) { ; }
    8844:	46c0      	nop			; (mov r8, r8)
    8846:	1dfb      	adds	r3, r7, #7
    8848:	781a      	ldrb	r2, [r3, #0]
    884a:	49ba      	ldr	r1, [pc, #744]	; (8b34 <init+0x4ee>)
    884c:	0013      	movs	r3, r2
    884e:	00db      	lsls	r3, r3, #3
    8850:	189b      	adds	r3, r3, r2
    8852:	019b      	lsls	r3, r3, #6
    8854:	585b      	ldr	r3, [r3, r1]
    8856:	69db      	ldr	r3, [r3, #28]
    8858:	079b      	lsls	r3, r3, #30
    885a:	0fdb      	lsrs	r3, r3, #31
    885c:	b2db      	uxtb	r3, r3
    885e:	2b00      	cmp	r3, #0
    8860:	d1f1      	bne.n	8846 <init+0x200>

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.SWRST   =0x01; //Bit0-SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    8862:	1dfb      	adds	r3, r7, #7
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	49b3      	ldr	r1, [pc, #716]	; (8b34 <init+0x4ee>)
    8868:	0013      	movs	r3, r2
    886a:	00db      	lsls	r3, r3, #3
    886c:	189b      	adds	r3, r3, r2
    886e:	019b      	lsls	r3, r3, #6
    8870:	585b      	ldr	r3, [r3, r1]
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	2101      	movs	r1, #1
    8876:	430a      	orrs	r2, r1
    8878:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    887a:	46c0      	nop			; (mov r8, r8)
    887c:	1dfb      	adds	r3, r7, #7
    887e:	781a      	ldrb	r2, [r3, #0]
    8880:	49ac      	ldr	r1, [pc, #688]	; (8b34 <init+0x4ee>)
    8882:	0013      	movs	r3, r2
    8884:	00db      	lsls	r3, r3, #3
    8886:	189b      	adds	r3, r3, r2
    8888:	019b      	lsls	r3, r3, #6
    888a:	585b      	ldr	r3, [r3, r1]
    888c:	69db      	ldr	r3, [r3, #28]
    888e:	07db      	lsls	r3, r3, #31
    8890:	0fdb      	lsrs	r3, r3, #31
    8892:	b2db      	uxtb	r3, r3
    8894:	2b00      	cmp	r3, #0
    8896:	d1f1      	bne.n	887c <init+0x236>

	port[n_port].sercom->USART.CTRLA.bit.DORD    =0x01;									// Bit  30    - DORD: Data Order (1: LSB is transmitted first.)
    8898:	1dfb      	adds	r3, r7, #7
    889a:	781a      	ldrb	r2, [r3, #0]
    889c:	49a5      	ldr	r1, [pc, #660]	; (8b34 <init+0x4ee>)
    889e:	0013      	movs	r3, r2
    88a0:	00db      	lsls	r3, r3, #3
    88a2:	189b      	adds	r3, r3, r2
    88a4:	019b      	lsls	r3, r3, #6
    88a6:	585b      	ldr	r3, [r3, r1]
    88a8:	681a      	ldr	r2, [r3, #0]
    88aa:	2180      	movs	r1, #128	; 0x80
    88ac:	05c9      	lsls	r1, r1, #23
    88ae:	430a      	orrs	r2, r1
    88b0:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CPOL    =0x00;									// Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    88b2:	1dfb      	adds	r3, r7, #7
    88b4:	781a      	ldrb	r2, [r3, #0]
    88b6:	499f      	ldr	r1, [pc, #636]	; (8b34 <init+0x4ee>)
    88b8:	0013      	movs	r3, r2
    88ba:	00db      	lsls	r3, r3, #3
    88bc:	189b      	adds	r3, r3, r2
    88be:	019b      	lsls	r3, r3, #6
    88c0:	585b      	ldr	r3, [r3, r1]
    88c2:	681a      	ldr	r2, [r3, #0]
    88c4:	499f      	ldr	r1, [pc, #636]	; (8b44 <init+0x4fe>)
    88c6:	400a      	ands	r2, r1
    88c8:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CMODE   =0x00;									// Bit  28    - CMODE: Communication Mode (0: Asynchronous communication.)
    88ca:	1dfb      	adds	r3, r7, #7
    88cc:	781a      	ldrb	r2, [r3, #0]
    88ce:	4999      	ldr	r1, [pc, #612]	; (8b34 <init+0x4ee>)
    88d0:	0013      	movs	r3, r2
    88d2:	00db      	lsls	r3, r3, #3
    88d4:	189b      	adds	r3, r3, r2
    88d6:	019b      	lsls	r3, r3, #6
    88d8:	585b      	ldr	r3, [r3, r1]
    88da:	681a      	ldr	r2, [r3, #0]
    88dc:	499a      	ldr	r1, [pc, #616]	; (8b48 <init+0x502>)
    88de:	400a      	ands	r2, r1
    88e0:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPA   =0x00;									// Bits 23:22 - SAMPA[1:0]: Sample Adjustment (0: 3-4-5)
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	781a      	ldrb	r2, [r3, #0]
    88e6:	4993      	ldr	r1, [pc, #588]	; (8b34 <init+0x4ee>)
    88e8:	0013      	movs	r3, r2
    88ea:	00db      	lsls	r3, r3, #3
    88ec:	189b      	adds	r3, r3, r2
    88ee:	019b      	lsls	r3, r3, #6
    88f0:	585b      	ldr	r3, [r3, r1]
    88f2:	681a      	ldr	r2, [r3, #0]
    88f4:	4995      	ldr	r1, [pc, #596]	; (8b4c <init+0x506>)
    88f6:	400a      	ands	r2, r1
    88f8:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPR   =0x02;									// Bits 15:13 - SAMPR[2:0]: Sample Rate (2: 8x over-sampling using arithmetic baud rate generation.)
    88fa:	1dfb      	adds	r3, r7, #7
    88fc:	781a      	ldrb	r2, [r3, #0]
    88fe:	498d      	ldr	r1, [pc, #564]	; (8b34 <init+0x4ee>)
    8900:	0013      	movs	r3, r2
    8902:	00db      	lsls	r3, r3, #3
    8904:	189b      	adds	r3, r3, r2
    8906:	019b      	lsls	r3, r3, #6
    8908:	585b      	ldr	r3, [r3, r1]
    890a:	681a      	ldr	r2, [r3, #0]
    890c:	4990      	ldr	r1, [pc, #576]	; (8b50 <init+0x50a>)
    890e:	400a      	ands	r2, r1
    8910:	2180      	movs	r1, #128	; 0x80
    8912:	01c9      	lsls	r1, r1, #7
    8914:	430a      	orrs	r2, r1
    8916:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.IBON    =0x00;									// Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    8918:	1dfb      	adds	r3, r7, #7
    891a:	781a      	ldrb	r2, [r3, #0]
    891c:	4985      	ldr	r1, [pc, #532]	; (8b34 <init+0x4ee>)
    891e:	0013      	movs	r3, r2
    8920:	00db      	lsls	r3, r3, #3
    8922:	189b      	adds	r3, r3, r2
    8924:	019b      	lsls	r3, r3, #6
    8926:	585b      	ldr	r3, [r3, r1]
    8928:	681a      	ldr	r2, [r3, #0]
    892a:	498a      	ldr	r1, [pc, #552]	; (8b54 <init+0x50e>)
    892c:	400a      	ands	r2, r1
    892e:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RUNSTDBY=0x00;									// Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    8930:	1dfb      	adds	r3, r7, #7
    8932:	781a      	ldrb	r2, [r3, #0]
    8934:	497f      	ldr	r1, [pc, #508]	; (8b34 <init+0x4ee>)
    8936:	0013      	movs	r3, r2
    8938:	00db      	lsls	r3, r3, #3
    893a:	189b      	adds	r3, r3, r2
    893c:	019b      	lsls	r3, r3, #6
    893e:	585b      	ldr	r3, [r3, r1]
    8940:	681a      	ldr	r2, [r3, #0]
    8942:	2180      	movs	r1, #128	; 0x80
    8944:	438a      	bics	r2, r1
    8946:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.MODE    =0x01;									// Bits 4:2   - MODE: Operating Mode (1: USART with internal clock.)
    8948:	1dfb      	adds	r3, r7, #7
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	4979      	ldr	r1, [pc, #484]	; (8b34 <init+0x4ee>)
    894e:	0013      	movs	r3, r2
    8950:	00db      	lsls	r3, r3, #3
    8952:	189b      	adds	r3, r3, r2
    8954:	019b      	lsls	r3, r3, #6
    8956:	585b      	ldr	r3, [r3, r1]
    8958:	681a      	ldr	r2, [r3, #0]
    895a:	211c      	movs	r1, #28
    895c:	438a      	bics	r2, r1
    895e:	2104      	movs	r1, #4
    8960:	430a      	orrs	r2, r1
    8962:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.TXPO    =0x02;									// Bits 17:16 - TXPO: Transmit Data Pinout (2: TX->PAD[0], RTS->PAD[2])
    8964:	1dfb      	adds	r3, r7, #7
    8966:	781a      	ldrb	r2, [r3, #0]
    8968:	4972      	ldr	r1, [pc, #456]	; (8b34 <init+0x4ee>)
    896a:	0013      	movs	r3, r2
    896c:	00db      	lsls	r3, r3, #3
    896e:	189b      	adds	r3, r3, r2
    8970:	019b      	lsls	r3, r3, #6
    8972:	585b      	ldr	r3, [r3, r1]
    8974:	681a      	ldr	r2, [r3, #0]
    8976:	4978      	ldr	r1, [pc, #480]	; (8b58 <init+0x512>)
    8978:	400a      	ands	r2, r1
    897a:	2180      	movs	r1, #128	; 0x80
    897c:	0289      	lsls	r1, r1, #10
    897e:	430a      	orrs	r2, r1
    8980:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RXPO    =0x01;									// Bits 21:20 - RXPO: Receive Data Pinout (1: RX->PAD[1])
    8982:	1dfb      	adds	r3, r7, #7
    8984:	781a      	ldrb	r2, [r3, #0]
    8986:	496b      	ldr	r1, [pc, #428]	; (8b34 <init+0x4ee>)
    8988:	0013      	movs	r3, r2
    898a:	00db      	lsls	r3, r3, #3
    898c:	189b      	adds	r3, r3, r2
    898e:	019b      	lsls	r3, r3, #6
    8990:	585b      	ldr	r3, [r3, r1]
    8992:	681a      	ldr	r2, [r3, #0]
    8994:	4971      	ldr	r1, [pc, #452]	; (8b5c <init+0x516>)
    8996:	400a      	ands	r2, r1
    8998:	2180      	movs	r1, #128	; 0x80
    899a:	0349      	lsls	r1, r1, #13
    899c:	430a      	orrs	r2, r1
    899e:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLB.bit.ENC     =0x00;									// Bit  10    - ENC: Encoding Format (0: Data is not encoded.)
    89a0:	1dfb      	adds	r3, r7, #7
    89a2:	781a      	ldrb	r2, [r3, #0]
    89a4:	4963      	ldr	r1, [pc, #396]	; (8b34 <init+0x4ee>)
    89a6:	0013      	movs	r3, r2
    89a8:	00db      	lsls	r3, r3, #3
    89aa:	189b      	adds	r3, r3, r2
    89ac:	019b      	lsls	r3, r3, #6
    89ae:	585b      	ldr	r3, [r3, r1]
    89b0:	685a      	ldr	r2, [r3, #4]
    89b2:	496b      	ldr	r1, [pc, #428]	; (8b60 <init+0x51a>)
    89b4:	400a      	ands	r2, r1
    89b6:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.SFDE    =0x01;									// Bit  9     - SFDE: Start of Frame Detection Enable (1: Start-of-frame detection enabled.)
    89b8:	1dfb      	adds	r3, r7, #7
    89ba:	781a      	ldrb	r2, [r3, #0]
    89bc:	495d      	ldr	r1, [pc, #372]	; (8b34 <init+0x4ee>)
    89be:	0013      	movs	r3, r2
    89c0:	00db      	lsls	r3, r3, #3
    89c2:	189b      	adds	r3, r3, r2
    89c4:	019b      	lsls	r3, r3, #6
    89c6:	585b      	ldr	r3, [r3, r1]
    89c8:	685a      	ldr	r2, [r3, #4]
    89ca:	2180      	movs	r1, #128	; 0x80
    89cc:	0089      	lsls	r1, r1, #2
    89ce:	430a      	orrs	r2, r1
    89d0:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.COLDEN  =0x00;									// Bit  8     - COLDEN: Collision Detection Enable (0: Collision detection is not enabled.)
    89d2:	1dfb      	adds	r3, r7, #7
    89d4:	781a      	ldrb	r2, [r3, #0]
    89d6:	4957      	ldr	r1, [pc, #348]	; (8b34 <init+0x4ee>)
    89d8:	0013      	movs	r3, r2
    89da:	00db      	lsls	r3, r3, #3
    89dc:	189b      	adds	r3, r3, r2
    89de:	019b      	lsls	r3, r3, #6
    89e0:	585b      	ldr	r3, [r3, r1]
    89e2:	685a      	ldr	r2, [r3, #4]
    89e4:	495b      	ldr	r1, [pc, #364]	; (8b54 <init+0x50e>)
    89e6:	400a      	ands	r2, r1
    89e8:	605a      	str	r2, [r3, #4]
	

	//cfg settings
	//frame
	switch (cfg_1.sock_rs485[n_port].parity) 
    89ea:	1dfb      	adds	r3, r7, #7
    89ec:	781a      	ldrb	r2, [r3, #0]
    89ee:	495d      	ldr	r1, [pc, #372]	; (8b64 <init+0x51e>)
    89f0:	2038      	movs	r0, #56	; 0x38
    89f2:	0013      	movs	r3, r2
    89f4:	005b      	lsls	r3, r3, #1
    89f6:	189b      	adds	r3, r3, r2
    89f8:	009b      	lsls	r3, r3, #2
    89fa:	189b      	adds	r3, r3, r2
    89fc:	18cb      	adds	r3, r1, r3
    89fe:	181b      	adds	r3, r3, r0
    8a00:	795b      	ldrb	r3, [r3, #5]
    8a02:	069b      	lsls	r3, r3, #26
    8a04:	0f9b      	lsrs	r3, r3, #30
    8a06:	b2db      	uxtb	r3, r3
    8a08:	2b01      	cmp	r3, #1
    8a0a:	d01d      	beq.n	8a48 <init+0x402>
    8a0c:	2b02      	cmp	r3, #2
    8a0e:	d138      	bne.n	8a82 <init+0x43c>
	{
		case  PARITY_EVEN:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = EVEN; break;
    8a10:	1dfb      	adds	r3, r7, #7
    8a12:	781a      	ldrb	r2, [r3, #0]
    8a14:	4947      	ldr	r1, [pc, #284]	; (8b34 <init+0x4ee>)
    8a16:	0013      	movs	r3, r2
    8a18:	00db      	lsls	r3, r3, #3
    8a1a:	189b      	adds	r3, r3, r2
    8a1c:	019b      	lsls	r3, r3, #6
    8a1e:	585b      	ldr	r3, [r3, r1]
    8a20:	681a      	ldr	r2, [r3, #0]
    8a22:	4951      	ldr	r1, [pc, #324]	; (8b68 <init+0x522>)
    8a24:	400a      	ands	r2, r1
    8a26:	2180      	movs	r1, #128	; 0x80
    8a28:	0449      	lsls	r1, r1, #17
    8a2a:	430a      	orrs	r2, r1
    8a2c:	601a      	str	r2, [r3, #0]
    8a2e:	1dfb      	adds	r3, r7, #7
    8a30:	781a      	ldrb	r2, [r3, #0]
    8a32:	4940      	ldr	r1, [pc, #256]	; (8b34 <init+0x4ee>)
    8a34:	0013      	movs	r3, r2
    8a36:	00db      	lsls	r3, r3, #3
    8a38:	189b      	adds	r3, r3, r2
    8a3a:	019b      	lsls	r3, r3, #6
    8a3c:	585b      	ldr	r3, [r3, r1]
    8a3e:	685a      	ldr	r2, [r3, #4]
    8a40:	494a      	ldr	r1, [pc, #296]	; (8b6c <init+0x526>)
    8a42:	400a      	ands	r2, r1
    8a44:	605a      	str	r2, [r3, #4]
    8a46:	e029      	b.n	8a9c <init+0x456>
		case  PARITY_ODD:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = ODD; break;
    8a48:	1dfb      	adds	r3, r7, #7
    8a4a:	781a      	ldrb	r2, [r3, #0]
    8a4c:	4939      	ldr	r1, [pc, #228]	; (8b34 <init+0x4ee>)
    8a4e:	0013      	movs	r3, r2
    8a50:	00db      	lsls	r3, r3, #3
    8a52:	189b      	adds	r3, r3, r2
    8a54:	019b      	lsls	r3, r3, #6
    8a56:	585b      	ldr	r3, [r3, r1]
    8a58:	681a      	ldr	r2, [r3, #0]
    8a5a:	4943      	ldr	r1, [pc, #268]	; (8b68 <init+0x522>)
    8a5c:	400a      	ands	r2, r1
    8a5e:	2180      	movs	r1, #128	; 0x80
    8a60:	0449      	lsls	r1, r1, #17
    8a62:	430a      	orrs	r2, r1
    8a64:	601a      	str	r2, [r3, #0]
    8a66:	1dfb      	adds	r3, r7, #7
    8a68:	781a      	ldrb	r2, [r3, #0]
    8a6a:	4932      	ldr	r1, [pc, #200]	; (8b34 <init+0x4ee>)
    8a6c:	0013      	movs	r3, r2
    8a6e:	00db      	lsls	r3, r3, #3
    8a70:	189b      	adds	r3, r3, r2
    8a72:	019b      	lsls	r3, r3, #6
    8a74:	585b      	ldr	r3, [r3, r1]
    8a76:	685a      	ldr	r2, [r3, #4]
    8a78:	2180      	movs	r1, #128	; 0x80
    8a7a:	0189      	lsls	r1, r1, #6
    8a7c:	430a      	orrs	r2, r1
    8a7e:	605a      	str	r2, [r3, #4]
    8a80:	e00c      	b.n	8a9c <init+0x456>
		default:			port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_NO_PARITY; break;
    8a82:	1dfb      	adds	r3, r7, #7
    8a84:	781a      	ldrb	r2, [r3, #0]
    8a86:	492b      	ldr	r1, [pc, #172]	; (8b34 <init+0x4ee>)
    8a88:	0013      	movs	r3, r2
    8a8a:	00db      	lsls	r3, r3, #3
    8a8c:	189b      	adds	r3, r3, r2
    8a8e:	019b      	lsls	r3, r3, #6
    8a90:	585b      	ldr	r3, [r3, r1]
    8a92:	681a      	ldr	r2, [r3, #0]
    8a94:	4934      	ldr	r1, [pc, #208]	; (8b68 <init+0x522>)
    8a96:	400a      	ands	r2, r1
    8a98:	601a      	str	r2, [r3, #0]
    8a9a:	46c0      	nop			; (mov r8, r8)
	}
	//stop bit
	switch(cfg_1.sock_rs485[n_port].stop)	
    8a9c:	1dfb      	adds	r3, r7, #7
    8a9e:	781a      	ldrb	r2, [r3, #0]
    8aa0:	4930      	ldr	r1, [pc, #192]	; (8b64 <init+0x51e>)
    8aa2:	2038      	movs	r0, #56	; 0x38
    8aa4:	0013      	movs	r3, r2
    8aa6:	005b      	lsls	r3, r3, #1
    8aa8:	189b      	adds	r3, r3, r2
    8aaa:	009b      	lsls	r3, r3, #2
    8aac:	189b      	adds	r3, r3, r2
    8aae:	18cb      	adds	r3, r1, r3
    8ab0:	181b      	adds	r3, r3, r0
    8ab2:	795b      	ldrb	r3, [r3, #5]
    8ab4:	061b      	lsls	r3, r3, #24
    8ab6:	0f9b      	lsrs	r3, r3, #30
    8ab8:	b2db      	uxtb	r3, r3
    8aba:	2b02      	cmp	r3, #2
    8abc:	d10c      	bne.n	8ad8 <init+0x492>
	{
		case 2:		port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 1; break;
    8abe:	1dfb      	adds	r3, r7, #7
    8ac0:	781a      	ldrb	r2, [r3, #0]
    8ac2:	491c      	ldr	r1, [pc, #112]	; (8b34 <init+0x4ee>)
    8ac4:	0013      	movs	r3, r2
    8ac6:	00db      	lsls	r3, r3, #3
    8ac8:	189b      	adds	r3, r3, r2
    8aca:	019b      	lsls	r3, r3, #6
    8acc:	585b      	ldr	r3, [r3, r1]
    8ace:	685a      	ldr	r2, [r3, #4]
    8ad0:	2140      	movs	r1, #64	; 0x40
    8ad2:	430a      	orrs	r2, r1
    8ad4:	605a      	str	r2, [r3, #4]
    8ad6:	e00c      	b.n	8af2 <init+0x4ac>
		default:	port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 0; break;
    8ad8:	1dfb      	adds	r3, r7, #7
    8ada:	781a      	ldrb	r2, [r3, #0]
    8adc:	4915      	ldr	r1, [pc, #84]	; (8b34 <init+0x4ee>)
    8ade:	0013      	movs	r3, r2
    8ae0:	00db      	lsls	r3, r3, #3
    8ae2:	189b      	adds	r3, r3, r2
    8ae4:	019b      	lsls	r3, r3, #6
    8ae6:	585b      	ldr	r3, [r3, r1]
    8ae8:	685a      	ldr	r2, [r3, #4]
    8aea:	2140      	movs	r1, #64	; 0x40
    8aec:	438a      	bics	r2, r1
    8aee:	605a      	str	r2, [r3, #4]
    8af0:	46c0      	nop			; (mov r8, r8)
	}
	//char size
	switch (cfg_1.sock_rs485[n_port].bsize)
    8af2:	1dfb      	adds	r3, r7, #7
    8af4:	781a      	ldrb	r2, [r3, #0]
    8af6:	491b      	ldr	r1, [pc, #108]	; (8b64 <init+0x51e>)
    8af8:	2038      	movs	r0, #56	; 0x38
    8afa:	0013      	movs	r3, r2
    8afc:	005b      	lsls	r3, r3, #1
    8afe:	189b      	adds	r3, r3, r2
    8b00:	009b      	lsls	r3, r3, #2
    8b02:	189b      	adds	r3, r3, r2
    8b04:	18cb      	adds	r3, r1, r3
    8b06:	181b      	adds	r3, r3, r0
    8b08:	795b      	ldrb	r3, [r3, #5]
    8b0a:	071b      	lsls	r3, r3, #28
    8b0c:	0f1b      	lsrs	r3, r3, #28
    8b0e:	b2db      	uxtb	r3, r3
    8b10:	2b07      	cmp	r3, #7
    8b12:	d12d      	bne.n	8b70 <init+0x52a>
	{
		case 7:	port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x07; break;
    8b14:	1dfb      	adds	r3, r7, #7
    8b16:	781a      	ldrb	r2, [r3, #0]
    8b18:	4906      	ldr	r1, [pc, #24]	; (8b34 <init+0x4ee>)
    8b1a:	0013      	movs	r3, r2
    8b1c:	00db      	lsls	r3, r3, #3
    8b1e:	189b      	adds	r3, r3, r2
    8b20:	019b      	lsls	r3, r3, #6
    8b22:	585b      	ldr	r3, [r3, r1]
    8b24:	685a      	ldr	r2, [r3, #4]
    8b26:	2107      	movs	r1, #7
    8b28:	430a      	orrs	r2, r1
    8b2a:	605a      	str	r2, [r3, #4]
    8b2c:	e02d      	b.n	8b8a <init+0x544>
    8b2e:	46c0      	nop			; (mov r8, r8)
    8b30:	40000400 	.word	0x40000400
    8b34:	200031fc 	.word	0x200031fc
    8b38:	42000c00 	.word	0x42000c00
    8b3c:	40000c00 	.word	0x40000c00
    8b40:	fffff0ff 	.word	0xfffff0ff
    8b44:	dfffffff 	.word	0xdfffffff
    8b48:	efffffff 	.word	0xefffffff
    8b4c:	ff3fffff 	.word	0xff3fffff
    8b50:	ffff1fff 	.word	0xffff1fff
    8b54:	fffffeff 	.word	0xfffffeff
    8b58:	fffcffff 	.word	0xfffcffff
    8b5c:	ffcfffff 	.word	0xffcfffff
    8b60:	fffffbff 	.word	0xfffffbff
    8b64:	20003dc4 	.word	0x20003dc4
    8b68:	f0ffffff 	.word	0xf0ffffff
    8b6c:	ffffdfff 	.word	0xffffdfff
		default:port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x00; break;
    8b70:	1dfb      	adds	r3, r7, #7
    8b72:	781a      	ldrb	r2, [r3, #0]
    8b74:	49b8      	ldr	r1, [pc, #736]	; (8e58 <init+0x812>)
    8b76:	0013      	movs	r3, r2
    8b78:	00db      	lsls	r3, r3, #3
    8b7a:	189b      	adds	r3, r3, r2
    8b7c:	019b      	lsls	r3, r3, #6
    8b7e:	585b      	ldr	r3, [r3, r1]
    8b80:	685a      	ldr	r2, [r3, #4]
    8b82:	2107      	movs	r1, #7
    8b84:	438a      	bics	r2, r1
    8b86:	605a      	str	r2, [r3, #4]
    8b88:	46c0      	nop			; (mov r8, r8)
	}
	//baud
	val = cfg_1.sock_rs485[n_port].baud;
    8b8a:	1dfb      	adds	r3, r7, #7
    8b8c:	781a      	ldrb	r2, [r3, #0]
    8b8e:	49b3      	ldr	r1, [pc, #716]	; (8e5c <init+0x816>)
    8b90:	0013      	movs	r3, r2
    8b92:	005b      	lsls	r3, r3, #1
    8b94:	189b      	adds	r3, r3, r2
    8b96:	009b      	lsls	r3, r3, #2
    8b98:	189b      	adds	r3, r3, r2
    8b9a:	18cb      	adds	r3, r1, r3
    8b9c:	3330      	adds	r3, #48	; 0x30
    8b9e:	7a5a      	ldrb	r2, [r3, #9]
    8ba0:	7a99      	ldrb	r1, [r3, #10]
    8ba2:	0209      	lsls	r1, r1, #8
    8ba4:	430a      	orrs	r2, r1
    8ba6:	7ad9      	ldrb	r1, [r3, #11]
    8ba8:	0409      	lsls	r1, r1, #16
    8baa:	430a      	orrs	r2, r1
    8bac:	7b1b      	ldrb	r3, [r3, #12]
    8bae:	061b      	lsls	r3, r3, #24
    8bb0:	4313      	orrs	r3, r2
    8bb2:	61fb      	str	r3, [r7, #28]
	if ( !((val == 600) || (val == 1200) || (val == 2400) || (val == 4800) || (val == 9600) || (val == 19200) || (val == 38400) || (val == 57600) || (val == 115200) || (val == 128000) || (val == 256000)) ) {val = 38400;}
    8bb4:	69fa      	ldr	r2, [r7, #28]
    8bb6:	2396      	movs	r3, #150	; 0x96
    8bb8:	009b      	lsls	r3, r3, #2
    8bba:	429a      	cmp	r2, r3
    8bbc:	d034      	beq.n	8c28 <init+0x5e2>
    8bbe:	69fa      	ldr	r2, [r7, #28]
    8bc0:	2396      	movs	r3, #150	; 0x96
    8bc2:	00db      	lsls	r3, r3, #3
    8bc4:	429a      	cmp	r2, r3
    8bc6:	d02f      	beq.n	8c28 <init+0x5e2>
    8bc8:	69fa      	ldr	r2, [r7, #28]
    8bca:	2396      	movs	r3, #150	; 0x96
    8bcc:	011b      	lsls	r3, r3, #4
    8bce:	429a      	cmp	r2, r3
    8bd0:	d02a      	beq.n	8c28 <init+0x5e2>
    8bd2:	69fa      	ldr	r2, [r7, #28]
    8bd4:	2396      	movs	r3, #150	; 0x96
    8bd6:	015b      	lsls	r3, r3, #5
    8bd8:	429a      	cmp	r2, r3
    8bda:	d025      	beq.n	8c28 <init+0x5e2>
    8bdc:	69fa      	ldr	r2, [r7, #28]
    8bde:	2396      	movs	r3, #150	; 0x96
    8be0:	019b      	lsls	r3, r3, #6
    8be2:	429a      	cmp	r2, r3
    8be4:	d020      	beq.n	8c28 <init+0x5e2>
    8be6:	69fa      	ldr	r2, [r7, #28]
    8be8:	2396      	movs	r3, #150	; 0x96
    8bea:	01db      	lsls	r3, r3, #7
    8bec:	429a      	cmp	r2, r3
    8bee:	d01b      	beq.n	8c28 <init+0x5e2>
    8bf0:	69fa      	ldr	r2, [r7, #28]
    8bf2:	2396      	movs	r3, #150	; 0x96
    8bf4:	021b      	lsls	r3, r3, #8
    8bf6:	429a      	cmp	r2, r3
    8bf8:	d016      	beq.n	8c28 <init+0x5e2>
    8bfa:	69fa      	ldr	r2, [r7, #28]
    8bfc:	23e1      	movs	r3, #225	; 0xe1
    8bfe:	021b      	lsls	r3, r3, #8
    8c00:	429a      	cmp	r2, r3
    8c02:	d011      	beq.n	8c28 <init+0x5e2>
    8c04:	69fa      	ldr	r2, [r7, #28]
    8c06:	23e1      	movs	r3, #225	; 0xe1
    8c08:	025b      	lsls	r3, r3, #9
    8c0a:	429a      	cmp	r2, r3
    8c0c:	d00c      	beq.n	8c28 <init+0x5e2>
    8c0e:	69fa      	ldr	r2, [r7, #28]
    8c10:	23fa      	movs	r3, #250	; 0xfa
    8c12:	025b      	lsls	r3, r3, #9
    8c14:	429a      	cmp	r2, r3
    8c16:	d007      	beq.n	8c28 <init+0x5e2>
    8c18:	69fa      	ldr	r2, [r7, #28]
    8c1a:	23fa      	movs	r3, #250	; 0xfa
    8c1c:	029b      	lsls	r3, r3, #10
    8c1e:	429a      	cmp	r2, r3
    8c20:	d002      	beq.n	8c28 <init+0x5e2>
    8c22:	2396      	movs	r3, #150	; 0x96
    8c24:	021b      	lsls	r3, r3, #8
    8c26:	61fb      	str	r3, [r7, #28]
	port[n_port].sercom->USART.BAUD.bit.BAUD = 65536.0f*(1.0f-(8.0*(float)(val))/(float)(PROC_HERZ)); 
    8c28:	1dfb      	adds	r3, r7, #7
    8c2a:	781a      	ldrb	r2, [r3, #0]
    8c2c:	498a      	ldr	r1, [pc, #552]	; (8e58 <init+0x812>)
    8c2e:	0013      	movs	r3, r2
    8c30:	00db      	lsls	r3, r3, #3
    8c32:	189b      	adds	r3, r3, r2
    8c34:	019b      	lsls	r3, r3, #6
    8c36:	585c      	ldr	r4, [r3, r1]
    8c38:	4b89      	ldr	r3, [pc, #548]	; (8e60 <init+0x81a>)
    8c3a:	69f8      	ldr	r0, [r7, #28]
    8c3c:	4798      	blx	r3
    8c3e:	1c02      	adds	r2, r0, #0
    8c40:	4b88      	ldr	r3, [pc, #544]	; (8e64 <init+0x81e>)
    8c42:	1c10      	adds	r0, r2, #0
    8c44:	4798      	blx	r3
    8c46:	4d88      	ldr	r5, [pc, #544]	; (8e68 <init+0x822>)
    8c48:	2200      	movs	r2, #0
    8c4a:	4b88      	ldr	r3, [pc, #544]	; (8e6c <init+0x826>)
    8c4c:	47a8      	blx	r5
    8c4e:	0002      	movs	r2, r0
    8c50:	000b      	movs	r3, r1
    8c52:	0010      	movs	r0, r2
    8c54:	0019      	movs	r1, r3
    8c56:	4d86      	ldr	r5, [pc, #536]	; (8e70 <init+0x82a>)
    8c58:	2200      	movs	r2, #0
    8c5a:	4b86      	ldr	r3, [pc, #536]	; (8e74 <init+0x82e>)
    8c5c:	47a8      	blx	r5
    8c5e:	0002      	movs	r2, r0
    8c60:	000b      	movs	r3, r1
    8c62:	4d85      	ldr	r5, [pc, #532]	; (8e78 <init+0x832>)
    8c64:	2000      	movs	r0, #0
    8c66:	4985      	ldr	r1, [pc, #532]	; (8e7c <init+0x836>)
    8c68:	47a8      	blx	r5
    8c6a:	0002      	movs	r2, r0
    8c6c:	000b      	movs	r3, r1
    8c6e:	0010      	movs	r0, r2
    8c70:	0019      	movs	r1, r3
    8c72:	4d7d      	ldr	r5, [pc, #500]	; (8e68 <init+0x822>)
    8c74:	2200      	movs	r2, #0
    8c76:	4b82      	ldr	r3, [pc, #520]	; (8e80 <init+0x83a>)
    8c78:	47a8      	blx	r5
    8c7a:	0002      	movs	r2, r0
    8c7c:	000b      	movs	r3, r1
    8c7e:	0011      	movs	r1, r2
    8c80:	001a      	movs	r2, r3
    8c82:	4b80      	ldr	r3, [pc, #512]	; (8e84 <init+0x83e>)
    8c84:	0008      	movs	r0, r1
    8c86:	0011      	movs	r1, r2
    8c88:	4798      	blx	r3
    8c8a:	0003      	movs	r3, r0
    8c8c:	b29b      	uxth	r3, r3
    8c8e:	81a3      	strh	r3, [r4, #12]
	//cfg settings end

	port[n_port].sercom->USART.INTENSET.bit.RXC  =0x01; // Bit 2 RXC: Receive Complete Interrupt Enable
    8c90:	1dfb      	adds	r3, r7, #7
    8c92:	781a      	ldrb	r2, [r3, #0]
    8c94:	4970      	ldr	r1, [pc, #448]	; (8e58 <init+0x812>)
    8c96:	0013      	movs	r3, r2
    8c98:	00db      	lsls	r3, r3, #3
    8c9a:	189b      	adds	r3, r3, r2
    8c9c:	019b      	lsls	r3, r3, #6
    8c9e:	585a      	ldr	r2, [r3, r1]
    8ca0:	7d93      	ldrb	r3, [r2, #22]
    8ca2:	2104      	movs	r1, #4
    8ca4:	430b      	orrs	r3, r1
    8ca6:	7593      	strb	r3, [r2, #22]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8ca8:	46c0      	nop			; (mov r8, r8)
    8caa:	1dfb      	adds	r3, r7, #7
    8cac:	781a      	ldrb	r2, [r3, #0]
    8cae:	496a      	ldr	r1, [pc, #424]	; (8e58 <init+0x812>)
    8cb0:	0013      	movs	r3, r2
    8cb2:	00db      	lsls	r3, r3, #3
    8cb4:	189b      	adds	r3, r3, r2
    8cb6:	019b      	lsls	r3, r3, #6
    8cb8:	585b      	ldr	r3, [r3, r1]
    8cba:	69db      	ldr	r3, [r3, #28]
    8cbc:	2207      	movs	r2, #7
    8cbe:	4013      	ands	r3, r2
    8cc0:	d1f3      	bne.n	8caa <init+0x664>
	port[n_port].sercom->USART.CTRLB.bit.RXEN=0x01;     // Bit 17 - RXEN: Receiver Enable (11: The receiver is enabled or will be enabled when the USART is enabled)
    8cc2:	1dfb      	adds	r3, r7, #7
    8cc4:	781a      	ldrb	r2, [r3, #0]
    8cc6:	4964      	ldr	r1, [pc, #400]	; (8e58 <init+0x812>)
    8cc8:	0013      	movs	r3, r2
    8cca:	00db      	lsls	r3, r3, #3
    8ccc:	189b      	adds	r3, r3, r2
    8cce:	019b      	lsls	r3, r3, #6
    8cd0:	585b      	ldr	r3, [r3, r1]
    8cd2:	685a      	ldr	r2, [r3, #4]
    8cd4:	2180      	movs	r1, #128	; 0x80
    8cd6:	0289      	lsls	r1, r1, #10
    8cd8:	430a      	orrs	r2, r1
    8cda:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8cdc:	46c0      	nop			; (mov r8, r8)
    8cde:	1dfb      	adds	r3, r7, #7
    8ce0:	781a      	ldrb	r2, [r3, #0]
    8ce2:	495d      	ldr	r1, [pc, #372]	; (8e58 <init+0x812>)
    8ce4:	0013      	movs	r3, r2
    8ce6:	00db      	lsls	r3, r3, #3
    8ce8:	189b      	adds	r3, r3, r2
    8cea:	019b      	lsls	r3, r3, #6
    8cec:	585b      	ldr	r3, [r3, r1]
    8cee:	69db      	ldr	r3, [r3, #28]
    8cf0:	2207      	movs	r2, #7
    8cf2:	4013      	ands	r3, r2
    8cf4:	d1f3      	bne.n	8cde <init+0x698>
	port[n_port].sercom->USART.CTRLB.bit.TXEN=0x01;     // Bit 16 - TXEN: Transmitter Enable (1: The transmitter is enabled or will be enabled when the USART is enabled.)
    8cf6:	1dfb      	adds	r3, r7, #7
    8cf8:	781a      	ldrb	r2, [r3, #0]
    8cfa:	4957      	ldr	r1, [pc, #348]	; (8e58 <init+0x812>)
    8cfc:	0013      	movs	r3, r2
    8cfe:	00db      	lsls	r3, r3, #3
    8d00:	189b      	adds	r3, r3, r2
    8d02:	019b      	lsls	r3, r3, #6
    8d04:	585b      	ldr	r3, [r3, r1]
    8d06:	685a      	ldr	r2, [r3, #4]
    8d08:	2180      	movs	r1, #128	; 0x80
    8d0a:	0249      	lsls	r1, r1, #9
    8d0c:	430a      	orrs	r2, r1
    8d0e:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d10:	46c0      	nop			; (mov r8, r8)
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	781a      	ldrb	r2, [r3, #0]
    8d16:	4950      	ldr	r1, [pc, #320]	; (8e58 <init+0x812>)
    8d18:	0013      	movs	r3, r2
    8d1a:	00db      	lsls	r3, r3, #3
    8d1c:	189b      	adds	r3, r3, r2
    8d1e:	019b      	lsls	r3, r3, #6
    8d20:	585b      	ldr	r3, [r3, r1]
    8d22:	69db      	ldr	r3, [r3, #28]
    8d24:	2207      	movs	r2, #7
    8d26:	4013      	ands	r3, r2
    8d28:	d1f3      	bne.n	8d12 <init+0x6cc>
	port[n_port].sercom->USART.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    8d2a:	1dfb      	adds	r3, r7, #7
    8d2c:	781a      	ldrb	r2, [r3, #0]
    8d2e:	494a      	ldr	r1, [pc, #296]	; (8e58 <init+0x812>)
    8d30:	0013      	movs	r3, r2
    8d32:	00db      	lsls	r3, r3, #3
    8d34:	189b      	adds	r3, r3, r2
    8d36:	019b      	lsls	r3, r3, #6
    8d38:	585b      	ldr	r3, [r3, r1]
    8d3a:	681a      	ldr	r2, [r3, #0]
    8d3c:	2102      	movs	r1, #2
    8d3e:	430a      	orrs	r2, r1
    8d40:	601a      	str	r2, [r3, #0]

	tout = (double)1000000 / (double)cfg_1.sock_rs485[n_port].baud;
    8d42:	1dfb      	adds	r3, r7, #7
    8d44:	781a      	ldrb	r2, [r3, #0]
    8d46:	4945      	ldr	r1, [pc, #276]	; (8e5c <init+0x816>)
    8d48:	0013      	movs	r3, r2
    8d4a:	005b      	lsls	r3, r3, #1
    8d4c:	189b      	adds	r3, r3, r2
    8d4e:	009b      	lsls	r3, r3, #2
    8d50:	189b      	adds	r3, r3, r2
    8d52:	18cb      	adds	r3, r1, r3
    8d54:	3330      	adds	r3, #48	; 0x30
    8d56:	7a5a      	ldrb	r2, [r3, #9]
    8d58:	7a99      	ldrb	r1, [r3, #10]
    8d5a:	0209      	lsls	r1, r1, #8
    8d5c:	430a      	orrs	r2, r1
    8d5e:	7ad9      	ldrb	r1, [r3, #11]
    8d60:	0409      	lsls	r1, r1, #16
    8d62:	430a      	orrs	r2, r1
    8d64:	7b1b      	ldrb	r3, [r3, #12]
    8d66:	061b      	lsls	r3, r3, #24
    8d68:	4313      	orrs	r3, r2
    8d6a:	001a      	movs	r2, r3
    8d6c:	4b46      	ldr	r3, [pc, #280]	; (8e88 <init+0x842>)
    8d6e:	0010      	movs	r0, r2
    8d70:	4798      	blx	r3
    8d72:	0002      	movs	r2, r0
    8d74:	000b      	movs	r3, r1
    8d76:	4c3e      	ldr	r4, [pc, #248]	; (8e70 <init+0x82a>)
    8d78:	2000      	movs	r0, #0
    8d7a:	4944      	ldr	r1, [pc, #272]	; (8e8c <init+0x846>)
    8d7c:	47a0      	blx	r4
    8d7e:	0003      	movs	r3, r0
    8d80:	000c      	movs	r4, r1
    8d82:	613b      	str	r3, [r7, #16]
    8d84:	617c      	str	r4, [r7, #20]
	tout = tout * bsize;
    8d86:	4c38      	ldr	r4, [pc, #224]	; (8e68 <init+0x822>)
    8d88:	68ba      	ldr	r2, [r7, #8]
    8d8a:	68fb      	ldr	r3, [r7, #12]
    8d8c:	6938      	ldr	r0, [r7, #16]
    8d8e:	6979      	ldr	r1, [r7, #20]
    8d90:	47a0      	blx	r4
    8d92:	0003      	movs	r3, r0
    8d94:	000c      	movs	r4, r1
    8d96:	613b      	str	r3, [r7, #16]
    8d98:	617c      	str	r4, [r7, #20]
	tout = tout * 4;
    8d9a:	4c33      	ldr	r4, [pc, #204]	; (8e68 <init+0x822>)
    8d9c:	2200      	movs	r2, #0
    8d9e:	4b3c      	ldr	r3, [pc, #240]	; (8e90 <init+0x84a>)
    8da0:	6938      	ldr	r0, [r7, #16]
    8da2:	6979      	ldr	r1, [r7, #20]
    8da4:	47a0      	blx	r4
    8da6:	0003      	movs	r3, r0
    8da8:	000c      	movs	r4, r1
    8daa:	613b      	str	r3, [r7, #16]
    8dac:	617c      	str	r4, [r7, #20]
	tout = tout / 100;
    8dae:	4c30      	ldr	r4, [pc, #192]	; (8e70 <init+0x82a>)
    8db0:	2200      	movs	r2, #0
    8db2:	4b38      	ldr	r3, [pc, #224]	; (8e94 <init+0x84e>)
    8db4:	6938      	ldr	r0, [r7, #16]
    8db6:	6979      	ldr	r1, [r7, #20]
    8db8:	47a0      	blx	r4
    8dba:	0003      	movs	r3, r0
    8dbc:	000c      	movs	r4, r1
    8dbe:	613b      	str	r3, [r7, #16]
    8dc0:	617c      	str	r4, [r7, #20]
	port[n_port].rtout = tout;
    8dc2:	1dfb      	adds	r3, r7, #7
    8dc4:	781c      	ldrb	r4, [r3, #0]
    8dc6:	4b2f      	ldr	r3, [pc, #188]	; (8e84 <init+0x83e>)
    8dc8:	6938      	ldr	r0, [r7, #16]
    8dca:	6979      	ldr	r1, [r7, #20]
    8dcc:	4798      	blx	r3
    8dce:	0003      	movs	r3, r0
    8dd0:	b298      	uxth	r0, r3
    8dd2:	4921      	ldr	r1, [pc, #132]	; (8e58 <init+0x812>)
    8dd4:	2384      	movs	r3, #132	; 0x84
    8dd6:	009a      	lsls	r2, r3, #2
    8dd8:	0023      	movs	r3, r4
    8dda:	00db      	lsls	r3, r3, #3
    8ddc:	191b      	adds	r3, r3, r4
    8dde:	019b      	lsls	r3, r3, #6
    8de0:	18cb      	adds	r3, r1, r3
    8de2:	189b      	adds	r3, r3, r2
    8de4:	1c02      	adds	r2, r0, #0
    8de6:	801a      	strh	r2, [r3, #0]

	NVIC_DisableIRQ(port[n_port].irqn_sercom);
    8de8:	1dfb      	adds	r3, r7, #7
    8dea:	781a      	ldrb	r2, [r3, #0]
    8dec:	491a      	ldr	r1, [pc, #104]	; (8e58 <init+0x812>)
    8dee:	0013      	movs	r3, r2
    8df0:	00db      	lsls	r3, r3, #3
    8df2:	189b      	adds	r3, r3, r2
    8df4:	019b      	lsls	r3, r3, #6
    8df6:	18cb      	adds	r3, r1, r3
    8df8:	3308      	adds	r3, #8
    8dfa:	781b      	ldrb	r3, [r3, #0]
    8dfc:	b2db      	uxtb	r3, r3
    8dfe:	b25b      	sxtb	r3, r3
    8e00:	0018      	movs	r0, r3
    8e02:	f7ff fb79 	bl	84f8 <__NVIC_DisableIRQ>
	NVIC_SetPriority(port[n_port].irqn_sercom, 1);
    8e06:	1dfb      	adds	r3, r7, #7
    8e08:	781a      	ldrb	r2, [r3, #0]
    8e0a:	4913      	ldr	r1, [pc, #76]	; (8e58 <init+0x812>)
    8e0c:	0013      	movs	r3, r2
    8e0e:	00db      	lsls	r3, r3, #3
    8e10:	189b      	adds	r3, r3, r2
    8e12:	019b      	lsls	r3, r3, #6
    8e14:	18cb      	adds	r3, r1, r3
    8e16:	3308      	adds	r3, #8
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	b2db      	uxtb	r3, r3
    8e1c:	b25b      	sxtb	r3, r3
    8e1e:	2101      	movs	r1, #1
    8e20:	0018      	movs	r0, r3
    8e22:	f7ff fb89 	bl	8538 <__NVIC_SetPriority>
	NVIC_EnableIRQ(port[n_port].irqn_sercom);
    8e26:	1dfb      	adds	r3, r7, #7
    8e28:	781a      	ldrb	r2, [r3, #0]
    8e2a:	490b      	ldr	r1, [pc, #44]	; (8e58 <init+0x812>)
    8e2c:	0013      	movs	r3, r2
    8e2e:	00db      	lsls	r3, r3, #3
    8e30:	189b      	adds	r3, r3, r2
    8e32:	019b      	lsls	r3, r3, #6
    8e34:	18cb      	adds	r3, r1, r3
    8e36:	3308      	adds	r3, #8
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	b2db      	uxtb	r3, r3
    8e3c:	b25b      	sxtb	r3, r3
    8e3e:	0018      	movs	r0, r3
    8e40:	f7ff fb40 	bl	84c4 <__NVIC_EnableIRQ>
	pin_ctrl(RTS, n_port, CLR);
    8e44:	1dfb      	adds	r3, r7, #7
    8e46:	781b      	ldrb	r3, [r3, #0]
    8e48:	2202      	movs	r2, #2
    8e4a:	0019      	movs	r1, r3
    8e4c:	2000      	movs	r0, #0
    8e4e:	4b12      	ldr	r3, [pc, #72]	; (8e98 <init+0x852>)
    8e50:	4798      	blx	r3
}
    8e52:	46bd      	mov	sp, r7
    8e54:	b008      	add	sp, #32
    8e56:	bdb0      	pop	{r4, r5, r7, pc}
    8e58:	200031fc 	.word	0x200031fc
    8e5c:	20003dc4 	.word	0x20003dc4
    8e60:	0000b145 	.word	0x0000b145
    8e64:	0000c43d 	.word	0x0000c43d
    8e68:	0000b839 	.word	0x0000b839
    8e6c:	40200000 	.word	0x40200000
    8e70:	0000b1d1 	.word	0x0000b1d1
    8e74:	4186e360 	.word	0x4186e360
    8e78:	0000bd39 	.word	0x0000bd39
    8e7c:	3ff00000 	.word	0x3ff00000
    8e80:	40f00000 	.word	0x40f00000
    8e84:	0000b109 	.word	0x0000b109
    8e88:	0000c3cd 	.word	0x0000c3cd
    8e8c:	412e8480 	.word	0x412e8480
    8e90:	40100000 	.word	0x40100000
    8e94:	40590000 	.word	0x40590000
    8e98:	00006d31 	.word	0x00006d31

00008e9c <usart_write>:

WORD usart_write(BYTE n_port, BYTE* wbuf,WORD size)
{
    8e9c:	b590      	push	{r4, r7, lr}
    8e9e:	b083      	sub	sp, #12
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	6039      	str	r1, [r7, #0]
    8ea4:	0011      	movs	r1, r2
    8ea6:	1dfb      	adds	r3, r7, #7
    8ea8:	1c02      	adds	r2, r0, #0
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	1d3b      	adds	r3, r7, #4
    8eae:	1c0a      	adds	r2, r1, #0
    8eb0:	801a      	strh	r2, [r3, #0]
	if(size == 0) { return(0); }
    8eb2:	1d3b      	adds	r3, r7, #4
    8eb4:	881b      	ldrh	r3, [r3, #0]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d101      	bne.n	8ebe <usart_write+0x22>
    8eba:	2300      	movs	r3, #0
    8ebc:	e06c      	b.n	8f98 <usart_write+0xfc>
	pin_ctrl(RTS, n_port, SET);
    8ebe:	1dfb      	adds	r3, r7, #7
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	2201      	movs	r2, #1
    8ec4:	0019      	movs	r1, r3
    8ec6:	2000      	movs	r0, #0
    8ec8:	4b35      	ldr	r3, [pc, #212]	; (8fa0 <usart_write+0x104>)
    8eca:	4798      	blx	r3
	
	if(size > USART_BUF_SIZE) { size = USART_BUF_SIZE; }
    8ecc:	1d3b      	adds	r3, r7, #4
    8ece:	881a      	ldrh	r2, [r3, #0]
    8ed0:	2380      	movs	r3, #128	; 0x80
    8ed2:	005b      	lsls	r3, r3, #1
    8ed4:	429a      	cmp	r2, r3
    8ed6:	d903      	bls.n	8ee0 <usart_write+0x44>
    8ed8:	1d3b      	adds	r3, r7, #4
    8eda:	2280      	movs	r2, #128	; 0x80
    8edc:	0052      	lsls	r2, r2, #1
    8ede:	801a      	strh	r2, [r3, #0]
	memcpy(port[n_port].wbuf,wbuf,size);
    8ee0:	1dfb      	adds	r3, r7, #7
    8ee2:	781a      	ldrb	r2, [r3, #0]
    8ee4:	0013      	movs	r3, r2
    8ee6:	00db      	lsls	r3, r3, #3
    8ee8:	189b      	adds	r3, r3, r2
    8eea:	019b      	lsls	r3, r3, #6
    8eec:	3308      	adds	r3, #8
    8eee:	001a      	movs	r2, r3
    8ef0:	4b2c      	ldr	r3, [pc, #176]	; (8fa4 <usart_write+0x108>)
    8ef2:	18d3      	adds	r3, r2, r3
    8ef4:	1c58      	adds	r0, r3, #1
    8ef6:	1d3b      	adds	r3, r7, #4
    8ef8:	881a      	ldrh	r2, [r3, #0]
    8efa:	683b      	ldr	r3, [r7, #0]
    8efc:	0019      	movs	r1, r3
    8efe:	4b2a      	ldr	r3, [pc, #168]	; (8fa8 <usart_write+0x10c>)
    8f00:	4798      	blx	r3
	port[n_port].wn = size;
    8f02:	1dfb      	adds	r3, r7, #7
    8f04:	781a      	ldrb	r2, [r3, #0]
    8f06:	4927      	ldr	r1, [pc, #156]	; (8fa4 <usart_write+0x108>)
    8f08:	4828      	ldr	r0, [pc, #160]	; (8fac <usart_write+0x110>)
    8f0a:	0013      	movs	r3, r2
    8f0c:	00db      	lsls	r3, r3, #3
    8f0e:	189b      	adds	r3, r3, r2
    8f10:	019b      	lsls	r3, r3, #6
    8f12:	18cb      	adds	r3, r1, r3
    8f14:	181b      	adds	r3, r3, r0
    8f16:	1d3a      	adds	r2, r7, #4
    8f18:	8812      	ldrh	r2, [r2, #0]
    8f1a:	801a      	strh	r2, [r3, #0]
	//port[n_port].wx = 1;
	port[n_port].wx = 0;
    8f1c:	1dfb      	adds	r3, r7, #7
    8f1e:	781a      	ldrb	r2, [r3, #0]
    8f20:	4820      	ldr	r0, [pc, #128]	; (8fa4 <usart_write+0x108>)
    8f22:	2383      	movs	r3, #131	; 0x83
    8f24:	0099      	lsls	r1, r3, #2
    8f26:	0013      	movs	r3, r2
    8f28:	00db      	lsls	r3, r3, #3
    8f2a:	189b      	adds	r3, r3, r2
    8f2c:	019b      	lsls	r3, r3, #6
    8f2e:	18c3      	adds	r3, r0, r3
    8f30:	185b      	adds	r3, r3, r1
    8f32:	2200      	movs	r2, #0
    8f34:	801a      	strh	r2, [r3, #0]
	//port[n_port].sercom->USART.DATA.reg=port[n_port].wbuf[0];
	port[n_port].sercom->USART.INTENCLR.bit.RXC = 1;
    8f36:	1dfb      	adds	r3, r7, #7
    8f38:	781a      	ldrb	r2, [r3, #0]
    8f3a:	491a      	ldr	r1, [pc, #104]	; (8fa4 <usart_write+0x108>)
    8f3c:	0013      	movs	r3, r2
    8f3e:	00db      	lsls	r3, r3, #3
    8f40:	189b      	adds	r3, r3, r2
    8f42:	019b      	lsls	r3, r3, #6
    8f44:	585a      	ldr	r2, [r3, r1]
    8f46:	7d13      	ldrb	r3, [r2, #20]
    8f48:	2104      	movs	r1, #4
    8f4a:	430b      	orrs	r3, r1
    8f4c:	7513      	strb	r3, [r2, #20]
	port[n_port].sercom->USART.INTENSET.bit.DRE = 1;
    8f4e:	1dfb      	adds	r3, r7, #7
    8f50:	781a      	ldrb	r2, [r3, #0]
    8f52:	4914      	ldr	r1, [pc, #80]	; (8fa4 <usart_write+0x108>)
    8f54:	0013      	movs	r3, r2
    8f56:	00db      	lsls	r3, r3, #3
    8f58:	189b      	adds	r3, r3, r2
    8f5a:	019b      	lsls	r3, r3, #6
    8f5c:	585a      	ldr	r2, [r3, r1]
    8f5e:	7d93      	ldrb	r3, [r2, #22]
    8f60:	2101      	movs	r1, #1
    8f62:	430b      	orrs	r3, r1
    8f64:	7593      	strb	r3, [r2, #22]
	port[n_port].counters.tx++;
    8f66:	1dfb      	adds	r3, r7, #7
    8f68:	781a      	ldrb	r2, [r3, #0]
    8f6a:	480e      	ldr	r0, [pc, #56]	; (8fa4 <usart_write+0x108>)
    8f6c:	238d      	movs	r3, #141	; 0x8d
    8f6e:	0099      	lsls	r1, r3, #2
    8f70:	0013      	movs	r3, r2
    8f72:	00db      	lsls	r3, r3, #3
    8f74:	189b      	adds	r3, r3, r2
    8f76:	019b      	lsls	r3, r3, #6
    8f78:	18c3      	adds	r3, r0, r3
    8f7a:	185b      	adds	r3, r3, r1
    8f7c:	681b      	ldr	r3, [r3, #0]
    8f7e:	1c59      	adds	r1, r3, #1
    8f80:	4c08      	ldr	r4, [pc, #32]	; (8fa4 <usart_write+0x108>)
    8f82:	238d      	movs	r3, #141	; 0x8d
    8f84:	0098      	lsls	r0, r3, #2
    8f86:	0013      	movs	r3, r2
    8f88:	00db      	lsls	r3, r3, #3
    8f8a:	189b      	adds	r3, r3, r2
    8f8c:	019b      	lsls	r3, r3, #6
    8f8e:	18e3      	adds	r3, r4, r3
    8f90:	181b      	adds	r3, r3, r0
    8f92:	6019      	str	r1, [r3, #0]
	return(size);
    8f94:	1d3b      	adds	r3, r7, #4
    8f96:	881b      	ldrh	r3, [r3, #0]
}
    8f98:	0018      	movs	r0, r3
    8f9a:	46bd      	mov	sp, r7
    8f9c:	b003      	add	sp, #12
    8f9e:	bd90      	pop	{r4, r7, pc}
    8fa0:	00006d31 	.word	0x00006d31
    8fa4:	200031fc 	.word	0x200031fc
    8fa8:	0000c7e1 	.word	0x0000c7e1
    8fac:	0000020a 	.word	0x0000020a

00008fb0 <usart_read>:

WORD usart_read (BYTE n_port, BYTE* rbuf,WORD size)
{
    8fb0:	b590      	push	{r4, r7, lr}
    8fb2:	b085      	sub	sp, #20
    8fb4:	af00      	add	r7, sp, #0
    8fb6:	6039      	str	r1, [r7, #0]
    8fb8:	0011      	movs	r1, r2
    8fba:	1dfb      	adds	r3, r7, #7
    8fbc:	1c02      	adds	r2, r0, #0
    8fbe:	701a      	strb	r2, [r3, #0]
    8fc0:	1d3b      	adds	r3, r7, #4
    8fc2:	1c0a      	adds	r2, r1, #0
    8fc4:	801a      	strh	r2, [r3, #0]
	WORD size_1 = 0;
    8fc6:	230e      	movs	r3, #14
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	2200      	movs	r2, #0
    8fcc:	801a      	strh	r2, [r3, #0]
	
	if(port[n_port].rn     ==       0x00)			{ port[n_port].rtime=0; return(0); }
    8fce:	1dfb      	adds	r3, r7, #7
    8fd0:	781a      	ldrb	r2, [r3, #0]
    8fd2:	4948      	ldr	r1, [pc, #288]	; (90f4 <usart_read+0x144>)
    8fd4:	4848      	ldr	r0, [pc, #288]	; (90f8 <usart_read+0x148>)
    8fd6:	0013      	movs	r3, r2
    8fd8:	00db      	lsls	r3, r3, #3
    8fda:	189b      	adds	r3, r3, r2
    8fdc:	019b      	lsls	r3, r3, #6
    8fde:	18cb      	adds	r3, r1, r3
    8fe0:	181b      	adds	r3, r3, r0
    8fe2:	881b      	ldrh	r3, [r3, #0]
    8fe4:	b29b      	uxth	r3, r3
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d10e      	bne.n	9008 <usart_read+0x58>
    8fea:	1dfb      	adds	r3, r7, #7
    8fec:	781a      	ldrb	r2, [r3, #0]
    8fee:	4841      	ldr	r0, [pc, #260]	; (90f4 <usart_read+0x144>)
    8ff0:	2385      	movs	r3, #133	; 0x85
    8ff2:	0099      	lsls	r1, r3, #2
    8ff4:	0013      	movs	r3, r2
    8ff6:	00db      	lsls	r3, r3, #3
    8ff8:	189b      	adds	r3, r3, r2
    8ffa:	019b      	lsls	r3, r3, #6
    8ffc:	18c3      	adds	r3, r0, r3
    8ffe:	185b      	adds	r3, r3, r1
    9000:	2200      	movs	r2, #0
    9002:	801a      	strh	r2, [r3, #0]
    9004:	2300      	movs	r3, #0
    9006:	e070      	b.n	90ea <usart_read+0x13a>
	if(port[n_port].rtout  >  port[n_port].rtime)	{ return(0); }
    9008:	1dfb      	adds	r3, r7, #7
    900a:	781a      	ldrb	r2, [r3, #0]
    900c:	4839      	ldr	r0, [pc, #228]	; (90f4 <usart_read+0x144>)
    900e:	2384      	movs	r3, #132	; 0x84
    9010:	0099      	lsls	r1, r3, #2
    9012:	0013      	movs	r3, r2
    9014:	00db      	lsls	r3, r3, #3
    9016:	189b      	adds	r3, r3, r2
    9018:	019b      	lsls	r3, r3, #6
    901a:	18c3      	adds	r3, r0, r3
    901c:	185b      	adds	r3, r3, r1
    901e:	881b      	ldrh	r3, [r3, #0]
    9020:	b299      	uxth	r1, r3
    9022:	1dfb      	adds	r3, r7, #7
    9024:	781a      	ldrb	r2, [r3, #0]
    9026:	4c33      	ldr	r4, [pc, #204]	; (90f4 <usart_read+0x144>)
    9028:	2385      	movs	r3, #133	; 0x85
    902a:	0098      	lsls	r0, r3, #2
    902c:	0013      	movs	r3, r2
    902e:	00db      	lsls	r3, r3, #3
    9030:	189b      	adds	r3, r3, r2
    9032:	019b      	lsls	r3, r3, #6
    9034:	18e3      	adds	r3, r4, r3
    9036:	181b      	adds	r3, r3, r0
    9038:	881b      	ldrh	r3, [r3, #0]
    903a:	b29b      	uxth	r3, r3
    903c:	4299      	cmp	r1, r3
    903e:	d901      	bls.n	9044 <usart_read+0x94>
    9040:	2300      	movs	r3, #0
    9042:	e052      	b.n	90ea <usart_read+0x13a>
		
	size_1 = port[n_port].rn; 
    9044:	1dfb      	adds	r3, r7, #7
    9046:	781a      	ldrb	r2, [r3, #0]
    9048:	230e      	movs	r3, #14
    904a:	18f9      	adds	r1, r7, r3
    904c:	4829      	ldr	r0, [pc, #164]	; (90f4 <usart_read+0x144>)
    904e:	4c2a      	ldr	r4, [pc, #168]	; (90f8 <usart_read+0x148>)
    9050:	0013      	movs	r3, r2
    9052:	00db      	lsls	r3, r3, #3
    9054:	189b      	adds	r3, r3, r2
    9056:	019b      	lsls	r3, r3, #6
    9058:	18c3      	adds	r3, r0, r3
    905a:	191b      	adds	r3, r3, r4
    905c:	881b      	ldrh	r3, [r3, #0]
    905e:	800b      	strh	r3, [r1, #0]

	if(size_1 > size) {size_1 = size;}
    9060:	230e      	movs	r3, #14
    9062:	18fa      	adds	r2, r7, r3
    9064:	1d3b      	adds	r3, r7, #4
    9066:	8812      	ldrh	r2, [r2, #0]
    9068:	881b      	ldrh	r3, [r3, #0]
    906a:	429a      	cmp	r2, r3
    906c:	d904      	bls.n	9078 <usart_read+0xc8>
    906e:	230e      	movs	r3, #14
    9070:	18fb      	adds	r3, r7, r3
    9072:	1d3a      	adds	r2, r7, #4
    9074:	8812      	ldrh	r2, [r2, #0]
    9076:	801a      	strh	r2, [r3, #0]
	
	memcpy(rbuf,port[n_port].rbuf,size_1);
    9078:	1dfb      	adds	r3, r7, #7
    907a:	781a      	ldrb	r2, [r3, #0]
    907c:	0013      	movs	r3, r2
    907e:	00db      	lsls	r3, r3, #3
    9080:	189b      	adds	r3, r3, r2
    9082:	019b      	lsls	r3, r3, #6
    9084:	3309      	adds	r3, #9
    9086:	33ff      	adds	r3, #255	; 0xff
    9088:	001a      	movs	r2, r3
    908a:	4b1a      	ldr	r3, [pc, #104]	; (90f4 <usart_read+0x144>)
    908c:	18d3      	adds	r3, r2, r3
    908e:	1c59      	adds	r1, r3, #1
    9090:	230e      	movs	r3, #14
    9092:	18fb      	adds	r3, r7, r3
    9094:	881a      	ldrh	r2, [r3, #0]
    9096:	683b      	ldr	r3, [r7, #0]
    9098:	0018      	movs	r0, r3
    909a:	4b18      	ldr	r3, [pc, #96]	; (90fc <usart_read+0x14c>)
    909c:	4798      	blx	r3
	port[n_port].rn = 0;
    909e:	1dfb      	adds	r3, r7, #7
    90a0:	781a      	ldrb	r2, [r3, #0]
    90a2:	4914      	ldr	r1, [pc, #80]	; (90f4 <usart_read+0x144>)
    90a4:	4814      	ldr	r0, [pc, #80]	; (90f8 <usart_read+0x148>)
    90a6:	0013      	movs	r3, r2
    90a8:	00db      	lsls	r3, r3, #3
    90aa:	189b      	adds	r3, r3, r2
    90ac:	019b      	lsls	r3, r3, #6
    90ae:	18cb      	adds	r3, r1, r3
    90b0:	181b      	adds	r3, r3, r0
    90b2:	2200      	movs	r2, #0
    90b4:	801a      	strh	r2, [r3, #0]
	port[n_port].counters.rx++;
    90b6:	1dfb      	adds	r3, r7, #7
    90b8:	781a      	ldrb	r2, [r3, #0]
    90ba:	480e      	ldr	r0, [pc, #56]	; (90f4 <usart_read+0x144>)
    90bc:	238e      	movs	r3, #142	; 0x8e
    90be:	0099      	lsls	r1, r3, #2
    90c0:	0013      	movs	r3, r2
    90c2:	00db      	lsls	r3, r3, #3
    90c4:	189b      	adds	r3, r3, r2
    90c6:	019b      	lsls	r3, r3, #6
    90c8:	18c3      	adds	r3, r0, r3
    90ca:	185b      	adds	r3, r3, r1
    90cc:	681b      	ldr	r3, [r3, #0]
    90ce:	1c59      	adds	r1, r3, #1
    90d0:	4c08      	ldr	r4, [pc, #32]	; (90f4 <usart_read+0x144>)
    90d2:	238e      	movs	r3, #142	; 0x8e
    90d4:	0098      	lsls	r0, r3, #2
    90d6:	0013      	movs	r3, r2
    90d8:	00db      	lsls	r3, r3, #3
    90da:	189b      	adds	r3, r3, r2
    90dc:	019b      	lsls	r3, r3, #6
    90de:	18e3      	adds	r3, r4, r3
    90e0:	181b      	adds	r3, r3, r0
    90e2:	6019      	str	r1, [r3, #0]
	return(size_1);
    90e4:	230e      	movs	r3, #14
    90e6:	18fb      	adds	r3, r7, r3
    90e8:	881b      	ldrh	r3, [r3, #0]
}
    90ea:	0018      	movs	r0, r3
    90ec:	46bd      	mov	sp, r7
    90ee:	b005      	add	sp, #20
    90f0:	bd90      	pop	{r4, r7, pc}
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	200031fc 	.word	0x200031fc
    90f8:	0000020e 	.word	0x0000020e
    90fc:	0000c7e1 	.word	0x0000c7e1

00009100 <sercom_proc>:

void sercom_proc(BYTE n_port)
{
    9100:	b5b0      	push	{r4, r5, r7, lr}
    9102:	b082      	sub	sp, #8
    9104:	af00      	add	r7, sp, #0
    9106:	0002      	movs	r2, r0
    9108:	1dfb      	adds	r3, r7, #7
    910a:	701a      	strb	r2, [r3, #0]
	if (port[n_port].sercom->USART.STATUS.bit.COLL)		{port[n_port].errors.collision++;		port[n_port].sercom->USART.STATUS.bit.COLL   = 1;}
    910c:	1dfb      	adds	r3, r7, #7
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	49c4      	ldr	r1, [pc, #784]	; (9424 <sercom_proc+0x324>)
    9112:	0013      	movs	r3, r2
    9114:	00db      	lsls	r3, r3, #3
    9116:	189b      	adds	r3, r3, r2
    9118:	019b      	lsls	r3, r3, #6
    911a:	585b      	ldr	r3, [r3, r1]
    911c:	8b5b      	ldrh	r3, [r3, #26]
    911e:	069b      	lsls	r3, r3, #26
    9120:	0fdb      	lsrs	r3, r3, #31
    9122:	b2db      	uxtb	r3, r3
    9124:	2b00      	cmp	r3, #0
    9126:	d023      	beq.n	9170 <sercom_proc+0x70>
    9128:	1dfb      	adds	r3, r7, #7
    912a:	781a      	ldrb	r2, [r3, #0]
    912c:	49bd      	ldr	r1, [pc, #756]	; (9424 <sercom_proc+0x324>)
    912e:	48be      	ldr	r0, [pc, #760]	; (9428 <sercom_proc+0x328>)
    9130:	0013      	movs	r3, r2
    9132:	00db      	lsls	r3, r3, #3
    9134:	189b      	adds	r3, r3, r2
    9136:	019b      	lsls	r3, r3, #6
    9138:	18cb      	adds	r3, r1, r3
    913a:	181b      	adds	r3, r3, r0
    913c:	881b      	ldrh	r3, [r3, #0]
    913e:	b29b      	uxth	r3, r3
    9140:	3301      	adds	r3, #1
    9142:	b29c      	uxth	r4, r3
    9144:	49b7      	ldr	r1, [pc, #732]	; (9424 <sercom_proc+0x324>)
    9146:	48b8      	ldr	r0, [pc, #736]	; (9428 <sercom_proc+0x328>)
    9148:	0013      	movs	r3, r2
    914a:	00db      	lsls	r3, r3, #3
    914c:	189b      	adds	r3, r3, r2
    914e:	019b      	lsls	r3, r3, #6
    9150:	18cb      	adds	r3, r1, r3
    9152:	181b      	adds	r3, r3, r0
    9154:	1c22      	adds	r2, r4, #0
    9156:	801a      	strh	r2, [r3, #0]
    9158:	1dfb      	adds	r3, r7, #7
    915a:	781a      	ldrb	r2, [r3, #0]
    915c:	49b1      	ldr	r1, [pc, #708]	; (9424 <sercom_proc+0x324>)
    915e:	0013      	movs	r3, r2
    9160:	00db      	lsls	r3, r3, #3
    9162:	189b      	adds	r3, r3, r2
    9164:	019b      	lsls	r3, r3, #6
    9166:	585a      	ldr	r2, [r3, r1]
    9168:	8b53      	ldrh	r3, [r2, #26]
    916a:	2120      	movs	r1, #32
    916c:	430b      	orrs	r3, r1
    916e:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.ISF)		{port[n_port].errors.synchr++;		port[n_port].sercom->USART.STATUS.bit.ISF    = 1;}
    9170:	1dfb      	adds	r3, r7, #7
    9172:	781a      	ldrb	r2, [r3, #0]
    9174:	49ab      	ldr	r1, [pc, #684]	; (9424 <sercom_proc+0x324>)
    9176:	0013      	movs	r3, r2
    9178:	00db      	lsls	r3, r3, #3
    917a:	189b      	adds	r3, r3, r2
    917c:	019b      	lsls	r3, r3, #6
    917e:	585b      	ldr	r3, [r3, r1]
    9180:	8b5b      	ldrh	r3, [r3, #26]
    9182:	06db      	lsls	r3, r3, #27
    9184:	0fdb      	lsrs	r3, r3, #31
    9186:	b2db      	uxtb	r3, r3
    9188:	2b00      	cmp	r3, #0
    918a:	d025      	beq.n	91d8 <sercom_proc+0xd8>
    918c:	1dfb      	adds	r3, r7, #7
    918e:	781a      	ldrb	r2, [r3, #0]
    9190:	48a4      	ldr	r0, [pc, #656]	; (9424 <sercom_proc+0x324>)
    9192:	238b      	movs	r3, #139	; 0x8b
    9194:	0099      	lsls	r1, r3, #2
    9196:	0013      	movs	r3, r2
    9198:	00db      	lsls	r3, r3, #3
    919a:	189b      	adds	r3, r3, r2
    919c:	019b      	lsls	r3, r3, #6
    919e:	18c3      	adds	r3, r0, r3
    91a0:	185b      	adds	r3, r3, r1
    91a2:	881b      	ldrh	r3, [r3, #0]
    91a4:	b29b      	uxth	r3, r3
    91a6:	3301      	adds	r3, #1
    91a8:	b29c      	uxth	r4, r3
    91aa:	489e      	ldr	r0, [pc, #632]	; (9424 <sercom_proc+0x324>)
    91ac:	238b      	movs	r3, #139	; 0x8b
    91ae:	0099      	lsls	r1, r3, #2
    91b0:	0013      	movs	r3, r2
    91b2:	00db      	lsls	r3, r3, #3
    91b4:	189b      	adds	r3, r3, r2
    91b6:	019b      	lsls	r3, r3, #6
    91b8:	18c3      	adds	r3, r0, r3
    91ba:	185b      	adds	r3, r3, r1
    91bc:	1c22      	adds	r2, r4, #0
    91be:	801a      	strh	r2, [r3, #0]
    91c0:	1dfb      	adds	r3, r7, #7
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	4997      	ldr	r1, [pc, #604]	; (9424 <sercom_proc+0x324>)
    91c6:	0013      	movs	r3, r2
    91c8:	00db      	lsls	r3, r3, #3
    91ca:	189b      	adds	r3, r3, r2
    91cc:	019b      	lsls	r3, r3, #6
    91ce:	585a      	ldr	r2, [r3, r1]
    91d0:	8b53      	ldrh	r3, [r2, #26]
    91d2:	2110      	movs	r1, #16
    91d4:	430b      	orrs	r3, r1
    91d6:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.BUFOVF)	{port[n_port].errors.buf_ovf++;		port[n_port].sercom->USART.STATUS.bit.BUFOVF = 1;}
    91d8:	1dfb      	adds	r3, r7, #7
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	4991      	ldr	r1, [pc, #580]	; (9424 <sercom_proc+0x324>)
    91de:	0013      	movs	r3, r2
    91e0:	00db      	lsls	r3, r3, #3
    91e2:	189b      	adds	r3, r3, r2
    91e4:	019b      	lsls	r3, r3, #6
    91e6:	585b      	ldr	r3, [r3, r1]
    91e8:	8b5b      	ldrh	r3, [r3, #26]
    91ea:	075b      	lsls	r3, r3, #29
    91ec:	0fdb      	lsrs	r3, r3, #31
    91ee:	b2db      	uxtb	r3, r3
    91f0:	2b00      	cmp	r3, #0
    91f2:	d023      	beq.n	923c <sercom_proc+0x13c>
    91f4:	1dfb      	adds	r3, r7, #7
    91f6:	781a      	ldrb	r2, [r3, #0]
    91f8:	498a      	ldr	r1, [pc, #552]	; (9424 <sercom_proc+0x324>)
    91fa:	488c      	ldr	r0, [pc, #560]	; (942c <sercom_proc+0x32c>)
    91fc:	0013      	movs	r3, r2
    91fe:	00db      	lsls	r3, r3, #3
    9200:	189b      	adds	r3, r3, r2
    9202:	019b      	lsls	r3, r3, #6
    9204:	18cb      	adds	r3, r1, r3
    9206:	181b      	adds	r3, r3, r0
    9208:	881b      	ldrh	r3, [r3, #0]
    920a:	b29b      	uxth	r3, r3
    920c:	3301      	adds	r3, #1
    920e:	b29c      	uxth	r4, r3
    9210:	4984      	ldr	r1, [pc, #528]	; (9424 <sercom_proc+0x324>)
    9212:	4886      	ldr	r0, [pc, #536]	; (942c <sercom_proc+0x32c>)
    9214:	0013      	movs	r3, r2
    9216:	00db      	lsls	r3, r3, #3
    9218:	189b      	adds	r3, r3, r2
    921a:	019b      	lsls	r3, r3, #6
    921c:	18cb      	adds	r3, r1, r3
    921e:	181b      	adds	r3, r3, r0
    9220:	1c22      	adds	r2, r4, #0
    9222:	801a      	strh	r2, [r3, #0]
    9224:	1dfb      	adds	r3, r7, #7
    9226:	781a      	ldrb	r2, [r3, #0]
    9228:	497e      	ldr	r1, [pc, #504]	; (9424 <sercom_proc+0x324>)
    922a:	0013      	movs	r3, r2
    922c:	00db      	lsls	r3, r3, #3
    922e:	189b      	adds	r3, r3, r2
    9230:	019b      	lsls	r3, r3, #6
    9232:	585a      	ldr	r2, [r3, r1]
    9234:	8b53      	ldrh	r3, [r2, #26]
    9236:	2104      	movs	r1, #4
    9238:	430b      	orrs	r3, r1
    923a:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.FERR)		{port[n_port].errors.st_bit++;		port[n_port].sercom->USART.STATUS.bit.FERR   = 1;}
    923c:	1dfb      	adds	r3, r7, #7
    923e:	781a      	ldrb	r2, [r3, #0]
    9240:	4978      	ldr	r1, [pc, #480]	; (9424 <sercom_proc+0x324>)
    9242:	0013      	movs	r3, r2
    9244:	00db      	lsls	r3, r3, #3
    9246:	189b      	adds	r3, r3, r2
    9248:	019b      	lsls	r3, r3, #6
    924a:	585b      	ldr	r3, [r3, r1]
    924c:	8b5b      	ldrh	r3, [r3, #26]
    924e:	079b      	lsls	r3, r3, #30
    9250:	0fdb      	lsrs	r3, r3, #31
    9252:	b2db      	uxtb	r3, r3
    9254:	2b00      	cmp	r3, #0
    9256:	d025      	beq.n	92a4 <sercom_proc+0x1a4>
    9258:	1dfb      	adds	r3, r7, #7
    925a:	781a      	ldrb	r2, [r3, #0]
    925c:	4871      	ldr	r0, [pc, #452]	; (9424 <sercom_proc+0x324>)
    925e:	238c      	movs	r3, #140	; 0x8c
    9260:	0099      	lsls	r1, r3, #2
    9262:	0013      	movs	r3, r2
    9264:	00db      	lsls	r3, r3, #3
    9266:	189b      	adds	r3, r3, r2
    9268:	019b      	lsls	r3, r3, #6
    926a:	18c3      	adds	r3, r0, r3
    926c:	185b      	adds	r3, r3, r1
    926e:	881b      	ldrh	r3, [r3, #0]
    9270:	b29b      	uxth	r3, r3
    9272:	3301      	adds	r3, #1
    9274:	b29c      	uxth	r4, r3
    9276:	486b      	ldr	r0, [pc, #428]	; (9424 <sercom_proc+0x324>)
    9278:	238c      	movs	r3, #140	; 0x8c
    927a:	0099      	lsls	r1, r3, #2
    927c:	0013      	movs	r3, r2
    927e:	00db      	lsls	r3, r3, #3
    9280:	189b      	adds	r3, r3, r2
    9282:	019b      	lsls	r3, r3, #6
    9284:	18c3      	adds	r3, r0, r3
    9286:	185b      	adds	r3, r3, r1
    9288:	1c22      	adds	r2, r4, #0
    928a:	801a      	strh	r2, [r3, #0]
    928c:	1dfb      	adds	r3, r7, #7
    928e:	781a      	ldrb	r2, [r3, #0]
    9290:	4964      	ldr	r1, [pc, #400]	; (9424 <sercom_proc+0x324>)
    9292:	0013      	movs	r3, r2
    9294:	00db      	lsls	r3, r3, #3
    9296:	189b      	adds	r3, r3, r2
    9298:	019b      	lsls	r3, r3, #6
    929a:	585a      	ldr	r2, [r3, r1]
    929c:	8b53      	ldrh	r3, [r2, #26]
    929e:	2102      	movs	r1, #2
    92a0:	430b      	orrs	r3, r1
    92a2:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.PERR)		{port[n_port].errors.prty++;			port[n_port].sercom->USART.STATUS.bit.PERR   = 1;}
    92a4:	1dfb      	adds	r3, r7, #7
    92a6:	781a      	ldrb	r2, [r3, #0]
    92a8:	495e      	ldr	r1, [pc, #376]	; (9424 <sercom_proc+0x324>)
    92aa:	0013      	movs	r3, r2
    92ac:	00db      	lsls	r3, r3, #3
    92ae:	189b      	adds	r3, r3, r2
    92b0:	019b      	lsls	r3, r3, #6
    92b2:	585b      	ldr	r3, [r3, r1]
    92b4:	8b5b      	ldrh	r3, [r3, #26]
    92b6:	07db      	lsls	r3, r3, #31
    92b8:	0fdb      	lsrs	r3, r3, #31
    92ba:	b2db      	uxtb	r3, r3
    92bc:	2b00      	cmp	r3, #0
    92be:	d023      	beq.n	9308 <sercom_proc+0x208>
    92c0:	1dfb      	adds	r3, r7, #7
    92c2:	781a      	ldrb	r2, [r3, #0]
    92c4:	4957      	ldr	r1, [pc, #348]	; (9424 <sercom_proc+0x324>)
    92c6:	485a      	ldr	r0, [pc, #360]	; (9430 <sercom_proc+0x330>)
    92c8:	0013      	movs	r3, r2
    92ca:	00db      	lsls	r3, r3, #3
    92cc:	189b      	adds	r3, r3, r2
    92ce:	019b      	lsls	r3, r3, #6
    92d0:	18cb      	adds	r3, r1, r3
    92d2:	181b      	adds	r3, r3, r0
    92d4:	881b      	ldrh	r3, [r3, #0]
    92d6:	b29b      	uxth	r3, r3
    92d8:	3301      	adds	r3, #1
    92da:	b29c      	uxth	r4, r3
    92dc:	4951      	ldr	r1, [pc, #324]	; (9424 <sercom_proc+0x324>)
    92de:	4854      	ldr	r0, [pc, #336]	; (9430 <sercom_proc+0x330>)
    92e0:	0013      	movs	r3, r2
    92e2:	00db      	lsls	r3, r3, #3
    92e4:	189b      	adds	r3, r3, r2
    92e6:	019b      	lsls	r3, r3, #6
    92e8:	18cb      	adds	r3, r1, r3
    92ea:	181b      	adds	r3, r3, r0
    92ec:	1c22      	adds	r2, r4, #0
    92ee:	801a      	strh	r2, [r3, #0]
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781a      	ldrb	r2, [r3, #0]
    92f4:	494b      	ldr	r1, [pc, #300]	; (9424 <sercom_proc+0x324>)
    92f6:	0013      	movs	r3, r2
    92f8:	00db      	lsls	r3, r3, #3
    92fa:	189b      	adds	r3, r3, r2
    92fc:	019b      	lsls	r3, r3, #6
    92fe:	585a      	ldr	r2, [r3, r1]
    9300:	8b53      	ldrh	r3, [r2, #26]
    9302:	2101      	movs	r1, #1
    9304:	430b      	orrs	r3, r1
    9306:	8353      	strh	r3, [r2, #26]
		
	if (port[n_port].sercom->USART.INTFLAG.bit.RXC)
    9308:	1dfb      	adds	r3, r7, #7
    930a:	781a      	ldrb	r2, [r3, #0]
    930c:	4945      	ldr	r1, [pc, #276]	; (9424 <sercom_proc+0x324>)
    930e:	0013      	movs	r3, r2
    9310:	00db      	lsls	r3, r3, #3
    9312:	189b      	adds	r3, r3, r2
    9314:	019b      	lsls	r3, r3, #6
    9316:	585b      	ldr	r3, [r3, r1]
    9318:	7e1b      	ldrb	r3, [r3, #24]
    931a:	075b      	lsls	r3, r3, #29
    931c:	0fdb      	lsrs	r3, r3, #31
    931e:	b2db      	uxtb	r3, r3
    9320:	2b00      	cmp	r3, #0
    9322:	d100      	bne.n	9326 <sercom_proc+0x226>
    9324:	e08a      	b.n	943c <sercom_proc+0x33c>
	{
		port[n_port].rxc++;
    9326:	1dfb      	adds	r3, r7, #7
    9328:	781a      	ldrb	r2, [r3, #0]
    932a:	493e      	ldr	r1, [pc, #248]	; (9424 <sercom_proc+0x324>)
    932c:	4841      	ldr	r0, [pc, #260]	; (9434 <sercom_proc+0x334>)
    932e:	0013      	movs	r3, r2
    9330:	00db      	lsls	r3, r3, #3
    9332:	189b      	adds	r3, r3, r2
    9334:	019b      	lsls	r3, r3, #6
    9336:	18cb      	adds	r3, r1, r3
    9338:	181b      	adds	r3, r3, r0
    933a:	881b      	ldrh	r3, [r3, #0]
    933c:	b29b      	uxth	r3, r3
    933e:	3301      	adds	r3, #1
    9340:	b29c      	uxth	r4, r3
    9342:	4938      	ldr	r1, [pc, #224]	; (9424 <sercom_proc+0x324>)
    9344:	483b      	ldr	r0, [pc, #236]	; (9434 <sercom_proc+0x334>)
    9346:	0013      	movs	r3, r2
    9348:	00db      	lsls	r3, r3, #3
    934a:	189b      	adds	r3, r3, r2
    934c:	019b      	lsls	r3, r3, #6
    934e:	18cb      	adds	r3, r1, r3
    9350:	181b      	adds	r3, r3, r0
    9352:	1c22      	adds	r2, r4, #0
    9354:	801a      	strh	r2, [r3, #0]
		if(port[n_port].rn >= USART_BUF_SIZE){port[n_port].rn = 0;}
    9356:	1dfb      	adds	r3, r7, #7
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	4932      	ldr	r1, [pc, #200]	; (9424 <sercom_proc+0x324>)
    935c:	4836      	ldr	r0, [pc, #216]	; (9438 <sercom_proc+0x338>)
    935e:	0013      	movs	r3, r2
    9360:	00db      	lsls	r3, r3, #3
    9362:	189b      	adds	r3, r3, r2
    9364:	019b      	lsls	r3, r3, #6
    9366:	18cb      	adds	r3, r1, r3
    9368:	181b      	adds	r3, r3, r0
    936a:	881b      	ldrh	r3, [r3, #0]
    936c:	b29b      	uxth	r3, r3
    936e:	2bff      	cmp	r3, #255	; 0xff
    9370:	d90b      	bls.n	938a <sercom_proc+0x28a>
    9372:	1dfb      	adds	r3, r7, #7
    9374:	781a      	ldrb	r2, [r3, #0]
    9376:	492b      	ldr	r1, [pc, #172]	; (9424 <sercom_proc+0x324>)
    9378:	482f      	ldr	r0, [pc, #188]	; (9438 <sercom_proc+0x338>)
    937a:	0013      	movs	r3, r2
    937c:	00db      	lsls	r3, r3, #3
    937e:	189b      	adds	r3, r3, r2
    9380:	019b      	lsls	r3, r3, #6
    9382:	18cb      	adds	r3, r1, r3
    9384:	181b      	adds	r3, r3, r0
    9386:	2200      	movs	r2, #0
    9388:	801a      	strh	r2, [r3, #0]
		port[n_port].rbuf[port[n_port].rn] = port[n_port].sercom->USART.DATA.reg;
    938a:	1dfb      	adds	r3, r7, #7
    938c:	781a      	ldrb	r2, [r3, #0]
    938e:	1dfb      	adds	r3, r7, #7
    9390:	7819      	ldrb	r1, [r3, #0]
    9392:	4824      	ldr	r0, [pc, #144]	; (9424 <sercom_proc+0x324>)
    9394:	4c28      	ldr	r4, [pc, #160]	; (9438 <sercom_proc+0x338>)
    9396:	000b      	movs	r3, r1
    9398:	00db      	lsls	r3, r3, #3
    939a:	185b      	adds	r3, r3, r1
    939c:	019b      	lsls	r3, r3, #6
    939e:	18c3      	adds	r3, r0, r3
    93a0:	191b      	adds	r3, r3, r4
    93a2:	881b      	ldrh	r3, [r3, #0]
    93a4:	b29b      	uxth	r3, r3
    93a6:	001d      	movs	r5, r3
    93a8:	1dfb      	adds	r3, r7, #7
    93aa:	7819      	ldrb	r1, [r3, #0]
    93ac:	481d      	ldr	r0, [pc, #116]	; (9424 <sercom_proc+0x324>)
    93ae:	000b      	movs	r3, r1
    93b0:	00db      	lsls	r3, r3, #3
    93b2:	185b      	adds	r3, r3, r1
    93b4:	019b      	lsls	r3, r3, #6
    93b6:	581b      	ldr	r3, [r3, r0]
    93b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93ba:	b29b      	uxth	r3, r3
    93bc:	b2dc      	uxtb	r4, r3
    93be:	4819      	ldr	r0, [pc, #100]	; (9424 <sercom_proc+0x324>)
    93c0:	230a      	movs	r3, #10
    93c2:	33ff      	adds	r3, #255	; 0xff
    93c4:	0019      	movs	r1, r3
    93c6:	0013      	movs	r3, r2
    93c8:	00db      	lsls	r3, r3, #3
    93ca:	189b      	adds	r3, r3, r2
    93cc:	019b      	lsls	r3, r3, #6
    93ce:	18c3      	adds	r3, r0, r3
    93d0:	195b      	adds	r3, r3, r5
    93d2:	185b      	adds	r3, r3, r1
    93d4:	1c22      	adds	r2, r4, #0
    93d6:	701a      	strb	r2, [r3, #0]
		port[n_port].rn++;
    93d8:	1dfb      	adds	r3, r7, #7
    93da:	781a      	ldrb	r2, [r3, #0]
    93dc:	4911      	ldr	r1, [pc, #68]	; (9424 <sercom_proc+0x324>)
    93de:	4816      	ldr	r0, [pc, #88]	; (9438 <sercom_proc+0x338>)
    93e0:	0013      	movs	r3, r2
    93e2:	00db      	lsls	r3, r3, #3
    93e4:	189b      	adds	r3, r3, r2
    93e6:	019b      	lsls	r3, r3, #6
    93e8:	18cb      	adds	r3, r1, r3
    93ea:	181b      	adds	r3, r3, r0
    93ec:	881b      	ldrh	r3, [r3, #0]
    93ee:	b29b      	uxth	r3, r3
    93f0:	3301      	adds	r3, #1
    93f2:	b29c      	uxth	r4, r3
    93f4:	490b      	ldr	r1, [pc, #44]	; (9424 <sercom_proc+0x324>)
    93f6:	4810      	ldr	r0, [pc, #64]	; (9438 <sercom_proc+0x338>)
    93f8:	0013      	movs	r3, r2
    93fa:	00db      	lsls	r3, r3, #3
    93fc:	189b      	adds	r3, r3, r2
    93fe:	019b      	lsls	r3, r3, #6
    9400:	18cb      	adds	r3, r1, r3
    9402:	181b      	adds	r3, r3, r0
    9404:	1c22      	adds	r2, r4, #0
    9406:	801a      	strh	r2, [r3, #0]
		port[n_port].rtime = 0;
    9408:	1dfb      	adds	r3, r7, #7
    940a:	781a      	ldrb	r2, [r3, #0]
    940c:	4805      	ldr	r0, [pc, #20]	; (9424 <sercom_proc+0x324>)
    940e:	2385      	movs	r3, #133	; 0x85
    9410:	0099      	lsls	r1, r3, #2
    9412:	0013      	movs	r3, r2
    9414:	00db      	lsls	r3, r3, #3
    9416:	189b      	adds	r3, r3, r2
    9418:	019b      	lsls	r3, r3, #6
    941a:	18c3      	adds	r3, r0, r3
    941c:	185b      	adds	r3, r3, r1
    941e:	2200      	movs	r2, #0
    9420:	801a      	strh	r2, [r3, #0]
		return;
    9422:	e0fb      	b.n	961c <sercom_proc+0x51c>
    9424:	200031fc 	.word	0x200031fc
    9428:	0000022a 	.word	0x0000022a
    942c:	0000022e 	.word	0x0000022e
    9430:	00000232 	.word	0x00000232
    9434:	00000226 	.word	0x00000226
    9438:	0000020e 	.word	0x0000020e
	}

	if(port[n_port].sercom->USART.INTFLAG.bit.TXC)
    943c:	1dfb      	adds	r3, r7, #7
    943e:	781a      	ldrb	r2, [r3, #0]
    9440:	4978      	ldr	r1, [pc, #480]	; (9624 <sercom_proc+0x524>)
    9442:	0013      	movs	r3, r2
    9444:	00db      	lsls	r3, r3, #3
    9446:	189b      	adds	r3, r3, r2
    9448:	019b      	lsls	r3, r3, #6
    944a:	585b      	ldr	r3, [r3, r1]
    944c:	7e1b      	ldrb	r3, [r3, #24]
    944e:	079b      	lsls	r3, r3, #30
    9450:	0fdb      	lsrs	r3, r3, #31
    9452:	b2db      	uxtb	r3, r3
    9454:	2b00      	cmp	r3, #0
    9456:	d045      	beq.n	94e4 <sercom_proc+0x3e4>
	{
		port[n_port].txc++;
    9458:	1dfb      	adds	r3, r7, #7
    945a:	781a      	ldrb	r2, [r3, #0]
    945c:	4871      	ldr	r0, [pc, #452]	; (9624 <sercom_proc+0x524>)
    945e:	238a      	movs	r3, #138	; 0x8a
    9460:	0099      	lsls	r1, r3, #2
    9462:	0013      	movs	r3, r2
    9464:	00db      	lsls	r3, r3, #3
    9466:	189b      	adds	r3, r3, r2
    9468:	019b      	lsls	r3, r3, #6
    946a:	18c3      	adds	r3, r0, r3
    946c:	185b      	adds	r3, r3, r1
    946e:	881b      	ldrh	r3, [r3, #0]
    9470:	b29b      	uxth	r3, r3
    9472:	3301      	adds	r3, #1
    9474:	b29c      	uxth	r4, r3
    9476:	486b      	ldr	r0, [pc, #428]	; (9624 <sercom_proc+0x524>)
    9478:	238a      	movs	r3, #138	; 0x8a
    947a:	0099      	lsls	r1, r3, #2
    947c:	0013      	movs	r3, r2
    947e:	00db      	lsls	r3, r3, #3
    9480:	189b      	adds	r3, r3, r2
    9482:	019b      	lsls	r3, r3, #6
    9484:	18c3      	adds	r3, r0, r3
    9486:	185b      	adds	r3, r3, r1
    9488:	1c22      	adds	r2, r4, #0
    948a:	801a      	strh	r2, [r3, #0]
		port[n_port].sercom->USART.INTFLAG.bit.TXC = 1;
    948c:	1dfb      	adds	r3, r7, #7
    948e:	781a      	ldrb	r2, [r3, #0]
    9490:	4964      	ldr	r1, [pc, #400]	; (9624 <sercom_proc+0x524>)
    9492:	0013      	movs	r3, r2
    9494:	00db      	lsls	r3, r3, #3
    9496:	189b      	adds	r3, r3, r2
    9498:	019b      	lsls	r3, r3, #6
    949a:	585a      	ldr	r2, [r3, r1]
    949c:	7e13      	ldrb	r3, [r2, #24]
    949e:	2102      	movs	r1, #2
    94a0:	430b      	orrs	r3, r1
    94a2:	7613      	strb	r3, [r2, #24]
		pin_ctrl(RTS, n_port, CLR);
    94a4:	1dfb      	adds	r3, r7, #7
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	2202      	movs	r2, #2
    94aa:	0019      	movs	r1, r3
    94ac:	2000      	movs	r0, #0
    94ae:	4b5e      	ldr	r3, [pc, #376]	; (9628 <sercom_proc+0x528>)
    94b0:	4798      	blx	r3
		port[n_port].sercom->USART.INTENCLR.bit.TXC = 1;
    94b2:	1dfb      	adds	r3, r7, #7
    94b4:	781a      	ldrb	r2, [r3, #0]
    94b6:	495b      	ldr	r1, [pc, #364]	; (9624 <sercom_proc+0x524>)
    94b8:	0013      	movs	r3, r2
    94ba:	00db      	lsls	r3, r3, #3
    94bc:	189b      	adds	r3, r3, r2
    94be:	019b      	lsls	r3, r3, #6
    94c0:	585a      	ldr	r2, [r3, r1]
    94c2:	7d13      	ldrb	r3, [r2, #20]
    94c4:	2102      	movs	r1, #2
    94c6:	430b      	orrs	r3, r1
    94c8:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.RXC = 1;
    94ca:	1dfb      	adds	r3, r7, #7
    94cc:	781a      	ldrb	r2, [r3, #0]
    94ce:	4955      	ldr	r1, [pc, #340]	; (9624 <sercom_proc+0x524>)
    94d0:	0013      	movs	r3, r2
    94d2:	00db      	lsls	r3, r3, #3
    94d4:	189b      	adds	r3, r3, r2
    94d6:	019b      	lsls	r3, r3, #6
    94d8:	585a      	ldr	r2, [r3, r1]
    94da:	7d93      	ldrb	r3, [r2, #22]
    94dc:	2104      	movs	r1, #4
    94de:	430b      	orrs	r3, r1
    94e0:	7593      	strb	r3, [r2, #22]
		return;
    94e2:	e09b      	b.n	961c <sercom_proc+0x51c>
	}
	
	if(port[n_port].sercom->USART.INTFLAG.bit.DRE)
    94e4:	1dfb      	adds	r3, r7, #7
    94e6:	781a      	ldrb	r2, [r3, #0]
    94e8:	494e      	ldr	r1, [pc, #312]	; (9624 <sercom_proc+0x524>)
    94ea:	0013      	movs	r3, r2
    94ec:	00db      	lsls	r3, r3, #3
    94ee:	189b      	adds	r3, r3, r2
    94f0:	019b      	lsls	r3, r3, #6
    94f2:	585b      	ldr	r3, [r3, r1]
    94f4:	7e1b      	ldrb	r3, [r3, #24]
    94f6:	07db      	lsls	r3, r3, #31
    94f8:	0fdb      	lsrs	r3, r3, #31
    94fa:	b2db      	uxtb	r3, r3
    94fc:	2b00      	cmp	r3, #0
    94fe:	d100      	bne.n	9502 <sercom_proc+0x402>
    9500:	e08c      	b.n	961c <sercom_proc+0x51c>
	{
		port[n_port].dre++;
    9502:	1dfb      	adds	r3, r7, #7
    9504:	781a      	ldrb	r2, [r3, #0]
    9506:	4847      	ldr	r0, [pc, #284]	; (9624 <sercom_proc+0x524>)
    9508:	2389      	movs	r3, #137	; 0x89
    950a:	0099      	lsls	r1, r3, #2
    950c:	0013      	movs	r3, r2
    950e:	00db      	lsls	r3, r3, #3
    9510:	189b      	adds	r3, r3, r2
    9512:	019b      	lsls	r3, r3, #6
    9514:	18c3      	adds	r3, r0, r3
    9516:	185b      	adds	r3, r3, r1
    9518:	881b      	ldrh	r3, [r3, #0]
    951a:	b29b      	uxth	r3, r3
    951c:	3301      	adds	r3, #1
    951e:	b29c      	uxth	r4, r3
    9520:	4840      	ldr	r0, [pc, #256]	; (9624 <sercom_proc+0x524>)
    9522:	2389      	movs	r3, #137	; 0x89
    9524:	0099      	lsls	r1, r3, #2
    9526:	0013      	movs	r3, r2
    9528:	00db      	lsls	r3, r3, #3
    952a:	189b      	adds	r3, r3, r2
    952c:	019b      	lsls	r3, r3, #6
    952e:	18c3      	adds	r3, r0, r3
    9530:	185b      	adds	r3, r3, r1
    9532:	1c22      	adds	r2, r4, #0
    9534:	801a      	strh	r2, [r3, #0]
		if(port[n_port].wx < port[n_port].wn)
    9536:	1dfb      	adds	r3, r7, #7
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	483a      	ldr	r0, [pc, #232]	; (9624 <sercom_proc+0x524>)
    953c:	2383      	movs	r3, #131	; 0x83
    953e:	0099      	lsls	r1, r3, #2
    9540:	0013      	movs	r3, r2
    9542:	00db      	lsls	r3, r3, #3
    9544:	189b      	adds	r3, r3, r2
    9546:	019b      	lsls	r3, r3, #6
    9548:	18c3      	adds	r3, r0, r3
    954a:	185b      	adds	r3, r3, r1
    954c:	881b      	ldrh	r3, [r3, #0]
    954e:	b299      	uxth	r1, r3
    9550:	1dfb      	adds	r3, r7, #7
    9552:	781a      	ldrb	r2, [r3, #0]
    9554:	4833      	ldr	r0, [pc, #204]	; (9624 <sercom_proc+0x524>)
    9556:	4c35      	ldr	r4, [pc, #212]	; (962c <sercom_proc+0x52c>)
    9558:	0013      	movs	r3, r2
    955a:	00db      	lsls	r3, r3, #3
    955c:	189b      	adds	r3, r3, r2
    955e:	019b      	lsls	r3, r3, #6
    9560:	18c3      	adds	r3, r0, r3
    9562:	191b      	adds	r3, r3, r4
    9564:	881b      	ldrh	r3, [r3, #0]
    9566:	b29b      	uxth	r3, r3
    9568:	4299      	cmp	r1, r3
    956a:	d23e      	bcs.n	95ea <sercom_proc+0x4ea>
		{
			port[n_port].sercom->USART.DATA.reg = port[n_port].wbuf[port[n_port].wx];
    956c:	1dfb      	adds	r3, r7, #7
    956e:	781a      	ldrb	r2, [r3, #0]
    9570:	492c      	ldr	r1, [pc, #176]	; (9624 <sercom_proc+0x524>)
    9572:	0013      	movs	r3, r2
    9574:	00db      	lsls	r3, r3, #3
    9576:	189b      	adds	r3, r3, r2
    9578:	019b      	lsls	r3, r3, #6
    957a:	5858      	ldr	r0, [r3, r1]
    957c:	1dfb      	adds	r3, r7, #7
    957e:	781a      	ldrb	r2, [r3, #0]
    9580:	1dfb      	adds	r3, r7, #7
    9582:	7819      	ldrb	r1, [r3, #0]
    9584:	4d27      	ldr	r5, [pc, #156]	; (9624 <sercom_proc+0x524>)
    9586:	2383      	movs	r3, #131	; 0x83
    9588:	009c      	lsls	r4, r3, #2
    958a:	000b      	movs	r3, r1
    958c:	00db      	lsls	r3, r3, #3
    958e:	185b      	adds	r3, r3, r1
    9590:	019b      	lsls	r3, r3, #6
    9592:	18eb      	adds	r3, r5, r3
    9594:	191b      	adds	r3, r3, r4
    9596:	881b      	ldrh	r3, [r3, #0]
    9598:	b29b      	uxth	r3, r3
    959a:	001c      	movs	r4, r3
    959c:	4921      	ldr	r1, [pc, #132]	; (9624 <sercom_proc+0x524>)
    959e:	0013      	movs	r3, r2
    95a0:	00db      	lsls	r3, r3, #3
    95a2:	189b      	adds	r3, r3, r2
    95a4:	019b      	lsls	r3, r3, #6
    95a6:	18cb      	adds	r3, r1, r3
    95a8:	191b      	adds	r3, r3, r4
    95aa:	3309      	adds	r3, #9
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	b2db      	uxtb	r3, r3
    95b0:	b29b      	uxth	r3, r3
    95b2:	8503      	strh	r3, [r0, #40]	; 0x28
			port[n_port].wx  ++;
    95b4:	1dfb      	adds	r3, r7, #7
    95b6:	781a      	ldrb	r2, [r3, #0]
    95b8:	481a      	ldr	r0, [pc, #104]	; (9624 <sercom_proc+0x524>)
    95ba:	2383      	movs	r3, #131	; 0x83
    95bc:	0099      	lsls	r1, r3, #2
    95be:	0013      	movs	r3, r2
    95c0:	00db      	lsls	r3, r3, #3
    95c2:	189b      	adds	r3, r3, r2
    95c4:	019b      	lsls	r3, r3, #6
    95c6:	18c3      	adds	r3, r0, r3
    95c8:	185b      	adds	r3, r3, r1
    95ca:	881b      	ldrh	r3, [r3, #0]
    95cc:	b29b      	uxth	r3, r3
    95ce:	3301      	adds	r3, #1
    95d0:	b29c      	uxth	r4, r3
    95d2:	4814      	ldr	r0, [pc, #80]	; (9624 <sercom_proc+0x524>)
    95d4:	2383      	movs	r3, #131	; 0x83
    95d6:	0099      	lsls	r1, r3, #2
    95d8:	0013      	movs	r3, r2
    95da:	00db      	lsls	r3, r3, #3
    95dc:	189b      	adds	r3, r3, r2
    95de:	019b      	lsls	r3, r3, #6
    95e0:	18c3      	adds	r3, r0, r3
    95e2:	185b      	adds	r3, r3, r1
    95e4:	1c22      	adds	r2, r4, #0
    95e6:	801a      	strh	r2, [r3, #0]
			return;
    95e8:	e018      	b.n	961c <sercom_proc+0x51c>
		}
		port[n_port].sercom->USART.INTENCLR.bit.DRE=1;
    95ea:	1dfb      	adds	r3, r7, #7
    95ec:	781a      	ldrb	r2, [r3, #0]
    95ee:	490d      	ldr	r1, [pc, #52]	; (9624 <sercom_proc+0x524>)
    95f0:	0013      	movs	r3, r2
    95f2:	00db      	lsls	r3, r3, #3
    95f4:	189b      	adds	r3, r3, r2
    95f6:	019b      	lsls	r3, r3, #6
    95f8:	585a      	ldr	r2, [r3, r1]
    95fa:	7d13      	ldrb	r3, [r2, #20]
    95fc:	2101      	movs	r1, #1
    95fe:	430b      	orrs	r3, r1
    9600:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.TXC=1;
    9602:	1dfb      	adds	r3, r7, #7
    9604:	781a      	ldrb	r2, [r3, #0]
    9606:	4907      	ldr	r1, [pc, #28]	; (9624 <sercom_proc+0x524>)
    9608:	0013      	movs	r3, r2
    960a:	00db      	lsls	r3, r3, #3
    960c:	189b      	adds	r3, r3, r2
    960e:	019b      	lsls	r3, r3, #6
    9610:	585a      	ldr	r2, [r3, r1]
    9612:	7d93      	ldrb	r3, [r2, #22]
    9614:	2102      	movs	r1, #2
    9616:	430b      	orrs	r3, r1
    9618:	7593      	strb	r3, [r2, #22]
		return;
    961a:	46c0      	nop			; (mov r8, r8)
	}
};
    961c:	46bd      	mov	sp, r7
    961e:	b002      	add	sp, #8
    9620:	bdb0      	pop	{r4, r5, r7, pc}
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	200031fc 	.word	0x200031fc
    9628:	00006d31 	.word	0x00006d31
    962c:	0000020a 	.word	0x0000020a

00009630 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    9630:	b580      	push	{r7, lr}
    9632:	af00      	add	r7, sp, #0
	sercom_proc(0);
    9634:	2000      	movs	r0, #0
    9636:	f7ff fd63 	bl	9100 <sercom_proc>
}
    963a:	46c0      	nop			; (mov r8, r8)
    963c:	46bd      	mov	sp, r7
    963e:	bd80      	pop	{r7, pc}

00009640 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    9640:	b580      	push	{r7, lr}
    9642:	af00      	add	r7, sp, #0
	sercom_proc(1);
    9644:	2001      	movs	r0, #1
    9646:	f7ff fd5b 	bl	9100 <sercom_proc>
}
    964a:	46c0      	nop			; (mov r8, r8)
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}

00009650 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    9650:	b580      	push	{r7, lr}
    9652:	af00      	add	r7, sp, #0
	sercom_proc(2);
    9654:	2002      	movs	r0, #2
    9656:	f7ff fd53 	bl	9100 <sercom_proc>
}
    965a:	46c0      	nop			; (mov r8, r8)
    965c:	46bd      	mov	sp, r7
    965e:	bd80      	pop	{r7, pc}

00009660 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    9660:	b580      	push	{r7, lr}
    9662:	af00      	add	r7, sp, #0
	sercom_proc(3);
    9664:	2003      	movs	r0, #3
    9666:	f7ff fd4b 	bl	9100 <sercom_proc>
}
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	46bd      	mov	sp, r7
    966e:	bd80      	pop	{r7, pc}

00009670 <w5500_init_reg>:
W5500_MODE w5500_mode;

volatile WORD sizert=0;

BYTE w5500_init_reg(void)
{
    9670:	b580      	push	{r7, lr}
    9672:	af00      	add	r7, sp, #0
	pin_ctrl(W55,PWR,SET);
    9674:	2201      	movs	r2, #1
    9676:	2100      	movs	r1, #0
    9678:	2002      	movs	r0, #2
    967a:	4b19      	ldr	r3, [pc, #100]	; (96e0 <w5500_init_reg+0x70>)
    967c:	4798      	blx	r3
	
	
		
	if(ip_init()	)	{err_dword.ip_init_er   = 1;	return ERROR;}
    967e:	f000 f893 	bl	97a8 <ip_init>
    9682:	1e03      	subs	r3, r0, #0
    9684:	d007      	beq.n	9696 <w5500_init_reg+0x26>
    9686:	4b17      	ldr	r3, [pc, #92]	; (96e4 <w5500_init_reg+0x74>)
    9688:	781a      	ldrb	r2, [r3, #0]
    968a:	2180      	movs	r1, #128	; 0x80
    968c:	4249      	negs	r1, r1
    968e:	430a      	orrs	r2, r1
    9690:	701a      	strb	r2, [r3, #0]
    9692:	2302      	movs	r3, #2
    9694:	e021      	b.n	96da <w5500_init_reg+0x6a>
	if(mask_init()	)	{err_dword.mask_init_er = 1;	return ERROR;}
    9696:	f000 f867 	bl	9768 <mask_init>
    969a:	1e03      	subs	r3, r0, #0
    969c:	d006      	beq.n	96ac <w5500_init_reg+0x3c>
    969e:	4b11      	ldr	r3, [pc, #68]	; (96e4 <w5500_init_reg+0x74>)
    96a0:	785a      	ldrb	r2, [r3, #1]
    96a2:	2101      	movs	r1, #1
    96a4:	430a      	orrs	r2, r1
    96a6:	705a      	strb	r2, [r3, #1]
    96a8:	2302      	movs	r3, #2
    96aa:	e016      	b.n	96da <w5500_init_reg+0x6a>
	if(gw_init()	)	{err_dword.gw_init_er   = 1;	return ERROR;}		
    96ac:	f000 f83c 	bl	9728 <gw_init>
    96b0:	1e03      	subs	r3, r0, #0
    96b2:	d006      	beq.n	96c2 <w5500_init_reg+0x52>
    96b4:	4b0b      	ldr	r3, [pc, #44]	; (96e4 <w5500_init_reg+0x74>)
    96b6:	785a      	ldrb	r2, [r3, #1]
    96b8:	2102      	movs	r1, #2
    96ba:	430a      	orrs	r2, r1
    96bc:	705a      	strb	r2, [r3, #1]
    96be:	2302      	movs	r3, #2
    96c0:	e00b      	b.n	96da <w5500_init_reg+0x6a>
	if(mac_init()	)	{err_dword.mac_init_er  = 1;	return ERROR;}
    96c2:	f000 f811 	bl	96e8 <mac_init>
    96c6:	1e03      	subs	r3, r0, #0
    96c8:	d006      	beq.n	96d8 <w5500_init_reg+0x68>
    96ca:	4b06      	ldr	r3, [pc, #24]	; (96e4 <w5500_init_reg+0x74>)
    96cc:	785a      	ldrb	r2, [r3, #1]
    96ce:	2104      	movs	r1, #4
    96d0:	430a      	orrs	r2, r1
    96d2:	705a      	strb	r2, [r3, #1]
    96d4:	2302      	movs	r3, #2
    96d6:	e000      	b.n	96da <w5500_init_reg+0x6a>
		
	return SUCCESS;
    96d8:	2300      	movs	r3, #0
}
    96da:	0018      	movs	r0, r3
    96dc:	46bd      	mov	sp, r7
    96de:	bd80      	pop	{r7, pc}
    96e0:	00006d31 	.word	0x00006d31
    96e4:	20002550 	.word	0x20002550

000096e8 <mac_init>:

BYTE mac_init(void)
{
    96e8:	b5b0      	push	{r4, r5, r7, lr}
    96ea:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MAC_ADDR_0,COMMON_REGISTER,cfg_2.mac_addr,sizeof(cfg_2.mac_addr),10);
    96ec:	4b0b      	ldr	r3, [pc, #44]	; (971c <mac_init+0x34>)
    96ee:	220a      	movs	r2, #10
    96f0:	801a      	strh	r2, [r3, #0]
    96f2:	e006      	b.n	9702 <mac_init+0x1a>
    96f4:	4b09      	ldr	r3, [pc, #36]	; (971c <mac_init+0x34>)
    96f6:	881b      	ldrh	r3, [r3, #0]
    96f8:	b29b      	uxth	r3, r3
    96fa:	2b00      	cmp	r3, #0
    96fc:	d101      	bne.n	9702 <mac_init+0x1a>
    96fe:	2301      	movs	r3, #1
    9700:	e008      	b.n	9714 <mac_init+0x2c>
    9702:	4a07      	ldr	r2, [pc, #28]	; (9720 <mac_init+0x38>)
    9704:	2306      	movs	r3, #6
    9706:	2100      	movs	r1, #0
    9708:	2009      	movs	r0, #9
    970a:	4c06      	ldr	r4, [pc, #24]	; (9724 <mac_init+0x3c>)
    970c:	47a0      	blx	r4
    970e:	1e03      	subs	r3, r0, #0
    9710:	d0f0      	beq.n	96f4 <mac_init+0xc>
	return SUCCESS;
    9712:	2300      	movs	r3, #0
}
    9714:	0018      	movs	r0, r3
    9716:	46bd      	mov	sp, r7
    9718:	bdb0      	pop	{r4, r5, r7, pc}
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	200031f4 	.word	0x200031f4
    9720:	20003bc4 	.word	0x20003bc4
    9724:	00007925 	.word	0x00007925

00009728 <gw_init>:
BYTE gw_init(void)
{
    9728:	b5b0      	push	{r4, r5, r7, lr}
    972a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_GATEWAY_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_gate,sizeof(cfg_1.com_network.ip_gate),10);
    972c:	4b0b      	ldr	r3, [pc, #44]	; (975c <gw_init+0x34>)
    972e:	220a      	movs	r2, #10
    9730:	801a      	strh	r2, [r3, #0]
    9732:	e006      	b.n	9742 <gw_init+0x1a>
    9734:	4b09      	ldr	r3, [pc, #36]	; (975c <gw_init+0x34>)
    9736:	881b      	ldrh	r3, [r3, #0]
    9738:	b29b      	uxth	r3, r3
    973a:	2b00      	cmp	r3, #0
    973c:	d101      	bne.n	9742 <gw_init+0x1a>
    973e:	2301      	movs	r3, #1
    9740:	e008      	b.n	9754 <gw_init+0x2c>
    9742:	4a07      	ldr	r2, [pc, #28]	; (9760 <gw_init+0x38>)
    9744:	2304      	movs	r3, #4
    9746:	2100      	movs	r1, #0
    9748:	2001      	movs	r0, #1
    974a:	4c06      	ldr	r4, [pc, #24]	; (9764 <gw_init+0x3c>)
    974c:	47a0      	blx	r4
    974e:	1e03      	subs	r3, r0, #0
    9750:	d0f0      	beq.n	9734 <gw_init+0xc>
	return SUCCESS;
    9752:	2300      	movs	r3, #0
}
    9754:	0018      	movs	r0, r3
    9756:	46bd      	mov	sp, r7
    9758:	bdb0      	pop	{r4, r5, r7, pc}
    975a:	46c0      	nop			; (mov r8, r8)
    975c:	200031f4 	.word	0x200031f4
    9760:	20003df4 	.word	0x20003df4
    9764:	00007925 	.word	0x00007925

00009768 <mask_init>:
BYTE mask_init(void)
{
    9768:	b5b0      	push	{r4, r5, r7, lr}
    976a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MASK_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_mask,sizeof(cfg_1.com_network.ip_mask),10);
    976c:	4b0b      	ldr	r3, [pc, #44]	; (979c <mask_init+0x34>)
    976e:	220a      	movs	r2, #10
    9770:	801a      	strh	r2, [r3, #0]
    9772:	e006      	b.n	9782 <mask_init+0x1a>
    9774:	4b09      	ldr	r3, [pc, #36]	; (979c <mask_init+0x34>)
    9776:	881b      	ldrh	r3, [r3, #0]
    9778:	b29b      	uxth	r3, r3
    977a:	2b00      	cmp	r3, #0
    977c:	d101      	bne.n	9782 <mask_init+0x1a>
    977e:	2301      	movs	r3, #1
    9780:	e008      	b.n	9794 <mask_init+0x2c>
    9782:	4a07      	ldr	r2, [pc, #28]	; (97a0 <mask_init+0x38>)
    9784:	2304      	movs	r3, #4
    9786:	2100      	movs	r1, #0
    9788:	2005      	movs	r0, #5
    978a:	4c06      	ldr	r4, [pc, #24]	; (97a4 <mask_init+0x3c>)
    978c:	47a0      	blx	r4
    978e:	1e03      	subs	r3, r0, #0
    9790:	d0f0      	beq.n	9774 <mask_init+0xc>
	return SUCCESS;
    9792:	2300      	movs	r3, #0
}
    9794:	0018      	movs	r0, r3
    9796:	46bd      	mov	sp, r7
    9798:	bdb0      	pop	{r4, r5, r7, pc}
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	200031f4 	.word	0x200031f4
    97a0:	20003df0 	.word	0x20003df0
    97a4:	00007925 	.word	0x00007925

000097a8 <ip_init>:
BYTE ip_init(void)
{
    97a8:	b5b0      	push	{r4, r5, r7, lr}
    97aa:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_SRC_IP_ADR_0,COMMON_REGISTER,cfg_1.com_network.ip_addr,sizeof(cfg_1.com_network.ip_addr),10);
    97ac:	4b0b      	ldr	r3, [pc, #44]	; (97dc <ip_init+0x34>)
    97ae:	220a      	movs	r2, #10
    97b0:	801a      	strh	r2, [r3, #0]
    97b2:	e006      	b.n	97c2 <ip_init+0x1a>
    97b4:	4b09      	ldr	r3, [pc, #36]	; (97dc <ip_init+0x34>)
    97b6:	881b      	ldrh	r3, [r3, #0]
    97b8:	b29b      	uxth	r3, r3
    97ba:	2b00      	cmp	r3, #0
    97bc:	d101      	bne.n	97c2 <ip_init+0x1a>
    97be:	2301      	movs	r3, #1
    97c0:	e008      	b.n	97d4 <ip_init+0x2c>
    97c2:	4a07      	ldr	r2, [pc, #28]	; (97e0 <ip_init+0x38>)
    97c4:	2304      	movs	r3, #4
    97c6:	2100      	movs	r1, #0
    97c8:	200f      	movs	r0, #15
    97ca:	4c06      	ldr	r4, [pc, #24]	; (97e4 <ip_init+0x3c>)
    97cc:	47a0      	blx	r4
    97ce:	1e03      	subs	r3, r0, #0
    97d0:	d0f0      	beq.n	97b4 <ip_init+0xc>
	return SUCCESS;
    97d2:	2300      	movs	r3, #0
}
    97d4:	0018      	movs	r0, r3
    97d6:	46bd      	mov	sp, r7
    97d8:	bdb0      	pop	{r4, r5, r7, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	200031f4 	.word	0x200031f4
    97e0:	20003dec 	.word	0x20003dec
    97e4:	00007925 	.word	0x00007925

000097e8 <w5500_process>:

WORD w5500_process (BYTE spi_mode, BYTE sock_numb)
{
    97e8:	b590      	push	{r4, r7, lr}
    97ea:	b087      	sub	sp, #28
    97ec:	af02      	add	r7, sp, #8
    97ee:	0002      	movs	r2, r0
    97f0:	1dfb      	adds	r3, r7, #7
    97f2:	701a      	strb	r2, [r3, #0]
    97f4:	1dbb      	adds	r3, r7, #6
    97f6:	1c0a      	adds	r2, r1, #0
    97f8:	701a      	strb	r2, [r3, #0]
	static BYTE w5500_st=0;
	WORD rtrn=0;
    97fa:	230e      	movs	r3, #14
    97fc:	18fb      	adds	r3, r7, r3
    97fe:	2200      	movs	r2, #0
    9800:	801a      	strh	r2, [r3, #0]
	if(!cmd_spi_wait){w5500_st=0;return 2;} //if 20 mS no answer, break process
    9802:	4b50      	ldr	r3, [pc, #320]	; (9944 <w5500_process+0x15c>)
    9804:	881b      	ldrh	r3, [r3, #0]
    9806:	b29b      	uxth	r3, r3
    9808:	2b00      	cmp	r3, #0
    980a:	d104      	bne.n	9816 <w5500_process+0x2e>
    980c:	4b4e      	ldr	r3, [pc, #312]	; (9948 <w5500_process+0x160>)
    980e:	2200      	movs	r2, #0
    9810:	701a      	strb	r2, [r3, #0]
    9812:	2302      	movs	r3, #2
    9814:	e091      	b.n	993a <w5500_process+0x152>
		
		
	switch (w5500_st)
    9816:	4b4c      	ldr	r3, [pc, #304]	; (9948 <w5500_process+0x160>)
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	2b05      	cmp	r3, #5
    981c:	d900      	bls.n	9820 <w5500_process+0x38>
    981e:	e085      	b.n	992c <w5500_process+0x144>
    9820:	009a      	lsls	r2, r3, #2
    9822:	4b4a      	ldr	r3, [pc, #296]	; (994c <w5500_process+0x164>)
    9824:	18d3      	adds	r3, r2, r3
    9826:	681b      	ldr	r3, [r3, #0]
    9828:	469f      	mov	pc, r3
	{
		case NULLS:
								w5500_st=spi_mode;
    982a:	4b47      	ldr	r3, [pc, #284]	; (9948 <w5500_process+0x160>)
    982c:	1dfa      	adds	r2, r7, #7
    982e:	7812      	ldrb	r2, [r2, #0]
    9830:	701a      	strb	r2, [r3, #0]
								cmd_spi_wait=time_20ms;
    9832:	4b44      	ldr	r3, [pc, #272]	; (9944 <w5500_process+0x15c>)
    9834:	4a46      	ldr	r2, [pc, #280]	; (9950 <w5500_process+0x168>)
    9836:	801a      	strh	r2, [r3, #0]
								return PROC_WAIT;
    9838:	2300      	movs	r3, #0
    983a:	e07e      	b.n	993a <w5500_process+0x152>
		case SPI_PROCESS:
								if(spi_process(addr_w5500,cb_w5500,ptr_buf,len_buf,cmd)){w5500_st=spi_mode;cmd=0;}
    983c:	4b45      	ldr	r3, [pc, #276]	; (9954 <w5500_process+0x16c>)
    983e:	8818      	ldrh	r0, [r3, #0]
    9840:	4b45      	ldr	r3, [pc, #276]	; (9958 <w5500_process+0x170>)
    9842:	881b      	ldrh	r3, [r3, #0]
    9844:	b2d9      	uxtb	r1, r3
    9846:	4b45      	ldr	r3, [pc, #276]	; (995c <w5500_process+0x174>)
    9848:	681a      	ldr	r2, [r3, #0]
    984a:	4b45      	ldr	r3, [pc, #276]	; (9960 <w5500_process+0x178>)
    984c:	881c      	ldrh	r4, [r3, #0]
    984e:	4b45      	ldr	r3, [pc, #276]	; (9964 <w5500_process+0x17c>)
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	9300      	str	r3, [sp, #0]
    9854:	0023      	movs	r3, r4
    9856:	4c44      	ldr	r4, [pc, #272]	; (9968 <w5500_process+0x180>)
    9858:	47a0      	blx	r4
    985a:	1e03      	subs	r3, r0, #0
    985c:	d100      	bne.n	9860 <w5500_process+0x78>
    985e:	e06a      	b.n	9936 <w5500_process+0x14e>
    9860:	4b39      	ldr	r3, [pc, #228]	; (9948 <w5500_process+0x160>)
    9862:	1dfa      	adds	r2, r7, #7
    9864:	7812      	ldrb	r2, [r2, #0]
    9866:	701a      	strb	r2, [r3, #0]
    9868:	4b3e      	ldr	r3, [pc, #248]	; (9964 <w5500_process+0x17c>)
    986a:	2200      	movs	r2, #0
    986c:	701a      	strb	r2, [r3, #0]
		break;
    986e:	e062      	b.n	9936 <w5500_process+0x14e>
		case MODE_OP_READ_UDP:
								rtrn=w5500_cmd_read_socket_udp(sock_numb);
    9870:	230e      	movs	r3, #14
    9872:	18fc      	adds	r4, r7, r3
    9874:	1dbb      	adds	r3, r7, #6
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	0018      	movs	r0, r3
    987a:	f000 f877 	bl	996c <w5500_cmd_read_socket_udp>
    987e:	0003      	movs	r3, r0
    9880:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    9882:	230e      	movs	r3, #14
    9884:	18fb      	adds	r3, r7, r3
    9886:	881b      	ldrh	r3, [r3, #0]
    9888:	2b00      	cmp	r3, #0
    988a:	d009      	beq.n	98a0 <w5500_process+0xb8>
    988c:	4b2e      	ldr	r3, [pc, #184]	; (9948 <w5500_process+0x160>)
    988e:	2200      	movs	r2, #0
    9890:	701a      	strb	r2, [r3, #0]
    9892:	1dfb      	adds	r3, r7, #7
    9894:	2200      	movs	r2, #0
    9896:	701a      	strb	r2, [r3, #0]
    9898:	230e      	movs	r3, #14
    989a:	18fb      	adds	r3, r7, r3
    989c:	881b      	ldrh	r3, [r3, #0]
    989e:	e04c      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98a0:	4b29      	ldr	r3, [pc, #164]	; (9948 <w5500_process+0x160>)
    98a2:	2201      	movs	r2, #1
    98a4:	701a      	strb	r2, [r3, #0]
		break;
    98a6:	e047      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_WRITE_UDP:
								if(w5500_write_socket_udp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    98a8:	1dbb      	adds	r3, r7, #6
    98aa:	781b      	ldrb	r3, [r3, #0]
    98ac:	0018      	movs	r0, r3
    98ae:	f000 f9f1 	bl	9c94 <w5500_write_socket_udp>
    98b2:	1e03      	subs	r3, r0, #0
    98b4:	d007      	beq.n	98c6 <w5500_process+0xde>
    98b6:	4b24      	ldr	r3, [pc, #144]	; (9948 <w5500_process+0x160>)
    98b8:	2200      	movs	r2, #0
    98ba:	701a      	strb	r2, [r3, #0]
    98bc:	1dfb      	adds	r3, r7, #7
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	2301      	movs	r3, #1
    98c4:	e039      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98c6:	4b20      	ldr	r3, [pc, #128]	; (9948 <w5500_process+0x160>)
    98c8:	2201      	movs	r2, #1
    98ca:	701a      	strb	r2, [r3, #0]
		break;
    98cc:	e034      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_READ_TCP:
								rtrn=w5500_cmd_read_socket_tcp(sock_numb);
    98ce:	230e      	movs	r3, #14
    98d0:	18fc      	adds	r4, r7, r3
    98d2:	1dbb      	adds	r3, r7, #6
    98d4:	781b      	ldrb	r3, [r3, #0]
    98d6:	0018      	movs	r0, r3
    98d8:	f000 fc2a 	bl	a130 <w5500_cmd_read_socket_tcp>
    98dc:	0003      	movs	r3, r0
    98de:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    98e0:	230e      	movs	r3, #14
    98e2:	18fb      	adds	r3, r7, r3
    98e4:	881b      	ldrh	r3, [r3, #0]
    98e6:	2b00      	cmp	r3, #0
    98e8:	d009      	beq.n	98fe <w5500_process+0x116>
    98ea:	4b17      	ldr	r3, [pc, #92]	; (9948 <w5500_process+0x160>)
    98ec:	2200      	movs	r2, #0
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	1dfb      	adds	r3, r7, #7
    98f2:	2200      	movs	r2, #0
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	230e      	movs	r3, #14
    98f8:	18fb      	adds	r3, r7, r3
    98fa:	881b      	ldrh	r3, [r3, #0]
    98fc:	e01d      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98fe:	4b12      	ldr	r3, [pc, #72]	; (9948 <w5500_process+0x160>)
    9900:	2201      	movs	r2, #1
    9902:	701a      	strb	r2, [r3, #0]
		break;
    9904:	e018      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_WRITE_TCP:
								if(w5500_write_socket_tcp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    9906:	1dbb      	adds	r3, r7, #6
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	0018      	movs	r0, r3
    990c:	f000 fe8e 	bl	a62c <w5500_write_socket_tcp>
    9910:	1e03      	subs	r3, r0, #0
    9912:	d007      	beq.n	9924 <w5500_process+0x13c>
    9914:	4b0c      	ldr	r3, [pc, #48]	; (9948 <w5500_process+0x160>)
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
    991a:	1dfb      	adds	r3, r7, #7
    991c:	2200      	movs	r2, #0
    991e:	701a      	strb	r2, [r3, #0]
    9920:	2301      	movs	r3, #1
    9922:	e00a      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9924:	4b08      	ldr	r3, [pc, #32]	; (9948 <w5500_process+0x160>)
    9926:	2201      	movs	r2, #1
    9928:	701a      	strb	r2, [r3, #0]
		break;
    992a:	e005      	b.n	9938 <w5500_process+0x150>
		default:
								w5500_st=0; return PROC_ER;
    992c:	4b06      	ldr	r3, [pc, #24]	; (9948 <w5500_process+0x160>)
    992e:	2200      	movs	r2, #0
    9930:	701a      	strb	r2, [r3, #0]
    9932:	2302      	movs	r3, #2
    9934:	e001      	b.n	993a <w5500_process+0x152>
		break;
    9936:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    9938:	2300      	movs	r3, #0
}
    993a:	0018      	movs	r0, r3
    993c:	46bd      	mov	sp, r7
    993e:	b005      	add	sp, #20
    9940:	bd90      	pop	{r4, r7, pc}
    9942:	46c0      	nop			; (mov r8, r8)
    9944:	200031f6 	.word	0x200031f6
    9948:	20000488 	.word	0x20000488
    994c:	0000cb24 	.word	0x0000cb24
    9950:	00003a98 	.word	0x00003a98
    9954:	20000480 	.word	0x20000480
    9958:	20000482 	.word	0x20000482
    995c:	20003afc 	.word	0x20003afc
    9960:	20000484 	.word	0x20000484
    9964:	20003bb7 	.word	0x20003bb7
    9968:	0000787d 	.word	0x0000787d

0000996c <w5500_cmd_read_socket_udp>:

WORD w5500_cmd_read_socket_udp (BYTE sock_numb)
{
    996c:	b590      	push	{r4, r7, lr}
    996e:	b085      	sub	sp, #20
    9970:	af00      	add	r7, sp, #0
    9972:	0002      	movs	r2, r0
    9974:	1dfb      	adds	r3, r7, #7
    9976:	701a      	strb	r2, [r3, #0]
	static BYTE numb_static_r=0;
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	BYTE cnt=0;
    9978:	230f      	movs	r3, #15
    997a:	18fb      	adds	r3, r7, r3
    997c:	2200      	movs	r2, #0
    997e:	701a      	strb	r2, [r3, #0]
	
	if(numb_static_r!=sock_numb){numb_static_r=sock_numb;st_cmd_w5500=0;}
    9980:	4bb6      	ldr	r3, [pc, #728]	; (9c5c <w5500_cmd_read_socket_udp+0x2f0>)
    9982:	781b      	ldrb	r3, [r3, #0]
    9984:	1dfa      	adds	r2, r7, #7
    9986:	7812      	ldrb	r2, [r2, #0]
    9988:	429a      	cmp	r2, r3
    998a:	d006      	beq.n	999a <w5500_cmd_read_socket_udp+0x2e>
    998c:	4bb3      	ldr	r3, [pc, #716]	; (9c5c <w5500_cmd_read_socket_udp+0x2f0>)
    998e:	1dfa      	adds	r2, r7, #7
    9990:	7812      	ldrb	r2, [r2, #0]
    9992:	701a      	strb	r2, [r3, #0]
    9994:	4bb2      	ldr	r3, [pc, #712]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9996:	2200      	movs	r2, #0
    9998:	701a      	strb	r2, [r3, #0]
	
	switch(st_cmd_w5500)
    999a:	4bb1      	ldr	r3, [pc, #708]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	2b04      	cmp	r3, #4
    99a0:	d900      	bls.n	99a4 <w5500_cmd_read_socket_udp+0x38>
    99a2:	e151      	b.n	9c48 <w5500_cmd_read_socket_udp+0x2dc>
    99a4:	009a      	lsls	r2, r3, #2
    99a6:	4baf      	ldr	r3, [pc, #700]	; (9c64 <w5500_cmd_read_socket_udp+0x2f8>)
    99a8:	18d3      	adds	r3, r2, r3
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	469f      	mov	pc, r3
	{
		case UDP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr in w5500 1,2
    99ae:	4bae      	ldr	r3, [pc, #696]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    99b0:	2226      	movs	r2, #38	; 0x26
    99b2:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//cb 3
    99b4:	1dfb      	adds	r3, r7, #7
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	015b      	lsls	r3, r3, #5
    99ba:	b21b      	sxth	r3, r3
    99bc:	2208      	movs	r2, #8
    99be:	4313      	orrs	r3, r2
    99c0:	b21b      	sxth	r3, r3
    99c2:	b29a      	uxth	r2, r3
    99c4:	4ba9      	ldr	r3, [pc, #676]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    99c6:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//4 data (point write data aus w5500)
    99c8:	1dfb      	adds	r3, r7, #7
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	015b      	lsls	r3, r3, #5
    99ce:	3328      	adds	r3, #40	; 0x28
    99d0:	001a      	movs	r2, r3
    99d2:	4ba7      	ldr	r3, [pc, #668]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    99d4:	18d3      	adds	r3, r2, r3
    99d6:	1d5a      	adds	r2, r3, #5
    99d8:	4ba6      	ldr	r3, [pc, #664]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    99da:	601a      	str	r2, [r3, #0]
			len_buf=2;//len
    99dc:	4ba6      	ldr	r3, [pc, #664]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    99de:	2202      	movs	r2, #2
    99e0:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    99e2:	4ba6      	ldr	r3, [pc, #664]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    99e4:	2201      	movs	r2, #1
    99e6:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = UDP_PART_RD;//"next"
    99e8:	4b9d      	ldr	r3, [pc, #628]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    99ea:	2201      	movs	r2, #1
    99ec:	701a      	strb	r2, [r3, #0]
								
			size=0;
    99ee:	4ba4      	ldr	r3, [pc, #656]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    99f0:	2200      	movs	r2, #0
    99f2:	801a      	strh	r2, [r3, #0]
		break;	
    99f4:	e12d      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_PART_RD:					
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    99f6:	1dfb      	adds	r3, r7, #7
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	4a9d      	ldr	r2, [pc, #628]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    99fc:	212d      	movs	r1, #45	; 0x2d
    99fe:	015b      	lsls	r3, r3, #5
    9a00:	18d3      	adds	r3, r2, r3
    9a02:	185b      	adds	r3, r3, r1
    9a04:	781b      	ldrb	r3, [r3, #0]
    9a06:	021b      	lsls	r3, r3, #8
    9a08:	b21a      	sxth	r2, r3
    9a0a:	1dfb      	adds	r3, r7, #7
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    9a10:	202e      	movs	r0, #46	; 0x2e
    9a12:	015b      	lsls	r3, r3, #5
    9a14:	18cb      	adds	r3, r1, r3
    9a16:	181b      	adds	r3, r3, r0
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	b21b      	sxth	r3, r3
    9a1c:	4313      	orrs	r3, r2
    9a1e:	b21b      	sxth	r3, r3
    9a20:	b29a      	uxth	r2, r3
    9a22:	4b98      	ldr	r3, [pc, #608]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a24:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return
    9a26:	4b97      	ldr	r3, [pc, #604]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a28:	881b      	ldrh	r3, [r3, #0]
    9a2a:	b29b      	uxth	r3, r3
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d06c      	beq.n	9b0a <w5500_cmd_read_socket_udp+0x19e>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;
    9a30:	1dfb      	adds	r3, r7, #7
    9a32:	781a      	ldrb	r2, [r3, #0]
    9a34:	4994      	ldr	r1, [pc, #592]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a36:	23ba      	movs	r3, #186	; 0xba
    9a38:	00db      	lsls	r3, r3, #3
    9a3a:	4894      	ldr	r0, [pc, #592]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a3c:	4342      	muls	r2, r0
    9a3e:	188a      	adds	r2, r1, r2
    9a40:	18d3      	adds	r3, r2, r3
    9a42:	78da      	ldrb	r2, [r3, #3]
    9a44:	791b      	ldrb	r3, [r3, #4]
    9a46:	021b      	lsls	r3, r3, #8
    9a48:	4313      	orrs	r3, r2
    9a4a:	b29a      	uxth	r2, r3
    9a4c:	4b86      	ldr	r3, [pc, #536]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9a4e:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);
    9a50:	1dfb      	adds	r3, r7, #7
    9a52:	781b      	ldrb	r3, [r3, #0]
    9a54:	015b      	lsls	r3, r3, #5
    9a56:	b21b      	sxth	r3, r3
    9a58:	2218      	movs	r2, #24
    9a5a:	4313      	orrs	r3, r2
    9a5c:	b21b      	sxth	r3, r3
    9a5e:	b29a      	uxth	r2, r3
    9a60:	4b82      	ldr	r3, [pc, #520]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9a62:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb];
    9a64:	1dfb      	adds	r3, r7, #7
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	4a88      	ldr	r2, [pc, #544]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a6a:	435a      	muls	r2, r3
    9a6c:	4b86      	ldr	r3, [pc, #536]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a6e:	18d2      	adds	r2, r2, r3
    9a70:	4b80      	ldr	r3, [pc, #512]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9a72:	601a      	str	r2, [r3, #0]
				len_buf=sizert;
    9a74:	4b83      	ldr	r3, [pc, #524]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a76:	881b      	ldrh	r3, [r3, #0]
    9a78:	b29a      	uxth	r2, r3
    9a7a:	4b7f      	ldr	r3, [pc, #508]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9a7c:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    9a7e:	1dfb      	adds	r3, r7, #7
    9a80:	7819      	ldrb	r1, [r3, #0]
    9a82:	1dfb      	adds	r3, r7, #7
    9a84:	781a      	ldrb	r2, [r3, #0]
    9a86:	4880      	ldr	r0, [pc, #512]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a88:	23ba      	movs	r3, #186	; 0xba
    9a8a:	00db      	lsls	r3, r3, #3
    9a8c:	4c7f      	ldr	r4, [pc, #508]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a8e:	4362      	muls	r2, r4
    9a90:	1882      	adds	r2, r0, r2
    9a92:	18d3      	adds	r3, r2, r3
    9a94:	78da      	ldrb	r2, [r3, #3]
    9a96:	791b      	ldrb	r3, [r3, #4]
    9a98:	021b      	lsls	r3, r3, #8
    9a9a:	4313      	orrs	r3, r2
    9a9c:	b29a      	uxth	r2, r3
    9a9e:	4b76      	ldr	r3, [pc, #472]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9aa0:	881b      	ldrh	r3, [r3, #0]
    9aa2:	18d3      	adds	r3, r2, r3
    9aa4:	b29a      	uxth	r2, r3
    9aa6:	4878      	ldr	r0, [pc, #480]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9aa8:	23ba      	movs	r3, #186	; 0xba
    9aaa:	00db      	lsls	r3, r3, #3
    9aac:	4c77      	ldr	r4, [pc, #476]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9aae:	4361      	muls	r1, r4
    9ab0:	1841      	adds	r1, r0, r1
    9ab2:	18cb      	adds	r3, r1, r3
    9ab4:	3303      	adds	r3, #3
    9ab6:	21ff      	movs	r1, #255	; 0xff
    9ab8:	4011      	ands	r1, r2
    9aba:	000c      	movs	r4, r1
    9abc:	7819      	ldrb	r1, [r3, #0]
    9abe:	2000      	movs	r0, #0
    9ac0:	4001      	ands	r1, r0
    9ac2:	1c08      	adds	r0, r1, #0
    9ac4:	1c21      	adds	r1, r4, #0
    9ac6:	4301      	orrs	r1, r0
    9ac8:	7019      	strb	r1, [r3, #0]
    9aca:	0a12      	lsrs	r2, r2, #8
    9acc:	b290      	uxth	r0, r2
    9ace:	785a      	ldrb	r2, [r3, #1]
    9ad0:	2100      	movs	r1, #0
    9ad2:	400a      	ands	r2, r1
    9ad4:	1c11      	adds	r1, r2, #0
    9ad6:	1c02      	adds	r2, r0, #0
    9ad8:	430a      	orrs	r2, r1
    9ada:	705a      	strb	r2, [r3, #1]
				size=len_buf;
    9adc:	4b66      	ldr	r3, [pc, #408]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9ade:	881a      	ldrh	r2, [r3, #0]
    9ae0:	4b67      	ldr	r3, [pc, #412]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9ae2:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_UDP){size=PROC_ER;}							
    9ae4:	4b64      	ldr	r3, [pc, #400]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9ae6:	881a      	ldrh	r2, [r3, #0]
    9ae8:	23b9      	movs	r3, #185	; 0xb9
    9aea:	00db      	lsls	r3, r3, #3
    9aec:	429a      	cmp	r2, r3
    9aee:	d902      	bls.n	9af6 <w5500_cmd_read_socket_udp+0x18a>
    9af0:	4b63      	ldr	r3, [pc, #396]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9af2:	2202      	movs	r2, #2
    9af4:	801a      	strh	r2, [r3, #0]
				cmd=READ_DATA;
    9af6:	4b61      	ldr	r3, [pc, #388]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9af8:	2201      	movs	r2, #1
    9afa:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500++;
    9afc:	4b58      	ldr	r3, [pc, #352]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	3301      	adds	r3, #1
    9b02:	b2da      	uxtb	r2, r3
    9b04:	4b56      	ldr	r3, [pc, #344]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b06:	701a      	strb	r2, [r3, #0]
				break;
    9b08:	e0a3      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
			}
			st_cmd_w5500--;
    9b0a:	4b55      	ldr	r3, [pc, #340]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b0c:	781b      	ldrb	r3, [r3, #0]
    9b0e:	3b01      	subs	r3, #1
    9b10:	b2da      	uxtb	r2, r3
    9b12:	4b53      	ldr	r3, [pc, #332]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b14:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    9b16:	2302      	movs	r3, #2
    9b18:	e09c      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		case UDP_PTR_MOVE:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    9b1a:	230f      	movs	r3, #15
    9b1c:	18fb      	adds	r3, r7, r3
    9b1e:	781a      	ldrb	r2, [r3, #0]
    9b20:	1dfb      	adds	r3, r7, #7
    9b22:	7819      	ldrb	r1, [r3, #0]
    9b24:	4858      	ldr	r0, [pc, #352]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9b26:	23ba      	movs	r3, #186	; 0xba
    9b28:	00db      	lsls	r3, r3, #3
    9b2a:	4c58      	ldr	r4, [pc, #352]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9b2c:	4361      	muls	r1, r4
    9b2e:	1841      	adds	r1, r0, r1
    9b30:	18cb      	adds	r3, r1, r3
    9b32:	78d9      	ldrb	r1, [r3, #3]
    9b34:	791b      	ldrb	r3, [r3, #4]
    9b36:	021b      	lsls	r3, r3, #8
    9b38:	430b      	orrs	r3, r1
    9b3a:	b29b      	uxth	r3, r3
    9b3c:	0a1b      	lsrs	r3, r3, #8
    9b3e:	b29b      	uxth	r3, r3
    9b40:	b2d9      	uxtb	r1, r3
    9b42:	4b53      	ldr	r3, [pc, #332]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9b44:	5499      	strb	r1, [r3, r2]
    9b46:	230f      	movs	r3, #15
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	781a      	ldrb	r2, [r3, #0]
    9b4c:	230f      	movs	r3, #15
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	3201      	adds	r2, #1
    9b52:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    9b54:	230f      	movs	r3, #15
    9b56:	18fb      	adds	r3, r7, r3
    9b58:	781a      	ldrb	r2, [r3, #0]
    9b5a:	1dfb      	adds	r3, r7, #7
    9b5c:	7819      	ldrb	r1, [r3, #0]
    9b5e:	484a      	ldr	r0, [pc, #296]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9b60:	23ba      	movs	r3, #186	; 0xba
    9b62:	00db      	lsls	r3, r3, #3
    9b64:	4c49      	ldr	r4, [pc, #292]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9b66:	4361      	muls	r1, r4
    9b68:	1841      	adds	r1, r0, r1
    9b6a:	18cb      	adds	r3, r1, r3
    9b6c:	78d9      	ldrb	r1, [r3, #3]
    9b6e:	791b      	ldrb	r3, [r3, #4]
    9b70:	021b      	lsls	r3, r3, #8
    9b72:	430b      	orrs	r3, r1
    9b74:	b29b      	uxth	r3, r3
    9b76:	b2d9      	uxtb	r1, r3
    9b78:	4b45      	ldr	r3, [pc, #276]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9b7a:	5499      	strb	r1, [r3, r2]
    9b7c:	230f      	movs	r3, #15
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	781a      	ldrb	r2, [r3, #0]
    9b82:	230f      	movs	r3, #15
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	3201      	adds	r2, #1
    9b88:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;//reg RX_RD(28)
    9b8a:	4b37      	ldr	r3, [pc, #220]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9b8c:	2228      	movs	r2, #40	; 0x28
    9b8e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9b90:	1dfb      	adds	r3, r7, #7
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	015b      	lsls	r3, r3, #5
    9b96:	b21b      	sxth	r3, r3
    9b98:	2208      	movs	r2, #8
    9b9a:	4313      	orrs	r3, r2
    9b9c:	b21b      	sxth	r3, r3
    9b9e:	b29a      	uxth	r2, r3
    9ba0:	4b32      	ldr	r3, [pc, #200]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9ba2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;/*(записать в него смещение)*/
    9ba4:	4b33      	ldr	r3, [pc, #204]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9ba6:	4a3a      	ldr	r2, [pc, #232]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9ba8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9baa:	230f      	movs	r3, #15
    9bac:	18fb      	adds	r3, r7, r3
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	b29a      	uxth	r2, r3
    9bb2:	4b31      	ldr	r3, [pc, #196]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9bb4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9bb6:	4b31      	ldr	r3, [pc, #196]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9bb8:	2202      	movs	r2, #2
    9bba:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9bbc:	4b28      	ldr	r3, [pc, #160]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	3301      	adds	r3, #1
    9bc2:	b2da      	uxtb	r2, r3
    9bc4:	4b26      	ldr	r3, [pc, #152]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9bc6:	701a      	strb	r2, [r3, #0]
		break;
    9bc8:	e043      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_RCV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//перейти в режим приема(возобновить прием)
    9bca:	230f      	movs	r3, #15
    9bcc:	18fb      	adds	r3, r7, r3
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	4a2f      	ldr	r2, [pc, #188]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9bd2:	2140      	movs	r1, #64	; 0x40
    9bd4:	54d1      	strb	r1, [r2, r3]
    9bd6:	230f      	movs	r3, #15
    9bd8:	18fb      	adds	r3, r7, r3
    9bda:	781a      	ldrb	r2, [r3, #0]
    9bdc:	230f      	movs	r3, #15
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	3201      	adds	r2, #1
    9be2:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    9be4:	4b20      	ldr	r3, [pc, #128]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9be6:	2201      	movs	r2, #1
    9be8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9bea:	1dfb      	adds	r3, r7, #7
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	015b      	lsls	r3, r3, #5
    9bf0:	b21b      	sxth	r3, r3
    9bf2:	2208      	movs	r2, #8
    9bf4:	4313      	orrs	r3, r2
    9bf6:	b21b      	sxth	r3, r3
    9bf8:	b29a      	uxth	r2, r3
    9bfa:	4b1c      	ldr	r3, [pc, #112]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9bfc:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9bfe:	4b1d      	ldr	r3, [pc, #116]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9c00:	4a23      	ldr	r2, [pc, #140]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9c02:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c04:	230f      	movs	r3, #15
    9c06:	18fb      	adds	r3, r7, r3
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	b29a      	uxth	r2, r3
    9c0c:	4b1a      	ldr	r3, [pc, #104]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9c0e:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c10:	4b1a      	ldr	r3, [pc, #104]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9c12:	2202      	movs	r2, #2
    9c14:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9c16:	4b12      	ldr	r3, [pc, #72]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c18:	781b      	ldrb	r3, [r3, #0]
    9c1a:	3301      	adds	r3, #1
    9c1c:	b2da      	uxtb	r2, r3
    9c1e:	4b10      	ldr	r3, [pc, #64]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c20:	701a      	strb	r2, [r3, #0]
		break;	
    9c22:	e016      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_BK_START:
			st_cmd_w5500=0;//сброс параметров
    9c24:	4b0e      	ldr	r3, [pc, #56]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c26:	2200      	movs	r2, #0
    9c28:	701a      	strb	r2, [r3, #0]
			if((size > USART_BUF_SIZE) && (sock_numb))	 {return PROC_ER;}
    9c2a:	4b15      	ldr	r3, [pc, #84]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9c2c:	881a      	ldrh	r2, [r3, #0]
    9c2e:	2380      	movs	r3, #128	; 0x80
    9c30:	005b      	lsls	r3, r3, #1
    9c32:	429a      	cmp	r2, r3
    9c34:	d905      	bls.n	9c42 <w5500_cmd_read_socket_udp+0x2d6>
    9c36:	1dfb      	adds	r3, r7, #7
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d001      	beq.n	9c42 <w5500_cmd_read_socket_udp+0x2d6>
    9c3e:	2302      	movs	r3, #2
    9c40:	e008      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
			return (size);
    9c42:	4b0f      	ldr	r3, [pc, #60]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9c44:	881b      	ldrh	r3, [r3, #0]
    9c46:	e005      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    9c48:	4b05      	ldr	r3, [pc, #20]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c4a:	2200      	movs	r2, #0
    9c4c:	701a      	strb	r2, [r3, #0]
    9c4e:	2302      	movs	r3, #2
    9c50:	e000      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
	}
	return PROC_WAIT;
    9c52:	2300      	movs	r3, #0
}
    9c54:	0018      	movs	r0, r3
    9c56:	46bd      	mov	sp, r7
    9c58:	b005      	add	sp, #20
    9c5a:	bd90      	pop	{r4, r7, pc}
    9c5c:	20000489 	.word	0x20000489
    9c60:	2000048a 	.word	0x2000048a
    9c64:	0000cb3c 	.word	0x0000cb3c
    9c68:	20000480 	.word	0x20000480
    9c6c:	20000482 	.word	0x20000482
    9c70:	20003b04 	.word	0x20003b04
    9c74:	20003afc 	.word	0x20003afc
    9c78:	20000484 	.word	0x20000484
    9c7c:	20003bb7 	.word	0x20003bb7
    9c80:	2000048c 	.word	0x2000048c
    9c84:	20000486 	.word	0x20000486
    9c88:	200005cc 	.word	0x200005cc
    9c8c:	000005e5 	.word	0x000005e5
    9c90:	20003bb8 	.word	0x20003bb8

00009c94 <w5500_write_socket_udp>:

WORD w5500_write_socket_udp (BYTE sock_numb)
{
    9c94:	b590      	push	{r4, r7, lr}
    9c96:	b085      	sub	sp, #20
    9c98:	af00      	add	r7, sp, #0
    9c9a:	0002      	movs	r2, r0
    9c9c:	1dfb      	adds	r3, r7, #7
    9c9e:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500 = 0;
	static BYTE numb_static = 0;
	WORD cnt = 0;
    9ca0:	230e      	movs	r3, #14
    9ca2:	18fb      	adds	r3, r7, r3
    9ca4:	2200      	movs	r2, #0
    9ca6:	801a      	strh	r2, [r3, #0]
	
	if(numb_static != sock_numb) {numb_static = sock_numb; st_wr_w5500 = 0;}
    9ca8:	4bd9      	ldr	r3, [pc, #868]	; (a010 <w5500_write_socket_udp+0x37c>)
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	1dfa      	adds	r2, r7, #7
    9cae:	7812      	ldrb	r2, [r2, #0]
    9cb0:	429a      	cmp	r2, r3
    9cb2:	d006      	beq.n	9cc2 <w5500_write_socket_udp+0x2e>
    9cb4:	4bd6      	ldr	r3, [pc, #856]	; (a010 <w5500_write_socket_udp+0x37c>)
    9cb6:	1dfa      	adds	r2, r7, #7
    9cb8:	7812      	ldrb	r2, [r2, #0]
    9cba:	701a      	strb	r2, [r3, #0]
    9cbc:	4bd5      	ldr	r3, [pc, #852]	; (a014 <w5500_write_socket_udp+0x380>)
    9cbe:	2200      	movs	r2, #0
    9cc0:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    9cc2:	4bd4      	ldr	r3, [pc, #848]	; (a014 <w5500_write_socket_udp+0x380>)
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	2b08      	cmp	r3, #8
    9cc8:	d900      	bls.n	9ccc <w5500_write_socket_udp+0x38>
    9cca:	e212      	b.n	a0f2 <w5500_write_socket_udp+0x45e>
    9ccc:	009a      	lsls	r2, r3, #2
    9cce:	4bd2      	ldr	r3, [pc, #840]	; (a018 <w5500_write_socket_udp+0x384>)
    9cd0:	18d3      	adds	r3, r2, r3
    9cd2:	681b      	ldr	r3, [r3, #0]
    9cd4:	469f      	mov	pc, r3
	{
		case UDP_RD_TX_STAT:																	//read reg tx status
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;						
    9cd6:	4bd1      	ldr	r3, [pc, #836]	; (a01c <w5500_write_socket_udp+0x388>)
    9cd8:	2220      	movs	r2, #32
    9cda:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9cdc:	1dfb      	adds	r3, r7, #7
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	015b      	lsls	r3, r3, #5
    9ce2:	b21b      	sxth	r3, r3
    9ce4:	2208      	movs	r2, #8
    9ce6:	4313      	orrs	r3, r2
    9ce8:	b21b      	sxth	r3, r3
    9cea:	b29a      	uxth	r2, r3
    9cec:	4bcc      	ldr	r3, [pc, #816]	; (a020 <w5500_write_socket_udp+0x38c>)
    9cee:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    9cf0:	1dfb      	adds	r3, r7, #7
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	3301      	adds	r3, #1
    9cf6:	015a      	lsls	r2, r3, #5
    9cf8:	4bca      	ldr	r3, [pc, #808]	; (a024 <w5500_write_socket_udp+0x390>)
    9cfa:	18d3      	adds	r3, r2, r3
    9cfc:	1dda      	adds	r2, r3, #7
    9cfe:	4bca      	ldr	r3, [pc, #808]	; (a028 <w5500_write_socket_udp+0x394>)
    9d00:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9d02:	4bca      	ldr	r3, [pc, #808]	; (a02c <w5500_write_socket_udp+0x398>)
    9d04:	2206      	movs	r2, #6
    9d06:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9d08:	4bc9      	ldr	r3, [pc, #804]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d0a:	2201      	movs	r2, #1
    9d0c:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d0e:	4bc1      	ldr	r3, [pc, #772]	; (a014 <w5500_write_socket_udp+0x380>)
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	3301      	adds	r3, #1
    9d14:	b2da      	uxtb	r2, r3
    9d16:	4bbf      	ldr	r3, [pc, #764]	; (a014 <w5500_write_socket_udp+0x380>)
    9d18:	701a      	strb	r2, [r3, #0]
		break;
    9d1a:	e1f0      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_IP:																	//write ip
			addr_w5500=ADDR_SOC_D_IP_ADDR0;
    9d1c:	4bbf      	ldr	r3, [pc, #764]	; (a01c <w5500_write_socket_udp+0x388>)
    9d1e:	220c      	movs	r2, #12
    9d20:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d22:	1dfb      	adds	r3, r7, #7
    9d24:	781b      	ldrb	r3, [r3, #0]
    9d26:	015b      	lsls	r3, r3, #5
    9d28:	b21b      	sxth	r3, r3
    9d2a:	2208      	movs	r2, #8
    9d2c:	4313      	orrs	r3, r2
    9d2e:	b21b      	sxth	r3, r3
    9d30:	b29a      	uxth	r2, r3
    9d32:	4bbb      	ldr	r3, [pc, #748]	; (a020 <w5500_write_socket_udp+0x38c>)
    9d34:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].ip_addr;
    9d36:	1dfb      	adds	r3, r7, #7
    9d38:	781b      	ldrb	r3, [r3, #0]
    9d3a:	4abe      	ldr	r2, [pc, #760]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9d3c:	435a      	muls	r2, r3
    9d3e:	4bbe      	ldr	r3, [pc, #760]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9d40:	18d2      	adds	r2, r2, r3
    9d42:	4bb9      	ldr	r3, [pc, #740]	; (a028 <w5500_write_socket_udp+0x394>)
    9d44:	601a      	str	r2, [r3, #0]
			len_buf=4;
    9d46:	4bb9      	ldr	r3, [pc, #740]	; (a02c <w5500_write_socket_udp+0x398>)
    9d48:	2204      	movs	r2, #4
    9d4a:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9d4c:	4bb8      	ldr	r3, [pc, #736]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d4e:	2202      	movs	r2, #2
    9d50:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d52:	4bb0      	ldr	r3, [pc, #704]	; (a014 <w5500_write_socket_udp+0x380>)
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	3301      	adds	r3, #1
    9d58:	b2da      	uxtb	r2, r3
    9d5a:	4bae      	ldr	r3, [pc, #696]	; (a014 <w5500_write_socket_udp+0x380>)
    9d5c:	701a      	strb	r2, [r3, #0]
		break;
    9d5e:	e1ce      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_PORT:																	//write port
			addr_w5500=ADDR_SOC_D_PORT0;
    9d60:	4bae      	ldr	r3, [pc, #696]	; (a01c <w5500_write_socket_udp+0x388>)
    9d62:	2210      	movs	r2, #16
    9d64:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d66:	1dfb      	adds	r3, r7, #7
    9d68:	781b      	ldrb	r3, [r3, #0]
    9d6a:	015b      	lsls	r3, r3, #5
    9d6c:	b21b      	sxth	r3, r3
    9d6e:	2208      	movs	r2, #8
    9d70:	4313      	orrs	r3, r2
    9d72:	b21b      	sxth	r3, r3
    9d74:	b29a      	uxth	r2, r3
    9d76:	4baa      	ldr	r3, [pc, #680]	; (a020 <w5500_write_socket_udp+0x38c>)
    9d78:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].port;
    9d7a:	1dfb      	adds	r3, r7, #7
    9d7c:	781b      	ldrb	r3, [r3, #0]
    9d7e:	4aad      	ldr	r2, [pc, #692]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9d80:	435a      	muls	r2, r3
    9d82:	4bad      	ldr	r3, [pc, #692]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9d84:	18d3      	adds	r3, r2, r3
    9d86:	1d1a      	adds	r2, r3, #4
    9d88:	4ba7      	ldr	r3, [pc, #668]	; (a028 <w5500_write_socket_udp+0x394>)
    9d8a:	601a      	str	r2, [r3, #0]
			len_buf=2;
    9d8c:	4ba7      	ldr	r3, [pc, #668]	; (a02c <w5500_write_socket_udp+0x398>)
    9d8e:	2202      	movs	r2, #2
    9d90:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9d92:	4ba7      	ldr	r3, [pc, #668]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d94:	2202      	movs	r2, #2
    9d96:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d98:	4b9e      	ldr	r3, [pc, #632]	; (a014 <w5500_write_socket_udp+0x380>)
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	3301      	adds	r3, #1
    9d9e:	b2da      	uxtb	r2, r3
    9da0:	4b9c      	ldr	r3, [pc, #624]	; (a014 <w5500_write_socket_udp+0x380>)
    9da2:	701a      	strb	r2, [r3, #0]
		break;
    9da4:	e1ab      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_DATA:																	//write data
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    9da6:	1dfb      	adds	r3, r7, #7
    9da8:	781a      	ldrb	r2, [r3, #0]
    9daa:	49a3      	ldr	r1, [pc, #652]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9dac:	23ba      	movs	r3, #186	; 0xba
    9dae:	00db      	lsls	r3, r3, #3
    9db0:	48a0      	ldr	r0, [pc, #640]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9db2:	4342      	muls	r2, r0
    9db4:	188a      	adds	r2, r1, r2
    9db6:	18d3      	adds	r3, r2, r3
    9db8:	795a      	ldrb	r2, [r3, #5]
    9dba:	799b      	ldrb	r3, [r3, #6]
    9dbc:	021b      	lsls	r3, r3, #8
    9dbe:	4313      	orrs	r3, r2
    9dc0:	b29a      	uxth	r2, r3
    9dc2:	4b96      	ldr	r3, [pc, #600]	; (a01c <w5500_write_socket_udp+0x388>)
    9dc4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    9dc6:	1dfb      	adds	r3, r7, #7
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	015b      	lsls	r3, r3, #5
    9dcc:	b21b      	sxth	r3, r3
    9dce:	2210      	movs	r2, #16
    9dd0:	4313      	orrs	r3, r2
    9dd2:	b21b      	sxth	r3, r3
    9dd4:	b29a      	uxth	r2, r3
    9dd6:	4b92      	ldr	r3, [pc, #584]	; (a020 <w5500_write_socket_udp+0x38c>)
    9dd8:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    9dda:	1dfb      	adds	r3, r7, #7
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	4a95      	ldr	r2, [pc, #596]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9de0:	4353      	muls	r3, r2
    9de2:	3308      	adds	r3, #8
    9de4:	001a      	movs	r2, r3
    9de6:	4b94      	ldr	r3, [pc, #592]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9de8:	18d2      	adds	r2, r2, r3
    9dea:	4b8f      	ldr	r3, [pc, #572]	; (a028 <w5500_write_socket_udp+0x394>)
    9dec:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    9dee:	1dfb      	adds	r3, r7, #7
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	4a91      	ldr	r2, [pc, #580]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9df4:	498f      	ldr	r1, [pc, #572]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9df6:	434b      	muls	r3, r1
    9df8:	18d3      	adds	r3, r2, r3
    9dfa:	3306      	adds	r3, #6
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	021b      	lsls	r3, r3, #8
    9e00:	b21a      	sxth	r2, r3
    9e02:	1dfb      	adds	r3, r7, #7
    9e04:	781b      	ldrb	r3, [r3, #0]
    9e06:	498c      	ldr	r1, [pc, #560]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e08:	488a      	ldr	r0, [pc, #552]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e0a:	4343      	muls	r3, r0
    9e0c:	18cb      	adds	r3, r1, r3
    9e0e:	3307      	adds	r3, #7
    9e10:	781b      	ldrb	r3, [r3, #0]
    9e12:	b21b      	sxth	r3, r3
    9e14:	4313      	orrs	r3, r2
    9e16:	b21b      	sxth	r3, r3
    9e18:	b29a      	uxth	r2, r3
    9e1a:	4b84      	ldr	r3, [pc, #528]	; (a02c <w5500_write_socket_udp+0x398>)
    9e1c:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    9e1e:	1dfb      	adds	r3, r7, #7
    9e20:	7819      	ldrb	r1, [r3, #0]
    9e22:	1dfb      	adds	r3, r7, #7
    9e24:	781a      	ldrb	r2, [r3, #0]
    9e26:	4884      	ldr	r0, [pc, #528]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e28:	23ba      	movs	r3, #186	; 0xba
    9e2a:	00db      	lsls	r3, r3, #3
    9e2c:	4c81      	ldr	r4, [pc, #516]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e2e:	4362      	muls	r2, r4
    9e30:	1882      	adds	r2, r0, r2
    9e32:	18d3      	adds	r3, r2, r3
    9e34:	795a      	ldrb	r2, [r3, #5]
    9e36:	799b      	ldrb	r3, [r3, #6]
    9e38:	021b      	lsls	r3, r3, #8
    9e3a:	4313      	orrs	r3, r2
    9e3c:	b29a      	uxth	r2, r3
    9e3e:	4b7b      	ldr	r3, [pc, #492]	; (a02c <w5500_write_socket_udp+0x398>)
    9e40:	881b      	ldrh	r3, [r3, #0]
    9e42:	18d3      	adds	r3, r2, r3
    9e44:	b29a      	uxth	r2, r3
    9e46:	487c      	ldr	r0, [pc, #496]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e48:	23ba      	movs	r3, #186	; 0xba
    9e4a:	00db      	lsls	r3, r3, #3
    9e4c:	4c79      	ldr	r4, [pc, #484]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e4e:	4361      	muls	r1, r4
    9e50:	1841      	adds	r1, r0, r1
    9e52:	18cb      	adds	r3, r1, r3
    9e54:	3305      	adds	r3, #5
    9e56:	21ff      	movs	r1, #255	; 0xff
    9e58:	4011      	ands	r1, r2
    9e5a:	000c      	movs	r4, r1
    9e5c:	7819      	ldrb	r1, [r3, #0]
    9e5e:	2000      	movs	r0, #0
    9e60:	4001      	ands	r1, r0
    9e62:	1c08      	adds	r0, r1, #0
    9e64:	1c21      	adds	r1, r4, #0
    9e66:	4301      	orrs	r1, r0
    9e68:	7019      	strb	r1, [r3, #0]
    9e6a:	0a12      	lsrs	r2, r2, #8
    9e6c:	b290      	uxth	r0, r2
    9e6e:	785a      	ldrb	r2, [r3, #1]
    9e70:	2100      	movs	r1, #0
    9e72:	400a      	ands	r2, r1
    9e74:	1c11      	adds	r1, r2, #0
    9e76:	1c02      	adds	r2, r0, #0
    9e78:	430a      	orrs	r2, r1
    9e7a:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    9e7c:	4b6c      	ldr	r3, [pc, #432]	; (a030 <w5500_write_socket_udp+0x39c>)
    9e7e:	2202      	movs	r2, #2
    9e80:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9e82:	4b64      	ldr	r3, [pc, #400]	; (a014 <w5500_write_socket_udp+0x380>)
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	3301      	adds	r3, #1
    9e88:	b2da      	uxtb	r2, r3
    9e8a:	4b62      	ldr	r3, [pc, #392]	; (a014 <w5500_write_socket_udp+0x380>)
    9e8c:	701a      	strb	r2, [r3, #0]
		break;
    9e8e:	e136      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_PTR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    9e90:	230e      	movs	r3, #14
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	881a      	ldrh	r2, [r3, #0]
    9e96:	1dfb      	adds	r3, r7, #7
    9e98:	7819      	ldrb	r1, [r3, #0]
    9e9a:	4867      	ldr	r0, [pc, #412]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e9c:	23ba      	movs	r3, #186	; 0xba
    9e9e:	00db      	lsls	r3, r3, #3
    9ea0:	4c64      	ldr	r4, [pc, #400]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9ea2:	4361      	muls	r1, r4
    9ea4:	1841      	adds	r1, r0, r1
    9ea6:	18cb      	adds	r3, r1, r3
    9ea8:	7959      	ldrb	r1, [r3, #5]
    9eaa:	799b      	ldrb	r3, [r3, #6]
    9eac:	021b      	lsls	r3, r3, #8
    9eae:	430b      	orrs	r3, r1
    9eb0:	b29b      	uxth	r3, r3
    9eb2:	0a1b      	lsrs	r3, r3, #8
    9eb4:	b29b      	uxth	r3, r3
    9eb6:	b2d9      	uxtb	r1, r3
    9eb8:	4b60      	ldr	r3, [pc, #384]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9eba:	5499      	strb	r1, [r3, r2]
    9ebc:	230e      	movs	r3, #14
    9ebe:	18fb      	adds	r3, r7, r3
    9ec0:	881a      	ldrh	r2, [r3, #0]
    9ec2:	230e      	movs	r3, #14
    9ec4:	18fb      	adds	r3, r7, r3
    9ec6:	3201      	adds	r2, #1
    9ec8:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    9eca:	230e      	movs	r3, #14
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	881a      	ldrh	r2, [r3, #0]
    9ed0:	1dfb      	adds	r3, r7, #7
    9ed2:	7819      	ldrb	r1, [r3, #0]
    9ed4:	4858      	ldr	r0, [pc, #352]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9ed6:	23ba      	movs	r3, #186	; 0xba
    9ed8:	00db      	lsls	r3, r3, #3
    9eda:	4c56      	ldr	r4, [pc, #344]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9edc:	4361      	muls	r1, r4
    9ede:	1841      	adds	r1, r0, r1
    9ee0:	18cb      	adds	r3, r1, r3
    9ee2:	7959      	ldrb	r1, [r3, #5]
    9ee4:	799b      	ldrb	r3, [r3, #6]
    9ee6:	021b      	lsls	r3, r3, #8
    9ee8:	430b      	orrs	r3, r1
    9eea:	b29b      	uxth	r3, r3
    9eec:	b2d9      	uxtb	r1, r3
    9eee:	4b53      	ldr	r3, [pc, #332]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9ef0:	5499      	strb	r1, [r3, r2]
    9ef2:	230e      	movs	r3, #14
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	881a      	ldrh	r2, [r3, #0]
    9ef8:	230e      	movs	r3, #14
    9efa:	18fb      	adds	r3, r7, r3
    9efc:	3201      	adds	r2, #1
    9efe:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    9f00:	4b46      	ldr	r3, [pc, #280]	; (a01c <w5500_write_socket_udp+0x388>)
    9f02:	2224      	movs	r2, #36	; 0x24
    9f04:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f06:	1dfb      	adds	r3, r7, #7
    9f08:	781b      	ldrb	r3, [r3, #0]
    9f0a:	015b      	lsls	r3, r3, #5
    9f0c:	b21b      	sxth	r3, r3
    9f0e:	2208      	movs	r2, #8
    9f10:	4313      	orrs	r3, r2
    9f12:	b21b      	sxth	r3, r3
    9f14:	b29a      	uxth	r2, r3
    9f16:	4b42      	ldr	r3, [pc, #264]	; (a020 <w5500_write_socket_udp+0x38c>)
    9f18:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9f1a:	4b43      	ldr	r3, [pc, #268]	; (a028 <w5500_write_socket_udp+0x394>)
    9f1c:	4a47      	ldr	r2, [pc, #284]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f1e:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9f20:	4b42      	ldr	r3, [pc, #264]	; (a02c <w5500_write_socket_udp+0x398>)
    9f22:	220e      	movs	r2, #14
    9f24:	18ba      	adds	r2, r7, r2
    9f26:	8812      	ldrh	r2, [r2, #0]
    9f28:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9f2a:	4b41      	ldr	r3, [pc, #260]	; (a030 <w5500_write_socket_udp+0x39c>)
    9f2c:	2202      	movs	r2, #2
    9f2e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f30:	4b38      	ldr	r3, [pc, #224]	; (a014 <w5500_write_socket_udp+0x380>)
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	3301      	adds	r3, #1
    9f36:	b2da      	uxtb	r2, r3
    9f38:	4b36      	ldr	r3, [pc, #216]	; (a014 <w5500_write_socket_udp+0x380>)
    9f3a:	701a      	strb	r2, [r3, #0]
		break;
    9f3c:	e0df      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    9f3e:	230e      	movs	r3, #14
    9f40:	18fb      	adds	r3, r7, r3
    9f42:	881b      	ldrh	r3, [r3, #0]
    9f44:	4a3d      	ldr	r2, [pc, #244]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f46:	2120      	movs	r1, #32
    9f48:	54d1      	strb	r1, [r2, r3]
    9f4a:	230e      	movs	r3, #14
    9f4c:	18fb      	adds	r3, r7, r3
    9f4e:	881a      	ldrh	r2, [r3, #0]
    9f50:	230e      	movs	r3, #14
    9f52:	18fb      	adds	r3, r7, r3
    9f54:	3201      	adds	r2, #1
    9f56:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_COMMAND;
    9f58:	4b30      	ldr	r3, [pc, #192]	; (a01c <w5500_write_socket_udp+0x388>)
    9f5a:	2201      	movs	r2, #1
    9f5c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f5e:	1dfb      	adds	r3, r7, #7
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	015b      	lsls	r3, r3, #5
    9f64:	b21b      	sxth	r3, r3
    9f66:	2208      	movs	r2, #8
    9f68:	4313      	orrs	r3, r2
    9f6a:	b21b      	sxth	r3, r3
    9f6c:	b29a      	uxth	r2, r3
    9f6e:	4b2c      	ldr	r3, [pc, #176]	; (a020 <w5500_write_socket_udp+0x38c>)
    9f70:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9f72:	4b2d      	ldr	r3, [pc, #180]	; (a028 <w5500_write_socket_udp+0x394>)
    9f74:	4a31      	ldr	r2, [pc, #196]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f76:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9f78:	4b2c      	ldr	r3, [pc, #176]	; (a02c <w5500_write_socket_udp+0x398>)
    9f7a:	220e      	movs	r2, #14
    9f7c:	18ba      	adds	r2, r7, r2
    9f7e:	8812      	ldrh	r2, [r2, #0]
    9f80:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9f82:	4b2b      	ldr	r3, [pc, #172]	; (a030 <w5500_write_socket_udp+0x39c>)
    9f84:	2202      	movs	r2, #2
    9f86:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f88:	4b22      	ldr	r3, [pc, #136]	; (a014 <w5500_write_socket_udp+0x380>)
    9f8a:	781b      	ldrb	r3, [r3, #0]
    9f8c:	3301      	adds	r3, #1
    9f8e:	b2da      	uxtb	r2, r3
    9f90:	4b20      	ldr	r3, [pc, #128]	; (a014 <w5500_write_socket_udp+0x380>)
    9f92:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    9f94:	1dfb      	adds	r3, r7, #7
    9f96:	781a      	ldrb	r2, [r3, #0]
    9f98:	4927      	ldr	r1, [pc, #156]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9f9a:	23bc      	movs	r3, #188	; 0xbc
    9f9c:	00db      	lsls	r3, r3, #3
    9f9e:	4825      	ldr	r0, [pc, #148]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9fa0:	4342      	muls	r2, r0
    9fa2:	188a      	adds	r2, r1, r2
    9fa4:	18d3      	adds	r3, r2, r3
    9fa6:	3303      	adds	r3, #3
    9fa8:	781a      	ldrb	r2, [r3, #0]
    9faa:	2100      	movs	r1, #0
    9fac:	400a      	ands	r2, r1
    9fae:	1c11      	adds	r1, r2, #0
    9fb0:	224c      	movs	r2, #76	; 0x4c
    9fb2:	430a      	orrs	r2, r1
    9fb4:	701a      	strb	r2, [r3, #0]
    9fb6:	785a      	ldrb	r2, [r3, #1]
    9fb8:	2100      	movs	r1, #0
    9fba:	400a      	ands	r2, r1
    9fbc:	1c11      	adds	r1, r2, #0
    9fbe:	221d      	movs	r2, #29
    9fc0:	430a      	orrs	r2, r1
    9fc2:	705a      	strb	r2, [r3, #1]
		break;
    9fc4:	e09b      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    9fc6:	4b15      	ldr	r3, [pc, #84]	; (a01c <w5500_write_socket_udp+0x388>)
    9fc8:	2202      	movs	r2, #2
    9fca:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9fcc:	1dfb      	adds	r3, r7, #7
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	015b      	lsls	r3, r3, #5
    9fd2:	b21b      	sxth	r3, r3
    9fd4:	2208      	movs	r2, #8
    9fd6:	4313      	orrs	r3, r2
    9fd8:	b21b      	sxth	r3, r3
    9fda:	b29a      	uxth	r2, r3
    9fdc:	4b10      	ldr	r3, [pc, #64]	; (a020 <w5500_write_socket_udp+0x38c>)
    9fde:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    9fe0:	1dfb      	adds	r3, r7, #7
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	015b      	lsls	r3, r3, #5
    9fe6:	3310      	adds	r3, #16
    9fe8:	001a      	movs	r2, r3
    9fea:	4b0e      	ldr	r3, [pc, #56]	; (a024 <w5500_write_socket_udp+0x390>)
    9fec:	18d3      	adds	r3, r2, r3
    9fee:	1d5a      	adds	r2, r3, #5
    9ff0:	4b0d      	ldr	r3, [pc, #52]	; (a028 <w5500_write_socket_udp+0x394>)
    9ff2:	601a      	str	r2, [r3, #0]
			len_buf=1;
    9ff4:	4b0d      	ldr	r3, [pc, #52]	; (a02c <w5500_write_socket_udp+0x398>)
    9ff6:	2201      	movs	r2, #1
    9ff8:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9ffa:	4b0d      	ldr	r3, [pc, #52]	; (a030 <w5500_write_socket_udp+0x39c>)
    9ffc:	2201      	movs	r2, #1
    9ffe:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a000:	4b04      	ldr	r3, [pc, #16]	; (a014 <w5500_write_socket_udp+0x380>)
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	3301      	adds	r3, #1
    a006:	b2da      	uxtb	r2, r3
    a008:	4b02      	ldr	r3, [pc, #8]	; (a014 <w5500_write_socket_udp+0x380>)
    a00a:	701a      	strb	r2, [r3, #0]
		break;
    a00c:	e077      	b.n	a0fe <w5500_write_socket_udp+0x46a>
    a00e:	46c0      	nop			; (mov r8, r8)
    a010:	2000048e 	.word	0x2000048e
    a014:	2000048f 	.word	0x2000048f
    a018:	0000cb50 	.word	0x0000cb50
    a01c:	20000480 	.word	0x20000480
    a020:	20000482 	.word	0x20000482
    a024:	20003b04 	.word	0x20003b04
    a028:	20003afc 	.word	0x20003afc
    a02c:	20000484 	.word	0x20000484
    a030:	20003bb7 	.word	0x20003bb7
    a034:	000005e5 	.word	0x000005e5
    a038:	200005cc 	.word	0x200005cc
    a03c:	20003bb8 	.word	0x20003bb8
		case UDP_STATUS_CLR:															//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a040:	1dfb      	adds	r3, r7, #7
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	4a30      	ldr	r2, [pc, #192]	; (a108 <w5500_write_socket_udp+0x474>)
    a046:	2110      	movs	r1, #16
    a048:	015b      	lsls	r3, r3, #5
    a04a:	18d3      	adds	r3, r2, r3
    a04c:	185b      	adds	r3, r3, r1
    a04e:	795b      	ldrb	r3, [r3, #5]
    a050:	06db      	lsls	r3, r3, #27
    a052:	0fdb      	lsrs	r3, r3, #31
    a054:	b2db      	uxtb	r3, r3
    a056:	2b01      	cmp	r3, #1
    a058:	d12b      	bne.n	a0b2 <w5500_write_socket_udp+0x41e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    a05a:	230e      	movs	r3, #14
    a05c:	18fb      	adds	r3, r7, r3
    a05e:	881b      	ldrh	r3, [r3, #0]
    a060:	4a2a      	ldr	r2, [pc, #168]	; (a10c <w5500_write_socket_udp+0x478>)
    a062:	2110      	movs	r1, #16
    a064:	54d1      	strb	r1, [r2, r3]
    a066:	230e      	movs	r3, #14
    a068:	18fb      	adds	r3, r7, r3
    a06a:	881a      	ldrh	r2, [r3, #0]
    a06c:	230e      	movs	r3, #14
    a06e:	18fb      	adds	r3, r7, r3
    a070:	3201      	adds	r2, #1
    a072:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    a074:	4b26      	ldr	r3, [pc, #152]	; (a110 <w5500_write_socket_udp+0x47c>)
    a076:	2202      	movs	r2, #2
    a078:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a07a:	1dfb      	adds	r3, r7, #7
    a07c:	781b      	ldrb	r3, [r3, #0]
    a07e:	015b      	lsls	r3, r3, #5
    a080:	b21b      	sxth	r3, r3
    a082:	2208      	movs	r2, #8
    a084:	4313      	orrs	r3, r2
    a086:	b21b      	sxth	r3, r3
    a088:	b29a      	uxth	r2, r3
    a08a:	4b22      	ldr	r3, [pc, #136]	; (a114 <w5500_write_socket_udp+0x480>)
    a08c:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    a08e:	4b22      	ldr	r3, [pc, #136]	; (a118 <w5500_write_socket_udp+0x484>)
    a090:	4a1e      	ldr	r2, [pc, #120]	; (a10c <w5500_write_socket_udp+0x478>)
    a092:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    a094:	4b21      	ldr	r3, [pc, #132]	; (a11c <w5500_write_socket_udp+0x488>)
    a096:	220e      	movs	r2, #14
    a098:	18ba      	adds	r2, r7, r2
    a09a:	8812      	ldrh	r2, [r2, #0]
    a09c:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    a09e:	4b20      	ldr	r3, [pc, #128]	; (a120 <w5500_write_socket_udp+0x48c>)
    a0a0:	2202      	movs	r2, #2
    a0a2:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    a0a4:	4b1f      	ldr	r3, [pc, #124]	; (a124 <w5500_write_socket_udp+0x490>)
    a0a6:	781b      	ldrb	r3, [r3, #0]
    a0a8:	3301      	adds	r3, #1
    a0aa:	b2da      	uxtb	r2, r3
    a0ac:	4b1d      	ldr	r3, [pc, #116]	; (a124 <w5500_write_socket_udp+0x490>)
    a0ae:	701a      	strb	r2, [r3, #0]
				break;
    a0b0:	e025      	b.n	a0fe <w5500_write_socket_udp+0x46a>
			}
			st_wr_w5500--;
    a0b2:	4b1c      	ldr	r3, [pc, #112]	; (a124 <w5500_write_socket_udp+0x490>)
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	3b01      	subs	r3, #1
    a0b8:	b2da      	uxtb	r2, r3
    a0ba:	4b1a      	ldr	r3, [pc, #104]	; (a124 <w5500_write_socket_udp+0x490>)
    a0bc:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    a0be:	1dfb      	adds	r3, r7, #7
    a0c0:	781a      	ldrb	r2, [r3, #0]
    a0c2:	4919      	ldr	r1, [pc, #100]	; (a128 <w5500_write_socket_udp+0x494>)
    a0c4:	23bc      	movs	r3, #188	; 0xbc
    a0c6:	00db      	lsls	r3, r3, #3
    a0c8:	4818      	ldr	r0, [pc, #96]	; (a12c <w5500_write_socket_udp+0x498>)
    a0ca:	4342      	muls	r2, r0
    a0cc:	188a      	adds	r2, r1, r2
    a0ce:	18d3      	adds	r3, r2, r3
    a0d0:	78da      	ldrb	r2, [r3, #3]
    a0d2:	791b      	ldrb	r3, [r3, #4]
    a0d4:	021b      	lsls	r3, r3, #8
    a0d6:	4313      	orrs	r3, r2
    a0d8:	b29b      	uxth	r3, r3
    a0da:	2b00      	cmp	r3, #0
    a0dc:	d10e      	bne.n	a0fc <w5500_write_socket_udp+0x468>
			{
				st_wr_w5500=0; 
    a0de:	4b11      	ldr	r3, [pc, #68]	; (a124 <w5500_write_socket_udp+0x490>)
    a0e0:	2200      	movs	r2, #0
    a0e2:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a0e4:	2302      	movs	r3, #2
    a0e6:	e00b      	b.n	a100 <w5500_write_socket_udp+0x46c>
			}
		break;
		case 8:
				st_wr_w5500=0;
    a0e8:	4b0e      	ldr	r3, [pc, #56]	; (a124 <w5500_write_socket_udp+0x490>)
    a0ea:	2200      	movs	r2, #0
    a0ec:	701a      	strb	r2, [r3, #0]
				return PROC_OK;
    a0ee:	2301      	movs	r3, #1
    a0f0:	e006      	b.n	a100 <w5500_write_socket_udp+0x46c>
		break;
		default:
				st_wr_w5500=0; 
    a0f2:	4b0c      	ldr	r3, [pc, #48]	; (a124 <w5500_write_socket_udp+0x490>)
    a0f4:	2200      	movs	r2, #0
    a0f6:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a0f8:	2302      	movs	r3, #2
    a0fa:	e001      	b.n	a100 <w5500_write_socket_udp+0x46c>
		break;
    a0fc:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a0fe:	2300      	movs	r3, #0
}
    a100:	0018      	movs	r0, r3
    a102:	46bd      	mov	sp, r7
    a104:	b005      	add	sp, #20
    a106:	bd90      	pop	{r4, r7, pc}
    a108:	20003b04 	.word	0x20003b04
    a10c:	20003bb8 	.word	0x20003bb8
    a110:	20000480 	.word	0x20000480
    a114:	20000482 	.word	0x20000482
    a118:	20003afc 	.word	0x20003afc
    a11c:	20000484 	.word	0x20000484
    a120:	20003bb7 	.word	0x20003bb7
    a124:	2000048f 	.word	0x2000048f
    a128:	200005cc 	.word	0x200005cc
    a12c:	000005e5 	.word	0x000005e5

0000a130 <w5500_cmd_read_socket_tcp>:

WORD w5500_cmd_read_socket_tcp (BYTE sock_numb)
{
    a130:	b590      	push	{r4, r7, lr}
    a132:	b085      	sub	sp, #20
    a134:	af00      	add	r7, sp, #0
    a136:	0002      	movs	r2, r0
    a138:	1dfb      	adds	r3, r7, #7
    a13a:	701a      	strb	r2, [r3, #0]
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	static BYTE status_ded[MAX_SOCKETS_CNT];
	BYTE cnt=0;
    a13c:	230f      	movs	r3, #15
    a13e:	18fb      	adds	r3, r7, r3
    a140:	2200      	movs	r2, #0
    a142:	701a      	strb	r2, [r3, #0]

	switch(st_cmd_w5500)
    a144:	4bd2      	ldr	r3, [pc, #840]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	2b06      	cmp	r3, #6
    a14a:	d900      	bls.n	a14e <w5500_cmd_read_socket_tcp+0x1e>
    a14c:	e24e      	b.n	a5ec <w5500_cmd_read_socket_tcp+0x4bc>
    a14e:	009a      	lsls	r2, r3, #2
    a150:	4bd0      	ldr	r3, [pc, #832]	; (a494 <w5500_cmd_read_socket_tcp+0x364>)
    a152:	18d3      	adds	r3, r2, r3
    a154:	681b      	ldr	r3, [r3, #0]
    a156:	469f      	mov	pc, r3
	{
		case TCP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr
    a158:	4bcf      	ldr	r3, [pc, #828]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a15a:	2226      	movs	r2, #38	; 0x26
    a15c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a15e:	1dfb      	adds	r3, r7, #7
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	015b      	lsls	r3, r3, #5
    a164:	b21b      	sxth	r3, r3
    a166:	2208      	movs	r2, #8
    a168:	4313      	orrs	r3, r2
    a16a:	b21b      	sxth	r3, r3
    a16c:	b29a      	uxth	r2, r3
    a16e:	4bcb      	ldr	r3, [pc, #812]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a170:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//data
    a172:	1dfb      	adds	r3, r7, #7
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	015b      	lsls	r3, r3, #5
    a178:	3328      	adds	r3, #40	; 0x28
    a17a:	001a      	movs	r2, r3
    a17c:	4bc8      	ldr	r3, [pc, #800]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a17e:	18d3      	adds	r3, r2, r3
    a180:	1d5a      	adds	r2, r3, #5
    a182:	4bc8      	ldr	r3, [pc, #800]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a184:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a186:	4bc8      	ldr	r3, [pc, #800]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a188:	2206      	movs	r2, #6
    a18a:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a18c:	4bc7      	ldr	r3, [pc, #796]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a18e:	2201      	movs	r2, #1
    a190:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_PART_RD; //"next"
    a192:	4bbf      	ldr	r3, [pc, #764]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a194:	2201      	movs	r2, #1
    a196:	701a      	strb	r2, [r3, #0]
			size=0; 
    a198:	4bc5      	ldr	r3, [pc, #788]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a19a:	2200      	movs	r2, #0
    a19c:	801a      	strh	r2, [r3, #0]
			
			eth_sock[sock_numb].check_connect_cnt++;
    a19e:	1dfb      	adds	r3, r7, #7
    a1a0:	781b      	ldrb	r3, [r3, #0]
    a1a2:	48c4      	ldr	r0, [pc, #784]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1a4:	22bc      	movs	r2, #188	; 0xbc
    a1a6:	00d2      	lsls	r2, r2, #3
    a1a8:	49c3      	ldr	r1, [pc, #780]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a1aa:	4359      	muls	r1, r3
    a1ac:	1841      	adds	r1, r0, r1
    a1ae:	188a      	adds	r2, r1, r2
    a1b0:	7851      	ldrb	r1, [r2, #1]
    a1b2:	7892      	ldrb	r2, [r2, #2]
    a1b4:	0212      	lsls	r2, r2, #8
    a1b6:	430a      	orrs	r2, r1
    a1b8:	b292      	uxth	r2, r2
    a1ba:	3201      	adds	r2, #1
    a1bc:	b292      	uxth	r2, r2
    a1be:	48bd      	ldr	r0, [pc, #756]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1c0:	21bc      	movs	r1, #188	; 0xbc
    a1c2:	00c9      	lsls	r1, r1, #3
    a1c4:	4cbc      	ldr	r4, [pc, #752]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a1c6:	4363      	muls	r3, r4
    a1c8:	18c3      	adds	r3, r0, r3
    a1ca:	185b      	adds	r3, r3, r1
    a1cc:	3301      	adds	r3, #1
    a1ce:	21ff      	movs	r1, #255	; 0xff
    a1d0:	4011      	ands	r1, r2
    a1d2:	000c      	movs	r4, r1
    a1d4:	7819      	ldrb	r1, [r3, #0]
    a1d6:	2000      	movs	r0, #0
    a1d8:	4001      	ands	r1, r0
    a1da:	1c08      	adds	r0, r1, #0
    a1dc:	1c21      	adds	r1, r4, #0
    a1de:	4301      	orrs	r1, r0
    a1e0:	7019      	strb	r1, [r3, #0]
    a1e2:	0a12      	lsrs	r2, r2, #8
    a1e4:	b290      	uxth	r0, r2
    a1e6:	785a      	ldrb	r2, [r3, #1]
    a1e8:	2100      	movs	r1, #0
    a1ea:	400a      	ands	r2, r1
    a1ec:	1c11      	adds	r1, r2, #0
    a1ee:	1c02      	adds	r2, r0, #0
    a1f0:	430a      	orrs	r2, r1
    a1f2:	705a      	strb	r2, [r3, #1]
			if(eth_sock[sock_numb].check_connect_cnt > 5) {st_cmd_w5500 = TCP_STATUS_RD; eth_sock[sock_numb].check_connect_cnt=0;}
    a1f4:	1dfb      	adds	r3, r7, #7
    a1f6:	781a      	ldrb	r2, [r3, #0]
    a1f8:	49ae      	ldr	r1, [pc, #696]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1fa:	23bc      	movs	r3, #188	; 0xbc
    a1fc:	00db      	lsls	r3, r3, #3
    a1fe:	48ae      	ldr	r0, [pc, #696]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a200:	4342      	muls	r2, r0
    a202:	188a      	adds	r2, r1, r2
    a204:	18d3      	adds	r3, r2, r3
    a206:	785a      	ldrb	r2, [r3, #1]
    a208:	789b      	ldrb	r3, [r3, #2]
    a20a:	021b      	lsls	r3, r3, #8
    a20c:	4313      	orrs	r3, r2
    a20e:	b29b      	uxth	r3, r3
    a210:	2b05      	cmp	r3, #5
    a212:	d800      	bhi.n	a216 <w5500_cmd_read_socket_tcp+0xe6>
    a214:	e1ef      	b.n	a5f6 <w5500_cmd_read_socket_tcp+0x4c6>
    a216:	4b9e      	ldr	r3, [pc, #632]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a218:	2205      	movs	r2, #5
    a21a:	701a      	strb	r2, [r3, #0]
    a21c:	1dfb      	adds	r3, r7, #7
    a21e:	781a      	ldrb	r2, [r3, #0]
    a220:	49a4      	ldr	r1, [pc, #656]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a222:	23bc      	movs	r3, #188	; 0xbc
    a224:	00db      	lsls	r3, r3, #3
    a226:	48a4      	ldr	r0, [pc, #656]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a228:	4342      	muls	r2, r0
    a22a:	188a      	adds	r2, r1, r2
    a22c:	18d3      	adds	r3, r2, r3
    a22e:	3301      	adds	r3, #1
    a230:	781a      	ldrb	r2, [r3, #0]
    a232:	2100      	movs	r1, #0
    a234:	400a      	ands	r2, r1
    a236:	701a      	strb	r2, [r3, #0]
    a238:	785a      	ldrb	r2, [r3, #1]
    a23a:	2100      	movs	r1, #0
    a23c:	400a      	ands	r2, r1
    a23e:	705a      	strb	r2, [r3, #1]
		break;	
    a240:	e1d9      	b.n	a5f6 <w5500_cmd_read_socket_tcp+0x4c6>
		case TCP_STATUS_RD:
			addr_w5500=ADDR_SOC_STATUS;//addr in w5500 
    a242:	4b95      	ldr	r3, [pc, #596]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a244:	2203      	movs	r2, #3
    a246:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a248:	1dfb      	adds	r3, r7, #7
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	015b      	lsls	r3, r3, #5
    a24e:	b21b      	sxth	r3, r3
    a250:	2208      	movs	r2, #8
    a252:	4313      	orrs	r3, r2
    a254:	b21b      	sxth	r3, r3
    a256:	b29a      	uxth	r2, r3
    a258:	4b90      	ldr	r3, [pc, #576]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a25a:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R04_Sn_SR_03.Status;//place for write result
    a25c:	1dfb      	adds	r3, r7, #7
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	015b      	lsls	r3, r3, #5
    a262:	3310      	adds	r3, #16
    a264:	001a      	movs	r2, r3
    a266:	4b8e      	ldr	r3, [pc, #568]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a268:	18d3      	adds	r3, r2, r3
    a26a:	1d9a      	adds	r2, r3, #6
    a26c:	4b8d      	ldr	r3, [pc, #564]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a26e:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a270:	4b8d      	ldr	r3, [pc, #564]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a272:	2201      	movs	r2, #1
    a274:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a276:	4b8d      	ldr	r3, [pc, #564]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a278:	2201      	movs	r2, #1
    a27a:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_FORK;//"next" 
    a27c:	4b84      	ldr	r3, [pc, #528]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a27e:	2206      	movs	r2, #6
    a280:	701a      	strb	r2, [r3, #0]
		break;
    a282:	e1b9      	b.n	a5f8 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_FORK:
			if(status_ded[sock_numb]==chip.sockReg[sock_numb].R04_Sn_SR_03.Status){st_cmd_w5500 = TCP_PART_RD; return PROC_WAIT;}
    a284:	1dfb      	adds	r3, r7, #7
    a286:	781b      	ldrb	r3, [r3, #0]
    a288:	4a8c      	ldr	r2, [pc, #560]	; (a4bc <w5500_cmd_read_socket_tcp+0x38c>)
    a28a:	5cd2      	ldrb	r2, [r2, r3]
    a28c:	1dfb      	adds	r3, r7, #7
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	4983      	ldr	r1, [pc, #524]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a292:	015b      	lsls	r3, r3, #5
    a294:	18cb      	adds	r3, r1, r3
    a296:	3316      	adds	r3, #22
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	429a      	cmp	r2, r3
    a29c:	d104      	bne.n	a2a8 <w5500_cmd_read_socket_tcp+0x178>
    a29e:	4b7c      	ldr	r3, [pc, #496]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a2a0:	2201      	movs	r2, #1
    a2a2:	701a      	strb	r2, [r3, #0]
    a2a4:	2300      	movs	r3, #0
    a2a6:	e1a8      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
			status_ded[sock_numb]=chip.sockReg[sock_numb].R04_Sn_SR_03.Status;
    a2a8:	1dfb      	adds	r3, r7, #7
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	1dfa      	adds	r2, r7, #7
    a2ae:	7812      	ldrb	r2, [r2, #0]
    a2b0:	497b      	ldr	r1, [pc, #492]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a2b2:	0152      	lsls	r2, r2, #5
    a2b4:	188a      	adds	r2, r1, r2
    a2b6:	3216      	adds	r2, #22
    a2b8:	7811      	ldrb	r1, [r2, #0]
    a2ba:	4a80      	ldr	r2, [pc, #512]	; (a4bc <w5500_cmd_read_socket_tcp+0x38c>)
    a2bc:	54d1      	strb	r1, [r2, r3]
			switch(chip.sockReg[sock_numb].R04_Sn_SR_03.Status)
    a2be:	1dfb      	adds	r3, r7, #7
    a2c0:	781b      	ldrb	r3, [r3, #0]
    a2c2:	4a77      	ldr	r2, [pc, #476]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a2c4:	015b      	lsls	r3, r3, #5
    a2c6:	18d3      	adds	r3, r2, r3
    a2c8:	3316      	adds	r3, #22
    a2ca:	781b      	ldrb	r3, [r3, #0]
    a2cc:	2b13      	cmp	r3, #19
    a2ce:	d00a      	beq.n	a2e6 <w5500_cmd_read_socket_tcp+0x1b6>
    a2d0:	2b1c      	cmp	r3, #28
    a2d2:	d00f      	beq.n	a2f4 <w5500_cmd_read_socket_tcp+0x1c4>
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d114      	bne.n	a302 <w5500_cmd_read_socket_tcp+0x1d2>
			{
				case ST_CLOSE:
					wbuf_w55[cnt]=CMD_OPEN;
    a2d8:	230f      	movs	r3, #15
    a2da:	18fb      	adds	r3, r7, r3
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	4a78      	ldr	r2, [pc, #480]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2e0:	2101      	movs	r1, #1
    a2e2:	54d1      	strb	r1, [r2, r3]
				break;
    a2e4:	e012      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_INIT:
					wbuf_w55[cnt]=CMD_LISTEN;
    a2e6:	230f      	movs	r3, #15
    a2e8:	18fb      	adds	r3, r7, r3
    a2ea:	781b      	ldrb	r3, [r3, #0]
    a2ec:	4a74      	ldr	r2, [pc, #464]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2ee:	2102      	movs	r1, #2
    a2f0:	54d1      	strb	r1, [r2, r3]
				break;
    a2f2:	e00b      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_CLOSE_WAIT:
					wbuf_w55[cnt]=CMD_CLOSE;			
    a2f4:	230f      	movs	r3, #15
    a2f6:	18fb      	adds	r3, r7, r3
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4a71      	ldr	r2, [pc, #452]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2fc:	2110      	movs	r1, #16
    a2fe:	54d1      	strb	r1, [r2, r3]
				break;
    a300:	e004      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				default:
					st_cmd_w5500=TCP_PART_RD;
    a302:	4b63      	ldr	r3, [pc, #396]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a304:	2201      	movs	r2, #1
    a306:	701a      	strb	r2, [r3, #0]
				return PROC_WAIT;
    a308:	2300      	movs	r3, #0
    a30a:	e176      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
			}
			addr_w5500=ADDR_SOC_COMMAND;
    a30c:	4b62      	ldr	r3, [pc, #392]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a30e:	2201      	movs	r2, #1
    a310:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a312:	1dfb      	adds	r3, r7, #7
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	015b      	lsls	r3, r3, #5
    a318:	b21b      	sxth	r3, r3
    a31a:	2208      	movs	r2, #8
    a31c:	4313      	orrs	r3, r2
    a31e:	b21b      	sxth	r3, r3
    a320:	b29a      	uxth	r2, r3
    a322:	4b5e      	ldr	r3, [pc, #376]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a324:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a326:	4b5f      	ldr	r3, [pc, #380]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a328:	4a65      	ldr	r2, [pc, #404]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a32a:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a32c:	4b5e      	ldr	r3, [pc, #376]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a32e:	2201      	movs	r2, #1
    a330:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a332:	4b5e      	ldr	r3, [pc, #376]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a334:	2202      	movs	r2, #2
    a336:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500=TCP_STATUS_RD;
    a338:	4b55      	ldr	r3, [pc, #340]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a33a:	2205      	movs	r2, #5
    a33c:	701a      	strb	r2, [r3, #0]
		break;
    a33e:	e15b      	b.n	a5f8 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_PART_RD:	
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    a340:	1dfb      	adds	r3, r7, #7
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	4a56      	ldr	r2, [pc, #344]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a346:	212d      	movs	r1, #45	; 0x2d
    a348:	015b      	lsls	r3, r3, #5
    a34a:	18d3      	adds	r3, r2, r3
    a34c:	185b      	adds	r3, r3, r1
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	021b      	lsls	r3, r3, #8
    a352:	b21a      	sxth	r2, r3
    a354:	1dfb      	adds	r3, r7, #7
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	4951      	ldr	r1, [pc, #324]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a35a:	202e      	movs	r0, #46	; 0x2e
    a35c:	015b      	lsls	r3, r3, #5
    a35e:	18cb      	adds	r3, r1, r3
    a360:	181b      	adds	r3, r3, r0
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	b21b      	sxth	r3, r3
    a366:	4313      	orrs	r3, r2
    a368:	b21b      	sxth	r3, r3
    a36a:	b29a      	uxth	r2, r3
    a36c:	4b55      	ldr	r3, [pc, #340]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a36e:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return		
    a370:	4b54      	ldr	r3, [pc, #336]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a372:	881b      	ldrh	r3, [r3, #0]
    a374:	b29b      	uxth	r3, r3
    a376:	2b00      	cmp	r3, #0
    a378:	d100      	bne.n	a37c <w5500_cmd_read_socket_tcp+0x24c>
    a37a:	e084      	b.n	a486 <w5500_cmd_read_socket_tcp+0x356>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;//addr start messege
    a37c:	1dfb      	adds	r3, r7, #7
    a37e:	781a      	ldrb	r2, [r3, #0]
    a380:	494c      	ldr	r1, [pc, #304]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a382:	23ba      	movs	r3, #186	; 0xba
    a384:	00db      	lsls	r3, r3, #3
    a386:	484c      	ldr	r0, [pc, #304]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a388:	4342      	muls	r2, r0
    a38a:	188a      	adds	r2, r1, r2
    a38c:	18d3      	adds	r3, r2, r3
    a38e:	78da      	ldrb	r2, [r3, #3]
    a390:	791b      	ldrb	r3, [r3, #4]
    a392:	021b      	lsls	r3, r3, #8
    a394:	4313      	orrs	r3, r2
    a396:	b29a      	uxth	r2, r3
    a398:	4b3f      	ldr	r3, [pc, #252]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a39a:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);//bsb sock RX
    a39c:	1dfb      	adds	r3, r7, #7
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	015b      	lsls	r3, r3, #5
    a3a2:	b21b      	sxth	r3, r3
    a3a4:	2218      	movs	r2, #24
    a3a6:	4313      	orrs	r3, r2
    a3a8:	b21b      	sxth	r3, r3
    a3aa:	b29a      	uxth	r2, r3
    a3ac:	4b3b      	ldr	r3, [pc, #236]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a3ae:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb].data;
    a3b0:	1dfb      	adds	r3, r7, #7
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	4a40      	ldr	r2, [pc, #256]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3b6:	4353      	muls	r3, r2
    a3b8:	3308      	adds	r3, #8
    a3ba:	001a      	movs	r2, r3
    a3bc:	4b3d      	ldr	r3, [pc, #244]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3be:	18d2      	adds	r2, r2, r3
    a3c0:	4b38      	ldr	r3, [pc, #224]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a3c2:	601a      	str	r2, [r3, #0]
				len_buf = sizert;
    a3c4:	4b3f      	ldr	r3, [pc, #252]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a3c6:	881b      	ldrh	r3, [r3, #0]
    a3c8:	b29a      	uxth	r2, r3
    a3ca:	4b37      	ldr	r3, [pc, #220]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a3cc:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    a3ce:	1dfb      	adds	r3, r7, #7
    a3d0:	7819      	ldrb	r1, [r3, #0]
    a3d2:	1dfb      	adds	r3, r7, #7
    a3d4:	781a      	ldrb	r2, [r3, #0]
    a3d6:	4837      	ldr	r0, [pc, #220]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3d8:	23ba      	movs	r3, #186	; 0xba
    a3da:	00db      	lsls	r3, r3, #3
    a3dc:	4c36      	ldr	r4, [pc, #216]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3de:	4362      	muls	r2, r4
    a3e0:	1882      	adds	r2, r0, r2
    a3e2:	18d3      	adds	r3, r2, r3
    a3e4:	78da      	ldrb	r2, [r3, #3]
    a3e6:	791b      	ldrb	r3, [r3, #4]
    a3e8:	021b      	lsls	r3, r3, #8
    a3ea:	4313      	orrs	r3, r2
    a3ec:	b29a      	uxth	r2, r3
    a3ee:	4b2e      	ldr	r3, [pc, #184]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a3f0:	881b      	ldrh	r3, [r3, #0]
    a3f2:	18d3      	adds	r3, r2, r3
    a3f4:	b29a      	uxth	r2, r3
    a3f6:	482f      	ldr	r0, [pc, #188]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3f8:	23ba      	movs	r3, #186	; 0xba
    a3fa:	00db      	lsls	r3, r3, #3
    a3fc:	4c2e      	ldr	r4, [pc, #184]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3fe:	4361      	muls	r1, r4
    a400:	1841      	adds	r1, r0, r1
    a402:	18cb      	adds	r3, r1, r3
    a404:	3303      	adds	r3, #3
    a406:	21ff      	movs	r1, #255	; 0xff
    a408:	4011      	ands	r1, r2
    a40a:	000c      	movs	r4, r1
    a40c:	7819      	ldrb	r1, [r3, #0]
    a40e:	2000      	movs	r0, #0
    a410:	4001      	ands	r1, r0
    a412:	1c08      	adds	r0, r1, #0
    a414:	1c21      	adds	r1, r4, #0
    a416:	4301      	orrs	r1, r0
    a418:	7019      	strb	r1, [r3, #0]
    a41a:	0a12      	lsrs	r2, r2, #8
    a41c:	b290      	uxth	r0, r2
    a41e:	785a      	ldrb	r2, [r3, #1]
    a420:	2100      	movs	r1, #0
    a422:	400a      	ands	r2, r1
    a424:	1c11      	adds	r1, r2, #0
    a426:	1c02      	adds	r2, r0, #0
    a428:	430a      	orrs	r2, r1
    a42a:	705a      	strb	r2, [r3, #1]
				
				size=len_buf;
    a42c:	4b1e      	ldr	r3, [pc, #120]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a42e:	881a      	ldrh	r2, [r3, #0]
    a430:	4b1f      	ldr	r3, [pc, #124]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a432:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_TCP){size=PROC_ER;}
    a434:	4b1c      	ldr	r3, [pc, #112]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a436:	881b      	ldrh	r3, [r3, #0]
    a438:	4a23      	ldr	r2, [pc, #140]	; (a4c8 <w5500_cmd_read_socket_tcp+0x398>)
    a43a:	4293      	cmp	r3, r2
    a43c:	d902      	bls.n	a444 <w5500_cmd_read_socket_tcp+0x314>
    a43e:	4b1c      	ldr	r3, [pc, #112]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a440:	2202      	movs	r2, #2
    a442:	801a      	strh	r2, [r3, #0]
					
				eth_sock[sock_numb].len[0]=	(size & 0xFF00)>>8;
    a444:	1dfb      	adds	r3, r7, #7
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	4a19      	ldr	r2, [pc, #100]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a44a:	8812      	ldrh	r2, [r2, #0]
    a44c:	0a12      	lsrs	r2, r2, #8
    a44e:	b292      	uxth	r2, r2
    a450:	b2d0      	uxtb	r0, r2
    a452:	4a18      	ldr	r2, [pc, #96]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a454:	4918      	ldr	r1, [pc, #96]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a456:	434b      	muls	r3, r1
    a458:	18d3      	adds	r3, r2, r3
    a45a:	3306      	adds	r3, #6
    a45c:	1c02      	adds	r2, r0, #0
    a45e:	701a      	strb	r2, [r3, #0]
				eth_sock[sock_numb].len[1]=	(size & 0x00FF);							
    a460:	1dfb      	adds	r3, r7, #7
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	4a12      	ldr	r2, [pc, #72]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a466:	8812      	ldrh	r2, [r2, #0]
    a468:	b2d0      	uxtb	r0, r2
    a46a:	4a12      	ldr	r2, [pc, #72]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a46c:	4912      	ldr	r1, [pc, #72]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a46e:	434b      	muls	r3, r1
    a470:	18d3      	adds	r3, r2, r3
    a472:	3307      	adds	r3, #7
    a474:	1c02      	adds	r2, r0, #0
    a476:	701a      	strb	r2, [r3, #0]
				cmd=READ_DATA;
    a478:	4b0c      	ldr	r3, [pc, #48]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a47a:	2201      	movs	r2, #1
    a47c:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500 = TCP_DROP_PTR;
    a47e:	4b04      	ldr	r3, [pc, #16]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a480:	2203      	movs	r2, #3
    a482:	701a      	strb	r2, [r3, #0]
				break;
    a484:	e0b8      	b.n	a5f8 <w5500_cmd_read_socket_tcp+0x4c8>
			}
			st_cmd_w5500=TCP_GIVE_LEN;
    a486:	4b02      	ldr	r3, [pc, #8]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a488:	2200      	movs	r2, #0
    a48a:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    a48c:	2302      	movs	r3, #2
    a48e:	e0b4      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
    a490:	20000490 	.word	0x20000490
    a494:	0000cb74 	.word	0x0000cb74
    a498:	20000480 	.word	0x20000480
    a49c:	20000482 	.word	0x20000482
    a4a0:	20003b04 	.word	0x20003b04
    a4a4:	20003afc 	.word	0x20003afc
    a4a8:	20000484 	.word	0x20000484
    a4ac:	20003bb7 	.word	0x20003bb7
    a4b0:	20000492 	.word	0x20000492
    a4b4:	200005cc 	.word	0x200005cc
    a4b8:	000005e5 	.word	0x000005e5
    a4bc:	20000494 	.word	0x20000494
    a4c0:	20003bb8 	.word	0x20003bb8
    a4c4:	20000486 	.word	0x20000486
    a4c8:	000005b4 	.word	0x000005b4
		break;
		case TCP_DROP_PTR:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    a4cc:	230f      	movs	r3, #15
    a4ce:	18fb      	adds	r3, r7, r3
    a4d0:	781a      	ldrb	r2, [r3, #0]
    a4d2:	1dfb      	adds	r3, r7, #7
    a4d4:	7819      	ldrb	r1, [r3, #0]
    a4d6:	484b      	ldr	r0, [pc, #300]	; (a604 <w5500_cmd_read_socket_tcp+0x4d4>)
    a4d8:	23ba      	movs	r3, #186	; 0xba
    a4da:	00db      	lsls	r3, r3, #3
    a4dc:	4c4a      	ldr	r4, [pc, #296]	; (a608 <w5500_cmd_read_socket_tcp+0x4d8>)
    a4de:	4361      	muls	r1, r4
    a4e0:	1841      	adds	r1, r0, r1
    a4e2:	18cb      	adds	r3, r1, r3
    a4e4:	78d9      	ldrb	r1, [r3, #3]
    a4e6:	791b      	ldrb	r3, [r3, #4]
    a4e8:	021b      	lsls	r3, r3, #8
    a4ea:	430b      	orrs	r3, r1
    a4ec:	b29b      	uxth	r3, r3
    a4ee:	0a1b      	lsrs	r3, r3, #8
    a4f0:	b29b      	uxth	r3, r3
    a4f2:	b2d9      	uxtb	r1, r3
    a4f4:	4b45      	ldr	r3, [pc, #276]	; (a60c <w5500_cmd_read_socket_tcp+0x4dc>)
    a4f6:	5499      	strb	r1, [r3, r2]
    a4f8:	230f      	movs	r3, #15
    a4fa:	18fb      	adds	r3, r7, r3
    a4fc:	781a      	ldrb	r2, [r3, #0]
    a4fe:	230f      	movs	r3, #15
    a500:	18fb      	adds	r3, r7, r3
    a502:	3201      	adds	r2, #1
    a504:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    a506:	230f      	movs	r3, #15
    a508:	18fb      	adds	r3, r7, r3
    a50a:	781a      	ldrb	r2, [r3, #0]
    a50c:	1dfb      	adds	r3, r7, #7
    a50e:	7819      	ldrb	r1, [r3, #0]
    a510:	483c      	ldr	r0, [pc, #240]	; (a604 <w5500_cmd_read_socket_tcp+0x4d4>)
    a512:	23ba      	movs	r3, #186	; 0xba
    a514:	00db      	lsls	r3, r3, #3
    a516:	4c3c      	ldr	r4, [pc, #240]	; (a608 <w5500_cmd_read_socket_tcp+0x4d8>)
    a518:	4361      	muls	r1, r4
    a51a:	1841      	adds	r1, r0, r1
    a51c:	18cb      	adds	r3, r1, r3
    a51e:	78d9      	ldrb	r1, [r3, #3]
    a520:	791b      	ldrb	r3, [r3, #4]
    a522:	021b      	lsls	r3, r3, #8
    a524:	430b      	orrs	r3, r1
    a526:	b29b      	uxth	r3, r3
    a528:	b2d9      	uxtb	r1, r3
    a52a:	4b38      	ldr	r3, [pc, #224]	; (a60c <w5500_cmd_read_socket_tcp+0x4dc>)
    a52c:	5499      	strb	r1, [r3, r2]
    a52e:	230f      	movs	r3, #15
    a530:	18fb      	adds	r3, r7, r3
    a532:	781a      	ldrb	r2, [r3, #0]
    a534:	230f      	movs	r3, #15
    a536:	18fb      	adds	r3, r7, r3
    a538:	3201      	adds	r2, #1
    a53a:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;
    a53c:	4b34      	ldr	r3, [pc, #208]	; (a610 <w5500_cmd_read_socket_tcp+0x4e0>)
    a53e:	2228      	movs	r2, #40	; 0x28
    a540:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a542:	1dfb      	adds	r3, r7, #7
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	015b      	lsls	r3, r3, #5
    a548:	b21b      	sxth	r3, r3
    a54a:	2208      	movs	r2, #8
    a54c:	4313      	orrs	r3, r2
    a54e:	b21b      	sxth	r3, r3
    a550:	b29a      	uxth	r2, r3
    a552:	4b30      	ldr	r3, [pc, #192]	; (a614 <w5500_cmd_read_socket_tcp+0x4e4>)
    a554:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a556:	4b30      	ldr	r3, [pc, #192]	; (a618 <w5500_cmd_read_socket_tcp+0x4e8>)
    a558:	4a2c      	ldr	r2, [pc, #176]	; (a60c <w5500_cmd_read_socket_tcp+0x4dc>)
    a55a:	601a      	str	r2, [r3, #0]
			len_buf=2;
    a55c:	4b2f      	ldr	r3, [pc, #188]	; (a61c <w5500_cmd_read_socket_tcp+0x4ec>)
    a55e:	2202      	movs	r2, #2
    a560:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a562:	4b2f      	ldr	r3, [pc, #188]	; (a620 <w5500_cmd_read_socket_tcp+0x4f0>)
    a564:	2202      	movs	r2, #2
    a566:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_RSV_CMD;//"next" 
    a568:	4b2e      	ldr	r3, [pc, #184]	; (a624 <w5500_cmd_read_socket_tcp+0x4f4>)
    a56a:	2202      	movs	r2, #2
    a56c:	701a      	strb	r2, [r3, #0]
		break;
    a56e:	e043      	b.n	a5f8 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_RSV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//go to reciv mode (and rewrite number)
    a570:	230f      	movs	r3, #15
    a572:	18fb      	adds	r3, r7, r3
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	4a25      	ldr	r2, [pc, #148]	; (a60c <w5500_cmd_read_socket_tcp+0x4dc>)
    a578:	2140      	movs	r1, #64	; 0x40
    a57a:	54d1      	strb	r1, [r2, r3]
    a57c:	230f      	movs	r3, #15
    a57e:	18fb      	adds	r3, r7, r3
    a580:	781a      	ldrb	r2, [r3, #0]
    a582:	230f      	movs	r3, #15
    a584:	18fb      	adds	r3, r7, r3
    a586:	3201      	adds	r2, #1
    a588:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a58a:	4b21      	ldr	r3, [pc, #132]	; (a610 <w5500_cmd_read_socket_tcp+0x4e0>)
    a58c:	2201      	movs	r2, #1
    a58e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a590:	1dfb      	adds	r3, r7, #7
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	015b      	lsls	r3, r3, #5
    a596:	b21b      	sxth	r3, r3
    a598:	2208      	movs	r2, #8
    a59a:	4313      	orrs	r3, r2
    a59c:	b21b      	sxth	r3, r3
    a59e:	b29a      	uxth	r2, r3
    a5a0:	4b1c      	ldr	r3, [pc, #112]	; (a614 <w5500_cmd_read_socket_tcp+0x4e4>)
    a5a2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a5a4:	4b1c      	ldr	r3, [pc, #112]	; (a618 <w5500_cmd_read_socket_tcp+0x4e8>)
    a5a6:	4a19      	ldr	r2, [pc, #100]	; (a60c <w5500_cmd_read_socket_tcp+0x4dc>)
    a5a8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a5aa:	230f      	movs	r3, #15
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	b29a      	uxth	r2, r3
    a5b2:	4b1a      	ldr	r3, [pc, #104]	; (a61c <w5500_cmd_read_socket_tcp+0x4ec>)
    a5b4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a5b6:	4b1a      	ldr	r3, [pc, #104]	; (a620 <w5500_cmd_read_socket_tcp+0x4f0>)
    a5b8:	2202      	movs	r2, #2
    a5ba:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_BK_START;//"next" 
    a5bc:	4b19      	ldr	r3, [pc, #100]	; (a624 <w5500_cmd_read_socket_tcp+0x4f4>)
    a5be:	2204      	movs	r2, #4
    a5c0:	701a      	strb	r2, [r3, #0]
		break;
    a5c2:	e019      	b.n	a5f8 <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_BK_START:
			st_cmd_w5500=TCP_GIVE_LEN;//сброс параметров
    a5c4:	4b17      	ldr	r3, [pc, #92]	; (a624 <w5500_cmd_read_socket_tcp+0x4f4>)
    a5c6:	2200      	movs	r2, #0
    a5c8:	701a      	strb	r2, [r3, #0]
			if(!size)					 {return PROC_ER;}
    a5ca:	4b17      	ldr	r3, [pc, #92]	; (a628 <w5500_cmd_read_socket_tcp+0x4f8>)
    a5cc:	881b      	ldrh	r3, [r3, #0]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d101      	bne.n	a5d6 <w5500_cmd_read_socket_tcp+0x4a6>
    a5d2:	2302      	movs	r3, #2
    a5d4:	e011      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
			if(size > USART_BUF_SIZE)	 {return PROC_ER;}
    a5d6:	4b14      	ldr	r3, [pc, #80]	; (a628 <w5500_cmd_read_socket_tcp+0x4f8>)
    a5d8:	881a      	ldrh	r2, [r3, #0]
    a5da:	2380      	movs	r3, #128	; 0x80
    a5dc:	005b      	lsls	r3, r3, #1
    a5de:	429a      	cmp	r2, r3
    a5e0:	d901      	bls.n	a5e6 <w5500_cmd_read_socket_tcp+0x4b6>
    a5e2:	2302      	movs	r3, #2
    a5e4:	e009      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
			return (size);
    a5e6:	4b10      	ldr	r3, [pc, #64]	; (a628 <w5500_cmd_read_socket_tcp+0x4f8>)
    a5e8:	881b      	ldrh	r3, [r3, #0]
    a5ea:	e006      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    a5ec:	4b0d      	ldr	r3, [pc, #52]	; (a624 <w5500_cmd_read_socket_tcp+0x4f4>)
    a5ee:	2200      	movs	r2, #0
    a5f0:	701a      	strb	r2, [r3, #0]
    a5f2:	2302      	movs	r3, #2
    a5f4:	e001      	b.n	a5fa <w5500_cmd_read_socket_tcp+0x4ca>
		break;	
    a5f6:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a5f8:	2300      	movs	r3, #0
}
    a5fa:	0018      	movs	r0, r3
    a5fc:	46bd      	mov	sp, r7
    a5fe:	b005      	add	sp, #20
    a600:	bd90      	pop	{r4, r7, pc}
    a602:	46c0      	nop			; (mov r8, r8)
    a604:	200005cc 	.word	0x200005cc
    a608:	000005e5 	.word	0x000005e5
    a60c:	20003bb8 	.word	0x20003bb8
    a610:	20000480 	.word	0x20000480
    a614:	20000482 	.word	0x20000482
    a618:	20003afc 	.word	0x20003afc
    a61c:	20000484 	.word	0x20000484
    a620:	20003bb7 	.word	0x20003bb7
    a624:	20000490 	.word	0x20000490
    a628:	20000492 	.word	0x20000492

0000a62c <w5500_write_socket_tcp>:

WORD w5500_write_socket_tcp (BYTE sock_numb)
{
    a62c:	b590      	push	{r4, r7, lr}
    a62e:	b085      	sub	sp, #20
    a630:	af00      	add	r7, sp, #0
    a632:	0002      	movs	r2, r0
    a634:	1dfb      	adds	r3, r7, #7
    a636:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500=0;
	static BYTE numb_static=0;
	WORD cnt=0;
    a638:	230e      	movs	r3, #14
    a63a:	18fb      	adds	r3, r7, r3
    a63c:	2200      	movs	r2, #0
    a63e:	801a      	strh	r2, [r3, #0]
	
	if(numb_static!=sock_numb){numb_static=sock_numb;st_wr_w5500=0;}
    a640:	4bdc      	ldr	r3, [pc, #880]	; (a9b4 <w5500_write_socket_tcp+0x388>)
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	1dfa      	adds	r2, r7, #7
    a646:	7812      	ldrb	r2, [r2, #0]
    a648:	429a      	cmp	r2, r3
    a64a:	d006      	beq.n	a65a <w5500_write_socket_tcp+0x2e>
    a64c:	4bd9      	ldr	r3, [pc, #868]	; (a9b4 <w5500_write_socket_tcp+0x388>)
    a64e:	1dfa      	adds	r2, r7, #7
    a650:	7812      	ldrb	r2, [r2, #0]
    a652:	701a      	strb	r2, [r3, #0]
    a654:	4bd8      	ldr	r3, [pc, #864]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a656:	2200      	movs	r2, #0
    a658:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    a65a:	4bd7      	ldr	r3, [pc, #860]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a65c:	781b      	ldrb	r3, [r3, #0]
    a65e:	2b06      	cmp	r3, #6
    a660:	d900      	bls.n	a664 <w5500_write_socket_tcp+0x38>
    a662:	e21a      	b.n	aa9a <w5500_write_socket_tcp+0x46e>
    a664:	009a      	lsls	r2, r3, #2
    a666:	4bd5      	ldr	r3, [pc, #852]	; (a9bc <w5500_write_socket_tcp+0x390>)
    a668:	18d3      	adds	r3, r2, r3
    a66a:	681b      	ldr	r3, [r3, #0]
    a66c:	469f      	mov	pc, r3
	{
		case TCP_RD_FSR:																	//read reg tx status FSR
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;
    a66e:	4bd4      	ldr	r3, [pc, #848]	; (a9c0 <w5500_write_socket_tcp+0x394>)
    a670:	2220      	movs	r2, #32
    a672:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a674:	1dfb      	adds	r3, r7, #7
    a676:	781b      	ldrb	r3, [r3, #0]
    a678:	015b      	lsls	r3, r3, #5
    a67a:	b21b      	sxth	r3, r3
    a67c:	2208      	movs	r2, #8
    a67e:	4313      	orrs	r3, r2
    a680:	b21b      	sxth	r3, r3
    a682:	b29a      	uxth	r2, r3
    a684:	4bcf      	ldr	r3, [pc, #828]	; (a9c4 <w5500_write_socket_tcp+0x398>)
    a686:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    a688:	1dfb      	adds	r3, r7, #7
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	3301      	adds	r3, #1
    a68e:	015a      	lsls	r2, r3, #5
    a690:	4bcd      	ldr	r3, [pc, #820]	; (a9c8 <w5500_write_socket_tcp+0x39c>)
    a692:	18d3      	adds	r3, r2, r3
    a694:	1dda      	adds	r2, r3, #7
    a696:	4bcd      	ldr	r3, [pc, #820]	; (a9cc <w5500_write_socket_tcp+0x3a0>)
    a698:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a69a:	4bcd      	ldr	r3, [pc, #820]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a69c:	2206      	movs	r2, #6
    a69e:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a6a0:	4bcc      	ldr	r3, [pc, #816]	; (a9d4 <w5500_write_socket_tcp+0x3a8>)
    a6a2:	2201      	movs	r2, #1
    a6a4:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a6a6:	4bc4      	ldr	r3, [pc, #784]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a6a8:	781b      	ldrb	r3, [r3, #0]
    a6aa:	3301      	adds	r3, #1
    a6ac:	b2da      	uxtb	r2, r3
    a6ae:	4bc2      	ldr	r3, [pc, #776]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a6b0:	701a      	strb	r2, [r3, #0]
		break;
    a6b2:	e1f8      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
		case TCP_WR_DATA:	
			sizert=	(*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case2);				
    a6b4:	1dfb      	adds	r3, r7, #7
    a6b6:	781b      	ldrb	r3, [r3, #0]
    a6b8:	4ac3      	ldr	r2, [pc, #780]	; (a9c8 <w5500_write_socket_tcp+0x39c>)
    a6ba:	212b      	movs	r1, #43	; 0x2b
    a6bc:	015b      	lsls	r3, r3, #5
    a6be:	18d3      	adds	r3, r2, r3
    a6c0:	185b      	adds	r3, r3, r1
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	021b      	lsls	r3, r3, #8
    a6c6:	b21a      	sxth	r2, r3
    a6c8:	1dfb      	adds	r3, r7, #7
    a6ca:	781b      	ldrb	r3, [r3, #0]
    a6cc:	49be      	ldr	r1, [pc, #760]	; (a9c8 <w5500_write_socket_tcp+0x39c>)
    a6ce:	202c      	movs	r0, #44	; 0x2c
    a6d0:	015b      	lsls	r3, r3, #5
    a6d2:	18cb      	adds	r3, r1, r3
    a6d4:	181b      	adds	r3, r3, r0
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	b21b      	sxth	r3, r3
    a6da:	4313      	orrs	r3, r2
    a6dc:	b21b      	sxth	r3, r3
    a6de:	b29a      	uxth	r2, r3
    a6e0:	4bbd      	ldr	r3, [pc, #756]	; (a9d8 <w5500_write_socket_tcp+0x3ac>)
    a6e2:	801a      	strh	r2, [r3, #0]
			
			if(sizert!=eth_sock[sock_numb].ptr_tx_buf){ eth_sock[sock_numb].ptr_tx_buf=sizert; }
    a6e4:	1dfb      	adds	r3, r7, #7
    a6e6:	781a      	ldrb	r2, [r3, #0]
    a6e8:	49bc      	ldr	r1, [pc, #752]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a6ea:	23ba      	movs	r3, #186	; 0xba
    a6ec:	00db      	lsls	r3, r3, #3
    a6ee:	48bc      	ldr	r0, [pc, #752]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a6f0:	4342      	muls	r2, r0
    a6f2:	188a      	adds	r2, r1, r2
    a6f4:	18d3      	adds	r3, r2, r3
    a6f6:	795a      	ldrb	r2, [r3, #5]
    a6f8:	799b      	ldrb	r3, [r3, #6]
    a6fa:	021b      	lsls	r3, r3, #8
    a6fc:	4313      	orrs	r3, r2
    a6fe:	b29a      	uxth	r2, r3
    a700:	4bb5      	ldr	r3, [pc, #724]	; (a9d8 <w5500_write_socket_tcp+0x3ac>)
    a702:	881b      	ldrh	r3, [r3, #0]
    a704:	b29b      	uxth	r3, r3
    a706:	429a      	cmp	r2, r3
    a708:	d01f      	beq.n	a74a <w5500_write_socket_tcp+0x11e>
    a70a:	1dfb      	adds	r3, r7, #7
    a70c:	7819      	ldrb	r1, [r3, #0]
    a70e:	4bb2      	ldr	r3, [pc, #712]	; (a9d8 <w5500_write_socket_tcp+0x3ac>)
    a710:	881b      	ldrh	r3, [r3, #0]
    a712:	b29a      	uxth	r2, r3
    a714:	48b1      	ldr	r0, [pc, #708]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a716:	23ba      	movs	r3, #186	; 0xba
    a718:	00db      	lsls	r3, r3, #3
    a71a:	4cb1      	ldr	r4, [pc, #708]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a71c:	4361      	muls	r1, r4
    a71e:	1841      	adds	r1, r0, r1
    a720:	18cb      	adds	r3, r1, r3
    a722:	3305      	adds	r3, #5
    a724:	21ff      	movs	r1, #255	; 0xff
    a726:	4011      	ands	r1, r2
    a728:	000c      	movs	r4, r1
    a72a:	7819      	ldrb	r1, [r3, #0]
    a72c:	2000      	movs	r0, #0
    a72e:	4001      	ands	r1, r0
    a730:	1c08      	adds	r0, r1, #0
    a732:	1c21      	adds	r1, r4, #0
    a734:	4301      	orrs	r1, r0
    a736:	7019      	strb	r1, [r3, #0]
    a738:	0a12      	lsrs	r2, r2, #8
    a73a:	b290      	uxth	r0, r2
    a73c:	785a      	ldrb	r2, [r3, #1]
    a73e:	2100      	movs	r1, #0
    a740:	400a      	ands	r2, r1
    a742:	1c11      	adds	r1, r2, #0
    a744:	1c02      	adds	r2, r0, #0
    a746:	430a      	orrs	r2, r1
    a748:	705a      	strb	r2, [r3, #1]
																			
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    a74a:	1dfb      	adds	r3, r7, #7
    a74c:	781a      	ldrb	r2, [r3, #0]
    a74e:	49a3      	ldr	r1, [pc, #652]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a750:	23ba      	movs	r3, #186	; 0xba
    a752:	00db      	lsls	r3, r3, #3
    a754:	48a2      	ldr	r0, [pc, #648]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a756:	4342      	muls	r2, r0
    a758:	188a      	adds	r2, r1, r2
    a75a:	18d3      	adds	r3, r2, r3
    a75c:	795a      	ldrb	r2, [r3, #5]
    a75e:	799b      	ldrb	r3, [r3, #6]
    a760:	021b      	lsls	r3, r3, #8
    a762:	4313      	orrs	r3, r2
    a764:	b29a      	uxth	r2, r3
    a766:	4b96      	ldr	r3, [pc, #600]	; (a9c0 <w5500_write_socket_tcp+0x394>)
    a768:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    a76a:	1dfb      	adds	r3, r7, #7
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	015b      	lsls	r3, r3, #5
    a770:	b21b      	sxth	r3, r3
    a772:	2210      	movs	r2, #16
    a774:	4313      	orrs	r3, r2
    a776:	b21b      	sxth	r3, r3
    a778:	b29a      	uxth	r2, r3
    a77a:	4b92      	ldr	r3, [pc, #584]	; (a9c4 <w5500_write_socket_tcp+0x398>)
    a77c:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    a77e:	1dfb      	adds	r3, r7, #7
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	4a97      	ldr	r2, [pc, #604]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a784:	4353      	muls	r3, r2
    a786:	3308      	adds	r3, #8
    a788:	001a      	movs	r2, r3
    a78a:	4b94      	ldr	r3, [pc, #592]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a78c:	18d2      	adds	r2, r2, r3
    a78e:	4b8f      	ldr	r3, [pc, #572]	; (a9cc <w5500_write_socket_tcp+0x3a0>)
    a790:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    a792:	1dfb      	adds	r3, r7, #7
    a794:	781b      	ldrb	r3, [r3, #0]
    a796:	4a91      	ldr	r2, [pc, #580]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a798:	4991      	ldr	r1, [pc, #580]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a79a:	434b      	muls	r3, r1
    a79c:	18d3      	adds	r3, r2, r3
    a79e:	3306      	adds	r3, #6
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	021b      	lsls	r3, r3, #8
    a7a4:	b21a      	sxth	r2, r3
    a7a6:	1dfb      	adds	r3, r7, #7
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	498c      	ldr	r1, [pc, #560]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a7ac:	488c      	ldr	r0, [pc, #560]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a7ae:	4343      	muls	r3, r0
    a7b0:	18cb      	adds	r3, r1, r3
    a7b2:	3307      	adds	r3, #7
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	b21b      	sxth	r3, r3
    a7b8:	4313      	orrs	r3, r2
    a7ba:	b21b      	sxth	r3, r3
    a7bc:	b29a      	uxth	r2, r3
    a7be:	4b84      	ldr	r3, [pc, #528]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a7c0:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    a7c2:	1dfb      	adds	r3, r7, #7
    a7c4:	7819      	ldrb	r1, [r3, #0]
    a7c6:	1dfb      	adds	r3, r7, #7
    a7c8:	781a      	ldrb	r2, [r3, #0]
    a7ca:	4884      	ldr	r0, [pc, #528]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a7cc:	23ba      	movs	r3, #186	; 0xba
    a7ce:	00db      	lsls	r3, r3, #3
    a7d0:	4c83      	ldr	r4, [pc, #524]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a7d2:	4362      	muls	r2, r4
    a7d4:	1882      	adds	r2, r0, r2
    a7d6:	18d3      	adds	r3, r2, r3
    a7d8:	795a      	ldrb	r2, [r3, #5]
    a7da:	799b      	ldrb	r3, [r3, #6]
    a7dc:	021b      	lsls	r3, r3, #8
    a7de:	4313      	orrs	r3, r2
    a7e0:	b29a      	uxth	r2, r3
    a7e2:	4b7b      	ldr	r3, [pc, #492]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a7e4:	881b      	ldrh	r3, [r3, #0]
    a7e6:	18d3      	adds	r3, r2, r3
    a7e8:	b29a      	uxth	r2, r3
    a7ea:	487c      	ldr	r0, [pc, #496]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a7ec:	23ba      	movs	r3, #186	; 0xba
    a7ee:	00db      	lsls	r3, r3, #3
    a7f0:	4c7b      	ldr	r4, [pc, #492]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a7f2:	4361      	muls	r1, r4
    a7f4:	1841      	adds	r1, r0, r1
    a7f6:	18cb      	adds	r3, r1, r3
    a7f8:	3305      	adds	r3, #5
    a7fa:	21ff      	movs	r1, #255	; 0xff
    a7fc:	4011      	ands	r1, r2
    a7fe:	000c      	movs	r4, r1
    a800:	7819      	ldrb	r1, [r3, #0]
    a802:	2000      	movs	r0, #0
    a804:	4001      	ands	r1, r0
    a806:	1c08      	adds	r0, r1, #0
    a808:	1c21      	adds	r1, r4, #0
    a80a:	4301      	orrs	r1, r0
    a80c:	7019      	strb	r1, [r3, #0]
    a80e:	0a12      	lsrs	r2, r2, #8
    a810:	b290      	uxth	r0, r2
    a812:	785a      	ldrb	r2, [r3, #1]
    a814:	2100      	movs	r1, #0
    a816:	400a      	ands	r2, r1
    a818:	1c11      	adds	r1, r2, #0
    a81a:	1c02      	adds	r2, r0, #0
    a81c:	430a      	orrs	r2, r1
    a81e:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    a820:	4b6c      	ldr	r3, [pc, #432]	; (a9d4 <w5500_write_socket_tcp+0x3a8>)
    a822:	2202      	movs	r2, #2
    a824:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a826:	4b64      	ldr	r3, [pc, #400]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	3301      	adds	r3, #1
    a82c:	b2da      	uxtb	r2, r3
    a82e:	4b62      	ldr	r3, [pc, #392]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a830:	701a      	strb	r2, [r3, #0]
		break;
    a832:	e138      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
		case TCP_PTR_WR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    a834:	230e      	movs	r3, #14
    a836:	18fb      	adds	r3, r7, r3
    a838:	881a      	ldrh	r2, [r3, #0]
    a83a:	1dfb      	adds	r3, r7, #7
    a83c:	7819      	ldrb	r1, [r3, #0]
    a83e:	4867      	ldr	r0, [pc, #412]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a840:	23ba      	movs	r3, #186	; 0xba
    a842:	00db      	lsls	r3, r3, #3
    a844:	4c66      	ldr	r4, [pc, #408]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a846:	4361      	muls	r1, r4
    a848:	1841      	adds	r1, r0, r1
    a84a:	18cb      	adds	r3, r1, r3
    a84c:	7959      	ldrb	r1, [r3, #5]
    a84e:	799b      	ldrb	r3, [r3, #6]
    a850:	021b      	lsls	r3, r3, #8
    a852:	430b      	orrs	r3, r1
    a854:	b29b      	uxth	r3, r3
    a856:	0a1b      	lsrs	r3, r3, #8
    a858:	b29b      	uxth	r3, r3
    a85a:	b2d9      	uxtb	r1, r3
    a85c:	4b61      	ldr	r3, [pc, #388]	; (a9e4 <w5500_write_socket_tcp+0x3b8>)
    a85e:	5499      	strb	r1, [r3, r2]
    a860:	230e      	movs	r3, #14
    a862:	18fb      	adds	r3, r7, r3
    a864:	881a      	ldrh	r2, [r3, #0]
    a866:	230e      	movs	r3, #14
    a868:	18fb      	adds	r3, r7, r3
    a86a:	3201      	adds	r2, #1
    a86c:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    a86e:	230e      	movs	r3, #14
    a870:	18fb      	adds	r3, r7, r3
    a872:	881a      	ldrh	r2, [r3, #0]
    a874:	1dfb      	adds	r3, r7, #7
    a876:	7819      	ldrb	r1, [r3, #0]
    a878:	4858      	ldr	r0, [pc, #352]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a87a:	23ba      	movs	r3, #186	; 0xba
    a87c:	00db      	lsls	r3, r3, #3
    a87e:	4c58      	ldr	r4, [pc, #352]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a880:	4361      	muls	r1, r4
    a882:	1841      	adds	r1, r0, r1
    a884:	18cb      	adds	r3, r1, r3
    a886:	7959      	ldrb	r1, [r3, #5]
    a888:	799b      	ldrb	r3, [r3, #6]
    a88a:	021b      	lsls	r3, r3, #8
    a88c:	430b      	orrs	r3, r1
    a88e:	b29b      	uxth	r3, r3
    a890:	b2d9      	uxtb	r1, r3
    a892:	4b54      	ldr	r3, [pc, #336]	; (a9e4 <w5500_write_socket_tcp+0x3b8>)
    a894:	5499      	strb	r1, [r3, r2]
    a896:	230e      	movs	r3, #14
    a898:	18fb      	adds	r3, r7, r3
    a89a:	881a      	ldrh	r2, [r3, #0]
    a89c:	230e      	movs	r3, #14
    a89e:	18fb      	adds	r3, r7, r3
    a8a0:	3201      	adds	r2, #1
    a8a2:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    a8a4:	4b46      	ldr	r3, [pc, #280]	; (a9c0 <w5500_write_socket_tcp+0x394>)
    a8a6:	2224      	movs	r2, #36	; 0x24
    a8a8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a8aa:	1dfb      	adds	r3, r7, #7
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	015b      	lsls	r3, r3, #5
    a8b0:	b21b      	sxth	r3, r3
    a8b2:	2208      	movs	r2, #8
    a8b4:	4313      	orrs	r3, r2
    a8b6:	b21b      	sxth	r3, r3
    a8b8:	b29a      	uxth	r2, r3
    a8ba:	4b42      	ldr	r3, [pc, #264]	; (a9c4 <w5500_write_socket_tcp+0x398>)
    a8bc:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a8be:	4b43      	ldr	r3, [pc, #268]	; (a9cc <w5500_write_socket_tcp+0x3a0>)
    a8c0:	4a48      	ldr	r2, [pc, #288]	; (a9e4 <w5500_write_socket_tcp+0x3b8>)
    a8c2:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a8c4:	4b42      	ldr	r3, [pc, #264]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a8c6:	220e      	movs	r2, #14
    a8c8:	18ba      	adds	r2, r7, r2
    a8ca:	8812      	ldrh	r2, [r2, #0]
    a8cc:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a8ce:	4b41      	ldr	r3, [pc, #260]	; (a9d4 <w5500_write_socket_tcp+0x3a8>)
    a8d0:	2202      	movs	r2, #2
    a8d2:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a8d4:	4b38      	ldr	r3, [pc, #224]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	3301      	adds	r3, #1
    a8da:	b2da      	uxtb	r2, r3
    a8dc:	4b36      	ldr	r3, [pc, #216]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a8de:	701a      	strb	r2, [r3, #0]
		break;
    a8e0:	e0e1      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
		case TCP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    a8e2:	230e      	movs	r3, #14
    a8e4:	18fb      	adds	r3, r7, r3
    a8e6:	881b      	ldrh	r3, [r3, #0]
    a8e8:	4a3e      	ldr	r2, [pc, #248]	; (a9e4 <w5500_write_socket_tcp+0x3b8>)
    a8ea:	2120      	movs	r1, #32
    a8ec:	54d1      	strb	r1, [r2, r3]
    a8ee:	230e      	movs	r3, #14
    a8f0:	18fb      	adds	r3, r7, r3
    a8f2:	881a      	ldrh	r2, [r3, #0]
    a8f4:	230e      	movs	r3, #14
    a8f6:	18fb      	adds	r3, r7, r3
    a8f8:	3201      	adds	r2, #1
    a8fa:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a8fc:	4b30      	ldr	r3, [pc, #192]	; (a9c0 <w5500_write_socket_tcp+0x394>)
    a8fe:	2201      	movs	r2, #1
    a900:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a902:	1dfb      	adds	r3, r7, #7
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	015b      	lsls	r3, r3, #5
    a908:	b21b      	sxth	r3, r3
    a90a:	2208      	movs	r2, #8
    a90c:	4313      	orrs	r3, r2
    a90e:	b21b      	sxth	r3, r3
    a910:	b29a      	uxth	r2, r3
    a912:	4b2c      	ldr	r3, [pc, #176]	; (a9c4 <w5500_write_socket_tcp+0x398>)
    a914:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a916:	4b2d      	ldr	r3, [pc, #180]	; (a9cc <w5500_write_socket_tcp+0x3a0>)
    a918:	4a32      	ldr	r2, [pc, #200]	; (a9e4 <w5500_write_socket_tcp+0x3b8>)
    a91a:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a91c:	4b2c      	ldr	r3, [pc, #176]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a91e:	220e      	movs	r2, #14
    a920:	18ba      	adds	r2, r7, r2
    a922:	8812      	ldrh	r2, [r2, #0]
    a924:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a926:	4b2b      	ldr	r3, [pc, #172]	; (a9d4 <w5500_write_socket_tcp+0x3a8>)
    a928:	2202      	movs	r2, #2
    a92a:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a92c:	4b22      	ldr	r3, [pc, #136]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	3301      	adds	r3, #1
    a932:	b2da      	uxtb	r2, r3
    a934:	4b20      	ldr	r3, [pc, #128]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a936:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a938:	1dfb      	adds	r3, r7, #7
    a93a:	781a      	ldrb	r2, [r3, #0]
    a93c:	4927      	ldr	r1, [pc, #156]	; (a9dc <w5500_write_socket_tcp+0x3b0>)
    a93e:	23bc      	movs	r3, #188	; 0xbc
    a940:	00db      	lsls	r3, r3, #3
    a942:	4827      	ldr	r0, [pc, #156]	; (a9e0 <w5500_write_socket_tcp+0x3b4>)
    a944:	4342      	muls	r2, r0
    a946:	188a      	adds	r2, r1, r2
    a948:	18d3      	adds	r3, r2, r3
    a94a:	3303      	adds	r3, #3
    a94c:	781a      	ldrb	r2, [r3, #0]
    a94e:	2100      	movs	r1, #0
    a950:	400a      	ands	r2, r1
    a952:	1c11      	adds	r1, r2, #0
    a954:	224c      	movs	r2, #76	; 0x4c
    a956:	430a      	orrs	r2, r1
    a958:	701a      	strb	r2, [r3, #0]
    a95a:	785a      	ldrb	r2, [r3, #1]
    a95c:	2100      	movs	r1, #0
    a95e:	400a      	ands	r2, r1
    a960:	1c11      	adds	r1, r2, #0
    a962:	221d      	movs	r2, #29
    a964:	430a      	orrs	r2, r1
    a966:	705a      	strb	r2, [r3, #1]
		break;
    a968:	e09d      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
		case TCP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    a96a:	4b15      	ldr	r3, [pc, #84]	; (a9c0 <w5500_write_socket_tcp+0x394>)
    a96c:	2202      	movs	r2, #2
    a96e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a970:	1dfb      	adds	r3, r7, #7
    a972:	781b      	ldrb	r3, [r3, #0]
    a974:	015b      	lsls	r3, r3, #5
    a976:	b21b      	sxth	r3, r3
    a978:	2208      	movs	r2, #8
    a97a:	4313      	orrs	r3, r2
    a97c:	b21b      	sxth	r3, r3
    a97e:	b29a      	uxth	r2, r3
    a980:	4b10      	ldr	r3, [pc, #64]	; (a9c4 <w5500_write_socket_tcp+0x398>)
    a982:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a984:	1dfb      	adds	r3, r7, #7
    a986:	781b      	ldrb	r3, [r3, #0]
    a988:	015b      	lsls	r3, r3, #5
    a98a:	3310      	adds	r3, #16
    a98c:	001a      	movs	r2, r3
    a98e:	4b0e      	ldr	r3, [pc, #56]	; (a9c8 <w5500_write_socket_tcp+0x39c>)
    a990:	18d3      	adds	r3, r2, r3
    a992:	1d5a      	adds	r2, r3, #5
    a994:	4b0d      	ldr	r3, [pc, #52]	; (a9cc <w5500_write_socket_tcp+0x3a0>)
    a996:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a998:	4b0d      	ldr	r3, [pc, #52]	; (a9d0 <w5500_write_socket_tcp+0x3a4>)
    a99a:	2201      	movs	r2, #1
    a99c:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a99e:	4b0d      	ldr	r3, [pc, #52]	; (a9d4 <w5500_write_socket_tcp+0x3a8>)
    a9a0:	2201      	movs	r2, #1
    a9a2:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a9a4:	4b04      	ldr	r3, [pc, #16]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a9a6:	781b      	ldrb	r3, [r3, #0]
    a9a8:	3301      	adds	r3, #1
    a9aa:	b2da      	uxtb	r2, r3
    a9ac:	4b02      	ldr	r3, [pc, #8]	; (a9b8 <w5500_write_socket_tcp+0x38c>)
    a9ae:	701a      	strb	r2, [r3, #0]
		break;
    a9b0:	e079      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
    a9b2:	46c0      	nop			; (mov r8, r8)
    a9b4:	20000499 	.word	0x20000499
    a9b8:	2000049a 	.word	0x2000049a
    a9bc:	0000cb90 	.word	0x0000cb90
    a9c0:	20000480 	.word	0x20000480
    a9c4:	20000482 	.word	0x20000482
    a9c8:	20003b04 	.word	0x20003b04
    a9cc:	20003afc 	.word	0x20003afc
    a9d0:	20000484 	.word	0x20000484
    a9d4:	20003bb7 	.word	0x20003bb7
    a9d8:	20000486 	.word	0x20000486
    a9dc:	200005cc 	.word	0x200005cc
    a9e0:	000005e5 	.word	0x000005e5
    a9e4:	20003bb8 	.word	0x20003bb8
		case TCP_STATUS_CLR:																//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a9e8:	1dfb      	adds	r3, r7, #7
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	4a30      	ldr	r2, [pc, #192]	; (aab0 <w5500_write_socket_tcp+0x484>)
    a9ee:	2110      	movs	r1, #16
    a9f0:	015b      	lsls	r3, r3, #5
    a9f2:	18d3      	adds	r3, r2, r3
    a9f4:	185b      	adds	r3, r3, r1
    a9f6:	795b      	ldrb	r3, [r3, #5]
    a9f8:	06db      	lsls	r3, r3, #27
    a9fa:	0fdb      	lsrs	r3, r3, #31
    a9fc:	b2db      	uxtb	r3, r3
    a9fe:	2b01      	cmp	r3, #1
    aa00:	d12b      	bne.n	aa5a <w5500_write_socket_tcp+0x42e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    aa02:	230e      	movs	r3, #14
    aa04:	18fb      	adds	r3, r7, r3
    aa06:	881b      	ldrh	r3, [r3, #0]
    aa08:	4a2a      	ldr	r2, [pc, #168]	; (aab4 <w5500_write_socket_tcp+0x488>)
    aa0a:	2110      	movs	r1, #16
    aa0c:	54d1      	strb	r1, [r2, r3]
    aa0e:	230e      	movs	r3, #14
    aa10:	18fb      	adds	r3, r7, r3
    aa12:	881a      	ldrh	r2, [r3, #0]
    aa14:	230e      	movs	r3, #14
    aa16:	18fb      	adds	r3, r7, r3
    aa18:	3201      	adds	r2, #1
    aa1a:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    aa1c:	4b26      	ldr	r3, [pc, #152]	; (aab8 <w5500_write_socket_tcp+0x48c>)
    aa1e:	2202      	movs	r2, #2
    aa20:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    aa22:	1dfb      	adds	r3, r7, #7
    aa24:	781b      	ldrb	r3, [r3, #0]
    aa26:	015b      	lsls	r3, r3, #5
    aa28:	b21b      	sxth	r3, r3
    aa2a:	2208      	movs	r2, #8
    aa2c:	4313      	orrs	r3, r2
    aa2e:	b21b      	sxth	r3, r3
    aa30:	b29a      	uxth	r2, r3
    aa32:	4b22      	ldr	r3, [pc, #136]	; (aabc <w5500_write_socket_tcp+0x490>)
    aa34:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    aa36:	4b22      	ldr	r3, [pc, #136]	; (aac0 <w5500_write_socket_tcp+0x494>)
    aa38:	4a1e      	ldr	r2, [pc, #120]	; (aab4 <w5500_write_socket_tcp+0x488>)
    aa3a:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    aa3c:	4b21      	ldr	r3, [pc, #132]	; (aac4 <w5500_write_socket_tcp+0x498>)
    aa3e:	220e      	movs	r2, #14
    aa40:	18ba      	adds	r2, r7, r2
    aa42:	8812      	ldrh	r2, [r2, #0]
    aa44:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    aa46:	4b20      	ldr	r3, [pc, #128]	; (aac8 <w5500_write_socket_tcp+0x49c>)
    aa48:	2202      	movs	r2, #2
    aa4a:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    aa4c:	4b1f      	ldr	r3, [pc, #124]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa4e:	781b      	ldrb	r3, [r3, #0]
    aa50:	3301      	adds	r3, #1
    aa52:	b2da      	uxtb	r2, r3
    aa54:	4b1d      	ldr	r3, [pc, #116]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa56:	701a      	strb	r2, [r3, #0]
				break;
    aa58:	e025      	b.n	aaa6 <w5500_write_socket_tcp+0x47a>
			}
			st_wr_w5500--;
    aa5a:	4b1c      	ldr	r3, [pc, #112]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa5c:	781b      	ldrb	r3, [r3, #0]
    aa5e:	3b01      	subs	r3, #1
    aa60:	b2da      	uxtb	r2, r3
    aa62:	4b1a      	ldr	r3, [pc, #104]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa64:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    aa66:	1dfb      	adds	r3, r7, #7
    aa68:	781a      	ldrb	r2, [r3, #0]
    aa6a:	4919      	ldr	r1, [pc, #100]	; (aad0 <w5500_write_socket_tcp+0x4a4>)
    aa6c:	23bc      	movs	r3, #188	; 0xbc
    aa6e:	00db      	lsls	r3, r3, #3
    aa70:	4818      	ldr	r0, [pc, #96]	; (aad4 <w5500_write_socket_tcp+0x4a8>)
    aa72:	4342      	muls	r2, r0
    aa74:	188a      	adds	r2, r1, r2
    aa76:	18d3      	adds	r3, r2, r3
    aa78:	78da      	ldrb	r2, [r3, #3]
    aa7a:	791b      	ldrb	r3, [r3, #4]
    aa7c:	021b      	lsls	r3, r3, #8
    aa7e:	4313      	orrs	r3, r2
    aa80:	b29b      	uxth	r3, r3
    aa82:	2b00      	cmp	r3, #0
    aa84:	d10e      	bne.n	aaa4 <w5500_write_socket_tcp+0x478>
			{
				st_wr_w5500=TCP_RD_FSR; 
    aa86:	4b11      	ldr	r3, [pc, #68]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa88:	2200      	movs	r2, #0
    aa8a:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    aa8c:	2302      	movs	r3, #2
    aa8e:	e00b      	b.n	aaa8 <w5500_write_socket_tcp+0x47c>
			}
		break;
		case TCP_BK_TO_START:
			st_wr_w5500=TCP_RD_FSR;
    aa90:	4b0e      	ldr	r3, [pc, #56]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa92:	2200      	movs	r2, #0
    aa94:	701a      	strb	r2, [r3, #0]
			return PROC_OK;
    aa96:	2301      	movs	r3, #1
    aa98:	e006      	b.n	aaa8 <w5500_write_socket_tcp+0x47c>
		break;
		default:
			st_wr_w5500=TCP_RD_FSR; return PROC_ER;
    aa9a:	4b0c      	ldr	r3, [pc, #48]	; (aacc <w5500_write_socket_tcp+0x4a0>)
    aa9c:	2200      	movs	r2, #0
    aa9e:	701a      	strb	r2, [r3, #0]
    aaa0:	2302      	movs	r3, #2
    aaa2:	e001      	b.n	aaa8 <w5500_write_socket_tcp+0x47c>
		break;
    aaa4:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    aaa6:	2300      	movs	r3, #0
}
    aaa8:	0018      	movs	r0, r3
    aaaa:	46bd      	mov	sp, r7
    aaac:	b005      	add	sp, #20
    aaae:	bd90      	pop	{r4, r7, pc}
    aab0:	20003b04 	.word	0x20003b04
    aab4:	20003bb8 	.word	0x20003bb8
    aab8:	20000480 	.word	0x20000480
    aabc:	20000482 	.word	0x20000482
    aac0:	20003afc 	.word	0x20003afc
    aac4:	20000484 	.word	0x20000484
    aac8:	20003bb7 	.word	0x20003bb7
    aacc:	2000049a 	.word	0x2000049a
    aad0:	200005cc 	.word	0x200005cc
    aad4:	000005e5 	.word	0x000005e5

0000aad8 <cfg_init>:

BYTE cfg_2_err = 1;

void cfg_init(void)
//--------------------------------------------------------------------------
{
    aad8:	b580      	push	{r7, lr}
    aada:	af00      	add	r7, sp, #0
	memset(&cfg_1    ,0x00,sizeof(CFG_1));
    aadc:	2380      	movs	r3, #128	; 0x80
    aade:	005a      	lsls	r2, r3, #1
    aae0:	4b07      	ldr	r3, [pc, #28]	; (ab00 <cfg_init+0x28>)
    aae2:	2100      	movs	r1, #0
    aae4:	0018      	movs	r0, r3
    aae6:	4b07      	ldr	r3, [pc, #28]	; (ab04 <cfg_init+0x2c>)
    aae8:	4798      	blx	r3
	memset(&cfg_1_tmp,0x00,sizeof(CFG_1));
    aaea:	2380      	movs	r3, #128	; 0x80
    aaec:	005a      	lsls	r2, r3, #1
    aaee:	4b06      	ldr	r3, [pc, #24]	; (ab08 <cfg_init+0x30>)
    aaf0:	2100      	movs	r1, #0
    aaf2:	0018      	movs	r0, r3
    aaf4:	4b03      	ldr	r3, [pc, #12]	; (ab04 <cfg_init+0x2c>)
    aaf6:	4798      	blx	r3
}
    aaf8:	46c0      	nop			; (mov r8, r8)
    aafa:	46bd      	mov	sp, r7
    aafc:	bd80      	pop	{r7, pc}
    aafe:	46c0      	nop			; (mov r8, r8)
    ab00:	20003dc4 	.word	0x20003dc4
    ab04:	0000c865 	.word	0x0000c865
    ab08:	20003cc4 	.word	0x20003cc4

0000ab0c <cfg_read>:

WORD cfg_read(void)
//--------------------------------------------------------------------------
{
    ab0c:	b590      	push	{r4, r7, lr}
    ab0e:	b083      	sub	sp, #12
    ab10:	af00      	add	r7, sp, #0
	WORD size = 0;
    ab12:	1dbb      	adds	r3, r7, #6
    ab14:	2200      	movs	r2, #0
    ab16:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_1_ADDR,&cfg_1,sizeof(CFG_1));
    ab18:	1dbc      	adds	r4, r7, #6
    ab1a:	2380      	movs	r3, #128	; 0x80
    ab1c:	005a      	lsls	r2, r3, #1
    ab1e:	4910      	ldr	r1, [pc, #64]	; (ab60 <cfg_read+0x54>)
    ab20:	23fc      	movs	r3, #252	; 0xfc
    ab22:	029b      	lsls	r3, r3, #10
    ab24:	0018      	movs	r0, r3
    ab26:	4b0f      	ldr	r3, [pc, #60]	; (ab64 <cfg_read+0x58>)
    ab28:	4798      	blx	r3
    ab2a:	0003      	movs	r3, r0
    ab2c:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_1)) {return(CFG_ERR);}
    ab2e:	1dbb      	adds	r3, r7, #6
    ab30:	881a      	ldrh	r2, [r3, #0]
    ab32:	2380      	movs	r3, #128	; 0x80
    ab34:	005b      	lsls	r3, r3, #1
    ab36:	429a      	cmp	r2, r3
    ab38:	d001      	beq.n	ab3e <cfg_read+0x32>
    ab3a:	2300      	movs	r3, #0
    ab3c:	e00b      	b.n	ab56 <cfg_read+0x4a>

	if(crc16_ccit((BYTE*)&cfg_1,sizeof(CFG_1))!=0){return(CFG_ERR);}
    ab3e:	2380      	movs	r3, #128	; 0x80
    ab40:	005a      	lsls	r2, r3, #1
    ab42:	4b07      	ldr	r3, [pc, #28]	; (ab60 <cfg_read+0x54>)
    ab44:	0011      	movs	r1, r2
    ab46:	0018      	movs	r0, r3
    ab48:	4b07      	ldr	r3, [pc, #28]	; (ab68 <cfg_read+0x5c>)
    ab4a:	4798      	blx	r3
    ab4c:	1e03      	subs	r3, r0, #0
    ab4e:	d001      	beq.n	ab54 <cfg_read+0x48>
    ab50:	2300      	movs	r3, #0
    ab52:	e000      	b.n	ab56 <cfg_read+0x4a>

	return(CFG_OK);
    ab54:	2301      	movs	r3, #1
}
    ab56:	0018      	movs	r0, r3
    ab58:	46bd      	mov	sp, r7
    ab5a:	b003      	add	sp, #12
    ab5c:	bd90      	pop	{r4, r7, pc}
    ab5e:	46c0      	nop			; (mov r8, r8)
    ab60:	20003dc4 	.word	0x20003dc4
    ab64:	000068e9 	.word	0x000068e9
    ab68:	00005ce9 	.word	0x00005ce9

0000ab6c <cfg_2_read>:

WORD cfg_2_read(void)
//--------------------------------------------------------------------------
{
    ab6c:	b590      	push	{r4, r7, lr}
    ab6e:	b083      	sub	sp, #12
    ab70:	af00      	add	r7, sp, #0
	WORD size = 0;
    ab72:	1dbb      	adds	r3, r7, #6
    ab74:	2200      	movs	r2, #0
    ab76:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_2_ADDR,&cfg_2,sizeof(CFG_2));
    ab78:	1dbc      	adds	r4, r7, #6
    ab7a:	2380      	movs	r3, #128	; 0x80
    ab7c:	005a      	lsls	r2, r3, #1
    ab7e:	4b0f      	ldr	r3, [pc, #60]	; (abbc <cfg_2_read+0x50>)
    ab80:	480f      	ldr	r0, [pc, #60]	; (abc0 <cfg_2_read+0x54>)
    ab82:	0019      	movs	r1, r3
    ab84:	4b0f      	ldr	r3, [pc, #60]	; (abc4 <cfg_2_read+0x58>)
    ab86:	4798      	blx	r3
    ab88:	0003      	movs	r3, r0
    ab8a:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_2)) {return(CFG_ERR);}
    ab8c:	1dbb      	adds	r3, r7, #6
    ab8e:	881a      	ldrh	r2, [r3, #0]
    ab90:	2380      	movs	r3, #128	; 0x80
    ab92:	005b      	lsls	r3, r3, #1
    ab94:	429a      	cmp	r2, r3
    ab96:	d001      	beq.n	ab9c <cfg_2_read+0x30>
    ab98:	2300      	movs	r3, #0
    ab9a:	e00b      	b.n	abb4 <cfg_2_read+0x48>

	if(crc16_ccit((BYTE*)&cfg_2,sizeof(CFG_2))!=0){return(CFG_ERR);}
    ab9c:	2380      	movs	r3, #128	; 0x80
    ab9e:	005a      	lsls	r2, r3, #1
    aba0:	4b06      	ldr	r3, [pc, #24]	; (abbc <cfg_2_read+0x50>)
    aba2:	0011      	movs	r1, r2
    aba4:	0018      	movs	r0, r3
    aba6:	4b08      	ldr	r3, [pc, #32]	; (abc8 <cfg_2_read+0x5c>)
    aba8:	4798      	blx	r3
    abaa:	1e03      	subs	r3, r0, #0
    abac:	d001      	beq.n	abb2 <cfg_2_read+0x46>
    abae:	2300      	movs	r3, #0
    abb0:	e000      	b.n	abb4 <cfg_2_read+0x48>

	return(CFG_OK);
    abb2:	2301      	movs	r3, #1
}
    abb4:	0018      	movs	r0, r3
    abb6:	46bd      	mov	sp, r7
    abb8:	b003      	add	sp, #12
    abba:	bd90      	pop	{r4, r7, pc}
    abbc:	20003bc4 	.word	0x20003bc4
    abc0:	0003f100 	.word	0x0003f100
    abc4:	000068e9 	.word	0x000068e9
    abc8:	00005ce9 	.word	0x00005ce9

0000abcc <cfg_default>:

void cfg_default(void)
//--------------------------------------------------------------------------
{
    abcc:	b5b0      	push	{r4, r5, r7, lr}
    abce:	b082      	sub	sp, #8
    abd0:	af00      	add	r7, sp, #0
	WORD  i=0;
    abd2:	1dbb      	adds	r3, r7, #6
    abd4:	2200      	movs	r2, #0
    abd6:	801a      	strh	r2, [r3, #0]

	cfg_1.guid = 0xFAC6097A;
    abd8:	4bb9      	ldr	r3, [pc, #740]	; (aec0 <cfg_default+0x2f4>)
    abda:	781a      	ldrb	r2, [r3, #0]
    abdc:	2100      	movs	r1, #0
    abde:	400a      	ands	r2, r1
    abe0:	1c11      	adds	r1, r2, #0
    abe2:	227a      	movs	r2, #122	; 0x7a
    abe4:	430a      	orrs	r2, r1
    abe6:	701a      	strb	r2, [r3, #0]
    abe8:	785a      	ldrb	r2, [r3, #1]
    abea:	2100      	movs	r1, #0
    abec:	400a      	ands	r2, r1
    abee:	1c11      	adds	r1, r2, #0
    abf0:	2209      	movs	r2, #9
    abf2:	430a      	orrs	r2, r1
    abf4:	705a      	strb	r2, [r3, #1]
    abf6:	789a      	ldrb	r2, [r3, #2]
    abf8:	2100      	movs	r1, #0
    abfa:	400a      	ands	r2, r1
    abfc:	1c11      	adds	r1, r2, #0
    abfe:	223a      	movs	r2, #58	; 0x3a
    ac00:	4252      	negs	r2, r2
    ac02:	430a      	orrs	r2, r1
    ac04:	709a      	strb	r2, [r3, #2]
    ac06:	78da      	ldrb	r2, [r3, #3]
    ac08:	2100      	movs	r1, #0
    ac0a:	400a      	ands	r2, r1
    ac0c:	1c11      	adds	r1, r2, #0
    ac0e:	2206      	movs	r2, #6
    ac10:	4252      	negs	r2, r2
    ac12:	430a      	orrs	r2, r1
    ac14:	70da      	strb	r2, [r3, #3]
	
	cfg_1.in_numb=102;
    ac16:	4baa      	ldr	r3, [pc, #680]	; (aec0 <cfg_default+0x2f4>)
    ac18:	2268      	movs	r2, #104	; 0x68
    ac1a:	5c99      	ldrb	r1, [r3, r2]
    ac1c:	2000      	movs	r0, #0
    ac1e:	4001      	ands	r1, r0
    ac20:	1c08      	adds	r0, r1, #0
    ac22:	2166      	movs	r1, #102	; 0x66
    ac24:	4301      	orrs	r1, r0
    ac26:	5499      	strb	r1, [r3, r2]
    ac28:	189b      	adds	r3, r3, r2
    ac2a:	785a      	ldrb	r2, [r3, #1]
    ac2c:	2100      	movs	r1, #0
    ac2e:	400a      	ands	r2, r1
    ac30:	705a      	strb	r2, [r3, #1]
	
	//............................................................................

	cfg_1.com_network.src_port    = 4000;
    ac32:	4ba3      	ldr	r3, [pc, #652]	; (aec0 <cfg_default+0x2f4>)
    ac34:	2226      	movs	r2, #38	; 0x26
    ac36:	5c99      	ldrb	r1, [r3, r2]
    ac38:	2000      	movs	r0, #0
    ac3a:	4001      	ands	r1, r0
    ac3c:	1c08      	adds	r0, r1, #0
    ac3e:	2160      	movs	r1, #96	; 0x60
    ac40:	4249      	negs	r1, r1
    ac42:	4301      	orrs	r1, r0
    ac44:	5499      	strb	r1, [r3, r2]
    ac46:	2227      	movs	r2, #39	; 0x27
    ac48:	5c99      	ldrb	r1, [r3, r2]
    ac4a:	2000      	movs	r0, #0
    ac4c:	4001      	ands	r1, r0
    ac4e:	1c08      	adds	r0, r1, #0
    ac50:	210f      	movs	r1, #15
    ac52:	4301      	orrs	r1, r0
    ac54:	5499      	strb	r1, [r3, r2]
	
	//ip 192.168.1.102 /SIPR
	cfg_1.com_network.ip_addr[0]=0xC0;//192
    ac56:	4b9a      	ldr	r3, [pc, #616]	; (aec0 <cfg_default+0x2f4>)
    ac58:	2228      	movs	r2, #40	; 0x28
    ac5a:	21c0      	movs	r1, #192	; 0xc0
    ac5c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[1]=0xA8;//168
    ac5e:	4b98      	ldr	r3, [pc, #608]	; (aec0 <cfg_default+0x2f4>)
    ac60:	2229      	movs	r2, #41	; 0x29
    ac62:	21a8      	movs	r1, #168	; 0xa8
    ac64:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[2]=0x01;//1
    ac66:	4b96      	ldr	r3, [pc, #600]	; (aec0 <cfg_default+0x2f4>)
    ac68:	222a      	movs	r2, #42	; 0x2a
    ac6a:	2101      	movs	r1, #1
    ac6c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[3]=0x65;//101
    ac6e:	4b94      	ldr	r3, [pc, #592]	; (aec0 <cfg_default+0x2f4>)
    ac70:	222b      	movs	r2, #43	; 0x2b
    ac72:	2165      	movs	r1, #101	; 0x65
    ac74:	5499      	strb	r1, [r3, r2]

	//mask 255.255.255.0 /SUBR
	cfg_1.com_network.ip_mask[0]=0xFF;
    ac76:	4b92      	ldr	r3, [pc, #584]	; (aec0 <cfg_default+0x2f4>)
    ac78:	222c      	movs	r2, #44	; 0x2c
    ac7a:	21ff      	movs	r1, #255	; 0xff
    ac7c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[1]=0xFF;
    ac7e:	4b90      	ldr	r3, [pc, #576]	; (aec0 <cfg_default+0x2f4>)
    ac80:	222d      	movs	r2, #45	; 0x2d
    ac82:	21ff      	movs	r1, #255	; 0xff
    ac84:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[2]=0xFF;
    ac86:	4b8e      	ldr	r3, [pc, #568]	; (aec0 <cfg_default+0x2f4>)
    ac88:	222e      	movs	r2, #46	; 0x2e
    ac8a:	21ff      	movs	r1, #255	; 0xff
    ac8c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[3]=0x00;
    ac8e:	4b8c      	ldr	r3, [pc, #560]	; (aec0 <cfg_default+0x2f4>)
    ac90:	222f      	movs	r2, #47	; 0x2f
    ac92:	2100      	movs	r1, #0
    ac94:	5499      	strb	r1, [r3, r2]
	
	//gateway 192.168.1.1 /GAR
	cfg_1.com_network.ip_gate[0]=0xC0;
    ac96:	4b8a      	ldr	r3, [pc, #552]	; (aec0 <cfg_default+0x2f4>)
    ac98:	2230      	movs	r2, #48	; 0x30
    ac9a:	21c0      	movs	r1, #192	; 0xc0
    ac9c:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[1]=0xA8;
    ac9e:	4b88      	ldr	r3, [pc, #544]	; (aec0 <cfg_default+0x2f4>)
    aca0:	2231      	movs	r2, #49	; 0x31
    aca2:	21a8      	movs	r1, #168	; 0xa8
    aca4:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[2]=0x01;
    aca6:	4b86      	ldr	r3, [pc, #536]	; (aec0 <cfg_default+0x2f4>)
    aca8:	2232      	movs	r2, #50	; 0x32
    acaa:	2101      	movs	r1, #1
    acac:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[3]=0x01;
    acae:	4b84      	ldr	r3, [pc, #528]	; (aec0 <cfg_default+0x2f4>)
    acb0:	2233      	movs	r2, #51	; 0x33
    acb2:	2101      	movs	r1, #1
    acb4:	5499      	strb	r1, [r3, r2]
	
	memcpy(cfg_1.name, NAME, sizeof(NAME));
    acb6:	4983      	ldr	r1, [pc, #524]	; (aec4 <cfg_default+0x2f8>)
    acb8:	4b83      	ldr	r3, [pc, #524]	; (aec8 <cfg_default+0x2fc>)
    acba:	220c      	movs	r2, #12
    acbc:	0018      	movs	r0, r3
    acbe:	4b83      	ldr	r3, [pc, #524]	; (aecc <cfg_default+0x300>)
    acc0:	4798      	blx	r3
	cfg_1.name[sizeof(NAME) + 1] = 0x00;
    acc2:	4b7f      	ldr	r3, [pc, #508]	; (aec0 <cfg_default+0x2f4>)
    acc4:	2200      	movs	r2, #0
    acc6:	745a      	strb	r2, [r3, #17]
	
	//...........................................................................
	for(i=0;i<4;++i)
    acc8:	1dbb      	adds	r3, r7, #6
    acca:	2200      	movs	r2, #0
    accc:	801a      	strh	r2, [r3, #0]
    acce:	e0d0      	b.n	ae72 <cfg_default+0x2a6>
	{
		cfg_1.sock_rs485[i].mode		= UDP;
    acd0:	1dbb      	adds	r3, r7, #6
    acd2:	881a      	ldrh	r2, [r3, #0]
    acd4:	497a      	ldr	r1, [pc, #488]	; (aec0 <cfg_default+0x2f4>)
    acd6:	2035      	movs	r0, #53	; 0x35
    acd8:	0013      	movs	r3, r2
    acda:	005b      	lsls	r3, r3, #1
    acdc:	189b      	adds	r3, r3, r2
    acde:	009b      	lsls	r3, r3, #2
    ace0:	189b      	adds	r3, r3, r2
    ace2:	18cb      	adds	r3, r1, r3
    ace4:	181b      	adds	r3, r3, r0
    ace6:	2201      	movs	r2, #1
    ace8:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].pl			= GATE;
    acea:	1dbb      	adds	r3, r7, #6
    acec:	881a      	ldrh	r2, [r3, #0]
    acee:	4974      	ldr	r1, [pc, #464]	; (aec0 <cfg_default+0x2f4>)
    acf0:	2036      	movs	r0, #54	; 0x36
    acf2:	0013      	movs	r3, r2
    acf4:	005b      	lsls	r3, r3, #1
    acf6:	189b      	adds	r3, r3, r2
    acf8:	009b      	lsls	r3, r3, #2
    acfa:	189b      	adds	r3, r3, r2
    acfc:	18cb      	adds	r3, r1, r3
    acfe:	181b      	adds	r3, r3, r0
    ad00:	2201      	movs	r2, #1
    ad02:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].en			= FALSE;
    ad04:	1dbb      	adds	r3, r7, #6
    ad06:	881a      	ldrh	r2, [r3, #0]
    ad08:	496d      	ldr	r1, [pc, #436]	; (aec0 <cfg_default+0x2f4>)
    ad0a:	2034      	movs	r0, #52	; 0x34
    ad0c:	0013      	movs	r3, r2
    ad0e:	005b      	lsls	r3, r3, #1
    ad10:	189b      	adds	r3, r3, r2
    ad12:	009b      	lsls	r3, r3, #2
    ad14:	189b      	adds	r3, r3, r2
    ad16:	18cb      	adds	r3, r1, r3
    ad18:	181b      	adds	r3, r3, r0
    ad1a:	2200      	movs	r2, #0
    ad1c:	701a      	strb	r2, [r3, #0]
		
		cfg_1.sock_rs485[i].src_port	=4001+i;
    ad1e:	1dbb      	adds	r3, r7, #6
    ad20:	881a      	ldrh	r2, [r3, #0]
    ad22:	1dbb      	adds	r3, r7, #6
    ad24:	881b      	ldrh	r3, [r3, #0]
    ad26:	496a      	ldr	r1, [pc, #424]	; (aed0 <cfg_default+0x304>)
    ad28:	468c      	mov	ip, r1
    ad2a:	4463      	add	r3, ip
    ad2c:	b299      	uxth	r1, r3
    ad2e:	4864      	ldr	r0, [pc, #400]	; (aec0 <cfg_default+0x2f4>)
    ad30:	0013      	movs	r3, r2
    ad32:	005b      	lsls	r3, r3, #1
    ad34:	189b      	adds	r3, r3, r2
    ad36:	009b      	lsls	r3, r3, #2
    ad38:	189b      	adds	r3, r3, r2
    ad3a:	18c3      	adds	r3, r0, r3
    ad3c:	3330      	adds	r3, #48	; 0x30
    ad3e:	3307      	adds	r3, #7
    ad40:	22ff      	movs	r2, #255	; 0xff
    ad42:	400a      	ands	r2, r1
    ad44:	0014      	movs	r4, r2
    ad46:	781a      	ldrb	r2, [r3, #0]
    ad48:	2000      	movs	r0, #0
    ad4a:	4002      	ands	r2, r0
    ad4c:	1c10      	adds	r0, r2, #0
    ad4e:	1c22      	adds	r2, r4, #0
    ad50:	4302      	orrs	r2, r0
    ad52:	701a      	strb	r2, [r3, #0]
    ad54:	0a0a      	lsrs	r2, r1, #8
    ad56:	b290      	uxth	r0, r2
    ad58:	785a      	ldrb	r2, [r3, #1]
    ad5a:	2100      	movs	r1, #0
    ad5c:	400a      	ands	r2, r1
    ad5e:	1c11      	adds	r1, r2, #0
    ad60:	1c02      	adds	r2, r0, #0
    ad62:	430a      	orrs	r2, r1
    ad64:	705a      	strb	r2, [r3, #1]
		
		cfg_1.sock_rs485[i].baud		=38400;
    ad66:	1dbb      	adds	r3, r7, #6
    ad68:	881a      	ldrh	r2, [r3, #0]
    ad6a:	4955      	ldr	r1, [pc, #340]	; (aec0 <cfg_default+0x2f4>)
    ad6c:	0013      	movs	r3, r2
    ad6e:	005b      	lsls	r3, r3, #1
    ad70:	189b      	adds	r3, r3, r2
    ad72:	009b      	lsls	r3, r3, #2
    ad74:	189b      	adds	r3, r3, r2
    ad76:	18cb      	adds	r3, r1, r3
    ad78:	3330      	adds	r3, #48	; 0x30
    ad7a:	3309      	adds	r3, #9
    ad7c:	781a      	ldrb	r2, [r3, #0]
    ad7e:	2100      	movs	r1, #0
    ad80:	400a      	ands	r2, r1
    ad82:	701a      	strb	r2, [r3, #0]
    ad84:	785a      	ldrb	r2, [r3, #1]
    ad86:	2100      	movs	r1, #0
    ad88:	400a      	ands	r2, r1
    ad8a:	1c11      	adds	r1, r2, #0
    ad8c:	226a      	movs	r2, #106	; 0x6a
    ad8e:	4252      	negs	r2, r2
    ad90:	430a      	orrs	r2, r1
    ad92:	705a      	strb	r2, [r3, #1]
    ad94:	789a      	ldrb	r2, [r3, #2]
    ad96:	2100      	movs	r1, #0
    ad98:	400a      	ands	r2, r1
    ad9a:	709a      	strb	r2, [r3, #2]
    ad9c:	78da      	ldrb	r2, [r3, #3]
    ad9e:	2100      	movs	r1, #0
    ada0:	400a      	ands	r2, r1
    ada2:	70da      	strb	r2, [r3, #3]
		cfg_1.sock_rs485[i].bsize		=8;
    ada4:	1dbb      	adds	r3, r7, #6
    ada6:	881a      	ldrh	r2, [r3, #0]
    ada8:	4945      	ldr	r1, [pc, #276]	; (aec0 <cfg_default+0x2f4>)
    adaa:	2038      	movs	r0, #56	; 0x38
    adac:	0013      	movs	r3, r2
    adae:	005b      	lsls	r3, r3, #1
    adb0:	189b      	adds	r3, r3, r2
    adb2:	009b      	lsls	r3, r3, #2
    adb4:	189b      	adds	r3, r3, r2
    adb6:	18cb      	adds	r3, r1, r3
    adb8:	181b      	adds	r3, r3, r0
    adba:	795a      	ldrb	r2, [r3, #5]
    adbc:	210f      	movs	r1, #15
    adbe:	438a      	bics	r2, r1
    adc0:	1c11      	adds	r1, r2, #0
    adc2:	2208      	movs	r2, #8
    adc4:	430a      	orrs	r2, r1
    adc6:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].parity		=0;
    adc8:	1dbb      	adds	r3, r7, #6
    adca:	881a      	ldrh	r2, [r3, #0]
    adcc:	493c      	ldr	r1, [pc, #240]	; (aec0 <cfg_default+0x2f4>)
    adce:	2038      	movs	r0, #56	; 0x38
    add0:	0013      	movs	r3, r2
    add2:	005b      	lsls	r3, r3, #1
    add4:	189b      	adds	r3, r3, r2
    add6:	009b      	lsls	r3, r3, #2
    add8:	189b      	adds	r3, r3, r2
    adda:	18cb      	adds	r3, r1, r3
    addc:	181b      	adds	r3, r3, r0
    adde:	795a      	ldrb	r2, [r3, #5]
    ade0:	2130      	movs	r1, #48	; 0x30
    ade2:	438a      	bics	r2, r1
    ade4:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].stop		=0;
    ade6:	1dbb      	adds	r3, r7, #6
    ade8:	881a      	ldrh	r2, [r3, #0]
    adea:	4935      	ldr	r1, [pc, #212]	; (aec0 <cfg_default+0x2f4>)
    adec:	2038      	movs	r0, #56	; 0x38
    adee:	0013      	movs	r3, r2
    adf0:	005b      	lsls	r3, r3, #1
    adf2:	189b      	adds	r3, r3, r2
    adf4:	009b      	lsls	r3, r3, #2
    adf6:	189b      	adds	r3, r3, r2
    adf8:	18cb      	adds	r3, r1, r3
    adfa:	181b      	adds	r3, r3, r0
    adfc:	795a      	ldrb	r2, [r3, #5]
    adfe:	213f      	movs	r1, #63	; 0x3f
    ae00:	400a      	ands	r2, r1
    ae02:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].tout		=100;
    ae04:	1dbb      	adds	r3, r7, #6
    ae06:	881a      	ldrh	r2, [r3, #0]
    ae08:	492d      	ldr	r1, [pc, #180]	; (aec0 <cfg_default+0x2f4>)
    ae0a:	0013      	movs	r3, r2
    ae0c:	005b      	lsls	r3, r3, #1
    ae0e:	189b      	adds	r3, r3, r2
    ae10:	009b      	lsls	r3, r3, #2
    ae12:	189b      	adds	r3, r3, r2
    ae14:	18cb      	adds	r3, r1, r3
    ae16:	3338      	adds	r3, #56	; 0x38
    ae18:	3307      	adds	r3, #7
    ae1a:	781a      	ldrb	r2, [r3, #0]
    ae1c:	2100      	movs	r1, #0
    ae1e:	400a      	ands	r2, r1
    ae20:	1c11      	adds	r1, r2, #0
    ae22:	2264      	movs	r2, #100	; 0x64
    ae24:	430a      	orrs	r2, r1
    ae26:	701a      	strb	r2, [r3, #0]
    ae28:	785a      	ldrb	r2, [r3, #1]
    ae2a:	2100      	movs	r1, #0
    ae2c:	400a      	ands	r2, r1
    ae2e:	705a      	strb	r2, [r3, #1]
		
		memset(cfg_1.access[i].ip, 0, 4*4);
    ae30:	1dbb      	adds	r3, r7, #6
    ae32:	881a      	ldrh	r2, [r3, #0]
    ae34:	0013      	movs	r3, r2
    ae36:	00db      	lsls	r3, r3, #3
    ae38:	189b      	adds	r3, r3, r2
    ae3a:	005b      	lsls	r3, r3, #1
    ae3c:	3368      	adds	r3, #104	; 0x68
    ae3e:	001a      	movs	r2, r3
    ae40:	4b1f      	ldr	r3, [pc, #124]	; (aec0 <cfg_default+0x2f4>)
    ae42:	18d3      	adds	r3, r2, r3
    ae44:	3304      	adds	r3, #4
    ae46:	2210      	movs	r2, #16
    ae48:	2100      	movs	r1, #0
    ae4a:	0018      	movs	r0, r3
    ae4c:	4b21      	ldr	r3, [pc, #132]	; (aed4 <cfg_default+0x308>)
    ae4e:	4798      	blx	r3
		cfg_1.access[i].en = 1;
    ae50:	1dbb      	adds	r3, r7, #6
    ae52:	881a      	ldrh	r2, [r3, #0]
    ae54:	491a      	ldr	r1, [pc, #104]	; (aec0 <cfg_default+0x2f4>)
    ae56:	206a      	movs	r0, #106	; 0x6a
    ae58:	0013      	movs	r3, r2
    ae5a:	00db      	lsls	r3, r3, #3
    ae5c:	189b      	adds	r3, r3, r2
    ae5e:	005b      	lsls	r3, r3, #1
    ae60:	18cb      	adds	r3, r1, r3
    ae62:	181b      	adds	r3, r3, r0
    ae64:	2201      	movs	r2, #1
    ae66:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;++i)
    ae68:	1dbb      	adds	r3, r7, #6
    ae6a:	1dba      	adds	r2, r7, #6
    ae6c:	8812      	ldrh	r2, [r2, #0]
    ae6e:	3201      	adds	r2, #1
    ae70:	801a      	strh	r2, [r3, #0]
    ae72:	1dbb      	adds	r3, r7, #6
    ae74:	881b      	ldrh	r3, [r3, #0]
    ae76:	2b03      	cmp	r3, #3
    ae78:	d800      	bhi.n	ae7c <cfg_default+0x2b0>
    ae7a:	e729      	b.n	acd0 <cfg_default+0x104>

	}
	cfg_1.cs=crc16_ccit(((BYTE *)&cfg_1),sizeof(CFG_1)-2);
    ae7c:	4b10      	ldr	r3, [pc, #64]	; (aec0 <cfg_default+0x2f4>)
    ae7e:	21fe      	movs	r1, #254	; 0xfe
    ae80:	0018      	movs	r0, r3
    ae82:	4b15      	ldr	r3, [pc, #84]	; (aed8 <cfg_default+0x30c>)
    ae84:	4798      	blx	r3
    ae86:	0003      	movs	r3, r0
    ae88:	0019      	movs	r1, r3
    ae8a:	4b0d      	ldr	r3, [pc, #52]	; (aec0 <cfg_default+0x2f4>)
    ae8c:	22fe      	movs	r2, #254	; 0xfe
    ae8e:	20ff      	movs	r0, #255	; 0xff
    ae90:	4008      	ands	r0, r1
    ae92:	0005      	movs	r5, r0
    ae94:	5c98      	ldrb	r0, [r3, r2]
    ae96:	2400      	movs	r4, #0
    ae98:	4020      	ands	r0, r4
    ae9a:	1c04      	adds	r4, r0, #0
    ae9c:	1c28      	adds	r0, r5, #0
    ae9e:	4320      	orrs	r0, r4
    aea0:	5498      	strb	r0, [r3, r2]
    aea2:	0a09      	lsrs	r1, r1, #8
    aea4:	b288      	uxth	r0, r1
    aea6:	189b      	adds	r3, r3, r2
    aea8:	785a      	ldrb	r2, [r3, #1]
    aeaa:	2100      	movs	r1, #0
    aeac:	400a      	ands	r2, r1
    aeae:	1c11      	adds	r1, r2, #0
    aeb0:	1c02      	adds	r2, r0, #0
    aeb2:	430a      	orrs	r2, r1
    aeb4:	705a      	strb	r2, [r3, #1]
	//..............................................................................
}
    aeb6:	46c0      	nop			; (mov r8, r8)
    aeb8:	46bd      	mov	sp, r7
    aeba:	b002      	add	sp, #8
    aebc:	bdb0      	pop	{r4, r5, r7, pc}
    aebe:	46c0      	nop			; (mov r8, r8)
    aec0:	20003dc4 	.word	0x20003dc4
    aec4:	0000cbac 	.word	0x0000cbac
    aec8:	20003dc8 	.word	0x20003dc8
    aecc:	0000c7e1 	.word	0x0000c7e1
    aed0:	00000fa1 	.word	0x00000fa1
    aed4:	0000c865 	.word	0x0000c865
    aed8:	00005ce9 	.word	0x00005ce9

0000aedc <cfg_check>:

void cfg_check()
//--------------------------------------------------------------------------
{
    aedc:	b590      	push	{r4, r7, lr}
    aede:	b083      	sub	sp, #12
    aee0:	af00      	add	r7, sp, #0
	BYTE i = 0;
    aee2:	1dfb      	adds	r3, r7, #7
    aee4:	2200      	movs	r2, #0
    aee6:	701a      	strb	r2, [r3, #0]
	
	for(i=0;i<4;i++)
    aee8:	1dfb      	adds	r3, r7, #7
    aeea:	2200      	movs	r2, #0
    aeec:	701a      	strb	r2, [r3, #0]
    aeee:	e04d      	b.n	af8c <cfg_check+0xb0>
	{
		port[i].tout_port=cfg_1.sock_rs485[i].tout;
    aef0:	1dfb      	adds	r3, r7, #7
    aef2:	7819      	ldrb	r1, [r3, #0]
    aef4:	1dfb      	adds	r3, r7, #7
    aef6:	781a      	ldrb	r2, [r3, #0]
    aef8:	4828      	ldr	r0, [pc, #160]	; (af9c <cfg_check+0xc0>)
    aefa:	0013      	movs	r3, r2
    aefc:	005b      	lsls	r3, r3, #1
    aefe:	189b      	adds	r3, r3, r2
    af00:	009b      	lsls	r3, r3, #2
    af02:	189b      	adds	r3, r3, r2
    af04:	18c3      	adds	r3, r0, r3
    af06:	3338      	adds	r3, #56	; 0x38
    af08:	79da      	ldrb	r2, [r3, #7]
    af0a:	7a1b      	ldrb	r3, [r3, #8]
    af0c:	021b      	lsls	r3, r3, #8
    af0e:	4313      	orrs	r3, r2
    af10:	b29c      	uxth	r4, r3
    af12:	4823      	ldr	r0, [pc, #140]	; (afa0 <cfg_check+0xc4>)
    af14:	2386      	movs	r3, #134	; 0x86
    af16:	009a      	lsls	r2, r3, #2
    af18:	000b      	movs	r3, r1
    af1a:	00db      	lsls	r3, r3, #3
    af1c:	185b      	adds	r3, r3, r1
    af1e:	019b      	lsls	r3, r3, #6
    af20:	18c3      	adds	r3, r0, r3
    af22:	189b      	adds	r3, r3, r2
    af24:	1c22      	adds	r2, r4, #0
    af26:	801a      	strh	r2, [r3, #0]
		if ((port[i].tout_port < 50) || (port[i].tout_port > 1000))  {port[i].tout_port= 100;}
    af28:	1dfb      	adds	r3, r7, #7
    af2a:	781a      	ldrb	r2, [r3, #0]
    af2c:	481c      	ldr	r0, [pc, #112]	; (afa0 <cfg_check+0xc4>)
    af2e:	2386      	movs	r3, #134	; 0x86
    af30:	0099      	lsls	r1, r3, #2
    af32:	0013      	movs	r3, r2
    af34:	00db      	lsls	r3, r3, #3
    af36:	189b      	adds	r3, r3, r2
    af38:	019b      	lsls	r3, r3, #6
    af3a:	18c3      	adds	r3, r0, r3
    af3c:	185b      	adds	r3, r3, r1
    af3e:	881b      	ldrh	r3, [r3, #0]
    af40:	b29b      	uxth	r3, r3
    af42:	2b31      	cmp	r3, #49	; 0x31
    af44:	d910      	bls.n	af68 <cfg_check+0x8c>
    af46:	1dfb      	adds	r3, r7, #7
    af48:	781a      	ldrb	r2, [r3, #0]
    af4a:	4815      	ldr	r0, [pc, #84]	; (afa0 <cfg_check+0xc4>)
    af4c:	2386      	movs	r3, #134	; 0x86
    af4e:	0099      	lsls	r1, r3, #2
    af50:	0013      	movs	r3, r2
    af52:	00db      	lsls	r3, r3, #3
    af54:	189b      	adds	r3, r3, r2
    af56:	019b      	lsls	r3, r3, #6
    af58:	18c3      	adds	r3, r0, r3
    af5a:	185b      	adds	r3, r3, r1
    af5c:	881b      	ldrh	r3, [r3, #0]
    af5e:	b29a      	uxth	r2, r3
    af60:	23fa      	movs	r3, #250	; 0xfa
    af62:	009b      	lsls	r3, r3, #2
    af64:	429a      	cmp	r2, r3
    af66:	d90c      	bls.n	af82 <cfg_check+0xa6>
    af68:	1dfb      	adds	r3, r7, #7
    af6a:	781a      	ldrb	r2, [r3, #0]
    af6c:	480c      	ldr	r0, [pc, #48]	; (afa0 <cfg_check+0xc4>)
    af6e:	2386      	movs	r3, #134	; 0x86
    af70:	0099      	lsls	r1, r3, #2
    af72:	0013      	movs	r3, r2
    af74:	00db      	lsls	r3, r3, #3
    af76:	189b      	adds	r3, r3, r2
    af78:	019b      	lsls	r3, r3, #6
    af7a:	18c3      	adds	r3, r0, r3
    af7c:	185b      	adds	r3, r3, r1
    af7e:	2264      	movs	r2, #100	; 0x64
    af80:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
    af82:	1dfb      	adds	r3, r7, #7
    af84:	781a      	ldrb	r2, [r3, #0]
    af86:	1dfb      	adds	r3, r7, #7
    af88:	3201      	adds	r2, #1
    af8a:	701a      	strb	r2, [r3, #0]
    af8c:	1dfb      	adds	r3, r7, #7
    af8e:	781b      	ldrb	r3, [r3, #0]
    af90:	2b03      	cmp	r3, #3
    af92:	d9ad      	bls.n	aef0 <cfg_check+0x14>
	}
	
	return;
    af94:	46c0      	nop			; (mov r8, r8)
}
    af96:	46bd      	mov	sp, r7
    af98:	b003      	add	sp, #12
    af9a:	bd90      	pop	{r4, r7, pc}
    af9c:	20003dc4 	.word	0x20003dc4
    afa0:	200031fc 	.word	0x200031fc

0000afa4 <cfg_save>:

WORD cfg_save(void)
//--------------------------------------------------------------------------
{
    afa4:	b580      	push	{r7, lr}
    afa6:	af00      	add	r7, sp, #0
	if(!flash_empty(CFG_1_ADDR,256))
    afa8:	2380      	movs	r3, #128	; 0x80
    afaa:	005a      	lsls	r2, r3, #1
    afac:	23fc      	movs	r3, #252	; 0xfc
    afae:	029b      	lsls	r3, r3, #10
    afb0:	0011      	movs	r1, r2
    afb2:	0018      	movs	r0, r3
    afb4:	4b0a      	ldr	r3, [pc, #40]	; (afe0 <cfg_save+0x3c>)
    afb6:	4798      	blx	r3
    afb8:	1e03      	subs	r3, r0, #0
    afba:	d104      	bne.n	afc6 <cfg_save+0x22>
	{
		flash_erase_page(CFG_1_ADDR);
    afbc:	23fc      	movs	r3, #252	; 0xfc
    afbe:	029b      	lsls	r3, r3, #10
    afc0:	0018      	movs	r0, r3
    afc2:	4b08      	ldr	r3, [pc, #32]	; (afe4 <cfg_save+0x40>)
    afc4:	4798      	blx	r3
	}
	
	flash_write(CFG_1_ADDR,(BYTE*)&cfg_1,sizeof(CFG_1));
    afc6:	2380      	movs	r3, #128	; 0x80
    afc8:	005a      	lsls	r2, r3, #1
    afca:	4907      	ldr	r1, [pc, #28]	; (afe8 <cfg_save+0x44>)
    afcc:	23fc      	movs	r3, #252	; 0xfc
    afce:	029b      	lsls	r3, r3, #10
    afd0:	0018      	movs	r0, r3
    afd2:	4b06      	ldr	r3, [pc, #24]	; (afec <cfg_save+0x48>)
    afd4:	4798      	blx	r3
			
	return(CFG_OK);
    afd6:	2301      	movs	r3, #1
}
    afd8:	0018      	movs	r0, r3
    afda:	46bd      	mov	sp, r7
    afdc:	bd80      	pop	{r7, pc}
    afde:	46c0      	nop			; (mov r8, r8)
    afe0:	00006699 	.word	0x00006699
    afe4:	000066df 	.word	0x000066df
    afe8:	20003dc4 	.word	0x20003dc4
    afec:	0000672d 	.word	0x0000672d

0000aff0 <__udivsi3>:
    aff0:	2200      	movs	r2, #0
    aff2:	0843      	lsrs	r3, r0, #1
    aff4:	428b      	cmp	r3, r1
    aff6:	d374      	bcc.n	b0e2 <__udivsi3+0xf2>
    aff8:	0903      	lsrs	r3, r0, #4
    affa:	428b      	cmp	r3, r1
    affc:	d35f      	bcc.n	b0be <__udivsi3+0xce>
    affe:	0a03      	lsrs	r3, r0, #8
    b000:	428b      	cmp	r3, r1
    b002:	d344      	bcc.n	b08e <__udivsi3+0x9e>
    b004:	0b03      	lsrs	r3, r0, #12
    b006:	428b      	cmp	r3, r1
    b008:	d328      	bcc.n	b05c <__udivsi3+0x6c>
    b00a:	0c03      	lsrs	r3, r0, #16
    b00c:	428b      	cmp	r3, r1
    b00e:	d30d      	bcc.n	b02c <__udivsi3+0x3c>
    b010:	22ff      	movs	r2, #255	; 0xff
    b012:	0209      	lsls	r1, r1, #8
    b014:	ba12      	rev	r2, r2
    b016:	0c03      	lsrs	r3, r0, #16
    b018:	428b      	cmp	r3, r1
    b01a:	d302      	bcc.n	b022 <__udivsi3+0x32>
    b01c:	1212      	asrs	r2, r2, #8
    b01e:	0209      	lsls	r1, r1, #8
    b020:	d065      	beq.n	b0ee <__udivsi3+0xfe>
    b022:	0b03      	lsrs	r3, r0, #12
    b024:	428b      	cmp	r3, r1
    b026:	d319      	bcc.n	b05c <__udivsi3+0x6c>
    b028:	e000      	b.n	b02c <__udivsi3+0x3c>
    b02a:	0a09      	lsrs	r1, r1, #8
    b02c:	0bc3      	lsrs	r3, r0, #15
    b02e:	428b      	cmp	r3, r1
    b030:	d301      	bcc.n	b036 <__udivsi3+0x46>
    b032:	03cb      	lsls	r3, r1, #15
    b034:	1ac0      	subs	r0, r0, r3
    b036:	4152      	adcs	r2, r2
    b038:	0b83      	lsrs	r3, r0, #14
    b03a:	428b      	cmp	r3, r1
    b03c:	d301      	bcc.n	b042 <__udivsi3+0x52>
    b03e:	038b      	lsls	r3, r1, #14
    b040:	1ac0      	subs	r0, r0, r3
    b042:	4152      	adcs	r2, r2
    b044:	0b43      	lsrs	r3, r0, #13
    b046:	428b      	cmp	r3, r1
    b048:	d301      	bcc.n	b04e <__udivsi3+0x5e>
    b04a:	034b      	lsls	r3, r1, #13
    b04c:	1ac0      	subs	r0, r0, r3
    b04e:	4152      	adcs	r2, r2
    b050:	0b03      	lsrs	r3, r0, #12
    b052:	428b      	cmp	r3, r1
    b054:	d301      	bcc.n	b05a <__udivsi3+0x6a>
    b056:	030b      	lsls	r3, r1, #12
    b058:	1ac0      	subs	r0, r0, r3
    b05a:	4152      	adcs	r2, r2
    b05c:	0ac3      	lsrs	r3, r0, #11
    b05e:	428b      	cmp	r3, r1
    b060:	d301      	bcc.n	b066 <__udivsi3+0x76>
    b062:	02cb      	lsls	r3, r1, #11
    b064:	1ac0      	subs	r0, r0, r3
    b066:	4152      	adcs	r2, r2
    b068:	0a83      	lsrs	r3, r0, #10
    b06a:	428b      	cmp	r3, r1
    b06c:	d301      	bcc.n	b072 <__udivsi3+0x82>
    b06e:	028b      	lsls	r3, r1, #10
    b070:	1ac0      	subs	r0, r0, r3
    b072:	4152      	adcs	r2, r2
    b074:	0a43      	lsrs	r3, r0, #9
    b076:	428b      	cmp	r3, r1
    b078:	d301      	bcc.n	b07e <__udivsi3+0x8e>
    b07a:	024b      	lsls	r3, r1, #9
    b07c:	1ac0      	subs	r0, r0, r3
    b07e:	4152      	adcs	r2, r2
    b080:	0a03      	lsrs	r3, r0, #8
    b082:	428b      	cmp	r3, r1
    b084:	d301      	bcc.n	b08a <__udivsi3+0x9a>
    b086:	020b      	lsls	r3, r1, #8
    b088:	1ac0      	subs	r0, r0, r3
    b08a:	4152      	adcs	r2, r2
    b08c:	d2cd      	bcs.n	b02a <__udivsi3+0x3a>
    b08e:	09c3      	lsrs	r3, r0, #7
    b090:	428b      	cmp	r3, r1
    b092:	d301      	bcc.n	b098 <__udivsi3+0xa8>
    b094:	01cb      	lsls	r3, r1, #7
    b096:	1ac0      	subs	r0, r0, r3
    b098:	4152      	adcs	r2, r2
    b09a:	0983      	lsrs	r3, r0, #6
    b09c:	428b      	cmp	r3, r1
    b09e:	d301      	bcc.n	b0a4 <__udivsi3+0xb4>
    b0a0:	018b      	lsls	r3, r1, #6
    b0a2:	1ac0      	subs	r0, r0, r3
    b0a4:	4152      	adcs	r2, r2
    b0a6:	0943      	lsrs	r3, r0, #5
    b0a8:	428b      	cmp	r3, r1
    b0aa:	d301      	bcc.n	b0b0 <__udivsi3+0xc0>
    b0ac:	014b      	lsls	r3, r1, #5
    b0ae:	1ac0      	subs	r0, r0, r3
    b0b0:	4152      	adcs	r2, r2
    b0b2:	0903      	lsrs	r3, r0, #4
    b0b4:	428b      	cmp	r3, r1
    b0b6:	d301      	bcc.n	b0bc <__udivsi3+0xcc>
    b0b8:	010b      	lsls	r3, r1, #4
    b0ba:	1ac0      	subs	r0, r0, r3
    b0bc:	4152      	adcs	r2, r2
    b0be:	08c3      	lsrs	r3, r0, #3
    b0c0:	428b      	cmp	r3, r1
    b0c2:	d301      	bcc.n	b0c8 <__udivsi3+0xd8>
    b0c4:	00cb      	lsls	r3, r1, #3
    b0c6:	1ac0      	subs	r0, r0, r3
    b0c8:	4152      	adcs	r2, r2
    b0ca:	0883      	lsrs	r3, r0, #2
    b0cc:	428b      	cmp	r3, r1
    b0ce:	d301      	bcc.n	b0d4 <__udivsi3+0xe4>
    b0d0:	008b      	lsls	r3, r1, #2
    b0d2:	1ac0      	subs	r0, r0, r3
    b0d4:	4152      	adcs	r2, r2
    b0d6:	0843      	lsrs	r3, r0, #1
    b0d8:	428b      	cmp	r3, r1
    b0da:	d301      	bcc.n	b0e0 <__udivsi3+0xf0>
    b0dc:	004b      	lsls	r3, r1, #1
    b0de:	1ac0      	subs	r0, r0, r3
    b0e0:	4152      	adcs	r2, r2
    b0e2:	1a41      	subs	r1, r0, r1
    b0e4:	d200      	bcs.n	b0e8 <__udivsi3+0xf8>
    b0e6:	4601      	mov	r1, r0
    b0e8:	4152      	adcs	r2, r2
    b0ea:	4610      	mov	r0, r2
    b0ec:	4770      	bx	lr
    b0ee:	e7ff      	b.n	b0f0 <__udivsi3+0x100>
    b0f0:	b501      	push	{r0, lr}
    b0f2:	2000      	movs	r0, #0
    b0f4:	f000 f806 	bl	b104 <__aeabi_idiv0>
    b0f8:	bd02      	pop	{r1, pc}
    b0fa:	46c0      	nop			; (mov r8, r8)

0000b0fc <__aeabi_uidivmod>:
    b0fc:	2900      	cmp	r1, #0
    b0fe:	d0f7      	beq.n	b0f0 <__udivsi3+0x100>
    b100:	e776      	b.n	aff0 <__udivsi3>
    b102:	4770      	bx	lr

0000b104 <__aeabi_idiv0>:
    b104:	4770      	bx	lr
    b106:	46c0      	nop			; (mov r8, r8)

0000b108 <__aeabi_d2uiz>:
    b108:	b570      	push	{r4, r5, r6, lr}
    b10a:	2200      	movs	r2, #0
    b10c:	4b0c      	ldr	r3, [pc, #48]	; (b140 <__aeabi_d2uiz+0x38>)
    b10e:	0004      	movs	r4, r0
    b110:	000d      	movs	r5, r1
    b112:	f001 fa19 	bl	c548 <__aeabi_dcmpge>
    b116:	2800      	cmp	r0, #0
    b118:	d104      	bne.n	b124 <__aeabi_d2uiz+0x1c>
    b11a:	0020      	movs	r0, r4
    b11c:	0029      	movs	r1, r5
    b11e:	f001 f921 	bl	c364 <__aeabi_d2iz>
    b122:	bd70      	pop	{r4, r5, r6, pc}
    b124:	4b06      	ldr	r3, [pc, #24]	; (b140 <__aeabi_d2uiz+0x38>)
    b126:	2200      	movs	r2, #0
    b128:	0020      	movs	r0, r4
    b12a:	0029      	movs	r1, r5
    b12c:	f000 fe04 	bl	bd38 <__aeabi_dsub>
    b130:	f001 f918 	bl	c364 <__aeabi_d2iz>
    b134:	2380      	movs	r3, #128	; 0x80
    b136:	061b      	lsls	r3, r3, #24
    b138:	469c      	mov	ip, r3
    b13a:	4460      	add	r0, ip
    b13c:	e7f1      	b.n	b122 <__aeabi_d2uiz+0x1a>
    b13e:	46c0      	nop			; (mov r8, r8)
    b140:	41e00000 	.word	0x41e00000

0000b144 <__aeabi_ui2f>:
    b144:	b510      	push	{r4, lr}
    b146:	1e04      	subs	r4, r0, #0
    b148:	d027      	beq.n	b19a <__aeabi_ui2f+0x56>
    b14a:	f001 fa07 	bl	c55c <__clzsi2>
    b14e:	239e      	movs	r3, #158	; 0x9e
    b150:	1a1b      	subs	r3, r3, r0
    b152:	2b96      	cmp	r3, #150	; 0x96
    b154:	dc0a      	bgt.n	b16c <__aeabi_ui2f+0x28>
    b156:	2296      	movs	r2, #150	; 0x96
    b158:	1ad2      	subs	r2, r2, r3
    b15a:	4094      	lsls	r4, r2
    b15c:	0264      	lsls	r4, r4, #9
    b15e:	0a64      	lsrs	r4, r4, #9
    b160:	b2db      	uxtb	r3, r3
    b162:	0264      	lsls	r4, r4, #9
    b164:	05db      	lsls	r3, r3, #23
    b166:	0a60      	lsrs	r0, r4, #9
    b168:	4318      	orrs	r0, r3
    b16a:	bd10      	pop	{r4, pc}
    b16c:	2b99      	cmp	r3, #153	; 0x99
    b16e:	dc17      	bgt.n	b1a0 <__aeabi_ui2f+0x5c>
    b170:	2299      	movs	r2, #153	; 0x99
    b172:	1ad2      	subs	r2, r2, r3
    b174:	2a00      	cmp	r2, #0
    b176:	dd27      	ble.n	b1c8 <__aeabi_ui2f+0x84>
    b178:	4094      	lsls	r4, r2
    b17a:	0022      	movs	r2, r4
    b17c:	4c13      	ldr	r4, [pc, #76]	; (b1cc <__aeabi_ui2f+0x88>)
    b17e:	4014      	ands	r4, r2
    b180:	0751      	lsls	r1, r2, #29
    b182:	d004      	beq.n	b18e <__aeabi_ui2f+0x4a>
    b184:	210f      	movs	r1, #15
    b186:	400a      	ands	r2, r1
    b188:	2a04      	cmp	r2, #4
    b18a:	d000      	beq.n	b18e <__aeabi_ui2f+0x4a>
    b18c:	3404      	adds	r4, #4
    b18e:	0162      	lsls	r2, r4, #5
    b190:	d412      	bmi.n	b1b8 <__aeabi_ui2f+0x74>
    b192:	01a4      	lsls	r4, r4, #6
    b194:	0a64      	lsrs	r4, r4, #9
    b196:	b2db      	uxtb	r3, r3
    b198:	e7e3      	b.n	b162 <__aeabi_ui2f+0x1e>
    b19a:	2300      	movs	r3, #0
    b19c:	2400      	movs	r4, #0
    b19e:	e7e0      	b.n	b162 <__aeabi_ui2f+0x1e>
    b1a0:	22b9      	movs	r2, #185	; 0xb9
    b1a2:	0021      	movs	r1, r4
    b1a4:	1ad2      	subs	r2, r2, r3
    b1a6:	4091      	lsls	r1, r2
    b1a8:	000a      	movs	r2, r1
    b1aa:	1e51      	subs	r1, r2, #1
    b1ac:	418a      	sbcs	r2, r1
    b1ae:	2105      	movs	r1, #5
    b1b0:	1a09      	subs	r1, r1, r0
    b1b2:	40cc      	lsrs	r4, r1
    b1b4:	4314      	orrs	r4, r2
    b1b6:	e7db      	b.n	b170 <__aeabi_ui2f+0x2c>
    b1b8:	4b04      	ldr	r3, [pc, #16]	; (b1cc <__aeabi_ui2f+0x88>)
    b1ba:	401c      	ands	r4, r3
    b1bc:	239f      	movs	r3, #159	; 0x9f
    b1be:	01a4      	lsls	r4, r4, #6
    b1c0:	1a1b      	subs	r3, r3, r0
    b1c2:	0a64      	lsrs	r4, r4, #9
    b1c4:	b2db      	uxtb	r3, r3
    b1c6:	e7cc      	b.n	b162 <__aeabi_ui2f+0x1e>
    b1c8:	0022      	movs	r2, r4
    b1ca:	e7d7      	b.n	b17c <__aeabi_ui2f+0x38>
    b1cc:	fbffffff 	.word	0xfbffffff

0000b1d0 <__aeabi_ddiv>:
    b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1d2:	4657      	mov	r7, sl
    b1d4:	4645      	mov	r5, r8
    b1d6:	46de      	mov	lr, fp
    b1d8:	464e      	mov	r6, r9
    b1da:	b5e0      	push	{r5, r6, r7, lr}
    b1dc:	004c      	lsls	r4, r1, #1
    b1de:	030e      	lsls	r6, r1, #12
    b1e0:	b087      	sub	sp, #28
    b1e2:	4683      	mov	fp, r0
    b1e4:	4692      	mov	sl, r2
    b1e6:	001d      	movs	r5, r3
    b1e8:	4680      	mov	r8, r0
    b1ea:	0b36      	lsrs	r6, r6, #12
    b1ec:	0d64      	lsrs	r4, r4, #21
    b1ee:	0fcf      	lsrs	r7, r1, #31
    b1f0:	2c00      	cmp	r4, #0
    b1f2:	d04f      	beq.n	b294 <__aeabi_ddiv+0xc4>
    b1f4:	4b6f      	ldr	r3, [pc, #444]	; (b3b4 <__aeabi_ddiv+0x1e4>)
    b1f6:	429c      	cmp	r4, r3
    b1f8:	d035      	beq.n	b266 <__aeabi_ddiv+0x96>
    b1fa:	2380      	movs	r3, #128	; 0x80
    b1fc:	0f42      	lsrs	r2, r0, #29
    b1fe:	041b      	lsls	r3, r3, #16
    b200:	00f6      	lsls	r6, r6, #3
    b202:	4313      	orrs	r3, r2
    b204:	4333      	orrs	r3, r6
    b206:	4699      	mov	r9, r3
    b208:	00c3      	lsls	r3, r0, #3
    b20a:	4698      	mov	r8, r3
    b20c:	4b6a      	ldr	r3, [pc, #424]	; (b3b8 <__aeabi_ddiv+0x1e8>)
    b20e:	2600      	movs	r6, #0
    b210:	469c      	mov	ip, r3
    b212:	2300      	movs	r3, #0
    b214:	4464      	add	r4, ip
    b216:	9303      	str	r3, [sp, #12]
    b218:	032b      	lsls	r3, r5, #12
    b21a:	0b1b      	lsrs	r3, r3, #12
    b21c:	469b      	mov	fp, r3
    b21e:	006b      	lsls	r3, r5, #1
    b220:	0fed      	lsrs	r5, r5, #31
    b222:	4650      	mov	r0, sl
    b224:	0d5b      	lsrs	r3, r3, #21
    b226:	9501      	str	r5, [sp, #4]
    b228:	d05e      	beq.n	b2e8 <__aeabi_ddiv+0x118>
    b22a:	4a62      	ldr	r2, [pc, #392]	; (b3b4 <__aeabi_ddiv+0x1e4>)
    b22c:	4293      	cmp	r3, r2
    b22e:	d053      	beq.n	b2d8 <__aeabi_ddiv+0x108>
    b230:	465a      	mov	r2, fp
    b232:	00d1      	lsls	r1, r2, #3
    b234:	2280      	movs	r2, #128	; 0x80
    b236:	0f40      	lsrs	r0, r0, #29
    b238:	0412      	lsls	r2, r2, #16
    b23a:	4302      	orrs	r2, r0
    b23c:	430a      	orrs	r2, r1
    b23e:	4693      	mov	fp, r2
    b240:	4652      	mov	r2, sl
    b242:	00d1      	lsls	r1, r2, #3
    b244:	4a5c      	ldr	r2, [pc, #368]	; (b3b8 <__aeabi_ddiv+0x1e8>)
    b246:	4694      	mov	ip, r2
    b248:	2200      	movs	r2, #0
    b24a:	4463      	add	r3, ip
    b24c:	0038      	movs	r0, r7
    b24e:	4068      	eors	r0, r5
    b250:	4684      	mov	ip, r0
    b252:	9002      	str	r0, [sp, #8]
    b254:	1ae4      	subs	r4, r4, r3
    b256:	4316      	orrs	r6, r2
    b258:	2e0f      	cmp	r6, #15
    b25a:	d900      	bls.n	b25e <__aeabi_ddiv+0x8e>
    b25c:	e0b4      	b.n	b3c8 <__aeabi_ddiv+0x1f8>
    b25e:	4b57      	ldr	r3, [pc, #348]	; (b3bc <__aeabi_ddiv+0x1ec>)
    b260:	00b6      	lsls	r6, r6, #2
    b262:	599b      	ldr	r3, [r3, r6]
    b264:	469f      	mov	pc, r3
    b266:	0003      	movs	r3, r0
    b268:	4333      	orrs	r3, r6
    b26a:	4699      	mov	r9, r3
    b26c:	d16c      	bne.n	b348 <__aeabi_ddiv+0x178>
    b26e:	2300      	movs	r3, #0
    b270:	4698      	mov	r8, r3
    b272:	3302      	adds	r3, #2
    b274:	2608      	movs	r6, #8
    b276:	9303      	str	r3, [sp, #12]
    b278:	e7ce      	b.n	b218 <__aeabi_ddiv+0x48>
    b27a:	46cb      	mov	fp, r9
    b27c:	4641      	mov	r1, r8
    b27e:	9a03      	ldr	r2, [sp, #12]
    b280:	9701      	str	r7, [sp, #4]
    b282:	2a02      	cmp	r2, #2
    b284:	d165      	bne.n	b352 <__aeabi_ddiv+0x182>
    b286:	9b01      	ldr	r3, [sp, #4]
    b288:	4c4a      	ldr	r4, [pc, #296]	; (b3b4 <__aeabi_ddiv+0x1e4>)
    b28a:	469c      	mov	ip, r3
    b28c:	2300      	movs	r3, #0
    b28e:	2200      	movs	r2, #0
    b290:	4698      	mov	r8, r3
    b292:	e06b      	b.n	b36c <__aeabi_ddiv+0x19c>
    b294:	0003      	movs	r3, r0
    b296:	4333      	orrs	r3, r6
    b298:	4699      	mov	r9, r3
    b29a:	d04e      	beq.n	b33a <__aeabi_ddiv+0x16a>
    b29c:	2e00      	cmp	r6, #0
    b29e:	d100      	bne.n	b2a2 <__aeabi_ddiv+0xd2>
    b2a0:	e1bc      	b.n	b61c <__aeabi_ddiv+0x44c>
    b2a2:	0030      	movs	r0, r6
    b2a4:	f001 f95a 	bl	c55c <__clzsi2>
    b2a8:	0003      	movs	r3, r0
    b2aa:	3b0b      	subs	r3, #11
    b2ac:	2b1c      	cmp	r3, #28
    b2ae:	dd00      	ble.n	b2b2 <__aeabi_ddiv+0xe2>
    b2b0:	e1ac      	b.n	b60c <__aeabi_ddiv+0x43c>
    b2b2:	221d      	movs	r2, #29
    b2b4:	1ad3      	subs	r3, r2, r3
    b2b6:	465a      	mov	r2, fp
    b2b8:	0001      	movs	r1, r0
    b2ba:	40da      	lsrs	r2, r3
    b2bc:	3908      	subs	r1, #8
    b2be:	408e      	lsls	r6, r1
    b2c0:	0013      	movs	r3, r2
    b2c2:	4333      	orrs	r3, r6
    b2c4:	4699      	mov	r9, r3
    b2c6:	465b      	mov	r3, fp
    b2c8:	408b      	lsls	r3, r1
    b2ca:	4698      	mov	r8, r3
    b2cc:	2300      	movs	r3, #0
    b2ce:	4c3c      	ldr	r4, [pc, #240]	; (b3c0 <__aeabi_ddiv+0x1f0>)
    b2d0:	2600      	movs	r6, #0
    b2d2:	1a24      	subs	r4, r4, r0
    b2d4:	9303      	str	r3, [sp, #12]
    b2d6:	e79f      	b.n	b218 <__aeabi_ddiv+0x48>
    b2d8:	4651      	mov	r1, sl
    b2da:	465a      	mov	r2, fp
    b2dc:	4311      	orrs	r1, r2
    b2de:	d129      	bne.n	b334 <__aeabi_ddiv+0x164>
    b2e0:	2200      	movs	r2, #0
    b2e2:	4693      	mov	fp, r2
    b2e4:	3202      	adds	r2, #2
    b2e6:	e7b1      	b.n	b24c <__aeabi_ddiv+0x7c>
    b2e8:	4659      	mov	r1, fp
    b2ea:	4301      	orrs	r1, r0
    b2ec:	d01e      	beq.n	b32c <__aeabi_ddiv+0x15c>
    b2ee:	465b      	mov	r3, fp
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d100      	bne.n	b2f6 <__aeabi_ddiv+0x126>
    b2f4:	e19e      	b.n	b634 <__aeabi_ddiv+0x464>
    b2f6:	4658      	mov	r0, fp
    b2f8:	f001 f930 	bl	c55c <__clzsi2>
    b2fc:	0003      	movs	r3, r0
    b2fe:	3b0b      	subs	r3, #11
    b300:	2b1c      	cmp	r3, #28
    b302:	dd00      	ble.n	b306 <__aeabi_ddiv+0x136>
    b304:	e18f      	b.n	b626 <__aeabi_ddiv+0x456>
    b306:	0002      	movs	r2, r0
    b308:	4659      	mov	r1, fp
    b30a:	3a08      	subs	r2, #8
    b30c:	4091      	lsls	r1, r2
    b30e:	468b      	mov	fp, r1
    b310:	211d      	movs	r1, #29
    b312:	1acb      	subs	r3, r1, r3
    b314:	4651      	mov	r1, sl
    b316:	40d9      	lsrs	r1, r3
    b318:	000b      	movs	r3, r1
    b31a:	4659      	mov	r1, fp
    b31c:	430b      	orrs	r3, r1
    b31e:	4651      	mov	r1, sl
    b320:	469b      	mov	fp, r3
    b322:	4091      	lsls	r1, r2
    b324:	4b26      	ldr	r3, [pc, #152]	; (b3c0 <__aeabi_ddiv+0x1f0>)
    b326:	2200      	movs	r2, #0
    b328:	1a1b      	subs	r3, r3, r0
    b32a:	e78f      	b.n	b24c <__aeabi_ddiv+0x7c>
    b32c:	2300      	movs	r3, #0
    b32e:	2201      	movs	r2, #1
    b330:	469b      	mov	fp, r3
    b332:	e78b      	b.n	b24c <__aeabi_ddiv+0x7c>
    b334:	4651      	mov	r1, sl
    b336:	2203      	movs	r2, #3
    b338:	e788      	b.n	b24c <__aeabi_ddiv+0x7c>
    b33a:	2300      	movs	r3, #0
    b33c:	4698      	mov	r8, r3
    b33e:	3301      	adds	r3, #1
    b340:	2604      	movs	r6, #4
    b342:	2400      	movs	r4, #0
    b344:	9303      	str	r3, [sp, #12]
    b346:	e767      	b.n	b218 <__aeabi_ddiv+0x48>
    b348:	2303      	movs	r3, #3
    b34a:	46b1      	mov	r9, r6
    b34c:	9303      	str	r3, [sp, #12]
    b34e:	260c      	movs	r6, #12
    b350:	e762      	b.n	b218 <__aeabi_ddiv+0x48>
    b352:	2a03      	cmp	r2, #3
    b354:	d100      	bne.n	b358 <__aeabi_ddiv+0x188>
    b356:	e25c      	b.n	b812 <__aeabi_ddiv+0x642>
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	2a01      	cmp	r2, #1
    b35c:	d000      	beq.n	b360 <__aeabi_ddiv+0x190>
    b35e:	e1e4      	b.n	b72a <__aeabi_ddiv+0x55a>
    b360:	4013      	ands	r3, r2
    b362:	469c      	mov	ip, r3
    b364:	2300      	movs	r3, #0
    b366:	2400      	movs	r4, #0
    b368:	2200      	movs	r2, #0
    b36a:	4698      	mov	r8, r3
    b36c:	2100      	movs	r1, #0
    b36e:	0312      	lsls	r2, r2, #12
    b370:	0b13      	lsrs	r3, r2, #12
    b372:	0d0a      	lsrs	r2, r1, #20
    b374:	0512      	lsls	r2, r2, #20
    b376:	431a      	orrs	r2, r3
    b378:	0523      	lsls	r3, r4, #20
    b37a:	4c12      	ldr	r4, [pc, #72]	; (b3c4 <__aeabi_ddiv+0x1f4>)
    b37c:	4640      	mov	r0, r8
    b37e:	4022      	ands	r2, r4
    b380:	4313      	orrs	r3, r2
    b382:	4662      	mov	r2, ip
    b384:	005b      	lsls	r3, r3, #1
    b386:	07d2      	lsls	r2, r2, #31
    b388:	085b      	lsrs	r3, r3, #1
    b38a:	4313      	orrs	r3, r2
    b38c:	0019      	movs	r1, r3
    b38e:	b007      	add	sp, #28
    b390:	bc3c      	pop	{r2, r3, r4, r5}
    b392:	4690      	mov	r8, r2
    b394:	4699      	mov	r9, r3
    b396:	46a2      	mov	sl, r4
    b398:	46ab      	mov	fp, r5
    b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b39c:	2300      	movs	r3, #0
    b39e:	2280      	movs	r2, #128	; 0x80
    b3a0:	469c      	mov	ip, r3
    b3a2:	0312      	lsls	r2, r2, #12
    b3a4:	4698      	mov	r8, r3
    b3a6:	4c03      	ldr	r4, [pc, #12]	; (b3b4 <__aeabi_ddiv+0x1e4>)
    b3a8:	e7e0      	b.n	b36c <__aeabi_ddiv+0x19c>
    b3aa:	2300      	movs	r3, #0
    b3ac:	4c01      	ldr	r4, [pc, #4]	; (b3b4 <__aeabi_ddiv+0x1e4>)
    b3ae:	2200      	movs	r2, #0
    b3b0:	4698      	mov	r8, r3
    b3b2:	e7db      	b.n	b36c <__aeabi_ddiv+0x19c>
    b3b4:	000007ff 	.word	0x000007ff
    b3b8:	fffffc01 	.word	0xfffffc01
    b3bc:	0000cbb8 	.word	0x0000cbb8
    b3c0:	fffffc0d 	.word	0xfffffc0d
    b3c4:	800fffff 	.word	0x800fffff
    b3c8:	45d9      	cmp	r9, fp
    b3ca:	d900      	bls.n	b3ce <__aeabi_ddiv+0x1fe>
    b3cc:	e139      	b.n	b642 <__aeabi_ddiv+0x472>
    b3ce:	d100      	bne.n	b3d2 <__aeabi_ddiv+0x202>
    b3d0:	e134      	b.n	b63c <__aeabi_ddiv+0x46c>
    b3d2:	2300      	movs	r3, #0
    b3d4:	4646      	mov	r6, r8
    b3d6:	464d      	mov	r5, r9
    b3d8:	469a      	mov	sl, r3
    b3da:	3c01      	subs	r4, #1
    b3dc:	465b      	mov	r3, fp
    b3de:	0e0a      	lsrs	r2, r1, #24
    b3e0:	021b      	lsls	r3, r3, #8
    b3e2:	431a      	orrs	r2, r3
    b3e4:	020b      	lsls	r3, r1, #8
    b3e6:	0c17      	lsrs	r7, r2, #16
    b3e8:	9303      	str	r3, [sp, #12]
    b3ea:	0413      	lsls	r3, r2, #16
    b3ec:	0c1b      	lsrs	r3, r3, #16
    b3ee:	0039      	movs	r1, r7
    b3f0:	0028      	movs	r0, r5
    b3f2:	4690      	mov	r8, r2
    b3f4:	9301      	str	r3, [sp, #4]
    b3f6:	f7ff fdfb 	bl	aff0 <__udivsi3>
    b3fa:	0002      	movs	r2, r0
    b3fc:	9b01      	ldr	r3, [sp, #4]
    b3fe:	4683      	mov	fp, r0
    b400:	435a      	muls	r2, r3
    b402:	0028      	movs	r0, r5
    b404:	0039      	movs	r1, r7
    b406:	4691      	mov	r9, r2
    b408:	f7ff fe78 	bl	b0fc <__aeabi_uidivmod>
    b40c:	0c35      	lsrs	r5, r6, #16
    b40e:	0409      	lsls	r1, r1, #16
    b410:	430d      	orrs	r5, r1
    b412:	45a9      	cmp	r9, r5
    b414:	d90d      	bls.n	b432 <__aeabi_ddiv+0x262>
    b416:	465b      	mov	r3, fp
    b418:	4445      	add	r5, r8
    b41a:	3b01      	subs	r3, #1
    b41c:	45a8      	cmp	r8, r5
    b41e:	d900      	bls.n	b422 <__aeabi_ddiv+0x252>
    b420:	e13a      	b.n	b698 <__aeabi_ddiv+0x4c8>
    b422:	45a9      	cmp	r9, r5
    b424:	d800      	bhi.n	b428 <__aeabi_ddiv+0x258>
    b426:	e137      	b.n	b698 <__aeabi_ddiv+0x4c8>
    b428:	2302      	movs	r3, #2
    b42a:	425b      	negs	r3, r3
    b42c:	469c      	mov	ip, r3
    b42e:	4445      	add	r5, r8
    b430:	44e3      	add	fp, ip
    b432:	464b      	mov	r3, r9
    b434:	1aeb      	subs	r3, r5, r3
    b436:	0039      	movs	r1, r7
    b438:	0018      	movs	r0, r3
    b43a:	9304      	str	r3, [sp, #16]
    b43c:	f7ff fdd8 	bl	aff0 <__udivsi3>
    b440:	9b01      	ldr	r3, [sp, #4]
    b442:	0005      	movs	r5, r0
    b444:	4343      	muls	r3, r0
    b446:	0039      	movs	r1, r7
    b448:	9804      	ldr	r0, [sp, #16]
    b44a:	4699      	mov	r9, r3
    b44c:	f7ff fe56 	bl	b0fc <__aeabi_uidivmod>
    b450:	0433      	lsls	r3, r6, #16
    b452:	0409      	lsls	r1, r1, #16
    b454:	0c1b      	lsrs	r3, r3, #16
    b456:	430b      	orrs	r3, r1
    b458:	4599      	cmp	r9, r3
    b45a:	d909      	bls.n	b470 <__aeabi_ddiv+0x2a0>
    b45c:	4443      	add	r3, r8
    b45e:	1e6a      	subs	r2, r5, #1
    b460:	4598      	cmp	r8, r3
    b462:	d900      	bls.n	b466 <__aeabi_ddiv+0x296>
    b464:	e11a      	b.n	b69c <__aeabi_ddiv+0x4cc>
    b466:	4599      	cmp	r9, r3
    b468:	d800      	bhi.n	b46c <__aeabi_ddiv+0x29c>
    b46a:	e117      	b.n	b69c <__aeabi_ddiv+0x4cc>
    b46c:	3d02      	subs	r5, #2
    b46e:	4443      	add	r3, r8
    b470:	464a      	mov	r2, r9
    b472:	1a9b      	subs	r3, r3, r2
    b474:	465a      	mov	r2, fp
    b476:	0412      	lsls	r2, r2, #16
    b478:	432a      	orrs	r2, r5
    b47a:	9903      	ldr	r1, [sp, #12]
    b47c:	4693      	mov	fp, r2
    b47e:	0c10      	lsrs	r0, r2, #16
    b480:	0c0a      	lsrs	r2, r1, #16
    b482:	4691      	mov	r9, r2
    b484:	0409      	lsls	r1, r1, #16
    b486:	465a      	mov	r2, fp
    b488:	0c09      	lsrs	r1, r1, #16
    b48a:	464e      	mov	r6, r9
    b48c:	000d      	movs	r5, r1
    b48e:	0412      	lsls	r2, r2, #16
    b490:	0c12      	lsrs	r2, r2, #16
    b492:	4345      	muls	r5, r0
    b494:	9105      	str	r1, [sp, #20]
    b496:	4351      	muls	r1, r2
    b498:	4372      	muls	r2, r6
    b49a:	4370      	muls	r0, r6
    b49c:	1952      	adds	r2, r2, r5
    b49e:	0c0e      	lsrs	r6, r1, #16
    b4a0:	18b2      	adds	r2, r6, r2
    b4a2:	4295      	cmp	r5, r2
    b4a4:	d903      	bls.n	b4ae <__aeabi_ddiv+0x2de>
    b4a6:	2580      	movs	r5, #128	; 0x80
    b4a8:	026d      	lsls	r5, r5, #9
    b4aa:	46ac      	mov	ip, r5
    b4ac:	4460      	add	r0, ip
    b4ae:	0c15      	lsrs	r5, r2, #16
    b4b0:	0409      	lsls	r1, r1, #16
    b4b2:	0412      	lsls	r2, r2, #16
    b4b4:	0c09      	lsrs	r1, r1, #16
    b4b6:	1828      	adds	r0, r5, r0
    b4b8:	1852      	adds	r2, r2, r1
    b4ba:	4283      	cmp	r3, r0
    b4bc:	d200      	bcs.n	b4c0 <__aeabi_ddiv+0x2f0>
    b4be:	e0ce      	b.n	b65e <__aeabi_ddiv+0x48e>
    b4c0:	d100      	bne.n	b4c4 <__aeabi_ddiv+0x2f4>
    b4c2:	e0c8      	b.n	b656 <__aeabi_ddiv+0x486>
    b4c4:	1a1d      	subs	r5, r3, r0
    b4c6:	4653      	mov	r3, sl
    b4c8:	1a9e      	subs	r6, r3, r2
    b4ca:	45b2      	cmp	sl, r6
    b4cc:	4192      	sbcs	r2, r2
    b4ce:	4252      	negs	r2, r2
    b4d0:	1aab      	subs	r3, r5, r2
    b4d2:	469a      	mov	sl, r3
    b4d4:	4598      	cmp	r8, r3
    b4d6:	d100      	bne.n	b4da <__aeabi_ddiv+0x30a>
    b4d8:	e117      	b.n	b70a <__aeabi_ddiv+0x53a>
    b4da:	0039      	movs	r1, r7
    b4dc:	0018      	movs	r0, r3
    b4de:	f7ff fd87 	bl	aff0 <__udivsi3>
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	0005      	movs	r5, r0
    b4e6:	4343      	muls	r3, r0
    b4e8:	0039      	movs	r1, r7
    b4ea:	4650      	mov	r0, sl
    b4ec:	9304      	str	r3, [sp, #16]
    b4ee:	f7ff fe05 	bl	b0fc <__aeabi_uidivmod>
    b4f2:	9804      	ldr	r0, [sp, #16]
    b4f4:	040b      	lsls	r3, r1, #16
    b4f6:	0c31      	lsrs	r1, r6, #16
    b4f8:	4319      	orrs	r1, r3
    b4fa:	4288      	cmp	r0, r1
    b4fc:	d909      	bls.n	b512 <__aeabi_ddiv+0x342>
    b4fe:	4441      	add	r1, r8
    b500:	1e6b      	subs	r3, r5, #1
    b502:	4588      	cmp	r8, r1
    b504:	d900      	bls.n	b508 <__aeabi_ddiv+0x338>
    b506:	e107      	b.n	b718 <__aeabi_ddiv+0x548>
    b508:	4288      	cmp	r0, r1
    b50a:	d800      	bhi.n	b50e <__aeabi_ddiv+0x33e>
    b50c:	e104      	b.n	b718 <__aeabi_ddiv+0x548>
    b50e:	3d02      	subs	r5, #2
    b510:	4441      	add	r1, r8
    b512:	9b04      	ldr	r3, [sp, #16]
    b514:	1acb      	subs	r3, r1, r3
    b516:	0018      	movs	r0, r3
    b518:	0039      	movs	r1, r7
    b51a:	9304      	str	r3, [sp, #16]
    b51c:	f7ff fd68 	bl	aff0 <__udivsi3>
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	4682      	mov	sl, r0
    b524:	4343      	muls	r3, r0
    b526:	0039      	movs	r1, r7
    b528:	9804      	ldr	r0, [sp, #16]
    b52a:	9301      	str	r3, [sp, #4]
    b52c:	f7ff fde6 	bl	b0fc <__aeabi_uidivmod>
    b530:	9801      	ldr	r0, [sp, #4]
    b532:	040b      	lsls	r3, r1, #16
    b534:	0431      	lsls	r1, r6, #16
    b536:	0c09      	lsrs	r1, r1, #16
    b538:	4319      	orrs	r1, r3
    b53a:	4288      	cmp	r0, r1
    b53c:	d90d      	bls.n	b55a <__aeabi_ddiv+0x38a>
    b53e:	4653      	mov	r3, sl
    b540:	4441      	add	r1, r8
    b542:	3b01      	subs	r3, #1
    b544:	4588      	cmp	r8, r1
    b546:	d900      	bls.n	b54a <__aeabi_ddiv+0x37a>
    b548:	e0e8      	b.n	b71c <__aeabi_ddiv+0x54c>
    b54a:	4288      	cmp	r0, r1
    b54c:	d800      	bhi.n	b550 <__aeabi_ddiv+0x380>
    b54e:	e0e5      	b.n	b71c <__aeabi_ddiv+0x54c>
    b550:	2302      	movs	r3, #2
    b552:	425b      	negs	r3, r3
    b554:	469c      	mov	ip, r3
    b556:	4441      	add	r1, r8
    b558:	44e2      	add	sl, ip
    b55a:	9b01      	ldr	r3, [sp, #4]
    b55c:	042d      	lsls	r5, r5, #16
    b55e:	1ace      	subs	r6, r1, r3
    b560:	4651      	mov	r1, sl
    b562:	4329      	orrs	r1, r5
    b564:	9d05      	ldr	r5, [sp, #20]
    b566:	464f      	mov	r7, r9
    b568:	002a      	movs	r2, r5
    b56a:	040b      	lsls	r3, r1, #16
    b56c:	0c08      	lsrs	r0, r1, #16
    b56e:	0c1b      	lsrs	r3, r3, #16
    b570:	435a      	muls	r2, r3
    b572:	4345      	muls	r5, r0
    b574:	437b      	muls	r3, r7
    b576:	4378      	muls	r0, r7
    b578:	195b      	adds	r3, r3, r5
    b57a:	0c17      	lsrs	r7, r2, #16
    b57c:	18fb      	adds	r3, r7, r3
    b57e:	429d      	cmp	r5, r3
    b580:	d903      	bls.n	b58a <__aeabi_ddiv+0x3ba>
    b582:	2580      	movs	r5, #128	; 0x80
    b584:	026d      	lsls	r5, r5, #9
    b586:	46ac      	mov	ip, r5
    b588:	4460      	add	r0, ip
    b58a:	0c1d      	lsrs	r5, r3, #16
    b58c:	0412      	lsls	r2, r2, #16
    b58e:	041b      	lsls	r3, r3, #16
    b590:	0c12      	lsrs	r2, r2, #16
    b592:	1828      	adds	r0, r5, r0
    b594:	189b      	adds	r3, r3, r2
    b596:	4286      	cmp	r6, r0
    b598:	d200      	bcs.n	b59c <__aeabi_ddiv+0x3cc>
    b59a:	e093      	b.n	b6c4 <__aeabi_ddiv+0x4f4>
    b59c:	d100      	bne.n	b5a0 <__aeabi_ddiv+0x3d0>
    b59e:	e08e      	b.n	b6be <__aeabi_ddiv+0x4ee>
    b5a0:	2301      	movs	r3, #1
    b5a2:	4319      	orrs	r1, r3
    b5a4:	4ba0      	ldr	r3, [pc, #640]	; (b828 <__aeabi_ddiv+0x658>)
    b5a6:	18e3      	adds	r3, r4, r3
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	dc00      	bgt.n	b5ae <__aeabi_ddiv+0x3de>
    b5ac:	e099      	b.n	b6e2 <__aeabi_ddiv+0x512>
    b5ae:	074a      	lsls	r2, r1, #29
    b5b0:	d000      	beq.n	b5b4 <__aeabi_ddiv+0x3e4>
    b5b2:	e09e      	b.n	b6f2 <__aeabi_ddiv+0x522>
    b5b4:	465a      	mov	r2, fp
    b5b6:	01d2      	lsls	r2, r2, #7
    b5b8:	d506      	bpl.n	b5c8 <__aeabi_ddiv+0x3f8>
    b5ba:	465a      	mov	r2, fp
    b5bc:	4b9b      	ldr	r3, [pc, #620]	; (b82c <__aeabi_ddiv+0x65c>)
    b5be:	401a      	ands	r2, r3
    b5c0:	2380      	movs	r3, #128	; 0x80
    b5c2:	4693      	mov	fp, r2
    b5c4:	00db      	lsls	r3, r3, #3
    b5c6:	18e3      	adds	r3, r4, r3
    b5c8:	4a99      	ldr	r2, [pc, #612]	; (b830 <__aeabi_ddiv+0x660>)
    b5ca:	4293      	cmp	r3, r2
    b5cc:	dd68      	ble.n	b6a0 <__aeabi_ddiv+0x4d0>
    b5ce:	2301      	movs	r3, #1
    b5d0:	9a02      	ldr	r2, [sp, #8]
    b5d2:	4c98      	ldr	r4, [pc, #608]	; (b834 <__aeabi_ddiv+0x664>)
    b5d4:	401a      	ands	r2, r3
    b5d6:	2300      	movs	r3, #0
    b5d8:	4694      	mov	ip, r2
    b5da:	4698      	mov	r8, r3
    b5dc:	2200      	movs	r2, #0
    b5de:	e6c5      	b.n	b36c <__aeabi_ddiv+0x19c>
    b5e0:	2280      	movs	r2, #128	; 0x80
    b5e2:	464b      	mov	r3, r9
    b5e4:	0312      	lsls	r2, r2, #12
    b5e6:	4213      	tst	r3, r2
    b5e8:	d00a      	beq.n	b600 <__aeabi_ddiv+0x430>
    b5ea:	465b      	mov	r3, fp
    b5ec:	4213      	tst	r3, r2
    b5ee:	d106      	bne.n	b5fe <__aeabi_ddiv+0x42e>
    b5f0:	431a      	orrs	r2, r3
    b5f2:	0312      	lsls	r2, r2, #12
    b5f4:	0b12      	lsrs	r2, r2, #12
    b5f6:	46ac      	mov	ip, r5
    b5f8:	4688      	mov	r8, r1
    b5fa:	4c8e      	ldr	r4, [pc, #568]	; (b834 <__aeabi_ddiv+0x664>)
    b5fc:	e6b6      	b.n	b36c <__aeabi_ddiv+0x19c>
    b5fe:	464b      	mov	r3, r9
    b600:	431a      	orrs	r2, r3
    b602:	0312      	lsls	r2, r2, #12
    b604:	0b12      	lsrs	r2, r2, #12
    b606:	46bc      	mov	ip, r7
    b608:	4c8a      	ldr	r4, [pc, #552]	; (b834 <__aeabi_ddiv+0x664>)
    b60a:	e6af      	b.n	b36c <__aeabi_ddiv+0x19c>
    b60c:	0003      	movs	r3, r0
    b60e:	465a      	mov	r2, fp
    b610:	3b28      	subs	r3, #40	; 0x28
    b612:	409a      	lsls	r2, r3
    b614:	2300      	movs	r3, #0
    b616:	4691      	mov	r9, r2
    b618:	4698      	mov	r8, r3
    b61a:	e657      	b.n	b2cc <__aeabi_ddiv+0xfc>
    b61c:	4658      	mov	r0, fp
    b61e:	f000 ff9d 	bl	c55c <__clzsi2>
    b622:	3020      	adds	r0, #32
    b624:	e640      	b.n	b2a8 <__aeabi_ddiv+0xd8>
    b626:	0003      	movs	r3, r0
    b628:	4652      	mov	r2, sl
    b62a:	3b28      	subs	r3, #40	; 0x28
    b62c:	409a      	lsls	r2, r3
    b62e:	2100      	movs	r1, #0
    b630:	4693      	mov	fp, r2
    b632:	e677      	b.n	b324 <__aeabi_ddiv+0x154>
    b634:	f000 ff92 	bl	c55c <__clzsi2>
    b638:	3020      	adds	r0, #32
    b63a:	e65f      	b.n	b2fc <__aeabi_ddiv+0x12c>
    b63c:	4588      	cmp	r8, r1
    b63e:	d200      	bcs.n	b642 <__aeabi_ddiv+0x472>
    b640:	e6c7      	b.n	b3d2 <__aeabi_ddiv+0x202>
    b642:	464b      	mov	r3, r9
    b644:	07de      	lsls	r6, r3, #31
    b646:	085d      	lsrs	r5, r3, #1
    b648:	4643      	mov	r3, r8
    b64a:	085b      	lsrs	r3, r3, #1
    b64c:	431e      	orrs	r6, r3
    b64e:	4643      	mov	r3, r8
    b650:	07db      	lsls	r3, r3, #31
    b652:	469a      	mov	sl, r3
    b654:	e6c2      	b.n	b3dc <__aeabi_ddiv+0x20c>
    b656:	2500      	movs	r5, #0
    b658:	4592      	cmp	sl, r2
    b65a:	d300      	bcc.n	b65e <__aeabi_ddiv+0x48e>
    b65c:	e733      	b.n	b4c6 <__aeabi_ddiv+0x2f6>
    b65e:	9e03      	ldr	r6, [sp, #12]
    b660:	4659      	mov	r1, fp
    b662:	46b4      	mov	ip, r6
    b664:	44e2      	add	sl, ip
    b666:	45b2      	cmp	sl, r6
    b668:	41ad      	sbcs	r5, r5
    b66a:	426d      	negs	r5, r5
    b66c:	4445      	add	r5, r8
    b66e:	18eb      	adds	r3, r5, r3
    b670:	3901      	subs	r1, #1
    b672:	4598      	cmp	r8, r3
    b674:	d207      	bcs.n	b686 <__aeabi_ddiv+0x4b6>
    b676:	4298      	cmp	r0, r3
    b678:	d900      	bls.n	b67c <__aeabi_ddiv+0x4ac>
    b67a:	e07f      	b.n	b77c <__aeabi_ddiv+0x5ac>
    b67c:	d100      	bne.n	b680 <__aeabi_ddiv+0x4b0>
    b67e:	e0bc      	b.n	b7fa <__aeabi_ddiv+0x62a>
    b680:	1a1d      	subs	r5, r3, r0
    b682:	468b      	mov	fp, r1
    b684:	e71f      	b.n	b4c6 <__aeabi_ddiv+0x2f6>
    b686:	4598      	cmp	r8, r3
    b688:	d1fa      	bne.n	b680 <__aeabi_ddiv+0x4b0>
    b68a:	9d03      	ldr	r5, [sp, #12]
    b68c:	4555      	cmp	r5, sl
    b68e:	d9f2      	bls.n	b676 <__aeabi_ddiv+0x4a6>
    b690:	4643      	mov	r3, r8
    b692:	468b      	mov	fp, r1
    b694:	1a1d      	subs	r5, r3, r0
    b696:	e716      	b.n	b4c6 <__aeabi_ddiv+0x2f6>
    b698:	469b      	mov	fp, r3
    b69a:	e6ca      	b.n	b432 <__aeabi_ddiv+0x262>
    b69c:	0015      	movs	r5, r2
    b69e:	e6e7      	b.n	b470 <__aeabi_ddiv+0x2a0>
    b6a0:	465a      	mov	r2, fp
    b6a2:	08c9      	lsrs	r1, r1, #3
    b6a4:	0752      	lsls	r2, r2, #29
    b6a6:	430a      	orrs	r2, r1
    b6a8:	055b      	lsls	r3, r3, #21
    b6aa:	4690      	mov	r8, r2
    b6ac:	0d5c      	lsrs	r4, r3, #21
    b6ae:	465a      	mov	r2, fp
    b6b0:	2301      	movs	r3, #1
    b6b2:	9902      	ldr	r1, [sp, #8]
    b6b4:	0252      	lsls	r2, r2, #9
    b6b6:	4019      	ands	r1, r3
    b6b8:	0b12      	lsrs	r2, r2, #12
    b6ba:	468c      	mov	ip, r1
    b6bc:	e656      	b.n	b36c <__aeabi_ddiv+0x19c>
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d100      	bne.n	b6c4 <__aeabi_ddiv+0x4f4>
    b6c2:	e76f      	b.n	b5a4 <__aeabi_ddiv+0x3d4>
    b6c4:	4446      	add	r6, r8
    b6c6:	1e4a      	subs	r2, r1, #1
    b6c8:	45b0      	cmp	r8, r6
    b6ca:	d929      	bls.n	b720 <__aeabi_ddiv+0x550>
    b6cc:	0011      	movs	r1, r2
    b6ce:	4286      	cmp	r6, r0
    b6d0:	d000      	beq.n	b6d4 <__aeabi_ddiv+0x504>
    b6d2:	e765      	b.n	b5a0 <__aeabi_ddiv+0x3d0>
    b6d4:	9a03      	ldr	r2, [sp, #12]
    b6d6:	4293      	cmp	r3, r2
    b6d8:	d000      	beq.n	b6dc <__aeabi_ddiv+0x50c>
    b6da:	e761      	b.n	b5a0 <__aeabi_ddiv+0x3d0>
    b6dc:	e762      	b.n	b5a4 <__aeabi_ddiv+0x3d4>
    b6de:	2101      	movs	r1, #1
    b6e0:	4249      	negs	r1, r1
    b6e2:	2001      	movs	r0, #1
    b6e4:	1ac2      	subs	r2, r0, r3
    b6e6:	2a38      	cmp	r2, #56	; 0x38
    b6e8:	dd21      	ble.n	b72e <__aeabi_ddiv+0x55e>
    b6ea:	9b02      	ldr	r3, [sp, #8]
    b6ec:	4003      	ands	r3, r0
    b6ee:	469c      	mov	ip, r3
    b6f0:	e638      	b.n	b364 <__aeabi_ddiv+0x194>
    b6f2:	220f      	movs	r2, #15
    b6f4:	400a      	ands	r2, r1
    b6f6:	2a04      	cmp	r2, #4
    b6f8:	d100      	bne.n	b6fc <__aeabi_ddiv+0x52c>
    b6fa:	e75b      	b.n	b5b4 <__aeabi_ddiv+0x3e4>
    b6fc:	000a      	movs	r2, r1
    b6fe:	1d11      	adds	r1, r2, #4
    b700:	4291      	cmp	r1, r2
    b702:	4192      	sbcs	r2, r2
    b704:	4252      	negs	r2, r2
    b706:	4493      	add	fp, r2
    b708:	e754      	b.n	b5b4 <__aeabi_ddiv+0x3e4>
    b70a:	4b47      	ldr	r3, [pc, #284]	; (b828 <__aeabi_ddiv+0x658>)
    b70c:	18e3      	adds	r3, r4, r3
    b70e:	2b00      	cmp	r3, #0
    b710:	dde5      	ble.n	b6de <__aeabi_ddiv+0x50e>
    b712:	2201      	movs	r2, #1
    b714:	4252      	negs	r2, r2
    b716:	e7f2      	b.n	b6fe <__aeabi_ddiv+0x52e>
    b718:	001d      	movs	r5, r3
    b71a:	e6fa      	b.n	b512 <__aeabi_ddiv+0x342>
    b71c:	469a      	mov	sl, r3
    b71e:	e71c      	b.n	b55a <__aeabi_ddiv+0x38a>
    b720:	42b0      	cmp	r0, r6
    b722:	d839      	bhi.n	b798 <__aeabi_ddiv+0x5c8>
    b724:	d06e      	beq.n	b804 <__aeabi_ddiv+0x634>
    b726:	0011      	movs	r1, r2
    b728:	e73a      	b.n	b5a0 <__aeabi_ddiv+0x3d0>
    b72a:	9302      	str	r3, [sp, #8]
    b72c:	e73a      	b.n	b5a4 <__aeabi_ddiv+0x3d4>
    b72e:	2a1f      	cmp	r2, #31
    b730:	dc3c      	bgt.n	b7ac <__aeabi_ddiv+0x5dc>
    b732:	2320      	movs	r3, #32
    b734:	1a9b      	subs	r3, r3, r2
    b736:	000c      	movs	r4, r1
    b738:	4658      	mov	r0, fp
    b73a:	4099      	lsls	r1, r3
    b73c:	4098      	lsls	r0, r3
    b73e:	1e4b      	subs	r3, r1, #1
    b740:	4199      	sbcs	r1, r3
    b742:	465b      	mov	r3, fp
    b744:	40d4      	lsrs	r4, r2
    b746:	40d3      	lsrs	r3, r2
    b748:	4320      	orrs	r0, r4
    b74a:	4308      	orrs	r0, r1
    b74c:	001a      	movs	r2, r3
    b74e:	0743      	lsls	r3, r0, #29
    b750:	d009      	beq.n	b766 <__aeabi_ddiv+0x596>
    b752:	230f      	movs	r3, #15
    b754:	4003      	ands	r3, r0
    b756:	2b04      	cmp	r3, #4
    b758:	d005      	beq.n	b766 <__aeabi_ddiv+0x596>
    b75a:	0001      	movs	r1, r0
    b75c:	1d08      	adds	r0, r1, #4
    b75e:	4288      	cmp	r0, r1
    b760:	419b      	sbcs	r3, r3
    b762:	425b      	negs	r3, r3
    b764:	18d2      	adds	r2, r2, r3
    b766:	0213      	lsls	r3, r2, #8
    b768:	d53a      	bpl.n	b7e0 <__aeabi_ddiv+0x610>
    b76a:	2301      	movs	r3, #1
    b76c:	9a02      	ldr	r2, [sp, #8]
    b76e:	2401      	movs	r4, #1
    b770:	401a      	ands	r2, r3
    b772:	2300      	movs	r3, #0
    b774:	4694      	mov	ip, r2
    b776:	4698      	mov	r8, r3
    b778:	2200      	movs	r2, #0
    b77a:	e5f7      	b.n	b36c <__aeabi_ddiv+0x19c>
    b77c:	2102      	movs	r1, #2
    b77e:	4249      	negs	r1, r1
    b780:	468c      	mov	ip, r1
    b782:	9d03      	ldr	r5, [sp, #12]
    b784:	44e3      	add	fp, ip
    b786:	46ac      	mov	ip, r5
    b788:	44e2      	add	sl, ip
    b78a:	45aa      	cmp	sl, r5
    b78c:	41ad      	sbcs	r5, r5
    b78e:	426d      	negs	r5, r5
    b790:	4445      	add	r5, r8
    b792:	18ed      	adds	r5, r5, r3
    b794:	1a2d      	subs	r5, r5, r0
    b796:	e696      	b.n	b4c6 <__aeabi_ddiv+0x2f6>
    b798:	1e8a      	subs	r2, r1, #2
    b79a:	9903      	ldr	r1, [sp, #12]
    b79c:	004d      	lsls	r5, r1, #1
    b79e:	428d      	cmp	r5, r1
    b7a0:	4189      	sbcs	r1, r1
    b7a2:	4249      	negs	r1, r1
    b7a4:	4441      	add	r1, r8
    b7a6:	1876      	adds	r6, r6, r1
    b7a8:	9503      	str	r5, [sp, #12]
    b7aa:	e78f      	b.n	b6cc <__aeabi_ddiv+0x4fc>
    b7ac:	201f      	movs	r0, #31
    b7ae:	4240      	negs	r0, r0
    b7b0:	1ac3      	subs	r3, r0, r3
    b7b2:	4658      	mov	r0, fp
    b7b4:	40d8      	lsrs	r0, r3
    b7b6:	0003      	movs	r3, r0
    b7b8:	2a20      	cmp	r2, #32
    b7ba:	d028      	beq.n	b80e <__aeabi_ddiv+0x63e>
    b7bc:	2040      	movs	r0, #64	; 0x40
    b7be:	465d      	mov	r5, fp
    b7c0:	1a82      	subs	r2, r0, r2
    b7c2:	4095      	lsls	r5, r2
    b7c4:	4329      	orrs	r1, r5
    b7c6:	1e4a      	subs	r2, r1, #1
    b7c8:	4191      	sbcs	r1, r2
    b7ca:	4319      	orrs	r1, r3
    b7cc:	2307      	movs	r3, #7
    b7ce:	2200      	movs	r2, #0
    b7d0:	400b      	ands	r3, r1
    b7d2:	d009      	beq.n	b7e8 <__aeabi_ddiv+0x618>
    b7d4:	230f      	movs	r3, #15
    b7d6:	2200      	movs	r2, #0
    b7d8:	400b      	ands	r3, r1
    b7da:	0008      	movs	r0, r1
    b7dc:	2b04      	cmp	r3, #4
    b7de:	d1bd      	bne.n	b75c <__aeabi_ddiv+0x58c>
    b7e0:	0001      	movs	r1, r0
    b7e2:	0753      	lsls	r3, r2, #29
    b7e4:	0252      	lsls	r2, r2, #9
    b7e6:	0b12      	lsrs	r2, r2, #12
    b7e8:	08c9      	lsrs	r1, r1, #3
    b7ea:	4319      	orrs	r1, r3
    b7ec:	2301      	movs	r3, #1
    b7ee:	4688      	mov	r8, r1
    b7f0:	9902      	ldr	r1, [sp, #8]
    b7f2:	2400      	movs	r4, #0
    b7f4:	4019      	ands	r1, r3
    b7f6:	468c      	mov	ip, r1
    b7f8:	e5b8      	b.n	b36c <__aeabi_ddiv+0x19c>
    b7fa:	4552      	cmp	r2, sl
    b7fc:	d8be      	bhi.n	b77c <__aeabi_ddiv+0x5ac>
    b7fe:	468b      	mov	fp, r1
    b800:	2500      	movs	r5, #0
    b802:	e660      	b.n	b4c6 <__aeabi_ddiv+0x2f6>
    b804:	9d03      	ldr	r5, [sp, #12]
    b806:	429d      	cmp	r5, r3
    b808:	d3c6      	bcc.n	b798 <__aeabi_ddiv+0x5c8>
    b80a:	0011      	movs	r1, r2
    b80c:	e762      	b.n	b6d4 <__aeabi_ddiv+0x504>
    b80e:	2500      	movs	r5, #0
    b810:	e7d8      	b.n	b7c4 <__aeabi_ddiv+0x5f4>
    b812:	2280      	movs	r2, #128	; 0x80
    b814:	465b      	mov	r3, fp
    b816:	0312      	lsls	r2, r2, #12
    b818:	431a      	orrs	r2, r3
    b81a:	9b01      	ldr	r3, [sp, #4]
    b81c:	0312      	lsls	r2, r2, #12
    b81e:	0b12      	lsrs	r2, r2, #12
    b820:	469c      	mov	ip, r3
    b822:	4688      	mov	r8, r1
    b824:	4c03      	ldr	r4, [pc, #12]	; (b834 <__aeabi_ddiv+0x664>)
    b826:	e5a1      	b.n	b36c <__aeabi_ddiv+0x19c>
    b828:	000003ff 	.word	0x000003ff
    b82c:	feffffff 	.word	0xfeffffff
    b830:	000007fe 	.word	0x000007fe
    b834:	000007ff 	.word	0x000007ff

0000b838 <__aeabi_dmul>:
    b838:	b5f0      	push	{r4, r5, r6, r7, lr}
    b83a:	4657      	mov	r7, sl
    b83c:	4645      	mov	r5, r8
    b83e:	46de      	mov	lr, fp
    b840:	464e      	mov	r6, r9
    b842:	b5e0      	push	{r5, r6, r7, lr}
    b844:	030c      	lsls	r4, r1, #12
    b846:	4698      	mov	r8, r3
    b848:	004e      	lsls	r6, r1, #1
    b84a:	0b23      	lsrs	r3, r4, #12
    b84c:	b087      	sub	sp, #28
    b84e:	0007      	movs	r7, r0
    b850:	4692      	mov	sl, r2
    b852:	469b      	mov	fp, r3
    b854:	0d76      	lsrs	r6, r6, #21
    b856:	0fcd      	lsrs	r5, r1, #31
    b858:	2e00      	cmp	r6, #0
    b85a:	d06b      	beq.n	b934 <__aeabi_dmul+0xfc>
    b85c:	4b6d      	ldr	r3, [pc, #436]	; (ba14 <__aeabi_dmul+0x1dc>)
    b85e:	429e      	cmp	r6, r3
    b860:	d035      	beq.n	b8ce <__aeabi_dmul+0x96>
    b862:	2480      	movs	r4, #128	; 0x80
    b864:	465b      	mov	r3, fp
    b866:	0f42      	lsrs	r2, r0, #29
    b868:	0424      	lsls	r4, r4, #16
    b86a:	00db      	lsls	r3, r3, #3
    b86c:	4314      	orrs	r4, r2
    b86e:	431c      	orrs	r4, r3
    b870:	00c3      	lsls	r3, r0, #3
    b872:	4699      	mov	r9, r3
    b874:	4b68      	ldr	r3, [pc, #416]	; (ba18 <__aeabi_dmul+0x1e0>)
    b876:	46a3      	mov	fp, r4
    b878:	469c      	mov	ip, r3
    b87a:	2300      	movs	r3, #0
    b87c:	2700      	movs	r7, #0
    b87e:	4466      	add	r6, ip
    b880:	9302      	str	r3, [sp, #8]
    b882:	4643      	mov	r3, r8
    b884:	031c      	lsls	r4, r3, #12
    b886:	005a      	lsls	r2, r3, #1
    b888:	0fdb      	lsrs	r3, r3, #31
    b88a:	4650      	mov	r0, sl
    b88c:	0b24      	lsrs	r4, r4, #12
    b88e:	0d52      	lsrs	r2, r2, #21
    b890:	4698      	mov	r8, r3
    b892:	d100      	bne.n	b896 <__aeabi_dmul+0x5e>
    b894:	e076      	b.n	b984 <__aeabi_dmul+0x14c>
    b896:	4b5f      	ldr	r3, [pc, #380]	; (ba14 <__aeabi_dmul+0x1dc>)
    b898:	429a      	cmp	r2, r3
    b89a:	d06d      	beq.n	b978 <__aeabi_dmul+0x140>
    b89c:	2380      	movs	r3, #128	; 0x80
    b89e:	0f41      	lsrs	r1, r0, #29
    b8a0:	041b      	lsls	r3, r3, #16
    b8a2:	430b      	orrs	r3, r1
    b8a4:	495c      	ldr	r1, [pc, #368]	; (ba18 <__aeabi_dmul+0x1e0>)
    b8a6:	00e4      	lsls	r4, r4, #3
    b8a8:	468c      	mov	ip, r1
    b8aa:	431c      	orrs	r4, r3
    b8ac:	00c3      	lsls	r3, r0, #3
    b8ae:	2000      	movs	r0, #0
    b8b0:	4462      	add	r2, ip
    b8b2:	4641      	mov	r1, r8
    b8b4:	18b6      	adds	r6, r6, r2
    b8b6:	4069      	eors	r1, r5
    b8b8:	1c72      	adds	r2, r6, #1
    b8ba:	9101      	str	r1, [sp, #4]
    b8bc:	4694      	mov	ip, r2
    b8be:	4307      	orrs	r7, r0
    b8c0:	2f0f      	cmp	r7, #15
    b8c2:	d900      	bls.n	b8c6 <__aeabi_dmul+0x8e>
    b8c4:	e0b0      	b.n	ba28 <__aeabi_dmul+0x1f0>
    b8c6:	4a55      	ldr	r2, [pc, #340]	; (ba1c <__aeabi_dmul+0x1e4>)
    b8c8:	00bf      	lsls	r7, r7, #2
    b8ca:	59d2      	ldr	r2, [r2, r7]
    b8cc:	4697      	mov	pc, r2
    b8ce:	465b      	mov	r3, fp
    b8d0:	4303      	orrs	r3, r0
    b8d2:	4699      	mov	r9, r3
    b8d4:	d000      	beq.n	b8d8 <__aeabi_dmul+0xa0>
    b8d6:	e087      	b.n	b9e8 <__aeabi_dmul+0x1b0>
    b8d8:	2300      	movs	r3, #0
    b8da:	469b      	mov	fp, r3
    b8dc:	3302      	adds	r3, #2
    b8de:	2708      	movs	r7, #8
    b8e0:	9302      	str	r3, [sp, #8]
    b8e2:	e7ce      	b.n	b882 <__aeabi_dmul+0x4a>
    b8e4:	4642      	mov	r2, r8
    b8e6:	9201      	str	r2, [sp, #4]
    b8e8:	2802      	cmp	r0, #2
    b8ea:	d067      	beq.n	b9bc <__aeabi_dmul+0x184>
    b8ec:	2803      	cmp	r0, #3
    b8ee:	d100      	bne.n	b8f2 <__aeabi_dmul+0xba>
    b8f0:	e20e      	b.n	bd10 <__aeabi_dmul+0x4d8>
    b8f2:	2801      	cmp	r0, #1
    b8f4:	d000      	beq.n	b8f8 <__aeabi_dmul+0xc0>
    b8f6:	e162      	b.n	bbbe <__aeabi_dmul+0x386>
    b8f8:	2300      	movs	r3, #0
    b8fa:	2400      	movs	r4, #0
    b8fc:	2200      	movs	r2, #0
    b8fe:	4699      	mov	r9, r3
    b900:	9901      	ldr	r1, [sp, #4]
    b902:	4001      	ands	r1, r0
    b904:	b2cd      	uxtb	r5, r1
    b906:	2100      	movs	r1, #0
    b908:	0312      	lsls	r2, r2, #12
    b90a:	0d0b      	lsrs	r3, r1, #20
    b90c:	0b12      	lsrs	r2, r2, #12
    b90e:	051b      	lsls	r3, r3, #20
    b910:	4313      	orrs	r3, r2
    b912:	4a43      	ldr	r2, [pc, #268]	; (ba20 <__aeabi_dmul+0x1e8>)
    b914:	0524      	lsls	r4, r4, #20
    b916:	4013      	ands	r3, r2
    b918:	431c      	orrs	r4, r3
    b91a:	0064      	lsls	r4, r4, #1
    b91c:	07ed      	lsls	r5, r5, #31
    b91e:	0864      	lsrs	r4, r4, #1
    b920:	432c      	orrs	r4, r5
    b922:	4648      	mov	r0, r9
    b924:	0021      	movs	r1, r4
    b926:	b007      	add	sp, #28
    b928:	bc3c      	pop	{r2, r3, r4, r5}
    b92a:	4690      	mov	r8, r2
    b92c:	4699      	mov	r9, r3
    b92e:	46a2      	mov	sl, r4
    b930:	46ab      	mov	fp, r5
    b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b934:	4303      	orrs	r3, r0
    b936:	4699      	mov	r9, r3
    b938:	d04f      	beq.n	b9da <__aeabi_dmul+0x1a2>
    b93a:	465b      	mov	r3, fp
    b93c:	2b00      	cmp	r3, #0
    b93e:	d100      	bne.n	b942 <__aeabi_dmul+0x10a>
    b940:	e189      	b.n	bc56 <__aeabi_dmul+0x41e>
    b942:	4658      	mov	r0, fp
    b944:	f000 fe0a 	bl	c55c <__clzsi2>
    b948:	0003      	movs	r3, r0
    b94a:	3b0b      	subs	r3, #11
    b94c:	2b1c      	cmp	r3, #28
    b94e:	dd00      	ble.n	b952 <__aeabi_dmul+0x11a>
    b950:	e17a      	b.n	bc48 <__aeabi_dmul+0x410>
    b952:	221d      	movs	r2, #29
    b954:	1ad3      	subs	r3, r2, r3
    b956:	003a      	movs	r2, r7
    b958:	0001      	movs	r1, r0
    b95a:	465c      	mov	r4, fp
    b95c:	40da      	lsrs	r2, r3
    b95e:	3908      	subs	r1, #8
    b960:	408c      	lsls	r4, r1
    b962:	0013      	movs	r3, r2
    b964:	408f      	lsls	r7, r1
    b966:	4323      	orrs	r3, r4
    b968:	469b      	mov	fp, r3
    b96a:	46b9      	mov	r9, r7
    b96c:	2300      	movs	r3, #0
    b96e:	4e2d      	ldr	r6, [pc, #180]	; (ba24 <__aeabi_dmul+0x1ec>)
    b970:	2700      	movs	r7, #0
    b972:	1a36      	subs	r6, r6, r0
    b974:	9302      	str	r3, [sp, #8]
    b976:	e784      	b.n	b882 <__aeabi_dmul+0x4a>
    b978:	4653      	mov	r3, sl
    b97a:	4323      	orrs	r3, r4
    b97c:	d12a      	bne.n	b9d4 <__aeabi_dmul+0x19c>
    b97e:	2400      	movs	r4, #0
    b980:	2002      	movs	r0, #2
    b982:	e796      	b.n	b8b2 <__aeabi_dmul+0x7a>
    b984:	4653      	mov	r3, sl
    b986:	4323      	orrs	r3, r4
    b988:	d020      	beq.n	b9cc <__aeabi_dmul+0x194>
    b98a:	2c00      	cmp	r4, #0
    b98c:	d100      	bne.n	b990 <__aeabi_dmul+0x158>
    b98e:	e157      	b.n	bc40 <__aeabi_dmul+0x408>
    b990:	0020      	movs	r0, r4
    b992:	f000 fde3 	bl	c55c <__clzsi2>
    b996:	0003      	movs	r3, r0
    b998:	3b0b      	subs	r3, #11
    b99a:	2b1c      	cmp	r3, #28
    b99c:	dd00      	ble.n	b9a0 <__aeabi_dmul+0x168>
    b99e:	e149      	b.n	bc34 <__aeabi_dmul+0x3fc>
    b9a0:	211d      	movs	r1, #29
    b9a2:	1acb      	subs	r3, r1, r3
    b9a4:	4651      	mov	r1, sl
    b9a6:	0002      	movs	r2, r0
    b9a8:	40d9      	lsrs	r1, r3
    b9aa:	4653      	mov	r3, sl
    b9ac:	3a08      	subs	r2, #8
    b9ae:	4094      	lsls	r4, r2
    b9b0:	4093      	lsls	r3, r2
    b9b2:	430c      	orrs	r4, r1
    b9b4:	4a1b      	ldr	r2, [pc, #108]	; (ba24 <__aeabi_dmul+0x1ec>)
    b9b6:	1a12      	subs	r2, r2, r0
    b9b8:	2000      	movs	r0, #0
    b9ba:	e77a      	b.n	b8b2 <__aeabi_dmul+0x7a>
    b9bc:	2501      	movs	r5, #1
    b9be:	9b01      	ldr	r3, [sp, #4]
    b9c0:	4c14      	ldr	r4, [pc, #80]	; (ba14 <__aeabi_dmul+0x1dc>)
    b9c2:	401d      	ands	r5, r3
    b9c4:	2300      	movs	r3, #0
    b9c6:	2200      	movs	r2, #0
    b9c8:	4699      	mov	r9, r3
    b9ca:	e79c      	b.n	b906 <__aeabi_dmul+0xce>
    b9cc:	2400      	movs	r4, #0
    b9ce:	2200      	movs	r2, #0
    b9d0:	2001      	movs	r0, #1
    b9d2:	e76e      	b.n	b8b2 <__aeabi_dmul+0x7a>
    b9d4:	4653      	mov	r3, sl
    b9d6:	2003      	movs	r0, #3
    b9d8:	e76b      	b.n	b8b2 <__aeabi_dmul+0x7a>
    b9da:	2300      	movs	r3, #0
    b9dc:	469b      	mov	fp, r3
    b9de:	3301      	adds	r3, #1
    b9e0:	2704      	movs	r7, #4
    b9e2:	2600      	movs	r6, #0
    b9e4:	9302      	str	r3, [sp, #8]
    b9e6:	e74c      	b.n	b882 <__aeabi_dmul+0x4a>
    b9e8:	2303      	movs	r3, #3
    b9ea:	4681      	mov	r9, r0
    b9ec:	270c      	movs	r7, #12
    b9ee:	9302      	str	r3, [sp, #8]
    b9f0:	e747      	b.n	b882 <__aeabi_dmul+0x4a>
    b9f2:	2280      	movs	r2, #128	; 0x80
    b9f4:	2300      	movs	r3, #0
    b9f6:	2500      	movs	r5, #0
    b9f8:	0312      	lsls	r2, r2, #12
    b9fa:	4699      	mov	r9, r3
    b9fc:	4c05      	ldr	r4, [pc, #20]	; (ba14 <__aeabi_dmul+0x1dc>)
    b9fe:	e782      	b.n	b906 <__aeabi_dmul+0xce>
    ba00:	465c      	mov	r4, fp
    ba02:	464b      	mov	r3, r9
    ba04:	9802      	ldr	r0, [sp, #8]
    ba06:	e76f      	b.n	b8e8 <__aeabi_dmul+0xb0>
    ba08:	465c      	mov	r4, fp
    ba0a:	464b      	mov	r3, r9
    ba0c:	9501      	str	r5, [sp, #4]
    ba0e:	9802      	ldr	r0, [sp, #8]
    ba10:	e76a      	b.n	b8e8 <__aeabi_dmul+0xb0>
    ba12:	46c0      	nop			; (mov r8, r8)
    ba14:	000007ff 	.word	0x000007ff
    ba18:	fffffc01 	.word	0xfffffc01
    ba1c:	0000cbf8 	.word	0x0000cbf8
    ba20:	800fffff 	.word	0x800fffff
    ba24:	fffffc0d 	.word	0xfffffc0d
    ba28:	464a      	mov	r2, r9
    ba2a:	4649      	mov	r1, r9
    ba2c:	0c17      	lsrs	r7, r2, #16
    ba2e:	0c1a      	lsrs	r2, r3, #16
    ba30:	041b      	lsls	r3, r3, #16
    ba32:	0c1b      	lsrs	r3, r3, #16
    ba34:	0408      	lsls	r0, r1, #16
    ba36:	0019      	movs	r1, r3
    ba38:	0c00      	lsrs	r0, r0, #16
    ba3a:	4341      	muls	r1, r0
    ba3c:	0015      	movs	r5, r2
    ba3e:	4688      	mov	r8, r1
    ba40:	0019      	movs	r1, r3
    ba42:	437d      	muls	r5, r7
    ba44:	4379      	muls	r1, r7
    ba46:	9503      	str	r5, [sp, #12]
    ba48:	4689      	mov	r9, r1
    ba4a:	0029      	movs	r1, r5
    ba4c:	0015      	movs	r5, r2
    ba4e:	4345      	muls	r5, r0
    ba50:	444d      	add	r5, r9
    ba52:	9502      	str	r5, [sp, #8]
    ba54:	4645      	mov	r5, r8
    ba56:	0c2d      	lsrs	r5, r5, #16
    ba58:	46aa      	mov	sl, r5
    ba5a:	9d02      	ldr	r5, [sp, #8]
    ba5c:	4455      	add	r5, sl
    ba5e:	45a9      	cmp	r9, r5
    ba60:	d906      	bls.n	ba70 <__aeabi_dmul+0x238>
    ba62:	468a      	mov	sl, r1
    ba64:	2180      	movs	r1, #128	; 0x80
    ba66:	0249      	lsls	r1, r1, #9
    ba68:	4689      	mov	r9, r1
    ba6a:	44ca      	add	sl, r9
    ba6c:	4651      	mov	r1, sl
    ba6e:	9103      	str	r1, [sp, #12]
    ba70:	0c29      	lsrs	r1, r5, #16
    ba72:	9104      	str	r1, [sp, #16]
    ba74:	4641      	mov	r1, r8
    ba76:	0409      	lsls	r1, r1, #16
    ba78:	042d      	lsls	r5, r5, #16
    ba7a:	0c09      	lsrs	r1, r1, #16
    ba7c:	4688      	mov	r8, r1
    ba7e:	0029      	movs	r1, r5
    ba80:	0c25      	lsrs	r5, r4, #16
    ba82:	0424      	lsls	r4, r4, #16
    ba84:	4441      	add	r1, r8
    ba86:	0c24      	lsrs	r4, r4, #16
    ba88:	9105      	str	r1, [sp, #20]
    ba8a:	0021      	movs	r1, r4
    ba8c:	4341      	muls	r1, r0
    ba8e:	4688      	mov	r8, r1
    ba90:	0021      	movs	r1, r4
    ba92:	4379      	muls	r1, r7
    ba94:	468a      	mov	sl, r1
    ba96:	4368      	muls	r0, r5
    ba98:	4641      	mov	r1, r8
    ba9a:	4450      	add	r0, sl
    ba9c:	4681      	mov	r9, r0
    ba9e:	0c08      	lsrs	r0, r1, #16
    baa0:	4448      	add	r0, r9
    baa2:	436f      	muls	r7, r5
    baa4:	4582      	cmp	sl, r0
    baa6:	d903      	bls.n	bab0 <__aeabi_dmul+0x278>
    baa8:	2180      	movs	r1, #128	; 0x80
    baaa:	0249      	lsls	r1, r1, #9
    baac:	4689      	mov	r9, r1
    baae:	444f      	add	r7, r9
    bab0:	0c01      	lsrs	r1, r0, #16
    bab2:	4689      	mov	r9, r1
    bab4:	0039      	movs	r1, r7
    bab6:	4449      	add	r1, r9
    bab8:	9102      	str	r1, [sp, #8]
    baba:	4641      	mov	r1, r8
    babc:	040f      	lsls	r7, r1, #16
    babe:	9904      	ldr	r1, [sp, #16]
    bac0:	0c3f      	lsrs	r7, r7, #16
    bac2:	4688      	mov	r8, r1
    bac4:	0400      	lsls	r0, r0, #16
    bac6:	19c0      	adds	r0, r0, r7
    bac8:	4480      	add	r8, r0
    baca:	4641      	mov	r1, r8
    bacc:	9104      	str	r1, [sp, #16]
    bace:	4659      	mov	r1, fp
    bad0:	0c0f      	lsrs	r7, r1, #16
    bad2:	0409      	lsls	r1, r1, #16
    bad4:	0c09      	lsrs	r1, r1, #16
    bad6:	4688      	mov	r8, r1
    bad8:	4359      	muls	r1, r3
    bada:	468a      	mov	sl, r1
    badc:	0039      	movs	r1, r7
    bade:	4351      	muls	r1, r2
    bae0:	4689      	mov	r9, r1
    bae2:	4641      	mov	r1, r8
    bae4:	434a      	muls	r2, r1
    bae6:	4651      	mov	r1, sl
    bae8:	0c09      	lsrs	r1, r1, #16
    baea:	468b      	mov	fp, r1
    baec:	437b      	muls	r3, r7
    baee:	18d2      	adds	r2, r2, r3
    baf0:	445a      	add	r2, fp
    baf2:	4293      	cmp	r3, r2
    baf4:	d903      	bls.n	bafe <__aeabi_dmul+0x2c6>
    baf6:	2380      	movs	r3, #128	; 0x80
    baf8:	025b      	lsls	r3, r3, #9
    bafa:	469b      	mov	fp, r3
    bafc:	44d9      	add	r9, fp
    bafe:	4651      	mov	r1, sl
    bb00:	0409      	lsls	r1, r1, #16
    bb02:	0c09      	lsrs	r1, r1, #16
    bb04:	468a      	mov	sl, r1
    bb06:	4641      	mov	r1, r8
    bb08:	4361      	muls	r1, r4
    bb0a:	437c      	muls	r4, r7
    bb0c:	0c13      	lsrs	r3, r2, #16
    bb0e:	0412      	lsls	r2, r2, #16
    bb10:	444b      	add	r3, r9
    bb12:	4452      	add	r2, sl
    bb14:	46a1      	mov	r9, r4
    bb16:	468a      	mov	sl, r1
    bb18:	003c      	movs	r4, r7
    bb1a:	4641      	mov	r1, r8
    bb1c:	436c      	muls	r4, r5
    bb1e:	434d      	muls	r5, r1
    bb20:	4651      	mov	r1, sl
    bb22:	444d      	add	r5, r9
    bb24:	0c0f      	lsrs	r7, r1, #16
    bb26:	197d      	adds	r5, r7, r5
    bb28:	45a9      	cmp	r9, r5
    bb2a:	d903      	bls.n	bb34 <__aeabi_dmul+0x2fc>
    bb2c:	2180      	movs	r1, #128	; 0x80
    bb2e:	0249      	lsls	r1, r1, #9
    bb30:	4688      	mov	r8, r1
    bb32:	4444      	add	r4, r8
    bb34:	9f04      	ldr	r7, [sp, #16]
    bb36:	9903      	ldr	r1, [sp, #12]
    bb38:	46b8      	mov	r8, r7
    bb3a:	4441      	add	r1, r8
    bb3c:	468b      	mov	fp, r1
    bb3e:	4583      	cmp	fp, r0
    bb40:	4180      	sbcs	r0, r0
    bb42:	4241      	negs	r1, r0
    bb44:	4688      	mov	r8, r1
    bb46:	4651      	mov	r1, sl
    bb48:	0408      	lsls	r0, r1, #16
    bb4a:	042f      	lsls	r7, r5, #16
    bb4c:	0c00      	lsrs	r0, r0, #16
    bb4e:	183f      	adds	r7, r7, r0
    bb50:	4658      	mov	r0, fp
    bb52:	9902      	ldr	r1, [sp, #8]
    bb54:	1810      	adds	r0, r2, r0
    bb56:	4689      	mov	r9, r1
    bb58:	4290      	cmp	r0, r2
    bb5a:	4192      	sbcs	r2, r2
    bb5c:	444f      	add	r7, r9
    bb5e:	46ba      	mov	sl, r7
    bb60:	4252      	negs	r2, r2
    bb62:	4699      	mov	r9, r3
    bb64:	4693      	mov	fp, r2
    bb66:	44c2      	add	sl, r8
    bb68:	44d1      	add	r9, sl
    bb6a:	44cb      	add	fp, r9
    bb6c:	428f      	cmp	r7, r1
    bb6e:	41bf      	sbcs	r7, r7
    bb70:	45c2      	cmp	sl, r8
    bb72:	4189      	sbcs	r1, r1
    bb74:	4599      	cmp	r9, r3
    bb76:	419b      	sbcs	r3, r3
    bb78:	4593      	cmp	fp, r2
    bb7a:	4192      	sbcs	r2, r2
    bb7c:	427f      	negs	r7, r7
    bb7e:	4249      	negs	r1, r1
    bb80:	0c2d      	lsrs	r5, r5, #16
    bb82:	4252      	negs	r2, r2
    bb84:	430f      	orrs	r7, r1
    bb86:	425b      	negs	r3, r3
    bb88:	4313      	orrs	r3, r2
    bb8a:	197f      	adds	r7, r7, r5
    bb8c:	18ff      	adds	r7, r7, r3
    bb8e:	465b      	mov	r3, fp
    bb90:	193c      	adds	r4, r7, r4
    bb92:	0ddb      	lsrs	r3, r3, #23
    bb94:	9a05      	ldr	r2, [sp, #20]
    bb96:	0264      	lsls	r4, r4, #9
    bb98:	431c      	orrs	r4, r3
    bb9a:	0243      	lsls	r3, r0, #9
    bb9c:	4313      	orrs	r3, r2
    bb9e:	1e5d      	subs	r5, r3, #1
    bba0:	41ab      	sbcs	r3, r5
    bba2:	465a      	mov	r2, fp
    bba4:	0dc0      	lsrs	r0, r0, #23
    bba6:	4303      	orrs	r3, r0
    bba8:	0252      	lsls	r2, r2, #9
    bbaa:	4313      	orrs	r3, r2
    bbac:	01e2      	lsls	r2, r4, #7
    bbae:	d556      	bpl.n	bc5e <__aeabi_dmul+0x426>
    bbb0:	2001      	movs	r0, #1
    bbb2:	085a      	lsrs	r2, r3, #1
    bbb4:	4003      	ands	r3, r0
    bbb6:	4313      	orrs	r3, r2
    bbb8:	07e2      	lsls	r2, r4, #31
    bbba:	4313      	orrs	r3, r2
    bbbc:	0864      	lsrs	r4, r4, #1
    bbbe:	485a      	ldr	r0, [pc, #360]	; (bd28 <__aeabi_dmul+0x4f0>)
    bbc0:	4460      	add	r0, ip
    bbc2:	2800      	cmp	r0, #0
    bbc4:	dd4d      	ble.n	bc62 <__aeabi_dmul+0x42a>
    bbc6:	075a      	lsls	r2, r3, #29
    bbc8:	d009      	beq.n	bbde <__aeabi_dmul+0x3a6>
    bbca:	220f      	movs	r2, #15
    bbcc:	401a      	ands	r2, r3
    bbce:	2a04      	cmp	r2, #4
    bbd0:	d005      	beq.n	bbde <__aeabi_dmul+0x3a6>
    bbd2:	1d1a      	adds	r2, r3, #4
    bbd4:	429a      	cmp	r2, r3
    bbd6:	419b      	sbcs	r3, r3
    bbd8:	425b      	negs	r3, r3
    bbda:	18e4      	adds	r4, r4, r3
    bbdc:	0013      	movs	r3, r2
    bbde:	01e2      	lsls	r2, r4, #7
    bbe0:	d504      	bpl.n	bbec <__aeabi_dmul+0x3b4>
    bbe2:	2080      	movs	r0, #128	; 0x80
    bbe4:	4a51      	ldr	r2, [pc, #324]	; (bd2c <__aeabi_dmul+0x4f4>)
    bbe6:	00c0      	lsls	r0, r0, #3
    bbe8:	4014      	ands	r4, r2
    bbea:	4460      	add	r0, ip
    bbec:	4a50      	ldr	r2, [pc, #320]	; (bd30 <__aeabi_dmul+0x4f8>)
    bbee:	4290      	cmp	r0, r2
    bbf0:	dd00      	ble.n	bbf4 <__aeabi_dmul+0x3bc>
    bbf2:	e6e3      	b.n	b9bc <__aeabi_dmul+0x184>
    bbf4:	2501      	movs	r5, #1
    bbf6:	08db      	lsrs	r3, r3, #3
    bbf8:	0762      	lsls	r2, r4, #29
    bbfa:	431a      	orrs	r2, r3
    bbfc:	0264      	lsls	r4, r4, #9
    bbfe:	9b01      	ldr	r3, [sp, #4]
    bc00:	4691      	mov	r9, r2
    bc02:	0b22      	lsrs	r2, r4, #12
    bc04:	0544      	lsls	r4, r0, #21
    bc06:	0d64      	lsrs	r4, r4, #21
    bc08:	401d      	ands	r5, r3
    bc0a:	e67c      	b.n	b906 <__aeabi_dmul+0xce>
    bc0c:	2280      	movs	r2, #128	; 0x80
    bc0e:	4659      	mov	r1, fp
    bc10:	0312      	lsls	r2, r2, #12
    bc12:	4211      	tst	r1, r2
    bc14:	d008      	beq.n	bc28 <__aeabi_dmul+0x3f0>
    bc16:	4214      	tst	r4, r2
    bc18:	d106      	bne.n	bc28 <__aeabi_dmul+0x3f0>
    bc1a:	4322      	orrs	r2, r4
    bc1c:	0312      	lsls	r2, r2, #12
    bc1e:	0b12      	lsrs	r2, r2, #12
    bc20:	4645      	mov	r5, r8
    bc22:	4699      	mov	r9, r3
    bc24:	4c43      	ldr	r4, [pc, #268]	; (bd34 <__aeabi_dmul+0x4fc>)
    bc26:	e66e      	b.n	b906 <__aeabi_dmul+0xce>
    bc28:	465b      	mov	r3, fp
    bc2a:	431a      	orrs	r2, r3
    bc2c:	0312      	lsls	r2, r2, #12
    bc2e:	0b12      	lsrs	r2, r2, #12
    bc30:	4c40      	ldr	r4, [pc, #256]	; (bd34 <__aeabi_dmul+0x4fc>)
    bc32:	e668      	b.n	b906 <__aeabi_dmul+0xce>
    bc34:	0003      	movs	r3, r0
    bc36:	4654      	mov	r4, sl
    bc38:	3b28      	subs	r3, #40	; 0x28
    bc3a:	409c      	lsls	r4, r3
    bc3c:	2300      	movs	r3, #0
    bc3e:	e6b9      	b.n	b9b4 <__aeabi_dmul+0x17c>
    bc40:	f000 fc8c 	bl	c55c <__clzsi2>
    bc44:	3020      	adds	r0, #32
    bc46:	e6a6      	b.n	b996 <__aeabi_dmul+0x15e>
    bc48:	0003      	movs	r3, r0
    bc4a:	3b28      	subs	r3, #40	; 0x28
    bc4c:	409f      	lsls	r7, r3
    bc4e:	2300      	movs	r3, #0
    bc50:	46bb      	mov	fp, r7
    bc52:	4699      	mov	r9, r3
    bc54:	e68a      	b.n	b96c <__aeabi_dmul+0x134>
    bc56:	f000 fc81 	bl	c55c <__clzsi2>
    bc5a:	3020      	adds	r0, #32
    bc5c:	e674      	b.n	b948 <__aeabi_dmul+0x110>
    bc5e:	46b4      	mov	ip, r6
    bc60:	e7ad      	b.n	bbbe <__aeabi_dmul+0x386>
    bc62:	2501      	movs	r5, #1
    bc64:	1a2a      	subs	r2, r5, r0
    bc66:	2a38      	cmp	r2, #56	; 0x38
    bc68:	dd06      	ble.n	bc78 <__aeabi_dmul+0x440>
    bc6a:	9b01      	ldr	r3, [sp, #4]
    bc6c:	2400      	movs	r4, #0
    bc6e:	401d      	ands	r5, r3
    bc70:	2300      	movs	r3, #0
    bc72:	2200      	movs	r2, #0
    bc74:	4699      	mov	r9, r3
    bc76:	e646      	b.n	b906 <__aeabi_dmul+0xce>
    bc78:	2a1f      	cmp	r2, #31
    bc7a:	dc21      	bgt.n	bcc0 <__aeabi_dmul+0x488>
    bc7c:	2520      	movs	r5, #32
    bc7e:	0020      	movs	r0, r4
    bc80:	1aad      	subs	r5, r5, r2
    bc82:	001e      	movs	r6, r3
    bc84:	40ab      	lsls	r3, r5
    bc86:	40a8      	lsls	r0, r5
    bc88:	40d6      	lsrs	r6, r2
    bc8a:	1e5d      	subs	r5, r3, #1
    bc8c:	41ab      	sbcs	r3, r5
    bc8e:	4330      	orrs	r0, r6
    bc90:	4318      	orrs	r0, r3
    bc92:	40d4      	lsrs	r4, r2
    bc94:	0743      	lsls	r3, r0, #29
    bc96:	d009      	beq.n	bcac <__aeabi_dmul+0x474>
    bc98:	230f      	movs	r3, #15
    bc9a:	4003      	ands	r3, r0
    bc9c:	2b04      	cmp	r3, #4
    bc9e:	d005      	beq.n	bcac <__aeabi_dmul+0x474>
    bca0:	0003      	movs	r3, r0
    bca2:	1d18      	adds	r0, r3, #4
    bca4:	4298      	cmp	r0, r3
    bca6:	419b      	sbcs	r3, r3
    bca8:	425b      	negs	r3, r3
    bcaa:	18e4      	adds	r4, r4, r3
    bcac:	0223      	lsls	r3, r4, #8
    bcae:	d521      	bpl.n	bcf4 <__aeabi_dmul+0x4bc>
    bcb0:	2501      	movs	r5, #1
    bcb2:	9b01      	ldr	r3, [sp, #4]
    bcb4:	2401      	movs	r4, #1
    bcb6:	401d      	ands	r5, r3
    bcb8:	2300      	movs	r3, #0
    bcba:	2200      	movs	r2, #0
    bcbc:	4699      	mov	r9, r3
    bcbe:	e622      	b.n	b906 <__aeabi_dmul+0xce>
    bcc0:	251f      	movs	r5, #31
    bcc2:	0021      	movs	r1, r4
    bcc4:	426d      	negs	r5, r5
    bcc6:	1a28      	subs	r0, r5, r0
    bcc8:	40c1      	lsrs	r1, r0
    bcca:	0008      	movs	r0, r1
    bccc:	2a20      	cmp	r2, #32
    bcce:	d01d      	beq.n	bd0c <__aeabi_dmul+0x4d4>
    bcd0:	355f      	adds	r5, #95	; 0x5f
    bcd2:	1aaa      	subs	r2, r5, r2
    bcd4:	4094      	lsls	r4, r2
    bcd6:	4323      	orrs	r3, r4
    bcd8:	1e5c      	subs	r4, r3, #1
    bcda:	41a3      	sbcs	r3, r4
    bcdc:	2507      	movs	r5, #7
    bcde:	4303      	orrs	r3, r0
    bce0:	401d      	ands	r5, r3
    bce2:	2200      	movs	r2, #0
    bce4:	2d00      	cmp	r5, #0
    bce6:	d009      	beq.n	bcfc <__aeabi_dmul+0x4c4>
    bce8:	220f      	movs	r2, #15
    bcea:	2400      	movs	r4, #0
    bcec:	401a      	ands	r2, r3
    bcee:	0018      	movs	r0, r3
    bcf0:	2a04      	cmp	r2, #4
    bcf2:	d1d6      	bne.n	bca2 <__aeabi_dmul+0x46a>
    bcf4:	0003      	movs	r3, r0
    bcf6:	0765      	lsls	r5, r4, #29
    bcf8:	0264      	lsls	r4, r4, #9
    bcfa:	0b22      	lsrs	r2, r4, #12
    bcfc:	08db      	lsrs	r3, r3, #3
    bcfe:	432b      	orrs	r3, r5
    bd00:	2501      	movs	r5, #1
    bd02:	4699      	mov	r9, r3
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	2400      	movs	r4, #0
    bd08:	401d      	ands	r5, r3
    bd0a:	e5fc      	b.n	b906 <__aeabi_dmul+0xce>
    bd0c:	2400      	movs	r4, #0
    bd0e:	e7e2      	b.n	bcd6 <__aeabi_dmul+0x49e>
    bd10:	2280      	movs	r2, #128	; 0x80
    bd12:	2501      	movs	r5, #1
    bd14:	0312      	lsls	r2, r2, #12
    bd16:	4322      	orrs	r2, r4
    bd18:	9901      	ldr	r1, [sp, #4]
    bd1a:	0312      	lsls	r2, r2, #12
    bd1c:	0b12      	lsrs	r2, r2, #12
    bd1e:	400d      	ands	r5, r1
    bd20:	4699      	mov	r9, r3
    bd22:	4c04      	ldr	r4, [pc, #16]	; (bd34 <__aeabi_dmul+0x4fc>)
    bd24:	e5ef      	b.n	b906 <__aeabi_dmul+0xce>
    bd26:	46c0      	nop			; (mov r8, r8)
    bd28:	000003ff 	.word	0x000003ff
    bd2c:	feffffff 	.word	0xfeffffff
    bd30:	000007fe 	.word	0x000007fe
    bd34:	000007ff 	.word	0x000007ff

0000bd38 <__aeabi_dsub>:
    bd38:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd3a:	4646      	mov	r6, r8
    bd3c:	46d6      	mov	lr, sl
    bd3e:	464f      	mov	r7, r9
    bd40:	030c      	lsls	r4, r1, #12
    bd42:	b5c0      	push	{r6, r7, lr}
    bd44:	0fcd      	lsrs	r5, r1, #31
    bd46:	004e      	lsls	r6, r1, #1
    bd48:	0a61      	lsrs	r1, r4, #9
    bd4a:	0f44      	lsrs	r4, r0, #29
    bd4c:	430c      	orrs	r4, r1
    bd4e:	00c1      	lsls	r1, r0, #3
    bd50:	0058      	lsls	r0, r3, #1
    bd52:	0d40      	lsrs	r0, r0, #21
    bd54:	4684      	mov	ip, r0
    bd56:	468a      	mov	sl, r1
    bd58:	000f      	movs	r7, r1
    bd5a:	0319      	lsls	r1, r3, #12
    bd5c:	0f50      	lsrs	r0, r2, #29
    bd5e:	0a49      	lsrs	r1, r1, #9
    bd60:	4301      	orrs	r1, r0
    bd62:	48c6      	ldr	r0, [pc, #792]	; (c07c <__aeabi_dsub+0x344>)
    bd64:	0d76      	lsrs	r6, r6, #21
    bd66:	46a8      	mov	r8, r5
    bd68:	0fdb      	lsrs	r3, r3, #31
    bd6a:	00d2      	lsls	r2, r2, #3
    bd6c:	4584      	cmp	ip, r0
    bd6e:	d100      	bne.n	bd72 <__aeabi_dsub+0x3a>
    bd70:	e0d8      	b.n	bf24 <__aeabi_dsub+0x1ec>
    bd72:	2001      	movs	r0, #1
    bd74:	4043      	eors	r3, r0
    bd76:	42ab      	cmp	r3, r5
    bd78:	d100      	bne.n	bd7c <__aeabi_dsub+0x44>
    bd7a:	e0a6      	b.n	beca <__aeabi_dsub+0x192>
    bd7c:	4660      	mov	r0, ip
    bd7e:	1a35      	subs	r5, r6, r0
    bd80:	2d00      	cmp	r5, #0
    bd82:	dc00      	bgt.n	bd86 <__aeabi_dsub+0x4e>
    bd84:	e105      	b.n	bf92 <__aeabi_dsub+0x25a>
    bd86:	2800      	cmp	r0, #0
    bd88:	d110      	bne.n	bdac <__aeabi_dsub+0x74>
    bd8a:	000b      	movs	r3, r1
    bd8c:	4313      	orrs	r3, r2
    bd8e:	d100      	bne.n	bd92 <__aeabi_dsub+0x5a>
    bd90:	e0d7      	b.n	bf42 <__aeabi_dsub+0x20a>
    bd92:	1e6b      	subs	r3, r5, #1
    bd94:	2b00      	cmp	r3, #0
    bd96:	d000      	beq.n	bd9a <__aeabi_dsub+0x62>
    bd98:	e14b      	b.n	c032 <__aeabi_dsub+0x2fa>
    bd9a:	4653      	mov	r3, sl
    bd9c:	1a9f      	subs	r7, r3, r2
    bd9e:	45ba      	cmp	sl, r7
    bda0:	4180      	sbcs	r0, r0
    bda2:	1a64      	subs	r4, r4, r1
    bda4:	4240      	negs	r0, r0
    bda6:	1a24      	subs	r4, r4, r0
    bda8:	2601      	movs	r6, #1
    bdaa:	e01e      	b.n	bdea <__aeabi_dsub+0xb2>
    bdac:	4bb3      	ldr	r3, [pc, #716]	; (c07c <__aeabi_dsub+0x344>)
    bdae:	429e      	cmp	r6, r3
    bdb0:	d048      	beq.n	be44 <__aeabi_dsub+0x10c>
    bdb2:	2380      	movs	r3, #128	; 0x80
    bdb4:	041b      	lsls	r3, r3, #16
    bdb6:	4319      	orrs	r1, r3
    bdb8:	2d38      	cmp	r5, #56	; 0x38
    bdba:	dd00      	ble.n	bdbe <__aeabi_dsub+0x86>
    bdbc:	e119      	b.n	bff2 <__aeabi_dsub+0x2ba>
    bdbe:	2d1f      	cmp	r5, #31
    bdc0:	dd00      	ble.n	bdc4 <__aeabi_dsub+0x8c>
    bdc2:	e14c      	b.n	c05e <__aeabi_dsub+0x326>
    bdc4:	2320      	movs	r3, #32
    bdc6:	000f      	movs	r7, r1
    bdc8:	1b5b      	subs	r3, r3, r5
    bdca:	0010      	movs	r0, r2
    bdcc:	409a      	lsls	r2, r3
    bdce:	409f      	lsls	r7, r3
    bdd0:	40e8      	lsrs	r0, r5
    bdd2:	1e53      	subs	r3, r2, #1
    bdd4:	419a      	sbcs	r2, r3
    bdd6:	40e9      	lsrs	r1, r5
    bdd8:	4307      	orrs	r7, r0
    bdda:	4317      	orrs	r7, r2
    bddc:	4653      	mov	r3, sl
    bdde:	1bdf      	subs	r7, r3, r7
    bde0:	1a61      	subs	r1, r4, r1
    bde2:	45ba      	cmp	sl, r7
    bde4:	41a4      	sbcs	r4, r4
    bde6:	4264      	negs	r4, r4
    bde8:	1b0c      	subs	r4, r1, r4
    bdea:	0223      	lsls	r3, r4, #8
    bdec:	d400      	bmi.n	bdf0 <__aeabi_dsub+0xb8>
    bdee:	e0c5      	b.n	bf7c <__aeabi_dsub+0x244>
    bdf0:	0264      	lsls	r4, r4, #9
    bdf2:	0a65      	lsrs	r5, r4, #9
    bdf4:	2d00      	cmp	r5, #0
    bdf6:	d100      	bne.n	bdfa <__aeabi_dsub+0xc2>
    bdf8:	e0f6      	b.n	bfe8 <__aeabi_dsub+0x2b0>
    bdfa:	0028      	movs	r0, r5
    bdfc:	f000 fbae 	bl	c55c <__clzsi2>
    be00:	0003      	movs	r3, r0
    be02:	3b08      	subs	r3, #8
    be04:	2b1f      	cmp	r3, #31
    be06:	dd00      	ble.n	be0a <__aeabi_dsub+0xd2>
    be08:	e0e9      	b.n	bfde <__aeabi_dsub+0x2a6>
    be0a:	2220      	movs	r2, #32
    be0c:	003c      	movs	r4, r7
    be0e:	1ad2      	subs	r2, r2, r3
    be10:	409d      	lsls	r5, r3
    be12:	40d4      	lsrs	r4, r2
    be14:	409f      	lsls	r7, r3
    be16:	4325      	orrs	r5, r4
    be18:	429e      	cmp	r6, r3
    be1a:	dd00      	ble.n	be1e <__aeabi_dsub+0xe6>
    be1c:	e0db      	b.n	bfd6 <__aeabi_dsub+0x29e>
    be1e:	1b9e      	subs	r6, r3, r6
    be20:	1c73      	adds	r3, r6, #1
    be22:	2b1f      	cmp	r3, #31
    be24:	dd00      	ble.n	be28 <__aeabi_dsub+0xf0>
    be26:	e10a      	b.n	c03e <__aeabi_dsub+0x306>
    be28:	2220      	movs	r2, #32
    be2a:	0038      	movs	r0, r7
    be2c:	1ad2      	subs	r2, r2, r3
    be2e:	0029      	movs	r1, r5
    be30:	4097      	lsls	r7, r2
    be32:	002c      	movs	r4, r5
    be34:	4091      	lsls	r1, r2
    be36:	40d8      	lsrs	r0, r3
    be38:	1e7a      	subs	r2, r7, #1
    be3a:	4197      	sbcs	r7, r2
    be3c:	40dc      	lsrs	r4, r3
    be3e:	2600      	movs	r6, #0
    be40:	4301      	orrs	r1, r0
    be42:	430f      	orrs	r7, r1
    be44:	077b      	lsls	r3, r7, #29
    be46:	d009      	beq.n	be5c <__aeabi_dsub+0x124>
    be48:	230f      	movs	r3, #15
    be4a:	403b      	ands	r3, r7
    be4c:	2b04      	cmp	r3, #4
    be4e:	d005      	beq.n	be5c <__aeabi_dsub+0x124>
    be50:	1d3b      	adds	r3, r7, #4
    be52:	42bb      	cmp	r3, r7
    be54:	41bf      	sbcs	r7, r7
    be56:	427f      	negs	r7, r7
    be58:	19e4      	adds	r4, r4, r7
    be5a:	001f      	movs	r7, r3
    be5c:	0223      	lsls	r3, r4, #8
    be5e:	d525      	bpl.n	beac <__aeabi_dsub+0x174>
    be60:	4b86      	ldr	r3, [pc, #536]	; (c07c <__aeabi_dsub+0x344>)
    be62:	3601      	adds	r6, #1
    be64:	429e      	cmp	r6, r3
    be66:	d100      	bne.n	be6a <__aeabi_dsub+0x132>
    be68:	e0af      	b.n	bfca <__aeabi_dsub+0x292>
    be6a:	4b85      	ldr	r3, [pc, #532]	; (c080 <__aeabi_dsub+0x348>)
    be6c:	2501      	movs	r5, #1
    be6e:	401c      	ands	r4, r3
    be70:	4643      	mov	r3, r8
    be72:	0762      	lsls	r2, r4, #29
    be74:	08ff      	lsrs	r7, r7, #3
    be76:	0264      	lsls	r4, r4, #9
    be78:	0576      	lsls	r6, r6, #21
    be7a:	4317      	orrs	r7, r2
    be7c:	0b24      	lsrs	r4, r4, #12
    be7e:	0d76      	lsrs	r6, r6, #21
    be80:	401d      	ands	r5, r3
    be82:	2100      	movs	r1, #0
    be84:	0324      	lsls	r4, r4, #12
    be86:	0b23      	lsrs	r3, r4, #12
    be88:	0d0c      	lsrs	r4, r1, #20
    be8a:	4a7e      	ldr	r2, [pc, #504]	; (c084 <__aeabi_dsub+0x34c>)
    be8c:	0524      	lsls	r4, r4, #20
    be8e:	431c      	orrs	r4, r3
    be90:	4014      	ands	r4, r2
    be92:	0533      	lsls	r3, r6, #20
    be94:	4323      	orrs	r3, r4
    be96:	005b      	lsls	r3, r3, #1
    be98:	07ed      	lsls	r5, r5, #31
    be9a:	085b      	lsrs	r3, r3, #1
    be9c:	432b      	orrs	r3, r5
    be9e:	0038      	movs	r0, r7
    bea0:	0019      	movs	r1, r3
    bea2:	bc1c      	pop	{r2, r3, r4}
    bea4:	4690      	mov	r8, r2
    bea6:	4699      	mov	r9, r3
    bea8:	46a2      	mov	sl, r4
    beaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    beac:	2501      	movs	r5, #1
    beae:	4643      	mov	r3, r8
    beb0:	0762      	lsls	r2, r4, #29
    beb2:	08ff      	lsrs	r7, r7, #3
    beb4:	4317      	orrs	r7, r2
    beb6:	08e4      	lsrs	r4, r4, #3
    beb8:	401d      	ands	r5, r3
    beba:	4b70      	ldr	r3, [pc, #448]	; (c07c <__aeabi_dsub+0x344>)
    bebc:	429e      	cmp	r6, r3
    bebe:	d036      	beq.n	bf2e <__aeabi_dsub+0x1f6>
    bec0:	0324      	lsls	r4, r4, #12
    bec2:	0576      	lsls	r6, r6, #21
    bec4:	0b24      	lsrs	r4, r4, #12
    bec6:	0d76      	lsrs	r6, r6, #21
    bec8:	e7db      	b.n	be82 <__aeabi_dsub+0x14a>
    beca:	4663      	mov	r3, ip
    becc:	1af3      	subs	r3, r6, r3
    bece:	2b00      	cmp	r3, #0
    bed0:	dc00      	bgt.n	bed4 <__aeabi_dsub+0x19c>
    bed2:	e094      	b.n	bffe <__aeabi_dsub+0x2c6>
    bed4:	4660      	mov	r0, ip
    bed6:	2800      	cmp	r0, #0
    bed8:	d035      	beq.n	bf46 <__aeabi_dsub+0x20e>
    beda:	4868      	ldr	r0, [pc, #416]	; (c07c <__aeabi_dsub+0x344>)
    bedc:	4286      	cmp	r6, r0
    bede:	d0b1      	beq.n	be44 <__aeabi_dsub+0x10c>
    bee0:	2780      	movs	r7, #128	; 0x80
    bee2:	043f      	lsls	r7, r7, #16
    bee4:	4339      	orrs	r1, r7
    bee6:	2b38      	cmp	r3, #56	; 0x38
    bee8:	dc00      	bgt.n	beec <__aeabi_dsub+0x1b4>
    beea:	e0fd      	b.n	c0e8 <__aeabi_dsub+0x3b0>
    beec:	430a      	orrs	r2, r1
    beee:	0017      	movs	r7, r2
    bef0:	2100      	movs	r1, #0
    bef2:	1e7a      	subs	r2, r7, #1
    bef4:	4197      	sbcs	r7, r2
    bef6:	4457      	add	r7, sl
    bef8:	4557      	cmp	r7, sl
    befa:	4180      	sbcs	r0, r0
    befc:	1909      	adds	r1, r1, r4
    befe:	4244      	negs	r4, r0
    bf00:	190c      	adds	r4, r1, r4
    bf02:	0223      	lsls	r3, r4, #8
    bf04:	d53a      	bpl.n	bf7c <__aeabi_dsub+0x244>
    bf06:	4b5d      	ldr	r3, [pc, #372]	; (c07c <__aeabi_dsub+0x344>)
    bf08:	3601      	adds	r6, #1
    bf0a:	429e      	cmp	r6, r3
    bf0c:	d100      	bne.n	bf10 <__aeabi_dsub+0x1d8>
    bf0e:	e14b      	b.n	c1a8 <__aeabi_dsub+0x470>
    bf10:	2201      	movs	r2, #1
    bf12:	4b5b      	ldr	r3, [pc, #364]	; (c080 <__aeabi_dsub+0x348>)
    bf14:	401c      	ands	r4, r3
    bf16:	087b      	lsrs	r3, r7, #1
    bf18:	4017      	ands	r7, r2
    bf1a:	431f      	orrs	r7, r3
    bf1c:	07e2      	lsls	r2, r4, #31
    bf1e:	4317      	orrs	r7, r2
    bf20:	0864      	lsrs	r4, r4, #1
    bf22:	e78f      	b.n	be44 <__aeabi_dsub+0x10c>
    bf24:	0008      	movs	r0, r1
    bf26:	4310      	orrs	r0, r2
    bf28:	d000      	beq.n	bf2c <__aeabi_dsub+0x1f4>
    bf2a:	e724      	b.n	bd76 <__aeabi_dsub+0x3e>
    bf2c:	e721      	b.n	bd72 <__aeabi_dsub+0x3a>
    bf2e:	0023      	movs	r3, r4
    bf30:	433b      	orrs	r3, r7
    bf32:	d100      	bne.n	bf36 <__aeabi_dsub+0x1fe>
    bf34:	e1b9      	b.n	c2aa <__aeabi_dsub+0x572>
    bf36:	2280      	movs	r2, #128	; 0x80
    bf38:	0312      	lsls	r2, r2, #12
    bf3a:	4314      	orrs	r4, r2
    bf3c:	0324      	lsls	r4, r4, #12
    bf3e:	0b24      	lsrs	r4, r4, #12
    bf40:	e79f      	b.n	be82 <__aeabi_dsub+0x14a>
    bf42:	002e      	movs	r6, r5
    bf44:	e77e      	b.n	be44 <__aeabi_dsub+0x10c>
    bf46:	0008      	movs	r0, r1
    bf48:	4310      	orrs	r0, r2
    bf4a:	d100      	bne.n	bf4e <__aeabi_dsub+0x216>
    bf4c:	e0ca      	b.n	c0e4 <__aeabi_dsub+0x3ac>
    bf4e:	1e58      	subs	r0, r3, #1
    bf50:	4684      	mov	ip, r0
    bf52:	2800      	cmp	r0, #0
    bf54:	d000      	beq.n	bf58 <__aeabi_dsub+0x220>
    bf56:	e0e7      	b.n	c128 <__aeabi_dsub+0x3f0>
    bf58:	4452      	add	r2, sl
    bf5a:	4552      	cmp	r2, sl
    bf5c:	4180      	sbcs	r0, r0
    bf5e:	1864      	adds	r4, r4, r1
    bf60:	4240      	negs	r0, r0
    bf62:	1824      	adds	r4, r4, r0
    bf64:	0017      	movs	r7, r2
    bf66:	2601      	movs	r6, #1
    bf68:	0223      	lsls	r3, r4, #8
    bf6a:	d507      	bpl.n	bf7c <__aeabi_dsub+0x244>
    bf6c:	2602      	movs	r6, #2
    bf6e:	e7cf      	b.n	bf10 <__aeabi_dsub+0x1d8>
    bf70:	4664      	mov	r4, ip
    bf72:	432c      	orrs	r4, r5
    bf74:	d100      	bne.n	bf78 <__aeabi_dsub+0x240>
    bf76:	e1b3      	b.n	c2e0 <__aeabi_dsub+0x5a8>
    bf78:	002c      	movs	r4, r5
    bf7a:	4667      	mov	r7, ip
    bf7c:	077b      	lsls	r3, r7, #29
    bf7e:	d000      	beq.n	bf82 <__aeabi_dsub+0x24a>
    bf80:	e762      	b.n	be48 <__aeabi_dsub+0x110>
    bf82:	0763      	lsls	r3, r4, #29
    bf84:	08ff      	lsrs	r7, r7, #3
    bf86:	431f      	orrs	r7, r3
    bf88:	2501      	movs	r5, #1
    bf8a:	4643      	mov	r3, r8
    bf8c:	08e4      	lsrs	r4, r4, #3
    bf8e:	401d      	ands	r5, r3
    bf90:	e793      	b.n	beba <__aeabi_dsub+0x182>
    bf92:	2d00      	cmp	r5, #0
    bf94:	d178      	bne.n	c088 <__aeabi_dsub+0x350>
    bf96:	1c75      	adds	r5, r6, #1
    bf98:	056d      	lsls	r5, r5, #21
    bf9a:	0d6d      	lsrs	r5, r5, #21
    bf9c:	2d01      	cmp	r5, #1
    bf9e:	dc00      	bgt.n	bfa2 <__aeabi_dsub+0x26a>
    bfa0:	e0f2      	b.n	c188 <__aeabi_dsub+0x450>
    bfa2:	4650      	mov	r0, sl
    bfa4:	1a80      	subs	r0, r0, r2
    bfa6:	4582      	cmp	sl, r0
    bfa8:	41bf      	sbcs	r7, r7
    bfaa:	1a65      	subs	r5, r4, r1
    bfac:	427f      	negs	r7, r7
    bfae:	1bed      	subs	r5, r5, r7
    bfb0:	4684      	mov	ip, r0
    bfb2:	0228      	lsls	r0, r5, #8
    bfb4:	d400      	bmi.n	bfb8 <__aeabi_dsub+0x280>
    bfb6:	e08c      	b.n	c0d2 <__aeabi_dsub+0x39a>
    bfb8:	4650      	mov	r0, sl
    bfba:	1a17      	subs	r7, r2, r0
    bfbc:	42ba      	cmp	r2, r7
    bfbe:	4192      	sbcs	r2, r2
    bfc0:	1b0c      	subs	r4, r1, r4
    bfc2:	4255      	negs	r5, r2
    bfc4:	1b65      	subs	r5, r4, r5
    bfc6:	4698      	mov	r8, r3
    bfc8:	e714      	b.n	bdf4 <__aeabi_dsub+0xbc>
    bfca:	2501      	movs	r5, #1
    bfcc:	4643      	mov	r3, r8
    bfce:	2400      	movs	r4, #0
    bfd0:	401d      	ands	r5, r3
    bfd2:	2700      	movs	r7, #0
    bfd4:	e755      	b.n	be82 <__aeabi_dsub+0x14a>
    bfd6:	4c2a      	ldr	r4, [pc, #168]	; (c080 <__aeabi_dsub+0x348>)
    bfd8:	1af6      	subs	r6, r6, r3
    bfda:	402c      	ands	r4, r5
    bfdc:	e732      	b.n	be44 <__aeabi_dsub+0x10c>
    bfde:	003d      	movs	r5, r7
    bfe0:	3828      	subs	r0, #40	; 0x28
    bfe2:	4085      	lsls	r5, r0
    bfe4:	2700      	movs	r7, #0
    bfe6:	e717      	b.n	be18 <__aeabi_dsub+0xe0>
    bfe8:	0038      	movs	r0, r7
    bfea:	f000 fab7 	bl	c55c <__clzsi2>
    bfee:	3020      	adds	r0, #32
    bff0:	e706      	b.n	be00 <__aeabi_dsub+0xc8>
    bff2:	430a      	orrs	r2, r1
    bff4:	0017      	movs	r7, r2
    bff6:	2100      	movs	r1, #0
    bff8:	1e7a      	subs	r2, r7, #1
    bffa:	4197      	sbcs	r7, r2
    bffc:	e6ee      	b.n	bddc <__aeabi_dsub+0xa4>
    bffe:	2b00      	cmp	r3, #0
    c000:	d000      	beq.n	c004 <__aeabi_dsub+0x2cc>
    c002:	e0e5      	b.n	c1d0 <__aeabi_dsub+0x498>
    c004:	1c73      	adds	r3, r6, #1
    c006:	469c      	mov	ip, r3
    c008:	055b      	lsls	r3, r3, #21
    c00a:	0d5b      	lsrs	r3, r3, #21
    c00c:	2b01      	cmp	r3, #1
    c00e:	dc00      	bgt.n	c012 <__aeabi_dsub+0x2da>
    c010:	e09f      	b.n	c152 <__aeabi_dsub+0x41a>
    c012:	4b1a      	ldr	r3, [pc, #104]	; (c07c <__aeabi_dsub+0x344>)
    c014:	459c      	cmp	ip, r3
    c016:	d100      	bne.n	c01a <__aeabi_dsub+0x2e2>
    c018:	e0c5      	b.n	c1a6 <__aeabi_dsub+0x46e>
    c01a:	4452      	add	r2, sl
    c01c:	4552      	cmp	r2, sl
    c01e:	4180      	sbcs	r0, r0
    c020:	1864      	adds	r4, r4, r1
    c022:	4240      	negs	r0, r0
    c024:	1824      	adds	r4, r4, r0
    c026:	07e7      	lsls	r7, r4, #31
    c028:	0852      	lsrs	r2, r2, #1
    c02a:	4317      	orrs	r7, r2
    c02c:	0864      	lsrs	r4, r4, #1
    c02e:	4666      	mov	r6, ip
    c030:	e708      	b.n	be44 <__aeabi_dsub+0x10c>
    c032:	4812      	ldr	r0, [pc, #72]	; (c07c <__aeabi_dsub+0x344>)
    c034:	4285      	cmp	r5, r0
    c036:	d100      	bne.n	c03a <__aeabi_dsub+0x302>
    c038:	e085      	b.n	c146 <__aeabi_dsub+0x40e>
    c03a:	001d      	movs	r5, r3
    c03c:	e6bc      	b.n	bdb8 <__aeabi_dsub+0x80>
    c03e:	0029      	movs	r1, r5
    c040:	3e1f      	subs	r6, #31
    c042:	40f1      	lsrs	r1, r6
    c044:	2b20      	cmp	r3, #32
    c046:	d100      	bne.n	c04a <__aeabi_dsub+0x312>
    c048:	e07f      	b.n	c14a <__aeabi_dsub+0x412>
    c04a:	2240      	movs	r2, #64	; 0x40
    c04c:	1ad3      	subs	r3, r2, r3
    c04e:	409d      	lsls	r5, r3
    c050:	432f      	orrs	r7, r5
    c052:	1e7d      	subs	r5, r7, #1
    c054:	41af      	sbcs	r7, r5
    c056:	2400      	movs	r4, #0
    c058:	430f      	orrs	r7, r1
    c05a:	2600      	movs	r6, #0
    c05c:	e78e      	b.n	bf7c <__aeabi_dsub+0x244>
    c05e:	002b      	movs	r3, r5
    c060:	000f      	movs	r7, r1
    c062:	3b20      	subs	r3, #32
    c064:	40df      	lsrs	r7, r3
    c066:	2d20      	cmp	r5, #32
    c068:	d071      	beq.n	c14e <__aeabi_dsub+0x416>
    c06a:	2340      	movs	r3, #64	; 0x40
    c06c:	1b5d      	subs	r5, r3, r5
    c06e:	40a9      	lsls	r1, r5
    c070:	430a      	orrs	r2, r1
    c072:	1e51      	subs	r1, r2, #1
    c074:	418a      	sbcs	r2, r1
    c076:	2100      	movs	r1, #0
    c078:	4317      	orrs	r7, r2
    c07a:	e6af      	b.n	bddc <__aeabi_dsub+0xa4>
    c07c:	000007ff 	.word	0x000007ff
    c080:	ff7fffff 	.word	0xff7fffff
    c084:	800fffff 	.word	0x800fffff
    c088:	2e00      	cmp	r6, #0
    c08a:	d03e      	beq.n	c10a <__aeabi_dsub+0x3d2>
    c08c:	4eb3      	ldr	r6, [pc, #716]	; (c35c <__aeabi_dsub+0x624>)
    c08e:	45b4      	cmp	ip, r6
    c090:	d045      	beq.n	c11e <__aeabi_dsub+0x3e6>
    c092:	2680      	movs	r6, #128	; 0x80
    c094:	0436      	lsls	r6, r6, #16
    c096:	426d      	negs	r5, r5
    c098:	4334      	orrs	r4, r6
    c09a:	2d38      	cmp	r5, #56	; 0x38
    c09c:	dd00      	ble.n	c0a0 <__aeabi_dsub+0x368>
    c09e:	e0a8      	b.n	c1f2 <__aeabi_dsub+0x4ba>
    c0a0:	2d1f      	cmp	r5, #31
    c0a2:	dd00      	ble.n	c0a6 <__aeabi_dsub+0x36e>
    c0a4:	e11f      	b.n	c2e6 <__aeabi_dsub+0x5ae>
    c0a6:	2620      	movs	r6, #32
    c0a8:	0027      	movs	r7, r4
    c0aa:	4650      	mov	r0, sl
    c0ac:	1b76      	subs	r6, r6, r5
    c0ae:	40b7      	lsls	r7, r6
    c0b0:	40e8      	lsrs	r0, r5
    c0b2:	4307      	orrs	r7, r0
    c0b4:	4650      	mov	r0, sl
    c0b6:	40b0      	lsls	r0, r6
    c0b8:	1e46      	subs	r6, r0, #1
    c0ba:	41b0      	sbcs	r0, r6
    c0bc:	40ec      	lsrs	r4, r5
    c0be:	4338      	orrs	r0, r7
    c0c0:	1a17      	subs	r7, r2, r0
    c0c2:	42ba      	cmp	r2, r7
    c0c4:	4192      	sbcs	r2, r2
    c0c6:	1b0c      	subs	r4, r1, r4
    c0c8:	4252      	negs	r2, r2
    c0ca:	1aa4      	subs	r4, r4, r2
    c0cc:	4666      	mov	r6, ip
    c0ce:	4698      	mov	r8, r3
    c0d0:	e68b      	b.n	bdea <__aeabi_dsub+0xb2>
    c0d2:	4664      	mov	r4, ip
    c0d4:	4667      	mov	r7, ip
    c0d6:	432c      	orrs	r4, r5
    c0d8:	d000      	beq.n	c0dc <__aeabi_dsub+0x3a4>
    c0da:	e68b      	b.n	bdf4 <__aeabi_dsub+0xbc>
    c0dc:	2500      	movs	r5, #0
    c0de:	2600      	movs	r6, #0
    c0e0:	2700      	movs	r7, #0
    c0e2:	e6ea      	b.n	beba <__aeabi_dsub+0x182>
    c0e4:	001e      	movs	r6, r3
    c0e6:	e6ad      	b.n	be44 <__aeabi_dsub+0x10c>
    c0e8:	2b1f      	cmp	r3, #31
    c0ea:	dc60      	bgt.n	c1ae <__aeabi_dsub+0x476>
    c0ec:	2720      	movs	r7, #32
    c0ee:	1af8      	subs	r0, r7, r3
    c0f0:	000f      	movs	r7, r1
    c0f2:	4684      	mov	ip, r0
    c0f4:	4087      	lsls	r7, r0
    c0f6:	0010      	movs	r0, r2
    c0f8:	40d8      	lsrs	r0, r3
    c0fa:	4307      	orrs	r7, r0
    c0fc:	4660      	mov	r0, ip
    c0fe:	4082      	lsls	r2, r0
    c100:	1e50      	subs	r0, r2, #1
    c102:	4182      	sbcs	r2, r0
    c104:	40d9      	lsrs	r1, r3
    c106:	4317      	orrs	r7, r2
    c108:	e6f5      	b.n	bef6 <__aeabi_dsub+0x1be>
    c10a:	0026      	movs	r6, r4
    c10c:	4650      	mov	r0, sl
    c10e:	4306      	orrs	r6, r0
    c110:	d005      	beq.n	c11e <__aeabi_dsub+0x3e6>
    c112:	43ed      	mvns	r5, r5
    c114:	2d00      	cmp	r5, #0
    c116:	d0d3      	beq.n	c0c0 <__aeabi_dsub+0x388>
    c118:	4e90      	ldr	r6, [pc, #576]	; (c35c <__aeabi_dsub+0x624>)
    c11a:	45b4      	cmp	ip, r6
    c11c:	d1bd      	bne.n	c09a <__aeabi_dsub+0x362>
    c11e:	000c      	movs	r4, r1
    c120:	0017      	movs	r7, r2
    c122:	4666      	mov	r6, ip
    c124:	4698      	mov	r8, r3
    c126:	e68d      	b.n	be44 <__aeabi_dsub+0x10c>
    c128:	488c      	ldr	r0, [pc, #560]	; (c35c <__aeabi_dsub+0x624>)
    c12a:	4283      	cmp	r3, r0
    c12c:	d00b      	beq.n	c146 <__aeabi_dsub+0x40e>
    c12e:	4663      	mov	r3, ip
    c130:	e6d9      	b.n	bee6 <__aeabi_dsub+0x1ae>
    c132:	2d00      	cmp	r5, #0
    c134:	d000      	beq.n	c138 <__aeabi_dsub+0x400>
    c136:	e096      	b.n	c266 <__aeabi_dsub+0x52e>
    c138:	0008      	movs	r0, r1
    c13a:	4310      	orrs	r0, r2
    c13c:	d100      	bne.n	c140 <__aeabi_dsub+0x408>
    c13e:	e0e2      	b.n	c306 <__aeabi_dsub+0x5ce>
    c140:	000c      	movs	r4, r1
    c142:	0017      	movs	r7, r2
    c144:	4698      	mov	r8, r3
    c146:	4e85      	ldr	r6, [pc, #532]	; (c35c <__aeabi_dsub+0x624>)
    c148:	e67c      	b.n	be44 <__aeabi_dsub+0x10c>
    c14a:	2500      	movs	r5, #0
    c14c:	e780      	b.n	c050 <__aeabi_dsub+0x318>
    c14e:	2100      	movs	r1, #0
    c150:	e78e      	b.n	c070 <__aeabi_dsub+0x338>
    c152:	0023      	movs	r3, r4
    c154:	4650      	mov	r0, sl
    c156:	4303      	orrs	r3, r0
    c158:	2e00      	cmp	r6, #0
    c15a:	d000      	beq.n	c15e <__aeabi_dsub+0x426>
    c15c:	e0a8      	b.n	c2b0 <__aeabi_dsub+0x578>
    c15e:	2b00      	cmp	r3, #0
    c160:	d100      	bne.n	c164 <__aeabi_dsub+0x42c>
    c162:	e0de      	b.n	c322 <__aeabi_dsub+0x5ea>
    c164:	000b      	movs	r3, r1
    c166:	4313      	orrs	r3, r2
    c168:	d100      	bne.n	c16c <__aeabi_dsub+0x434>
    c16a:	e66b      	b.n	be44 <__aeabi_dsub+0x10c>
    c16c:	4452      	add	r2, sl
    c16e:	4552      	cmp	r2, sl
    c170:	4180      	sbcs	r0, r0
    c172:	1864      	adds	r4, r4, r1
    c174:	4240      	negs	r0, r0
    c176:	1824      	adds	r4, r4, r0
    c178:	0017      	movs	r7, r2
    c17a:	0223      	lsls	r3, r4, #8
    c17c:	d400      	bmi.n	c180 <__aeabi_dsub+0x448>
    c17e:	e6fd      	b.n	bf7c <__aeabi_dsub+0x244>
    c180:	4b77      	ldr	r3, [pc, #476]	; (c360 <__aeabi_dsub+0x628>)
    c182:	4666      	mov	r6, ip
    c184:	401c      	ands	r4, r3
    c186:	e65d      	b.n	be44 <__aeabi_dsub+0x10c>
    c188:	0025      	movs	r5, r4
    c18a:	4650      	mov	r0, sl
    c18c:	4305      	orrs	r5, r0
    c18e:	2e00      	cmp	r6, #0
    c190:	d1cf      	bne.n	c132 <__aeabi_dsub+0x3fa>
    c192:	2d00      	cmp	r5, #0
    c194:	d14f      	bne.n	c236 <__aeabi_dsub+0x4fe>
    c196:	000c      	movs	r4, r1
    c198:	4314      	orrs	r4, r2
    c19a:	d100      	bne.n	c19e <__aeabi_dsub+0x466>
    c19c:	e0a0      	b.n	c2e0 <__aeabi_dsub+0x5a8>
    c19e:	000c      	movs	r4, r1
    c1a0:	0017      	movs	r7, r2
    c1a2:	4698      	mov	r8, r3
    c1a4:	e64e      	b.n	be44 <__aeabi_dsub+0x10c>
    c1a6:	4666      	mov	r6, ip
    c1a8:	2400      	movs	r4, #0
    c1aa:	2700      	movs	r7, #0
    c1ac:	e685      	b.n	beba <__aeabi_dsub+0x182>
    c1ae:	001f      	movs	r7, r3
    c1b0:	0008      	movs	r0, r1
    c1b2:	3f20      	subs	r7, #32
    c1b4:	40f8      	lsrs	r0, r7
    c1b6:	0007      	movs	r7, r0
    c1b8:	2b20      	cmp	r3, #32
    c1ba:	d100      	bne.n	c1be <__aeabi_dsub+0x486>
    c1bc:	e08e      	b.n	c2dc <__aeabi_dsub+0x5a4>
    c1be:	2040      	movs	r0, #64	; 0x40
    c1c0:	1ac3      	subs	r3, r0, r3
    c1c2:	4099      	lsls	r1, r3
    c1c4:	430a      	orrs	r2, r1
    c1c6:	1e51      	subs	r1, r2, #1
    c1c8:	418a      	sbcs	r2, r1
    c1ca:	2100      	movs	r1, #0
    c1cc:	4317      	orrs	r7, r2
    c1ce:	e692      	b.n	bef6 <__aeabi_dsub+0x1be>
    c1d0:	2e00      	cmp	r6, #0
    c1d2:	d114      	bne.n	c1fe <__aeabi_dsub+0x4c6>
    c1d4:	0026      	movs	r6, r4
    c1d6:	4650      	mov	r0, sl
    c1d8:	4306      	orrs	r6, r0
    c1da:	d062      	beq.n	c2a2 <__aeabi_dsub+0x56a>
    c1dc:	43db      	mvns	r3, r3
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d15c      	bne.n	c29c <__aeabi_dsub+0x564>
    c1e2:	1887      	adds	r7, r0, r2
    c1e4:	4297      	cmp	r7, r2
    c1e6:	4192      	sbcs	r2, r2
    c1e8:	1864      	adds	r4, r4, r1
    c1ea:	4252      	negs	r2, r2
    c1ec:	18a4      	adds	r4, r4, r2
    c1ee:	4666      	mov	r6, ip
    c1f0:	e687      	b.n	bf02 <__aeabi_dsub+0x1ca>
    c1f2:	4650      	mov	r0, sl
    c1f4:	4320      	orrs	r0, r4
    c1f6:	1e44      	subs	r4, r0, #1
    c1f8:	41a0      	sbcs	r0, r4
    c1fa:	2400      	movs	r4, #0
    c1fc:	e760      	b.n	c0c0 <__aeabi_dsub+0x388>
    c1fe:	4e57      	ldr	r6, [pc, #348]	; (c35c <__aeabi_dsub+0x624>)
    c200:	45b4      	cmp	ip, r6
    c202:	d04e      	beq.n	c2a2 <__aeabi_dsub+0x56a>
    c204:	2680      	movs	r6, #128	; 0x80
    c206:	0436      	lsls	r6, r6, #16
    c208:	425b      	negs	r3, r3
    c20a:	4334      	orrs	r4, r6
    c20c:	2b38      	cmp	r3, #56	; 0x38
    c20e:	dd00      	ble.n	c212 <__aeabi_dsub+0x4da>
    c210:	e07f      	b.n	c312 <__aeabi_dsub+0x5da>
    c212:	2b1f      	cmp	r3, #31
    c214:	dd00      	ble.n	c218 <__aeabi_dsub+0x4e0>
    c216:	e08b      	b.n	c330 <__aeabi_dsub+0x5f8>
    c218:	2620      	movs	r6, #32
    c21a:	0027      	movs	r7, r4
    c21c:	4650      	mov	r0, sl
    c21e:	1af6      	subs	r6, r6, r3
    c220:	40b7      	lsls	r7, r6
    c222:	40d8      	lsrs	r0, r3
    c224:	4307      	orrs	r7, r0
    c226:	4650      	mov	r0, sl
    c228:	40b0      	lsls	r0, r6
    c22a:	1e46      	subs	r6, r0, #1
    c22c:	41b0      	sbcs	r0, r6
    c22e:	4307      	orrs	r7, r0
    c230:	40dc      	lsrs	r4, r3
    c232:	18bf      	adds	r7, r7, r2
    c234:	e7d6      	b.n	c1e4 <__aeabi_dsub+0x4ac>
    c236:	000d      	movs	r5, r1
    c238:	4315      	orrs	r5, r2
    c23a:	d100      	bne.n	c23e <__aeabi_dsub+0x506>
    c23c:	e602      	b.n	be44 <__aeabi_dsub+0x10c>
    c23e:	4650      	mov	r0, sl
    c240:	1a80      	subs	r0, r0, r2
    c242:	4582      	cmp	sl, r0
    c244:	41bf      	sbcs	r7, r7
    c246:	1a65      	subs	r5, r4, r1
    c248:	427f      	negs	r7, r7
    c24a:	1bed      	subs	r5, r5, r7
    c24c:	4684      	mov	ip, r0
    c24e:	0228      	lsls	r0, r5, #8
    c250:	d400      	bmi.n	c254 <__aeabi_dsub+0x51c>
    c252:	e68d      	b.n	bf70 <__aeabi_dsub+0x238>
    c254:	4650      	mov	r0, sl
    c256:	1a17      	subs	r7, r2, r0
    c258:	42ba      	cmp	r2, r7
    c25a:	4192      	sbcs	r2, r2
    c25c:	1b0c      	subs	r4, r1, r4
    c25e:	4252      	negs	r2, r2
    c260:	1aa4      	subs	r4, r4, r2
    c262:	4698      	mov	r8, r3
    c264:	e5ee      	b.n	be44 <__aeabi_dsub+0x10c>
    c266:	000d      	movs	r5, r1
    c268:	4315      	orrs	r5, r2
    c26a:	d100      	bne.n	c26e <__aeabi_dsub+0x536>
    c26c:	e76b      	b.n	c146 <__aeabi_dsub+0x40e>
    c26e:	4650      	mov	r0, sl
    c270:	0767      	lsls	r7, r4, #29
    c272:	08c0      	lsrs	r0, r0, #3
    c274:	4307      	orrs	r7, r0
    c276:	2080      	movs	r0, #128	; 0x80
    c278:	08e4      	lsrs	r4, r4, #3
    c27a:	0300      	lsls	r0, r0, #12
    c27c:	4204      	tst	r4, r0
    c27e:	d007      	beq.n	c290 <__aeabi_dsub+0x558>
    c280:	08cd      	lsrs	r5, r1, #3
    c282:	4205      	tst	r5, r0
    c284:	d104      	bne.n	c290 <__aeabi_dsub+0x558>
    c286:	002c      	movs	r4, r5
    c288:	4698      	mov	r8, r3
    c28a:	08d7      	lsrs	r7, r2, #3
    c28c:	0749      	lsls	r1, r1, #29
    c28e:	430f      	orrs	r7, r1
    c290:	0f7b      	lsrs	r3, r7, #29
    c292:	00e4      	lsls	r4, r4, #3
    c294:	431c      	orrs	r4, r3
    c296:	00ff      	lsls	r7, r7, #3
    c298:	4e30      	ldr	r6, [pc, #192]	; (c35c <__aeabi_dsub+0x624>)
    c29a:	e5d3      	b.n	be44 <__aeabi_dsub+0x10c>
    c29c:	4e2f      	ldr	r6, [pc, #188]	; (c35c <__aeabi_dsub+0x624>)
    c29e:	45b4      	cmp	ip, r6
    c2a0:	d1b4      	bne.n	c20c <__aeabi_dsub+0x4d4>
    c2a2:	000c      	movs	r4, r1
    c2a4:	0017      	movs	r7, r2
    c2a6:	4666      	mov	r6, ip
    c2a8:	e5cc      	b.n	be44 <__aeabi_dsub+0x10c>
    c2aa:	2700      	movs	r7, #0
    c2ac:	2400      	movs	r4, #0
    c2ae:	e5e8      	b.n	be82 <__aeabi_dsub+0x14a>
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d039      	beq.n	c328 <__aeabi_dsub+0x5f0>
    c2b4:	000b      	movs	r3, r1
    c2b6:	4313      	orrs	r3, r2
    c2b8:	d100      	bne.n	c2bc <__aeabi_dsub+0x584>
    c2ba:	e744      	b.n	c146 <__aeabi_dsub+0x40e>
    c2bc:	08c0      	lsrs	r0, r0, #3
    c2be:	0767      	lsls	r7, r4, #29
    c2c0:	4307      	orrs	r7, r0
    c2c2:	2080      	movs	r0, #128	; 0x80
    c2c4:	08e4      	lsrs	r4, r4, #3
    c2c6:	0300      	lsls	r0, r0, #12
    c2c8:	4204      	tst	r4, r0
    c2ca:	d0e1      	beq.n	c290 <__aeabi_dsub+0x558>
    c2cc:	08cb      	lsrs	r3, r1, #3
    c2ce:	4203      	tst	r3, r0
    c2d0:	d1de      	bne.n	c290 <__aeabi_dsub+0x558>
    c2d2:	08d7      	lsrs	r7, r2, #3
    c2d4:	0749      	lsls	r1, r1, #29
    c2d6:	430f      	orrs	r7, r1
    c2d8:	001c      	movs	r4, r3
    c2da:	e7d9      	b.n	c290 <__aeabi_dsub+0x558>
    c2dc:	2100      	movs	r1, #0
    c2de:	e771      	b.n	c1c4 <__aeabi_dsub+0x48c>
    c2e0:	2500      	movs	r5, #0
    c2e2:	2700      	movs	r7, #0
    c2e4:	e5e9      	b.n	beba <__aeabi_dsub+0x182>
    c2e6:	002e      	movs	r6, r5
    c2e8:	0027      	movs	r7, r4
    c2ea:	3e20      	subs	r6, #32
    c2ec:	40f7      	lsrs	r7, r6
    c2ee:	2d20      	cmp	r5, #32
    c2f0:	d02f      	beq.n	c352 <__aeabi_dsub+0x61a>
    c2f2:	2640      	movs	r6, #64	; 0x40
    c2f4:	1b75      	subs	r5, r6, r5
    c2f6:	40ac      	lsls	r4, r5
    c2f8:	4650      	mov	r0, sl
    c2fa:	4320      	orrs	r0, r4
    c2fc:	1e44      	subs	r4, r0, #1
    c2fe:	41a0      	sbcs	r0, r4
    c300:	2400      	movs	r4, #0
    c302:	4338      	orrs	r0, r7
    c304:	e6dc      	b.n	c0c0 <__aeabi_dsub+0x388>
    c306:	2480      	movs	r4, #128	; 0x80
    c308:	2500      	movs	r5, #0
    c30a:	0324      	lsls	r4, r4, #12
    c30c:	4e13      	ldr	r6, [pc, #76]	; (c35c <__aeabi_dsub+0x624>)
    c30e:	2700      	movs	r7, #0
    c310:	e5d3      	b.n	beba <__aeabi_dsub+0x182>
    c312:	4650      	mov	r0, sl
    c314:	4320      	orrs	r0, r4
    c316:	0007      	movs	r7, r0
    c318:	1e78      	subs	r0, r7, #1
    c31a:	4187      	sbcs	r7, r0
    c31c:	2400      	movs	r4, #0
    c31e:	18bf      	adds	r7, r7, r2
    c320:	e760      	b.n	c1e4 <__aeabi_dsub+0x4ac>
    c322:	000c      	movs	r4, r1
    c324:	0017      	movs	r7, r2
    c326:	e58d      	b.n	be44 <__aeabi_dsub+0x10c>
    c328:	000c      	movs	r4, r1
    c32a:	0017      	movs	r7, r2
    c32c:	4e0b      	ldr	r6, [pc, #44]	; (c35c <__aeabi_dsub+0x624>)
    c32e:	e589      	b.n	be44 <__aeabi_dsub+0x10c>
    c330:	001e      	movs	r6, r3
    c332:	0027      	movs	r7, r4
    c334:	3e20      	subs	r6, #32
    c336:	40f7      	lsrs	r7, r6
    c338:	2b20      	cmp	r3, #32
    c33a:	d00c      	beq.n	c356 <__aeabi_dsub+0x61e>
    c33c:	2640      	movs	r6, #64	; 0x40
    c33e:	1af3      	subs	r3, r6, r3
    c340:	409c      	lsls	r4, r3
    c342:	4650      	mov	r0, sl
    c344:	4320      	orrs	r0, r4
    c346:	1e44      	subs	r4, r0, #1
    c348:	41a0      	sbcs	r0, r4
    c34a:	4307      	orrs	r7, r0
    c34c:	2400      	movs	r4, #0
    c34e:	18bf      	adds	r7, r7, r2
    c350:	e748      	b.n	c1e4 <__aeabi_dsub+0x4ac>
    c352:	2400      	movs	r4, #0
    c354:	e7d0      	b.n	c2f8 <__aeabi_dsub+0x5c0>
    c356:	2400      	movs	r4, #0
    c358:	e7f3      	b.n	c342 <__aeabi_dsub+0x60a>
    c35a:	46c0      	nop			; (mov r8, r8)
    c35c:	000007ff 	.word	0x000007ff
    c360:	ff7fffff 	.word	0xff7fffff

0000c364 <__aeabi_d2iz>:
    c364:	b530      	push	{r4, r5, lr}
    c366:	4d13      	ldr	r5, [pc, #76]	; (c3b4 <__aeabi_d2iz+0x50>)
    c368:	030a      	lsls	r2, r1, #12
    c36a:	004b      	lsls	r3, r1, #1
    c36c:	0b12      	lsrs	r2, r2, #12
    c36e:	0d5b      	lsrs	r3, r3, #21
    c370:	0fc9      	lsrs	r1, r1, #31
    c372:	2400      	movs	r4, #0
    c374:	42ab      	cmp	r3, r5
    c376:	dd10      	ble.n	c39a <__aeabi_d2iz+0x36>
    c378:	4c0f      	ldr	r4, [pc, #60]	; (c3b8 <__aeabi_d2iz+0x54>)
    c37a:	42a3      	cmp	r3, r4
    c37c:	dc0f      	bgt.n	c39e <__aeabi_d2iz+0x3a>
    c37e:	2480      	movs	r4, #128	; 0x80
    c380:	4d0e      	ldr	r5, [pc, #56]	; (c3bc <__aeabi_d2iz+0x58>)
    c382:	0364      	lsls	r4, r4, #13
    c384:	4322      	orrs	r2, r4
    c386:	1aed      	subs	r5, r5, r3
    c388:	2d1f      	cmp	r5, #31
    c38a:	dd0b      	ble.n	c3a4 <__aeabi_d2iz+0x40>
    c38c:	480c      	ldr	r0, [pc, #48]	; (c3c0 <__aeabi_d2iz+0x5c>)
    c38e:	1ac3      	subs	r3, r0, r3
    c390:	40da      	lsrs	r2, r3
    c392:	4254      	negs	r4, r2
    c394:	2900      	cmp	r1, #0
    c396:	d100      	bne.n	c39a <__aeabi_d2iz+0x36>
    c398:	0014      	movs	r4, r2
    c39a:	0020      	movs	r0, r4
    c39c:	bd30      	pop	{r4, r5, pc}
    c39e:	4b09      	ldr	r3, [pc, #36]	; (c3c4 <__aeabi_d2iz+0x60>)
    c3a0:	18cc      	adds	r4, r1, r3
    c3a2:	e7fa      	b.n	c39a <__aeabi_d2iz+0x36>
    c3a4:	4c08      	ldr	r4, [pc, #32]	; (c3c8 <__aeabi_d2iz+0x64>)
    c3a6:	40e8      	lsrs	r0, r5
    c3a8:	46a4      	mov	ip, r4
    c3aa:	4463      	add	r3, ip
    c3ac:	409a      	lsls	r2, r3
    c3ae:	4302      	orrs	r2, r0
    c3b0:	e7ef      	b.n	c392 <__aeabi_d2iz+0x2e>
    c3b2:	46c0      	nop			; (mov r8, r8)
    c3b4:	000003fe 	.word	0x000003fe
    c3b8:	0000041d 	.word	0x0000041d
    c3bc:	00000433 	.word	0x00000433
    c3c0:	00000413 	.word	0x00000413
    c3c4:	7fffffff 	.word	0x7fffffff
    c3c8:	fffffbed 	.word	0xfffffbed

0000c3cc <__aeabi_ui2d>:
    c3cc:	b510      	push	{r4, lr}
    c3ce:	1e04      	subs	r4, r0, #0
    c3d0:	d028      	beq.n	c424 <__aeabi_ui2d+0x58>
    c3d2:	f000 f8c3 	bl	c55c <__clzsi2>
    c3d6:	4b15      	ldr	r3, [pc, #84]	; (c42c <__aeabi_ui2d+0x60>)
    c3d8:	4a15      	ldr	r2, [pc, #84]	; (c430 <__aeabi_ui2d+0x64>)
    c3da:	1a1b      	subs	r3, r3, r0
    c3dc:	1ad2      	subs	r2, r2, r3
    c3de:	2a1f      	cmp	r2, #31
    c3e0:	dd15      	ble.n	c40e <__aeabi_ui2d+0x42>
    c3e2:	4a14      	ldr	r2, [pc, #80]	; (c434 <__aeabi_ui2d+0x68>)
    c3e4:	1ad2      	subs	r2, r2, r3
    c3e6:	4094      	lsls	r4, r2
    c3e8:	2200      	movs	r2, #0
    c3ea:	0324      	lsls	r4, r4, #12
    c3ec:	055b      	lsls	r3, r3, #21
    c3ee:	0b24      	lsrs	r4, r4, #12
    c3f0:	0d5b      	lsrs	r3, r3, #21
    c3f2:	2100      	movs	r1, #0
    c3f4:	0010      	movs	r0, r2
    c3f6:	0324      	lsls	r4, r4, #12
    c3f8:	0d0a      	lsrs	r2, r1, #20
    c3fa:	0b24      	lsrs	r4, r4, #12
    c3fc:	0512      	lsls	r2, r2, #20
    c3fe:	4322      	orrs	r2, r4
    c400:	4c0d      	ldr	r4, [pc, #52]	; (c438 <__aeabi_ui2d+0x6c>)
    c402:	051b      	lsls	r3, r3, #20
    c404:	4022      	ands	r2, r4
    c406:	4313      	orrs	r3, r2
    c408:	005b      	lsls	r3, r3, #1
    c40a:	0859      	lsrs	r1, r3, #1
    c40c:	bd10      	pop	{r4, pc}
    c40e:	0021      	movs	r1, r4
    c410:	4091      	lsls	r1, r2
    c412:	000a      	movs	r2, r1
    c414:	210b      	movs	r1, #11
    c416:	1a08      	subs	r0, r1, r0
    c418:	40c4      	lsrs	r4, r0
    c41a:	055b      	lsls	r3, r3, #21
    c41c:	0324      	lsls	r4, r4, #12
    c41e:	0b24      	lsrs	r4, r4, #12
    c420:	0d5b      	lsrs	r3, r3, #21
    c422:	e7e6      	b.n	c3f2 <__aeabi_ui2d+0x26>
    c424:	2300      	movs	r3, #0
    c426:	2400      	movs	r4, #0
    c428:	2200      	movs	r2, #0
    c42a:	e7e2      	b.n	c3f2 <__aeabi_ui2d+0x26>
    c42c:	0000041e 	.word	0x0000041e
    c430:	00000433 	.word	0x00000433
    c434:	00000413 	.word	0x00000413
    c438:	800fffff 	.word	0x800fffff

0000c43c <__aeabi_f2d>:
    c43c:	0041      	lsls	r1, r0, #1
    c43e:	0e09      	lsrs	r1, r1, #24
    c440:	1c4b      	adds	r3, r1, #1
    c442:	b570      	push	{r4, r5, r6, lr}
    c444:	b2db      	uxtb	r3, r3
    c446:	0246      	lsls	r6, r0, #9
    c448:	0a75      	lsrs	r5, r6, #9
    c44a:	0fc4      	lsrs	r4, r0, #31
    c44c:	2b01      	cmp	r3, #1
    c44e:	dd14      	ble.n	c47a <__aeabi_f2d+0x3e>
    c450:	23e0      	movs	r3, #224	; 0xe0
    c452:	009b      	lsls	r3, r3, #2
    c454:	076d      	lsls	r5, r5, #29
    c456:	0b36      	lsrs	r6, r6, #12
    c458:	18cb      	adds	r3, r1, r3
    c45a:	2100      	movs	r1, #0
    c45c:	0d0a      	lsrs	r2, r1, #20
    c45e:	0028      	movs	r0, r5
    c460:	0512      	lsls	r2, r2, #20
    c462:	4d1c      	ldr	r5, [pc, #112]	; (c4d4 <__aeabi_f2d+0x98>)
    c464:	4332      	orrs	r2, r6
    c466:	055b      	lsls	r3, r3, #21
    c468:	402a      	ands	r2, r5
    c46a:	085b      	lsrs	r3, r3, #1
    c46c:	4313      	orrs	r3, r2
    c46e:	005b      	lsls	r3, r3, #1
    c470:	07e4      	lsls	r4, r4, #31
    c472:	085b      	lsrs	r3, r3, #1
    c474:	4323      	orrs	r3, r4
    c476:	0019      	movs	r1, r3
    c478:	bd70      	pop	{r4, r5, r6, pc}
    c47a:	2900      	cmp	r1, #0
    c47c:	d114      	bne.n	c4a8 <__aeabi_f2d+0x6c>
    c47e:	2d00      	cmp	r5, #0
    c480:	d01e      	beq.n	c4c0 <__aeabi_f2d+0x84>
    c482:	0028      	movs	r0, r5
    c484:	f000 f86a 	bl	c55c <__clzsi2>
    c488:	280a      	cmp	r0, #10
    c48a:	dc1c      	bgt.n	c4c6 <__aeabi_f2d+0x8a>
    c48c:	230b      	movs	r3, #11
    c48e:	002a      	movs	r2, r5
    c490:	1a1b      	subs	r3, r3, r0
    c492:	40da      	lsrs	r2, r3
    c494:	0003      	movs	r3, r0
    c496:	3315      	adds	r3, #21
    c498:	409d      	lsls	r5, r3
    c49a:	4b0f      	ldr	r3, [pc, #60]	; (c4d8 <__aeabi_f2d+0x9c>)
    c49c:	0312      	lsls	r2, r2, #12
    c49e:	1a1b      	subs	r3, r3, r0
    c4a0:	055b      	lsls	r3, r3, #21
    c4a2:	0b16      	lsrs	r6, r2, #12
    c4a4:	0d5b      	lsrs	r3, r3, #21
    c4a6:	e7d8      	b.n	c45a <__aeabi_f2d+0x1e>
    c4a8:	2d00      	cmp	r5, #0
    c4aa:	d006      	beq.n	c4ba <__aeabi_f2d+0x7e>
    c4ac:	0b32      	lsrs	r2, r6, #12
    c4ae:	2680      	movs	r6, #128	; 0x80
    c4b0:	0336      	lsls	r6, r6, #12
    c4b2:	076d      	lsls	r5, r5, #29
    c4b4:	4316      	orrs	r6, r2
    c4b6:	4b09      	ldr	r3, [pc, #36]	; (c4dc <__aeabi_f2d+0xa0>)
    c4b8:	e7cf      	b.n	c45a <__aeabi_f2d+0x1e>
    c4ba:	4b08      	ldr	r3, [pc, #32]	; (c4dc <__aeabi_f2d+0xa0>)
    c4bc:	2600      	movs	r6, #0
    c4be:	e7cc      	b.n	c45a <__aeabi_f2d+0x1e>
    c4c0:	2300      	movs	r3, #0
    c4c2:	2600      	movs	r6, #0
    c4c4:	e7c9      	b.n	c45a <__aeabi_f2d+0x1e>
    c4c6:	0003      	movs	r3, r0
    c4c8:	002a      	movs	r2, r5
    c4ca:	3b0b      	subs	r3, #11
    c4cc:	409a      	lsls	r2, r3
    c4ce:	2500      	movs	r5, #0
    c4d0:	e7e3      	b.n	c49a <__aeabi_f2d+0x5e>
    c4d2:	46c0      	nop			; (mov r8, r8)
    c4d4:	800fffff 	.word	0x800fffff
    c4d8:	00000389 	.word	0x00000389
    c4dc:	000007ff 	.word	0x000007ff

0000c4e0 <__aeabi_cdrcmple>:
    c4e0:	4684      	mov	ip, r0
    c4e2:	1c10      	adds	r0, r2, #0
    c4e4:	4662      	mov	r2, ip
    c4e6:	468c      	mov	ip, r1
    c4e8:	1c19      	adds	r1, r3, #0
    c4ea:	4663      	mov	r3, ip
    c4ec:	e000      	b.n	c4f0 <__aeabi_cdcmpeq>
    c4ee:	46c0      	nop			; (mov r8, r8)

0000c4f0 <__aeabi_cdcmpeq>:
    c4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c4f2:	f000 f8ef 	bl	c6d4 <__ledf2>
    c4f6:	2800      	cmp	r0, #0
    c4f8:	d401      	bmi.n	c4fe <__aeabi_cdcmpeq+0xe>
    c4fa:	2100      	movs	r1, #0
    c4fc:	42c8      	cmn	r0, r1
    c4fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c500 <__aeabi_dcmpeq>:
    c500:	b510      	push	{r4, lr}
    c502:	f000 f849 	bl	c598 <__eqdf2>
    c506:	4240      	negs	r0, r0
    c508:	3001      	adds	r0, #1
    c50a:	bd10      	pop	{r4, pc}

0000c50c <__aeabi_dcmplt>:
    c50c:	b510      	push	{r4, lr}
    c50e:	f000 f8e1 	bl	c6d4 <__ledf2>
    c512:	2800      	cmp	r0, #0
    c514:	db01      	blt.n	c51a <__aeabi_dcmplt+0xe>
    c516:	2000      	movs	r0, #0
    c518:	bd10      	pop	{r4, pc}
    c51a:	2001      	movs	r0, #1
    c51c:	bd10      	pop	{r4, pc}
    c51e:	46c0      	nop			; (mov r8, r8)

0000c520 <__aeabi_dcmple>:
    c520:	b510      	push	{r4, lr}
    c522:	f000 f8d7 	bl	c6d4 <__ledf2>
    c526:	2800      	cmp	r0, #0
    c528:	dd01      	ble.n	c52e <__aeabi_dcmple+0xe>
    c52a:	2000      	movs	r0, #0
    c52c:	bd10      	pop	{r4, pc}
    c52e:	2001      	movs	r0, #1
    c530:	bd10      	pop	{r4, pc}
    c532:	46c0      	nop			; (mov r8, r8)

0000c534 <__aeabi_dcmpgt>:
    c534:	b510      	push	{r4, lr}
    c536:	f000 f869 	bl	c60c <__gedf2>
    c53a:	2800      	cmp	r0, #0
    c53c:	dc01      	bgt.n	c542 <__aeabi_dcmpgt+0xe>
    c53e:	2000      	movs	r0, #0
    c540:	bd10      	pop	{r4, pc}
    c542:	2001      	movs	r0, #1
    c544:	bd10      	pop	{r4, pc}
    c546:	46c0      	nop			; (mov r8, r8)

0000c548 <__aeabi_dcmpge>:
    c548:	b510      	push	{r4, lr}
    c54a:	f000 f85f 	bl	c60c <__gedf2>
    c54e:	2800      	cmp	r0, #0
    c550:	da01      	bge.n	c556 <__aeabi_dcmpge+0xe>
    c552:	2000      	movs	r0, #0
    c554:	bd10      	pop	{r4, pc}
    c556:	2001      	movs	r0, #1
    c558:	bd10      	pop	{r4, pc}
    c55a:	46c0      	nop			; (mov r8, r8)

0000c55c <__clzsi2>:
    c55c:	211c      	movs	r1, #28
    c55e:	2301      	movs	r3, #1
    c560:	041b      	lsls	r3, r3, #16
    c562:	4298      	cmp	r0, r3
    c564:	d301      	bcc.n	c56a <__clzsi2+0xe>
    c566:	0c00      	lsrs	r0, r0, #16
    c568:	3910      	subs	r1, #16
    c56a:	0a1b      	lsrs	r3, r3, #8
    c56c:	4298      	cmp	r0, r3
    c56e:	d301      	bcc.n	c574 <__clzsi2+0x18>
    c570:	0a00      	lsrs	r0, r0, #8
    c572:	3908      	subs	r1, #8
    c574:	091b      	lsrs	r3, r3, #4
    c576:	4298      	cmp	r0, r3
    c578:	d301      	bcc.n	c57e <__clzsi2+0x22>
    c57a:	0900      	lsrs	r0, r0, #4
    c57c:	3904      	subs	r1, #4
    c57e:	a202      	add	r2, pc, #8	; (adr r2, c588 <__clzsi2+0x2c>)
    c580:	5c10      	ldrb	r0, [r2, r0]
    c582:	1840      	adds	r0, r0, r1
    c584:	4770      	bx	lr
    c586:	46c0      	nop			; (mov r8, r8)
    c588:	02020304 	.word	0x02020304
    c58c:	01010101 	.word	0x01010101
	...

0000c598 <__eqdf2>:
    c598:	b5f0      	push	{r4, r5, r6, r7, lr}
    c59a:	464f      	mov	r7, r9
    c59c:	4646      	mov	r6, r8
    c59e:	46d6      	mov	lr, sl
    c5a0:	005c      	lsls	r4, r3, #1
    c5a2:	b5c0      	push	{r6, r7, lr}
    c5a4:	031f      	lsls	r7, r3, #12
    c5a6:	0fdb      	lsrs	r3, r3, #31
    c5a8:	469a      	mov	sl, r3
    c5aa:	4b17      	ldr	r3, [pc, #92]	; (c608 <__eqdf2+0x70>)
    c5ac:	030e      	lsls	r6, r1, #12
    c5ae:	004d      	lsls	r5, r1, #1
    c5b0:	4684      	mov	ip, r0
    c5b2:	4680      	mov	r8, r0
    c5b4:	0b36      	lsrs	r6, r6, #12
    c5b6:	0d6d      	lsrs	r5, r5, #21
    c5b8:	0fc9      	lsrs	r1, r1, #31
    c5ba:	4691      	mov	r9, r2
    c5bc:	0b3f      	lsrs	r7, r7, #12
    c5be:	0d64      	lsrs	r4, r4, #21
    c5c0:	2001      	movs	r0, #1
    c5c2:	429d      	cmp	r5, r3
    c5c4:	d008      	beq.n	c5d8 <__eqdf2+0x40>
    c5c6:	429c      	cmp	r4, r3
    c5c8:	d001      	beq.n	c5ce <__eqdf2+0x36>
    c5ca:	42a5      	cmp	r5, r4
    c5cc:	d00b      	beq.n	c5e6 <__eqdf2+0x4e>
    c5ce:	bc1c      	pop	{r2, r3, r4}
    c5d0:	4690      	mov	r8, r2
    c5d2:	4699      	mov	r9, r3
    c5d4:	46a2      	mov	sl, r4
    c5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5d8:	4663      	mov	r3, ip
    c5da:	4333      	orrs	r3, r6
    c5dc:	d1f7      	bne.n	c5ce <__eqdf2+0x36>
    c5de:	42ac      	cmp	r4, r5
    c5e0:	d1f5      	bne.n	c5ce <__eqdf2+0x36>
    c5e2:	433a      	orrs	r2, r7
    c5e4:	d1f3      	bne.n	c5ce <__eqdf2+0x36>
    c5e6:	2001      	movs	r0, #1
    c5e8:	42be      	cmp	r6, r7
    c5ea:	d1f0      	bne.n	c5ce <__eqdf2+0x36>
    c5ec:	45c8      	cmp	r8, r9
    c5ee:	d1ee      	bne.n	c5ce <__eqdf2+0x36>
    c5f0:	4551      	cmp	r1, sl
    c5f2:	d007      	beq.n	c604 <__eqdf2+0x6c>
    c5f4:	2d00      	cmp	r5, #0
    c5f6:	d1ea      	bne.n	c5ce <__eqdf2+0x36>
    c5f8:	4663      	mov	r3, ip
    c5fa:	431e      	orrs	r6, r3
    c5fc:	0030      	movs	r0, r6
    c5fe:	1e46      	subs	r6, r0, #1
    c600:	41b0      	sbcs	r0, r6
    c602:	e7e4      	b.n	c5ce <__eqdf2+0x36>
    c604:	2000      	movs	r0, #0
    c606:	e7e2      	b.n	c5ce <__eqdf2+0x36>
    c608:	000007ff 	.word	0x000007ff

0000c60c <__gedf2>:
    c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c60e:	4645      	mov	r5, r8
    c610:	46de      	mov	lr, fp
    c612:	4657      	mov	r7, sl
    c614:	464e      	mov	r6, r9
    c616:	b5e0      	push	{r5, r6, r7, lr}
    c618:	031f      	lsls	r7, r3, #12
    c61a:	0b3d      	lsrs	r5, r7, #12
    c61c:	4f2c      	ldr	r7, [pc, #176]	; (c6d0 <__gedf2+0xc4>)
    c61e:	030e      	lsls	r6, r1, #12
    c620:	004c      	lsls	r4, r1, #1
    c622:	46ab      	mov	fp, r5
    c624:	005d      	lsls	r5, r3, #1
    c626:	4684      	mov	ip, r0
    c628:	0b36      	lsrs	r6, r6, #12
    c62a:	0d64      	lsrs	r4, r4, #21
    c62c:	0fc9      	lsrs	r1, r1, #31
    c62e:	4690      	mov	r8, r2
    c630:	0d6d      	lsrs	r5, r5, #21
    c632:	0fdb      	lsrs	r3, r3, #31
    c634:	42bc      	cmp	r4, r7
    c636:	d02a      	beq.n	c68e <__gedf2+0x82>
    c638:	4f25      	ldr	r7, [pc, #148]	; (c6d0 <__gedf2+0xc4>)
    c63a:	42bd      	cmp	r5, r7
    c63c:	d02d      	beq.n	c69a <__gedf2+0x8e>
    c63e:	2c00      	cmp	r4, #0
    c640:	d10f      	bne.n	c662 <__gedf2+0x56>
    c642:	4330      	orrs	r0, r6
    c644:	0007      	movs	r7, r0
    c646:	4681      	mov	r9, r0
    c648:	4278      	negs	r0, r7
    c64a:	4178      	adcs	r0, r7
    c64c:	b2c0      	uxtb	r0, r0
    c64e:	2d00      	cmp	r5, #0
    c650:	d117      	bne.n	c682 <__gedf2+0x76>
    c652:	465f      	mov	r7, fp
    c654:	433a      	orrs	r2, r7
    c656:	d114      	bne.n	c682 <__gedf2+0x76>
    c658:	464b      	mov	r3, r9
    c65a:	2000      	movs	r0, #0
    c65c:	2b00      	cmp	r3, #0
    c65e:	d00a      	beq.n	c676 <__gedf2+0x6a>
    c660:	e006      	b.n	c670 <__gedf2+0x64>
    c662:	2d00      	cmp	r5, #0
    c664:	d102      	bne.n	c66c <__gedf2+0x60>
    c666:	4658      	mov	r0, fp
    c668:	4302      	orrs	r2, r0
    c66a:	d001      	beq.n	c670 <__gedf2+0x64>
    c66c:	4299      	cmp	r1, r3
    c66e:	d018      	beq.n	c6a2 <__gedf2+0x96>
    c670:	4248      	negs	r0, r1
    c672:	2101      	movs	r1, #1
    c674:	4308      	orrs	r0, r1
    c676:	bc3c      	pop	{r2, r3, r4, r5}
    c678:	4690      	mov	r8, r2
    c67a:	4699      	mov	r9, r3
    c67c:	46a2      	mov	sl, r4
    c67e:	46ab      	mov	fp, r5
    c680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c682:	2800      	cmp	r0, #0
    c684:	d0f2      	beq.n	c66c <__gedf2+0x60>
    c686:	2001      	movs	r0, #1
    c688:	3b01      	subs	r3, #1
    c68a:	4318      	orrs	r0, r3
    c68c:	e7f3      	b.n	c676 <__gedf2+0x6a>
    c68e:	0037      	movs	r7, r6
    c690:	4307      	orrs	r7, r0
    c692:	d0d1      	beq.n	c638 <__gedf2+0x2c>
    c694:	2002      	movs	r0, #2
    c696:	4240      	negs	r0, r0
    c698:	e7ed      	b.n	c676 <__gedf2+0x6a>
    c69a:	465f      	mov	r7, fp
    c69c:	4317      	orrs	r7, r2
    c69e:	d0ce      	beq.n	c63e <__gedf2+0x32>
    c6a0:	e7f8      	b.n	c694 <__gedf2+0x88>
    c6a2:	42ac      	cmp	r4, r5
    c6a4:	dce4      	bgt.n	c670 <__gedf2+0x64>
    c6a6:	da03      	bge.n	c6b0 <__gedf2+0xa4>
    c6a8:	1e48      	subs	r0, r1, #1
    c6aa:	2101      	movs	r1, #1
    c6ac:	4308      	orrs	r0, r1
    c6ae:	e7e2      	b.n	c676 <__gedf2+0x6a>
    c6b0:	455e      	cmp	r6, fp
    c6b2:	d8dd      	bhi.n	c670 <__gedf2+0x64>
    c6b4:	d006      	beq.n	c6c4 <__gedf2+0xb8>
    c6b6:	2000      	movs	r0, #0
    c6b8:	455e      	cmp	r6, fp
    c6ba:	d2dc      	bcs.n	c676 <__gedf2+0x6a>
    c6bc:	2301      	movs	r3, #1
    c6be:	1e48      	subs	r0, r1, #1
    c6c0:	4318      	orrs	r0, r3
    c6c2:	e7d8      	b.n	c676 <__gedf2+0x6a>
    c6c4:	45c4      	cmp	ip, r8
    c6c6:	d8d3      	bhi.n	c670 <__gedf2+0x64>
    c6c8:	2000      	movs	r0, #0
    c6ca:	45c4      	cmp	ip, r8
    c6cc:	d3f6      	bcc.n	c6bc <__gedf2+0xb0>
    c6ce:	e7d2      	b.n	c676 <__gedf2+0x6a>
    c6d0:	000007ff 	.word	0x000007ff

0000c6d4 <__ledf2>:
    c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6d6:	464e      	mov	r6, r9
    c6d8:	4645      	mov	r5, r8
    c6da:	46de      	mov	lr, fp
    c6dc:	4657      	mov	r7, sl
    c6de:	005c      	lsls	r4, r3, #1
    c6e0:	b5e0      	push	{r5, r6, r7, lr}
    c6e2:	031f      	lsls	r7, r3, #12
    c6e4:	0fdb      	lsrs	r3, r3, #31
    c6e6:	4699      	mov	r9, r3
    c6e8:	4b2a      	ldr	r3, [pc, #168]	; (c794 <__ledf2+0xc0>)
    c6ea:	030e      	lsls	r6, r1, #12
    c6ec:	004d      	lsls	r5, r1, #1
    c6ee:	0fc9      	lsrs	r1, r1, #31
    c6f0:	4684      	mov	ip, r0
    c6f2:	0b36      	lsrs	r6, r6, #12
    c6f4:	0d6d      	lsrs	r5, r5, #21
    c6f6:	468b      	mov	fp, r1
    c6f8:	4690      	mov	r8, r2
    c6fa:	0b3f      	lsrs	r7, r7, #12
    c6fc:	0d64      	lsrs	r4, r4, #21
    c6fe:	429d      	cmp	r5, r3
    c700:	d020      	beq.n	c744 <__ledf2+0x70>
    c702:	4b24      	ldr	r3, [pc, #144]	; (c794 <__ledf2+0xc0>)
    c704:	429c      	cmp	r4, r3
    c706:	d022      	beq.n	c74e <__ledf2+0x7a>
    c708:	2d00      	cmp	r5, #0
    c70a:	d112      	bne.n	c732 <__ledf2+0x5e>
    c70c:	4330      	orrs	r0, r6
    c70e:	4243      	negs	r3, r0
    c710:	4143      	adcs	r3, r0
    c712:	b2db      	uxtb	r3, r3
    c714:	2c00      	cmp	r4, #0
    c716:	d01f      	beq.n	c758 <__ledf2+0x84>
    c718:	2b00      	cmp	r3, #0
    c71a:	d00c      	beq.n	c736 <__ledf2+0x62>
    c71c:	464b      	mov	r3, r9
    c71e:	2001      	movs	r0, #1
    c720:	3b01      	subs	r3, #1
    c722:	4303      	orrs	r3, r0
    c724:	0018      	movs	r0, r3
    c726:	bc3c      	pop	{r2, r3, r4, r5}
    c728:	4690      	mov	r8, r2
    c72a:	4699      	mov	r9, r3
    c72c:	46a2      	mov	sl, r4
    c72e:	46ab      	mov	fp, r5
    c730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c732:	2c00      	cmp	r4, #0
    c734:	d016      	beq.n	c764 <__ledf2+0x90>
    c736:	45cb      	cmp	fp, r9
    c738:	d017      	beq.n	c76a <__ledf2+0x96>
    c73a:	465b      	mov	r3, fp
    c73c:	4259      	negs	r1, r3
    c73e:	2301      	movs	r3, #1
    c740:	430b      	orrs	r3, r1
    c742:	e7ef      	b.n	c724 <__ledf2+0x50>
    c744:	0031      	movs	r1, r6
    c746:	2302      	movs	r3, #2
    c748:	4301      	orrs	r1, r0
    c74a:	d1eb      	bne.n	c724 <__ledf2+0x50>
    c74c:	e7d9      	b.n	c702 <__ledf2+0x2e>
    c74e:	0039      	movs	r1, r7
    c750:	2302      	movs	r3, #2
    c752:	4311      	orrs	r1, r2
    c754:	d1e6      	bne.n	c724 <__ledf2+0x50>
    c756:	e7d7      	b.n	c708 <__ledf2+0x34>
    c758:	433a      	orrs	r2, r7
    c75a:	d1dd      	bne.n	c718 <__ledf2+0x44>
    c75c:	2300      	movs	r3, #0
    c75e:	2800      	cmp	r0, #0
    c760:	d0e0      	beq.n	c724 <__ledf2+0x50>
    c762:	e7ea      	b.n	c73a <__ledf2+0x66>
    c764:	433a      	orrs	r2, r7
    c766:	d1e6      	bne.n	c736 <__ledf2+0x62>
    c768:	e7e7      	b.n	c73a <__ledf2+0x66>
    c76a:	42a5      	cmp	r5, r4
    c76c:	dce5      	bgt.n	c73a <__ledf2+0x66>
    c76e:	db05      	blt.n	c77c <__ledf2+0xa8>
    c770:	42be      	cmp	r6, r7
    c772:	d8e2      	bhi.n	c73a <__ledf2+0x66>
    c774:	d007      	beq.n	c786 <__ledf2+0xb2>
    c776:	2300      	movs	r3, #0
    c778:	42be      	cmp	r6, r7
    c77a:	d2d3      	bcs.n	c724 <__ledf2+0x50>
    c77c:	4659      	mov	r1, fp
    c77e:	2301      	movs	r3, #1
    c780:	3901      	subs	r1, #1
    c782:	430b      	orrs	r3, r1
    c784:	e7ce      	b.n	c724 <__ledf2+0x50>
    c786:	45c4      	cmp	ip, r8
    c788:	d8d7      	bhi.n	c73a <__ledf2+0x66>
    c78a:	2300      	movs	r3, #0
    c78c:	45c4      	cmp	ip, r8
    c78e:	d3f5      	bcc.n	c77c <__ledf2+0xa8>
    c790:	e7c8      	b.n	c724 <__ledf2+0x50>
    c792:	46c0      	nop			; (mov r8, r8)
    c794:	000007ff 	.word	0x000007ff

0000c798 <__libc_init_array>:
    c798:	b570      	push	{r4, r5, r6, lr}
    c79a:	4e0d      	ldr	r6, [pc, #52]	; (c7d0 <__libc_init_array+0x38>)
    c79c:	4d0d      	ldr	r5, [pc, #52]	; (c7d4 <__libc_init_array+0x3c>)
    c79e:	2400      	movs	r4, #0
    c7a0:	1bad      	subs	r5, r5, r6
    c7a2:	10ad      	asrs	r5, r5, #2
    c7a4:	d005      	beq.n	c7b2 <__libc_init_array+0x1a>
    c7a6:	00a3      	lsls	r3, r4, #2
    c7a8:	58f3      	ldr	r3, [r6, r3]
    c7aa:	3401      	adds	r4, #1
    c7ac:	4798      	blx	r3
    c7ae:	42a5      	cmp	r5, r4
    c7b0:	d1f9      	bne.n	c7a6 <__libc_init_array+0xe>
    c7b2:	f000 fa43 	bl	cc3c <_init>
    c7b6:	4e08      	ldr	r6, [pc, #32]	; (c7d8 <__libc_init_array+0x40>)
    c7b8:	4d08      	ldr	r5, [pc, #32]	; (c7dc <__libc_init_array+0x44>)
    c7ba:	2400      	movs	r4, #0
    c7bc:	1bad      	subs	r5, r5, r6
    c7be:	10ad      	asrs	r5, r5, #2
    c7c0:	d005      	beq.n	c7ce <__libc_init_array+0x36>
    c7c2:	00a3      	lsls	r3, r4, #2
    c7c4:	58f3      	ldr	r3, [r6, r3]
    c7c6:	3401      	adds	r4, #1
    c7c8:	4798      	blx	r3
    c7ca:	42a5      	cmp	r5, r4
    c7cc:	d1f9      	bne.n	c7c2 <__libc_init_array+0x2a>
    c7ce:	bd70      	pop	{r4, r5, r6, pc}
    c7d0:	0000cc48 	.word	0x0000cc48
    c7d4:	0000cc48 	.word	0x0000cc48
    c7d8:	0000cc48 	.word	0x0000cc48
    c7dc:	0000cc50 	.word	0x0000cc50

0000c7e0 <memcpy>:
    c7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7e2:	0005      	movs	r5, r0
    c7e4:	2a0f      	cmp	r2, #15
    c7e6:	d92f      	bls.n	c848 <memcpy+0x68>
    c7e8:	000b      	movs	r3, r1
    c7ea:	4303      	orrs	r3, r0
    c7ec:	079b      	lsls	r3, r3, #30
    c7ee:	d134      	bne.n	c85a <memcpy+0x7a>
    c7f0:	0016      	movs	r6, r2
    c7f2:	000c      	movs	r4, r1
    c7f4:	0003      	movs	r3, r0
    c7f6:	3e10      	subs	r6, #16
    c7f8:	0935      	lsrs	r5, r6, #4
    c7fa:	3501      	adds	r5, #1
    c7fc:	012d      	lsls	r5, r5, #4
    c7fe:	1945      	adds	r5, r0, r5
    c800:	6827      	ldr	r7, [r4, #0]
    c802:	601f      	str	r7, [r3, #0]
    c804:	6867      	ldr	r7, [r4, #4]
    c806:	605f      	str	r7, [r3, #4]
    c808:	68a7      	ldr	r7, [r4, #8]
    c80a:	609f      	str	r7, [r3, #8]
    c80c:	68e7      	ldr	r7, [r4, #12]
    c80e:	3410      	adds	r4, #16
    c810:	60df      	str	r7, [r3, #12]
    c812:	3310      	adds	r3, #16
    c814:	429d      	cmp	r5, r3
    c816:	d1f3      	bne.n	c800 <memcpy+0x20>
    c818:	230f      	movs	r3, #15
    c81a:	439e      	bics	r6, r3
    c81c:	3610      	adds	r6, #16
    c81e:	1985      	adds	r5, r0, r6
    c820:	1989      	adds	r1, r1, r6
    c822:	4013      	ands	r3, r2
    c824:	2b03      	cmp	r3, #3
    c826:	d91a      	bls.n	c85e <memcpy+0x7e>
    c828:	1f1e      	subs	r6, r3, #4
    c82a:	2300      	movs	r3, #0
    c82c:	08b4      	lsrs	r4, r6, #2
    c82e:	3401      	adds	r4, #1
    c830:	00a4      	lsls	r4, r4, #2
    c832:	58cf      	ldr	r7, [r1, r3]
    c834:	50ef      	str	r7, [r5, r3]
    c836:	3304      	adds	r3, #4
    c838:	42a3      	cmp	r3, r4
    c83a:	d1fa      	bne.n	c832 <memcpy+0x52>
    c83c:	2403      	movs	r4, #3
    c83e:	43a6      	bics	r6, r4
    c840:	1d33      	adds	r3, r6, #4
    c842:	4022      	ands	r2, r4
    c844:	18c9      	adds	r1, r1, r3
    c846:	18ed      	adds	r5, r5, r3
    c848:	2a00      	cmp	r2, #0
    c84a:	d005      	beq.n	c858 <memcpy+0x78>
    c84c:	2300      	movs	r3, #0
    c84e:	5ccc      	ldrb	r4, [r1, r3]
    c850:	54ec      	strb	r4, [r5, r3]
    c852:	3301      	adds	r3, #1
    c854:	4293      	cmp	r3, r2
    c856:	d1fa      	bne.n	c84e <memcpy+0x6e>
    c858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c85a:	0005      	movs	r5, r0
    c85c:	e7f6      	b.n	c84c <memcpy+0x6c>
    c85e:	001a      	movs	r2, r3
    c860:	e7f2      	b.n	c848 <memcpy+0x68>
    c862:	46c0      	nop			; (mov r8, r8)

0000c864 <memset>:
    c864:	b5f0      	push	{r4, r5, r6, r7, lr}
    c866:	0783      	lsls	r3, r0, #30
    c868:	d043      	beq.n	c8f2 <memset+0x8e>
    c86a:	1e54      	subs	r4, r2, #1
    c86c:	2a00      	cmp	r2, #0
    c86e:	d03f      	beq.n	c8f0 <memset+0x8c>
    c870:	b2ce      	uxtb	r6, r1
    c872:	0002      	movs	r2, r0
    c874:	2503      	movs	r5, #3
    c876:	e002      	b.n	c87e <memset+0x1a>
    c878:	001a      	movs	r2, r3
    c87a:	3c01      	subs	r4, #1
    c87c:	d338      	bcc.n	c8f0 <memset+0x8c>
    c87e:	1c53      	adds	r3, r2, #1
    c880:	7016      	strb	r6, [r2, #0]
    c882:	422b      	tst	r3, r5
    c884:	d1f8      	bne.n	c878 <memset+0x14>
    c886:	2c03      	cmp	r4, #3
    c888:	d92a      	bls.n	c8e0 <memset+0x7c>
    c88a:	22ff      	movs	r2, #255	; 0xff
    c88c:	400a      	ands	r2, r1
    c88e:	0215      	lsls	r5, r2, #8
    c890:	4315      	orrs	r5, r2
    c892:	042a      	lsls	r2, r5, #16
    c894:	4315      	orrs	r5, r2
    c896:	2c0f      	cmp	r4, #15
    c898:	d914      	bls.n	c8c4 <memset+0x60>
    c89a:	0027      	movs	r7, r4
    c89c:	001a      	movs	r2, r3
    c89e:	3f10      	subs	r7, #16
    c8a0:	093e      	lsrs	r6, r7, #4
    c8a2:	3601      	adds	r6, #1
    c8a4:	0136      	lsls	r6, r6, #4
    c8a6:	199e      	adds	r6, r3, r6
    c8a8:	6015      	str	r5, [r2, #0]
    c8aa:	6055      	str	r5, [r2, #4]
    c8ac:	6095      	str	r5, [r2, #8]
    c8ae:	60d5      	str	r5, [r2, #12]
    c8b0:	3210      	adds	r2, #16
    c8b2:	4296      	cmp	r6, r2
    c8b4:	d1f8      	bne.n	c8a8 <memset+0x44>
    c8b6:	220f      	movs	r2, #15
    c8b8:	4397      	bics	r7, r2
    c8ba:	3710      	adds	r7, #16
    c8bc:	19db      	adds	r3, r3, r7
    c8be:	4014      	ands	r4, r2
    c8c0:	2c03      	cmp	r4, #3
    c8c2:	d90d      	bls.n	c8e0 <memset+0x7c>
    c8c4:	001a      	movs	r2, r3
    c8c6:	1f27      	subs	r7, r4, #4
    c8c8:	08be      	lsrs	r6, r7, #2
    c8ca:	3601      	adds	r6, #1
    c8cc:	00b6      	lsls	r6, r6, #2
    c8ce:	199e      	adds	r6, r3, r6
    c8d0:	c220      	stmia	r2!, {r5}
    c8d2:	42b2      	cmp	r2, r6
    c8d4:	d1fc      	bne.n	c8d0 <memset+0x6c>
    c8d6:	2203      	movs	r2, #3
    c8d8:	4397      	bics	r7, r2
    c8da:	3704      	adds	r7, #4
    c8dc:	19db      	adds	r3, r3, r7
    c8de:	4014      	ands	r4, r2
    c8e0:	2c00      	cmp	r4, #0
    c8e2:	d005      	beq.n	c8f0 <memset+0x8c>
    c8e4:	b2c9      	uxtb	r1, r1
    c8e6:	191c      	adds	r4, r3, r4
    c8e8:	7019      	strb	r1, [r3, #0]
    c8ea:	3301      	adds	r3, #1
    c8ec:	429c      	cmp	r4, r3
    c8ee:	d1fb      	bne.n	c8e8 <memset+0x84>
    c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8f2:	0014      	movs	r4, r2
    c8f4:	0003      	movs	r3, r0
    c8f6:	e7c6      	b.n	c886 <memset+0x22>

0000c8f8 <register_fini>:
    c8f8:	4b03      	ldr	r3, [pc, #12]	; (c908 <register_fini+0x10>)
    c8fa:	b510      	push	{r4, lr}
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d002      	beq.n	c906 <register_fini+0xe>
    c900:	4802      	ldr	r0, [pc, #8]	; (c90c <register_fini+0x14>)
    c902:	f000 f805 	bl	c910 <atexit>
    c906:	bd10      	pop	{r4, pc}
    c908:	00000000 	.word	0x00000000
    c90c:	0000c921 	.word	0x0000c921

0000c910 <atexit>:
    c910:	b510      	push	{r4, lr}
    c912:	0001      	movs	r1, r0
    c914:	2300      	movs	r3, #0
    c916:	2200      	movs	r2, #0
    c918:	2000      	movs	r0, #0
    c91a:	f000 f81f 	bl	c95c <__register_exitproc>
    c91e:	bd10      	pop	{r4, pc}

0000c920 <__libc_fini_array>:
    c920:	b570      	push	{r4, r5, r6, lr}
    c922:	4b09      	ldr	r3, [pc, #36]	; (c948 <__libc_fini_array+0x28>)
    c924:	4c09      	ldr	r4, [pc, #36]	; (c94c <__libc_fini_array+0x2c>)
    c926:	1ae4      	subs	r4, r4, r3
    c928:	10a4      	asrs	r4, r4, #2
    c92a:	d009      	beq.n	c940 <__libc_fini_array+0x20>
    c92c:	4a08      	ldr	r2, [pc, #32]	; (c950 <__libc_fini_array+0x30>)
    c92e:	18a5      	adds	r5, r4, r2
    c930:	00ad      	lsls	r5, r5, #2
    c932:	18ed      	adds	r5, r5, r3
    c934:	682b      	ldr	r3, [r5, #0]
    c936:	3c01      	subs	r4, #1
    c938:	4798      	blx	r3
    c93a:	3d04      	subs	r5, #4
    c93c:	2c00      	cmp	r4, #0
    c93e:	d1f9      	bne.n	c934 <__libc_fini_array+0x14>
    c940:	f000 f986 	bl	cc50 <_fini>
    c944:	bd70      	pop	{r4, r5, r6, pc}
    c946:	46c0      	nop			; (mov r8, r8)
    c948:	0000cc5c 	.word	0x0000cc5c
    c94c:	0000cc60 	.word	0x0000cc60
    c950:	3fffffff 	.word	0x3fffffff

0000c954 <__retarget_lock_acquire_recursive>:
    c954:	4770      	bx	lr
    c956:	46c0      	nop			; (mov r8, r8)

0000c958 <__retarget_lock_release_recursive>:
    c958:	4770      	bx	lr
    c95a:	46c0      	nop			; (mov r8, r8)

0000c95c <__register_exitproc>:
    c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c95e:	464e      	mov	r6, r9
    c960:	4645      	mov	r5, r8
    c962:	46de      	mov	lr, fp
    c964:	4657      	mov	r7, sl
    c966:	b5e0      	push	{r5, r6, r7, lr}
    c968:	4d36      	ldr	r5, [pc, #216]	; (ca44 <__register_exitproc+0xe8>)
    c96a:	b083      	sub	sp, #12
    c96c:	0006      	movs	r6, r0
    c96e:	6828      	ldr	r0, [r5, #0]
    c970:	4698      	mov	r8, r3
    c972:	000f      	movs	r7, r1
    c974:	4691      	mov	r9, r2
    c976:	f7ff ffed 	bl	c954 <__retarget_lock_acquire_recursive>
    c97a:	4b33      	ldr	r3, [pc, #204]	; (ca48 <__register_exitproc+0xec>)
    c97c:	681c      	ldr	r4, [r3, #0]
    c97e:	23a4      	movs	r3, #164	; 0xa4
    c980:	005b      	lsls	r3, r3, #1
    c982:	58e0      	ldr	r0, [r4, r3]
    c984:	2800      	cmp	r0, #0
    c986:	d052      	beq.n	ca2e <__register_exitproc+0xd2>
    c988:	6843      	ldr	r3, [r0, #4]
    c98a:	2b1f      	cmp	r3, #31
    c98c:	dc13      	bgt.n	c9b6 <__register_exitproc+0x5a>
    c98e:	1c5a      	adds	r2, r3, #1
    c990:	9201      	str	r2, [sp, #4]
    c992:	2e00      	cmp	r6, #0
    c994:	d128      	bne.n	c9e8 <__register_exitproc+0x8c>
    c996:	9a01      	ldr	r2, [sp, #4]
    c998:	3302      	adds	r3, #2
    c99a:	009b      	lsls	r3, r3, #2
    c99c:	6042      	str	r2, [r0, #4]
    c99e:	501f      	str	r7, [r3, r0]
    c9a0:	6828      	ldr	r0, [r5, #0]
    c9a2:	f7ff ffd9 	bl	c958 <__retarget_lock_release_recursive>
    c9a6:	2000      	movs	r0, #0
    c9a8:	b003      	add	sp, #12
    c9aa:	bc3c      	pop	{r2, r3, r4, r5}
    c9ac:	4690      	mov	r8, r2
    c9ae:	4699      	mov	r9, r3
    c9b0:	46a2      	mov	sl, r4
    c9b2:	46ab      	mov	fp, r5
    c9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9b6:	4b25      	ldr	r3, [pc, #148]	; (ca4c <__register_exitproc+0xf0>)
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d03d      	beq.n	ca38 <__register_exitproc+0xdc>
    c9bc:	20c8      	movs	r0, #200	; 0xc8
    c9be:	0040      	lsls	r0, r0, #1
    c9c0:	e000      	b.n	c9c4 <__register_exitproc+0x68>
    c9c2:	bf00      	nop
    c9c4:	2800      	cmp	r0, #0
    c9c6:	d037      	beq.n	ca38 <__register_exitproc+0xdc>
    c9c8:	22a4      	movs	r2, #164	; 0xa4
    c9ca:	2300      	movs	r3, #0
    c9cc:	0052      	lsls	r2, r2, #1
    c9ce:	58a1      	ldr	r1, [r4, r2]
    c9d0:	6043      	str	r3, [r0, #4]
    c9d2:	6001      	str	r1, [r0, #0]
    c9d4:	50a0      	str	r0, [r4, r2]
    c9d6:	3240      	adds	r2, #64	; 0x40
    c9d8:	5083      	str	r3, [r0, r2]
    c9da:	3204      	adds	r2, #4
    c9dc:	5083      	str	r3, [r0, r2]
    c9de:	3301      	adds	r3, #1
    c9e0:	9301      	str	r3, [sp, #4]
    c9e2:	2300      	movs	r3, #0
    c9e4:	2e00      	cmp	r6, #0
    c9e6:	d0d6      	beq.n	c996 <__register_exitproc+0x3a>
    c9e8:	009a      	lsls	r2, r3, #2
    c9ea:	4692      	mov	sl, r2
    c9ec:	4482      	add	sl, r0
    c9ee:	464a      	mov	r2, r9
    c9f0:	2188      	movs	r1, #136	; 0x88
    c9f2:	4654      	mov	r4, sl
    c9f4:	5062      	str	r2, [r4, r1]
    c9f6:	22c4      	movs	r2, #196	; 0xc4
    c9f8:	0052      	lsls	r2, r2, #1
    c9fa:	4691      	mov	r9, r2
    c9fc:	4481      	add	r9, r0
    c9fe:	464a      	mov	r2, r9
    ca00:	3987      	subs	r1, #135	; 0x87
    ca02:	4099      	lsls	r1, r3
    ca04:	6812      	ldr	r2, [r2, #0]
    ca06:	468b      	mov	fp, r1
    ca08:	430a      	orrs	r2, r1
    ca0a:	4694      	mov	ip, r2
    ca0c:	464a      	mov	r2, r9
    ca0e:	4661      	mov	r1, ip
    ca10:	6011      	str	r1, [r2, #0]
    ca12:	2284      	movs	r2, #132	; 0x84
    ca14:	4641      	mov	r1, r8
    ca16:	0052      	lsls	r2, r2, #1
    ca18:	50a1      	str	r1, [r4, r2]
    ca1a:	2e02      	cmp	r6, #2
    ca1c:	d1bb      	bne.n	c996 <__register_exitproc+0x3a>
    ca1e:	0002      	movs	r2, r0
    ca20:	465c      	mov	r4, fp
    ca22:	328d      	adds	r2, #141	; 0x8d
    ca24:	32ff      	adds	r2, #255	; 0xff
    ca26:	6811      	ldr	r1, [r2, #0]
    ca28:	430c      	orrs	r4, r1
    ca2a:	6014      	str	r4, [r2, #0]
    ca2c:	e7b3      	b.n	c996 <__register_exitproc+0x3a>
    ca2e:	0020      	movs	r0, r4
    ca30:	304d      	adds	r0, #77	; 0x4d
    ca32:	30ff      	adds	r0, #255	; 0xff
    ca34:	50e0      	str	r0, [r4, r3]
    ca36:	e7a7      	b.n	c988 <__register_exitproc+0x2c>
    ca38:	6828      	ldr	r0, [r5, #0]
    ca3a:	f7ff ff8d 	bl	c958 <__retarget_lock_release_recursive>
    ca3e:	2001      	movs	r0, #1
    ca40:	4240      	negs	r0, r0
    ca42:	e7b1      	b.n	c9a8 <__register_exitproc+0x4c>
    ca44:	20000430 	.word	0x20000430
    ca48:	0000cc38 	.word	0x0000cc38
    ca4c:	00000000 	.word	0x00000000
    ca50:	696d6461 	.word	0x696d6461
    ca54:	0000006e 	.word	0x0000006e
    ca58:	72657375 	.word	0x72657375
    ca5c:	00000000 	.word	0x00000000
    ca60:	53434d5f 	.word	0x53434d5f
    ca64:	2d303031 	.word	0x2d303031
    ca68:	54315234 	.word	0x54315234
    ca6c:	00000000 	.word	0x00000000
    ca70:	2e302e30 	.word	0x2e302e30
    ca74:	34302e30 	.word	0x34302e30
    ca78:	00000000 	.word	0x00000000
    ca7c:	00004b0c 	.word	0x00004b0c
    ca80:	00004b50 	.word	0x00004b50
    ca84:	00005746 	.word	0x00005746
    ca88:	00005746 	.word	0x00005746
    ca8c:	00005746 	.word	0x00005746
    ca90:	00005746 	.word	0x00005746
    ca94:	00005746 	.word	0x00005746
    ca98:	00004de0 	.word	0x00004de0
    ca9c:	00004eea 	.word	0x00004eea
    caa0:	00005746 	.word	0x00005746
    caa4:	00005746 	.word	0x00005746
    caa8:	00005746 	.word	0x00005746
    caac:	00005746 	.word	0x00005746
    cab0:	00005746 	.word	0x00005746
    cab4:	00005746 	.word	0x00005746
    cab8:	00005746 	.word	0x00005746
    cabc:	00005014 	.word	0x00005014
    cac0:	00005746 	.word	0x00005746
    cac4:	00005746 	.word	0x00005746
    cac8:	00005746 	.word	0x00005746
    cacc:	00005746 	.word	0x00005746
    cad0:	00005746 	.word	0x00005746
    cad4:	00005746 	.word	0x00005746
    cad8:	00005052 	.word	0x00005052
    cadc:	00005746 	.word	0x00005746
    cae0:	00005746 	.word	0x00005746
    cae4:	00005746 	.word	0x00005746
    cae8:	00005746 	.word	0x00005746
    caec:	00005746 	.word	0x00005746
    caf0:	00005746 	.word	0x00005746
    caf4:	00005746 	.word	0x00005746
    caf8:	00005746 	.word	0x00005746
    cafc:	00005146 	.word	0x00005146
    cb00:	000052d0 	.word	0x000052d0
    cb04:	000053e8 	.word	0x000053e8
    cb08:	000054ae 	.word	0x000054ae
    cb0c:	00005746 	.word	0x00005746
    cb10:	00005746 	.word	0x00005746
    cb14:	00005746 	.word	0x00005746
    cb18:	0000551e 	.word	0x0000551e
    cb1c:	00005746 	.word	0x00005746
    cb20:	000055e4 	.word	0x000055e4
    cb24:	0000982a 	.word	0x0000982a
    cb28:	0000983c 	.word	0x0000983c
    cb2c:	00009870 	.word	0x00009870
    cb30:	000098a8 	.word	0x000098a8
    cb34:	000098ce 	.word	0x000098ce
    cb38:	00009906 	.word	0x00009906
    cb3c:	000099ae 	.word	0x000099ae
    cb40:	000099f6 	.word	0x000099f6
    cb44:	00009b1a 	.word	0x00009b1a
    cb48:	00009bca 	.word	0x00009bca
    cb4c:	00009c24 	.word	0x00009c24
    cb50:	00009cd6 	.word	0x00009cd6
    cb54:	00009d1c 	.word	0x00009d1c
    cb58:	00009d60 	.word	0x00009d60
    cb5c:	00009da6 	.word	0x00009da6
    cb60:	00009e90 	.word	0x00009e90
    cb64:	00009f3e 	.word	0x00009f3e
    cb68:	00009fc6 	.word	0x00009fc6
    cb6c:	0000a040 	.word	0x0000a040
    cb70:	0000a0e8 	.word	0x0000a0e8
    cb74:	0000a158 	.word	0x0000a158
    cb78:	0000a340 	.word	0x0000a340
    cb7c:	0000a570 	.word	0x0000a570
    cb80:	0000a4cc 	.word	0x0000a4cc
    cb84:	0000a5c4 	.word	0x0000a5c4
    cb88:	0000a242 	.word	0x0000a242
    cb8c:	0000a284 	.word	0x0000a284
    cb90:	0000a66e 	.word	0x0000a66e
    cb94:	0000a6b4 	.word	0x0000a6b4
    cb98:	0000a834 	.word	0x0000a834
    cb9c:	0000a8e2 	.word	0x0000a8e2
    cba0:	0000a96a 	.word	0x0000a96a
    cba4:	0000a9e8 	.word	0x0000a9e8
    cba8:	0000aa90 	.word	0x0000aa90
    cbac:	3153434d 	.word	0x3153434d
    cbb0:	342d3030 	.word	0x342d3030
    cbb4:	00543152 	.word	0x00543152
    cbb8:	0000b3c8 	.word	0x0000b3c8
    cbbc:	0000b3aa 	.word	0x0000b3aa
    cbc0:	0000b364 	.word	0x0000b364
    cbc4:	0000b282 	.word	0x0000b282
    cbc8:	0000b364 	.word	0x0000b364
    cbcc:	0000b39c 	.word	0x0000b39c
    cbd0:	0000b364 	.word	0x0000b364
    cbd4:	0000b282 	.word	0x0000b282
    cbd8:	0000b3aa 	.word	0x0000b3aa
    cbdc:	0000b3aa 	.word	0x0000b3aa
    cbe0:	0000b39c 	.word	0x0000b39c
    cbe4:	0000b282 	.word	0x0000b282
    cbe8:	0000b27a 	.word	0x0000b27a
    cbec:	0000b27a 	.word	0x0000b27a
    cbf0:	0000b27a 	.word	0x0000b27a
    cbf4:	0000b5e0 	.word	0x0000b5e0
    cbf8:	0000ba28 	.word	0x0000ba28
    cbfc:	0000b8e8 	.word	0x0000b8e8
    cc00:	0000b8e8 	.word	0x0000b8e8
    cc04:	0000b8e4 	.word	0x0000b8e4
    cc08:	0000ba00 	.word	0x0000ba00
    cc0c:	0000ba00 	.word	0x0000ba00
    cc10:	0000b9f2 	.word	0x0000b9f2
    cc14:	0000b8e4 	.word	0x0000b8e4
    cc18:	0000ba00 	.word	0x0000ba00
    cc1c:	0000b9f2 	.word	0x0000b9f2
    cc20:	0000ba00 	.word	0x0000ba00
    cc24:	0000b8e4 	.word	0x0000b8e4
    cc28:	0000ba08 	.word	0x0000ba08
    cc2c:	0000ba08 	.word	0x0000ba08
    cc30:	0000ba08 	.word	0x0000ba08
    cc34:	0000bc0c 	.word	0x0000bc0c

0000cc38 <_global_impure_ptr>:
    cc38:	20000008                                ... 

0000cc3c <_init>:
    cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc3e:	46c0      	nop			; (mov r8, r8)
    cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc42:	bc08      	pop	{r3}
    cc44:	469e      	mov	lr, r3
    cc46:	4770      	bx	lr

0000cc48 <__init_array_start>:
    cc48:	0000c8f9 	.word	0x0000c8f9

0000cc4c <__frame_dummy_init_array_entry>:
    cc4c:	000040dd                                .@..

0000cc50 <_fini>:
    cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc52:	46c0      	nop			; (mov r8, r8)
    cc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc56:	bc08      	pop	{r3}
    cc58:	469e      	mov	lr, r3
    cc5a:	4770      	bx	lr

0000cc5c <__fini_array_start>:
    cc5c:	000040b5 	.word	0x000040b5
