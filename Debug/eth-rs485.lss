
eth-rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008cc4  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000ccc4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ab8  20000434  0000d0f8  00010434  2**2
                  ALLOC
  3 .stack        00002004  20003eec  00010bb0  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000473c2  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034c6  00000000  00000000  00057877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001208  00000000  00000000  0005ad3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0005bf45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017051  00000000  00000000  0005c185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a71f  00000000  00000000  000731d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00071adc  00000000  00000000  0007d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001054  00000000  00000000  000ef3d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000f0428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	f0 5e 00 20 15 41 00 00 0d 42 00 00 0d 42 00 00     .^. .A...B...B..
	...
    402c:	0d 42 00 00 00 00 00 00 00 00 00 00 0d 42 00 00     .B...........B..
    403c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    404c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    405c:	0d 42 00 00 0d 42 00 00 51 96 00 00 61 96 00 00     .B...B..Q...a...
    406c:	41 96 00 00 31 96 00 00 0d 42 00 00 65 7c 00 00     A...1....B..e|..
    407c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 f5 7f 00 00     .B...B...B......
    408c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    409c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
	...

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000434 	.word	0x20000434
    40d4:	00000000 	.word	0x00000000
    40d8:	0000ccc4 	.word	0x0000ccc4

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000438 	.word	0x20000438
    4108:	0000ccc4 	.word	0x0000ccc4
    410c:	0000ccc4 	.word	0x0000ccc4
    4110:	00000000 	.word	0x00000000

00004114 <Reset_Handler>:
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	4b2f      	ldr	r3, [pc, #188]	; (41d8 <Reset_Handler+0xc4>)
    411c:	607b      	str	r3, [r7, #4]
    411e:	4b2f      	ldr	r3, [pc, #188]	; (41dc <Reset_Handler+0xc8>)
    4120:	603b      	str	r3, [r7, #0]
    4122:	687a      	ldr	r2, [r7, #4]
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d00c      	beq.n	4144 <Reset_Handler+0x30>
    412a:	e007      	b.n	413c <Reset_Handler+0x28>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	1d1a      	adds	r2, r3, #4
    4130:	603a      	str	r2, [r7, #0]
    4132:	687a      	ldr	r2, [r7, #4]
    4134:	1d11      	adds	r1, r2, #4
    4136:	6079      	str	r1, [r7, #4]
    4138:	6812      	ldr	r2, [r2, #0]
    413a:	601a      	str	r2, [r3, #0]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	4b28      	ldr	r3, [pc, #160]	; (41e0 <Reset_Handler+0xcc>)
    4140:	429a      	cmp	r2, r3
    4142:	d3f3      	bcc.n	412c <Reset_Handler+0x18>
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <Reset_Handler+0xd0>)
    4146:	603b      	str	r3, [r7, #0]
    4148:	e004      	b.n	4154 <Reset_Handler+0x40>
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	1d1a      	adds	r2, r3, #4
    414e:	603a      	str	r2, [r7, #0]
    4150:	2200      	movs	r2, #0
    4152:	601a      	str	r2, [r3, #0]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	4b24      	ldr	r3, [pc, #144]	; (41e8 <Reset_Handler+0xd4>)
    4158:	429a      	cmp	r2, r3
    415a:	d3f6      	bcc.n	414a <Reset_Handler+0x36>
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <Reset_Handler+0xd8>)
    415e:	607b      	str	r3, [r7, #4]
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <Reset_Handler+0xdc>)
    4162:	687a      	ldr	r2, [r7, #4]
    4164:	21ff      	movs	r1, #255	; 0xff
    4166:	438a      	bics	r2, r1
    4168:	609a      	str	r2, [r3, #8]
    416a:	4a22      	ldr	r2, [pc, #136]	; (41f4 <Reset_Handler+0xe0>)
    416c:	2390      	movs	r3, #144	; 0x90
    416e:	005b      	lsls	r3, r3, #1
    4170:	2102      	movs	r1, #2
    4172:	50d1      	str	r1, [r2, r3]
    4174:	4a20      	ldr	r2, [pc, #128]	; (41f8 <Reset_Handler+0xe4>)
    4176:	78d3      	ldrb	r3, [r2, #3]
    4178:	2103      	movs	r1, #3
    417a:	438b      	bics	r3, r1
    417c:	1c19      	adds	r1, r3, #0
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	70d3      	strb	r3, [r2, #3]
    4184:	4a1c      	ldr	r2, [pc, #112]	; (41f8 <Reset_Handler+0xe4>)
    4186:	78d3      	ldrb	r3, [r2, #3]
    4188:	210c      	movs	r1, #12
    418a:	438b      	bics	r3, r1
    418c:	1c19      	adds	r1, r3, #0
    418e:	2308      	movs	r3, #8
    4190:	430b      	orrs	r3, r1
    4192:	70d3      	strb	r3, [r2, #3]
    4194:	4a19      	ldr	r2, [pc, #100]	; (41fc <Reset_Handler+0xe8>)
    4196:	7b93      	ldrb	r3, [r2, #14]
    4198:	2130      	movs	r1, #48	; 0x30
    419a:	438b      	bics	r3, r1
    419c:	1c19      	adds	r1, r3, #0
    419e:	2320      	movs	r3, #32
    41a0:	430b      	orrs	r3, r1
    41a2:	7393      	strb	r3, [r2, #14]
    41a4:	4a15      	ldr	r2, [pc, #84]	; (41fc <Reset_Handler+0xe8>)
    41a6:	7b93      	ldrb	r3, [r2, #14]
    41a8:	210c      	movs	r1, #12
    41aa:	438b      	bics	r3, r1
    41ac:	1c19      	adds	r1, r3, #0
    41ae:	2308      	movs	r3, #8
    41b0:	430b      	orrs	r3, r1
    41b2:	7393      	strb	r3, [r2, #14]
    41b4:	4a11      	ldr	r2, [pc, #68]	; (41fc <Reset_Handler+0xe8>)
    41b6:	7b93      	ldrb	r3, [r2, #14]
    41b8:	2103      	movs	r1, #3
    41ba:	438b      	bics	r3, r1
    41bc:	1c19      	adds	r1, r3, #0
    41be:	2302      	movs	r3, #2
    41c0:	430b      	orrs	r3, r1
    41c2:	7393      	strb	r3, [r2, #14]
    41c4:	4a0e      	ldr	r2, [pc, #56]	; (4200 <Reset_Handler+0xec>)
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	2180      	movs	r1, #128	; 0x80
    41ca:	430b      	orrs	r3, r1
    41cc:	6053      	str	r3, [r2, #4]
    41ce:	4b0d      	ldr	r3, [pc, #52]	; (4204 <Reset_Handler+0xf0>)
    41d0:	4798      	blx	r3
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <Reset_Handler+0xf4>)
    41d4:	4798      	blx	r3
    41d6:	e7fe      	b.n	41d6 <Reset_Handler+0xc2>
    41d8:	0000ccc4 	.word	0x0000ccc4
    41dc:	20000000 	.word	0x20000000
    41e0:	20000434 	.word	0x20000434
    41e4:	20000434 	.word	0x20000434
    41e8:	20003eec 	.word	0x20003eec
    41ec:	00004000 	.word	0x00004000
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	41007000 	.word	0x41007000
    41f8:	41005000 	.word	0x41005000
    41fc:	41004800 	.word	0x41004800
    4200:	41004000 	.word	0x41004000
    4204:	0000c7f9 	.word	0x0000c7f9
    4208:	00007205 	.word	0x00007205

0000420c <Dummy_Handler>:
    420c:	b580      	push	{r7, lr}
    420e:	af00      	add	r7, sp, #0
    4210:	e7fe      	b.n	4210 <Dummy_Handler+0x4>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <acc>:
#include "def.h"

void acc(BYTE cmd)//command(читать, записать, сбросить)
{
    4214:	b5b0      	push	{r4, r5, r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	0002      	movs	r2, r0
    421c:	1dfb      	adds	r3, r7, #7
    421e:	701a      	strb	r2, [r3, #0]
	if (sizeof(ACCOUNTS) != 256) {cmd = 109;}
	switch(cmd)
    4220:	1dfb      	adds	r3, r7, #7
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	2b01      	cmp	r3, #1
    4226:	d00b      	beq.n	4240 <acc+0x2c>
    4228:	2b02      	cmp	r3, #2
    422a:	d01e      	beq.n	426a <acc+0x56>
    422c:	2b00      	cmp	r3, #0
    422e:	d174      	bne.n	431a <acc+0x106>
	{
		case READ:
			memcpy(&accnts.accnt[0].login[0], ACCOUNT_PLACE, sizeof(ACCOUNTS));
    4230:	2380      	movs	r3, #128	; 0x80
    4232:	005a      	lsls	r2, r3, #1
    4234:	4948      	ldr	r1, [pc, #288]	; (4358 <acc+0x144>)
    4236:	4b49      	ldr	r3, [pc, #292]	; (435c <acc+0x148>)
    4238:	0018      	movs	r0, r3
    423a:	4b49      	ldr	r3, [pc, #292]	; (4360 <acc+0x14c>)
    423c:	4798      	blx	r3
		break;
    423e:	e087      	b.n	4350 <acc+0x13c>
		case WRITE:
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    4240:	2380      	movs	r3, #128	; 0x80
    4242:	005b      	lsls	r3, r3, #1
    4244:	4a44      	ldr	r2, [pc, #272]	; (4358 <acc+0x144>)
    4246:	0019      	movs	r1, r3
    4248:	0010      	movs	r0, r2
    424a:	4b46      	ldr	r3, [pc, #280]	; (4364 <acc+0x150>)
    424c:	4798      	blx	r3
    424e:	1e03      	subs	r3, r0, #0
    4250:	d103      	bne.n	425a <acc+0x46>
    4252:	4b41      	ldr	r3, [pc, #260]	; (4358 <acc+0x144>)
    4254:	0018      	movs	r0, r3
    4256:	4b44      	ldr	r3, [pc, #272]	; (4368 <acc+0x154>)
    4258:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0], sizeof(ACCOUNTS));
    425a:	2380      	movs	r3, #128	; 0x80
    425c:	005a      	lsls	r2, r3, #1
    425e:	4b3f      	ldr	r3, [pc, #252]	; (435c <acc+0x148>)
    4260:	483d      	ldr	r0, [pc, #244]	; (4358 <acc+0x144>)
    4262:	0019      	movs	r1, r3
    4264:	4b41      	ldr	r3, [pc, #260]	; (436c <acc+0x158>)
    4266:	4798      	blx	r3
		break;
    4268:	e072      	b.n	4350 <acc+0x13c>
		case DROP:

			memset(&accnts.accnt[0].login[0], 0, 64);
    426a:	4b3c      	ldr	r3, [pc, #240]	; (435c <acc+0x148>)
    426c:	2240      	movs	r2, #64	; 0x40
    426e:	2100      	movs	r1, #0
    4270:	0018      	movs	r0, r3
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <acc+0x15c>)
    4274:	4798      	blx	r3
			memcpy(&accnts.accnt[0].login[0], ADMIN, sizeof(ADMIN));
    4276:	493f      	ldr	r1, [pc, #252]	; (4374 <acc+0x160>)
    4278:	4b38      	ldr	r3, [pc, #224]	; (435c <acc+0x148>)
    427a:	2206      	movs	r2, #6
    427c:	0018      	movs	r0, r3
    427e:	4b38      	ldr	r3, [pc, #224]	; (4360 <acc+0x14c>)
    4280:	4798      	blx	r3
			memcpy(&accnts.accnt[0].password[0], ADMIN, sizeof(ADMIN));
    4282:	493c      	ldr	r1, [pc, #240]	; (4374 <acc+0x160>)
    4284:	4b3c      	ldr	r3, [pc, #240]	; (4378 <acc+0x164>)
    4286:	2206      	movs	r2, #6
    4288:	0018      	movs	r0, r3
    428a:	4b35      	ldr	r3, [pc, #212]	; (4360 <acc+0x14c>)
    428c:	4798      	blx	r3

			memset(&accnts.accnt[1].login[0], 0, 64);
    428e:	4b3b      	ldr	r3, [pc, #236]	; (437c <acc+0x168>)
    4290:	2240      	movs	r2, #64	; 0x40
    4292:	2100      	movs	r1, #0
    4294:	0018      	movs	r0, r3
    4296:	4b36      	ldr	r3, [pc, #216]	; (4370 <acc+0x15c>)
    4298:	4798      	blx	r3
			memcpy(&accnts.accnt[1].login[0], USER, sizeof(USER));
    429a:	4939      	ldr	r1, [pc, #228]	; (4380 <acc+0x16c>)
    429c:	4b37      	ldr	r3, [pc, #220]	; (437c <acc+0x168>)
    429e:	2205      	movs	r2, #5
    42a0:	0018      	movs	r0, r3
    42a2:	4b2f      	ldr	r3, [pc, #188]	; (4360 <acc+0x14c>)
    42a4:	4798      	blx	r3
			memcpy(&accnts.accnt[1].password[0], USER, sizeof(USER));
    42a6:	4936      	ldr	r1, [pc, #216]	; (4380 <acc+0x16c>)
    42a8:	4b36      	ldr	r3, [pc, #216]	; (4384 <acc+0x170>)
    42aa:	2205      	movs	r2, #5
    42ac:	0018      	movs	r0, r3
    42ae:	4b2c      	ldr	r3, [pc, #176]	; (4360 <acc+0x14c>)
    42b0:	4798      	blx	r3
			
			accnts.cs = crc16_ccit(&accnts.accnt[0].login, sizeof(ACCOUNTS));
    42b2:	2380      	movs	r3, #128	; 0x80
    42b4:	005a      	lsls	r2, r3, #1
    42b6:	4b29      	ldr	r3, [pc, #164]	; (435c <acc+0x148>)
    42b8:	0011      	movs	r1, r2
    42ba:	0018      	movs	r0, r3
    42bc:	4b32      	ldr	r3, [pc, #200]	; (4388 <acc+0x174>)
    42be:	4798      	blx	r3
    42c0:	0003      	movs	r3, r0
    42c2:	0019      	movs	r1, r3
    42c4:	4b25      	ldr	r3, [pc, #148]	; (435c <acc+0x148>)
    42c6:	22fe      	movs	r2, #254	; 0xfe
    42c8:	20ff      	movs	r0, #255	; 0xff
    42ca:	4008      	ands	r0, r1
    42cc:	0005      	movs	r5, r0
    42ce:	5c98      	ldrb	r0, [r3, r2]
    42d0:	2400      	movs	r4, #0
    42d2:	4020      	ands	r0, r4
    42d4:	1c04      	adds	r4, r0, #0
    42d6:	1c28      	adds	r0, r5, #0
    42d8:	4320      	orrs	r0, r4
    42da:	5498      	strb	r0, [r3, r2]
    42dc:	0a09      	lsrs	r1, r1, #8
    42de:	b288      	uxth	r0, r1
    42e0:	189b      	adds	r3, r3, r2
    42e2:	785a      	ldrb	r2, [r3, #1]
    42e4:	2100      	movs	r1, #0
    42e6:	400a      	ands	r2, r1
    42e8:	1c11      	adds	r1, r2, #0
    42ea:	1c02      	adds	r2, r0, #0
    42ec:	430a      	orrs	r2, r1
    42ee:	705a      	strb	r2, [r3, #1]
			
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	4a18      	ldr	r2, [pc, #96]	; (4358 <acc+0x144>)
    42f6:	0019      	movs	r1, r3
    42f8:	0010      	movs	r0, r2
    42fa:	4b1a      	ldr	r3, [pc, #104]	; (4364 <acc+0x150>)
    42fc:	4798      	blx	r3
    42fe:	1e03      	subs	r3, r0, #0
    4300:	d103      	bne.n	430a <acc+0xf6>
    4302:	4b15      	ldr	r3, [pc, #84]	; (4358 <acc+0x144>)
    4304:	0018      	movs	r0, r3
    4306:	4b18      	ldr	r3, [pc, #96]	; (4368 <acc+0x154>)
    4308:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
    430a:	2380      	movs	r3, #128	; 0x80
    430c:	005a      	lsls	r2, r3, #1
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <acc+0x148>)
    4310:	4811      	ldr	r0, [pc, #68]	; (4358 <acc+0x144>)
    4312:	0019      	movs	r1, r3
    4314:	4b15      	ldr	r3, [pc, #84]	; (436c <acc+0x158>)
    4316:	4798      	blx	r3
		break;
    4318:	e01a      	b.n	4350 <acc+0x13c>
		default:
			warning_led(3);
    431a:	230f      	movs	r3, #15
    431c:	18fb      	adds	r3, r7, r3
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
    4322:	e00f      	b.n	4344 <acc+0x130>
    4324:	2202      	movs	r2, #2
    4326:	2100      	movs	r1, #0
    4328:	2001      	movs	r0, #1
    432a:	4b18      	ldr	r3, [pc, #96]	; (438c <acc+0x178>)
    432c:	4798      	blx	r3
    432e:	4b18      	ldr	r3, [pc, #96]	; (4390 <acc+0x17c>)
    4330:	0018      	movs	r0, r3
    4332:	4b18      	ldr	r3, [pc, #96]	; (4394 <acc+0x180>)
    4334:	4798      	blx	r3
    4336:	230f      	movs	r3, #15
    4338:	18fb      	adds	r3, r7, r3
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	230f      	movs	r3, #15
    433e:	18fb      	adds	r3, r7, r3
    4340:	3201      	adds	r2, #1
    4342:	701a      	strb	r2, [r3, #0]
    4344:	230f      	movs	r3, #15
    4346:	18fb      	adds	r3, r7, r3
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	2b05      	cmp	r3, #5
    434c:	d9ea      	bls.n	4324 <acc+0x110>
		break;
    434e:	46c0      	nop			; (mov r8, r8)
	}
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b004      	add	sp, #16
    4356:	bdb0      	pop	{r4, r5, r7, pc}
    4358:	0003f300 	.word	0x0003f300
    435c:	20002554 	.word	0x20002554
    4360:	0000c841 	.word	0x0000c841
    4364:	000066bd 	.word	0x000066bd
    4368:	00006703 	.word	0x00006703
    436c:	00006751 	.word	0x00006751
    4370:	0000c8c5 	.word	0x0000c8c5
    4374:	0000cab0 	.word	0x0000cab0
    4378:	20002574 	.word	0x20002574
    437c:	20002594 	.word	0x20002594
    4380:	0000cab8 	.word	0x0000cab8
    4384:	200025b4 	.word	0x200025b4
    4388:	00005d0d 	.word	0x00005d0d
    438c:	00006d55 	.word	0x00006d55
    4390:	00000dac 	.word	0x00000dac
    4394:	000081a5 	.word	0x000081a5

00004398 <acces_ip>:

BYTE acces_ip(BYTE n_port)//True-1,F-0;
{
    4398:	b580      	push	{r7, lr}
    439a:	b082      	sub	sp, #8
    439c:	af00      	add	r7, sp, #0
    439e:	0002      	movs	r2, r0
    43a0:	1dfb      	adds	r3, r7, #7
    43a2:	701a      	strb	r2, [r3, #0]
	if		(SRAV(4, &cfg_1.access[n_port].ip[0], eth_sock[n_port+1].ip_addr)) {return 1;}
    43a4:	1dfb      	adds	r3, r7, #7
    43a6:	781a      	ldrb	r2, [r3, #0]
    43a8:	0013      	movs	r3, r2
    43aa:	00db      	lsls	r3, r3, #3
    43ac:	189b      	adds	r3, r3, r2
    43ae:	005b      	lsls	r3, r3, #1
    43b0:	3368      	adds	r3, #104	; 0x68
    43b2:	001a      	movs	r2, r3
    43b4:	4b32      	ldr	r3, [pc, #200]	; (4480 <acces_ip+0xe8>)
    43b6:	18d3      	adds	r3, r2, r3
    43b8:	1d19      	adds	r1, r3, #4
    43ba:	1dfb      	adds	r3, r7, #7
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	3301      	adds	r3, #1
    43c0:	4a30      	ldr	r2, [pc, #192]	; (4484 <acces_ip+0xec>)
    43c2:	435a      	muls	r2, r3
    43c4:	4b30      	ldr	r3, [pc, #192]	; (4488 <acces_ip+0xf0>)
    43c6:	18d3      	adds	r3, r2, r3
    43c8:	001a      	movs	r2, r3
    43ca:	2004      	movs	r0, #4
    43cc:	4b2f      	ldr	r3, [pc, #188]	; (448c <acces_ip+0xf4>)
    43ce:	4798      	blx	r3
    43d0:	1e03      	subs	r3, r0, #0
    43d2:	d001      	beq.n	43d8 <acces_ip+0x40>
    43d4:	2301      	movs	r3, #1
    43d6:	e04e      	b.n	4476 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[1], eth_sock[n_port+1].ip_addr)) {return 1;}
    43d8:	1dfb      	adds	r3, r7, #7
    43da:	781a      	ldrb	r2, [r3, #0]
    43dc:	0013      	movs	r3, r2
    43de:	00db      	lsls	r3, r3, #3
    43e0:	189b      	adds	r3, r3, r2
    43e2:	005b      	lsls	r3, r3, #1
    43e4:	336c      	adds	r3, #108	; 0x6c
    43e6:	001a      	movs	r2, r3
    43e8:	4b25      	ldr	r3, [pc, #148]	; (4480 <acces_ip+0xe8>)
    43ea:	18d3      	adds	r3, r2, r3
    43ec:	1d19      	adds	r1, r3, #4
    43ee:	1dfb      	adds	r3, r7, #7
    43f0:	781b      	ldrb	r3, [r3, #0]
    43f2:	3301      	adds	r3, #1
    43f4:	4a23      	ldr	r2, [pc, #140]	; (4484 <acces_ip+0xec>)
    43f6:	435a      	muls	r2, r3
    43f8:	4b23      	ldr	r3, [pc, #140]	; (4488 <acces_ip+0xf0>)
    43fa:	18d3      	adds	r3, r2, r3
    43fc:	001a      	movs	r2, r3
    43fe:	2004      	movs	r0, #4
    4400:	4b22      	ldr	r3, [pc, #136]	; (448c <acces_ip+0xf4>)
    4402:	4798      	blx	r3
    4404:	1e03      	subs	r3, r0, #0
    4406:	d001      	beq.n	440c <acces_ip+0x74>
    4408:	2301      	movs	r3, #1
    440a:	e034      	b.n	4476 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[2], eth_sock[n_port+1].ip_addr)) {return 1;}
    440c:	1dfb      	adds	r3, r7, #7
    440e:	781a      	ldrb	r2, [r3, #0]
    4410:	0013      	movs	r3, r2
    4412:	00db      	lsls	r3, r3, #3
    4414:	189b      	adds	r3, r3, r2
    4416:	005b      	lsls	r3, r3, #1
    4418:	3370      	adds	r3, #112	; 0x70
    441a:	001a      	movs	r2, r3
    441c:	4b18      	ldr	r3, [pc, #96]	; (4480 <acces_ip+0xe8>)
    441e:	18d3      	adds	r3, r2, r3
    4420:	1d19      	adds	r1, r3, #4
    4422:	1dfb      	adds	r3, r7, #7
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	3301      	adds	r3, #1
    4428:	4a16      	ldr	r2, [pc, #88]	; (4484 <acces_ip+0xec>)
    442a:	435a      	muls	r2, r3
    442c:	4b16      	ldr	r3, [pc, #88]	; (4488 <acces_ip+0xf0>)
    442e:	18d3      	adds	r3, r2, r3
    4430:	001a      	movs	r2, r3
    4432:	2004      	movs	r0, #4
    4434:	4b15      	ldr	r3, [pc, #84]	; (448c <acces_ip+0xf4>)
    4436:	4798      	blx	r3
    4438:	1e03      	subs	r3, r0, #0
    443a:	d001      	beq.n	4440 <acces_ip+0xa8>
    443c:	2301      	movs	r3, #1
    443e:	e01a      	b.n	4476 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[3], eth_sock[n_port+1].ip_addr)) {return 1;}
    4440:	1dfb      	adds	r3, r7, #7
    4442:	781a      	ldrb	r2, [r3, #0]
    4444:	0013      	movs	r3, r2
    4446:	00db      	lsls	r3, r3, #3
    4448:	189b      	adds	r3, r3, r2
    444a:	005b      	lsls	r3, r3, #1
    444c:	3374      	adds	r3, #116	; 0x74
    444e:	001a      	movs	r2, r3
    4450:	4b0b      	ldr	r3, [pc, #44]	; (4480 <acces_ip+0xe8>)
    4452:	18d3      	adds	r3, r2, r3
    4454:	1d19      	adds	r1, r3, #4
    4456:	1dfb      	adds	r3, r7, #7
    4458:	781b      	ldrb	r3, [r3, #0]
    445a:	3301      	adds	r3, #1
    445c:	4a09      	ldr	r2, [pc, #36]	; (4484 <acces_ip+0xec>)
    445e:	435a      	muls	r2, r3
    4460:	4b09      	ldr	r3, [pc, #36]	; (4488 <acces_ip+0xf0>)
    4462:	18d3      	adds	r3, r2, r3
    4464:	001a      	movs	r2, r3
    4466:	2004      	movs	r0, #4
    4468:	4b08      	ldr	r3, [pc, #32]	; (448c <acces_ip+0xf4>)
    446a:	4798      	blx	r3
    446c:	1e03      	subs	r3, r0, #0
    446e:	d001      	beq.n	4474 <acces_ip+0xdc>
    4470:	2301      	movs	r3, #1
    4472:	e000      	b.n	4476 <acces_ip+0xde>
	return 0;
    4474:	2300      	movs	r3, #0
}
    4476:	0018      	movs	r0, r3
    4478:	46bd      	mov	sp, r7
    447a:	b002      	add	sp, #8
    447c:	bd80      	pop	{r7, pc}
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	20003dc8 	.word	0x20003dc8
    4484:	000005e5 	.word	0x000005e5
    4488:	200005cc 	.word	0x200005cc
    448c:	00004923 	.word	0x00004923

00004490 <log_ch>:

void log_ch( )
{
    4490:	b580      	push	{r7, lr}
    4492:	4f21      	ldr	r7, [pc, #132]	; (4518 <log_ch+0x88>)
    4494:	44bd      	add	sp, r7
    4496:	af00      	add	r7, sp, #0
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    4498:	2380      	movs	r3, #128	; 0x80
    449a:	00da      	lsls	r2, r3, #3
    449c:	23b0      	movs	r3, #176	; 0xb0
    449e:	029b      	lsls	r3, r3, #10
    44a0:	0011      	movs	r1, r2
    44a2:	0018      	movs	r0, r3
    44a4:	4b1d      	ldr	r3, [pc, #116]	; (451c <log_ch+0x8c>)
    44a6:	4798      	blx	r3
    44a8:	1e03      	subs	r3, r0, #0
    44aa:	d02f      	beq.n	450c <log_ch+0x7c>
	
	LOG_DATA data;
	data.cell[0].ip				= 0x00000000;
    44ac:	4b1a      	ldr	r3, [pc, #104]	; (4518 <log_ch+0x88>)
    44ae:	2280      	movs	r2, #128	; 0x80
    44b0:	0152      	lsls	r2, r2, #5
    44b2:	4694      	mov	ip, r2
    44b4:	44bc      	add	ip, r7
    44b6:	4463      	add	r3, ip
    44b8:	2200      	movs	r2, #0
    44ba:	601a      	str	r2, [r3, #0]
	data.cell[0].times			= 0x00000000;
    44bc:	4b16      	ldr	r3, [pc, #88]	; (4518 <log_ch+0x88>)
    44be:	2280      	movs	r2, #128	; 0x80
    44c0:	0152      	lsls	r2, r2, #5
    44c2:	4694      	mov	ip, r2
    44c4:	44bc      	add	ip, r7
    44c6:	4463      	add	r3, ip
    44c8:	2200      	movs	r2, #0
    44ca:	605a      	str	r2, [r3, #4]
	data.cell[0].indx			= 0;
    44cc:	4b12      	ldr	r3, [pc, #72]	; (4518 <log_ch+0x88>)
    44ce:	2280      	movs	r2, #128	; 0x80
    44d0:	0152      	lsls	r2, r2, #5
    44d2:	4694      	mov	ip, r2
    44d4:	44bc      	add	ip, r7
    44d6:	4463      	add	r3, ip
    44d8:	2200      	movs	r2, #0
    44da:	609a      	str	r2, [r3, #8]
	data.cell[0].operat_code	= START;
    44dc:	4b0e      	ldr	r3, [pc, #56]	; (4518 <log_ch+0x88>)
    44de:	2280      	movs	r2, #128	; 0x80
    44e0:	0152      	lsls	r2, r2, #5
    44e2:	4694      	mov	ip, r2
    44e4:	44bc      	add	ip, r7
    44e6:	4463      	add	r3, ip
    44e8:	2204      	movs	r2, #4
    44ea:	819a      	strh	r2, [r3, #12]
	data.cell[0].version		= VERSION_B;
    44ec:	4b0a      	ldr	r3, [pc, #40]	; (4518 <log_ch+0x88>)
    44ee:	2280      	movs	r2, #128	; 0x80
    44f0:	0152      	lsls	r2, r2, #5
    44f2:	4694      	mov	ip, r2
    44f4:	44bc      	add	ip, r7
    44f6:	4463      	add	r3, ip
    44f8:	2204      	movs	r2, #4
    44fa:	81da      	strh	r2, [r3, #14]
	flash_write(LOGS_ADDR ,&data.cell[0] , 16);
    44fc:	0039      	movs	r1, r7
    44fe:	23b0      	movs	r3, #176	; 0xb0
    4500:	029b      	lsls	r3, r3, #10
    4502:	2210      	movs	r2, #16
    4504:	0018      	movs	r0, r3
    4506:	4b06      	ldr	r3, [pc, #24]	; (4520 <log_ch+0x90>)
    4508:	4798      	blx	r3
    450a:	e000      	b.n	450e <log_ch+0x7e>
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    450c:	46c0      	nop			; (mov r8, r8)
}
    450e:	46bd      	mov	sp, r7
    4510:	2380      	movs	r3, #128	; 0x80
    4512:	015b      	lsls	r3, r3, #5
    4514:	449d      	add	sp, r3
    4516:	bd80      	pop	{r7, pc}
    4518:	fffff000 	.word	0xfffff000
    451c:	000066bd 	.word	0x000066bd
    4520:	00006751 	.word	0x00006751

00004524 <log_safe>:

void log_safe(BYTE actv_user_id, DWORD ip, DWORD times, WORD operat_code)
{
    4524:	b580      	push	{r7, lr}
    4526:	4f69      	ldr	r7, [pc, #420]	; (46cc <log_safe+0x1a8>)
    4528:	44bd      	add	sp, r7
    452a:	af00      	add	r7, sp, #0
    452c:	60b9      	str	r1, [r7, #8]
    452e:	607a      	str	r2, [r7, #4]
    4530:	0019      	movs	r1, r3
    4532:	4b67      	ldr	r3, [pc, #412]	; (46d0 <log_safe+0x1ac>)
    4534:	4a67      	ldr	r2, [pc, #412]	; (46d4 <log_safe+0x1b0>)
    4536:	4694      	mov	ip, r2
    4538:	44bc      	add	ip, r7
    453a:	4463      	add	r3, ip
    453c:	1c02      	adds	r2, r0, #0
    453e:	701a      	strb	r2, [r3, #0]
    4540:	4b65      	ldr	r3, [pc, #404]	; (46d8 <log_safe+0x1b4>)
    4542:	4a64      	ldr	r2, [pc, #400]	; (46d4 <log_safe+0x1b0>)
    4544:	4694      	mov	ip, r2
    4546:	44bc      	add	ip, r7
    4548:	4463      	add	r3, ip
    454a:	1c0a      	adds	r2, r1, #0
    454c:	801a      	strh	r2, [r3, #0]
	LOG_DATA data;
	flash_read(LOGS_ADDR, &data, 4096);
    454e:	2380      	movs	r3, #128	; 0x80
    4550:	015a      	lsls	r2, r3, #5
    4552:	2310      	movs	r3, #16
    4554:	18f9      	adds	r1, r7, r3
    4556:	23b0      	movs	r3, #176	; 0xb0
    4558:	029b      	lsls	r3, r3, #10
    455a:	0018      	movs	r0, r3
    455c:	4b5f      	ldr	r3, [pc, #380]	; (46dc <log_safe+0x1b8>)
    455e:	4798      	blx	r3
	BYTE ptr = 1;
    4560:	4b5f      	ldr	r3, [pc, #380]	; (46e0 <log_safe+0x1bc>)
    4562:	18fb      	adds	r3, r7, r3
    4564:	2201      	movs	r2, #1
    4566:	701a      	strb	r2, [r3, #0]
	BYTE last_ptr = 0;
    4568:	4b5e      	ldr	r3, [pc, #376]	; (46e4 <log_safe+0x1c0>)
    456a:	18fb      	adds	r3, r7, r3
    456c:	2200      	movs	r2, #0
    456e:	701a      	strb	r2, [r3, #0]
	
	while(1)	
	{
		if (ptr == CELLS)
			{ptr = 0; break;}//OVF
		if ((data.cell[last_ptr].indx + 1) != data.cell[ptr].indx) 
    4570:	4b5c      	ldr	r3, [pc, #368]	; (46e4 <log_safe+0x1c0>)
    4572:	18fb      	adds	r3, r7, r3
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	4a5c      	ldr	r2, [pc, #368]	; (46e8 <log_safe+0x1c4>)
    4578:	4956      	ldr	r1, [pc, #344]	; (46d4 <log_safe+0x1b0>)
    457a:	468c      	mov	ip, r1
    457c:	44bc      	add	ip, r7
    457e:	4462      	add	r2, ip
    4580:	011b      	lsls	r3, r3, #4
    4582:	18d3      	adds	r3, r2, r3
    4584:	3308      	adds	r3, #8
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	1c5a      	adds	r2, r3, #1
    458a:	4b55      	ldr	r3, [pc, #340]	; (46e0 <log_safe+0x1bc>)
    458c:	18fb      	adds	r3, r7, r3
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	4955      	ldr	r1, [pc, #340]	; (46e8 <log_safe+0x1c4>)
    4592:	4850      	ldr	r0, [pc, #320]	; (46d4 <log_safe+0x1b0>)
    4594:	4684      	mov	ip, r0
    4596:	44bc      	add	ip, r7
    4598:	4461      	add	r1, ip
    459a:	011b      	lsls	r3, r3, #4
    459c:	18cb      	adds	r3, r1, r3
    459e:	3308      	adds	r3, #8
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	429a      	cmp	r2, r3
    45a4:	d10e      	bne.n	45c4 <log_safe+0xa0>
			{ break;}
		last_ptr++;	ptr++;	
    45a6:	4b4f      	ldr	r3, [pc, #316]	; (46e4 <log_safe+0x1c0>)
    45a8:	18fb      	adds	r3, r7, r3
    45aa:	781a      	ldrb	r2, [r3, #0]
    45ac:	4b4d      	ldr	r3, [pc, #308]	; (46e4 <log_safe+0x1c0>)
    45ae:	18fb      	adds	r3, r7, r3
    45b0:	3201      	adds	r2, #1
    45b2:	701a      	strb	r2, [r3, #0]
    45b4:	4b4a      	ldr	r3, [pc, #296]	; (46e0 <log_safe+0x1bc>)
    45b6:	18fb      	adds	r3, r7, r3
    45b8:	781a      	ldrb	r2, [r3, #0]
    45ba:	4b49      	ldr	r3, [pc, #292]	; (46e0 <log_safe+0x1bc>)
    45bc:	18fb      	adds	r3, r7, r3
    45be:	3201      	adds	r2, #1
    45c0:	701a      	strb	r2, [r3, #0]
		if (ptr == CELLS)
    45c2:	e7d5      	b.n	4570 <log_safe+0x4c>
			{ break;}
    45c4:	46c0      	nop			; (mov r8, r8)
	}
	data.cell[ptr].ip			= ip;
    45c6:	4b46      	ldr	r3, [pc, #280]	; (46e0 <log_safe+0x1bc>)
    45c8:	18fb      	adds	r3, r7, r3
    45ca:	781a      	ldrb	r2, [r3, #0]
    45cc:	4b46      	ldr	r3, [pc, #280]	; (46e8 <log_safe+0x1c4>)
    45ce:	4941      	ldr	r1, [pc, #260]	; (46d4 <log_safe+0x1b0>)
    45d0:	468c      	mov	ip, r1
    45d2:	44bc      	add	ip, r7
    45d4:	4463      	add	r3, ip
    45d6:	0112      	lsls	r2, r2, #4
    45d8:	68b9      	ldr	r1, [r7, #8]
    45da:	50d1      	str	r1, [r2, r3]
	data.cell[ptr].times		= times;
    45dc:	4b40      	ldr	r3, [pc, #256]	; (46e0 <log_safe+0x1bc>)
    45de:	18fb      	adds	r3, r7, r3
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	4a41      	ldr	r2, [pc, #260]	; (46e8 <log_safe+0x1c4>)
    45e4:	493b      	ldr	r1, [pc, #236]	; (46d4 <log_safe+0x1b0>)
    45e6:	468c      	mov	ip, r1
    45e8:	44bc      	add	ip, r7
    45ea:	4462      	add	r2, ip
    45ec:	011b      	lsls	r3, r3, #4
    45ee:	18d3      	adds	r3, r2, r3
    45f0:	3304      	adds	r3, #4
    45f2:	687a      	ldr	r2, [r7, #4]
    45f4:	601a      	str	r2, [r3, #0]
	data.cell[ptr].indx			= data.cell[last_ptr].indx + 1;
    45f6:	4b3a      	ldr	r3, [pc, #232]	; (46e0 <log_safe+0x1bc>)
    45f8:	18fb      	adds	r3, r7, r3
    45fa:	7818      	ldrb	r0, [r3, #0]
    45fc:	4b39      	ldr	r3, [pc, #228]	; (46e4 <log_safe+0x1c0>)
    45fe:	18fb      	adds	r3, r7, r3
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	4a39      	ldr	r2, [pc, #228]	; (46e8 <log_safe+0x1c4>)
    4604:	4933      	ldr	r1, [pc, #204]	; (46d4 <log_safe+0x1b0>)
    4606:	468c      	mov	ip, r1
    4608:	44bc      	add	ip, r7
    460a:	4462      	add	r2, ip
    460c:	011b      	lsls	r3, r3, #4
    460e:	18d3      	adds	r3, r2, r3
    4610:	3308      	adds	r3, #8
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	1c5a      	adds	r2, r3, #1
    4616:	4b34      	ldr	r3, [pc, #208]	; (46e8 <log_safe+0x1c4>)
    4618:	492e      	ldr	r1, [pc, #184]	; (46d4 <log_safe+0x1b0>)
    461a:	1879      	adds	r1, r7, r1
    461c:	18c9      	adds	r1, r1, r3
    461e:	0103      	lsls	r3, r0, #4
    4620:	18cb      	adds	r3, r1, r3
    4622:	3308      	adds	r3, #8
    4624:	601a      	str	r2, [r3, #0]
	data.cell[ptr].operat_code	= operat_code;
    4626:	4b2e      	ldr	r3, [pc, #184]	; (46e0 <log_safe+0x1bc>)
    4628:	18fb      	adds	r3, r7, r3
    462a:	781b      	ldrb	r3, [r3, #0]
    462c:	4a2e      	ldr	r2, [pc, #184]	; (46e8 <log_safe+0x1c4>)
    462e:	4929      	ldr	r1, [pc, #164]	; (46d4 <log_safe+0x1b0>)
    4630:	468c      	mov	ip, r1
    4632:	44bc      	add	ip, r7
    4634:	4462      	add	r2, ip
    4636:	011b      	lsls	r3, r3, #4
    4638:	18d3      	adds	r3, r2, r3
    463a:	330c      	adds	r3, #12
    463c:	4a26      	ldr	r2, [pc, #152]	; (46d8 <log_safe+0x1b4>)
    463e:	4925      	ldr	r1, [pc, #148]	; (46d4 <log_safe+0x1b0>)
    4640:	468c      	mov	ip, r1
    4642:	44bc      	add	ip, r7
    4644:	4462      	add	r2, ip
    4646:	8812      	ldrh	r2, [r2, #0]
    4648:	801a      	strh	r2, [r3, #0]
	data.cell[ptr].version		= VERSION_B;
    464a:	4b25      	ldr	r3, [pc, #148]	; (46e0 <log_safe+0x1bc>)
    464c:	18fb      	adds	r3, r7, r3
    464e:	781b      	ldrb	r3, [r3, #0]
    4650:	4a25      	ldr	r2, [pc, #148]	; (46e8 <log_safe+0x1c4>)
    4652:	4920      	ldr	r1, [pc, #128]	; (46d4 <log_safe+0x1b0>)
    4654:	468c      	mov	ip, r1
    4656:	44bc      	add	ip, r7
    4658:	4462      	add	r2, ip
    465a:	011b      	lsls	r3, r3, #4
    465c:	18d3      	adds	r3, r2, r3
    465e:	330e      	adds	r3, #14
    4660:	2204      	movs	r2, #4
    4662:	801a      	strh	r2, [r3, #0]
	
	dst = LOGS_ADDR + (ptr * CELL);
    4664:	4b1e      	ldr	r3, [pc, #120]	; (46e0 <log_safe+0x1bc>)
    4666:	18fb      	adds	r3, r7, r3
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	011b      	lsls	r3, r3, #4
    466c:	22b0      	movs	r2, #176	; 0xb0
    466e:	0292      	lsls	r2, r2, #10
    4670:	4694      	mov	ip, r2
    4672:	4463      	add	r3, ip
    4674:	4a1d      	ldr	r2, [pc, #116]	; (46ec <log_safe+0x1c8>)
    4676:	18ba      	adds	r2, r7, r2
    4678:	6013      	str	r3, [r2, #0]
		
	if ((ptr % 16) == 0) 
    467a:	4b19      	ldr	r3, [pc, #100]	; (46e0 <log_safe+0x1bc>)
    467c:	18fb      	adds	r3, r7, r3
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	220f      	movs	r2, #15
    4682:	4013      	ands	r3, r2
    4684:	b2db      	uxtb	r3, r3
    4686:	2b00      	cmp	r3, #0
    4688:	d10c      	bne.n	46a4 <log_safe+0x180>
	{
		flash_erase_row(LOGS_ADDR + ((ptr/CELL) * BLOCK));
    468a:	4b15      	ldr	r3, [pc, #84]	; (46e0 <log_safe+0x1bc>)
    468c:	18fb      	adds	r3, r7, r3
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	091b      	lsrs	r3, r3, #4
    4692:	b2db      	uxtb	r3, r3
    4694:	021b      	lsls	r3, r3, #8
    4696:	22b0      	movs	r2, #176	; 0xb0
    4698:	0292      	lsls	r2, r2, #10
    469a:	4694      	mov	ip, r2
    469c:	4463      	add	r3, ip
    469e:	0018      	movs	r0, r3
    46a0:	4b13      	ldr	r3, [pc, #76]	; (46f0 <log_safe+0x1cc>)
    46a2:	4798      	blx	r3
	} 
	flash_write(dst, &data.cell[ptr].ip, 16);
    46a4:	4b11      	ldr	r3, [pc, #68]	; (46ec <log_safe+0x1c8>)
    46a6:	18fb      	adds	r3, r7, r3
    46a8:	6818      	ldr	r0, [r3, #0]
    46aa:	4b0d      	ldr	r3, [pc, #52]	; (46e0 <log_safe+0x1bc>)
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	2210      	movs	r2, #16
    46b2:	18ba      	adds	r2, r7, r2
    46b4:	011b      	lsls	r3, r3, #4
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	2210      	movs	r2, #16
    46ba:	0019      	movs	r1, r3
    46bc:	4b0d      	ldr	r3, [pc, #52]	; (46f4 <log_safe+0x1d0>)
    46be:	4798      	blx	r3
}
    46c0:	46c0      	nop			; (mov r8, r8)
    46c2:	46bd      	mov	sp, r7
    46c4:	4b03      	ldr	r3, [pc, #12]	; (46d4 <log_safe+0x1b0>)
    46c6:	449d      	add	sp, r3
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	ffffefe8 	.word	0xffffefe8
    46d0:	ffffeff7 	.word	0xffffeff7
    46d4:	00001018 	.word	0x00001018
    46d8:	ffffeff4 	.word	0xffffeff4
    46dc:	0000690d 	.word	0x0000690d
    46e0:	00001017 	.word	0x00001017
    46e4:	00001016 	.word	0x00001016
    46e8:	ffffeff8 	.word	0xffffeff8
    46ec:	00001010 	.word	0x00001010
    46f0:	00006995 	.word	0x00006995
    46f4:	00006751 	.word	0x00006751

000046f8 <log_clear>:

void log_clear()
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b082      	sub	sp, #8
    46fc:	af00      	add	r7, sp, #0
	for (BYTE i = 0; i < 16; i++)	
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	2200      	movs	r2, #0
    4702:	701a      	strb	r2, [r3, #0]
    4704:	e01c      	b.n	4740 <log_clear+0x48>
	{
		if(!flash_empty(LOGS_ADDR + (i * 256), 256))	
    4706:	1dfb      	adds	r3, r7, #7
    4708:	781b      	ldrb	r3, [r3, #0]
    470a:	021b      	lsls	r3, r3, #8
    470c:	22b0      	movs	r2, #176	; 0xb0
    470e:	0292      	lsls	r2, r2, #10
    4710:	189a      	adds	r2, r3, r2
    4712:	2380      	movs	r3, #128	; 0x80
    4714:	005b      	lsls	r3, r3, #1
    4716:	0019      	movs	r1, r3
    4718:	0010      	movs	r0, r2
    471a:	4b0d      	ldr	r3, [pc, #52]	; (4750 <log_clear+0x58>)
    471c:	4798      	blx	r3
    471e:	1e03      	subs	r3, r0, #0
    4720:	d109      	bne.n	4736 <log_clear+0x3e>
		{flash_erase_page(LOGS_ADDR + (i * 256));}	
    4722:	1dfb      	adds	r3, r7, #7
    4724:	781b      	ldrb	r3, [r3, #0]
    4726:	021b      	lsls	r3, r3, #8
    4728:	22b0      	movs	r2, #176	; 0xb0
    472a:	0292      	lsls	r2, r2, #10
    472c:	4694      	mov	ip, r2
    472e:	4463      	add	r3, ip
    4730:	0018      	movs	r0, r3
    4732:	4b08      	ldr	r3, [pc, #32]	; (4754 <log_clear+0x5c>)
    4734:	4798      	blx	r3
	for (BYTE i = 0; i < 16; i++)	
    4736:	1dfb      	adds	r3, r7, #7
    4738:	781a      	ldrb	r2, [r3, #0]
    473a:	1dfb      	adds	r3, r7, #7
    473c:	3201      	adds	r2, #1
    473e:	701a      	strb	r2, [r3, #0]
    4740:	1dfb      	adds	r3, r7, #7
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	2b0f      	cmp	r3, #15
    4746:	d9de      	bls.n	4706 <log_clear+0xe>
	}
}
    4748:	46c0      	nop			; (mov r8, r8)
    474a:	46bd      	mov	sp, r7
    474c:	b002      	add	sp, #8
    474e:	bd80      	pop	{r7, pc}
    4750:	000066bd 	.word	0x000066bd
    4754:	00006703 	.word	0x00006703

00004758 <random_gen>:
#include "def.h"

void random_gen(BYTE size,BYTE* ptr)//size, place for write
{
    4758:	b590      	push	{r4, r7, lr}
    475a:	b085      	sub	sp, #20
    475c:	af00      	add	r7, sp, #0
    475e:	0002      	movs	r2, r0
    4760:	6039      	str	r1, [r7, #0]
    4762:	1dfb      	adds	r3, r7, #7
    4764:	701a      	strb	r2, [r3, #0]
	BYTE tc3 = 0;
    4766:	230e      	movs	r3, #14
    4768:	18fb      	adds	r3, r7, r3
    476a:	2200      	movs	r2, #0
    476c:	701a      	strb	r2, [r3, #0]
	for (BYTE i = 0; i < size; i++) 	{*ptr++ = ((tc3_cnt + 3) ^ (i + 1)) % 0xFF;}
    476e:	230f      	movs	r3, #15
    4770:	18fb      	adds	r3, r7, r3
    4772:	2200      	movs	r2, #0
    4774:	701a      	strb	r2, [r3, #0]
    4776:	e018      	b.n	47aa <random_gen+0x52>
    4778:	683c      	ldr	r4, [r7, #0]
    477a:	1c63      	adds	r3, r4, #1
    477c:	603b      	str	r3, [r7, #0]
    477e:	4b10      	ldr	r3, [pc, #64]	; (47c0 <random_gen+0x68>)
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	3303      	adds	r3, #3
    4784:	220f      	movs	r2, #15
    4786:	18ba      	adds	r2, r7, r2
    4788:	7812      	ldrb	r2, [r2, #0]
    478a:	3201      	adds	r2, #1
    478c:	405a      	eors	r2, r3
    478e:	4b0d      	ldr	r3, [pc, #52]	; (47c4 <random_gen+0x6c>)
    4790:	21ff      	movs	r1, #255	; 0xff
    4792:	0010      	movs	r0, r2
    4794:	4798      	blx	r3
    4796:	000b      	movs	r3, r1
    4798:	b2db      	uxtb	r3, r3
    479a:	7023      	strb	r3, [r4, #0]
    479c:	230f      	movs	r3, #15
    479e:	18fb      	adds	r3, r7, r3
    47a0:	781a      	ldrb	r2, [r3, #0]
    47a2:	230f      	movs	r3, #15
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	3201      	adds	r2, #1
    47a8:	701a      	strb	r2, [r3, #0]
    47aa:	230f      	movs	r3, #15
    47ac:	18fa      	adds	r2, r7, r3
    47ae:	1dfb      	adds	r3, r7, #7
    47b0:	7812      	ldrb	r2, [r2, #0]
    47b2:	781b      	ldrb	r3, [r3, #0]
    47b4:	429a      	cmp	r2, r3
    47b6:	d3df      	bcc.n	4778 <random_gen+0x20>
}
    47b8:	46c0      	nop			; (mov r8, r8)
    47ba:	46bd      	mov	sp, r7
    47bc:	b005      	add	sp, #20
    47be:	bd90      	pop	{r4, r7, pc}
    47c0:	2000046c 	.word	0x2000046c
    47c4:	0000b15d 	.word	0x0000b15d

000047c8 <num_to_byte>:
BYTE num_to_byte(DWORD num, BYTE len, BYTE* dst, BYTE side)//write number as bite line
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b086      	sub	sp, #24
    47cc:	af00      	add	r7, sp, #0
    47ce:	60f8      	str	r0, [r7, #12]
    47d0:	0008      	movs	r0, r1
    47d2:	607a      	str	r2, [r7, #4]
    47d4:	0019      	movs	r1, r3
    47d6:	230b      	movs	r3, #11
    47d8:	18fb      	adds	r3, r7, r3
    47da:	1c02      	adds	r2, r0, #0
    47dc:	701a      	strb	r2, [r3, #0]
    47de:	230a      	movs	r3, #10
    47e0:	18fb      	adds	r3, r7, r3
    47e2:	1c0a      	adds	r2, r1, #0
    47e4:	701a      	strb	r2, [r3, #0]
	if((len != W_LEN)    &&  (len != DW_LEN))         {return LEN_ERR;}
    47e6:	230b      	movs	r3, #11
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	2b02      	cmp	r3, #2
    47ee:	d006      	beq.n	47fe <num_to_byte+0x36>
    47f0:	230b      	movs	r3, #11
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	781b      	ldrb	r3, [r3, #0]
    47f6:	2b04      	cmp	r3, #4
    47f8:	d001      	beq.n	47fe <num_to_byte+0x36>
    47fa:	2365      	movs	r3, #101	; 0x65
    47fc:	e042      	b.n	4884 <num_to_byte+0xbc>
	if((side != L_SIDE)  &&  (side != R_SIDE))     {return SIDE_ERR;}
    47fe:	230a      	movs	r3, #10
    4800:	18fb      	adds	r3, r7, r3
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	2b01      	cmp	r3, #1
    4806:	d006      	beq.n	4816 <num_to_byte+0x4e>
    4808:	230a      	movs	r3, #10
    480a:	18fb      	adds	r3, r7, r3
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	2b00      	cmp	r3, #0
    4810:	d001      	beq.n	4816 <num_to_byte+0x4e>
    4812:	2366      	movs	r3, #102	; 0x66
    4814:	e036      	b.n	4884 <num_to_byte+0xbc>

	for (BYTE i = 0; i < len; i++)
    4816:	2317      	movs	r3, #23
    4818:	18fb      	adds	r3, r7, r3
    481a:	2200      	movs	r2, #0
    481c:	701a      	strb	r2, [r3, #0]
    481e:	e028      	b.n	4872 <num_to_byte+0xaa>
	{
		if(side)    {*dst = num >> (( 8 * (len - 1 ) ) - ( i * 8 ));}
    4820:	230a      	movs	r3, #10
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	2b00      	cmp	r3, #0
    4828:	d00f      	beq.n	484a <num_to_byte+0x82>
    482a:	230b      	movs	r3, #11
    482c:	18fb      	adds	r3, r7, r3
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	1e5a      	subs	r2, r3, #1
    4832:	2317      	movs	r3, #23
    4834:	18fb      	adds	r3, r7, r3
    4836:	781b      	ldrb	r3, [r3, #0]
    4838:	1ad3      	subs	r3, r2, r3
    483a:	00db      	lsls	r3, r3, #3
    483c:	68fa      	ldr	r2, [r7, #12]
    483e:	40da      	lsrs	r2, r3
    4840:	0013      	movs	r3, r2
    4842:	b2da      	uxtb	r2, r3
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	701a      	strb	r2, [r3, #0]
    4848:	e009      	b.n	485e <num_to_byte+0x96>
		else        {*dst = num >> ( i * 8 );}
    484a:	2317      	movs	r3, #23
    484c:	18fb      	adds	r3, r7, r3
    484e:	781b      	ldrb	r3, [r3, #0]
    4850:	00db      	lsls	r3, r3, #3
    4852:	68fa      	ldr	r2, [r7, #12]
    4854:	40da      	lsrs	r2, r3
    4856:	0013      	movs	r3, r2
    4858:	b2da      	uxtb	r2, r3
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	701a      	strb	r2, [r3, #0]
		dst++;
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	3301      	adds	r3, #1
    4862:	607b      	str	r3, [r7, #4]
	for (BYTE i = 0; i < len; i++)
    4864:	2317      	movs	r3, #23
    4866:	18fb      	adds	r3, r7, r3
    4868:	781a      	ldrb	r2, [r3, #0]
    486a:	2317      	movs	r3, #23
    486c:	18fb      	adds	r3, r7, r3
    486e:	3201      	adds	r2, #1
    4870:	701a      	strb	r2, [r3, #0]
    4872:	2317      	movs	r3, #23
    4874:	18fa      	adds	r2, r7, r3
    4876:	230b      	movs	r3, #11
    4878:	18fb      	adds	r3, r7, r3
    487a:	7812      	ldrb	r2, [r2, #0]
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	429a      	cmp	r2, r3
    4880:	d3ce      	bcc.n	4820 <num_to_byte+0x58>
	}
	return SUCCESS;
    4882:	2300      	movs	r3, #0
}
    4884:	0018      	movs	r0, r3
    4886:	46bd      	mov	sp, r7
    4888:	b006      	add	sp, #24
    488a:	bd80      	pop	{r7, pc}

0000488c <num_aus_byte>:
DWORD num_aus_byte(BYTE len, BYTE* src, BYTE side)//read bite line as number
{
    488c:	b580      	push	{r7, lr}
    488e:	b084      	sub	sp, #16
    4890:	af00      	add	r7, sp, #0
    4892:	6039      	str	r1, [r7, #0]
    4894:	0011      	movs	r1, r2
    4896:	1dfb      	adds	r3, r7, #7
    4898:	1c02      	adds	r2, r0, #0
    489a:	701a      	strb	r2, [r3, #0]
    489c:	1dbb      	adds	r3, r7, #6
    489e:	1c0a      	adds	r2, r1, #0
    48a0:	701a      	strb	r2, [r3, #0]
	DWORD num = 0;
    48a2:	2300      	movs	r3, #0
    48a4:	60fb      	str	r3, [r7, #12]
	for (BYTE i = 0; i < len;i++)
    48a6:	230b      	movs	r3, #11
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	2200      	movs	r2, #0
    48ac:	701a      	strb	r2, [r3, #0]
    48ae:	e02c      	b.n	490a <num_aus_byte+0x7e>
	{
		if(side)    {num += *src << (((len - 1) * 8) - (i * 8));}
    48b0:	1dbb      	adds	r3, r7, #6
    48b2:	781b      	ldrb	r3, [r3, #0]
    48b4:	2b00      	cmp	r3, #0
    48b6:	d011      	beq.n	48dc <num_aus_byte+0x50>
    48b8:	683b      	ldr	r3, [r7, #0]
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	0019      	movs	r1, r3
    48be:	1dfb      	adds	r3, r7, #7
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	1e5a      	subs	r2, r3, #1
    48c4:	230b      	movs	r3, #11
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	1ad3      	subs	r3, r2, r3
    48cc:	00db      	lsls	r3, r3, #3
    48ce:	4099      	lsls	r1, r3
    48d0:	000b      	movs	r3, r1
    48d2:	001a      	movs	r2, r3
    48d4:	68fb      	ldr	r3, [r7, #12]
    48d6:	189b      	adds	r3, r3, r2
    48d8:	60fb      	str	r3, [r7, #12]
    48da:	e00c      	b.n	48f6 <num_aus_byte+0x6a>
		else        {num += *src << ( i * 8 );}
    48dc:	683b      	ldr	r3, [r7, #0]
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	001a      	movs	r2, r3
    48e2:	230b      	movs	r3, #11
    48e4:	18fb      	adds	r3, r7, r3
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	00db      	lsls	r3, r3, #3
    48ea:	409a      	lsls	r2, r3
    48ec:	0013      	movs	r3, r2
    48ee:	001a      	movs	r2, r3
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	189b      	adds	r3, r3, r2
    48f4:	60fb      	str	r3, [r7, #12]
		src++;
    48f6:	683b      	ldr	r3, [r7, #0]
    48f8:	3301      	adds	r3, #1
    48fa:	603b      	str	r3, [r7, #0]
	for (BYTE i = 0; i < len;i++)
    48fc:	230b      	movs	r3, #11
    48fe:	18fb      	adds	r3, r7, r3
    4900:	781a      	ldrb	r2, [r3, #0]
    4902:	230b      	movs	r3, #11
    4904:	18fb      	adds	r3, r7, r3
    4906:	3201      	adds	r2, #1
    4908:	701a      	strb	r2, [r3, #0]
    490a:	230b      	movs	r3, #11
    490c:	18fa      	adds	r2, r7, r3
    490e:	1dfb      	adds	r3, r7, #7
    4910:	7812      	ldrb	r2, [r2, #0]
    4912:	781b      	ldrb	r3, [r3, #0]
    4914:	429a      	cmp	r2, r3
    4916:	d3cb      	bcc.n	48b0 <num_aus_byte+0x24>
	}
	return num;
    4918:	68fb      	ldr	r3, [r7, #12]
}
    491a:	0018      	movs	r0, r3
    491c:	46bd      	mov	sp, r7
    491e:	b004      	add	sp, #16
    4920:	bd80      	pop	{r7, pc}

00004922 <SRAV>:

BYTE SRAV(BYTE len, BYTE* buf1, BYTE* buf2)//True-1,F-0;
{	for(BYTE i = 0; i < len; i++)	
    4922:	b580      	push	{r7, lr}
    4924:	b086      	sub	sp, #24
    4926:	af00      	add	r7, sp, #0
    4928:	60b9      	str	r1, [r7, #8]
    492a:	607a      	str	r2, [r7, #4]
    492c:	230f      	movs	r3, #15
    492e:	18fb      	adds	r3, r7, r3
    4930:	1c02      	adds	r2, r0, #0
    4932:	701a      	strb	r2, [r3, #0]
    4934:	2317      	movs	r3, #23
    4936:	18fb      	adds	r3, r7, r3
    4938:	2200      	movs	r2, #0
    493a:	701a      	strb	r2, [r3, #0]
    493c:	e012      	b.n	4964 <SRAV+0x42>
	{	
		if(*buf1++ != *buf2++) 		{return FALSE;}	
    493e:	68bb      	ldr	r3, [r7, #8]
    4940:	1c5a      	adds	r2, r3, #1
    4942:	60ba      	str	r2, [r7, #8]
    4944:	781a      	ldrb	r2, [r3, #0]
    4946:	687b      	ldr	r3, [r7, #4]
    4948:	1c59      	adds	r1, r3, #1
    494a:	6079      	str	r1, [r7, #4]
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	429a      	cmp	r2, r3
    4950:	d001      	beq.n	4956 <SRAV+0x34>
    4952:	2300      	movs	r3, #0
    4954:	e00f      	b.n	4976 <SRAV+0x54>
{	for(BYTE i = 0; i < len; i++)	
    4956:	2317      	movs	r3, #23
    4958:	18fb      	adds	r3, r7, r3
    495a:	781a      	ldrb	r2, [r3, #0]
    495c:	2317      	movs	r3, #23
    495e:	18fb      	adds	r3, r7, r3
    4960:	3201      	adds	r2, #1
    4962:	701a      	strb	r2, [r3, #0]
    4964:	2317      	movs	r3, #23
    4966:	18fa      	adds	r2, r7, r3
    4968:	230f      	movs	r3, #15
    496a:	18fb      	adds	r3, r7, r3
    496c:	7812      	ldrb	r2, [r2, #0]
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	429a      	cmp	r2, r3
    4972:	d3e4      	bcc.n	493e <SRAV+0x1c>
	}
	return TRUE;	
    4974:	2301      	movs	r3, #1
    4976:	0018      	movs	r0, r3
    4978:	46bd      	mov	sp, r7
    497a:	b006      	add	sp, #24
    497c:	bd80      	pop	{r7, pc}
    497e:	46c0      	nop			; (mov r8, r8)

00004980 <cmd_process>:

#define CM2_STATUS_PACK 0x02
#define UID_STATUS_PACK 0x8002

void cmd_process(void)
{
    4980:	b580      	push	{r7, lr}
    4982:	af00      	add	r7, sp, #0
	cmd_common_process ();
    4984:	f000 f805 	bl	4992 <cmd_common_process>
	cmd_usart_process ();
    4988:	f000 ff12 	bl	57b0 <cmd_usart_process>
}
    498c:	46c0      	nop			; (mov r8, r8)
    498e:	46bd      	mov	sp, r7
    4990:	bd80      	pop	{r7, pc}

00004992 <cmd_common_process>:


void cmd_common_process (void)
{
    4992:	b590      	push	{r4, r7, lr}
    4994:	b085      	sub	sp, #20
    4996:	af00      	add	r7, sp, #0
	WORD	size	= 0;
    4998:	230e      	movs	r3, #14
    499a:	18fb      	adds	r3, r7, r3
    499c:	2200      	movs	r2, #0
    499e:	801a      	strh	r2, [r3, #0]
	WORD	addr	= 0;
    49a0:	1d3b      	adds	r3, r7, #4
    49a2:	2200      	movs	r2, #0
    49a4:	801a      	strh	r2, [r3, #0]
	WORD	cnt		= 0;
    49a6:	230c      	movs	r3, #12
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	2200      	movs	r2, #0
    49ac:	801a      	strh	r2, [r3, #0]
	WORD	wn		= 0;
    49ae:	230a      	movs	r3, #10
    49b0:	18fb      	adds	r3, r7, r3
    49b2:	2200      	movs	r2, #0
    49b4:	801a      	strh	r2, [r3, #0]
	WORD	cs		= 0;
    49b6:	1cbb      	adds	r3, r7, #2
    49b8:	2200      	movs	r2, #0
    49ba:	801a      	strh	r2, [r3, #0]
	BYTE	i		= 0;
    49bc:	2309      	movs	r3, #9
    49be:	18fb      	adds	r3, r7, r3
    49c0:	2200      	movs	r2, #0
    49c2:	701a      	strb	r2, [r3, #0]
	WORD	ixo		= 0;
    49c4:	003b      	movs	r3, r7
    49c6:	2200      	movs	r2, #0
    49c8:	801a      	strh	r2, [r3, #0]
	
	if (log_stat == 1)	
    49ca:	4b96      	ldr	r3, [pc, #600]	; (4c24 <cmd_common_process+0x292>)
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	b2db      	uxtb	r3, r3
    49d0:	2b01      	cmp	r3, #1
    49d2:	d107      	bne.n	49e4 <cmd_common_process+0x52>
	{
		if (loggin_timeout > (300 * 10000)) 
    49d4:	4b94      	ldr	r3, [pc, #592]	; (4c28 <cmd_common_process+0x296>)
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	4a94      	ldr	r2, [pc, #592]	; (4c2c <cmd_common_process+0x29a>)
    49da:	4293      	cmp	r3, r2
    49dc:	d902      	bls.n	49e4 <cmd_common_process+0x52>
		{log_stat = 0;}
    49de:	4b91      	ldr	r3, [pc, #580]	; (4c24 <cmd_common_process+0x292>)
    49e0:	2200      	movs	r2, #0
    49e2:	701a      	strb	r2, [r3, #0]
	}
			
	if(eth_sock[0].r_status==FALSE) {return;}
    49e4:	4b92      	ldr	r3, [pc, #584]	; (4c30 <cmd_common_process+0x29e>)
    49e6:	4a93      	ldr	r2, [pc, #588]	; (4c34 <cmd_common_process+0x2a2>)
    49e8:	5c9b      	ldrb	r3, [r3, r2]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d101      	bne.n	49f2 <cmd_common_process+0x60>
    49ee:	f000 feac 	bl	574a <cmd_common_process+0xdb8>
	eth_sock[0].r_status=FALSE;
    49f2:	4b8f      	ldr	r3, [pc, #572]	; (4c30 <cmd_common_process+0x29e>)
    49f4:	4a8f      	ldr	r2, [pc, #572]	; (4c34 <cmd_common_process+0x2a2>)
    49f6:	2100      	movs	r1, #0
    49f8:	5499      	strb	r1, [r3, r2]

	size=((eth_sock[0].len[0]<<8) | (eth_sock[0].len[1]));
    49fa:	4b8d      	ldr	r3, [pc, #564]	; (4c30 <cmd_common_process+0x29e>)
    49fc:	799b      	ldrb	r3, [r3, #6]
    49fe:	021b      	lsls	r3, r3, #8
    4a00:	b21a      	sxth	r2, r3
    4a02:	4b8b      	ldr	r3, [pc, #556]	; (4c30 <cmd_common_process+0x29e>)
    4a04:	79db      	ldrb	r3, [r3, #7]
    4a06:	b21b      	sxth	r3, r3
    4a08:	4313      	orrs	r3, r2
    4a0a:	b21a      	sxth	r2, r3
    4a0c:	230e      	movs	r3, #14
    4a0e:	18fb      	adds	r3, r7, r3
    4a10:	801a      	strh	r2, [r3, #0]
	
	if(size  >    sizeof(cbuf))	{size=sizeof(cbuf);}
    4a12:	230e      	movs	r3, #14
    4a14:	18fb      	adds	r3, r7, r3
    4a16:	881a      	ldrh	r2, [r3, #0]
    4a18:	2396      	movs	r3, #150	; 0x96
    4a1a:	005b      	lsls	r3, r3, #1
    4a1c:	429a      	cmp	r2, r3
    4a1e:	d904      	bls.n	4a2a <cmd_common_process+0x98>
    4a20:	230e      	movs	r3, #14
    4a22:	18fb      	adds	r3, r7, r3
    4a24:	2296      	movs	r2, #150	; 0x96
    4a26:	0052      	lsls	r2, r2, #1
    4a28:	801a      	strh	r2, [r3, #0]
	if(size	 <    5			  )	{ return; }
    4a2a:	230e      	movs	r3, #14
    4a2c:	18fb      	adds	r3, r7, r3
    4a2e:	881b      	ldrh	r3, [r3, #0]
    4a30:	2b04      	cmp	r3, #4
    4a32:	d801      	bhi.n	4a38 <cmd_common_process+0xa6>
    4a34:	f000 fe8b 	bl	574e <cmd_common_process+0xdbc>
	
	memcpy(cbuf,(BYTE*)&eth_sock[0].data,size);
    4a38:	230e      	movs	r3, #14
    4a3a:	18fb      	adds	r3, r7, r3
    4a3c:	881a      	ldrh	r2, [r3, #0]
    4a3e:	497e      	ldr	r1, [pc, #504]	; (4c38 <cmd_common_process+0x2a6>)
    4a40:	4b7e      	ldr	r3, [pc, #504]	; (4c3c <cmd_common_process+0x2aa>)
    4a42:	0018      	movs	r0, r3
    4a44:	4b7e      	ldr	r3, [pc, #504]	; (4c40 <cmd_common_process+0x2ae>)
    4a46:	4798      	blx	r3

	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    4a48:	230e      	movs	r3, #14
    4a4a:	18fb      	adds	r3, r7, r3
    4a4c:	881a      	ldrh	r2, [r3, #0]
    4a4e:	4b7b      	ldr	r3, [pc, #492]	; (4c3c <cmd_common_process+0x2aa>)
    4a50:	0011      	movs	r1, r2
    4a52:	0018      	movs	r0, r3
    4a54:	4b7b      	ldr	r3, [pc, #492]	; (4c44 <cmd_common_process+0x2b2>)
    4a56:	4798      	blx	r3
    4a58:	1e03      	subs	r3, r0, #0
    4a5a:	d001      	beq.n	4a60 <cmd_common_process+0xce>
    4a5c:	f000 fe79 	bl	5752 <cmd_common_process+0xdc0>
	
	addr  = *(__packed WORD*)(cbuf+0);      wn=+sizeof(WORD);
    4a60:	4a76      	ldr	r2, [pc, #472]	; (4c3c <cmd_common_process+0x2aa>)
    4a62:	1d3b      	adds	r3, r7, #4
    4a64:	8812      	ldrh	r2, [r2, #0]
    4a66:	801a      	strh	r2, [r3, #0]
    4a68:	230a      	movs	r3, #10
    4a6a:	18fb      	adds	r3, r7, r3
    4a6c:	2202      	movs	r2, #2
    4a6e:	801a      	strh	r2, [r3, #0]

	if(addr !=  0){return;}
    4a70:	1d3b      	adds	r3, r7, #4
    4a72:	881b      	ldrh	r3, [r3, #0]
    4a74:	2b00      	cmp	r3, #0
    4a76:	d001      	beq.n	4a7c <cmd_common_process+0xea>
    4a78:	f000 fe6d 	bl	5756 <cmd_common_process+0xdc4>
	wn++;//cmd
    4a7c:	230a      	movs	r3, #10
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	881a      	ldrh	r2, [r3, #0]
    4a82:	230a      	movs	r3, #10
    4a84:	18fb      	adds	r3, r7, r3
    4a86:	3201      	adds	r2, #1
    4a88:	801a      	strh	r2, [r3, #0]
//logging
	if (!SRAV(4, &eth_sock[0].ip_addr[0], &ip_addrs)) {log_stat = 0;}
    4a8a:	4a6f      	ldr	r2, [pc, #444]	; (4c48 <cmd_common_process+0x2b6>)
    4a8c:	4b68      	ldr	r3, [pc, #416]	; (4c30 <cmd_common_process+0x29e>)
    4a8e:	0019      	movs	r1, r3
    4a90:	2004      	movs	r0, #4
    4a92:	4b6e      	ldr	r3, [pc, #440]	; (4c4c <cmd_common_process+0x2ba>)
    4a94:	4798      	blx	r3
    4a96:	1e03      	subs	r3, r0, #0
    4a98:	d102      	bne.n	4aa0 <cmd_common_process+0x10e>
    4a9a:	4b62      	ldr	r3, [pc, #392]	; (4c24 <cmd_common_process+0x292>)
    4a9c:	2200      	movs	r2, #0
    4a9e:	701a      	strb	r2, [r3, #0]
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    4aa0:	4b66      	ldr	r3, [pc, #408]	; (4c3c <cmd_common_process+0x2aa>)
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d103      	bne.n	4ab0 <cmd_common_process+0x11e>
    4aa8:	4b64      	ldr	r3, [pc, #400]	; (4c3c <cmd_common_process+0x2aa>)
    4aaa:	789b      	ldrb	r3, [r3, #2]
    4aac:	2b20      	cmp	r3, #32
    4aae:	d006      	beq.n	4abe <cmd_common_process+0x12c>
    4ab0:	4b5c      	ldr	r3, [pc, #368]	; (4c24 <cmd_common_process+0x292>)
    4ab2:	781b      	ldrb	r3, [r3, #0]
    4ab4:	b2db      	uxtb	r3, r3
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d101      	bne.n	4abe <cmd_common_process+0x12c>
    4aba:	f000 fe4e 	bl	575a <cmd_common_process+0xdc8>
	
	
	
	
	switch(cbuf[2])
    4abe:	4b5f      	ldr	r3, [pc, #380]	; (4c3c <cmd_common_process+0x2aa>)
    4ac0:	789b      	ldrb	r3, [r3, #2]
    4ac2:	2b29      	cmp	r3, #41	; 0x29
    4ac4:	d901      	bls.n	4aca <cmd_common_process+0x138>
    4ac6:	f000 fe4a 	bl	575e <cmd_common_process+0xdcc>
    4aca:	009a      	lsls	r2, r3, #2
    4acc:	4b60      	ldr	r3, [pc, #384]	; (4c50 <cmd_common_process+0x2be>)
    4ace:	18d3      	adds	r3, r2, r3
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	469f      	mov	pc, r3
	{
		case 0x00:	if(size  !=  9) { return; }
    4ad4:	230e      	movs	r3, #14
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	881b      	ldrh	r3, [r3, #0]
    4ada:	2b09      	cmp	r3, #9
    4adc:	d001      	beq.n	4ae2 <cmd_common_process+0x150>
    4ade:	f000 fe40 	bl	5762 <cmd_common_process+0xdd0>
					rsv_time = num_aus_byte(DW_LEN, &cbuf[3], R_SIDE);
    4ae2:	4b5c      	ldr	r3, [pc, #368]	; (4c54 <cmd_common_process+0x2c2>)
    4ae4:	2200      	movs	r2, #0
    4ae6:	0019      	movs	r1, r3
    4ae8:	2004      	movs	r0, #4
    4aea:	4b5b      	ldr	r3, [pc, #364]	; (4c58 <cmd_common_process+0x2c6>)
    4aec:	4798      	blx	r3
    4aee:	0002      	movs	r2, r0
    4af0:	4b5a      	ldr	r3, [pc, #360]	; (4c5c <cmd_common_process+0x2ca>)
    4af2:	601a      	str	r2, [r3, #0]
					loggin_timeout = 0;
    4af4:	4b4c      	ldr	r3, [pc, #304]	; (4c28 <cmd_common_process+0x296>)
    4af6:	2200      	movs	r2, #0
    4af8:	601a      	str	r2, [r3, #0]
					send_admin();
    4afa:	230a      	movs	r3, #10
    4afc:	18fb      	adds	r3, r7, r3
    4afe:	881b      	ldrh	r3, [r3, #0]
    4b00:	4a4e      	ldr	r2, [pc, #312]	; (4c3c <cmd_common_process+0x2aa>)
    4b02:	2101      	movs	r1, #1
    4b04:	54d1      	strb	r1, [r2, r3]
    4b06:	230a      	movs	r3, #10
    4b08:	18fb      	adds	r3, r7, r3
    4b0a:	881a      	ldrh	r2, [r3, #0]
    4b0c:	230a      	movs	r3, #10
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	3201      	adds	r2, #1
    4b12:	801a      	strh	r2, [r3, #0]
		break;
    4b14:	f000 fdcb 	bl	56ae <cmd_common_process+0xd1c>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    4b18:	230e      	movs	r3, #14
    4b1a:	18fb      	adds	r3, r7, r3
    4b1c:	881b      	ldrh	r3, [r3, #0]
    4b1e:	2b06      	cmp	r3, #6
    4b20:	d001      	beq.n	4b26 <cmd_common_process+0x194>
    4b22:	f000 fe20 	bl	5766 <cmd_common_process+0xdd4>
					if(cbuf[wn]==0x01)
    4b26:	230a      	movs	r3, #10
    4b28:	18fb      	adds	r3, r7, r3
    4b2a:	881b      	ldrh	r3, [r3, #0]
    4b2c:	4a43      	ldr	r2, [pc, #268]	; (4c3c <cmd_common_process+0x2aa>)
    4b2e:	5cd3      	ldrb	r3, [r2, r3]
    4b30:	2b01      	cmp	r3, #1
    4b32:	d13d      	bne.n	4bb0 <cmd_common_process+0x21e>
					{
						cbuf[wn]  = (BYTE)UID_WHO_ARE_YOU;								wn += sizeof(BYTE);
    4b34:	230a      	movs	r3, #10
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	881b      	ldrh	r3, [r3, #0]
    4b3a:	4a40      	ldr	r2, [pc, #256]	; (4c3c <cmd_common_process+0x2aa>)
    4b3c:	2101      	movs	r1, #1
    4b3e:	54d1      	strb	r1, [r2, r3]
    4b40:	230a      	movs	r3, #10
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	220a      	movs	r2, #10
    4b46:	18ba      	adds	r2, r7, r2
    4b48:	8812      	ldrh	r2, [r2, #0]
    4b4a:	3201      	adds	r2, #1
    4b4c:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_WHO_ARE_YOU>>8);							wn += sizeof(BYTE);
    4b4e:	230a      	movs	r3, #10
    4b50:	18fb      	adds	r3, r7, r3
    4b52:	881b      	ldrh	r3, [r3, #0]
    4b54:	4a39      	ldr	r2, [pc, #228]	; (4c3c <cmd_common_process+0x2aa>)
    4b56:	2180      	movs	r1, #128	; 0x80
    4b58:	54d1      	strb	r1, [r2, r3]
    4b5a:	230a      	movs	r3, #10
    4b5c:	18fb      	adds	r3, r7, r3
    4b5e:	220a      	movs	r2, #10
    4b60:	18ba      	adds	r2, r7, r2
    4b62:	8812      	ldrh	r2, [r2, #0]
    4b64:	3201      	adds	r2, #1
    4b66:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],MODEL,sizeof(MODEL));							wn +=sizeof(MODEL);
    4b68:	230a      	movs	r3, #10
    4b6a:	18fb      	adds	r3, r7, r3
    4b6c:	881a      	ldrh	r2, [r3, #0]
    4b6e:	4b33      	ldr	r3, [pc, #204]	; (4c3c <cmd_common_process+0x2aa>)
    4b70:	18d3      	adds	r3, r2, r3
    4b72:	493b      	ldr	r1, [pc, #236]	; (4c60 <cmd_common_process+0x2ce>)
    4b74:	220d      	movs	r2, #13
    4b76:	0018      	movs	r0, r3
    4b78:	4b31      	ldr	r3, [pc, #196]	; (4c40 <cmd_common_process+0x2ae>)
    4b7a:	4798      	blx	r3
    4b7c:	230a      	movs	r3, #10
    4b7e:	18fb      	adds	r3, r7, r3
    4b80:	220a      	movs	r2, #10
    4b82:	18ba      	adds	r2, r7, r2
    4b84:	8812      	ldrh	r2, [r2, #0]
    4b86:	320d      	adds	r2, #13
    4b88:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],VERSION,sizeof(VERSION));						wn +=sizeof(VERSION);
    4b8a:	230a      	movs	r3, #10
    4b8c:	18fb      	adds	r3, r7, r3
    4b8e:	881a      	ldrh	r2, [r3, #0]
    4b90:	4b2a      	ldr	r3, [pc, #168]	; (4c3c <cmd_common_process+0x2aa>)
    4b92:	18d3      	adds	r3, r2, r3
    4b94:	4933      	ldr	r1, [pc, #204]	; (4c64 <cmd_common_process+0x2d2>)
    4b96:	2209      	movs	r2, #9
    4b98:	0018      	movs	r0, r3
    4b9a:	4b29      	ldr	r3, [pc, #164]	; (4c40 <cmd_common_process+0x2ae>)
    4b9c:	4798      	blx	r3
    4b9e:	230a      	movs	r3, #10
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	220a      	movs	r2, #10
    4ba4:	18ba      	adds	r2, r7, r2
    4ba6:	8812      	ldrh	r2, [r2, #0]
    4ba8:	3209      	adds	r2, #9
    4baa:	801a      	strh	r2, [r3, #0]
						break;
    4bac:	f000 fd7f 	bl	56ae <cmd_common_process+0xd1c>
					}
		
					if(cbuf[wn]==0x02)
    4bb0:	230a      	movs	r3, #10
    4bb2:	18fb      	adds	r3, r7, r3
    4bb4:	881b      	ldrh	r3, [r3, #0]
    4bb6:	4a21      	ldr	r2, [pc, #132]	; (4c3c <cmd_common_process+0x2aa>)
    4bb8:	5cd3      	ldrb	r3, [r2, r3]
    4bba:	2b02      	cmp	r3, #2
    4bbc:	d001      	beq.n	4bc2 <cmd_common_process+0x230>
    4bbe:	f000 fd41 	bl	5644 <cmd_common_process+0xcb2>
					{
						cbuf[wn]  = (BYTE)UID_STATUS_PACK;								wn += sizeof(BYTE);
    4bc2:	230a      	movs	r3, #10
    4bc4:	18fb      	adds	r3, r7, r3
    4bc6:	881b      	ldrh	r3, [r3, #0]
    4bc8:	4a1c      	ldr	r2, [pc, #112]	; (4c3c <cmd_common_process+0x2aa>)
    4bca:	2102      	movs	r1, #2
    4bcc:	54d1      	strb	r1, [r2, r3]
    4bce:	230a      	movs	r3, #10
    4bd0:	18fb      	adds	r3, r7, r3
    4bd2:	220a      	movs	r2, #10
    4bd4:	18ba      	adds	r2, r7, r2
    4bd6:	8812      	ldrh	r2, [r2, #0]
    4bd8:	3201      	adds	r2, #1
    4bda:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_STATUS_PACK>>8);							wn += sizeof(BYTE); //uid device
    4bdc:	230a      	movs	r3, #10
    4bde:	18fb      	adds	r3, r7, r3
    4be0:	881b      	ldrh	r3, [r3, #0]
    4be2:	4a16      	ldr	r2, [pc, #88]	; (4c3c <cmd_common_process+0x2aa>)
    4be4:	2180      	movs	r1, #128	; 0x80
    4be6:	54d1      	strb	r1, [r2, r3]
    4be8:	230a      	movs	r3, #10
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	220a      	movs	r2, #10
    4bee:	18ba      	adds	r2, r7, r2
    4bf0:	8812      	ldrh	r2, [r2, #0]
    4bf2:	3201      	adds	r2, #1
    4bf4:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],(BYTE*)&TTL,4);								wn += sizeof(DWORD);//TTL
    4bf6:	230a      	movs	r3, #10
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	881a      	ldrh	r2, [r3, #0]
    4bfc:	4b0f      	ldr	r3, [pc, #60]	; (4c3c <cmd_common_process+0x2aa>)
    4bfe:	18d3      	adds	r3, r2, r3
    4c00:	4919      	ldr	r1, [pc, #100]	; (4c68 <cmd_common_process+0x2d6>)
    4c02:	2204      	movs	r2, #4
    4c04:	0018      	movs	r0, r3
    4c06:	4b0e      	ldr	r3, [pc, #56]	; (4c40 <cmd_common_process+0x2ae>)
    4c08:	4798      	blx	r3
    4c0a:	230a      	movs	r3, #10
    4c0c:	18fb      	adds	r3, r7, r3
    4c0e:	220a      	movs	r2, #10
    4c10:	18ba      	adds	r2, r7, r2
    4c12:	8812      	ldrh	r2, [r2, #0]
    4c14:	3204      	adds	r2, #4
    4c16:	801a      	strh	r2, [r3, #0]
			
						for (i = 0; i < 4; i++)
    4c18:	2309      	movs	r3, #9
    4c1a:	18fb      	adds	r3, r7, r3
    4c1c:	2200      	movs	r2, #0
    4c1e:	701a      	strb	r2, [r3, #0]
    4c20:	e0ba      	b.n	4d98 <cmd_common_process+0x406>
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	20000450 	.word	0x20000450
    4c28:	20000470 	.word	0x20000470
    4c2c:	002dc6c0 	.word	0x002dc6c0
    4c30:	200005cc 	.word	0x200005cc
    4c34:	000005d1 	.word	0x000005d1
    4c38:	200005d4 	.word	0x200005d4
    4c3c:	200004a0 	.word	0x200004a0
    4c40:	0000c841 	.word	0x0000c841
    4c44:	00005d0d 	.word	0x00005d0d
    4c48:	2000049c 	.word	0x2000049c
    4c4c:	00004923 	.word	0x00004923
    4c50:	0000cadc 	.word	0x0000cadc
    4c54:	200004a3 	.word	0x200004a3
    4c58:	0000488d 	.word	0x0000488d
    4c5c:	20000454 	.word	0x20000454
    4c60:	0000cac0 	.word	0x0000cac0
    4c64:	0000cad0 	.word	0x0000cad0
    4c68:	2000047c 	.word	0x2000047c
							{
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.rx,4);		wn += sizeof(DWORD);
    4c6c:	230a      	movs	r3, #10
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	881a      	ldrh	r2, [r3, #0]
    4c72:	4bd2      	ldr	r3, [pc, #840]	; (4fbc <cmd_common_process+0x62a>)
    4c74:	18d0      	adds	r0, r2, r3
    4c76:	2309      	movs	r3, #9
    4c78:	18fb      	adds	r3, r7, r3
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	3301      	adds	r3, #1
    4c7e:	4ad0      	ldr	r2, [pc, #832]	; (4fc0 <cmd_common_process+0x62e>)
    4c80:	4353      	muls	r3, r2
    4c82:	22ba      	movs	r2, #186	; 0xba
    4c84:	00d2      	lsls	r2, r2, #3
    4c86:	189a      	adds	r2, r3, r2
    4c88:	4bce      	ldr	r3, [pc, #824]	; (4fc4 <cmd_common_process+0x632>)
    4c8a:	18d3      	adds	r3, r2, r3
    4c8c:	330b      	adds	r3, #11
    4c8e:	2204      	movs	r2, #4
    4c90:	0019      	movs	r1, r3
    4c92:	4bcd      	ldr	r3, [pc, #820]	; (4fc8 <cmd_common_process+0x636>)
    4c94:	4798      	blx	r3
    4c96:	230a      	movs	r3, #10
    4c98:	18fb      	adds	r3, r7, r3
    4c9a:	220a      	movs	r2, #10
    4c9c:	18ba      	adds	r2, r7, r2
    4c9e:	8812      	ldrh	r2, [r2, #0]
    4ca0:	3204      	adds	r2, #4
    4ca2:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.tx,4);		wn += sizeof(DWORD);
    4ca4:	230a      	movs	r3, #10
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	881a      	ldrh	r2, [r3, #0]
    4caa:	4bc4      	ldr	r3, [pc, #784]	; (4fbc <cmd_common_process+0x62a>)
    4cac:	18d0      	adds	r0, r2, r3
    4cae:	2309      	movs	r3, #9
    4cb0:	18fb      	adds	r3, r7, r3
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	3301      	adds	r3, #1
    4cb6:	4ac2      	ldr	r2, [pc, #776]	; (4fc0 <cmd_common_process+0x62e>)
    4cb8:	4353      	muls	r3, r2
    4cba:	22ba      	movs	r2, #186	; 0xba
    4cbc:	00d2      	lsls	r2, r2, #3
    4cbe:	189a      	adds	r2, r3, r2
    4cc0:	4bc0      	ldr	r3, [pc, #768]	; (4fc4 <cmd_common_process+0x632>)
    4cc2:	18d3      	adds	r3, r2, r3
    4cc4:	3307      	adds	r3, #7
    4cc6:	2204      	movs	r2, #4
    4cc8:	0019      	movs	r1, r3
    4cca:	4bbf      	ldr	r3, [pc, #764]	; (4fc8 <cmd_common_process+0x636>)
    4ccc:	4798      	blx	r3
    4cce:	230a      	movs	r3, #10
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	220a      	movs	r2, #10
    4cd4:	18ba      	adds	r2, r7, r2
    4cd6:	8812      	ldrh	r2, [r2, #0]
    4cd8:	3204      	adds	r2, #4
    4cda:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.rx,4);			wn += sizeof(DWORD);
    4cdc:	230a      	movs	r3, #10
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	881a      	ldrh	r2, [r3, #0]
    4ce2:	4bb6      	ldr	r3, [pc, #728]	; (4fbc <cmd_common_process+0x62a>)
    4ce4:	18d0      	adds	r0, r2, r3
    4ce6:	2309      	movs	r3, #9
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	781a      	ldrb	r2, [r3, #0]
    4cec:	0013      	movs	r3, r2
    4cee:	00db      	lsls	r3, r3, #3
    4cf0:	189b      	adds	r3, r3, r2
    4cf2:	019b      	lsls	r3, r3, #6
    4cf4:	228c      	movs	r2, #140	; 0x8c
    4cf6:	0092      	lsls	r2, r2, #2
    4cf8:	189a      	adds	r2, r3, r2
    4cfa:	4bb4      	ldr	r3, [pc, #720]	; (4fcc <cmd_common_process+0x63a>)
    4cfc:	18d3      	adds	r3, r2, r3
    4cfe:	3308      	adds	r3, #8
    4d00:	2204      	movs	r2, #4
    4d02:	0019      	movs	r1, r3
    4d04:	4bb0      	ldr	r3, [pc, #704]	; (4fc8 <cmd_common_process+0x636>)
    4d06:	4798      	blx	r3
    4d08:	230a      	movs	r3, #10
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	220a      	movs	r2, #10
    4d0e:	18ba      	adds	r2, r7, r2
    4d10:	8812      	ldrh	r2, [r2, #0]
    4d12:	3204      	adds	r2, #4
    4d14:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.tx,4);			wn += sizeof(DWORD);
    4d16:	230a      	movs	r3, #10
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	881a      	ldrh	r2, [r3, #0]
    4d1c:	4ba7      	ldr	r3, [pc, #668]	; (4fbc <cmd_common_process+0x62a>)
    4d1e:	18d0      	adds	r0, r2, r3
    4d20:	2309      	movs	r3, #9
    4d22:	18fb      	adds	r3, r7, r3
    4d24:	781a      	ldrb	r2, [r3, #0]
    4d26:	0013      	movs	r3, r2
    4d28:	00db      	lsls	r3, r3, #3
    4d2a:	189b      	adds	r3, r3, r2
    4d2c:	019b      	lsls	r3, r3, #6
    4d2e:	228c      	movs	r2, #140	; 0x8c
    4d30:	0092      	lsls	r2, r2, #2
    4d32:	189a      	adds	r2, r3, r2
    4d34:	4ba5      	ldr	r3, [pc, #660]	; (4fcc <cmd_common_process+0x63a>)
    4d36:	18d3      	adds	r3, r2, r3
    4d38:	3304      	adds	r3, #4
    4d3a:	2204      	movs	r2, #4
    4d3c:	0019      	movs	r1, r3
    4d3e:	4ba2      	ldr	r3, [pc, #648]	; (4fc8 <cmd_common_process+0x636>)
    4d40:	4798      	blx	r3
    4d42:	230a      	movs	r3, #10
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	220a      	movs	r2, #10
    4d48:	18ba      	adds	r2, r7, r2
    4d4a:	8812      	ldrh	r2, [r2, #0]
    4d4c:	3204      	adds	r2, #4
    4d4e:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].dt,2);						wn += sizeof(WORD);//dt port0
    4d50:	230a      	movs	r3, #10
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	881a      	ldrh	r2, [r3, #0]
    4d56:	4b99      	ldr	r3, [pc, #612]	; (4fbc <cmd_common_process+0x62a>)
    4d58:	18d0      	adds	r0, r2, r3
    4d5a:	2309      	movs	r3, #9
    4d5c:	18fb      	adds	r3, r7, r3
    4d5e:	781a      	ldrb	r2, [r3, #0]
    4d60:	0013      	movs	r3, r2
    4d62:	00db      	lsls	r3, r3, #3
    4d64:	189b      	adds	r3, r3, r2
    4d66:	019b      	lsls	r3, r3, #6
    4d68:	2286      	movs	r2, #134	; 0x86
    4d6a:	0092      	lsls	r2, r2, #2
    4d6c:	189a      	adds	r2, r3, r2
    4d6e:	4b97      	ldr	r3, [pc, #604]	; (4fcc <cmd_common_process+0x63a>)
    4d70:	18d3      	adds	r3, r2, r3
    4d72:	3302      	adds	r3, #2
    4d74:	2202      	movs	r2, #2
    4d76:	0019      	movs	r1, r3
    4d78:	4b93      	ldr	r3, [pc, #588]	; (4fc8 <cmd_common_process+0x636>)
    4d7a:	4798      	blx	r3
    4d7c:	230a      	movs	r3, #10
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	220a      	movs	r2, #10
    4d82:	18ba      	adds	r2, r7, r2
    4d84:	8812      	ldrh	r2, [r2, #0]
    4d86:	3202      	adds	r2, #2
    4d88:	801a      	strh	r2, [r3, #0]
						for (i = 0; i < 4; i++)
    4d8a:	2309      	movs	r3, #9
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	781a      	ldrb	r2, [r3, #0]
    4d90:	2309      	movs	r3, #9
    4d92:	18fb      	adds	r3, r7, r3
    4d94:	3201      	adds	r2, #1
    4d96:	701a      	strb	r2, [r3, #0]
    4d98:	2309      	movs	r3, #9
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	2b03      	cmp	r3, #3
    4da0:	d800      	bhi.n	4da4 <cmd_common_process+0x412>
    4da2:	e763      	b.n	4c6c <cmd_common_process+0x2da>
							}			
					}
		break;
    4da4:	f000 fc4e 	bl	5644 <cmd_common_process+0xcb2>
		//......................................................................
		//......................................................................
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    4da8:	230e      	movs	r3, #14
    4daa:	18fb      	adds	r3, r7, r3
    4dac:	881b      	ldrh	r3, [r3, #0]
    4dae:	2b07      	cmp	r3, #7
    4db0:	d001      	beq.n	4db6 <cmd_common_process+0x424>
    4db2:	f000 fcda 	bl	576a <cmd_common_process+0xdd8>
					check_permission();	
    4db6:	4b86      	ldr	r3, [pc, #536]	; (4fd0 <cmd_common_process+0x63e>)
    4db8:	781b      	ldrb	r3, [r3, #0]
    4dba:	2b01      	cmp	r3, #1
    4dbc:	d00e      	beq.n	4ddc <cmd_common_process+0x44a>
    4dbe:	230a      	movs	r3, #10
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	881b      	ldrh	r3, [r3, #0]
    4dc4:	4a7d      	ldr	r2, [pc, #500]	; (4fbc <cmd_common_process+0x62a>)
    4dc6:	2100      	movs	r1, #0
    4dc8:	54d1      	strb	r1, [r2, r3]
    4dca:	230a      	movs	r3, #10
    4dcc:	18fb      	adds	r3, r7, r3
    4dce:	881a      	ldrh	r2, [r3, #0]
    4dd0:	230a      	movs	r3, #10
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	3201      	adds	r2, #1
    4dd6:	801a      	strh	r2, [r3, #0]
    4dd8:	f000 fc69 	bl	56ae <cmd_common_process+0xd1c>
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4ddc:	4b77      	ldr	r3, [pc, #476]	; (4fbc <cmd_common_process+0x62a>)
    4dde:	78db      	ldrb	r3, [r3, #3]
    4de0:	b21a      	sxth	r2, r3
    4de2:	4b76      	ldr	r3, [pc, #472]	; (4fbc <cmd_common_process+0x62a>)
    4de4:	791b      	ldrb	r3, [r3, #4]
    4de6:	021b      	lsls	r3, r3, #8
    4de8:	b21b      	sxth	r3, r3
    4dea:	4313      	orrs	r3, r2
    4dec:	b21a      	sxth	r2, r3
    4dee:	003b      	movs	r3, r7
    4df0:	801a      	strh	r2, [r3, #0]
    4df2:	230a      	movs	r3, #10
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	220a      	movs	r2, #10
    4df8:	18ba      	adds	r2, r7, r2
    4dfa:	8812      	ldrh	r2, [r2, #0]
    4dfc:	3202      	adds	r2, #2
    4dfe:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_1) - ixo;
    4e00:	230c      	movs	r3, #12
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	003a      	movs	r2, r7
    4e06:	8812      	ldrh	r2, [r2, #0]
    4e08:	2180      	movs	r1, #128	; 0x80
    4e0a:	0049      	lsls	r1, r1, #1
    4e0c:	1a8a      	subs	r2, r1, r2
    4e0e:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_1)	) { break;  }
    4e10:	003b      	movs	r3, r7
    4e12:	881a      	ldrh	r2, [r3, #0]
    4e14:	2380      	movs	r3, #128	; 0x80
    4e16:	005b      	lsls	r3, r3, #1
    4e18:	429a      	cmp	r2, r3
    4e1a:	d901      	bls.n	4e20 <cmd_common_process+0x48e>
    4e1c:	f000 fc14 	bl	5648 <cmd_common_process+0xcb6>
					if(cnt > 256			) { cnt=256;  }
    4e20:	230c      	movs	r3, #12
    4e22:	18fb      	adds	r3, r7, r3
    4e24:	881a      	ldrh	r2, [r3, #0]
    4e26:	2380      	movs	r3, #128	; 0x80
    4e28:	005b      	lsls	r3, r3, #1
    4e2a:	429a      	cmp	r2, r3
    4e2c:	d904      	bls.n	4e38 <cmd_common_process+0x4a6>
    4e2e:	230c      	movs	r3, #12
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	2280      	movs	r2, #128	; 0x80
    4e34:	0052      	lsls	r2, r2, #1
    4e36:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4e38:	230a      	movs	r3, #10
    4e3a:	18fb      	adds	r3, r7, r3
    4e3c:	881b      	ldrh	r3, [r3, #0]
    4e3e:	220c      	movs	r2, #12
    4e40:	18ba      	adds	r2, r7, r2
    4e42:	8812      	ldrh	r2, [r2, #0]
    4e44:	b2d1      	uxtb	r1, r2
    4e46:	4a5d      	ldr	r2, [pc, #372]	; (4fbc <cmd_common_process+0x62a>)
    4e48:	54d1      	strb	r1, [r2, r3]
    4e4a:	230a      	movs	r3, #10
    4e4c:	18fb      	adds	r3, r7, r3
    4e4e:	220a      	movs	r2, #10
    4e50:	18ba      	adds	r2, r7, r2
    4e52:	8812      	ldrh	r2, [r2, #0]
    4e54:	3201      	adds	r2, #1
    4e56:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4e58:	230a      	movs	r3, #10
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	881b      	ldrh	r3, [r3, #0]
    4e5e:	220c      	movs	r2, #12
    4e60:	18ba      	adds	r2, r7, r2
    4e62:	8812      	ldrh	r2, [r2, #0]
    4e64:	0a12      	lsrs	r2, r2, #8
    4e66:	b292      	uxth	r2, r2
    4e68:	b2d1      	uxtb	r1, r2
    4e6a:	4a54      	ldr	r2, [pc, #336]	; (4fbc <cmd_common_process+0x62a>)
    4e6c:	54d1      	strb	r1, [r2, r3]
    4e6e:	230a      	movs	r3, #10
    4e70:	18fb      	adds	r3, r7, r3
    4e72:	220a      	movs	r2, #10
    4e74:	18ba      	adds	r2, r7, r2
    4e76:	8812      	ldrh	r2, [r2, #0]
    4e78:	3201      	adds	r2, #1
    4e7a:	801a      	strh	r2, [r3, #0]

					memcpy(&cbuf[wn],((BYTE*)&cfg_1)+ixo,cnt);				wn+=cnt;
    4e7c:	230a      	movs	r3, #10
    4e7e:	18fb      	adds	r3, r7, r3
    4e80:	881a      	ldrh	r2, [r3, #0]
    4e82:	4b4e      	ldr	r3, [pc, #312]	; (4fbc <cmd_common_process+0x62a>)
    4e84:	18d0      	adds	r0, r2, r3
    4e86:	003b      	movs	r3, r7
    4e88:	881a      	ldrh	r2, [r3, #0]
    4e8a:	4b52      	ldr	r3, [pc, #328]	; (4fd4 <cmd_common_process+0x642>)
    4e8c:	18d1      	adds	r1, r2, r3
    4e8e:	230c      	movs	r3, #12
    4e90:	18fb      	adds	r3, r7, r3
    4e92:	881b      	ldrh	r3, [r3, #0]
    4e94:	001a      	movs	r2, r3
    4e96:	4b4c      	ldr	r3, [pc, #304]	; (4fc8 <cmd_common_process+0x636>)
    4e98:	4798      	blx	r3
    4e9a:	230a      	movs	r3, #10
    4e9c:	18fb      	adds	r3, r7, r3
    4e9e:	220a      	movs	r2, #10
    4ea0:	18b9      	adds	r1, r7, r2
    4ea2:	220c      	movs	r2, #12
    4ea4:	18ba      	adds	r2, r7, r2
    4ea6:	8809      	ldrh	r1, [r1, #0]
    4ea8:	8812      	ldrh	r2, [r2, #0]
    4eaa:	188a      	adds	r2, r1, r2
    4eac:	801a      	strh	r2, [r3, #0]
		break;
    4eae:	f000 fbfe 	bl	56ae <cmd_common_process+0xd1c>

		//......................................................................
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    4eb2:	230e      	movs	r3, #14
    4eb4:	18fb      	adds	r3, r7, r3
    4eb6:	881b      	ldrh	r3, [r3, #0]
    4eb8:	2b07      	cmp	r3, #7
    4eba:	d001      	beq.n	4ec0 <cmd_common_process+0x52e>
    4ebc:	f000 fc57 	bl	576e <cmd_common_process+0xddc>
					check_permission();	
    4ec0:	4b43      	ldr	r3, [pc, #268]	; (4fd0 <cmd_common_process+0x63e>)
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	2b01      	cmp	r3, #1
    4ec6:	d00e      	beq.n	4ee6 <cmd_common_process+0x554>
    4ec8:	230a      	movs	r3, #10
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	881b      	ldrh	r3, [r3, #0]
    4ece:	4a3b      	ldr	r2, [pc, #236]	; (4fbc <cmd_common_process+0x62a>)
    4ed0:	2100      	movs	r1, #0
    4ed2:	54d1      	strb	r1, [r2, r3]
    4ed4:	230a      	movs	r3, #10
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	881a      	ldrh	r2, [r3, #0]
    4eda:	230a      	movs	r3, #10
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	3201      	adds	r2, #1
    4ee0:	801a      	strh	r2, [r3, #0]
    4ee2:	f000 fbe4 	bl	56ae <cmd_common_process+0xd1c>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4ee6:	4b35      	ldr	r3, [pc, #212]	; (4fbc <cmd_common_process+0x62a>)
    4ee8:	78db      	ldrb	r3, [r3, #3]
    4eea:	b21a      	sxth	r2, r3
    4eec:	4b33      	ldr	r3, [pc, #204]	; (4fbc <cmd_common_process+0x62a>)
    4eee:	791b      	ldrb	r3, [r3, #4]
    4ef0:	021b      	lsls	r3, r3, #8
    4ef2:	b21b      	sxth	r3, r3
    4ef4:	4313      	orrs	r3, r2
    4ef6:	b21a      	sxth	r2, r3
    4ef8:	003b      	movs	r3, r7
    4efa:	801a      	strh	r2, [r3, #0]
    4efc:	230a      	movs	r3, #10
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	220a      	movs	r2, #10
    4f02:	18ba      	adds	r2, r7, r2
    4f04:	8812      	ldrh	r2, [r2, #0]
    4f06:	3202      	adds	r2, #2
    4f08:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_2) - ixo;
    4f0a:	230c      	movs	r3, #12
    4f0c:	18fb      	adds	r3, r7, r3
    4f0e:	003a      	movs	r2, r7
    4f10:	8812      	ldrh	r2, [r2, #0]
    4f12:	2180      	movs	r1, #128	; 0x80
    4f14:	0049      	lsls	r1, r1, #1
    4f16:	1a8a      	subs	r2, r1, r2
    4f18:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_2)	) { break;  }
    4f1a:	003b      	movs	r3, r7
    4f1c:	881a      	ldrh	r2, [r3, #0]
    4f1e:	2380      	movs	r3, #128	; 0x80
    4f20:	005b      	lsls	r3, r3, #1
    4f22:	429a      	cmp	r2, r3
    4f24:	d901      	bls.n	4f2a <cmd_common_process+0x598>
    4f26:	f000 fb91 	bl	564c <cmd_common_process+0xcba>
					if(cnt > 256			) { cnt=256;  }
    4f2a:	230c      	movs	r3, #12
    4f2c:	18fb      	adds	r3, r7, r3
    4f2e:	881a      	ldrh	r2, [r3, #0]
    4f30:	2380      	movs	r3, #128	; 0x80
    4f32:	005b      	lsls	r3, r3, #1
    4f34:	429a      	cmp	r2, r3
    4f36:	d904      	bls.n	4f42 <cmd_common_process+0x5b0>
    4f38:	230c      	movs	r3, #12
    4f3a:	18fb      	adds	r3, r7, r3
    4f3c:	2280      	movs	r2, #128	; 0x80
    4f3e:	0052      	lsls	r2, r2, #1
    4f40:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4f42:	230a      	movs	r3, #10
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	881b      	ldrh	r3, [r3, #0]
    4f48:	220c      	movs	r2, #12
    4f4a:	18ba      	adds	r2, r7, r2
    4f4c:	8812      	ldrh	r2, [r2, #0]
    4f4e:	b2d1      	uxtb	r1, r2
    4f50:	4a1a      	ldr	r2, [pc, #104]	; (4fbc <cmd_common_process+0x62a>)
    4f52:	54d1      	strb	r1, [r2, r3]
    4f54:	230a      	movs	r3, #10
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	220a      	movs	r2, #10
    4f5a:	18ba      	adds	r2, r7, r2
    4f5c:	8812      	ldrh	r2, [r2, #0]
    4f5e:	3201      	adds	r2, #1
    4f60:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4f62:	230a      	movs	r3, #10
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	881b      	ldrh	r3, [r3, #0]
    4f68:	220c      	movs	r2, #12
    4f6a:	18ba      	adds	r2, r7, r2
    4f6c:	8812      	ldrh	r2, [r2, #0]
    4f6e:	0a12      	lsrs	r2, r2, #8
    4f70:	b292      	uxth	r2, r2
    4f72:	b2d1      	uxtb	r1, r2
    4f74:	4a11      	ldr	r2, [pc, #68]	; (4fbc <cmd_common_process+0x62a>)
    4f76:	54d1      	strb	r1, [r2, r3]
    4f78:	230a      	movs	r3, #10
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	220a      	movs	r2, #10
    4f7e:	18ba      	adds	r2, r7, r2
    4f80:	8812      	ldrh	r2, [r2, #0]
    4f82:	3201      	adds	r2, #1
    4f84:	801a      	strh	r2, [r3, #0]

					
					memcpy(&cbuf[wn],((BYTE*)&cfg_2)+ixo,cnt);				wn+=cnt;
    4f86:	230a      	movs	r3, #10
    4f88:	18fb      	adds	r3, r7, r3
    4f8a:	881a      	ldrh	r2, [r3, #0]
    4f8c:	4b0b      	ldr	r3, [pc, #44]	; (4fbc <cmd_common_process+0x62a>)
    4f8e:	18d0      	adds	r0, r2, r3
    4f90:	003b      	movs	r3, r7
    4f92:	881a      	ldrh	r2, [r3, #0]
    4f94:	4b10      	ldr	r3, [pc, #64]	; (4fd8 <cmd_common_process+0x646>)
    4f96:	18d1      	adds	r1, r2, r3
    4f98:	230c      	movs	r3, #12
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	881b      	ldrh	r3, [r3, #0]
    4f9e:	001a      	movs	r2, r3
    4fa0:	4b09      	ldr	r3, [pc, #36]	; (4fc8 <cmd_common_process+0x636>)
    4fa2:	4798      	blx	r3
    4fa4:	230a      	movs	r3, #10
    4fa6:	18fb      	adds	r3, r7, r3
    4fa8:	220a      	movs	r2, #10
    4faa:	18b9      	adds	r1, r7, r2
    4fac:	220c      	movs	r2, #12
    4fae:	18ba      	adds	r2, r7, r2
    4fb0:	8809      	ldrh	r1, [r1, #0]
    4fb2:	8812      	ldrh	r2, [r2, #0]
    4fb4:	188a      	adds	r2, r1, r2
    4fb6:	801a      	strh	r2, [r3, #0]
		break;
    4fb8:	f000 fb79 	bl	56ae <cmd_common_process+0xd1c>
    4fbc:	200004a0 	.word	0x200004a0
    4fc0:	000005e5 	.word	0x000005e5
    4fc4:	200005cc 	.word	0x200005cc
    4fc8:	0000c841 	.word	0x0000c841
    4fcc:	200031fc 	.word	0x200031fc
    4fd0:	20000451 	.word	0x20000451
    4fd4:	20003dc8 	.word	0x20003dc8
    4fd8:	20003bc8 	.word	0x20003bc8

		//......................................................................

		case 0x10:	if(size <  6) { return; }
    4fdc:	230e      	movs	r3, #14
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	881b      	ldrh	r3, [r3, #0]
    4fe2:	2b05      	cmp	r3, #5
    4fe4:	d801      	bhi.n	4fea <cmd_common_process+0x658>
    4fe6:	f000 fbc4 	bl	5772 <cmd_common_process+0xde0>
					wn+=iap_process(&cbuf[wn],size-5);
    4fea:	230a      	movs	r3, #10
    4fec:	18fb      	adds	r3, r7, r3
    4fee:	881a      	ldrh	r2, [r3, #0]
    4ff0:	4bc2      	ldr	r3, [pc, #776]	; (52fc <cmd_common_process+0x96a>)
    4ff2:	18d2      	adds	r2, r2, r3
    4ff4:	230e      	movs	r3, #14
    4ff6:	18fb      	adds	r3, r7, r3
    4ff8:	881b      	ldrh	r3, [r3, #0]
    4ffa:	3b05      	subs	r3, #5
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	0019      	movs	r1, r3
    5000:	0010      	movs	r0, r2
    5002:	4bbf      	ldr	r3, [pc, #764]	; (5300 <cmd_common_process+0x96e>)
    5004:	4798      	blx	r3
    5006:	0003      	movs	r3, r0
    5008:	0019      	movs	r1, r3
    500a:	230a      	movs	r3, #10
    500c:	18fb      	adds	r3, r7, r3
    500e:	220a      	movs	r2, #10
    5010:	18ba      	adds	r2, r7, r2
    5012:	8812      	ldrh	r2, [r2, #0]
    5014:	188a      	adds	r2, r1, r2
    5016:	801a      	strh	r2, [r3, #0]
		break;
    5018:	e349      	b.n	56ae <cmd_common_process+0xd1c>

		//......................................................................
		case 0x17:	if(size  <  7) { return; }
    501a:	230e      	movs	r3, #14
    501c:	18fb      	adds	r3, r7, r3
    501e:	881b      	ldrh	r3, [r3, #0]
    5020:	2b06      	cmp	r3, #6
    5022:	d801      	bhi.n	5028 <cmd_common_process+0x696>
    5024:	f000 fba7 	bl	5776 <cmd_common_process+0xde4>
		
					ixo = cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    5028:	4bb4      	ldr	r3, [pc, #720]	; (52fc <cmd_common_process+0x96a>)
    502a:	78db      	ldrb	r3, [r3, #3]
    502c:	b21a      	sxth	r2, r3
    502e:	4bb3      	ldr	r3, [pc, #716]	; (52fc <cmd_common_process+0x96a>)
    5030:	791b      	ldrb	r3, [r3, #4]
    5032:	021b      	lsls	r3, r3, #8
    5034:	b21b      	sxth	r3, r3
    5036:	4313      	orrs	r3, r2
    5038:	b21a      	sxth	r2, r3
    503a:	003b      	movs	r3, r7
    503c:	801a      	strh	r2, [r3, #0]
    503e:	230a      	movs	r3, #10
    5040:	18fb      	adds	r3, r7, r3
    5042:	220a      	movs	r2, #10
    5044:	18ba      	adds	r2, r7, r2
    5046:	8812      	ldrh	r2, [r2, #0]
    5048:	3202      	adds	r2, #2
    504a:	801a      	strh	r2, [r3, #0]
					cnt = cbuf[5] | (cbuf[6]<<8);							wn+=sizeof(WORD);
    504c:	4bab      	ldr	r3, [pc, #684]	; (52fc <cmd_common_process+0x96a>)
    504e:	795b      	ldrb	r3, [r3, #5]
    5050:	b21a      	sxth	r2, r3
    5052:	4baa      	ldr	r3, [pc, #680]	; (52fc <cmd_common_process+0x96a>)
    5054:	799b      	ldrb	r3, [r3, #6]
    5056:	021b      	lsls	r3, r3, #8
    5058:	b21b      	sxth	r3, r3
    505a:	4313      	orrs	r3, r2
    505c:	b21a      	sxth	r2, r3
    505e:	230c      	movs	r3, #12
    5060:	18fb      	adds	r3, r7, r3
    5062:	801a      	strh	r2, [r3, #0]
    5064:	230a      	movs	r3, #10
    5066:	18fb      	adds	r3, r7, r3
    5068:	220a      	movs	r2, #10
    506a:	18ba      	adds	r2, r7, r2
    506c:	8812      	ldrh	r2, [r2, #0]
    506e:	3202      	adds	r2, #2
    5070:	801a      	strh	r2, [r3, #0]
					
					if(cnt  ==  0) { break; }
    5072:	230c      	movs	r3, #12
    5074:	18fb      	adds	r3, r7, r3
    5076:	881b      	ldrh	r3, [r3, #0]
    5078:	2b00      	cmp	r3, #0
    507a:	d100      	bne.n	507e <cmd_common_process+0x6ec>
    507c:	e2e8      	b.n	5650 <cmd_common_process+0xcbe>
					if(ixo  ==  0) {memset(&cfg_1_tmp,0x00,sizeof(CFG_1));}
    507e:	003b      	movs	r3, r7
    5080:	881b      	ldrh	r3, [r3, #0]
    5082:	2b00      	cmp	r3, #0
    5084:	d106      	bne.n	5094 <cmd_common_process+0x702>
    5086:	2380      	movs	r3, #128	; 0x80
    5088:	005a      	lsls	r2, r3, #1
    508a:	4b9e      	ldr	r3, [pc, #632]	; (5304 <cmd_common_process+0x972>)
    508c:	2100      	movs	r1, #0
    508e:	0018      	movs	r0, r3
    5090:	4b9d      	ldr	r3, [pc, #628]	; (5308 <cmd_common_process+0x976>)
    5092:	4798      	blx	r3
					
					if(ixo       >= sizeof(CFG_1)) { break; }
    5094:	003b      	movs	r3, r7
    5096:	881b      	ldrh	r3, [r3, #0]
    5098:	2bff      	cmp	r3, #255	; 0xff
    509a:	d900      	bls.n	509e <cmd_common_process+0x70c>
    509c:	e2da      	b.n	5654 <cmd_common_process+0xcc2>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    509e:	230c      	movs	r3, #12
    50a0:	18fb      	adds	r3, r7, r3
    50a2:	881a      	ldrh	r2, [r3, #0]
    50a4:	003b      	movs	r3, r7
    50a6:	881b      	ldrh	r3, [r3, #0]
    50a8:	18d3      	adds	r3, r2, r3
    50aa:	001a      	movs	r2, r3
    50ac:	2380      	movs	r3, #128	; 0x80
    50ae:	005b      	lsls	r3, r3, #1
    50b0:	429a      	cmp	r2, r3
    50b2:	d900      	bls.n	50b6 <cmd_common_process+0x724>
    50b4:	e2d0      	b.n	5658 <cmd_common_process+0xcc6>
					
					memcpy(((BYTE*)&cfg_1_tmp)+ixo,cbuf+wn                  ,cnt);
    50b6:	003b      	movs	r3, r7
    50b8:	881a      	ldrh	r2, [r3, #0]
    50ba:	4b92      	ldr	r3, [pc, #584]	; (5304 <cmd_common_process+0x972>)
    50bc:	18d0      	adds	r0, r2, r3
    50be:	230a      	movs	r3, #10
    50c0:	18fb      	adds	r3, r7, r3
    50c2:	881a      	ldrh	r2, [r3, #0]
    50c4:	4b8d      	ldr	r3, [pc, #564]	; (52fc <cmd_common_process+0x96a>)
    50c6:	18d1      	adds	r1, r2, r3
    50c8:	230c      	movs	r3, #12
    50ca:	18fb      	adds	r3, r7, r3
    50cc:	881b      	ldrh	r3, [r3, #0]
    50ce:	001a      	movs	r2, r3
    50d0:	4b8e      	ldr	r3, [pc, #568]	; (530c <cmd_common_process+0x97a>)
    50d2:	4798      	blx	r3
					memcpy(cbuf+wn                  ,((BYTE*)&cfg_1_tmp)+ixo,cnt);
    50d4:	230a      	movs	r3, #10
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	881a      	ldrh	r2, [r3, #0]
    50da:	4b88      	ldr	r3, [pc, #544]	; (52fc <cmd_common_process+0x96a>)
    50dc:	18d0      	adds	r0, r2, r3
    50de:	003b      	movs	r3, r7
    50e0:	881a      	ldrh	r2, [r3, #0]
    50e2:	4b88      	ldr	r3, [pc, #544]	; (5304 <cmd_common_process+0x972>)
    50e4:	18d1      	adds	r1, r2, r3
    50e6:	230c      	movs	r3, #12
    50e8:	18fb      	adds	r3, r7, r3
    50ea:	881b      	ldrh	r3, [r3, #0]
    50ec:	001a      	movs	r2, r3
    50ee:	4b87      	ldr	r3, [pc, #540]	; (530c <cmd_common_process+0x97a>)
    50f0:	4798      	blx	r3
					wn+=cnt;
    50f2:	230a      	movs	r3, #10
    50f4:	18fb      	adds	r3, r7, r3
    50f6:	220a      	movs	r2, #10
    50f8:	18b9      	adds	r1, r7, r2
    50fa:	220c      	movs	r2, #12
    50fc:	18ba      	adds	r2, r7, r2
    50fe:	8809      	ldrh	r1, [r1, #0]
    5100:	8812      	ldrh	r2, [r2, #0]
    5102:	188a      	adds	r2, r1, r2
    5104:	801a      	strh	r2, [r3, #0]
					wr_flag_cfg = 1;
    5106:	4b82      	ldr	r3, [pc, #520]	; (5310 <cmd_common_process+0x97e>)
    5108:	2201      	movs	r2, #1
    510a:	701a      	strb	r2, [r3, #0]
		break;
    510c:	e2cf      	b.n	56ae <cmd_common_process+0xd1c>
		//......................................................................
		case 0x20:	if(size <  7)		{ return; }								//login
    510e:	230e      	movs	r3, #14
    5110:	18fb      	adds	r3, r7, r3
    5112:	881b      	ldrh	r3, [r3, #0]
    5114:	2b06      	cmp	r3, #6
    5116:	d800      	bhi.n	511a <cmd_common_process+0x788>
    5118:	e32f      	b.n	577a <cmd_common_process+0xde8>
					
					
					BYTE ch = 0;
    511a:	2308      	movs	r3, #8
    511c:	18fb      	adds	r3, r7, r3
    511e:	2200      	movs	r2, #0
    5120:	701a      	strb	r2, [r3, #0]
					cnt = 3;
    5122:	230c      	movs	r3, #12
    5124:	18fb      	adds	r3, r7, r3
    5126:	2203      	movs	r2, #3
    5128:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);
    512a:	230c      	movs	r3, #12
    512c:	18fb      	adds	r3, r7, r3
    512e:	881a      	ldrh	r2, [r3, #0]
    5130:	4b72      	ldr	r3, [pc, #456]	; (52fc <cmd_common_process+0x96a>)
    5132:	18d3      	adds	r3, r2, r3
    5134:	0018      	movs	r0, r3
    5136:	4b77      	ldr	r3, [pc, #476]	; (5314 <cmd_common_process+0x982>)
    5138:	4798      	blx	r3
					
					ch = 0;
    513a:	2308      	movs	r3, #8
    513c:	18fb      	adds	r3, r7, r3
    513e:	2200      	movs	r2, #0
    5140:	701a      	strb	r2, [r3, #0]
					
					for (BYTE i = 0; i < 2; i++ ) { if (SRAV(32, &cbuf[3], &accnts.accnt[i].login[0])) 	{ch = i + 1; break;	} } //compare login
    5142:	1dfb      	adds	r3, r7, #7
    5144:	2200      	movs	r2, #0
    5146:	701a      	strb	r2, [r3, #0]
    5148:	e017      	b.n	517a <cmd_common_process+0x7e8>
    514a:	1dfb      	adds	r3, r7, #7
    514c:	781b      	ldrb	r3, [r3, #0]
    514e:	019a      	lsls	r2, r3, #6
    5150:	4b71      	ldr	r3, [pc, #452]	; (5318 <cmd_common_process+0x986>)
    5152:	18d2      	adds	r2, r2, r3
    5154:	4b71      	ldr	r3, [pc, #452]	; (531c <cmd_common_process+0x98a>)
    5156:	0019      	movs	r1, r3
    5158:	2020      	movs	r0, #32
    515a:	4b71      	ldr	r3, [pc, #452]	; (5320 <cmd_common_process+0x98e>)
    515c:	4798      	blx	r3
    515e:	1e03      	subs	r3, r0, #0
    5160:	d006      	beq.n	5170 <cmd_common_process+0x7de>
    5162:	2308      	movs	r3, #8
    5164:	18fb      	adds	r3, r7, r3
    5166:	1dfa      	adds	r2, r7, #7
    5168:	7812      	ldrb	r2, [r2, #0]
    516a:	3201      	adds	r2, #1
    516c:	701a      	strb	r2, [r3, #0]
    516e:	e008      	b.n	5182 <cmd_common_process+0x7f0>
    5170:	1dfb      	adds	r3, r7, #7
    5172:	781a      	ldrb	r2, [r3, #0]
    5174:	1dfb      	adds	r3, r7, #7
    5176:	3201      	adds	r2, #1
    5178:	701a      	strb	r2, [r3, #0]
    517a:	1dfb      	adds	r3, r7, #7
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	2b01      	cmp	r3, #1
    5180:	d9e3      	bls.n	514a <cmd_common_process+0x7b8>
					if (!ch) {send_error_EX();}																				//if login not searched
    5182:	2308      	movs	r3, #8
    5184:	18fb      	adds	r3, r7, r3
    5186:	781b      	ldrb	r3, [r3, #0]
    5188:	2b00      	cmp	r3, #0
    518a:	d118      	bne.n	51be <cmd_common_process+0x82c>
    518c:	230a      	movs	r3, #10
    518e:	18fb      	adds	r3, r7, r3
    5190:	881b      	ldrh	r3, [r3, #0]
    5192:	4a5a      	ldr	r2, [pc, #360]	; (52fc <cmd_common_process+0x96a>)
    5194:	2100      	movs	r1, #0
    5196:	54d1      	strb	r1, [r2, r3]
    5198:	230a      	movs	r3, #10
    519a:	18fb      	adds	r3, r7, r3
    519c:	881b      	ldrh	r3, [r3, #0]
    519e:	3b04      	subs	r3, #4
    51a0:	4a56      	ldr	r2, [pc, #344]	; (52fc <cmd_common_process+0x96a>)
    51a2:	5cd3      	ldrb	r3, [r2, r3]
    51a4:	2204      	movs	r2, #4
    51a6:	2100      	movs	r1, #0
    51a8:	0018      	movs	r0, r3
    51aa:	4b57      	ldr	r3, [pc, #348]	; (5308 <cmd_common_process+0x976>)
    51ac:	4798      	blx	r3
    51ae:	230a      	movs	r3, #10
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	220a      	movs	r2, #10
    51b4:	18ba      	adds	r2, r7, r2
    51b6:	8812      	ldrh	r2, [r2, #0]
    51b8:	3205      	adds	r2, #5
    51ba:	801a      	strh	r2, [r3, #0]
    51bc:	e277      	b.n	56ae <cmd_common_process+0xd1c>

					cnt += 32;
    51be:	230c      	movs	r3, #12
    51c0:	18fb      	adds	r3, r7, r3
    51c2:	220c      	movs	r2, #12
    51c4:	18ba      	adds	r2, r7, r2
    51c6:	8812      	ldrh	r2, [r2, #0]
    51c8:	3220      	adds	r2, #32
    51ca:	801a      	strh	r2, [r3, #0]
					if (!SRAV(32, &cbuf[cnt], &accnts.accnt[ch-1].password[0])) {send_error_EX();}									//if password no match
    51cc:	230c      	movs	r3, #12
    51ce:	18fb      	adds	r3, r7, r3
    51d0:	881a      	ldrh	r2, [r3, #0]
    51d2:	4b4a      	ldr	r3, [pc, #296]	; (52fc <cmd_common_process+0x96a>)
    51d4:	18d1      	adds	r1, r2, r3
    51d6:	2308      	movs	r3, #8
    51d8:	18fb      	adds	r3, r7, r3
    51da:	781b      	ldrb	r3, [r3, #0]
    51dc:	3b01      	subs	r3, #1
    51de:	019b      	lsls	r3, r3, #6
    51e0:	3320      	adds	r3, #32
    51e2:	001a      	movs	r2, r3
    51e4:	4b4c      	ldr	r3, [pc, #304]	; (5318 <cmd_common_process+0x986>)
    51e6:	18d3      	adds	r3, r2, r3
    51e8:	001a      	movs	r2, r3
    51ea:	2020      	movs	r0, #32
    51ec:	4b4c      	ldr	r3, [pc, #304]	; (5320 <cmd_common_process+0x98e>)
    51ee:	4798      	blx	r3
    51f0:	1e03      	subs	r3, r0, #0
    51f2:	d118      	bne.n	5226 <cmd_common_process+0x894>
    51f4:	230a      	movs	r3, #10
    51f6:	18fb      	adds	r3, r7, r3
    51f8:	881b      	ldrh	r3, [r3, #0]
    51fa:	4a40      	ldr	r2, [pc, #256]	; (52fc <cmd_common_process+0x96a>)
    51fc:	2100      	movs	r1, #0
    51fe:	54d1      	strb	r1, [r2, r3]
    5200:	230a      	movs	r3, #10
    5202:	18fb      	adds	r3, r7, r3
    5204:	881b      	ldrh	r3, [r3, #0]
    5206:	3b04      	subs	r3, #4
    5208:	4a3c      	ldr	r2, [pc, #240]	; (52fc <cmd_common_process+0x96a>)
    520a:	5cd3      	ldrb	r3, [r2, r3]
    520c:	2204      	movs	r2, #4
    520e:	2100      	movs	r1, #0
    5210:	0018      	movs	r0, r3
    5212:	4b3d      	ldr	r3, [pc, #244]	; (5308 <cmd_common_process+0x976>)
    5214:	4798      	blx	r3
    5216:	230a      	movs	r3, #10
    5218:	18fb      	adds	r3, r7, r3
    521a:	220a      	movs	r2, #10
    521c:	18ba      	adds	r2, r7, r2
    521e:	8812      	ldrh	r2, [r2, #0]
    5220:	3205      	adds	r2, #5
    5222:	801a      	strh	r2, [r3, #0]
    5224:	e243      	b.n	56ae <cmd_common_process+0xd1c>
																
					if (ch == ADMIN_LOGIN) {save_log(ADMIN_LOGIN); send_admin();} else {send_user();}
    5226:	2308      	movs	r3, #8
    5228:	18fb      	adds	r3, r7, r3
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	2b01      	cmp	r3, #1
    522e:	d11b      	bne.n	5268 <cmd_common_process+0x8d6>
    5230:	4b3c      	ldr	r3, [pc, #240]	; (5324 <cmd_common_process+0x992>)
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	2b00      	cmp	r3, #0
    5236:	d009      	beq.n	524c <cmd_common_process+0x8ba>
    5238:	4b3b      	ldr	r3, [pc, #236]	; (5328 <cmd_common_process+0x996>)
    523a:	781b      	ldrb	r3, [r3, #0]
    523c:	0018      	movs	r0, r3
    523e:	4b3b      	ldr	r3, [pc, #236]	; (532c <cmd_common_process+0x99a>)
    5240:	6819      	ldr	r1, [r3, #0]
    5242:	4b38      	ldr	r3, [pc, #224]	; (5324 <cmd_common_process+0x992>)
    5244:	681a      	ldr	r2, [r3, #0]
    5246:	2301      	movs	r3, #1
    5248:	4c39      	ldr	r4, [pc, #228]	; (5330 <cmd_common_process+0x99e>)
    524a:	47a0      	blx	r4
    524c:	230a      	movs	r3, #10
    524e:	18fb      	adds	r3, r7, r3
    5250:	881b      	ldrh	r3, [r3, #0]
    5252:	4a2a      	ldr	r2, [pc, #168]	; (52fc <cmd_common_process+0x96a>)
    5254:	2101      	movs	r1, #1
    5256:	54d1      	strb	r1, [r2, r3]
    5258:	230a      	movs	r3, #10
    525a:	18fb      	adds	r3, r7, r3
    525c:	881a      	ldrh	r2, [r3, #0]
    525e:	230a      	movs	r3, #10
    5260:	18fb      	adds	r3, r7, r3
    5262:	3201      	adds	r2, #1
    5264:	801a      	strh	r2, [r3, #0]
    5266:	e00c      	b.n	5282 <cmd_common_process+0x8f0>
    5268:	230a      	movs	r3, #10
    526a:	18fb      	adds	r3, r7, r3
    526c:	881b      	ldrh	r3, [r3, #0]
    526e:	4a23      	ldr	r2, [pc, #140]	; (52fc <cmd_common_process+0x96a>)
    5270:	2102      	movs	r1, #2
    5272:	54d1      	strb	r1, [r2, r3]
    5274:	230a      	movs	r3, #10
    5276:	18fb      	adds	r3, r7, r3
    5278:	881a      	ldrh	r2, [r3, #0]
    527a:	230a      	movs	r3, #10
    527c:	18fb      	adds	r3, r7, r3
    527e:	3201      	adds	r2, #1
    5280:	801a      	strh	r2, [r3, #0]
					actv_user_id = ch;
    5282:	4b29      	ldr	r3, [pc, #164]	; (5328 <cmd_common_process+0x996>)
    5284:	2208      	movs	r2, #8
    5286:	18ba      	adds	r2, r7, r2
    5288:	7812      	ldrb	r2, [r2, #0]
    528a:	701a      	strb	r2, [r3, #0]
					log_stat = 1;	
    528c:	4b29      	ldr	r3, [pc, #164]	; (5334 <cmd_common_process+0x9a2>)
    528e:	2201      	movs	r2, #1
    5290:	701a      	strb	r2, [r3, #0]
					loggin_timeout = 0;																						//login status up
    5292:	4b29      	ldr	r3, [pc, #164]	; (5338 <cmd_common_process+0x9a6>)
    5294:	2200      	movs	r2, #0
    5296:	601a      	str	r2, [r3, #0]
					memcpy(&ip_addrs, &eth_sock[0].ip_addr[0], DW_LEN);														//write crc firmware
    5298:	4928      	ldr	r1, [pc, #160]	; (533c <cmd_common_process+0x9aa>)
    529a:	4b24      	ldr	r3, [pc, #144]	; (532c <cmd_common_process+0x99a>)
    529c:	2204      	movs	r2, #4
    529e:	0018      	movs	r0, r3
    52a0:	4b1a      	ldr	r3, [pc, #104]	; (530c <cmd_common_process+0x97a>)
    52a2:	4798      	blx	r3
					num_to_byte(crc_fw, DW_LEN, &cbuf[wn], L_SIDE);			wn += 4;
    52a4:	4b26      	ldr	r3, [pc, #152]	; (5340 <cmd_common_process+0x9ae>)
    52a6:	6818      	ldr	r0, [r3, #0]
    52a8:	230a      	movs	r3, #10
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	881a      	ldrh	r2, [r3, #0]
    52ae:	4b13      	ldr	r3, [pc, #76]	; (52fc <cmd_common_process+0x96a>)
    52b0:	18d2      	adds	r2, r2, r3
    52b2:	2301      	movs	r3, #1
    52b4:	2104      	movs	r1, #4
    52b6:	4c23      	ldr	r4, [pc, #140]	; (5344 <cmd_common_process+0x9b2>)
    52b8:	47a0      	blx	r4
    52ba:	230a      	movs	r3, #10
    52bc:	18fb      	adds	r3, r7, r3
    52be:	220a      	movs	r2, #10
    52c0:	18ba      	adds	r2, r7, r2
    52c2:	8812      	ldrh	r2, [r2, #0]
    52c4:	3204      	adds	r2, #4
    52c6:	801a      	strh	r2, [r3, #0]
		break;
    52c8:	e1f1      	b.n	56ae <cmd_common_process+0xd1c>
		//......................................................................
		case 0x21:	if(size < 5)		{ return; }								//login send
    52ca:	230e      	movs	r3, #14
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	881b      	ldrh	r3, [r3, #0]
    52d0:	2b04      	cmp	r3, #4
    52d2:	d800      	bhi.n	52d6 <cmd_common_process+0x944>
    52d4:	e253      	b.n	577e <cmd_common_process+0xdec>
 					check_permission();
    52d6:	4b14      	ldr	r3, [pc, #80]	; (5328 <cmd_common_process+0x996>)
    52d8:	781b      	ldrb	r3, [r3, #0]
    52da:	2b01      	cmp	r3, #1
    52dc:	d034      	beq.n	5348 <cmd_common_process+0x9b6>
    52de:	230a      	movs	r3, #10
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	881b      	ldrh	r3, [r3, #0]
    52e4:	4a05      	ldr	r2, [pc, #20]	; (52fc <cmd_common_process+0x96a>)
    52e6:	2100      	movs	r1, #0
    52e8:	54d1      	strb	r1, [r2, r3]
    52ea:	230a      	movs	r3, #10
    52ec:	18fb      	adds	r3, r7, r3
    52ee:	881a      	ldrh	r2, [r3, #0]
    52f0:	230a      	movs	r3, #10
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	3201      	adds	r2, #1
    52f6:	801a      	strh	r2, [r3, #0]
    52f8:	e1d9      	b.n	56ae <cmd_common_process+0xd1c>
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	200004a0 	.word	0x200004a0
    5300:	00006f75 	.word	0x00006f75
    5304:	20003cc8 	.word	0x20003cc8
    5308:	0000c8c5 	.word	0x0000c8c5
    530c:	0000c841 	.word	0x0000c841
    5310:	20000458 	.word	0x20000458
    5314:	0000600f 	.word	0x0000600f
    5318:	20002554 	.word	0x20002554
    531c:	200004a3 	.word	0x200004a3
    5320:	00004923 	.word	0x00004923
    5324:	20000454 	.word	0x20000454
    5328:	20000451 	.word	0x20000451
    532c:	2000049c 	.word	0x2000049c
    5330:	00004525 	.word	0x00004525
    5334:	20000450 	.word	0x20000450
    5338:	20000470 	.word	0x20000470
    533c:	200005cc 	.word	0x200005cc
    5340:	2000254c 	.word	0x2000254c
    5344:	000047c9 	.word	0x000047c9
					cnt = 3;
    5348:	230c      	movs	r3, #12
    534a:	18fb      	adds	r3, r7, r3
    534c:	2203      	movs	r2, #3
    534e:	801a      	strh	r2, [r3, #0]
					
					memcpy(&cbuf[3], &accnts.accnt[0].login[0], 256);
    5350:	2380      	movs	r3, #128	; 0x80
    5352:	005a      	lsls	r2, r3, #1
    5354:	49c1      	ldr	r1, [pc, #772]	; (565c <cmd_common_process+0xcca>)
    5356:	4bc2      	ldr	r3, [pc, #776]	; (5660 <cmd_common_process+0xcce>)
    5358:	0018      	movs	r0, r3
    535a:	4bc2      	ldr	r3, [pc, #776]	; (5664 <cmd_common_process+0xcd2>)
    535c:	4798      	blx	r3
					crypted(&cbuf[cnt]);		cnt += 64;
    535e:	230c      	movs	r3, #12
    5360:	18fb      	adds	r3, r7, r3
    5362:	881a      	ldrh	r2, [r3, #0]
    5364:	4bc0      	ldr	r3, [pc, #768]	; (5668 <cmd_common_process+0xcd6>)
    5366:	18d3      	adds	r3, r2, r3
    5368:	0018      	movs	r0, r3
    536a:	4bc0      	ldr	r3, [pc, #768]	; (566c <cmd_common_process+0xcda>)
    536c:	4798      	blx	r3
    536e:	230c      	movs	r3, #12
    5370:	18fb      	adds	r3, r7, r3
    5372:	220c      	movs	r2, #12
    5374:	18ba      	adds	r2, r7, r2
    5376:	8812      	ldrh	r2, [r2, #0]
    5378:	3240      	adds	r2, #64	; 0x40
    537a:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    537c:	230c      	movs	r3, #12
    537e:	18fb      	adds	r3, r7, r3
    5380:	881a      	ldrh	r2, [r3, #0]
    5382:	4bb9      	ldr	r3, [pc, #740]	; (5668 <cmd_common_process+0xcd6>)
    5384:	18d3      	adds	r3, r2, r3
    5386:	0018      	movs	r0, r3
    5388:	4bb8      	ldr	r3, [pc, #736]	; (566c <cmd_common_process+0xcda>)
    538a:	4798      	blx	r3
    538c:	230c      	movs	r3, #12
    538e:	18fb      	adds	r3, r7, r3
    5390:	220c      	movs	r2, #12
    5392:	18ba      	adds	r2, r7, r2
    5394:	8812      	ldrh	r2, [r2, #0]
    5396:	3240      	adds	r2, #64	; 0x40
    5398:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    539a:	230c      	movs	r3, #12
    539c:	18fb      	adds	r3, r7, r3
    539e:	881a      	ldrh	r2, [r3, #0]
    53a0:	4bb1      	ldr	r3, [pc, #708]	; (5668 <cmd_common_process+0xcd6>)
    53a2:	18d3      	adds	r3, r2, r3
    53a4:	0018      	movs	r0, r3
    53a6:	4bb1      	ldr	r3, [pc, #708]	; (566c <cmd_common_process+0xcda>)
    53a8:	4798      	blx	r3
    53aa:	230c      	movs	r3, #12
    53ac:	18fb      	adds	r3, r7, r3
    53ae:	220c      	movs	r2, #12
    53b0:	18ba      	adds	r2, r7, r2
    53b2:	8812      	ldrh	r2, [r2, #0]
    53b4:	3240      	adds	r2, #64	; 0x40
    53b6:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53b8:	230c      	movs	r3, #12
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	881a      	ldrh	r2, [r3, #0]
    53be:	4baa      	ldr	r3, [pc, #680]	; (5668 <cmd_common_process+0xcd6>)
    53c0:	18d3      	adds	r3, r2, r3
    53c2:	0018      	movs	r0, r3
    53c4:	4ba9      	ldr	r3, [pc, #676]	; (566c <cmd_common_process+0xcda>)
    53c6:	4798      	blx	r3
    53c8:	230c      	movs	r3, #12
    53ca:	18fb      	adds	r3, r7, r3
    53cc:	220c      	movs	r2, #12
    53ce:	18ba      	adds	r2, r7, r2
    53d0:	8812      	ldrh	r2, [r2, #0]
    53d2:	3240      	adds	r2, #64	; 0x40
    53d4:	801a      	strh	r2, [r3, #0]
					wn += 256;
    53d6:	230a      	movs	r3, #10
    53d8:	18fb      	adds	r3, r7, r3
    53da:	220a      	movs	r2, #10
    53dc:	18ba      	adds	r2, r7, r2
    53de:	8812      	ldrh	r2, [r2, #0]
    53e0:	3201      	adds	r2, #1
    53e2:	32ff      	adds	r2, #255	; 0xff
    53e4:	801a      	strh	r2, [r3, #0]
		break;
    53e6:	e162      	b.n	56ae <cmd_common_process+0xd1c>
		//......................................................................
		case 0x22:	if(size <  5)		{ return; }								//login change
    53e8:	230e      	movs	r3, #14
    53ea:	18fb      	adds	r3, r7, r3
    53ec:	881b      	ldrh	r3, [r3, #0]
    53ee:	2b04      	cmp	r3, #4
    53f0:	d800      	bhi.n	53f4 <cmd_common_process+0xa62>
    53f2:	e1c6      	b.n	5782 <cmd_common_process+0xdf0>
					check_permission();
    53f4:	4b9e      	ldr	r3, [pc, #632]	; (5670 <cmd_common_process+0xcde>)
    53f6:	781b      	ldrb	r3, [r3, #0]
    53f8:	2b01      	cmp	r3, #1
    53fa:	d00d      	beq.n	5418 <cmd_common_process+0xa86>
    53fc:	230a      	movs	r3, #10
    53fe:	18fb      	adds	r3, r7, r3
    5400:	881b      	ldrh	r3, [r3, #0]
    5402:	4a99      	ldr	r2, [pc, #612]	; (5668 <cmd_common_process+0xcd6>)
    5404:	2100      	movs	r1, #0
    5406:	54d1      	strb	r1, [r2, r3]
    5408:	230a      	movs	r3, #10
    540a:	18fb      	adds	r3, r7, r3
    540c:	881a      	ldrh	r2, [r3, #0]
    540e:	230a      	movs	r3, #10
    5410:	18fb      	adds	r3, r7, r3
    5412:	3201      	adds	r2, #1
    5414:	801a      	strh	r2, [r3, #0]
    5416:	e14a      	b.n	56ae <cmd_common_process+0xd1c>
					cnt = 3;
    5418:	230c      	movs	r3, #12
    541a:	18fb      	adds	r3, r7, r3
    541c:	2203      	movs	r2, #3
    541e:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5420:	230c      	movs	r3, #12
    5422:	18fb      	adds	r3, r7, r3
    5424:	881a      	ldrh	r2, [r3, #0]
    5426:	4b90      	ldr	r3, [pc, #576]	; (5668 <cmd_common_process+0xcd6>)
    5428:	18d3      	adds	r3, r2, r3
    542a:	0018      	movs	r0, r3
    542c:	4b91      	ldr	r3, [pc, #580]	; (5674 <cmd_common_process+0xce2>)
    542e:	4798      	blx	r3
    5430:	230c      	movs	r3, #12
    5432:	18fb      	adds	r3, r7, r3
    5434:	220c      	movs	r2, #12
    5436:	18ba      	adds	r2, r7, r2
    5438:	8812      	ldrh	r2, [r2, #0]
    543a:	3240      	adds	r2, #64	; 0x40
    543c:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    543e:	230c      	movs	r3, #12
    5440:	18fb      	adds	r3, r7, r3
    5442:	881a      	ldrh	r2, [r3, #0]
    5444:	4b88      	ldr	r3, [pc, #544]	; (5668 <cmd_common_process+0xcd6>)
    5446:	18d3      	adds	r3, r2, r3
    5448:	0018      	movs	r0, r3
    544a:	4b8a      	ldr	r3, [pc, #552]	; (5674 <cmd_common_process+0xce2>)
    544c:	4798      	blx	r3
    544e:	230c      	movs	r3, #12
    5450:	18fb      	adds	r3, r7, r3
    5452:	220c      	movs	r2, #12
    5454:	18ba      	adds	r2, r7, r2
    5456:	8812      	ldrh	r2, [r2, #0]
    5458:	3240      	adds	r2, #64	; 0x40
    545a:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    545c:	230c      	movs	r3, #12
    545e:	18fb      	adds	r3, r7, r3
    5460:	881a      	ldrh	r2, [r3, #0]
    5462:	4b81      	ldr	r3, [pc, #516]	; (5668 <cmd_common_process+0xcd6>)
    5464:	18d3      	adds	r3, r2, r3
    5466:	0018      	movs	r0, r3
    5468:	4b82      	ldr	r3, [pc, #520]	; (5674 <cmd_common_process+0xce2>)
    546a:	4798      	blx	r3
    546c:	230c      	movs	r3, #12
    546e:	18fb      	adds	r3, r7, r3
    5470:	220c      	movs	r2, #12
    5472:	18ba      	adds	r2, r7, r2
    5474:	8812      	ldrh	r2, [r2, #0]
    5476:	3240      	adds	r2, #64	; 0x40
    5478:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;
    547a:	230c      	movs	r3, #12
    547c:	18fb      	adds	r3, r7, r3
    547e:	881a      	ldrh	r2, [r3, #0]
    5480:	4b79      	ldr	r3, [pc, #484]	; (5668 <cmd_common_process+0xcd6>)
    5482:	18d3      	adds	r3, r2, r3
    5484:	0018      	movs	r0, r3
    5486:	4b7b      	ldr	r3, [pc, #492]	; (5674 <cmd_common_process+0xce2>)
    5488:	4798      	blx	r3
    548a:	230c      	movs	r3, #12
    548c:	18fb      	adds	r3, r7, r3
    548e:	220c      	movs	r2, #12
    5490:	18ba      	adds	r2, r7, r2
    5492:	8812      	ldrh	r2, [r2, #0]
    5494:	3240      	adds	r2, #64	; 0x40
    5496:	801a      	strh	r2, [r3, #0]
					
					memcpy(&accnts.accnt[0].login[0], &cbuf[3], 256);
    5498:	2380      	movs	r3, #128	; 0x80
    549a:	005a      	lsls	r2, r3, #1
    549c:	4970      	ldr	r1, [pc, #448]	; (5660 <cmd_common_process+0xcce>)
    549e:	4b6f      	ldr	r3, [pc, #444]	; (565c <cmd_common_process+0xcca>)
    54a0:	0018      	movs	r0, r3
    54a2:	4b70      	ldr	r3, [pc, #448]	; (5664 <cmd_common_process+0xcd2>)
    54a4:	4798      	blx	r3
					wr_flag_acc = 1;
    54a6:	4b74      	ldr	r3, [pc, #464]	; (5678 <cmd_common_process+0xce6>)
    54a8:	2201      	movs	r2, #1
    54aa:	701a      	strb	r2, [r3, #0]

		break;
    54ac:	e0ff      	b.n	56ae <cmd_common_process+0xd1c>
		
		//......................................................................
		case 0x23:	if(size <  5)		{ return; }								//read logs
    54ae:	230e      	movs	r3, #14
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	881b      	ldrh	r3, [r3, #0]
    54b4:	2b04      	cmp	r3, #4
    54b6:	d800      	bhi.n	54ba <cmd_common_process+0xb28>
    54b8:	e165      	b.n	5786 <cmd_common_process+0xdf4>
 					check_permission();
    54ba:	4b6d      	ldr	r3, [pc, #436]	; (5670 <cmd_common_process+0xcde>)
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	2b01      	cmp	r3, #1
    54c0:	d00d      	beq.n	54de <cmd_common_process+0xb4c>
    54c2:	230a      	movs	r3, #10
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	881b      	ldrh	r3, [r3, #0]
    54c8:	4a67      	ldr	r2, [pc, #412]	; (5668 <cmd_common_process+0xcd6>)
    54ca:	2100      	movs	r1, #0
    54cc:	54d1      	strb	r1, [r2, r3]
    54ce:	230a      	movs	r3, #10
    54d0:	18fb      	adds	r3, r7, r3
    54d2:	881a      	ldrh	r2, [r3, #0]
    54d4:	230a      	movs	r3, #10
    54d6:	18fb      	adds	r3, r7, r3
    54d8:	3201      	adds	r2, #1
    54da:	801a      	strh	r2, [r3, #0]
    54dc:	e0e7      	b.n	56ae <cmd_common_process+0xd1c>
					cnt = 3; wn++;
    54de:	230c      	movs	r3, #12
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	2203      	movs	r2, #3
    54e4:	801a      	strh	r2, [r3, #0]
    54e6:	230a      	movs	r3, #10
    54e8:	18fb      	adds	r3, r7, r3
    54ea:	881a      	ldrh	r2, [r3, #0]
    54ec:	230a      	movs	r3, #10
    54ee:	18fb      	adds	r3, r7, r3
    54f0:	3201      	adds	r2, #1
    54f2:	801a      	strh	r2, [r3, #0]
					flash_read(LOGS_ADDR + (256 * cbuf[3]), &cbuf[4], 256);		wn +=256;
    54f4:	4b5c      	ldr	r3, [pc, #368]	; (5668 <cmd_common_process+0xcd6>)
    54f6:	78db      	ldrb	r3, [r3, #3]
    54f8:	021b      	lsls	r3, r3, #8
    54fa:	22b0      	movs	r2, #176	; 0xb0
    54fc:	0292      	lsls	r2, r2, #10
    54fe:	1898      	adds	r0, r3, r2
    5500:	2380      	movs	r3, #128	; 0x80
    5502:	005a      	lsls	r2, r3, #1
    5504:	4b5d      	ldr	r3, [pc, #372]	; (567c <cmd_common_process+0xcea>)
    5506:	0019      	movs	r1, r3
    5508:	4b5d      	ldr	r3, [pc, #372]	; (5680 <cmd_common_process+0xcee>)
    550a:	4798      	blx	r3
    550c:	230a      	movs	r3, #10
    550e:	18fb      	adds	r3, r7, r3
    5510:	220a      	movs	r2, #10
    5512:	18ba      	adds	r2, r7, r2
    5514:	8812      	ldrh	r2, [r2, #0]
    5516:	3201      	adds	r2, #1
    5518:	32ff      	adds	r2, #255	; 0xff
    551a:	801a      	strh	r2, [r3, #0]
		break;
    551c:	e0c7      	b.n	56ae <cmd_common_process+0xd1c>
		//......................................................................
		case 0x27:	if(size  !=  5) { return; }									//change config
    551e:	230e      	movs	r3, #14
    5520:	18fb      	adds	r3, r7, r3
    5522:	881b      	ldrh	r3, [r3, #0]
    5524:	2b05      	cmp	r3, #5
    5526:	d000      	beq.n	552a <cmd_common_process+0xb98>
    5528:	e12f      	b.n	578a <cmd_common_process+0xdf8>
					check_permission();	
    552a:	4b51      	ldr	r3, [pc, #324]	; (5670 <cmd_common_process+0xcde>)
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2b01      	cmp	r3, #1
    5530:	d00d      	beq.n	554e <cmd_common_process+0xbbc>
    5532:	230a      	movs	r3, #10
    5534:	18fb      	adds	r3, r7, r3
    5536:	881b      	ldrh	r3, [r3, #0]
    5538:	4a4b      	ldr	r2, [pc, #300]	; (5668 <cmd_common_process+0xcd6>)
    553a:	2100      	movs	r1, #0
    553c:	54d1      	strb	r1, [r2, r3]
    553e:	230a      	movs	r3, #10
    5540:	18fb      	adds	r3, r7, r3
    5542:	881a      	ldrh	r2, [r3, #0]
    5544:	230a      	movs	r3, #10
    5546:	18fb      	adds	r3, r7, r3
    5548:	3201      	adds	r2, #1
    554a:	801a      	strh	r2, [r3, #0]
    554c:	e0af      	b.n	56ae <cmd_common_process+0xd1c>
					
					if (wr_flag_cfg)
    554e:	4b4d      	ldr	r3, [pc, #308]	; (5684 <cmd_common_process+0xcf2>)
    5550:	781b      	ldrb	r3, [r3, #0]
    5552:	2b00      	cmp	r3, #0
    5554:	d02d      	beq.n	55b2 <cmd_common_process+0xc20>
					{	
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    5556:	2380      	movs	r3, #128	; 0x80
    5558:	005a      	lsls	r2, r3, #1
    555a:	4b4b      	ldr	r3, [pc, #300]	; (5688 <cmd_common_process+0xcf6>)
    555c:	0011      	movs	r1, r2
    555e:	0018      	movs	r0, r3
    5560:	4b4a      	ldr	r3, [pc, #296]	; (568c <cmd_common_process+0xcfa>)
    5562:	4798      	blx	r3
    5564:	1e03      	subs	r3, r0, #0
    5566:	d000      	beq.n	556a <cmd_common_process+0xbd8>
    5568:	e0a0      	b.n	56ac <cmd_common_process+0xd1a>
						memcpy(&cfg_1,&cfg_1_tmp,sizeof(CFG_1));
    556a:	4a49      	ldr	r2, [pc, #292]	; (5690 <cmd_common_process+0xcfe>)
    556c:	4b46      	ldr	r3, [pc, #280]	; (5688 <cmd_common_process+0xcf6>)
    556e:	0010      	movs	r0, r2
    5570:	0019      	movs	r1, r3
    5572:	2380      	movs	r3, #128	; 0x80
    5574:	005b      	lsls	r3, r3, #1
    5576:	001a      	movs	r2, r3
    5578:	4b3a      	ldr	r3, [pc, #232]	; (5664 <cmd_common_process+0xcd2>)
    557a:	4798      	blx	r3
						save_log(EEPROM);
    557c:	4b45      	ldr	r3, [pc, #276]	; (5694 <cmd_common_process+0xd02>)
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	2b00      	cmp	r3, #0
    5582:	d009      	beq.n	5598 <cmd_common_process+0xc06>
    5584:	4b3a      	ldr	r3, [pc, #232]	; (5670 <cmd_common_process+0xcde>)
    5586:	781b      	ldrb	r3, [r3, #0]
    5588:	0018      	movs	r0, r3
    558a:	4b43      	ldr	r3, [pc, #268]	; (5698 <cmd_common_process+0xd06>)
    558c:	6819      	ldr	r1, [r3, #0]
    558e:	4b41      	ldr	r3, [pc, #260]	; (5694 <cmd_common_process+0xd02>)
    5590:	681a      	ldr	r2, [r3, #0]
    5592:	2302      	movs	r3, #2
    5594:	4c41      	ldr	r4, [pc, #260]	; (569c <cmd_common_process+0xd0a>)
    5596:	47a0      	blx	r4
						wn |=+cfg_save();
    5598:	4b41      	ldr	r3, [pc, #260]	; (56a0 <cmd_common_process+0xd0e>)
    559a:	4798      	blx	r3
    559c:	0003      	movs	r3, r0
    559e:	b21a      	sxth	r2, r3
    55a0:	230a      	movs	r3, #10
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	2100      	movs	r1, #0
    55a6:	5e5b      	ldrsh	r3, [r3, r1]
    55a8:	4313      	orrs	r3, r2
    55aa:	b21a      	sxth	r2, r3
    55ac:	230a      	movs	r3, #10
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	801a      	strh	r2, [r3, #0]
					}
					
					if (wr_flag_acc)
    55b2:	4b31      	ldr	r3, [pc, #196]	; (5678 <cmd_common_process+0xce6>)
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d010      	beq.n	55dc <cmd_common_process+0xc4a>
					{
						acc(WRITE);
    55ba:	2001      	movs	r0, #1
    55bc:	4b39      	ldr	r3, [pc, #228]	; (56a4 <cmd_common_process+0xd12>)
    55be:	4798      	blx	r3
						save_log(ACC_CHANGE);
    55c0:	4b34      	ldr	r3, [pc, #208]	; (5694 <cmd_common_process+0xd02>)
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d009      	beq.n	55dc <cmd_common_process+0xc4a>
    55c8:	4b29      	ldr	r3, [pc, #164]	; (5670 <cmd_common_process+0xcde>)
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	0018      	movs	r0, r3
    55ce:	4b32      	ldr	r3, [pc, #200]	; (5698 <cmd_common_process+0xd06>)
    55d0:	6819      	ldr	r1, [r3, #0]
    55d2:	4b30      	ldr	r3, [pc, #192]	; (5694 <cmd_common_process+0xd02>)
    55d4:	681a      	ldr	r2, [r3, #0]
    55d6:	2303      	movs	r3, #3
    55d8:	4c30      	ldr	r4, [pc, #192]	; (569c <cmd_common_process+0xd0a>)
    55da:	47a0      	blx	r4
					}
					
					
					reset=1;
    55dc:	4b32      	ldr	r3, [pc, #200]	; (56a8 <cmd_common_process+0xd16>)
    55de:	2201      	movs	r2, #1
    55e0:	801a      	strh	r2, [r3, #0]
		break;
    55e2:	e064      	b.n	56ae <cmd_common_process+0xd1c>
		//......................................................................
		case 0x29:	if(size  !=  5) { return; }									//reboot
    55e4:	230e      	movs	r3, #14
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	881b      	ldrh	r3, [r3, #0]
    55ea:	2b05      	cmp	r3, #5
    55ec:	d000      	beq.n	55f0 <cmd_common_process+0xc5e>
    55ee:	e0ce      	b.n	578e <cmd_common_process+0xdfc>
					check_permission();
    55f0:	4b1f      	ldr	r3, [pc, #124]	; (5670 <cmd_common_process+0xcde>)
    55f2:	781b      	ldrb	r3, [r3, #0]
    55f4:	2b01      	cmp	r3, #1
    55f6:	d00d      	beq.n	5614 <cmd_common_process+0xc82>
    55f8:	230a      	movs	r3, #10
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	881b      	ldrh	r3, [r3, #0]
    55fe:	4a1a      	ldr	r2, [pc, #104]	; (5668 <cmd_common_process+0xcd6>)
    5600:	2100      	movs	r1, #0
    5602:	54d1      	strb	r1, [r2, r3]
    5604:	230a      	movs	r3, #10
    5606:	18fb      	adds	r3, r7, r3
    5608:	881a      	ldrh	r2, [r3, #0]
    560a:	230a      	movs	r3, #10
    560c:	18fb      	adds	r3, r7, r3
    560e:	3201      	adds	r2, #1
    5610:	801a      	strh	r2, [r3, #0]
    5612:	e04c      	b.n	56ae <cmd_common_process+0xd1c>
					reset=1; wn++;
    5614:	4b24      	ldr	r3, [pc, #144]	; (56a8 <cmd_common_process+0xd16>)
    5616:	2201      	movs	r2, #1
    5618:	801a      	strh	r2, [r3, #0]
    561a:	230a      	movs	r3, #10
    561c:	18fb      	adds	r3, r7, r3
    561e:	881a      	ldrh	r2, [r3, #0]
    5620:	230a      	movs	r3, #10
    5622:	18fb      	adds	r3, r7, r3
    5624:	3201      	adds	r2, #1
    5626:	801a      	strh	r2, [r3, #0]
					send_admin();
    5628:	230a      	movs	r3, #10
    562a:	18fb      	adds	r3, r7, r3
    562c:	881b      	ldrh	r3, [r3, #0]
    562e:	4a0e      	ldr	r2, [pc, #56]	; (5668 <cmd_common_process+0xcd6>)
    5630:	2101      	movs	r1, #1
    5632:	54d1      	strb	r1, [r2, r3]
    5634:	230a      	movs	r3, #10
    5636:	18fb      	adds	r3, r7, r3
    5638:	881a      	ldrh	r2, [r3, #0]
    563a:	230a      	movs	r3, #10
    563c:	18fb      	adds	r3, r7, r3
    563e:	3201      	adds	r2, #1
    5640:	801a      	strh	r2, [r3, #0]
		break;
    5642:	e034      	b.n	56ae <cmd_common_process+0xd1c>
		break;
    5644:	46c0      	nop			; (mov r8, r8)
    5646:	e032      	b.n	56ae <cmd_common_process+0xd1c>
					if(ixo > sizeof(CFG_1)	) { break;  }
    5648:	46c0      	nop			; (mov r8, r8)
    564a:	e030      	b.n	56ae <cmd_common_process+0xd1c>
					if(ixo > sizeof(CFG_2)	) { break;  }
    564c:	46c0      	nop			; (mov r8, r8)
    564e:	e02e      	b.n	56ae <cmd_common_process+0xd1c>
					if(cnt  ==  0) { break; }
    5650:	46c0      	nop			; (mov r8, r8)
    5652:	e02c      	b.n	56ae <cmd_common_process+0xd1c>
					if(ixo       >= sizeof(CFG_1)) { break; }
    5654:	46c0      	nop			; (mov r8, r8)
    5656:	e02a      	b.n	56ae <cmd_common_process+0xd1c>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    5658:	46c0      	nop			; (mov r8, r8)
    565a:	e028      	b.n	56ae <cmd_common_process+0xd1c>
    565c:	20002554 	.word	0x20002554
    5660:	200004a3 	.word	0x200004a3
    5664:	0000c841 	.word	0x0000c841
    5668:	200004a0 	.word	0x200004a0
    566c:	00005fe1 	.word	0x00005fe1
    5670:	20000451 	.word	0x20000451
    5674:	0000600f 	.word	0x0000600f
    5678:	20000459 	.word	0x20000459
    567c:	200004a4 	.word	0x200004a4
    5680:	0000690d 	.word	0x0000690d
    5684:	20000458 	.word	0x20000458
    5688:	20003cc8 	.word	0x20003cc8
    568c:	00005d0d 	.word	0x00005d0d
    5690:	20003dc8 	.word	0x20003dc8
    5694:	20000454 	.word	0x20000454
    5698:	2000049c 	.word	0x2000049c
    569c:	00004525 	.word	0x00004525
    56a0:	0000b005 	.word	0x0000b005
    56a4:	00004215 	.word	0x00004215
    56a8:	20002548 	.word	0x20002548
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    56ac:	46c0      	nop			; (mov r8, r8)
		//......................................................................
		
		default :	   return;
	}
	
	cbuf[2]|=0x80;
    56ae:	4b3a      	ldr	r3, [pc, #232]	; (5798 <cmd_common_process+0xe06>)
    56b0:	789b      	ldrb	r3, [r3, #2]
    56b2:	2280      	movs	r2, #128	; 0x80
    56b4:	4252      	negs	r2, r2
    56b6:	4313      	orrs	r3, r2
    56b8:	b2da      	uxtb	r2, r3
    56ba:	4b37      	ldr	r3, [pc, #220]	; (5798 <cmd_common_process+0xe06>)
    56bc:	709a      	strb	r2, [r3, #2]

	cs= crc16_ccit(cbuf,wn);
    56be:	1cbc      	adds	r4, r7, #2
    56c0:	230a      	movs	r3, #10
    56c2:	18fb      	adds	r3, r7, r3
    56c4:	881a      	ldrh	r2, [r3, #0]
    56c6:	4b34      	ldr	r3, [pc, #208]	; (5798 <cmd_common_process+0xe06>)
    56c8:	0011      	movs	r1, r2
    56ca:	0018      	movs	r0, r3
    56cc:	4b33      	ldr	r3, [pc, #204]	; (579c <cmd_common_process+0xe0a>)
    56ce:	4798      	blx	r3
    56d0:	0003      	movs	r3, r0
    56d2:	8023      	strh	r3, [r4, #0]
	
	cbuf[wn] = (BYTE)(cs & 0x00ff);         wn++;
    56d4:	230a      	movs	r3, #10
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	881b      	ldrh	r3, [r3, #0]
    56da:	1cba      	adds	r2, r7, #2
    56dc:	8812      	ldrh	r2, [r2, #0]
    56de:	b2d1      	uxtb	r1, r2
    56e0:	4a2d      	ldr	r2, [pc, #180]	; (5798 <cmd_common_process+0xe06>)
    56e2:	54d1      	strb	r1, [r2, r3]
    56e4:	230a      	movs	r3, #10
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	881a      	ldrh	r2, [r3, #0]
    56ea:	230a      	movs	r3, #10
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	3201      	adds	r2, #1
    56f0:	801a      	strh	r2, [r3, #0]
	cbuf[wn] = (BYTE)((cs & 0xff00) >> 8);  wn++;
    56f2:	230a      	movs	r3, #10
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	881b      	ldrh	r3, [r3, #0]
    56f8:	1cba      	adds	r2, r7, #2
    56fa:	8812      	ldrh	r2, [r2, #0]
    56fc:	0a12      	lsrs	r2, r2, #8
    56fe:	b292      	uxth	r2, r2
    5700:	b2d1      	uxtb	r1, r2
    5702:	4a25      	ldr	r2, [pc, #148]	; (5798 <cmd_common_process+0xe06>)
    5704:	54d1      	strb	r1, [r2, r3]
    5706:	230a      	movs	r3, #10
    5708:	18fb      	adds	r3, r7, r3
    570a:	881a      	ldrh	r2, [r3, #0]
    570c:	230a      	movs	r3, #10
    570e:	18fb      	adds	r3, r7, r3
    5710:	3201      	adds	r2, #1
    5712:	801a      	strh	r2, [r3, #0]
	
	memcpy((BYTE*)&eth_sock[0].data,cbuf,wn);
    5714:	230a      	movs	r3, #10
    5716:	18fb      	adds	r3, r7, r3
    5718:	881a      	ldrh	r2, [r3, #0]
    571a:	491f      	ldr	r1, [pc, #124]	; (5798 <cmd_common_process+0xe06>)
    571c:	4b20      	ldr	r3, [pc, #128]	; (57a0 <cmd_common_process+0xe0e>)
    571e:	0018      	movs	r0, r3
    5720:	4b20      	ldr	r3, [pc, #128]	; (57a4 <cmd_common_process+0xe12>)
    5722:	4798      	blx	r3
	
	eth_sock[0].len[0]=((wn & 0xFF00)>>8);
    5724:	230a      	movs	r3, #10
    5726:	18fb      	adds	r3, r7, r3
    5728:	881b      	ldrh	r3, [r3, #0]
    572a:	0a1b      	lsrs	r3, r3, #8
    572c:	b29b      	uxth	r3, r3
    572e:	b2da      	uxtb	r2, r3
    5730:	4b1d      	ldr	r3, [pc, #116]	; (57a8 <cmd_common_process+0xe16>)
    5732:	719a      	strb	r2, [r3, #6]
	eth_sock[0].len[1]=(wn & 0x00FF);
    5734:	230a      	movs	r3, #10
    5736:	18fb      	adds	r3, r7, r3
    5738:	881b      	ldrh	r3, [r3, #0]
    573a:	b2da      	uxtb	r2, r3
    573c:	4b1a      	ldr	r3, [pc, #104]	; (57a8 <cmd_common_process+0xe16>)
    573e:	71da      	strb	r2, [r3, #7]
	eth_sock[0].w_status=1;
    5740:	4b19      	ldr	r3, [pc, #100]	; (57a8 <cmd_common_process+0xe16>)
    5742:	4a1a      	ldr	r2, [pc, #104]	; (57ac <cmd_common_process+0xe1a>)
    5744:	2101      	movs	r1, #1
    5746:	5499      	strb	r1, [r3, r2]
    5748:	e022      	b.n	5790 <cmd_common_process+0xdfe>
	if(eth_sock[0].r_status==FALSE) {return;}
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	e020      	b.n	5790 <cmd_common_process+0xdfe>
	if(size	 <    5			  )	{ return; }
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	e01e      	b.n	5790 <cmd_common_process+0xdfe>
	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	e01c      	b.n	5790 <cmd_common_process+0xdfe>
	if(addr !=  0){return;}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	e01a      	b.n	5790 <cmd_common_process+0xdfe>
	if (((cbuf[0] != 0x00) || (cbuf[2] != 0x20)) && (!log_stat)) {return 0;}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	e018      	b.n	5790 <cmd_common_process+0xdfe>
		default :	   return;
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	e016      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x00:	if(size  !=  9) { return; }
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	e014      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    5766:	46c0      	nop			; (mov r8, r8)
    5768:	e012      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	e010      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	e00e      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x10:	if(size <  6) { return; }
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	e00c      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x17:	if(size  <  7) { return; }
    5776:	46c0      	nop			; (mov r8, r8)
    5778:	e00a      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x20:	if(size <  7)		{ return; }								//login
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	e008      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x21:	if(size < 5)		{ return; }								//login send
    577e:	46c0      	nop			; (mov r8, r8)
    5780:	e006      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x22:	if(size <  5)		{ return; }								//login change
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	e004      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x23:	if(size <  5)		{ return; }								//read logs
    5786:	46c0      	nop			; (mov r8, r8)
    5788:	e002      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x27:	if(size  !=  5) { return; }									//change config
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	e000      	b.n	5790 <cmd_common_process+0xdfe>
		case 0x29:	if(size  !=  5) { return; }									//reboot
    578e:	46c0      	nop			; (mov r8, r8)
}
    5790:	46bd      	mov	sp, r7
    5792:	b005      	add	sp, #20
    5794:	bd90      	pop	{r4, r7, pc}
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	200004a0 	.word	0x200004a0
    579c:	00005d0d 	.word	0x00005d0d
    57a0:	200005d4 	.word	0x200005d4
    57a4:	0000c841 	.word	0x0000c841
    57a8:	200005cc 	.word	0x200005cc
    57ac:	000005d2 	.word	0x000005d2

000057b0 <cmd_usart_process>:

void cmd_usart_process (void)
{
    57b0:	b580      	push	{r7, lr}
    57b2:	af00      	add	r7, sp, #0
	static BYTE n_port=1;
	
	for(n_port=1;n_port<5;n_port++)
    57b4:	4b13      	ldr	r3, [pc, #76]	; (5804 <cmd_usart_process+0x54>)
    57b6:	2201      	movs	r2, #1
    57b8:	701a      	strb	r2, [r3, #0]
    57ba:	e01b      	b.n	57f4 <cmd_usart_process+0x44>
	{
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57bc:	4b11      	ldr	r3, [pc, #68]	; (5804 <cmd_usart_process+0x54>)
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	1e5a      	subs	r2, r3, #1
    57c2:	4911      	ldr	r1, [pc, #68]	; (5808 <cmd_usart_process+0x58>)
    57c4:	2034      	movs	r0, #52	; 0x34
    57c6:	0013      	movs	r3, r2
    57c8:	005b      	lsls	r3, r3, #1
    57ca:	189b      	adds	r3, r3, r2
    57cc:	009b      	lsls	r3, r3, #2
    57ce:	189b      	adds	r3, r3, r2
    57d0:	18cb      	adds	r3, r1, r3
    57d2:	181b      	adds	r3, r3, r0
    57d4:	781b      	ldrb	r3, [r3, #0]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d005      	beq.n	57e6 <cmd_usart_process+0x36>
		usart_process(n_port);
    57da:	4b0a      	ldr	r3, [pc, #40]	; (5804 <cmd_usart_process+0x54>)
    57dc:	781b      	ldrb	r3, [r3, #0]
    57de:	0018      	movs	r0, r3
    57e0:	f000 f814 	bl	580c <usart_process>
    57e4:	e000      	b.n	57e8 <cmd_usart_process+0x38>
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57e6:	46c0      	nop			; (mov r8, r8)
	for(n_port=1;n_port<5;n_port++)
    57e8:	4b06      	ldr	r3, [pc, #24]	; (5804 <cmd_usart_process+0x54>)
    57ea:	781b      	ldrb	r3, [r3, #0]
    57ec:	3301      	adds	r3, #1
    57ee:	b2da      	uxtb	r2, r3
    57f0:	4b04      	ldr	r3, [pc, #16]	; (5804 <cmd_usart_process+0x54>)
    57f2:	701a      	strb	r2, [r3, #0]
    57f4:	4b03      	ldr	r3, [pc, #12]	; (5804 <cmd_usart_process+0x54>)
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	2b04      	cmp	r3, #4
    57fa:	d9df      	bls.n	57bc <cmd_usart_process+0xc>
	}
}
    57fc:	46c0      	nop			; (mov r8, r8)
    57fe:	46bd      	mov	sp, r7
    5800:	bd80      	pop	{r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	20000000 	.word	0x20000000
    5808:	20003dc8 	.word	0x20003dc8

0000580c <usart_process>:

void usart_process (BYTE n_port)
{
    580c:	b5b0      	push	{r4, r5, r7, lr}
    580e:	b084      	sub	sp, #16
    5810:	af00      	add	r7, sp, #0
    5812:	0002      	movs	r2, r0
    5814:	1dfb      	adds	r3, r7, #7
    5816:	701a      	strb	r2, [r3, #0]
	WORD size=0;
    5818:	230e      	movs	r3, #14
    581a:	18fb      	adds	r3, r7, r3
    581c:	2200      	movs	r2, #0
    581e:	801a      	strh	r2, [r3, #0]
	WORD crc;
	
	switch(port[n_port-1].stage)
    5820:	1dfb      	adds	r3, r7, #7
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	1e5a      	subs	r2, r3, #1
    5826:	48bb      	ldr	r0, [pc, #748]	; (5b14 <usart_process+0x308>)
    5828:	2387      	movs	r3, #135	; 0x87
    582a:	0099      	lsls	r1, r3, #2
    582c:	0013      	movs	r3, r2
    582e:	00db      	lsls	r3, r3, #3
    5830:	189b      	adds	r3, r3, r2
    5832:	019b      	lsls	r3, r3, #6
    5834:	18c3      	adds	r3, r0, r3
    5836:	185b      	adds	r3, r3, r1
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	b2db      	uxtb	r3, r3
    583c:	2b00      	cmp	r3, #0
    583e:	d003      	beq.n	5848 <usart_process+0x3c>
    5840:	2b01      	cmp	r3, #1
    5842:	d100      	bne.n	5846 <usart_process+0x3a>
    5844:	e104      	b.n	5a50 <usart_process+0x244>
    5846:	e23b      	b.n	5cc0 <usart_process+0x4b4>
	{
		case RS485_WRITE:
			//ETH message check
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5848:	1dfb      	adds	r3, r7, #7
    584a:	781b      	ldrb	r3, [r3, #0]
    584c:	4ab2      	ldr	r2, [pc, #712]	; (5b18 <usart_process+0x30c>)
    584e:	49b3      	ldr	r1, [pc, #716]	; (5b1c <usart_process+0x310>)
    5850:	48b3      	ldr	r0, [pc, #716]	; (5b20 <usart_process+0x314>)
    5852:	4343      	muls	r3, r0
    5854:	18d3      	adds	r3, r2, r3
    5856:	185b      	adds	r3, r3, r1
    5858:	781b      	ldrb	r3, [r3, #0]
    585a:	2b00      	cmp	r3, #0
    585c:	d100      	bne.n	5860 <usart_process+0x54>
    585e:	e23f      	b.n	5ce0 <usart_process+0x4d4>
			
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5860:	1dfb      	adds	r3, r7, #7
    5862:	781b      	ldrb	r3, [r3, #0]
    5864:	1e5a      	subs	r2, r3, #1
    5866:	49af      	ldr	r1, [pc, #700]	; (5b24 <usart_process+0x318>)
    5868:	206a      	movs	r0, #106	; 0x6a
    586a:	0013      	movs	r3, r2
    586c:	00db      	lsls	r3, r3, #3
    586e:	189b      	adds	r3, r3, r2
    5870:	005b      	lsls	r3, r3, #1
    5872:	18cb      	adds	r3, r1, r3
    5874:	181b      	adds	r3, r3, r0
    5876:	781b      	ldrb	r3, [r3, #0]
    5878:	2b00      	cmp	r3, #0
    587a:	d108      	bne.n	588e <usart_process+0x82>
    587c:	1dfb      	adds	r3, r7, #7
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	3b01      	subs	r3, #1
    5882:	0018      	movs	r0, r3
    5884:	4ba8      	ldr	r3, [pc, #672]	; (5b28 <usart_process+0x31c>)
    5886:	4798      	blx	r3
    5888:	1e03      	subs	r3, r0, #0
    588a:	d100      	bne.n	588e <usart_process+0x82>
    588c:	e22a      	b.n	5ce4 <usart_process+0x4d8>
			
 			port[n_port-1].time_port = port[n_port-1].tout_port*10;							//check timeout
    588e:	1dfb      	adds	r3, r7, #7
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	1e5a      	subs	r2, r3, #1
    5894:	1dfb      	adds	r3, r7, #7
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	1e59      	subs	r1, r3, #1
    589a:	4c9e      	ldr	r4, [pc, #632]	; (5b14 <usart_process+0x308>)
    589c:	2386      	movs	r3, #134	; 0x86
    589e:	0098      	lsls	r0, r3, #2
    58a0:	000b      	movs	r3, r1
    58a2:	00db      	lsls	r3, r3, #3
    58a4:	185b      	adds	r3, r3, r1
    58a6:	019b      	lsls	r3, r3, #6
    58a8:	18e3      	adds	r3, r4, r3
    58aa:	181b      	adds	r3, r3, r0
    58ac:	881b      	ldrh	r3, [r3, #0]
    58ae:	b29b      	uxth	r3, r3
    58b0:	0019      	movs	r1, r3
    58b2:	000b      	movs	r3, r1
    58b4:	009b      	lsls	r3, r3, #2
    58b6:	185b      	adds	r3, r3, r1
    58b8:	005b      	lsls	r3, r3, #1
    58ba:	001c      	movs	r4, r3
    58bc:	4895      	ldr	r0, [pc, #596]	; (5b14 <usart_process+0x308>)
    58be:	2388      	movs	r3, #136	; 0x88
    58c0:	0099      	lsls	r1, r3, #2
    58c2:	0013      	movs	r3, r2
    58c4:	00db      	lsls	r3, r3, #3
    58c6:	189b      	adds	r3, r3, r2
    58c8:	019b      	lsls	r3, r3, #6
    58ca:	18c3      	adds	r3, r0, r3
    58cc:	185b      	adds	r3, r3, r1
    58ce:	601c      	str	r4, [r3, #0]
		
			size = eth_sock[n_port].len[0] << 8 | eth_sock[n_port].len[1];				//give size
    58d0:	1dfb      	adds	r3, r7, #7
    58d2:	781b      	ldrb	r3, [r3, #0]
    58d4:	4a90      	ldr	r2, [pc, #576]	; (5b18 <usart_process+0x30c>)
    58d6:	4992      	ldr	r1, [pc, #584]	; (5b20 <usart_process+0x314>)
    58d8:	434b      	muls	r3, r1
    58da:	18d3      	adds	r3, r2, r3
    58dc:	3306      	adds	r3, #6
    58de:	781b      	ldrb	r3, [r3, #0]
    58e0:	021b      	lsls	r3, r3, #8
    58e2:	b21a      	sxth	r2, r3
    58e4:	1dfb      	adds	r3, r7, #7
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	498b      	ldr	r1, [pc, #556]	; (5b18 <usart_process+0x30c>)
    58ea:	488d      	ldr	r0, [pc, #564]	; (5b20 <usart_process+0x314>)
    58ec:	4343      	muls	r3, r0
    58ee:	18cb      	adds	r3, r1, r3
    58f0:	3307      	adds	r3, #7
    58f2:	781b      	ldrb	r3, [r3, #0]
    58f4:	b21b      	sxth	r3, r3
    58f6:	4313      	orrs	r3, r2
    58f8:	b21a      	sxth	r2, r3
    58fa:	230e      	movs	r3, #14
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	801a      	strh	r2, [r3, #0]
		
			if(size>USART_BUF_SIZE)	{eth_sock[n_port].r_status = 0; return;}			//check overload
    5900:	230e      	movs	r3, #14
    5902:	18fb      	adds	r3, r7, r3
    5904:	881a      	ldrh	r2, [r3, #0]
    5906:	2380      	movs	r3, #128	; 0x80
    5908:	005b      	lsls	r3, r3, #1
    590a:	429a      	cmp	r2, r3
    590c:	d90a      	bls.n	5924 <usart_process+0x118>
    590e:	1dfb      	adds	r3, r7, #7
    5910:	781b      	ldrb	r3, [r3, #0]
    5912:	4a81      	ldr	r2, [pc, #516]	; (5b18 <usart_process+0x30c>)
    5914:	4981      	ldr	r1, [pc, #516]	; (5b1c <usart_process+0x310>)
    5916:	4882      	ldr	r0, [pc, #520]	; (5b20 <usart_process+0x314>)
    5918:	4343      	muls	r3, r0
    591a:	18d3      	adds	r3, r2, r3
    591c:	185b      	adds	r3, r3, r1
    591e:	2200      	movs	r2, #0
    5920:	701a      	strb	r2, [r3, #0]
    5922:	e1e2      	b.n	5cea <usart_process+0x4de>
				
			if (n_port == 4)
    5924:	1dfb      	adds	r3, r7, #7
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	2b04      	cmp	r3, #4
    592a:	d102      	bne.n	5932 <usart_process+0x126>
			{
				n_port = 4;
    592c:	1dfb      	adds	r3, r7, #7
    592e:	2204      	movs	r2, #4
    5930:	701a      	strb	r2, [r3, #0]
			}
			
			switch(cfg_1.sock_rs485[n_port - 1].pl)
    5932:	1dfb      	adds	r3, r7, #7
    5934:	781b      	ldrb	r3, [r3, #0]
    5936:	1e5a      	subs	r2, r3, #1
    5938:	497a      	ldr	r1, [pc, #488]	; (5b24 <usart_process+0x318>)
    593a:	2036      	movs	r0, #54	; 0x36
    593c:	0013      	movs	r3, r2
    593e:	005b      	lsls	r3, r3, #1
    5940:	189b      	adds	r3, r3, r2
    5942:	009b      	lsls	r3, r3, #2
    5944:	189b      	adds	r3, r3, r2
    5946:	18cb      	adds	r3, r1, r3
    5948:	181b      	adds	r3, r3, r0
    594a:	781b      	ldrb	r3, [r3, #0]
    594c:	2b02      	cmp	r3, #2
    594e:	d150      	bne.n	59f2 <usart_process+0x1e6>
			{
				case MBUS:		
					crc = crc16_mbus(eth_sock[n_port].data+MBAP_HDR_LEN, size - MBAP_HDR_LEN);
    5950:	1dfb      	adds	r3, r7, #7
    5952:	781b      	ldrb	r3, [r3, #0]
    5954:	4a72      	ldr	r2, [pc, #456]	; (5b20 <usart_process+0x314>)
    5956:	4353      	muls	r3, r2
    5958:	3308      	adds	r3, #8
    595a:	001a      	movs	r2, r3
    595c:	4b6e      	ldr	r3, [pc, #440]	; (5b18 <usart_process+0x30c>)
    595e:	18d3      	adds	r3, r2, r3
    5960:	1d9a      	adds	r2, r3, #6
    5962:	230e      	movs	r3, #14
    5964:	18fb      	adds	r3, r7, r3
    5966:	881b      	ldrh	r3, [r3, #0]
    5968:	3b06      	subs	r3, #6
    596a:	b29b      	uxth	r3, r3
    596c:	210c      	movs	r1, #12
    596e:	187c      	adds	r4, r7, r1
    5970:	0019      	movs	r1, r3
    5972:	0010      	movs	r0, r2
    5974:	4b6d      	ldr	r3, [pc, #436]	; (5b2c <usart_process+0x320>)
    5976:	4798      	blx	r3
    5978:	0003      	movs	r3, r0
    597a:	8023      	strh	r3, [r4, #0]
					eth_sock[n_port].data[size] = crc; 
    597c:	1dfb      	adds	r3, r7, #7
    597e:	781a      	ldrb	r2, [r3, #0]
    5980:	230e      	movs	r3, #14
    5982:	18fb      	adds	r3, r7, r3
    5984:	881b      	ldrh	r3, [r3, #0]
    5986:	210c      	movs	r1, #12
    5988:	1879      	adds	r1, r7, r1
    598a:	8809      	ldrh	r1, [r1, #0]
    598c:	b2cc      	uxtb	r4, r1
    598e:	4962      	ldr	r1, [pc, #392]	; (5b18 <usart_process+0x30c>)
    5990:	4863      	ldr	r0, [pc, #396]	; (5b20 <usart_process+0x314>)
    5992:	4342      	muls	r2, r0
    5994:	188a      	adds	r2, r1, r2
    5996:	18d3      	adds	r3, r2, r3
    5998:	3308      	adds	r3, #8
    599a:	1c22      	adds	r2, r4, #0
    599c:	701a      	strb	r2, [r3, #0]
					eth_sock[n_port].data[size + 1] = crc >> 8;
    599e:	1dfb      	adds	r3, r7, #7
    59a0:	781a      	ldrb	r2, [r3, #0]
    59a2:	230e      	movs	r3, #14
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	881b      	ldrh	r3, [r3, #0]
    59a8:	3301      	adds	r3, #1
    59aa:	210c      	movs	r1, #12
    59ac:	1879      	adds	r1, r7, r1
    59ae:	8809      	ldrh	r1, [r1, #0]
    59b0:	0a09      	lsrs	r1, r1, #8
    59b2:	b289      	uxth	r1, r1
    59b4:	b2cc      	uxtb	r4, r1
    59b6:	4958      	ldr	r1, [pc, #352]	; (5b18 <usart_process+0x30c>)
    59b8:	4859      	ldr	r0, [pc, #356]	; (5b20 <usart_process+0x314>)
    59ba:	4342      	muls	r2, r0
    59bc:	188a      	adds	r2, r1, r2
    59be:	18d3      	adds	r3, r2, r3
    59c0:	3308      	adds	r3, #8
    59c2:	1c22      	adds	r2, r4, #0
    59c4:	701a      	strb	r2, [r3, #0]
					usart_write(n_port - 1, eth_sock[n_port].data + MBAP_HDR_LEN, size - MBAP_HDR_LEN + 2);
    59c6:	1dfb      	adds	r3, r7, #7
    59c8:	781b      	ldrb	r3, [r3, #0]
    59ca:	3b01      	subs	r3, #1
    59cc:	b2d8      	uxtb	r0, r3
    59ce:	1dfb      	adds	r3, r7, #7
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	4a53      	ldr	r2, [pc, #332]	; (5b20 <usart_process+0x314>)
    59d4:	4353      	muls	r3, r2
    59d6:	3308      	adds	r3, #8
    59d8:	001a      	movs	r2, r3
    59da:	4b4f      	ldr	r3, [pc, #316]	; (5b18 <usart_process+0x30c>)
    59dc:	18d3      	adds	r3, r2, r3
    59de:	1d99      	adds	r1, r3, #6
    59e0:	230e      	movs	r3, #14
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	881b      	ldrh	r3, [r3, #0]
    59e6:	3b04      	subs	r3, #4
    59e8:	b29b      	uxth	r3, r3
    59ea:	001a      	movs	r2, r3
    59ec:	4b50      	ldr	r3, [pc, #320]	; (5b30 <usart_process+0x324>)
    59ee:	4798      	blx	r3
				break;
    59f0:	e012      	b.n	5a18 <usart_process+0x20c>
				default://GATE
					usart_write(n_port - 1, eth_sock[n_port].data, size);
    59f2:	1dfb      	adds	r3, r7, #7
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	3b01      	subs	r3, #1
    59f8:	b2d8      	uxtb	r0, r3
    59fa:	1dfb      	adds	r3, r7, #7
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	4a48      	ldr	r2, [pc, #288]	; (5b20 <usart_process+0x314>)
    5a00:	4353      	muls	r3, r2
    5a02:	3308      	adds	r3, #8
    5a04:	001a      	movs	r2, r3
    5a06:	4b44      	ldr	r3, [pc, #272]	; (5b18 <usart_process+0x30c>)
    5a08:	18d1      	adds	r1, r2, r3
    5a0a:	230e      	movs	r3, #14
    5a0c:	18fb      	adds	r3, r7, r3
    5a0e:	881b      	ldrh	r3, [r3, #0]
    5a10:	001a      	movs	r2, r3
    5a12:	4b47      	ldr	r3, [pc, #284]	; (5b30 <usart_process+0x324>)
    5a14:	4798      	blx	r3
				break;
    5a16:	46c0      	nop			; (mov r8, r8)
			}
			port[n_port-1].stage = RS485_READ;
    5a18:	1dfb      	adds	r3, r7, #7
    5a1a:	781b      	ldrb	r3, [r3, #0]
    5a1c:	1e5a      	subs	r2, r3, #1
    5a1e:	483d      	ldr	r0, [pc, #244]	; (5b14 <usart_process+0x308>)
    5a20:	2387      	movs	r3, #135	; 0x87
    5a22:	0099      	lsls	r1, r3, #2
    5a24:	0013      	movs	r3, r2
    5a26:	00db      	lsls	r3, r3, #3
    5a28:	189b      	adds	r3, r3, r2
    5a2a:	019b      	lsls	r3, r3, #6
    5a2c:	18c3      	adds	r3, r0, r3
    5a2e:	185b      	adds	r3, r3, r1
    5a30:	2201      	movs	r2, #1
    5a32:	701a      	strb	r2, [r3, #0]
			port[n_port-1].rn = 0;
    5a34:	1dfb      	adds	r3, r7, #7
    5a36:	781b      	ldrb	r3, [r3, #0]
    5a38:	1e5a      	subs	r2, r3, #1
    5a3a:	4936      	ldr	r1, [pc, #216]	; (5b14 <usart_process+0x308>)
    5a3c:	483d      	ldr	r0, [pc, #244]	; (5b34 <usart_process+0x328>)
    5a3e:	0013      	movs	r3, r2
    5a40:	00db      	lsls	r3, r3, #3
    5a42:	189b      	adds	r3, r3, r2
    5a44:	019b      	lsls	r3, r3, #6
    5a46:	18cb      	adds	r3, r1, r3
    5a48:	181b      	adds	r3, r3, r0
    5a4a:	2200      	movs	r2, #0
    5a4c:	801a      	strh	r2, [r3, #0]

		return;
    5a4e:	e14c      	b.n	5cea <usart_process+0x4de>
		case RS485_READ://UP
			size = usart_read(n_port - 1, port[n_port-1].rbuf, USART_BUF_SIZE);   //give mess size
    5a50:	1dfb      	adds	r3, r7, #7
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	3b01      	subs	r3, #1
    5a56:	b2d8      	uxtb	r0, r3
    5a58:	1dfb      	adds	r3, r7, #7
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	1e5a      	subs	r2, r3, #1
    5a5e:	0013      	movs	r3, r2
    5a60:	00db      	lsls	r3, r3, #3
    5a62:	189b      	adds	r3, r3, r2
    5a64:	019b      	lsls	r3, r3, #6
    5a66:	3309      	adds	r3, #9
    5a68:	33ff      	adds	r3, #255	; 0xff
    5a6a:	001a      	movs	r2, r3
    5a6c:	4b29      	ldr	r3, [pc, #164]	; (5b14 <usart_process+0x308>)
    5a6e:	18d3      	adds	r3, r2, r3
    5a70:	1c59      	adds	r1, r3, #1
    5a72:	230e      	movs	r3, #14
    5a74:	18fc      	adds	r4, r7, r3
    5a76:	2380      	movs	r3, #128	; 0x80
    5a78:	005b      	lsls	r3, r3, #1
    5a7a:	001a      	movs	r2, r3
    5a7c:	4b2e      	ldr	r3, [pc, #184]	; (5b38 <usart_process+0x32c>)
    5a7e:	4798      	blx	r3
    5a80:	0003      	movs	r3, r0
    5a82:	8023      	strh	r3, [r4, #0]
			if (size != 0)
    5a84:	230e      	movs	r3, #14
    5a86:	18fb      	adds	r3, r7, r3
    5a88:	881b      	ldrh	r3, [r3, #0]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d100      	bne.n	5a90 <usart_process+0x284>
    5a8e:	e0e2      	b.n	5c56 <usart_process+0x44a>
			{
				switch (cfg_1.sock_rs485[n_port - 1].pl)
    5a90:	1dfb      	adds	r3, r7, #7
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	1e5a      	subs	r2, r3, #1
    5a96:	4923      	ldr	r1, [pc, #140]	; (5b24 <usart_process+0x318>)
    5a98:	2036      	movs	r0, #54	; 0x36
    5a9a:	0013      	movs	r3, r2
    5a9c:	005b      	lsls	r3, r3, #1
    5a9e:	189b      	adds	r3, r3, r2
    5aa0:	009b      	lsls	r3, r3, #2
    5aa2:	189b      	adds	r3, r3, r2
    5aa4:	18cb      	adds	r3, r1, r3
    5aa6:	181b      	adds	r3, r3, r0
    5aa8:	781b      	ldrb	r3, [r3, #0]
    5aaa:	2b02      	cmp	r3, #2
    5aac:	d148      	bne.n	5b40 <usart_process+0x334>
				{
					case MBUS:
					
						memcpy(eth_sock[n_port].data + MBAP_HDR_LEN, port[n_port-1].rbuf, size);
    5aae:	1dfb      	adds	r3, r7, #7
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	4a1b      	ldr	r2, [pc, #108]	; (5b20 <usart_process+0x314>)
    5ab4:	4353      	muls	r3, r2
    5ab6:	3308      	adds	r3, #8
    5ab8:	001a      	movs	r2, r3
    5aba:	4b17      	ldr	r3, [pc, #92]	; (5b18 <usart_process+0x30c>)
    5abc:	18d3      	adds	r3, r2, r3
    5abe:	1d98      	adds	r0, r3, #6
    5ac0:	1dfb      	adds	r3, r7, #7
    5ac2:	781b      	ldrb	r3, [r3, #0]
    5ac4:	1e5a      	subs	r2, r3, #1
    5ac6:	0013      	movs	r3, r2
    5ac8:	00db      	lsls	r3, r3, #3
    5aca:	189b      	adds	r3, r3, r2
    5acc:	019b      	lsls	r3, r3, #6
    5ace:	3309      	adds	r3, #9
    5ad0:	33ff      	adds	r3, #255	; 0xff
    5ad2:	001a      	movs	r2, r3
    5ad4:	4b0f      	ldr	r3, [pc, #60]	; (5b14 <usart_process+0x308>)
    5ad6:	18d3      	adds	r3, r2, r3
    5ad8:	1c59      	adds	r1, r3, #1
    5ada:	230e      	movs	r3, #14
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	881b      	ldrh	r3, [r3, #0]
    5ae0:	001a      	movs	r2, r3
    5ae2:	4b16      	ldr	r3, [pc, #88]	; (5b3c <usart_process+0x330>)
    5ae4:	4798      	blx	r3
						size += MBAP_HDR_LEN - 2;
    5ae6:	230e      	movs	r3, #14
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	220e      	movs	r2, #14
    5aec:	18ba      	adds	r2, r7, r2
    5aee:	8812      	ldrh	r2, [r2, #0]
    5af0:	3204      	adds	r2, #4
    5af2:	801a      	strh	r2, [r3, #0]
						eth_sock[n_port].data[5]=size-MBAP_HDR_LEN;
    5af4:	1dfb      	adds	r3, r7, #7
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	220e      	movs	r2, #14
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	8812      	ldrh	r2, [r2, #0]
    5afe:	b2d2      	uxtb	r2, r2
    5b00:	3a06      	subs	r2, #6
    5b02:	b2d0      	uxtb	r0, r2
    5b04:	4a04      	ldr	r2, [pc, #16]	; (5b18 <usart_process+0x30c>)
    5b06:	4906      	ldr	r1, [pc, #24]	; (5b20 <usart_process+0x314>)
    5b08:	434b      	muls	r3, r1
    5b0a:	18d3      	adds	r3, r2, r3
    5b0c:	330d      	adds	r3, #13
    5b0e:	1c02      	adds	r2, r0, #0
    5b10:	701a      	strb	r2, [r3, #0]
					break;
    5b12:	e031      	b.n	5b78 <usart_process+0x36c>
    5b14:	200031fc 	.word	0x200031fc
    5b18:	200005cc 	.word	0x200005cc
    5b1c:	000005d1 	.word	0x000005d1
    5b20:	000005e5 	.word	0x000005e5
    5b24:	20003dc8 	.word	0x20003dc8
    5b28:	00004399 	.word	0x00004399
    5b2c:	00005dcd 	.word	0x00005dcd
    5b30:	00008e9d 	.word	0x00008e9d
    5b34:	0000020e 	.word	0x0000020e
    5b38:	00008fb1 	.word	0x00008fb1
    5b3c:	0000c841 	.word	0x0000c841
					default://GATE
						memcpy(eth_sock[n_port].data, port[n_port-1].rbuf, size); 
    5b40:	1dfb      	adds	r3, r7, #7
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	4a6a      	ldr	r2, [pc, #424]	; (5cf0 <usart_process+0x4e4>)
    5b46:	4353      	muls	r3, r2
    5b48:	3308      	adds	r3, #8
    5b4a:	001a      	movs	r2, r3
    5b4c:	4b69      	ldr	r3, [pc, #420]	; (5cf4 <usart_process+0x4e8>)
    5b4e:	18d0      	adds	r0, r2, r3
    5b50:	1dfb      	adds	r3, r7, #7
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	1e5a      	subs	r2, r3, #1
    5b56:	0013      	movs	r3, r2
    5b58:	00db      	lsls	r3, r3, #3
    5b5a:	189b      	adds	r3, r3, r2
    5b5c:	019b      	lsls	r3, r3, #6
    5b5e:	3309      	adds	r3, #9
    5b60:	33ff      	adds	r3, #255	; 0xff
    5b62:	001a      	movs	r2, r3
    5b64:	4b64      	ldr	r3, [pc, #400]	; (5cf8 <usart_process+0x4ec>)
    5b66:	18d3      	adds	r3, r2, r3
    5b68:	1c59      	adds	r1, r3, #1
    5b6a:	230e      	movs	r3, #14
    5b6c:	18fb      	adds	r3, r7, r3
    5b6e:	881b      	ldrh	r3, [r3, #0]
    5b70:	001a      	movs	r2, r3
    5b72:	4b62      	ldr	r3, [pc, #392]	; (5cfc <usart_process+0x4f0>)
    5b74:	4798      	blx	r3
					break;
    5b76:	46c0      	nop			; (mov r8, r8)
				}
			
				eth_sock[n_port].len[0]		= (size & 0xFF00) >> 8;
    5b78:	1dfb      	adds	r3, r7, #7
    5b7a:	781b      	ldrb	r3, [r3, #0]
    5b7c:	220e      	movs	r2, #14
    5b7e:	18ba      	adds	r2, r7, r2
    5b80:	8812      	ldrh	r2, [r2, #0]
    5b82:	0a12      	lsrs	r2, r2, #8
    5b84:	b292      	uxth	r2, r2
    5b86:	b2d0      	uxtb	r0, r2
    5b88:	4a5a      	ldr	r2, [pc, #360]	; (5cf4 <usart_process+0x4e8>)
    5b8a:	4959      	ldr	r1, [pc, #356]	; (5cf0 <usart_process+0x4e4>)
    5b8c:	434b      	muls	r3, r1
    5b8e:	18d3      	adds	r3, r2, r3
    5b90:	3306      	adds	r3, #6
    5b92:	1c02      	adds	r2, r0, #0
    5b94:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].len[1]		=  size & 0x00FF;
    5b96:	1dfb      	adds	r3, r7, #7
    5b98:	781b      	ldrb	r3, [r3, #0]
    5b9a:	220e      	movs	r2, #14
    5b9c:	18ba      	adds	r2, r7, r2
    5b9e:	8812      	ldrh	r2, [r2, #0]
    5ba0:	b2d0      	uxtb	r0, r2
    5ba2:	4a54      	ldr	r2, [pc, #336]	; (5cf4 <usart_process+0x4e8>)
    5ba4:	4952      	ldr	r1, [pc, #328]	; (5cf0 <usart_process+0x4e4>)
    5ba6:	434b      	muls	r3, r1
    5ba8:	18d3      	adds	r3, r2, r3
    5baa:	3307      	adds	r3, #7
    5bac:	1c02      	adds	r2, r0, #0
    5bae:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].w_status	= 1;
    5bb0:	1dfb      	adds	r3, r7, #7
    5bb2:	781b      	ldrb	r3, [r3, #0]
    5bb4:	4a4f      	ldr	r2, [pc, #316]	; (5cf4 <usart_process+0x4e8>)
    5bb6:	4952      	ldr	r1, [pc, #328]	; (5d00 <usart_process+0x4f4>)
    5bb8:	484d      	ldr	r0, [pc, #308]	; (5cf0 <usart_process+0x4e4>)
    5bba:	4343      	muls	r3, r0
    5bbc:	18d3      	adds	r3, r2, r3
    5bbe:	185b      	adds	r3, r3, r1
    5bc0:	2201      	movs	r2, #1
    5bc2:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt			= (port[n_port-1].tout_port*10)-port[n_port-1].time_port;
    5bc4:	1dfb      	adds	r3, r7, #7
    5bc6:	781b      	ldrb	r3, [r3, #0]
    5bc8:	1e5a      	subs	r2, r3, #1
    5bca:	1dfb      	adds	r3, r7, #7
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	1e59      	subs	r1, r3, #1
    5bd0:	4c49      	ldr	r4, [pc, #292]	; (5cf8 <usart_process+0x4ec>)
    5bd2:	2386      	movs	r3, #134	; 0x86
    5bd4:	0098      	lsls	r0, r3, #2
    5bd6:	000b      	movs	r3, r1
    5bd8:	00db      	lsls	r3, r3, #3
    5bda:	185b      	adds	r3, r3, r1
    5bdc:	019b      	lsls	r3, r3, #6
    5bde:	18e3      	adds	r3, r4, r3
    5be0:	181b      	adds	r3, r3, r0
    5be2:	881b      	ldrh	r3, [r3, #0]
    5be4:	b29b      	uxth	r3, r3
    5be6:	1c19      	adds	r1, r3, #0
    5be8:	0089      	lsls	r1, r1, #2
    5bea:	18cb      	adds	r3, r1, r3
    5bec:	18db      	adds	r3, r3, r3
    5bee:	b298      	uxth	r0, r3
    5bf0:	1dfb      	adds	r3, r7, #7
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	1e59      	subs	r1, r3, #1
    5bf6:	4d40      	ldr	r5, [pc, #256]	; (5cf8 <usart_process+0x4ec>)
    5bf8:	2388      	movs	r3, #136	; 0x88
    5bfa:	009c      	lsls	r4, r3, #2
    5bfc:	000b      	movs	r3, r1
    5bfe:	00db      	lsls	r3, r3, #3
    5c00:	185b      	adds	r3, r3, r1
    5c02:	019b      	lsls	r3, r3, #6
    5c04:	18eb      	adds	r3, r5, r3
    5c06:	191b      	adds	r3, r3, r4
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	b29b      	uxth	r3, r3
    5c0c:	1ac3      	subs	r3, r0, r3
    5c0e:	b29c      	uxth	r4, r3
    5c10:	4939      	ldr	r1, [pc, #228]	; (5cf8 <usart_process+0x4ec>)
    5c12:	483c      	ldr	r0, [pc, #240]	; (5d04 <usart_process+0x4f8>)
    5c14:	0013      	movs	r3, r2
    5c16:	00db      	lsls	r3, r3, #3
    5c18:	189b      	adds	r3, r3, r2
    5c1a:	019b      	lsls	r3, r3, #6
    5c1c:	18cb      	adds	r3, r1, r3
    5c1e:	181b      	adds	r3, r3, r0
    5c20:	1c22      	adds	r2, r4, #0
    5c22:	801a      	strh	r2, [r3, #0]
				port[n_port-1].stage		= RS485_WRITE;
    5c24:	1dfb      	adds	r3, r7, #7
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	1e5a      	subs	r2, r3, #1
    5c2a:	4833      	ldr	r0, [pc, #204]	; (5cf8 <usart_process+0x4ec>)
    5c2c:	2387      	movs	r3, #135	; 0x87
    5c2e:	0099      	lsls	r1, r3, #2
    5c30:	0013      	movs	r3, r2
    5c32:	00db      	lsls	r3, r3, #3
    5c34:	189b      	adds	r3, r3, r2
    5c36:	019b      	lsls	r3, r3, #6
    5c38:	18c3      	adds	r3, r0, r3
    5c3a:	185b      	adds	r3, r3, r1
    5c3c:	2200      	movs	r2, #0
    5c3e:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].r_status	= 0;
    5c40:	1dfb      	adds	r3, r7, #7
    5c42:	781b      	ldrb	r3, [r3, #0]
    5c44:	4a2b      	ldr	r2, [pc, #172]	; (5cf4 <usart_process+0x4e8>)
    5c46:	4930      	ldr	r1, [pc, #192]	; (5d08 <usart_process+0x4fc>)
    5c48:	4829      	ldr	r0, [pc, #164]	; (5cf0 <usart_process+0x4e4>)
    5c4a:	4343      	muls	r3, r0
    5c4c:	18d3      	adds	r3, r2, r3
    5c4e:	185b      	adds	r3, r3, r1
    5c50:	2200      	movs	r2, #0
    5c52:	701a      	strb	r2, [r3, #0]
				return;
    5c54:	e049      	b.n	5cea <usart_process+0x4de>
			}
			if (port[n_port-1].time_port==0)
    5c56:	1dfb      	adds	r3, r7, #7
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	1e5a      	subs	r2, r3, #1
    5c5c:	4826      	ldr	r0, [pc, #152]	; (5cf8 <usart_process+0x4ec>)
    5c5e:	2388      	movs	r3, #136	; 0x88
    5c60:	0099      	lsls	r1, r3, #2
    5c62:	0013      	movs	r3, r2
    5c64:	00db      	lsls	r3, r3, #3
    5c66:	189b      	adds	r3, r3, r2
    5c68:	019b      	lsls	r3, r3, #6
    5c6a:	18c3      	adds	r3, r0, r3
    5c6c:	185b      	adds	r3, r3, r1
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	2b00      	cmp	r3, #0
    5c72:	d139      	bne.n	5ce8 <usart_process+0x4dc>
			{
				port[n_port-1].stage = RS485_WRITE;
    5c74:	1dfb      	adds	r3, r7, #7
    5c76:	781b      	ldrb	r3, [r3, #0]
    5c78:	1e5a      	subs	r2, r3, #1
    5c7a:	481f      	ldr	r0, [pc, #124]	; (5cf8 <usart_process+0x4ec>)
    5c7c:	2387      	movs	r3, #135	; 0x87
    5c7e:	0099      	lsls	r1, r3, #2
    5c80:	0013      	movs	r3, r2
    5c82:	00db      	lsls	r3, r3, #3
    5c84:	189b      	adds	r3, r3, r2
    5c86:	019b      	lsls	r3, r3, #6
    5c88:	18c3      	adds	r3, r0, r3
    5c8a:	185b      	adds	r3, r3, r1
    5c8c:	2200      	movs	r2, #0
    5c8e:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt 	 = 0;
    5c90:	1dfb      	adds	r3, r7, #7
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	1e5a      	subs	r2, r3, #1
    5c96:	4918      	ldr	r1, [pc, #96]	; (5cf8 <usart_process+0x4ec>)
    5c98:	481a      	ldr	r0, [pc, #104]	; (5d04 <usart_process+0x4f8>)
    5c9a:	0013      	movs	r3, r2
    5c9c:	00db      	lsls	r3, r3, #3
    5c9e:	189b      	adds	r3, r3, r2
    5ca0:	019b      	lsls	r3, r3, #6
    5ca2:	18cb      	adds	r3, r1, r3
    5ca4:	181b      	adds	r3, r3, r0
    5ca6:	2200      	movs	r2, #0
    5ca8:	801a      	strh	r2, [r3, #0]
				eth_sock[n_port].r_status = 0;
    5caa:	1dfb      	adds	r3, r7, #7
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	4a11      	ldr	r2, [pc, #68]	; (5cf4 <usart_process+0x4e8>)
    5cb0:	4915      	ldr	r1, [pc, #84]	; (5d08 <usart_process+0x4fc>)
    5cb2:	480f      	ldr	r0, [pc, #60]	; (5cf0 <usart_process+0x4e4>)
    5cb4:	4343      	muls	r3, r0
    5cb6:	18d3      	adds	r3, r2, r3
    5cb8:	185b      	adds	r3, r3, r1
    5cba:	2200      	movs	r2, #0
    5cbc:	701a      	strb	r2, [r3, #0]
			}
		return;
    5cbe:	e013      	b.n	5ce8 <usart_process+0x4dc>
		default:
			port[n_port-1].stage = RS485_WRITE;
    5cc0:	1dfb      	adds	r3, r7, #7
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	1e5a      	subs	r2, r3, #1
    5cc6:	480c      	ldr	r0, [pc, #48]	; (5cf8 <usart_process+0x4ec>)
    5cc8:	2387      	movs	r3, #135	; 0x87
    5cca:	0099      	lsls	r1, r3, #2
    5ccc:	0013      	movs	r3, r2
    5cce:	00db      	lsls	r3, r3, #3
    5cd0:	189b      	adds	r3, r3, r2
    5cd2:	019b      	lsls	r3, r3, #6
    5cd4:	18c3      	adds	r3, r0, r3
    5cd6:	185b      	adds	r3, r3, r1
    5cd8:	2200      	movs	r2, #0
    5cda:	701a      	strb	r2, [r3, #0]
		break;
    5cdc:	46c0      	nop			; (mov r8, r8)
    5cde:	e004      	b.n	5cea <usart_process+0x4de>
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5ce0:	46c0      	nop			; (mov r8, r8)
    5ce2:	e002      	b.n	5cea <usart_process+0x4de>
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	e000      	b.n	5cea <usart_process+0x4de>
		return;
    5ce8:	46c0      	nop			; (mov r8, r8)
	}
    5cea:	46bd      	mov	sp, r7
    5cec:	b004      	add	sp, #16
    5cee:	bdb0      	pop	{r4, r5, r7, pc}
    5cf0:	000005e5 	.word	0x000005e5
    5cf4:	200005cc 	.word	0x200005cc
    5cf8:	200031fc 	.word	0x200031fc
    5cfc:	0000c841 	.word	0x0000c841
    5d00:	000005d2 	.word	0x000005d2
    5d04:	0000021a 	.word	0x0000021a
    5d08:	000005d1 	.word	0x000005d1

00005d0c <crc16_ccit>:
#include "def.h"

WORD crc16_ccit(BYTE *buf,WORD size)
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	b084      	sub	sp, #16
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
    5d14:	000a      	movs	r2, r1
    5d16:	1cbb      	adds	r3, r7, #2
    5d18:	801a      	strh	r2, [r3, #0]
	WORD crc = 0xFFFF;
    5d1a:	230e      	movs	r3, #14
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	2201      	movs	r2, #1
    5d20:	4252      	negs	r2, r2
    5d22:	801a      	strh	r2, [r3, #0]
	BYTE i;

	while (size--)
    5d24:	e037      	b.n	5d96 <crc16_ccit+0x8a>
	{
		crc ^= *buf++ << 8;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	1c5a      	adds	r2, r3, #1
    5d2a:	607a      	str	r2, [r7, #4]
    5d2c:	781b      	ldrb	r3, [r3, #0]
    5d2e:	021b      	lsls	r3, r3, #8
    5d30:	b21a      	sxth	r2, r3
    5d32:	230e      	movs	r3, #14
    5d34:	18fb      	adds	r3, r7, r3
    5d36:	2100      	movs	r1, #0
    5d38:	5e5b      	ldrsh	r3, [r3, r1]
    5d3a:	4053      	eors	r3, r2
    5d3c:	b21a      	sxth	r2, r3
    5d3e:	230e      	movs	r3, #14
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++)
    5d44:	230d      	movs	r3, #13
    5d46:	18fb      	adds	r3, r7, r3
    5d48:	2200      	movs	r2, #0
    5d4a:	701a      	strb	r2, [r3, #0]
    5d4c:	e01e      	b.n	5d8c <crc16_ccit+0x80>
		crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
    5d4e:	230e      	movs	r3, #14
    5d50:	18fb      	adds	r3, r7, r3
    5d52:	2200      	movs	r2, #0
    5d54:	5e9b      	ldrsh	r3, [r3, r2]
    5d56:	2b00      	cmp	r3, #0
    5d58:	da09      	bge.n	5d6e <crc16_ccit+0x62>
    5d5a:	230e      	movs	r3, #14
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	881b      	ldrh	r3, [r3, #0]
    5d60:	005b      	lsls	r3, r3, #1
    5d62:	b21b      	sxth	r3, r3
    5d64:	4a18      	ldr	r2, [pc, #96]	; (5dc8 <crc16_ccit+0xbc>)
    5d66:	4053      	eors	r3, r2
    5d68:	b21b      	sxth	r3, r3
    5d6a:	b29b      	uxth	r3, r3
    5d6c:	e004      	b.n	5d78 <crc16_ccit+0x6c>
    5d6e:	230e      	movs	r3, #14
    5d70:	18fb      	adds	r3, r7, r3
    5d72:	881b      	ldrh	r3, [r3, #0]
    5d74:	18db      	adds	r3, r3, r3
    5d76:	b29b      	uxth	r3, r3
    5d78:	220e      	movs	r2, #14
    5d7a:	18ba      	adds	r2, r7, r2
    5d7c:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++)
    5d7e:	230d      	movs	r3, #13
    5d80:	18fb      	adds	r3, r7, r3
    5d82:	781a      	ldrb	r2, [r3, #0]
    5d84:	230d      	movs	r3, #13
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	3201      	adds	r2, #1
    5d8a:	701a      	strb	r2, [r3, #0]
    5d8c:	230d      	movs	r3, #13
    5d8e:	18fb      	adds	r3, r7, r3
    5d90:	781b      	ldrb	r3, [r3, #0]
    5d92:	2b07      	cmp	r3, #7
    5d94:	d9db      	bls.n	5d4e <crc16_ccit+0x42>
	while (size--)
    5d96:	1cbb      	adds	r3, r7, #2
    5d98:	881b      	ldrh	r3, [r3, #0]
    5d9a:	1cba      	adds	r2, r7, #2
    5d9c:	1e59      	subs	r1, r3, #1
    5d9e:	8011      	strh	r1, [r2, #0]
    5da0:	2b00      	cmp	r3, #0
    5da2:	d1c0      	bne.n	5d26 <crc16_ccit+0x1a>
	}
	return ((crc>>8) | (crc<<8));
    5da4:	230e      	movs	r3, #14
    5da6:	18fb      	adds	r3, r7, r3
    5da8:	881b      	ldrh	r3, [r3, #0]
    5daa:	0a1b      	lsrs	r3, r3, #8
    5dac:	b29b      	uxth	r3, r3
    5dae:	b21a      	sxth	r2, r3
    5db0:	230e      	movs	r3, #14
    5db2:	18fb      	adds	r3, r7, r3
    5db4:	881b      	ldrh	r3, [r3, #0]
    5db6:	021b      	lsls	r3, r3, #8
    5db8:	b21b      	sxth	r3, r3
    5dba:	4313      	orrs	r3, r2
    5dbc:	b21b      	sxth	r3, r3
    5dbe:	b29b      	uxth	r3, r3
}
    5dc0:	0018      	movs	r0, r3
    5dc2:	46bd      	mov	sp, r7
    5dc4:	b004      	add	sp, #16
    5dc6:	bd80      	pop	{r7, pc}
    5dc8:	00001021 	.word	0x00001021

00005dcc <crc16_mbus>:

WORD crc16_mbus( BYTE *buf, WORD size )
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b084      	sub	sp, #16
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	000a      	movs	r2, r1
    5dd6:	1cbb      	adds	r3, r7, #2
    5dd8:	801a      	strh	r2, [r3, #0]
	 WORD n;
	 uint8_t i;
	 WORD crc = 0xFFFF;
    5dda:	230a      	movs	r3, #10
    5ddc:	18fb      	adds	r3, r7, r3
    5dde:	2201      	movs	r2, #1
    5de0:	4252      	negs	r2, r2
    5de2:	801a      	strh	r2, [r3, #0]
	 for ( n = 0; n < size; n++ )
    5de4:	230e      	movs	r3, #14
    5de6:	18fb      	adds	r3, r7, r3
    5de8:	2200      	movs	r2, #0
    5dea:	801a      	strh	r2, [r3, #0]
    5dec:	e042      	b.n	5e74 <crc16_mbus+0xa8>
	 {
		 crc ^= buf[n];
    5dee:	230e      	movs	r3, #14
    5df0:	18fb      	adds	r3, r7, r3
    5df2:	881b      	ldrh	r3, [r3, #0]
    5df4:	687a      	ldr	r2, [r7, #4]
    5df6:	18d3      	adds	r3, r2, r3
    5df8:	781b      	ldrb	r3, [r3, #0]
    5dfa:	b299      	uxth	r1, r3
    5dfc:	230a      	movs	r3, #10
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	220a      	movs	r2, #10
    5e02:	18ba      	adds	r2, r7, r2
    5e04:	8812      	ldrh	r2, [r2, #0]
    5e06:	404a      	eors	r2, r1
    5e08:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e0a:	230d      	movs	r3, #13
    5e0c:	18fb      	adds	r3, r7, r3
    5e0e:	2208      	movs	r2, #8
    5e10:	701a      	strb	r2, [r3, #0]
    5e12:	e023      	b.n	5e5c <crc16_mbus+0x90>
		 {
			 if ( crc & 0x0001 )
    5e14:	230a      	movs	r3, #10
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	881b      	ldrh	r3, [r3, #0]
    5e1a:	2201      	movs	r2, #1
    5e1c:	4013      	ands	r3, r2
    5e1e:	d00f      	beq.n	5e40 <crc16_mbus+0x74>
			 {
				 crc >>= 1;
    5e20:	230a      	movs	r3, #10
    5e22:	18fb      	adds	r3, r7, r3
    5e24:	220a      	movs	r2, #10
    5e26:	18ba      	adds	r2, r7, r2
    5e28:	8812      	ldrh	r2, [r2, #0]
    5e2a:	0852      	lsrs	r2, r2, #1
    5e2c:	801a      	strh	r2, [r3, #0]
				 crc ^= 0xA001;
    5e2e:	230a      	movs	r3, #10
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	220a      	movs	r2, #10
    5e34:	18ba      	adds	r2, r7, r2
    5e36:	8812      	ldrh	r2, [r2, #0]
    5e38:	4915      	ldr	r1, [pc, #84]	; (5e90 <crc16_mbus+0xc4>)
    5e3a:	404a      	eors	r2, r1
    5e3c:	801a      	strh	r2, [r3, #0]
    5e3e:	e006      	b.n	5e4e <crc16_mbus+0x82>
			 }
			 else
			 {
				 crc >>= 1;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	220a      	movs	r2, #10
    5e46:	18ba      	adds	r2, r7, r2
    5e48:	8812      	ldrh	r2, [r2, #0]
    5e4a:	0852      	lsrs	r2, r2, #1
    5e4c:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e4e:	230d      	movs	r3, #13
    5e50:	18fb      	adds	r3, r7, r3
    5e52:	781a      	ldrb	r2, [r3, #0]
    5e54:	230d      	movs	r3, #13
    5e56:	18fb      	adds	r3, r7, r3
    5e58:	3a01      	subs	r2, #1
    5e5a:	701a      	strb	r2, [r3, #0]
    5e5c:	230d      	movs	r3, #13
    5e5e:	18fb      	adds	r3, r7, r3
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d1d6      	bne.n	5e14 <crc16_mbus+0x48>
	 for ( n = 0; n < size; n++ )
    5e66:	230e      	movs	r3, #14
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	881a      	ldrh	r2, [r3, #0]
    5e6c:	230e      	movs	r3, #14
    5e6e:	18fb      	adds	r3, r7, r3
    5e70:	3201      	adds	r2, #1
    5e72:	801a      	strh	r2, [r3, #0]
    5e74:	230e      	movs	r3, #14
    5e76:	18fa      	adds	r2, r7, r3
    5e78:	1cbb      	adds	r3, r7, #2
    5e7a:	8812      	ldrh	r2, [r2, #0]
    5e7c:	881b      	ldrh	r3, [r3, #0]
    5e7e:	429a      	cmp	r2, r3
    5e80:	d3b5      	bcc.n	5dee <crc16_mbus+0x22>
			 }
		 }
	 }
	 return crc;
    5e82:	230a      	movs	r3, #10
    5e84:	18fb      	adds	r3, r7, r3
    5e86:	881b      	ldrh	r3, [r3, #0]
}
    5e88:	0018      	movs	r0, r3
    5e8a:	46bd      	mov	sp, r7
    5e8c:	b004      	add	sp, #16
    5e8e:	bd80      	pop	{r7, pc}
    5e90:	ffffa001 	.word	0xffffa001

00005e94 <crc32>:

uint_least32_t crc32(unsigned char *buf, size_t len)
{
    5e94:	b580      	push	{r7, lr}
    5e96:	4f4c      	ldr	r7, [pc, #304]	; (5fc8 <crc32+0x134>)
    5e98:	44bd      	add	sp, r7
    5e9a:	af00      	add	r7, sp, #0
    5e9c:	6078      	str	r0, [r7, #4]
    5e9e:	6039      	str	r1, [r7, #0]
	uint_least32_t crc_table[256];
	uint_least32_t crc; int i, j;
	
	for (i = 0; i < 256; i++)
    5ea0:	2300      	movs	r3, #0
    5ea2:	2282      	movs	r2, #130	; 0x82
    5ea4:	00d2      	lsls	r2, r2, #3
    5ea6:	18ba      	adds	r2, r7, r2
    5ea8:	6013      	str	r3, [r2, #0]
    5eaa:	e043      	b.n	5f34 <crc32+0xa0>
	{
		crc = i;
    5eac:	2382      	movs	r3, #130	; 0x82
    5eae:	00db      	lsls	r3, r3, #3
    5eb0:	18fb      	adds	r3, r7, r3
    5eb2:	681b      	ldr	r3, [r3, #0]
    5eb4:	4a45      	ldr	r2, [pc, #276]	; (5fcc <crc32+0x138>)
    5eb6:	18ba      	adds	r2, r7, r2
    5eb8:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5eba:	2300      	movs	r3, #0
    5ebc:	4a44      	ldr	r2, [pc, #272]	; (5fd0 <crc32+0x13c>)
    5ebe:	18ba      	adds	r2, r7, r2
    5ec0:	6013      	str	r3, [r2, #0]
    5ec2:	e01a      	b.n	5efa <crc32+0x66>
		crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
    5ec4:	4b41      	ldr	r3, [pc, #260]	; (5fcc <crc32+0x138>)
    5ec6:	18fb      	adds	r3, r7, r3
    5ec8:	681b      	ldr	r3, [r3, #0]
    5eca:	2201      	movs	r2, #1
    5ecc:	4013      	ands	r3, r2
    5ece:	d006      	beq.n	5ede <crc32+0x4a>
    5ed0:	4b3e      	ldr	r3, [pc, #248]	; (5fcc <crc32+0x138>)
    5ed2:	18fb      	adds	r3, r7, r3
    5ed4:	681b      	ldr	r3, [r3, #0]
    5ed6:	085b      	lsrs	r3, r3, #1
    5ed8:	4a3e      	ldr	r2, [pc, #248]	; (5fd4 <crc32+0x140>)
    5eda:	4053      	eors	r3, r2
    5edc:	e003      	b.n	5ee6 <crc32+0x52>
    5ede:	4b3b      	ldr	r3, [pc, #236]	; (5fcc <crc32+0x138>)
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	085b      	lsrs	r3, r3, #1
    5ee6:	4a39      	ldr	r2, [pc, #228]	; (5fcc <crc32+0x138>)
    5ee8:	18ba      	adds	r2, r7, r2
    5eea:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5eec:	4b38      	ldr	r3, [pc, #224]	; (5fd0 <crc32+0x13c>)
    5eee:	18fb      	adds	r3, r7, r3
    5ef0:	681b      	ldr	r3, [r3, #0]
    5ef2:	3301      	adds	r3, #1
    5ef4:	4a36      	ldr	r2, [pc, #216]	; (5fd0 <crc32+0x13c>)
    5ef6:	18ba      	adds	r2, r7, r2
    5ef8:	6013      	str	r3, [r2, #0]
    5efa:	4b35      	ldr	r3, [pc, #212]	; (5fd0 <crc32+0x13c>)
    5efc:	18fb      	adds	r3, r7, r3
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	2b07      	cmp	r3, #7
    5f02:	dddf      	ble.n	5ec4 <crc32+0x30>

		crc_table[i] = crc;
    5f04:	4b34      	ldr	r3, [pc, #208]	; (5fd8 <crc32+0x144>)
    5f06:	2283      	movs	r2, #131	; 0x83
    5f08:	00d2      	lsls	r2, r2, #3
    5f0a:	4694      	mov	ip, r2
    5f0c:	44bc      	add	ip, r7
    5f0e:	4463      	add	r3, ip
    5f10:	2282      	movs	r2, #130	; 0x82
    5f12:	00d2      	lsls	r2, r2, #3
    5f14:	18ba      	adds	r2, r7, r2
    5f16:	6812      	ldr	r2, [r2, #0]
    5f18:	0092      	lsls	r2, r2, #2
    5f1a:	492c      	ldr	r1, [pc, #176]	; (5fcc <crc32+0x138>)
    5f1c:	1879      	adds	r1, r7, r1
    5f1e:	6809      	ldr	r1, [r1, #0]
    5f20:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 256; i++)
    5f22:	2382      	movs	r3, #130	; 0x82
    5f24:	00db      	lsls	r3, r3, #3
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	3301      	adds	r3, #1
    5f2c:	2282      	movs	r2, #130	; 0x82
    5f2e:	00d2      	lsls	r2, r2, #3
    5f30:	18ba      	adds	r2, r7, r2
    5f32:	6013      	str	r3, [r2, #0]
    5f34:	2382      	movs	r3, #130	; 0x82
    5f36:	00db      	lsls	r3, r3, #3
    5f38:	18fb      	adds	r3, r7, r3
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	2bff      	cmp	r3, #255	; 0xff
    5f3e:	ddb5      	ble.n	5eac <crc32+0x18>
	};

	crc = 0xFFFFFFFFUL;
    5f40:	2301      	movs	r3, #1
    5f42:	425b      	negs	r3, r3
    5f44:	4a21      	ldr	r2, [pc, #132]	; (5fcc <crc32+0x138>)
    5f46:	18ba      	adds	r2, r7, r2
    5f48:	6013      	str	r3, [r2, #0]
	

	
	while (len--)
    5f4a:	e02d      	b.n	5fa8 <crc32+0x114>
	{
		if(!(len % 32768)) 
    5f4c:	683b      	ldr	r3, [r7, #0]
    5f4e:	045b      	lsls	r3, r3, #17
    5f50:	0c5b      	lsrs	r3, r3, #17
    5f52:	d10e      	bne.n	5f72 <crc32+0xde>
		{wdt_reset();}
    5f54:	4b21      	ldr	r3, [pc, #132]	; (5fdc <crc32+0x148>)
    5f56:	799b      	ldrb	r3, [r3, #6]
    5f58:	07db      	lsls	r3, r3, #31
    5f5a:	0fdb      	lsrs	r3, r3, #31
    5f5c:	b2db      	uxtb	r3, r3
    5f5e:	2b01      	cmp	r3, #1
    5f60:	d107      	bne.n	5f72 <crc32+0xde>
    5f62:	4a1e      	ldr	r2, [pc, #120]	; (5fdc <crc32+0x148>)
    5f64:	7993      	ldrb	r3, [r2, #6]
    5f66:	2101      	movs	r1, #1
    5f68:	430b      	orrs	r3, r1
    5f6a:	7193      	strb	r3, [r2, #6]
    5f6c:	4b1b      	ldr	r3, [pc, #108]	; (5fdc <crc32+0x148>)
    5f6e:	22a5      	movs	r2, #165	; 0xa5
    5f70:	721a      	strb	r2, [r3, #8]
		crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	1c5a      	adds	r2, r3, #1
    5f76:	607a      	str	r2, [r7, #4]
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	001a      	movs	r2, r3
    5f7c:	4b13      	ldr	r3, [pc, #76]	; (5fcc <crc32+0x138>)
    5f7e:	18fb      	adds	r3, r7, r3
    5f80:	681b      	ldr	r3, [r3, #0]
    5f82:	4053      	eors	r3, r2
    5f84:	22ff      	movs	r2, #255	; 0xff
    5f86:	401a      	ands	r2, r3
    5f88:	4b13      	ldr	r3, [pc, #76]	; (5fd8 <crc32+0x144>)
    5f8a:	2183      	movs	r1, #131	; 0x83
    5f8c:	00c9      	lsls	r1, r1, #3
    5f8e:	468c      	mov	ip, r1
    5f90:	44bc      	add	ip, r7
    5f92:	4463      	add	r3, ip
    5f94:	0092      	lsls	r2, r2, #2
    5f96:	58d2      	ldr	r2, [r2, r3]
    5f98:	4b0c      	ldr	r3, [pc, #48]	; (5fcc <crc32+0x138>)
    5f9a:	18fb      	adds	r3, r7, r3
    5f9c:	681b      	ldr	r3, [r3, #0]
    5f9e:	0a1b      	lsrs	r3, r3, #8
    5fa0:	4053      	eors	r3, r2
    5fa2:	4a0a      	ldr	r2, [pc, #40]	; (5fcc <crc32+0x138>)
    5fa4:	18ba      	adds	r2, r7, r2
    5fa6:	6013      	str	r3, [r2, #0]
	while (len--)
    5fa8:	683b      	ldr	r3, [r7, #0]
    5faa:	1e5a      	subs	r2, r3, #1
    5fac:	603a      	str	r2, [r7, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d1cc      	bne.n	5f4c <crc32+0xb8>
	}
	

	return crc ^ 0xFFFFFFFFUL;
    5fb2:	4b06      	ldr	r3, [pc, #24]	; (5fcc <crc32+0x138>)
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	681b      	ldr	r3, [r3, #0]
    5fb8:	43db      	mvns	r3, r3
    5fba:	0018      	movs	r0, r3
    5fbc:	46bd      	mov	sp, r7
    5fbe:	2383      	movs	r3, #131	; 0x83
    5fc0:	00db      	lsls	r3, r3, #3
    5fc2:	449d      	add	sp, r3
    5fc4:	bd80      	pop	{r7, pc}
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	fffffbe8 	.word	0xfffffbe8
    5fcc:	00000414 	.word	0x00000414
    5fd0:	0000040c 	.word	0x0000040c
    5fd4:	edb88320 	.word	0xedb88320
    5fd8:	fffffbf4 	.word	0xfffffbf4
    5fdc:	40001000 	.word	0x40001000

00005fe0 <crypted>:
//#define admin 		"admin"
#define CRYPTED 	1
#define DECRYPTED 	0

void crypted(char* str)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
	move(str, CRYPTED);
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	2101      	movs	r1, #1
    5fec:	0018      	movs	r0, r3
    5fee:	f000 f8f7 	bl	61e0 <move>
	wave(str, CRYPTED);
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	2101      	movs	r1, #1
    5ff6:	0018      	movs	r0, r3
    5ff8:	f000 f820 	bl	603c <wave>
	shell_game(str,CRYPTED);
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	2101      	movs	r1, #1
    6000:	0018      	movs	r0, r3
    6002:	f000 f876 	bl	60f2 <shell_game>
}
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	46bd      	mov	sp, r7
    600a:	b002      	add	sp, #8
    600c:	bd80      	pop	{r7, pc}

0000600e <decrypted>:

void decrypted(char* str)
{
    600e:	b580      	push	{r7, lr}
    6010:	b082      	sub	sp, #8
    6012:	af00      	add	r7, sp, #0
    6014:	6078      	str	r0, [r7, #4]
	shell_game(str,DECRYPTED);
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	2100      	movs	r1, #0
    601a:	0018      	movs	r0, r3
    601c:	f000 f869 	bl	60f2 <shell_game>
	wave(str, DECRYPTED);
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	2100      	movs	r1, #0
    6024:	0018      	movs	r0, r3
    6026:	f000 f809 	bl	603c <wave>
	move(str, DECRYPTED);
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	2100      	movs	r1, #0
    602e:	0018      	movs	r0, r3
    6030:	f000 f8d6 	bl	61e0 <move>
}
    6034:	46c0      	nop			; (mov r8, r8)
    6036:	46bd      	mov	sp, r7
    6038:	b002      	add	sp, #8
    603a:	bd80      	pop	{r7, pc}

0000603c <wave>:

void wave(char* ptr, char mode)
{
    603c:	b580      	push	{r7, lr}
    603e:	b084      	sub	sp, #16
    6040:	af00      	add	r7, sp, #0
    6042:	6078      	str	r0, [r7, #4]
    6044:	000a      	movs	r2, r1
    6046:	1cfb      	adds	r3, r7, #3
    6048:	701a      	strb	r2, [r3, #0]
	char plus;
	char sign = -1;
    604a:	230f      	movs	r3, #15
    604c:	18fb      	adds	r3, r7, r3
    604e:	22ff      	movs	r2, #255	; 0xff
    6050:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED) {sign = 1;}
    6052:	1cfb      	adds	r3, r7, #3
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	2b01      	cmp	r3, #1
    6058:	d103      	bne.n	6062 <wave+0x26>
    605a:	230f      	movs	r3, #15
    605c:	18fb      	adds	r3, r7, r3
    605e:	2201      	movs	r2, #1
    6060:	701a      	strb	r2, [r3, #0]
	for (char i = 0; i < 64; i++)
    6062:	230e      	movs	r3, #14
    6064:	18fb      	adds	r3, r7, r3
    6066:	2200      	movs	r2, #0
    6068:	701a      	strb	r2, [r3, #0]
    606a:	e039      	b.n	60e0 <wave+0xa4>
	{
		char step = i % 2;
    606c:	230d      	movs	r3, #13
    606e:	18fb      	adds	r3, r7, r3
    6070:	220e      	movs	r2, #14
    6072:	18ba      	adds	r2, r7, r2
    6074:	7812      	ldrb	r2, [r2, #0]
    6076:	2101      	movs	r1, #1
    6078:	400a      	ands	r2, r1
    607a:	701a      	strb	r2, [r3, #0]
		plus = ((63 - i) / 2) * sign;
    607c:	230e      	movs	r3, #14
    607e:	18fb      	adds	r3, r7, r3
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	223f      	movs	r2, #63	; 0x3f
    6084:	1ad3      	subs	r3, r2, r3
    6086:	d500      	bpl.n	608a <wave+0x4e>
    6088:	3301      	adds	r3, #1
    608a:	105b      	asrs	r3, r3, #1
    608c:	b2da      	uxtb	r2, r3
    608e:	230c      	movs	r3, #12
    6090:	18fb      	adds	r3, r7, r3
    6092:	210f      	movs	r1, #15
    6094:	1879      	adds	r1, r7, r1
    6096:	7809      	ldrb	r1, [r1, #0]
    6098:	434a      	muls	r2, r1
    609a:	701a      	strb	r2, [r3, #0]
		if (step) { *ptr -= plus; } else {*ptr += plus;}
    609c:	230d      	movs	r3, #13
    609e:	18fb      	adds	r3, r7, r3
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	2b00      	cmp	r3, #0
    60a4:	d009      	beq.n	60ba <wave+0x7e>
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	781a      	ldrb	r2, [r3, #0]
    60aa:	230c      	movs	r3, #12
    60ac:	18fb      	adds	r3, r7, r3
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	1ad3      	subs	r3, r2, r3
    60b2:	b2da      	uxtb	r2, r3
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	701a      	strb	r2, [r3, #0]
    60b8:	e008      	b.n	60cc <wave+0x90>
    60ba:	687b      	ldr	r3, [r7, #4]
    60bc:	781a      	ldrb	r2, [r3, #0]
    60be:	230c      	movs	r3, #12
    60c0:	18fb      	adds	r3, r7, r3
    60c2:	781b      	ldrb	r3, [r3, #0]
    60c4:	18d3      	adds	r3, r2, r3
    60c6:	b2da      	uxtb	r2, r3
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	701a      	strb	r2, [r3, #0]
		ptr++;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	3301      	adds	r3, #1
    60d0:	607b      	str	r3, [r7, #4]
	for (char i = 0; i < 64; i++)
    60d2:	230e      	movs	r3, #14
    60d4:	18fb      	adds	r3, r7, r3
    60d6:	781a      	ldrb	r2, [r3, #0]
    60d8:	230e      	movs	r3, #14
    60da:	18fb      	adds	r3, r7, r3
    60dc:	3201      	adds	r2, #1
    60de:	701a      	strb	r2, [r3, #0]
    60e0:	230e      	movs	r3, #14
    60e2:	18fb      	adds	r3, r7, r3
    60e4:	781b      	ldrb	r3, [r3, #0]
    60e6:	2b3f      	cmp	r3, #63	; 0x3f
    60e8:	d9c0      	bls.n	606c <wave+0x30>
	}
}
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	46bd      	mov	sp, r7
    60ee:	b004      	add	sp, #16
    60f0:	bd80      	pop	{r7, pc}

000060f2 <shell_game>:

void shell_game(char* ptr, char mode)
{
    60f2:	b580      	push	{r7, lr}
    60f4:	b098      	sub	sp, #96	; 0x60
    60f6:	af00      	add	r7, sp, #0
    60f8:	6078      	str	r0, [r7, #4]
    60fa:	000a      	movs	r2, r1
    60fc:	1cfb      	adds	r3, r7, #3
    60fe:	701a      	strb	r2, [r3, #0]
	char buf[64];
	char region[8];
	char lap = 0;
    6100:	235f      	movs	r3, #95	; 0x5f
    6102:	18fb      	adds	r3, r7, r3
    6104:	2200      	movs	r2, #0
    6106:	701a      	strb	r2, [r3, #0]
	char cursour = 0;
    6108:	235e      	movs	r3, #94	; 0x5e
    610a:	18fb      	adds	r3, r7, r3
    610c:	2200      	movs	r2, #0
    610e:	701a      	strb	r2, [r3, #0]
	char* debug = ptr;
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	653b      	str	r3, [r7, #80]	; 0x50
	memcpy(buf, ptr, 64);
    6114:	2310      	movs	r3, #16
    6116:	18fa      	adds	r2, r7, r3
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	0010      	movs	r0, r2
    611c:	0019      	movs	r1, r3
    611e:	2340      	movs	r3, #64	; 0x40
    6120:	001a      	movs	r2, r3
    6122:	4b2e      	ldr	r3, [pc, #184]	; (61dc <shell_game+0xea>)
    6124:	4798      	blx	r3
	if (mode == CRYPTED) {mode = 3;} else {mode = 1;}
    6126:	1cfb      	adds	r3, r7, #3
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	2b01      	cmp	r3, #1
    612c:	d103      	bne.n	6136 <shell_game+0x44>
    612e:	1cfb      	adds	r3, r7, #3
    6130:	2203      	movs	r2, #3
    6132:	701a      	strb	r2, [r3, #0]
    6134:	e002      	b.n	613c <shell_game+0x4a>
    6136:	1cfb      	adds	r3, r7, #3
    6138:	2201      	movs	r2, #1
    613a:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < mode; j++)
    613c:	2300      	movs	r3, #0
    613e:	65bb      	str	r3, [r7, #88]	; 0x58
    6140:	e042      	b.n	61c8 <shell_game+0xd6>
	{
		for (int i = 0; i < 63 ; i++)
    6142:	2300      	movs	r3, #0
    6144:	657b      	str	r3, [r7, #84]	; 0x54
    6146:	e026      	b.n	6196 <shell_game+0xa4>
		{
			if (cursour > 63)	{lap++; cursour = lap;}
    6148:	235e      	movs	r3, #94	; 0x5e
    614a:	18fb      	adds	r3, r7, r3
    614c:	781b      	ldrb	r3, [r3, #0]
    614e:	2b3f      	cmp	r3, #63	; 0x3f
    6150:	d90c      	bls.n	616c <shell_game+0x7a>
    6152:	235f      	movs	r3, #95	; 0x5f
    6154:	18fb      	adds	r3, r7, r3
    6156:	781a      	ldrb	r2, [r3, #0]
    6158:	235f      	movs	r3, #95	; 0x5f
    615a:	18fb      	adds	r3, r7, r3
    615c:	3201      	adds	r2, #1
    615e:	701a      	strb	r2, [r3, #0]
    6160:	235e      	movs	r3, #94	; 0x5e
    6162:	18fb      	adds	r3, r7, r3
    6164:	225f      	movs	r2, #95	; 0x5f
    6166:	18ba      	adds	r2, r7, r2
    6168:	7812      	ldrb	r2, [r2, #0]
    616a:	701a      	strb	r2, [r3, #0]
			*ptr = buf[cursour];
    616c:	235e      	movs	r3, #94	; 0x5e
    616e:	18fb      	adds	r3, r7, r3
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	2210      	movs	r2, #16
    6174:	18ba      	adds	r2, r7, r2
    6176:	5cd2      	ldrb	r2, [r2, r3]
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	701a      	strb	r2, [r3, #0]
			ptr++;
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	3301      	adds	r3, #1
    6180:	607b      	str	r3, [r7, #4]
			cursour += 8;
    6182:	235e      	movs	r3, #94	; 0x5e
    6184:	18fb      	adds	r3, r7, r3
    6186:	225e      	movs	r2, #94	; 0x5e
    6188:	18ba      	adds	r2, r7, r2
    618a:	7812      	ldrb	r2, [r2, #0]
    618c:	3208      	adds	r2, #8
    618e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 63 ; i++)
    6190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6192:	3301      	adds	r3, #1
    6194:	657b      	str	r3, [r7, #84]	; 0x54
    6196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6198:	2b3e      	cmp	r3, #62	; 0x3e
    619a:	ddd5      	ble.n	6148 <shell_game+0x56>
		}
		lap = 0;
    619c:	235f      	movs	r3, #95	; 0x5f
    619e:	18fb      	adds	r3, r7, r3
    61a0:	2200      	movs	r2, #0
    61a2:	701a      	strb	r2, [r3, #0]
		cursour = 0;
    61a4:	235e      	movs	r3, #94	; 0x5e
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	2200      	movs	r2, #0
    61aa:	701a      	strb	r2, [r3, #0]
		ptr = debug;
    61ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61ae:	607b      	str	r3, [r7, #4]
		memcpy(buf, ptr, 64);
    61b0:	2310      	movs	r3, #16
    61b2:	18fa      	adds	r2, r7, r3
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	0010      	movs	r0, r2
    61b8:	0019      	movs	r1, r3
    61ba:	2340      	movs	r3, #64	; 0x40
    61bc:	001a      	movs	r2, r3
    61be:	4b07      	ldr	r3, [pc, #28]	; (61dc <shell_game+0xea>)
    61c0:	4798      	blx	r3
	for (int j = 0; j < mode; j++)
    61c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61c4:	3301      	adds	r3, #1
    61c6:	65bb      	str	r3, [r7, #88]	; 0x58
    61c8:	1cfb      	adds	r3, r7, #3
    61ca:	781a      	ldrb	r2, [r3, #0]
    61cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    61ce:	429a      	cmp	r2, r3
    61d0:	dcb7      	bgt.n	6142 <shell_game+0x50>
	}
}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	46bd      	mov	sp, r7
    61d6:	b018      	add	sp, #96	; 0x60
    61d8:	bd80      	pop	{r7, pc}
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	0000c841 	.word	0x0000c841

000061e0 <move>:

void move(char* ptr, char mode)
{
    61e0:	b580      	push	{r7, lr}
    61e2:	b084      	sub	sp, #16
    61e4:	af00      	add	r7, sp, #0
    61e6:	6078      	str	r0, [r7, #4]
    61e8:	000a      	movs	r2, r1
    61ea:	1cfb      	adds	r3, r7, #3
    61ec:	701a      	strb	r2, [r3, #0]
	char sign = - 1;
    61ee:	230f      	movs	r3, #15
    61f0:	18fb      	adds	r3, r7, r3
    61f2:	22ff      	movs	r2, #255	; 0xff
    61f4:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED){sign = 1;}
    61f6:	1cfb      	adds	r3, r7, #3
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	2b01      	cmp	r3, #1
    61fc:	d103      	bne.n	6206 <move+0x26>
    61fe:	230f      	movs	r3, #15
    6200:	18fb      	adds	r3, r7, r3
    6202:	2201      	movs	r2, #1
    6204:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    6206:	2300      	movs	r3, #0
    6208:	60bb      	str	r3, [r7, #8]
    620a:	e00e      	b.n	622a <move+0x4a>
	{
		*ptr += 68 * sign;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	781a      	ldrb	r2, [r3, #0]
    6210:	230f      	movs	r3, #15
    6212:	18fb      	adds	r3, r7, r3
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2144      	movs	r1, #68	; 0x44
    6218:	434b      	muls	r3, r1
    621a:	b2db      	uxtb	r3, r3
    621c:	18d3      	adds	r3, r2, r3
    621e:	b2da      	uxtb	r2, r3
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    6224:	68bb      	ldr	r3, [r7, #8]
    6226:	3301      	adds	r3, #1
    6228:	60bb      	str	r3, [r7, #8]
    622a:	68bb      	ldr	r3, [r7, #8]
    622c:	2b3e      	cmp	r3, #62	; 0x3e
    622e:	dded      	ble.n	620c <move+0x2c>
	}	
    6230:	46c0      	nop			; (mov r8, r8)
    6232:	46bd      	mov	sp, r7
    6234:	b004      	add	sp, #16
    6236:	bd80      	pop	{r7, pc}

00006238 <eth_init>:
#include "def.h"

ETH_HDR eth_sock[MAX_SOCKETS_CNT];

void eth_init(void)
{
    6238:	b5b0      	push	{r4, r5, r7, lr}
    623a:	b082      	sub	sp, #8
    623c:	af00      	add	r7, sp, #0
	w5500_init_reg();
    623e:	4b3f      	ldr	r3, [pc, #252]	; (633c <eth_init+0x104>)
    6240:	4798      	blx	r3
	
	//common socket for settings
	if(socket_init(SOCKET_0,cfg_1.com_network.src_port,UDP)) {err_dword.common_sock = 1;}
    6242:	4b3f      	ldr	r3, [pc, #252]	; (6340 <eth_init+0x108>)
    6244:	2226      	movs	r2, #38	; 0x26
    6246:	5c9a      	ldrb	r2, [r3, r2]
    6248:	2127      	movs	r1, #39	; 0x27
    624a:	5c5b      	ldrb	r3, [r3, r1]
    624c:	021b      	lsls	r3, r3, #8
    624e:	4313      	orrs	r3, r2
    6250:	b29b      	uxth	r3, r3
    6252:	2201      	movs	r2, #1
    6254:	0019      	movs	r1, r3
    6256:	2000      	movs	r0, #0
    6258:	4b3a      	ldr	r3, [pc, #232]	; (6344 <eth_init+0x10c>)
    625a:	4798      	blx	r3
    625c:	1e03      	subs	r3, r0, #0
    625e:	d004      	beq.n	626a <eth_init+0x32>
    6260:	4b39      	ldr	r3, [pc, #228]	; (6348 <eth_init+0x110>)
    6262:	781a      	ldrb	r2, [r3, #0]
    6264:	2104      	movs	r1, #4
    6266:	430a      	orrs	r2, r1
    6268:	701a      	strb	r2, [r3, #0]

	//port socket
	for(BYTE i=0; i<4; i++)
    626a:	1dfb      	adds	r3, r7, #7
    626c:	2200      	movs	r2, #0
    626e:	701a      	strb	r2, [r3, #0]
    6270:	e05b      	b.n	632a <eth_init+0xf2>
	{
		if(cfg_1.sock_rs485[i].en==FALSE) {i++; continue;} 
    6272:	1dfb      	adds	r3, r7, #7
    6274:	781a      	ldrb	r2, [r3, #0]
    6276:	4932      	ldr	r1, [pc, #200]	; (6340 <eth_init+0x108>)
    6278:	2034      	movs	r0, #52	; 0x34
    627a:	0013      	movs	r3, r2
    627c:	005b      	lsls	r3, r3, #1
    627e:	189b      	adds	r3, r3, r2
    6280:	009b      	lsls	r3, r3, #2
    6282:	189b      	adds	r3, r3, r2
    6284:	18cb      	adds	r3, r1, r3
    6286:	181b      	adds	r3, r3, r0
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	2b00      	cmp	r3, #0
    628c:	d105      	bne.n	629a <eth_init+0x62>
    628e:	1dfb      	adds	r3, r7, #7
    6290:	781a      	ldrb	r2, [r3, #0]
    6292:	1dfb      	adds	r3, r7, #7
    6294:	3201      	adds	r2, #1
    6296:	701a      	strb	r2, [r3, #0]
    6298:	e042      	b.n	6320 <eth_init+0xe8>
		if(socket_init(i+1,cfg_1.sock_rs485[i].src_port,cfg_1.sock_rs485[i].mode)) {err_dword.socket += (1 << i);}
    629a:	1dfb      	adds	r3, r7, #7
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	3301      	adds	r3, #1
    62a0:	b2dc      	uxtb	r4, r3
    62a2:	1dfb      	adds	r3, r7, #7
    62a4:	781a      	ldrb	r2, [r3, #0]
    62a6:	4926      	ldr	r1, [pc, #152]	; (6340 <eth_init+0x108>)
    62a8:	0013      	movs	r3, r2
    62aa:	005b      	lsls	r3, r3, #1
    62ac:	189b      	adds	r3, r3, r2
    62ae:	009b      	lsls	r3, r3, #2
    62b0:	189b      	adds	r3, r3, r2
    62b2:	18cb      	adds	r3, r1, r3
    62b4:	3330      	adds	r3, #48	; 0x30
    62b6:	79da      	ldrb	r2, [r3, #7]
    62b8:	7a1b      	ldrb	r3, [r3, #8]
    62ba:	021b      	lsls	r3, r3, #8
    62bc:	4313      	orrs	r3, r2
    62be:	b29d      	uxth	r5, r3
    62c0:	1dfb      	adds	r3, r7, #7
    62c2:	781a      	ldrb	r2, [r3, #0]
    62c4:	491e      	ldr	r1, [pc, #120]	; (6340 <eth_init+0x108>)
    62c6:	2035      	movs	r0, #53	; 0x35
    62c8:	0013      	movs	r3, r2
    62ca:	005b      	lsls	r3, r3, #1
    62cc:	189b      	adds	r3, r3, r2
    62ce:	009b      	lsls	r3, r3, #2
    62d0:	189b      	adds	r3, r3, r2
    62d2:	18cb      	adds	r3, r1, r3
    62d4:	181b      	adds	r3, r3, r0
    62d6:	781b      	ldrb	r3, [r3, #0]
    62d8:	001a      	movs	r2, r3
    62da:	0029      	movs	r1, r5
    62dc:	0020      	movs	r0, r4
    62de:	4b19      	ldr	r3, [pc, #100]	; (6344 <eth_init+0x10c>)
    62e0:	4798      	blx	r3
    62e2:	1e03      	subs	r3, r0, #0
    62e4:	d01c      	beq.n	6320 <eth_init+0xe8>
    62e6:	4b18      	ldr	r3, [pc, #96]	; (6348 <eth_init+0x110>)
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	065b      	lsls	r3, r3, #25
    62ec:	0f1b      	lsrs	r3, r3, #28
    62ee:	b2db      	uxtb	r3, r3
    62f0:	0019      	movs	r1, r3
    62f2:	1dfb      	adds	r3, r7, #7
    62f4:	781b      	ldrb	r3, [r3, #0]
    62f6:	2201      	movs	r2, #1
    62f8:	409a      	lsls	r2, r3
    62fa:	0013      	movs	r3, r2
    62fc:	b2db      	uxtb	r3, r3
    62fe:	18cb      	adds	r3, r1, r3
    6300:	b2db      	uxtb	r3, r3
    6302:	1c1a      	adds	r2, r3, #0
    6304:	230f      	movs	r3, #15
    6306:	4013      	ands	r3, r2
    6308:	b2da      	uxtb	r2, r3
    630a:	4b0f      	ldr	r3, [pc, #60]	; (6348 <eth_init+0x110>)
    630c:	210f      	movs	r1, #15
    630e:	400a      	ands	r2, r1
    6310:	00d0      	lsls	r0, r2, #3
    6312:	781a      	ldrb	r2, [r3, #0]
    6314:	2178      	movs	r1, #120	; 0x78
    6316:	438a      	bics	r2, r1
    6318:	1c11      	adds	r1, r2, #0
    631a:	1c02      	adds	r2, r0, #0
    631c:	430a      	orrs	r2, r1
    631e:	701a      	strb	r2, [r3, #0]
	for(BYTE i=0; i<4; i++)
    6320:	1dfb      	adds	r3, r7, #7
    6322:	781a      	ldrb	r2, [r3, #0]
    6324:	1dfb      	adds	r3, r7, #7
    6326:	3201      	adds	r2, #1
    6328:	701a      	strb	r2, [r3, #0]
    632a:	1dfb      	adds	r3, r7, #7
    632c:	781b      	ldrb	r3, [r3, #0]
    632e:	2b03      	cmp	r3, #3
    6330:	d99f      	bls.n	6272 <eth_init+0x3a>
	}
}
    6332:	46c0      	nop			; (mov r8, r8)
    6334:	46bd      	mov	sp, r7
    6336:	b002      	add	sp, #8
    6338:	bdb0      	pop	{r4, r5, r7, pc}
    633a:	46c0      	nop			; (mov r8, r8)
    633c:	00009671 	.word	0x00009671
    6340:	20003dc8 	.word	0x20003dc8
    6344:	00007391 	.word	0x00007391
    6348:	20002550 	.word	0x20002550

0000634c <eth_process>:

void eth_process(void)
{
    634c:	b590      	push	{r4, r7, lr}
    634e:	b083      	sub	sp, #12
    6350:	af00      	add	r7, sp, #0
	static BYTE eth_st=0;
	WORD rtrn = 0;
    6352:	1dbb      	adds	r3, r7, #6
    6354:	2200      	movs	r2, #0
    6356:	801a      	strh	r2, [r3, #0]
	
	switch(eth_st)
    6358:	4b40      	ldr	r3, [pc, #256]	; (645c <eth_process+0x110>)
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	2b01      	cmp	r3, #1
    635e:	d038      	beq.n	63d2 <eth_process+0x86>
    6360:	2b02      	cmp	r3, #2
    6362:	d059      	beq.n	6418 <eth_process+0xcc>
    6364:	2b00      	cmp	r3, #0
    6366:	d000      	beq.n	636a <eth_process+0x1e>
    6368:	e069      	b.n	643e <eth_process+0xf2>
	{
		case CHECK:				
			rtrn = check_data_wr_process();	
    636a:	f000 f92d 	bl	65c8 <check_data_wr_process>
    636e:	0003      	movs	r3, r0
    6370:	001a      	movs	r2, r3
    6372:	1dbb      	adds	r3, r7, #6
    6374:	801a      	strh	r2, [r3, #0]
			if(rtrn != NO_SOKET)								
    6376:	1dbb      	adds	r3, r7, #6
    6378:	881b      	ldrh	r3, [r3, #0]
    637a:	2b6d      	cmp	r3, #109	; 0x6d
    637c:	d021      	beq.n	63c2 <eth_process+0x76>
			{
				eth_st					= WRITE_PROCESS;
    637e:	4b37      	ldr	r3, [pc, #220]	; (645c <eth_process+0x110>)
    6380:	2202      	movs	r2, #2
    6382:	701a      	strb	r2, [r3, #0]
				w5500_mode.mode_op		= MODE_OP_WRITE_UDP;
    6384:	4b36      	ldr	r3, [pc, #216]	; (6460 <eth_process+0x114>)
    6386:	2203      	movs	r2, #3
    6388:	701a      	strb	r2, [r3, #0]
				w5500_mode.numb_socket	= rtrn;
    638a:	1dbb      	adds	r3, r7, #6
    638c:	881b      	ldrh	r3, [r3, #0]
    638e:	b2da      	uxtb	r2, r3
    6390:	4b33      	ldr	r3, [pc, #204]	; (6460 <eth_process+0x114>)
    6392:	705a      	strb	r2, [r3, #1]
				switch(rtrn)
    6394:	1dbb      	adds	r3, r7, #6
    6396:	881b      	ldrh	r3, [r3, #0]
    6398:	2b00      	cmp	r3, #0
    639a:	d055      	beq.n	6448 <eth_process+0xfc>
				{
					case COMMON_SOCK_VAL:																						return;
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    639c:	1dbb      	adds	r3, r7, #6
    639e:	881b      	ldrh	r3, [r3, #0]
    63a0:	1e5a      	subs	r2, r3, #1
    63a2:	4930      	ldr	r1, [pc, #192]	; (6464 <eth_process+0x118>)
    63a4:	2035      	movs	r0, #53	; 0x35
    63a6:	0013      	movs	r3, r2
    63a8:	005b      	lsls	r3, r3, #1
    63aa:	189b      	adds	r3, r3, r2
    63ac:	009b      	lsls	r3, r3, #2
    63ae:	189b      	adds	r3, r3, r2
    63b0:	18cb      	adds	r3, r1, r3
    63b2:	181b      	adds	r3, r3, r0
    63b4:	781b      	ldrb	r3, [r3, #0]
    63b6:	2b02      	cmp	r3, #2
    63b8:	d148      	bne.n	644c <eth_process+0x100>
    63ba:	4b29      	ldr	r3, [pc, #164]	; (6460 <eth_process+0x114>)
    63bc:	2205      	movs	r2, #5
    63be:	701a      	strb	r2, [r3, #0]
    63c0:	e044      	b.n	644c <eth_process+0x100>
				} 
			}

			check_sockets_process((BYTE*)&w5500_mode);//select sockets for read			
    63c2:	4b27      	ldr	r3, [pc, #156]	; (6460 <eth_process+0x114>)
    63c4:	0018      	movs	r0, r3
    63c6:	f000 f851 	bl	646c <check_sockets_process>
			eth_st = READ_PROCESS;
    63ca:	4b24      	ldr	r3, [pc, #144]	; (645c <eth_process+0x110>)
    63cc:	2201      	movs	r2, #1
    63ce:	701a      	strb	r2, [r3, #0]
		break;
    63d0:	e041      	b.n	6456 <eth_process+0x10a>
		case READ_PROCESS:
			rtrn = w5500_process (w5500_mode.mode_op,w5500_mode.numb_socket);
    63d2:	4b23      	ldr	r3, [pc, #140]	; (6460 <eth_process+0x114>)
    63d4:	781a      	ldrb	r2, [r3, #0]
    63d6:	4b22      	ldr	r3, [pc, #136]	; (6460 <eth_process+0x114>)
    63d8:	785b      	ldrb	r3, [r3, #1]
    63da:	1dbc      	adds	r4, r7, #6
    63dc:	0019      	movs	r1, r3
    63de:	0010      	movs	r0, r2
    63e0:	4b21      	ldr	r3, [pc, #132]	; (6468 <eth_process+0x11c>)
    63e2:	4798      	blx	r3
    63e4:	0003      	movs	r3, r0
    63e6:	8023      	strh	r3, [r4, #0]
			if(rtrn == 2)	{eth_st=0;break;}
    63e8:	1dbb      	adds	r3, r7, #6
    63ea:	881b      	ldrh	r3, [r3, #0]
    63ec:	2b02      	cmp	r3, #2
    63ee:	d103      	bne.n	63f8 <eth_process+0xac>
    63f0:	4b1a      	ldr	r3, [pc, #104]	; (645c <eth_process+0x110>)
    63f2:	2200      	movs	r2, #0
    63f4:	701a      	strb	r2, [r3, #0]
    63f6:	e02e      	b.n	6456 <eth_process+0x10a>
			if(rtrn)		{eth_parse(w5500_mode.numb_socket,rtrn); eth_st=0;}
    63f8:	1dbb      	adds	r3, r7, #6
    63fa:	881b      	ldrh	r3, [r3, #0]
    63fc:	2b00      	cmp	r3, #0
    63fe:	d027      	beq.n	6450 <eth_process+0x104>
    6400:	4b17      	ldr	r3, [pc, #92]	; (6460 <eth_process+0x114>)
    6402:	785a      	ldrb	r2, [r3, #1]
    6404:	1dbb      	adds	r3, r7, #6
    6406:	881b      	ldrh	r3, [r3, #0]
    6408:	0019      	movs	r1, r3
    640a:	0010      	movs	r0, r2
    640c:	f000 f86e 	bl	64ec <eth_parse>
    6410:	4b12      	ldr	r3, [pc, #72]	; (645c <eth_process+0x110>)
    6412:	2200      	movs	r2, #0
    6414:	701a      	strb	r2, [r3, #0]
		break;
    6416:	e01b      	b.n	6450 <eth_process+0x104>
		case WRITE_PROCESS:
			rtrn = w5500_process(w5500_mode.mode_op,w5500_mode.numb_socket);
    6418:	4b11      	ldr	r3, [pc, #68]	; (6460 <eth_process+0x114>)
    641a:	781a      	ldrb	r2, [r3, #0]
    641c:	4b10      	ldr	r3, [pc, #64]	; (6460 <eth_process+0x114>)
    641e:	785b      	ldrb	r3, [r3, #1]
    6420:	1dbc      	adds	r4, r7, #6
    6422:	0019      	movs	r1, r3
    6424:	0010      	movs	r0, r2
    6426:	4b10      	ldr	r3, [pc, #64]	; (6468 <eth_process+0x11c>)
    6428:	4798      	blx	r3
    642a:	0003      	movs	r3, r0
    642c:	8023      	strh	r3, [r4, #0]
			if(rtrn)		{eth_st=0;}
    642e:	1dbb      	adds	r3, r7, #6
    6430:	881b      	ldrh	r3, [r3, #0]
    6432:	2b00      	cmp	r3, #0
    6434:	d00e      	beq.n	6454 <eth_process+0x108>
    6436:	4b09      	ldr	r3, [pc, #36]	; (645c <eth_process+0x110>)
    6438:	2200      	movs	r2, #0
    643a:	701a      	strb	r2, [r3, #0]
		break;
    643c:	e00a      	b.n	6454 <eth_process+0x108>
		default:
			eth_st = CHECK;
    643e:	4b07      	ldr	r3, [pc, #28]	; (645c <eth_process+0x110>)
    6440:	2200      	movs	r2, #0
    6442:	701a      	strb	r2, [r3, #0]
		break;
    6444:	46c0      	nop			; (mov r8, r8)
    6446:	e006      	b.n	6456 <eth_process+0x10a>
					case COMMON_SOCK_VAL:																						return;
    6448:	46c0      	nop			; (mov r8, r8)
    644a:	e004      	b.n	6456 <eth_process+0x10a>
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    644c:	46c0      	nop			; (mov r8, r8)
    644e:	e002      	b.n	6456 <eth_process+0x10a>
		break;
    6450:	46c0      	nop			; (mov r8, r8)
    6452:	e000      	b.n	6456 <eth_process+0x10a>
		break;
    6454:	46c0      	nop			; (mov r8, r8)

	}
}
    6456:	46bd      	mov	sp, r7
    6458:	b003      	add	sp, #12
    645a:	bd90      	pop	{r4, r7, pc}
    645c:	2000045a 	.word	0x2000045a
    6460:	20003b04 	.word	0x20003b04
    6464:	20003dc8 	.word	0x20003dc8
    6468:	000097e9 	.word	0x000097e9

0000646c <check_sockets_process>:

void check_sockets_process (BYTE *buf)
{
    646c:	b580      	push	{r7, lr}
    646e:	b082      	sub	sp, #8
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
	static BYTE index = MAX_SOCKETS_VAL;
	
	index++;
    6474:	4b1a      	ldr	r3, [pc, #104]	; (64e0 <check_sockets_process+0x74>)
    6476:	781b      	ldrb	r3, [r3, #0]
    6478:	3301      	adds	r3, #1
    647a:	b2da      	uxtb	r2, r3
    647c:	4b18      	ldr	r3, [pc, #96]	; (64e0 <check_sockets_process+0x74>)
    647e:	701a      	strb	r2, [r3, #0]
	if(index > MAX_SOCKETS_VAL){index=0;}
    6480:	4b17      	ldr	r3, [pc, #92]	; (64e0 <check_sockets_process+0x74>)
    6482:	781b      	ldrb	r3, [r3, #0]
    6484:	2b04      	cmp	r3, #4
    6486:	d902      	bls.n	648e <check_sockets_process+0x22>
    6488:	4b15      	ldr	r3, [pc, #84]	; (64e0 <check_sockets_process+0x74>)
    648a:	2200      	movs	r2, #0
    648c:	701a      	strb	r2, [r3, #0]
	
	switch (index)
    648e:	4b14      	ldr	r3, [pc, #80]	; (64e0 <check_sockets_process+0x74>)
    6490:	781b      	ldrb	r3, [r3, #0]
    6492:	2b00      	cmp	r3, #0
    6494:	d106      	bne.n	64a4 <check_sockets_process+0x38>
	{
		case COMMON_SOCK_VAL:
			w5500_mode.numb_socket	= SOCKET_0;
    6496:	4b13      	ldr	r3, [pc, #76]	; (64e4 <check_sockets_process+0x78>)
    6498:	2200      	movs	r2, #0
    649a:	705a      	strb	r2, [r3, #1]
			w5500_mode.mode_op		= MODE_OP_READ_UDP;
    649c:	4b11      	ldr	r3, [pc, #68]	; (64e4 <check_sockets_process+0x78>)
    649e:	2202      	movs	r2, #2
    64a0:	701a      	strb	r2, [r3, #0]
		return;
    64a2:	e01a      	b.n	64da <check_sockets_process+0x6e>
		default:
			w5500_mode.numb_socket = index;
    64a4:	4b0e      	ldr	r3, [pc, #56]	; (64e0 <check_sockets_process+0x74>)
    64a6:	781a      	ldrb	r2, [r3, #0]
    64a8:	4b0e      	ldr	r3, [pc, #56]	; (64e4 <check_sockets_process+0x78>)
    64aa:	705a      	strb	r2, [r3, #1]
			if (cfg_1.sock_rs485[index-1].mode == TCP)	
    64ac:	4b0c      	ldr	r3, [pc, #48]	; (64e0 <check_sockets_process+0x74>)
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	1e5a      	subs	r2, r3, #1
    64b2:	490d      	ldr	r1, [pc, #52]	; (64e8 <check_sockets_process+0x7c>)
    64b4:	2035      	movs	r0, #53	; 0x35
    64b6:	0013      	movs	r3, r2
    64b8:	005b      	lsls	r3, r3, #1
    64ba:	189b      	adds	r3, r3, r2
    64bc:	009b      	lsls	r3, r3, #2
    64be:	189b      	adds	r3, r3, r2
    64c0:	18cb      	adds	r3, r1, r3
    64c2:	181b      	adds	r3, r3, r0
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	2b02      	cmp	r3, #2
    64c8:	d103      	bne.n	64d2 <check_sockets_process+0x66>
			{w5500_mode.mode_op = MODE_OP_READ_TCP;}
    64ca:	4b06      	ldr	r3, [pc, #24]	; (64e4 <check_sockets_process+0x78>)
    64cc:	2204      	movs	r2, #4
    64ce:	701a      	strb	r2, [r3, #0]
			else										
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
		return;
    64d0:	e003      	b.n	64da <check_sockets_process+0x6e>
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
    64d2:	4b04      	ldr	r3, [pc, #16]	; (64e4 <check_sockets_process+0x78>)
    64d4:	2202      	movs	r2, #2
    64d6:	701a      	strb	r2, [r3, #0]
		return;
    64d8:	46c0      	nop			; (mov r8, r8)
	}									{w5500_mode.mode_op=MODE_OP_READ_UDP;}
	return;
}
    64da:	46bd      	mov	sp, r7
    64dc:	b002      	add	sp, #8
    64de:	bd80      	pop	{r7, pc}
    64e0:	20000001 	.word	0x20000001
    64e4:	20003b04 	.word	0x20003b04
    64e8:	20003dc8 	.word	0x20003dc8

000064ec <eth_parse>:

void eth_parse (BYTE numb_sock,WORD size)
{	
    64ec:	b590      	push	{r4, r7, lr}
    64ee:	b083      	sub	sp, #12
    64f0:	af00      	add	r7, sp, #0
    64f2:	0002      	movs	r2, r0
    64f4:	1dfb      	adds	r3, r7, #7
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	1d3b      	adds	r3, r7, #4
    64fa:	1c0a      	adds	r2, r1, #0
    64fc:	801a      	strh	r2, [r3, #0]
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    64fe:	1dfb      	adds	r3, r7, #7
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	4a2e      	ldr	r2, [pc, #184]	; (65bc <eth_parse+0xd0>)
    6504:	492e      	ldr	r1, [pc, #184]	; (65c0 <eth_parse+0xd4>)
    6506:	482f      	ldr	r0, [pc, #188]	; (65c4 <eth_parse+0xd8>)
    6508:	4343      	muls	r3, r0
    650a:	18d3      	adds	r3, r2, r3
    650c:	185b      	adds	r3, r3, r1
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	2b01      	cmp	r3, #1
    6512:	d04e      	beq.n	65b2 <eth_parse+0xc6>
		
	eth_sock[numb_sock].counters.rx++;
    6514:	1dfb      	adds	r3, r7, #7
    6516:	7819      	ldrb	r1, [r3, #0]
    6518:	4828      	ldr	r0, [pc, #160]	; (65bc <eth_parse+0xd0>)
    651a:	23ba      	movs	r3, #186	; 0xba
    651c:	00db      	lsls	r3, r3, #3
    651e:	4a29      	ldr	r2, [pc, #164]	; (65c4 <eth_parse+0xd8>)
    6520:	434a      	muls	r2, r1
    6522:	1882      	adds	r2, r0, r2
    6524:	18d3      	adds	r3, r2, r3
    6526:	7ada      	ldrb	r2, [r3, #11]
    6528:	7b18      	ldrb	r0, [r3, #12]
    652a:	0200      	lsls	r0, r0, #8
    652c:	4302      	orrs	r2, r0
    652e:	7b58      	ldrb	r0, [r3, #13]
    6530:	0400      	lsls	r0, r0, #16
    6532:	4302      	orrs	r2, r0
    6534:	7b9b      	ldrb	r3, [r3, #14]
    6536:	061b      	lsls	r3, r3, #24
    6538:	4313      	orrs	r3, r2
    653a:	1c5a      	adds	r2, r3, #1
    653c:	481f      	ldr	r0, [pc, #124]	; (65bc <eth_parse+0xd0>)
    653e:	23ba      	movs	r3, #186	; 0xba
    6540:	00db      	lsls	r3, r3, #3
    6542:	4c20      	ldr	r4, [pc, #128]	; (65c4 <eth_parse+0xd8>)
    6544:	4361      	muls	r1, r4
    6546:	1841      	adds	r1, r0, r1
    6548:	18cb      	adds	r3, r1, r3
    654a:	330b      	adds	r3, #11
    654c:	21ff      	movs	r1, #255	; 0xff
    654e:	4011      	ands	r1, r2
    6550:	000c      	movs	r4, r1
    6552:	7819      	ldrb	r1, [r3, #0]
    6554:	2000      	movs	r0, #0
    6556:	4001      	ands	r1, r0
    6558:	1c08      	adds	r0, r1, #0
    655a:	1c21      	adds	r1, r4, #0
    655c:	4301      	orrs	r1, r0
    655e:	7019      	strb	r1, [r3, #0]
    6560:	0a11      	lsrs	r1, r2, #8
    6562:	20ff      	movs	r0, #255	; 0xff
    6564:	4001      	ands	r1, r0
    6566:	000c      	movs	r4, r1
    6568:	7859      	ldrb	r1, [r3, #1]
    656a:	2000      	movs	r0, #0
    656c:	4001      	ands	r1, r0
    656e:	1c08      	adds	r0, r1, #0
    6570:	1c21      	adds	r1, r4, #0
    6572:	4301      	orrs	r1, r0
    6574:	7059      	strb	r1, [r3, #1]
    6576:	0c11      	lsrs	r1, r2, #16
    6578:	20ff      	movs	r0, #255	; 0xff
    657a:	4001      	ands	r1, r0
    657c:	000c      	movs	r4, r1
    657e:	7899      	ldrb	r1, [r3, #2]
    6580:	2000      	movs	r0, #0
    6582:	4001      	ands	r1, r0
    6584:	1c08      	adds	r0, r1, #0
    6586:	1c21      	adds	r1, r4, #0
    6588:	4301      	orrs	r1, r0
    658a:	7099      	strb	r1, [r3, #2]
    658c:	0e10      	lsrs	r0, r2, #24
    658e:	78da      	ldrb	r2, [r3, #3]
    6590:	2100      	movs	r1, #0
    6592:	400a      	ands	r2, r1
    6594:	1c11      	adds	r1, r2, #0
    6596:	1c02      	adds	r2, r0, #0
    6598:	430a      	orrs	r2, r1
    659a:	70da      	strb	r2, [r3, #3]
	eth_sock[numb_sock].r_status = 1;
    659c:	1dfb      	adds	r3, r7, #7
    659e:	781b      	ldrb	r3, [r3, #0]
    65a0:	4a06      	ldr	r2, [pc, #24]	; (65bc <eth_parse+0xd0>)
    65a2:	4907      	ldr	r1, [pc, #28]	; (65c0 <eth_parse+0xd4>)
    65a4:	4807      	ldr	r0, [pc, #28]	; (65c4 <eth_parse+0xd8>)
    65a6:	4343      	muls	r3, r0
    65a8:	18d3      	adds	r3, r2, r3
    65aa:	185b      	adds	r3, r3, r1
    65ac:	2201      	movs	r2, #1
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	e000      	b.n	65b4 <eth_parse+0xc8>
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    65b2:	46c0      	nop			; (mov r8, r8)
}
    65b4:	46bd      	mov	sp, r7
    65b6:	b003      	add	sp, #12
    65b8:	bd90      	pop	{r4, r7, pc}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	200005cc 	.word	0x200005cc
    65c0:	000005d1 	.word	0x000005d1
    65c4:	000005e5 	.word	0x000005e5

000065c8 <check_data_wr_process>:

BYTE check_data_wr_process (void)
{
    65c8:	b590      	push	{r4, r7, lr}
    65ca:	b083      	sub	sp, #12
    65cc:	af00      	add	r7, sp, #0
	BYTE numb_sock=0;
    65ce:	1dfb      	adds	r3, r7, #7
    65d0:	2200      	movs	r2, #0
    65d2:	701a      	strb	r2, [r3, #0]

	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    65d4:	1dfb      	adds	r3, r7, #7
    65d6:	2200      	movs	r2, #0
    65d8:	701a      	strb	r2, [r3, #0]
    65da:	e060      	b.n	669e <check_data_wr_process+0xd6>
	{
		if( eth_sock[numb_sock].w_status == 1 )
    65dc:	1dfb      	adds	r3, r7, #7
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	4a33      	ldr	r2, [pc, #204]	; (66b0 <check_data_wr_process+0xe8>)
    65e2:	4934      	ldr	r1, [pc, #208]	; (66b4 <check_data_wr_process+0xec>)
    65e4:	4834      	ldr	r0, [pc, #208]	; (66b8 <check_data_wr_process+0xf0>)
    65e6:	4343      	muls	r3, r0
    65e8:	18d3      	adds	r3, r2, r3
    65ea:	185b      	adds	r3, r3, r1
    65ec:	781b      	ldrb	r3, [r3, #0]
    65ee:	2b01      	cmp	r3, #1
    65f0:	d150      	bne.n	6694 <check_data_wr_process+0xcc>
		{
			eth_sock[numb_sock].w_status = 0;
    65f2:	1dfb      	adds	r3, r7, #7
    65f4:	781b      	ldrb	r3, [r3, #0]
    65f6:	4a2e      	ldr	r2, [pc, #184]	; (66b0 <check_data_wr_process+0xe8>)
    65f8:	492e      	ldr	r1, [pc, #184]	; (66b4 <check_data_wr_process+0xec>)
    65fa:	482f      	ldr	r0, [pc, #188]	; (66b8 <check_data_wr_process+0xf0>)
    65fc:	4343      	muls	r3, r0
    65fe:	18d3      	adds	r3, r2, r3
    6600:	185b      	adds	r3, r3, r1
    6602:	2200      	movs	r2, #0
    6604:	701a      	strb	r2, [r3, #0]
			eth_sock[numb_sock].counters.tx++;
    6606:	1dfb      	adds	r3, r7, #7
    6608:	7819      	ldrb	r1, [r3, #0]
    660a:	4829      	ldr	r0, [pc, #164]	; (66b0 <check_data_wr_process+0xe8>)
    660c:	23ba      	movs	r3, #186	; 0xba
    660e:	00db      	lsls	r3, r3, #3
    6610:	4a29      	ldr	r2, [pc, #164]	; (66b8 <check_data_wr_process+0xf0>)
    6612:	434a      	muls	r2, r1
    6614:	1882      	adds	r2, r0, r2
    6616:	18d3      	adds	r3, r2, r3
    6618:	79da      	ldrb	r2, [r3, #7]
    661a:	7a18      	ldrb	r0, [r3, #8]
    661c:	0200      	lsls	r0, r0, #8
    661e:	4302      	orrs	r2, r0
    6620:	7a58      	ldrb	r0, [r3, #9]
    6622:	0400      	lsls	r0, r0, #16
    6624:	4302      	orrs	r2, r0
    6626:	7a9b      	ldrb	r3, [r3, #10]
    6628:	061b      	lsls	r3, r3, #24
    662a:	4313      	orrs	r3, r2
    662c:	1c5a      	adds	r2, r3, #1
    662e:	4820      	ldr	r0, [pc, #128]	; (66b0 <check_data_wr_process+0xe8>)
    6630:	23ba      	movs	r3, #186	; 0xba
    6632:	00db      	lsls	r3, r3, #3
    6634:	4c20      	ldr	r4, [pc, #128]	; (66b8 <check_data_wr_process+0xf0>)
    6636:	4361      	muls	r1, r4
    6638:	1841      	adds	r1, r0, r1
    663a:	18cb      	adds	r3, r1, r3
    663c:	3307      	adds	r3, #7
    663e:	21ff      	movs	r1, #255	; 0xff
    6640:	4011      	ands	r1, r2
    6642:	000c      	movs	r4, r1
    6644:	7819      	ldrb	r1, [r3, #0]
    6646:	2000      	movs	r0, #0
    6648:	4001      	ands	r1, r0
    664a:	1c08      	adds	r0, r1, #0
    664c:	1c21      	adds	r1, r4, #0
    664e:	4301      	orrs	r1, r0
    6650:	7019      	strb	r1, [r3, #0]
    6652:	0a11      	lsrs	r1, r2, #8
    6654:	20ff      	movs	r0, #255	; 0xff
    6656:	4001      	ands	r1, r0
    6658:	000c      	movs	r4, r1
    665a:	7859      	ldrb	r1, [r3, #1]
    665c:	2000      	movs	r0, #0
    665e:	4001      	ands	r1, r0
    6660:	1c08      	adds	r0, r1, #0
    6662:	1c21      	adds	r1, r4, #0
    6664:	4301      	orrs	r1, r0
    6666:	7059      	strb	r1, [r3, #1]
    6668:	0c11      	lsrs	r1, r2, #16
    666a:	20ff      	movs	r0, #255	; 0xff
    666c:	4001      	ands	r1, r0
    666e:	000c      	movs	r4, r1
    6670:	7899      	ldrb	r1, [r3, #2]
    6672:	2000      	movs	r0, #0
    6674:	4001      	ands	r1, r0
    6676:	1c08      	adds	r0, r1, #0
    6678:	1c21      	adds	r1, r4, #0
    667a:	4301      	orrs	r1, r0
    667c:	7099      	strb	r1, [r3, #2]
    667e:	0e10      	lsrs	r0, r2, #24
    6680:	78da      	ldrb	r2, [r3, #3]
    6682:	2100      	movs	r1, #0
    6684:	400a      	ands	r2, r1
    6686:	1c11      	adds	r1, r2, #0
    6688:	1c02      	adds	r2, r0, #0
    668a:	430a      	orrs	r2, r1
    668c:	70da      	strb	r2, [r3, #3]
			return (numb_sock);
    668e:	1dfb      	adds	r3, r7, #7
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	e009      	b.n	66a8 <check_data_wr_process+0xe0>
	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    6694:	1dfb      	adds	r3, r7, #7
    6696:	781a      	ldrb	r2, [r3, #0]
    6698:	1dfb      	adds	r3, r7, #7
    669a:	3201      	adds	r2, #1
    669c:	701a      	strb	r2, [r3, #0]
    669e:	1dfb      	adds	r3, r7, #7
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	2b04      	cmp	r3, #4
    66a4:	d99a      	bls.n	65dc <check_data_wr_process+0x14>
		}
	}
	return (NO_SOKET);	
    66a6:	236d      	movs	r3, #109	; 0x6d
}
    66a8:	0018      	movs	r0, r3
    66aa:	46bd      	mov	sp, r7
    66ac:	b003      	add	sp, #12
    66ae:	bd90      	pop	{r4, r7, pc}
    66b0:	200005cc 	.word	0x200005cc
    66b4:	000005d2 	.word	0x000005d2
    66b8:	000005e5 	.word	0x000005e5

000066bc <flash_empty>:
#include "def.h"



WORD flash_empty(DWORD addr,WORD size)
{
    66bc:	b580      	push	{r7, lr}
    66be:	b084      	sub	sp, #16
    66c0:	af00      	add	r7, sp, #0
    66c2:	6078      	str	r0, [r7, #4]
    66c4:	000a      	movs	r2, r1
    66c6:	1cbb      	adds	r3, r7, #2
    66c8:	801a      	strh	r2, [r3, #0]
	DWORD  v    = 0;
    66ca:	2300      	movs	r3, #0
    66cc:	60fb      	str	r3, [r7, #12]
	for(;size;addr+=4,size-=4)
    66ce:	e00f      	b.n	66f0 <flash_empty+0x34>
	{
		v = *(__IO DWORD*)(addr);
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	681b      	ldr	r3, [r3, #0]
    66d4:	60fb      	str	r3, [r7, #12]
		if(v != 0xFFFFFFFF)
    66d6:	68fb      	ldr	r3, [r7, #12]
    66d8:	3301      	adds	r3, #1
    66da:	d001      	beq.n	66e0 <flash_empty+0x24>
		{
			return(0);
    66dc:	2300      	movs	r3, #0
    66de:	e00c      	b.n	66fa <flash_empty+0x3e>
	for(;size;addr+=4,size-=4)
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	3304      	adds	r3, #4
    66e4:	607b      	str	r3, [r7, #4]
    66e6:	1cbb      	adds	r3, r7, #2
    66e8:	1cba      	adds	r2, r7, #2
    66ea:	8812      	ldrh	r2, [r2, #0]
    66ec:	3a04      	subs	r2, #4
    66ee:	801a      	strh	r2, [r3, #0]
    66f0:	1cbb      	adds	r3, r7, #2
    66f2:	881b      	ldrh	r3, [r3, #0]
    66f4:	2b00      	cmp	r3, #0
    66f6:	d1eb      	bne.n	66d0 <flash_empty+0x14>
		}
	}


	return(1);
    66f8:	2301      	movs	r3, #1
}
    66fa:	0018      	movs	r0, r3
    66fc:	46bd      	mov	sp, r7
    66fe:	b004      	add	sp, #16
    6700:	bd80      	pop	{r7, pc}

00006702 <flash_erase_page>:

void flash_erase_page(DWORD addr)
//-----------------------------------------------------------------------------
{
    6702:	b580      	push	{r7, lr}
    6704:	b082      	sub	sp, #8
    6706:	af00      	add	r7, sp, #0
    6708:	6078      	str	r0, [r7, #4]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	4b0e      	ldr	r3, [pc, #56]	; (6748 <flash_erase_page+0x46>)
    670e:	7d1b      	ldrb	r3, [r3, #20]
    6710:	07db      	lsls	r3, r3, #31
    6712:	0fdb      	lsrs	r3, r3, #31
    6714:	b2db      	uxtb	r3, r3
    6716:	2b00      	cmp	r3, #0
    6718:	d0f8      	beq.n	670c <flash_erase_page+0xa>
	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    671a:	4b0b      	ldr	r3, [pc, #44]	; (6748 <flash_erase_page+0x46>)
    671c:	2220      	movs	r2, #32
    671e:	32ff      	adds	r2, #255	; 0xff
    6720:	831a      	strh	r2, [r3, #24]
	*(__IO DWORD *)(addr)=0xFFFFFFFF;
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	2201      	movs	r2, #1
    6726:	4252      	negs	r2, r2
    6728:	601a      	str	r2, [r3, #0]
	NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    672a:	4b07      	ldr	r3, [pc, #28]	; (6748 <flash_erase_page+0x46>)
    672c:	4a07      	ldr	r2, [pc, #28]	; (674c <flash_erase_page+0x4a>)
    672e:	801a      	strh	r2, [r3, #0]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    6730:	46c0      	nop			; (mov r8, r8)
    6732:	4b05      	ldr	r3, [pc, #20]	; (6748 <flash_erase_page+0x46>)
    6734:	7d1b      	ldrb	r3, [r3, #20]
    6736:	07db      	lsls	r3, r3, #31
    6738:	0fdb      	lsrs	r3, r3, #31
    673a:	b2db      	uxtb	r3, r3
    673c:	2b00      	cmp	r3, #0
    673e:	d0f8      	beq.n	6732 <flash_erase_page+0x30>
}
    6740:	46c0      	nop			; (mov r8, r8)
    6742:	46bd      	mov	sp, r7
    6744:	b002      	add	sp, #8
    6746:	bd80      	pop	{r7, pc}
    6748:	41004000 	.word	0x41004000
    674c:	ffffa502 	.word	0xffffa502

00006750 <flash_write>:

void flash_write(DWORD addr,BYTE *buf,WORD size)
//-----------------------------------------------------------------------------
{
    6750:	b580      	push	{r7, lr}
    6752:	b088      	sub	sp, #32
    6754:	af00      	add	r7, sp, #0
    6756:	60f8      	str	r0, [r7, #12]
    6758:	60b9      	str	r1, [r7, #8]
    675a:	1dbb      	adds	r3, r7, #6
    675c:	801a      	strh	r2, [r3, #0]
	WORD wn   = 0;
    675e:	231e      	movs	r3, #30
    6760:	18fb      	adds	r3, r7, r3
    6762:	2200      	movs	r2, #0
    6764:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6766:	2300      	movs	r3, #0
    6768:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    676a:	2300      	movs	r3, #0
    676c:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    676e:	4a2b      	ldr	r2, [pc, #172]	; (681c <flash_write+0xcc>)
    6770:	6853      	ldr	r3, [r2, #4]
    6772:	2180      	movs	r1, #128	; 0x80
    6774:	438b      	bics	r3, r1
    6776:	6053      	str	r3, [r2, #4]

	while(size > 0)
    6778:	e048      	b.n	680c <flash_write+0xbc>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    677a:	1dbb      	adds	r3, r7, #6
    677c:	881b      	ldrh	r3, [r3, #0]
    677e:	2b10      	cmp	r3, #16
    6780:	d802      	bhi.n	6788 <flash_write+0x38>
    6782:	1dbb      	adds	r3, r7, #6
    6784:	881b      	ldrh	r3, [r3, #0]
    6786:	e000      	b.n	678a <flash_write+0x3a>
    6788:	2310      	movs	r3, #16
    678a:	617b      	str	r3, [r7, #20]
		
		size-=len;
    678c:	697b      	ldr	r3, [r7, #20]
    678e:	b29a      	uxth	r2, r3
    6790:	1dbb      	adds	r3, r7, #6
    6792:	1db9      	adds	r1, r7, #6
    6794:	8809      	ldrh	r1, [r1, #0]
    6796:	1a8a      	subs	r2, r1, r2
    6798:	801a      	strh	r2, [r3, #0]
		
		//wdt_reset();
		
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    679a:	4b20      	ldr	r3, [pc, #128]	; (681c <flash_write+0xcc>)
    679c:	4a20      	ldr	r2, [pc, #128]	; (6820 <flash_write+0xd0>)
    679e:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    67a0:	46c0      	nop			; (mov r8, r8)
    67a2:	4b1e      	ldr	r3, [pc, #120]	; (681c <flash_write+0xcc>)
    67a4:	7d1b      	ldrb	r3, [r3, #20]
    67a6:	07db      	lsls	r3, r3, #31
    67a8:	0fdb      	lsrs	r3, r3, #31
    67aa:	b2db      	uxtb	r3, r3
    67ac:	2b00      	cmp	r3, #0
    67ae:	d0f8      	beq.n	67a2 <flash_write+0x52>

		for(wn=0;wn<len;wn+=4,addr+=4)
    67b0:	231e      	movs	r3, #30
    67b2:	18fb      	adds	r3, r7, r3
    67b4:	2200      	movs	r2, #0
    67b6:	801a      	strh	r2, [r3, #0]
    67b8:	e013      	b.n	67e2 <flash_write+0x92>
		{
			*(__IO DWORD*)(addr) = *(DWORD*)&buf[wn+cnt];
    67ba:	68fb      	ldr	r3, [r7, #12]
    67bc:	221e      	movs	r2, #30
    67be:	18ba      	adds	r2, r7, r2
    67c0:	8811      	ldrh	r1, [r2, #0]
    67c2:	69ba      	ldr	r2, [r7, #24]
    67c4:	188a      	adds	r2, r1, r2
    67c6:	68b9      	ldr	r1, [r7, #8]
    67c8:	188a      	adds	r2, r1, r2
    67ca:	6812      	ldr	r2, [r2, #0]
    67cc:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,addr+=4)
    67ce:	231e      	movs	r3, #30
    67d0:	18fb      	adds	r3, r7, r3
    67d2:	221e      	movs	r2, #30
    67d4:	18ba      	adds	r2, r7, r2
    67d6:	8812      	ldrh	r2, [r2, #0]
    67d8:	3204      	adds	r2, #4
    67da:	801a      	strh	r2, [r3, #0]
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	3304      	adds	r3, #4
    67e0:	60fb      	str	r3, [r7, #12]
    67e2:	231e      	movs	r3, #30
    67e4:	18fb      	adds	r3, r7, r3
    67e6:	881a      	ldrh	r2, [r3, #0]
    67e8:	697b      	ldr	r3, [r7, #20]
    67ea:	429a      	cmp	r2, r3
    67ec:	d3e5      	bcc.n	67ba <flash_write+0x6a>
		}
		
		cnt=cnt+len;
    67ee:	69ba      	ldr	r2, [r7, #24]
    67f0:	697b      	ldr	r3, [r7, #20]
    67f2:	18d3      	adds	r3, r2, r3
    67f4:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    67f6:	4b09      	ldr	r3, [pc, #36]	; (681c <flash_write+0xcc>)
    67f8:	4a0a      	ldr	r2, [pc, #40]	; (6824 <flash_write+0xd4>)
    67fa:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    67fc:	46c0      	nop			; (mov r8, r8)
    67fe:	4b07      	ldr	r3, [pc, #28]	; (681c <flash_write+0xcc>)
    6800:	7d1b      	ldrb	r3, [r3, #20]
    6802:	07db      	lsls	r3, r3, #31
    6804:	0fdb      	lsrs	r3, r3, #31
    6806:	b2db      	uxtb	r3, r3
    6808:	2b00      	cmp	r3, #0
    680a:	d0f8      	beq.n	67fe <flash_write+0xae>
	while(size > 0)
    680c:	1dbb      	adds	r3, r7, #6
    680e:	881b      	ldrh	r3, [r3, #0]
    6810:	2b00      	cmp	r3, #0
    6812:	d1b2      	bne.n	677a <flash_write+0x2a>
	}
}
    6814:	46c0      	nop			; (mov r8, r8)
    6816:	46bd      	mov	sp, r7
    6818:	b008      	add	sp, #32
    681a:	bd80      	pop	{r7, pc}
    681c:	41004000 	.word	0x41004000
    6820:	ffffa544 	.word	0xffffa544
    6824:	ffffa504 	.word	0xffffa504

00006828 <flash_copy>:

WORD flash_copy(DWORD dst,DWORD src,DWORD size)
//--------------------------------------------------------------------------
{
    6828:	b580      	push	{r7, lr}
    682a:	b088      	sub	sp, #32
    682c:	af00      	add	r7, sp, #0
    682e:	60f8      	str	r0, [r7, #12]
    6830:	60b9      	str	r1, [r7, #8]
    6832:	607a      	str	r2, [r7, #4]
	WORD wn   = 0;
    6834:	231e      	movs	r3, #30
    6836:	18fb      	adds	r3, r7, r3
    6838:	2200      	movs	r2, #0
    683a:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    683c:	2300      	movs	r3, #0
    683e:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    6840:	2300      	movs	r3, #0
    6842:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    6844:	4a2d      	ldr	r2, [pc, #180]	; (68fc <flash_copy+0xd4>)
    6846:	6853      	ldr	r3, [r2, #4]
    6848:	2180      	movs	r1, #128	; 0x80
    684a:	438b      	bics	r3, r1
    684c:	6053      	str	r3, [r2, #4]

	while(size > 0)
    684e:	e04d      	b.n	68ec <flash_copy+0xc4>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	2b10      	cmp	r3, #16
    6854:	d900      	bls.n	6858 <flash_copy+0x30>
    6856:	2310      	movs	r3, #16
    6858:	617b      	str	r3, [r7, #20]
		
		size-=len;
    685a:	687a      	ldr	r2, [r7, #4]
    685c:	697b      	ldr	r3, [r7, #20]
    685e:	1ad3      	subs	r3, r2, r3
    6860:	607b      	str	r3, [r7, #4]
		wdt_reset();
    6862:	4b27      	ldr	r3, [pc, #156]	; (6900 <flash_copy+0xd8>)
    6864:	799b      	ldrb	r3, [r3, #6]
    6866:	07db      	lsls	r3, r3, #31
    6868:	0fdb      	lsrs	r3, r3, #31
    686a:	b2db      	uxtb	r3, r3
    686c:	2b01      	cmp	r3, #1
    686e:	d107      	bne.n	6880 <flash_copy+0x58>
    6870:	4a23      	ldr	r2, [pc, #140]	; (6900 <flash_copy+0xd8>)
    6872:	7993      	ldrb	r3, [r2, #6]
    6874:	2101      	movs	r1, #1
    6876:	430b      	orrs	r3, r1
    6878:	7193      	strb	r3, [r2, #6]
    687a:	4b21      	ldr	r3, [pc, #132]	; (6900 <flash_copy+0xd8>)
    687c:	22a5      	movs	r2, #165	; 0xa5
    687e:	721a      	strb	r2, [r3, #8]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6880:	4b1e      	ldr	r3, [pc, #120]	; (68fc <flash_copy+0xd4>)
    6882:	4a20      	ldr	r2, [pc, #128]	; (6904 <flash_copy+0xdc>)
    6884:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6886:	46c0      	nop			; (mov r8, r8)
    6888:	4b1c      	ldr	r3, [pc, #112]	; (68fc <flash_copy+0xd4>)
    688a:	7d1b      	ldrb	r3, [r3, #20]
    688c:	07db      	lsls	r3, r3, #31
    688e:	0fdb      	lsrs	r3, r3, #31
    6890:	b2db      	uxtb	r3, r3
    6892:	2b00      	cmp	r3, #0
    6894:	d0f8      	beq.n	6888 <flash_copy+0x60>

		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    6896:	231e      	movs	r3, #30
    6898:	18fb      	adds	r3, r7, r3
    689a:	2200      	movs	r2, #0
    689c:	801a      	strh	r2, [r3, #0]
    689e:	e010      	b.n	68c2 <flash_copy+0x9a>
		{
			
			*(__IO DWORD*)(dst) = *(__IO DWORD*)(src);
    68a0:	68fb      	ldr	r3, [r7, #12]
    68a2:	68ba      	ldr	r2, [r7, #8]
    68a4:	6812      	ldr	r2, [r2, #0]
    68a6:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    68a8:	231e      	movs	r3, #30
    68aa:	18fb      	adds	r3, r7, r3
    68ac:	221e      	movs	r2, #30
    68ae:	18ba      	adds	r2, r7, r2
    68b0:	8812      	ldrh	r2, [r2, #0]
    68b2:	3204      	adds	r2, #4
    68b4:	801a      	strh	r2, [r3, #0]
    68b6:	68fb      	ldr	r3, [r7, #12]
    68b8:	3304      	adds	r3, #4
    68ba:	60fb      	str	r3, [r7, #12]
    68bc:	68bb      	ldr	r3, [r7, #8]
    68be:	3304      	adds	r3, #4
    68c0:	60bb      	str	r3, [r7, #8]
    68c2:	231e      	movs	r3, #30
    68c4:	18fb      	adds	r3, r7, r3
    68c6:	881a      	ldrh	r2, [r3, #0]
    68c8:	697b      	ldr	r3, [r7, #20]
    68ca:	429a      	cmp	r2, r3
    68cc:	d3e8      	bcc.n	68a0 <flash_copy+0x78>
		}
		
		cnt=cnt+len;
    68ce:	69ba      	ldr	r2, [r7, #24]
    68d0:	697b      	ldr	r3, [r7, #20]
    68d2:	18d3      	adds	r3, r2, r3
    68d4:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    68d6:	4b09      	ldr	r3, [pc, #36]	; (68fc <flash_copy+0xd4>)
    68d8:	4a0b      	ldr	r2, [pc, #44]	; (6908 <flash_copy+0xe0>)
    68da:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    68dc:	46c0      	nop			; (mov r8, r8)
    68de:	4b07      	ldr	r3, [pc, #28]	; (68fc <flash_copy+0xd4>)
    68e0:	7d1b      	ldrb	r3, [r3, #20]
    68e2:	07db      	lsls	r3, r3, #31
    68e4:	0fdb      	lsrs	r3, r3, #31
    68e6:	b2db      	uxtb	r3, r3
    68e8:	2b00      	cmp	r3, #0
    68ea:	d0f8      	beq.n	68de <flash_copy+0xb6>
	while(size > 0)
    68ec:	687b      	ldr	r3, [r7, #4]
    68ee:	2b00      	cmp	r3, #0
    68f0:	d1ae      	bne.n	6850 <flash_copy+0x28>
	}
	return 0;
    68f2:	2300      	movs	r3, #0
}
    68f4:	0018      	movs	r0, r3
    68f6:	46bd      	mov	sp, r7
    68f8:	b008      	add	sp, #32
    68fa:	bd80      	pop	{r7, pc}
    68fc:	41004000 	.word	0x41004000
    6900:	40001000 	.word	0x40001000
    6904:	ffffa544 	.word	0xffffa544
    6908:	ffffa504 	.word	0xffffa504

0000690c <flash_read>:

WORD flash_read(DWORD addr,void* buf,WORD size)
//--------------------------------------------------------------------------
{
    690c:	b580      	push	{r7, lr}
    690e:	b086      	sub	sp, #24
    6910:	af00      	add	r7, sp, #0
    6912:	60f8      	str	r0, [r7, #12]
    6914:	60b9      	str	r1, [r7, #8]
    6916:	1dbb      	adds	r3, r7, #6
    6918:	801a      	strh	r2, [r3, #0]
	WORD  cnt  = 0;
    691a:	2316      	movs	r3, #22
    691c:	18fb      	adds	r3, r7, r3
    691e:	2200      	movs	r2, #0
    6920:	801a      	strh	r2, [r3, #0]
	WORD* ptr = (WORD*)buf;
    6922:	68bb      	ldr	r3, [r7, #8]
    6924:	613b      	str	r3, [r7, #16]
	
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    6926:	2316      	movs	r3, #22
    6928:	18fb      	adds	r3, r7, r3
    692a:	2200      	movs	r2, #0
    692c:	801a      	strh	r2, [r3, #0]
    692e:	e020      	b.n	6972 <flash_read+0x66>
	{
		*ptr = *(__IO uint16_t*)(addr);
    6930:	68fb      	ldr	r3, [r7, #12]
    6932:	881b      	ldrh	r3, [r3, #0]
    6934:	b29a      	uxth	r2, r3
    6936:	693b      	ldr	r3, [r7, #16]
    6938:	801a      	strh	r2, [r3, #0]
		ptr++;
    693a:	693b      	ldr	r3, [r7, #16]
    693c:	3302      	adds	r3, #2
    693e:	613b      	str	r3, [r7, #16]
		wdt_reset();
    6940:	4b13      	ldr	r3, [pc, #76]	; (6990 <flash_read+0x84>)
    6942:	799b      	ldrb	r3, [r3, #6]
    6944:	07db      	lsls	r3, r3, #31
    6946:	0fdb      	lsrs	r3, r3, #31
    6948:	b2db      	uxtb	r3, r3
    694a:	2b01      	cmp	r3, #1
    694c:	d107      	bne.n	695e <flash_read+0x52>
    694e:	4a10      	ldr	r2, [pc, #64]	; (6990 <flash_read+0x84>)
    6950:	7993      	ldrb	r3, [r2, #6]
    6952:	2101      	movs	r1, #1
    6954:	430b      	orrs	r3, r1
    6956:	7193      	strb	r3, [r2, #6]
    6958:	4b0d      	ldr	r3, [pc, #52]	; (6990 <flash_read+0x84>)
    695a:	22a5      	movs	r2, #165	; 0xa5
    695c:	721a      	strb	r2, [r3, #8]
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    695e:	68fb      	ldr	r3, [r7, #12]
    6960:	3302      	adds	r3, #2
    6962:	60fb      	str	r3, [r7, #12]
    6964:	2316      	movs	r3, #22
    6966:	18fb      	adds	r3, r7, r3
    6968:	2216      	movs	r2, #22
    696a:	18ba      	adds	r2, r7, r2
    696c:	8812      	ldrh	r2, [r2, #0]
    696e:	3202      	adds	r2, #2
    6970:	801a      	strh	r2, [r3, #0]
    6972:	2316      	movs	r3, #22
    6974:	18fa      	adds	r2, r7, r3
    6976:	1dbb      	adds	r3, r7, #6
    6978:	8812      	ldrh	r2, [r2, #0]
    697a:	881b      	ldrh	r3, [r3, #0]
    697c:	429a      	cmp	r2, r3
    697e:	d3d7      	bcc.n	6930 <flash_read+0x24>
	}
	return(cnt);
    6980:	2316      	movs	r3, #22
    6982:	18fb      	adds	r3, r7, r3
    6984:	881b      	ldrh	r3, [r3, #0]
}
    6986:	0018      	movs	r0, r3
    6988:	46bd      	mov	sp, r7
    698a:	b006      	add	sp, #24
    698c:	bd80      	pop	{r7, pc}
    698e:	46c0      	nop			; (mov r8, r8)
    6990:	40001000 	.word	0x40001000

00006994 <flash_erase_row>:

void flash_erase_row(DWORD *dst) 
//-----------------------------------------------------------------------------
{
    6994:	b580      	push	{r7, lr}
    6996:	b082      	sub	sp, #8
    6998:	af00      	add	r7, sp, #0
    699a:	6078      	str	r0, [r7, #4]
while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    699c:	46c0      	nop			; (mov r8, r8)
    699e:	4b0f      	ldr	r3, [pc, #60]	; (69dc <flash_erase_row+0x48>)
    69a0:	7d1b      	ldrb	r3, [r3, #20]
    69a2:	07db      	lsls	r3, r3, #31
    69a4:	0fdb      	lsrs	r3, r3, #31
    69a6:	b2db      	uxtb	r3, r3
    69a8:	2b00      	cmp	r3, #0
    69aa:	d0f8      	beq.n	699e <flash_erase_row+0xa>

NVMCTRL->STATUS.reg=NVMCTRL_STATUS_MASK;
    69ac:	4b0b      	ldr	r3, [pc, #44]	; (69dc <flash_erase_row+0x48>)
    69ae:	2220      	movs	r2, #32
    69b0:	32ff      	adds	r2, #255	; 0xff
    69b2:	831a      	strh	r2, [r3, #24]
*dst=0xFFFFFFFF;
    69b4:	687b      	ldr	r3, [r7, #4]
    69b6:	2201      	movs	r2, #1
    69b8:	4252      	negs	r2, r2
    69ba:	601a      	str	r2, [r3, #0]
NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    69bc:	4b07      	ldr	r3, [pc, #28]	; (69dc <flash_erase_row+0x48>)
    69be:	4a08      	ldr	r2, [pc, #32]	; (69e0 <flash_erase_row+0x4c>)
    69c0:	801a      	strh	r2, [r3, #0]

while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69c2:	46c0      	nop			; (mov r8, r8)
    69c4:	4b05      	ldr	r3, [pc, #20]	; (69dc <flash_erase_row+0x48>)
    69c6:	7d1b      	ldrb	r3, [r3, #20]
    69c8:	07db      	lsls	r3, r3, #31
    69ca:	0fdb      	lsrs	r3, r3, #31
    69cc:	b2db      	uxtb	r3, r3
    69ce:	2b00      	cmp	r3, #0
    69d0:	d0f8      	beq.n	69c4 <flash_erase_row+0x30>
}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	46bd      	mov	sp, r7
    69d6:	b002      	add	sp, #8
    69d8:	bd80      	pop	{r7, pc}
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	41004000 	.word	0x41004000
    69e0:	ffffa502 	.word	0xffffa502

000069e4 <flash_write_dword>:

void flash_write_dword(DWORD *dst,DWORD* val) 
//-----------------------------------------------------------------------------
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b082      	sub	sp, #8
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
    69ec:	6039      	str	r1, [r7, #0]
NVMCTRL->CTRLB.bit.MANW=0;
    69ee:	4a11      	ldr	r2, [pc, #68]	; (6a34 <flash_write_dword+0x50>)
    69f0:	6853      	ldr	r3, [r2, #4]
    69f2:	2180      	movs	r1, #128	; 0x80
    69f4:	438b      	bics	r3, r1
    69f6:	6053      	str	r3, [r2, #4]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    69f8:	4b0e      	ldr	r3, [pc, #56]	; (6a34 <flash_write_dword+0x50>)
    69fa:	4a0f      	ldr	r2, [pc, #60]	; (6a38 <flash_write_dword+0x54>)
    69fc:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	4b0c      	ldr	r3, [pc, #48]	; (6a34 <flash_write_dword+0x50>)
    6a02:	7d1b      	ldrb	r3, [r3, #20]
    6a04:	07db      	lsls	r3, r3, #31
    6a06:	0fdb      	lsrs	r3, r3, #31
    6a08:	b2db      	uxtb	r3, r3
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d0f8      	beq.n	6a00 <flash_write_dword+0x1c>

*dst=*val;
    6a0e:	683b      	ldr	r3, [r7, #0]
    6a10:	681a      	ldr	r2, [r3, #0]
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	601a      	str	r2, [r3, #0]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    6a16:	4b07      	ldr	r3, [pc, #28]	; (6a34 <flash_write_dword+0x50>)
    6a18:	4a08      	ldr	r2, [pc, #32]	; (6a3c <flash_write_dword+0x58>)
    6a1a:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a1c:	46c0      	nop			; (mov r8, r8)
    6a1e:	4b05      	ldr	r3, [pc, #20]	; (6a34 <flash_write_dword+0x50>)
    6a20:	7d1b      	ldrb	r3, [r3, #20]
    6a22:	07db      	lsls	r3, r3, #31
    6a24:	0fdb      	lsrs	r3, r3, #31
    6a26:	b2db      	uxtb	r3, r3
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d0f8      	beq.n	6a1e <flash_write_dword+0x3a>
}
    6a2c:	46c0      	nop			; (mov r8, r8)
    6a2e:	46bd      	mov	sp, r7
    6a30:	b002      	add	sp, #8
    6a32:	bd80      	pop	{r7, pc}
    6a34:	41004000 	.word	0x41004000
    6a38:	ffffa544 	.word	0xffffa544
    6a3c:	ffffa504 	.word	0xffffa504

00006a40 <gpio_init>:
#include "def.h"

void gpio_init (void)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	af00      	add	r7, sp, #0
	//.............................................................................
	// LED ........................................................................
	//.............................................................................

	PORT->Group[1].OUTSET.reg=PORT_PB03;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a44:	4ac2      	ldr	r2, [pc, #776]	; (6d50 <gpio_init+0x310>)
    6a46:	2398      	movs	r3, #152	; 0x98
    6a48:	2108      	movs	r1, #8
    6a4a:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIRSET.reg=PORT_PB03;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6a4c:	4ac0      	ldr	r2, [pc, #768]	; (6d50 <gpio_init+0x310>)
    6a4e:	2388      	movs	r3, #136	; 0x88
    6a50:	2108      	movs	r1, #8
    6a52:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a54:	49be      	ldr	r1, [pc, #760]	; (6d50 <gpio_init+0x310>)
    6a56:	22c3      	movs	r2, #195	; 0xc3
    6a58:	5c8b      	ldrb	r3, [r1, r2]
    6a5a:	2001      	movs	r0, #1
    6a5c:	4383      	bics	r3, r0
    6a5e:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART1 SERCOM1_ALT ............................................................
	//.............................................................................
 
	// PA12 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA12;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a60:	4bbb      	ldr	r3, [pc, #748]	; (6d50 <gpio_init+0x310>)
    6a62:	2280      	movs	r2, #128	; 0x80
    6a64:	0152      	lsls	r2, r2, #5
    6a66:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA12;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6a68:	4bb9      	ldr	r3, [pc, #740]	; (6d50 <gpio_init+0x310>)
    6a6a:	2280      	movs	r2, #128	; 0x80
    6a6c:	0152      	lsls	r2, r2, #5
    6a6e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[12].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6a70:	49b7      	ldr	r1, [pc, #732]	; (6d50 <gpio_init+0x310>)
    6a72:	224c      	movs	r2, #76	; 0x4c
    6a74:	5c8b      	ldrb	r3, [r1, r2]
    6a76:	2001      	movs	r0, #1
    6a78:	4383      	bics	r3, r0
    6a7a:	548b      	strb	r3, [r1, r2]

	// PA00 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA00;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a7c:	4bb4      	ldr	r3, [pc, #720]	; (6d50 <gpio_init+0x310>)
    6a7e:	2201      	movs	r2, #1
    6a80:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA00;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6a82:	4bb3      	ldr	r3, [pc, #716]	; (6d50 <gpio_init+0x310>)
    6a84:	2201      	movs	r2, #1
    6a86:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[0].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6a88:	49b1      	ldr	r1, [pc, #708]	; (6d50 <gpio_init+0x310>)
    6a8a:	2240      	movs	r2, #64	; 0x40
    6a8c:	5c8b      	ldrb	r3, [r1, r2]
    6a8e:	2001      	movs	r0, #1
    6a90:	4303      	orrs	r3, r0
    6a92:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6a94:	49ae      	ldr	r1, [pc, #696]	; (6d50 <gpio_init+0x310>)
    6a96:	2230      	movs	r2, #48	; 0x30
    6a98:	5c8b      	ldrb	r3, [r1, r2]
    6a9a:	200f      	movs	r0, #15
    6a9c:	4383      	bics	r3, r0
    6a9e:	1c18      	adds	r0, r3, #0
    6aa0:	2303      	movs	r3, #3
    6aa2:	4303      	orrs	r3, r0
    6aa4:	548b      	strb	r3, [r1, r2]

	// PA01 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA01;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6aa6:	4baa      	ldr	r3, [pc, #680]	; (6d50 <gpio_init+0x310>)
    6aa8:	2202      	movs	r2, #2
    6aaa:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[1].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6aac:	49a8      	ldr	r1, [pc, #672]	; (6d50 <gpio_init+0x310>)
    6aae:	2241      	movs	r2, #65	; 0x41
    6ab0:	5c8b      	ldrb	r3, [r1, r2]
    6ab2:	2002      	movs	r0, #2
    6ab4:	4303      	orrs	r3, r0
    6ab6:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[1].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6ab8:	49a5      	ldr	r1, [pc, #660]	; (6d50 <gpio_init+0x310>)
    6aba:	2241      	movs	r2, #65	; 0x41
    6abc:	5c8b      	ldrb	r3, [r1, r2]
    6abe:	2001      	movs	r0, #1
    6ac0:	4303      	orrs	r3, r0
    6ac2:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6ac4:	49a2      	ldr	r1, [pc, #648]	; (6d50 <gpio_init+0x310>)
    6ac6:	2230      	movs	r2, #48	; 0x30
    6ac8:	5c8b      	ldrb	r3, [r1, r2]
    6aca:	200f      	movs	r0, #15
    6acc:	4003      	ands	r3, r0
    6ace:	1c18      	adds	r0, r3, #0
    6ad0:	2330      	movs	r3, #48	; 0x30
    6ad2:	4303      	orrs	r3, r0
    6ad4:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART2 SERCOM0_ALT ............................................................
	//.............................................................................
	
	// PA13 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA13;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ad6:	4b9e      	ldr	r3, [pc, #632]	; (6d50 <gpio_init+0x310>)
    6ad8:	2280      	movs	r2, #128	; 0x80
    6ada:	0192      	lsls	r2, r2, #6
    6adc:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA13;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6ade:	4b9c      	ldr	r3, [pc, #624]	; (6d50 <gpio_init+0x310>)
    6ae0:	2280      	movs	r2, #128	; 0x80
    6ae2:	0192      	lsls	r2, r2, #6
    6ae4:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[13].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6ae6:	499a      	ldr	r1, [pc, #616]	; (6d50 <gpio_init+0x310>)
    6ae8:	224d      	movs	r2, #77	; 0x4d
    6aea:	5c8b      	ldrb	r3, [r1, r2]
    6aec:	2001      	movs	r0, #1
    6aee:	4383      	bics	r3, r0
    6af0:	548b      	strb	r3, [r1, r2]

	// PA04 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA04;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6af2:	4b97      	ldr	r3, [pc, #604]	; (6d50 <gpio_init+0x310>)
    6af4:	2210      	movs	r2, #16
    6af6:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA04;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6af8:	4b95      	ldr	r3, [pc, #596]	; (6d50 <gpio_init+0x310>)
    6afa:	2210      	movs	r2, #16
    6afc:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[4].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6afe:	4994      	ldr	r1, [pc, #592]	; (6d50 <gpio_init+0x310>)
    6b00:	2244      	movs	r2, #68	; 0x44
    6b02:	5c8b      	ldrb	r3, [r1, r2]
    6b04:	2001      	movs	r0, #1
    6b06:	4303      	orrs	r3, r0
    6b08:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b0a:	4991      	ldr	r1, [pc, #580]	; (6d50 <gpio_init+0x310>)
    6b0c:	2232      	movs	r2, #50	; 0x32
    6b0e:	5c8b      	ldrb	r3, [r1, r2]
    6b10:	200f      	movs	r0, #15
    6b12:	4383      	bics	r3, r0
    6b14:	1c18      	adds	r0, r3, #0
    6b16:	2303      	movs	r3, #3
    6b18:	4303      	orrs	r3, r0
    6b1a:	548b      	strb	r3, [r1, r2]

	// PA05 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA05;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6b1c:	4b8c      	ldr	r3, [pc, #560]	; (6d50 <gpio_init+0x310>)
    6b1e:	2220      	movs	r2, #32
    6b20:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[5].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6b22:	498b      	ldr	r1, [pc, #556]	; (6d50 <gpio_init+0x310>)
    6b24:	2245      	movs	r2, #69	; 0x45
    6b26:	5c8b      	ldrb	r3, [r1, r2]
    6b28:	2002      	movs	r0, #2
    6b2a:	4303      	orrs	r3, r0
    6b2c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[5].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b2e:	4988      	ldr	r1, [pc, #544]	; (6d50 <gpio_init+0x310>)
    6b30:	2245      	movs	r2, #69	; 0x45
    6b32:	5c8b      	ldrb	r3, [r1, r2]
    6b34:	2001      	movs	r0, #1
    6b36:	4303      	orrs	r3, r0
    6b38:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6b3a:	4985      	ldr	r1, [pc, #532]	; (6d50 <gpio_init+0x310>)
    6b3c:	2232      	movs	r2, #50	; 0x32
    6b3e:	5c8b      	ldrb	r3, [r1, r2]
    6b40:	200f      	movs	r0, #15
    6b42:	4003      	ands	r3, r0
    6b44:	1c18      	adds	r0, r3, #0
    6b46:	2330      	movs	r3, #48	; 0x30
    6b48:	4303      	orrs	r3, r0
    6b4a:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART3 SERCOM2_ALT ............................................................
	//.............................................................................
		
	// PA14 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA14;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b4c:	4b80      	ldr	r3, [pc, #512]	; (6d50 <gpio_init+0x310>)
    6b4e:	2280      	movs	r2, #128	; 0x80
    6b50:	01d2      	lsls	r2, r2, #7
    6b52:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA14;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b54:	4b7e      	ldr	r3, [pc, #504]	; (6d50 <gpio_init+0x310>)
    6b56:	2280      	movs	r2, #128	; 0x80
    6b58:	01d2      	lsls	r2, r2, #7
    6b5a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[14].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6b5c:	497c      	ldr	r1, [pc, #496]	; (6d50 <gpio_init+0x310>)
    6b5e:	224e      	movs	r2, #78	; 0x4e
    6b60:	5c8b      	ldrb	r3, [r1, r2]
    6b62:	2001      	movs	r0, #1
    6b64:	4383      	bics	r3, r0
    6b66:	548b      	strb	r3, [r1, r2]

	// PA08 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA08;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b68:	4b79      	ldr	r3, [pc, #484]	; (6d50 <gpio_init+0x310>)
    6b6a:	2280      	movs	r2, #128	; 0x80
    6b6c:	0052      	lsls	r2, r2, #1
    6b6e:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA08;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b70:	4b77      	ldr	r3, [pc, #476]	; (6d50 <gpio_init+0x310>)
    6b72:	2280      	movs	r2, #128	; 0x80
    6b74:	0052      	lsls	r2, r2, #1
    6b76:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[8].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b78:	4975      	ldr	r1, [pc, #468]	; (6d50 <gpio_init+0x310>)
    6b7a:	2248      	movs	r2, #72	; 0x48
    6b7c:	5c8b      	ldrb	r3, [r1, r2]
    6b7e:	2001      	movs	r0, #1
    6b80:	4303      	orrs	r3, r0
    6b82:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b84:	4972      	ldr	r1, [pc, #456]	; (6d50 <gpio_init+0x310>)
    6b86:	2234      	movs	r2, #52	; 0x34
    6b88:	5c8b      	ldrb	r3, [r1, r2]
    6b8a:	200f      	movs	r0, #15
    6b8c:	4383      	bics	r3, r0
    6b8e:	1c18      	adds	r0, r3, #0
    6b90:	2303      	movs	r3, #3
    6b92:	4303      	orrs	r3, r0
    6b94:	548b      	strb	r3, [r1, r2]

	// PA09 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA09;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6b96:	4b6e      	ldr	r3, [pc, #440]	; (6d50 <gpio_init+0x310>)
    6b98:	2280      	movs	r2, #128	; 0x80
    6b9a:	0092      	lsls	r2, r2, #2
    6b9c:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[9].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6b9e:	496c      	ldr	r1, [pc, #432]	; (6d50 <gpio_init+0x310>)
    6ba0:	2249      	movs	r2, #73	; 0x49
    6ba2:	5c8b      	ldrb	r3, [r1, r2]
    6ba4:	2002      	movs	r0, #2
    6ba6:	4303      	orrs	r3, r0
    6ba8:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[9].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6baa:	4969      	ldr	r1, [pc, #420]	; (6d50 <gpio_init+0x310>)
    6bac:	2249      	movs	r2, #73	; 0x49
    6bae:	5c8b      	ldrb	r3, [r1, r2]
    6bb0:	2001      	movs	r0, #1
    6bb2:	4303      	orrs	r3, r0
    6bb4:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6bb6:	4966      	ldr	r1, [pc, #408]	; (6d50 <gpio_init+0x310>)
    6bb8:	2234      	movs	r2, #52	; 0x34
    6bba:	5c8b      	ldrb	r3, [r1, r2]
    6bbc:	200f      	movs	r0, #15
    6bbe:	4003      	ands	r3, r0
    6bc0:	1c18      	adds	r0, r3, #0
    6bc2:	2330      	movs	r3, #48	; 0x30
    6bc4:	4303      	orrs	r3, r0
    6bc6:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART4 SERCOM3_ALT ............................................................
	//.............................................................................
		
	// PA15 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA15;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6bc8:	4b61      	ldr	r3, [pc, #388]	; (6d50 <gpio_init+0x310>)
    6bca:	2280      	movs	r2, #128	; 0x80
    6bcc:	0212      	lsls	r2, r2, #8
    6bce:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA15;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bd0:	4b5f      	ldr	r3, [pc, #380]	; (6d50 <gpio_init+0x310>)
    6bd2:	2280      	movs	r2, #128	; 0x80
    6bd4:	0212      	lsls	r2, r2, #8
    6bd6:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[15].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6bd8:	495d      	ldr	r1, [pc, #372]	; (6d50 <gpio_init+0x310>)
    6bda:	224f      	movs	r2, #79	; 0x4f
    6bdc:	5c8b      	ldrb	r3, [r1, r2]
    6bde:	2001      	movs	r0, #1
    6be0:	4383      	bics	r3, r0
    6be2:	548b      	strb	r3, [r1, r2]

	// PA16 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA16;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6be4:	4b5a      	ldr	r3, [pc, #360]	; (6d50 <gpio_init+0x310>)
    6be6:	2280      	movs	r2, #128	; 0x80
    6be8:	0252      	lsls	r2, r2, #9
    6bea:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA16;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bec:	4b58      	ldr	r3, [pc, #352]	; (6d50 <gpio_init+0x310>)
    6bee:	2280      	movs	r2, #128	; 0x80
    6bf0:	0252      	lsls	r2, r2, #9
    6bf2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[16].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6bf4:	4956      	ldr	r1, [pc, #344]	; (6d50 <gpio_init+0x310>)
    6bf6:	2250      	movs	r2, #80	; 0x50
    6bf8:	5c8b      	ldrb	r3, [r1, r2]
    6bfa:	2001      	movs	r0, #1
    6bfc:	4303      	orrs	r3, r0
    6bfe:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6c00:	4953      	ldr	r1, [pc, #332]	; (6d50 <gpio_init+0x310>)
    6c02:	2238      	movs	r2, #56	; 0x38
    6c04:	5c8b      	ldrb	r3, [r1, r2]
    6c06:	200f      	movs	r0, #15
    6c08:	4383      	bics	r3, r0
    6c0a:	1c18      	adds	r0, r3, #0
    6c0c:	2303      	movs	r3, #3
    6c0e:	4303      	orrs	r3, r0
    6c10:	548b      	strb	r3, [r1, r2]

	// PA17 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA17;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6c12:	4b4f      	ldr	r3, [pc, #316]	; (6d50 <gpio_init+0x310>)
    6c14:	2280      	movs	r2, #128	; 0x80
    6c16:	0292      	lsls	r2, r2, #10
    6c18:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[17].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6c1a:	494d      	ldr	r1, [pc, #308]	; (6d50 <gpio_init+0x310>)
    6c1c:	2251      	movs	r2, #81	; 0x51
    6c1e:	5c8b      	ldrb	r3, [r1, r2]
    6c20:	2002      	movs	r0, #2
    6c22:	4303      	orrs	r3, r0
    6c24:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[17].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c26:	494a      	ldr	r1, [pc, #296]	; (6d50 <gpio_init+0x310>)
    6c28:	2251      	movs	r2, #81	; 0x51
    6c2a:	5c8b      	ldrb	r3, [r1, r2]
    6c2c:	2001      	movs	r0, #1
    6c2e:	4303      	orrs	r3, r0
    6c30:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6c32:	4947      	ldr	r1, [pc, #284]	; (6d50 <gpio_init+0x310>)
    6c34:	2238      	movs	r2, #56	; 0x38
    6c36:	5c8b      	ldrb	r3, [r1, r2]
    6c38:	200f      	movs	r0, #15
    6c3a:	4003      	ands	r3, r0
    6c3c:	1c18      	adds	r0, r3, #0
    6c3e:	2330      	movs	r3, #48	; 0x30
    6c40:	4303      	orrs	r3, r0
    6c42:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// SPI SERCOM5_ALT ....................................................................
	//.............................................................................*/

	// PA23 - SPI_MOSI (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA23;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c44:	4b42      	ldr	r3, [pc, #264]	; (6d50 <gpio_init+0x310>)
    6c46:	2280      	movs	r2, #128	; 0x80
    6c48:	0412      	lsls	r2, r2, #16
    6c4a:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA23;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c4c:	4b40      	ldr	r3, [pc, #256]	; (6d50 <gpio_init+0x310>)
    6c4e:	2280      	movs	r2, #128	; 0x80
    6c50:	0412      	lsls	r2, r2, #16
    6c52:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[23].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c54:	493e      	ldr	r1, [pc, #248]	; (6d50 <gpio_init+0x310>)
    6c56:	2257      	movs	r2, #87	; 0x57
    6c58:	5c8b      	ldrb	r3, [r1, r2]
    6c5a:	2001      	movs	r0, #1
    6c5c:	4303      	orrs	r3, r0
    6c5e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXO=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6c60:	493b      	ldr	r1, [pc, #236]	; (6d50 <gpio_init+0x310>)
    6c62:	223b      	movs	r2, #59	; 0x3b
    6c64:	5c8b      	ldrb	r3, [r1, r2]
    6c66:	200f      	movs	r0, #15
    6c68:	4003      	ands	r3, r0
    6c6a:	1c18      	adds	r0, r3, #0
    6c6c:	2330      	movs	r3, #48	; 0x30
    6c6e:	4303      	orrs	r3, r0
    6c70:	548b      	strb	r3, [r1, r2]

	// PA22 - SPI_MISO (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA22;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6c72:	4b37      	ldr	r3, [pc, #220]	; (6d50 <gpio_init+0x310>)
    6c74:	2280      	movs	r2, #128	; 0x80
    6c76:	03d2      	lsls	r2, r2, #15
    6c78:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[22].bit.INEN  =0x01; // Bit  17   - INEN:   Input Enable
    6c7a:	4935      	ldr	r1, [pc, #212]	; (6d50 <gpio_init+0x310>)
    6c7c:	2256      	movs	r2, #86	; 0x56
    6c7e:	5c8b      	ldrb	r3, [r1, r2]
    6c80:	2002      	movs	r0, #2
    6c82:	4303      	orrs	r3, r0
    6c84:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c86:	4932      	ldr	r1, [pc, #200]	; (6d50 <gpio_init+0x310>)
    6c88:	2256      	movs	r2, #86	; 0x56
    6c8a:	5c8b      	ldrb	r3, [r1, r2]
    6c8c:	2001      	movs	r0, #1
    6c8e:	4303      	orrs	r3, r0
    6c90:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXE=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6c92:	492f      	ldr	r1, [pc, #188]	; (6d50 <gpio_init+0x310>)
    6c94:	223b      	movs	r2, #59	; 0x3b
    6c96:	5c8b      	ldrb	r3, [r1, r2]
    6c98:	200f      	movs	r0, #15
    6c9a:	4383      	bics	r3, r0
    6c9c:	1c18      	adds	r0, r3, #0
    6c9e:	2303      	movs	r3, #3
    6ca0:	4303      	orrs	r3, r0
    6ca2:	548b      	strb	r3, [r1, r2]

	// PA24 - SPI_SCK (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA25;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ca4:	4b2a      	ldr	r3, [pc, #168]	; (6d50 <gpio_init+0x310>)
    6ca6:	2280      	movs	r2, #128	; 0x80
    6ca8:	0492      	lsls	r2, r2, #18
    6caa:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA25;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cac:	4b28      	ldr	r3, [pc, #160]	; (6d50 <gpio_init+0x310>)
    6cae:	2280      	movs	r2, #128	; 0x80
    6cb0:	0492      	lsls	r2, r2, #18
    6cb2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[25].bit.PMUXEN=0x01; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cb4:	4926      	ldr	r1, [pc, #152]	; (6d50 <gpio_init+0x310>)
    6cb6:	2259      	movs	r2, #89	; 0x59
    6cb8:	5c8b      	ldrb	r3, [r1, r2]
    6cba:	2001      	movs	r0, #1
    6cbc:	4303      	orrs	r3, r0
    6cbe:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [12].bit.PMUXO=3;  // Bits 3:0  - PMUXO: Peripheral Multiplexing Odd (5: Peripheral function F selected)
    6cc0:	4923      	ldr	r1, [pc, #140]	; (6d50 <gpio_init+0x310>)
    6cc2:	223c      	movs	r2, #60	; 0x3c
    6cc4:	5c8b      	ldrb	r3, [r1, r2]
    6cc6:	200f      	movs	r0, #15
    6cc8:	4003      	ands	r3, r0
    6cca:	1c18      	adds	r0, r3, #0
    6ccc:	2330      	movs	r3, #48	; 0x30
    6cce:	4303      	orrs	r3, r0
    6cd0:	548b      	strb	r3, [r1, r2]

	// PA25 - SPI_CS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA24;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6cd2:	4b1f      	ldr	r3, [pc, #124]	; (6d50 <gpio_init+0x310>)
    6cd4:	2280      	movs	r2, #128	; 0x80
    6cd6:	0452      	lsls	r2, r2, #17
    6cd8:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA24;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cda:	4b1d      	ldr	r3, [pc, #116]	; (6d50 <gpio_init+0x310>)
    6cdc:	2280      	movs	r2, #128	; 0x80
    6cde:	0452      	lsls	r2, r2, #17
    6ce0:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[24].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6ce2:	491b      	ldr	r1, [pc, #108]	; (6d50 <gpio_init+0x310>)
    6ce4:	2258      	movs	r2, #88	; 0x58
    6ce6:	5c8b      	ldrb	r3, [r1, r2]
    6ce8:	2001      	movs	r0, #1
    6cea:	4383      	bics	r3, r0
    6cec:	548b      	strb	r3, [r1, r2]
	
	// PA19 - SPI_INT (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA19;       // Bits 31:0 - DIRCLR: Port Data Direction Clear
    6cee:	4b18      	ldr	r3, [pc, #96]	; (6d50 <gpio_init+0x310>)
    6cf0:	2280      	movs	r2, #128	; 0x80
    6cf2:	0312      	lsls	r2, r2, #12
    6cf4:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[19].bit.PMUXEN=0x00; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cf6:	4916      	ldr	r1, [pc, #88]	; (6d50 <gpio_init+0x310>)
    6cf8:	2253      	movs	r2, #83	; 0x53
    6cfa:	5c8b      	ldrb	r3, [r1, r2]
    6cfc:	2001      	movs	r0, #1
    6cfe:	4383      	bics	r3, r0
    6d00:	548b      	strb	r3, [r1, r2]

    // PA18 - SPI_RESET (Output)
    PORT->Group[0].OUTSET.reg=PORT_PA18;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6d02:	4b13      	ldr	r3, [pc, #76]	; (6d50 <gpio_init+0x310>)
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	02d2      	lsls	r2, r2, #11
    6d08:	619a      	str	r2, [r3, #24]
    PORT->Group[0].DIRSET.reg=PORT_PA18;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d0a:	4b11      	ldr	r3, [pc, #68]	; (6d50 <gpio_init+0x310>)
    6d0c:	2280      	movs	r2, #128	; 0x80
    6d0e:	02d2      	lsls	r2, r2, #11
    6d10:	609a      	str	r2, [r3, #8]
    PORT->Group[0].PINCFG[18].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)*/  
    6d12:	490f      	ldr	r1, [pc, #60]	; (6d50 <gpio_init+0x310>)
    6d14:	2252      	movs	r2, #82	; 0x52
    6d16:	5c8b      	ldrb	r3, [r1, r2]
    6d18:	2001      	movs	r0, #1
    6d1a:	4383      	bics	r3, r0
    6d1c:	548b      	strb	r3, [r1, r2]
	PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;  
    6d1e:	23c0      	movs	r3, #192	; 0xc0
    6d20:	05db      	lsls	r3, r3, #23
    6d22:	2280      	movs	r2, #128	; 0x80
    6d24:	02d2      	lsls	r2, r2, #11
    6d26:	619a      	str	r2, [r3, #24]
	/*
	//.............................................................................
	// Gerkon ....................................................................
	//.............................................................................*/
	
	PORT->Group[1].DIRCLR.reg=PORT_PB23;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6d28:	4909      	ldr	r1, [pc, #36]	; (6d50 <gpio_init+0x310>)
    6d2a:	2284      	movs	r2, #132	; 0x84
    6d2c:	2380      	movs	r3, #128	; 0x80
    6d2e:	041b      	lsls	r3, r3, #16
    6d30:	508b      	str	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6d32:	4907      	ldr	r1, [pc, #28]	; (6d50 <gpio_init+0x310>)
    6d34:	22d7      	movs	r2, #215	; 0xd7
    6d36:	5c8b      	ldrb	r3, [r1, r2]
    6d38:	2002      	movs	r0, #2
    6d3a:	4303      	orrs	r3, r0
    6d3c:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.PMUXEN=0x00;
    6d3e:	4904      	ldr	r1, [pc, #16]	; (6d50 <gpio_init+0x310>)
    6d40:	22d7      	movs	r2, #215	; 0xd7
    6d42:	5c8b      	ldrb	r3, [r1, r2]
    6d44:	2001      	movs	r0, #1
    6d46:	4383      	bics	r3, r0
    6d48:	548b      	strb	r3, [r1, r2]
}
    6d4a:	46c0      	nop			; (mov r8, r8)
    6d4c:	46bd      	mov	sp, r7
    6d4e:	bd80      	pop	{r7, pc}
    6d50:	41004400 	.word	0x41004400

00006d54 <pin_ctrl>:

DWORD pin_ctrl(BYTE device, BYTE  numb, BYTE mod)
{
    6d54:	b590      	push	{r4, r7, lr}
    6d56:	b083      	sub	sp, #12
    6d58:	af00      	add	r7, sp, #0
    6d5a:	0004      	movs	r4, r0
    6d5c:	0008      	movs	r0, r1
    6d5e:	0011      	movs	r1, r2
    6d60:	1dfb      	adds	r3, r7, #7
    6d62:	1c22      	adds	r2, r4, #0
    6d64:	701a      	strb	r2, [r3, #0]
    6d66:	1dbb      	adds	r3, r7, #6
    6d68:	1c02      	adds	r2, r0, #0
    6d6a:	701a      	strb	r2, [r3, #0]
    6d6c:	1d7b      	adds	r3, r7, #5
    6d6e:	1c0a      	adds	r2, r1, #0
    6d70:	701a      	strb	r2, [r3, #0]
	switch(device << 8 | numb << 4 | mod)
    6d72:	1dfb      	adds	r3, r7, #7
    6d74:	781b      	ldrb	r3, [r3, #0]
    6d76:	021a      	lsls	r2, r3, #8
    6d78:	1dbb      	adds	r3, r7, #6
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	011b      	lsls	r3, r3, #4
    6d7e:	431a      	orrs	r2, r3
    6d80:	1d7b      	adds	r3, r7, #5
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	4313      	orrs	r3, r2
    6d86:	2b22      	cmp	r3, #34	; 0x22
    6d88:	d100      	bne.n	6d8c <pin_ctrl+0x38>
    6d8a:	e067      	b.n	6e5c <pin_ctrl+0x108>
    6d8c:	dc11      	bgt.n	6db2 <pin_ctrl+0x5e>
    6d8e:	2b10      	cmp	r3, #16
    6d90:	d043      	beq.n	6e1a <pin_ctrl+0xc6>
    6d92:	dc06      	bgt.n	6da2 <pin_ctrl+0x4e>
    6d94:	2b01      	cmp	r3, #1
    6d96:	d032      	beq.n	6dfe <pin_ctrl+0xaa>
    6d98:	2b02      	cmp	r3, #2
    6d9a:	d037      	beq.n	6e0c <pin_ctrl+0xb8>
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d028      	beq.n	6df2 <pin_ctrl+0x9e>
    6da0:	e09a      	b.n	6ed8 <pin_ctrl+0x184>
    6da2:	2b12      	cmp	r3, #18
    6da4:	d046      	beq.n	6e34 <pin_ctrl+0xe0>
    6da6:	db3e      	blt.n	6e26 <pin_ctrl+0xd2>
    6da8:	2b20      	cmp	r3, #32
    6daa:	d04a      	beq.n	6e42 <pin_ctrl+0xee>
    6dac:	2b21      	cmp	r3, #33	; 0x21
    6dae:	d04e      	beq.n	6e4e <pin_ctrl+0xfa>
    6db0:	e092      	b.n	6ed8 <pin_ctrl+0x184>
    6db2:	2280      	movs	r2, #128	; 0x80
    6db4:	0052      	lsls	r2, r2, #1
    6db6:	4293      	cmp	r3, r2
    6db8:	d100      	bne.n	6dbc <pin_ctrl+0x68>
    6dba:	e071      	b.n	6ea0 <pin_ctrl+0x14c>
    6dbc:	2280      	movs	r2, #128	; 0x80
    6dbe:	0052      	lsls	r2, r2, #1
    6dc0:	4293      	cmp	r3, r2
    6dc2:	dc06      	bgt.n	6dd2 <pin_ctrl+0x7e>
    6dc4:	2b31      	cmp	r3, #49	; 0x31
    6dc6:	d056      	beq.n	6e76 <pin_ctrl+0x122>
    6dc8:	2b32      	cmp	r3, #50	; 0x32
    6dca:	d05b      	beq.n	6e84 <pin_ctrl+0x130>
    6dcc:	2b30      	cmp	r3, #48	; 0x30
    6dce:	d04c      	beq.n	6e6a <pin_ctrl+0x116>
    6dd0:	e082      	b.n	6ed8 <pin_ctrl+0x184>
    6dd2:	2281      	movs	r2, #129	; 0x81
    6dd4:	0052      	lsls	r2, r2, #1
    6dd6:	4293      	cmp	r3, r2
    6dd8:	d069      	beq.n	6eae <pin_ctrl+0x15a>
    6dda:	2281      	movs	r2, #129	; 0x81
    6ddc:	0052      	lsls	r2, r2, #1
    6dde:	4293      	cmp	r3, r2
    6de0:	db57      	blt.n	6e92 <pin_ctrl+0x13e>
    6de2:	4a3f      	ldr	r2, [pc, #252]	; (6ee0 <pin_ctrl+0x18c>)
    6de4:	4293      	cmp	r3, r2
    6de6:	d100      	bne.n	6dea <pin_ctrl+0x96>
    6de8:	e06f      	b.n	6eca <pin_ctrl+0x176>
    6dea:	4a3e      	ldr	r2, [pc, #248]	; (6ee4 <pin_ctrl+0x190>)
    6dec:	4293      	cmp	r3, r2
    6dee:	d065      	beq.n	6ebc <pin_ctrl+0x168>
    6df0:	e072      	b.n	6ed8 <pin_ctrl+0x184>
	{
		//RTS
		case (RTS << 8| PORT485_0 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA15);
    6df2:	4b3d      	ldr	r3, [pc, #244]	; (6ee8 <pin_ctrl+0x194>)
    6df4:	6a1a      	ldr	r2, [r3, #32]
    6df6:	2380      	movs	r3, #128	; 0x80
    6df8:	021b      	lsls	r3, r3, #8
    6dfa:	4013      	ands	r3, r2
    6dfc:	e06c      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA15;return 0;
    6dfe:	23c0      	movs	r3, #192	; 0xc0
    6e00:	05db      	lsls	r3, r3, #23
    6e02:	2280      	movs	r2, #128	; 0x80
    6e04:	0212      	lsls	r2, r2, #8
    6e06:	619a      	str	r2, [r3, #24]
    6e08:	2300      	movs	r3, #0
    6e0a:	e065      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA15;return 0;
    6e0c:	23c0      	movs	r3, #192	; 0xc0
    6e0e:	05db      	lsls	r3, r3, #23
    6e10:	2280      	movs	r2, #128	; 0x80
    6e12:	0212      	lsls	r2, r2, #8
    6e14:	615a      	str	r2, [r3, #20]
    6e16:	2300      	movs	r3, #0
    6e18:	e05e      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA14);
    6e1a:	4b33      	ldr	r3, [pc, #204]	; (6ee8 <pin_ctrl+0x194>)
    6e1c:	6a1a      	ldr	r2, [r3, #32]
    6e1e:	2380      	movs	r3, #128	; 0x80
    6e20:	01db      	lsls	r3, r3, #7
    6e22:	4013      	ands	r3, r2
    6e24:	e058      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA14;return 0;
    6e26:	23c0      	movs	r3, #192	; 0xc0
    6e28:	05db      	lsls	r3, r3, #23
    6e2a:	2280      	movs	r2, #128	; 0x80
    6e2c:	01d2      	lsls	r2, r2, #7
    6e2e:	619a      	str	r2, [r3, #24]
    6e30:	2300      	movs	r3, #0
    6e32:	e051      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA14;return 0;		
    6e34:	23c0      	movs	r3, #192	; 0xc0
    6e36:	05db      	lsls	r3, r3, #23
    6e38:	2280      	movs	r2, #128	; 0x80
    6e3a:	01d2      	lsls	r2, r2, #7
    6e3c:	615a      	str	r2, [r3, #20]
    6e3e:	2300      	movs	r3, #0
    6e40:	e04a      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA13);
    6e42:	4b29      	ldr	r3, [pc, #164]	; (6ee8 <pin_ctrl+0x194>)
    6e44:	6a1a      	ldr	r2, [r3, #32]
    6e46:	2380      	movs	r3, #128	; 0x80
    6e48:	019b      	lsls	r3, r3, #6
    6e4a:	4013      	ands	r3, r2
    6e4c:	e044      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA13;return 0;
    6e4e:	23c0      	movs	r3, #192	; 0xc0
    6e50:	05db      	lsls	r3, r3, #23
    6e52:	2280      	movs	r2, #128	; 0x80
    6e54:	0192      	lsls	r2, r2, #6
    6e56:	619a      	str	r2, [r3, #24]
    6e58:	2300      	movs	r3, #0
    6e5a:	e03d      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA13;return 0;				
    6e5c:	23c0      	movs	r3, #192	; 0xc0
    6e5e:	05db      	lsls	r3, r3, #23
    6e60:	2280      	movs	r2, #128	; 0x80
    6e62:	0192      	lsls	r2, r2, #6
    6e64:	615a      	str	r2, [r3, #20]
    6e66:	2300      	movs	r3, #0
    6e68:	e036      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA12);
    6e6a:	4b1f      	ldr	r3, [pc, #124]	; (6ee8 <pin_ctrl+0x194>)
    6e6c:	6a1a      	ldr	r2, [r3, #32]
    6e6e:	2380      	movs	r3, #128	; 0x80
    6e70:	015b      	lsls	r3, r3, #5
    6e72:	4013      	ands	r3, r2
    6e74:	e030      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA12;return 0;
    6e76:	23c0      	movs	r3, #192	; 0xc0
    6e78:	05db      	lsls	r3, r3, #23
    6e7a:	2280      	movs	r2, #128	; 0x80
    6e7c:	0152      	lsls	r2, r2, #5
    6e7e:	619a      	str	r2, [r3, #24]
    6e80:	2300      	movs	r3, #0
    6e82:	e029      	b.n	6ed8 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA12;return 0;
    6e84:	23c0      	movs	r3, #192	; 0xc0
    6e86:	05db      	lsls	r3, r3, #23
    6e88:	2280      	movs	r2, #128	; 0x80
    6e8a:	0152      	lsls	r2, r2, #5
    6e8c:	615a      	str	r2, [r3, #20]
    6e8e:	2300      	movs	r3, #0
    6e90:	e022      	b.n	6ed8 <pin_ctrl+0x184>

		//LED TX
		case (LED << 8| PWR << 4| ON):		PORT_IOBUS->Group[1].OUTCLR.reg=PORT_PB03;return 0; 
    6e92:	23c0      	movs	r3, #192	; 0xc0
    6e94:	05db      	lsls	r3, r3, #23
    6e96:	2294      	movs	r2, #148	; 0x94
    6e98:	2108      	movs	r1, #8
    6e9a:	5099      	str	r1, [r3, r2]
    6e9c:	2300      	movs	r3, #0
    6e9e:	e01b      	b.n	6ed8 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| OFF):		PORT_IOBUS->Group[1].OUTSET.reg=PORT_PB03;return 0;
    6ea0:	23c0      	movs	r3, #192	; 0xc0
    6ea2:	05db      	lsls	r3, r3, #23
    6ea4:	2298      	movs	r2, #152	; 0x98
    6ea6:	2108      	movs	r1, #8
    6ea8:	5099      	str	r1, [r3, r2]
    6eaa:	2300      	movs	r3, #0
    6eac:	e014      	b.n	6ed8 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| TGL):		PORT_IOBUS->Group[1].OUTTGL.reg=PORT_PB03;return 0;
    6eae:	23c0      	movs	r3, #192	; 0xc0
    6eb0:	05db      	lsls	r3, r3, #23
    6eb2:	229c      	movs	r2, #156	; 0x9c
    6eb4:	2108      	movs	r1, #8
    6eb6:	5099      	str	r1, [r3, r2]
    6eb8:	2300      	movs	r3, #0
    6eba:	e00d      	b.n	6ed8 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| CLR):     PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA18;return 0;
    6ebc:	23c0      	movs	r3, #192	; 0xc0
    6ebe:	05db      	lsls	r3, r3, #23
    6ec0:	2280      	movs	r2, #128	; 0x80
    6ec2:	02d2      	lsls	r2, r2, #11
    6ec4:	615a      	str	r2, [r3, #20]
    6ec6:	2300      	movs	r3, #0
    6ec8:	e006      	b.n	6ed8 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| SET):     PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;return 0;
    6eca:	23c0      	movs	r3, #192	; 0xc0
    6ecc:	05db      	lsls	r3, r3, #23
    6ece:	2280      	movs	r2, #128	; 0x80
    6ed0:	02d2      	lsls	r2, r2, #11
    6ed2:	619a      	str	r2, [r3, #24]
    6ed4:	2300      	movs	r3, #0
    6ed6:	e7ff      	b.n	6ed8 <pin_ctrl+0x184>
		
	}
}
    6ed8:	0018      	movs	r0, r3
    6eda:	46bd      	mov	sp, r7
    6edc:	b003      	add	sp, #12
    6ede:	bd90      	pop	{r4, r7, pc}
    6ee0:	00000201 	.word	0x00000201
    6ee4:	00000202 	.word	0x00000202
    6ee8:	41004400 	.word	0x41004400

00006eec <check_gerkon>:

void check_gerkon(void)
{
    6eec:	b580      	push	{r7, lr}
    6eee:	af00      	add	r7, sp, #0
	static BYTE gerkon_st = 0;
	
	if (PORT->Group[1].IN.reg & PORT_PB23)	{if(PORT->Group[1].OUTSET.reg & PORT_PB03){pin_ctrl(LED,PWR,ON);} gerkon_st = 0; return;}
    6ef0:	4a1b      	ldr	r2, [pc, #108]	; (6f60 <check_gerkon+0x74>)
    6ef2:	23a0      	movs	r3, #160	; 0xa0
    6ef4:	58d2      	ldr	r2, [r2, r3]
    6ef6:	2380      	movs	r3, #128	; 0x80
    6ef8:	041b      	lsls	r3, r3, #16
    6efa:	4013      	ands	r3, r2
    6efc:	d00e      	beq.n	6f1c <check_gerkon+0x30>
    6efe:	4a18      	ldr	r2, [pc, #96]	; (6f60 <check_gerkon+0x74>)
    6f00:	2398      	movs	r3, #152	; 0x98
    6f02:	58d3      	ldr	r3, [r2, r3]
    6f04:	2208      	movs	r2, #8
    6f06:	4013      	ands	r3, r2
    6f08:	d004      	beq.n	6f14 <check_gerkon+0x28>
    6f0a:	2201      	movs	r2, #1
    6f0c:	2100      	movs	r1, #0
    6f0e:	2001      	movs	r0, #1
    6f10:	f7ff ff20 	bl	6d54 <pin_ctrl>
    6f14:	4b13      	ldr	r3, [pc, #76]	; (6f64 <check_gerkon+0x78>)
    6f16:	2200      	movs	r2, #0
    6f18:	701a      	strb	r2, [r3, #0]
    6f1a:	e01e      	b.n	6f5a <check_gerkon+0x6e>
	
	switch (gerkon_st)
    6f1c:	4b11      	ldr	r3, [pc, #68]	; (6f64 <check_gerkon+0x78>)
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d002      	beq.n	6f2a <check_gerkon+0x3e>
    6f24:	2b01      	cmp	r3, #1
    6f26:	d00c      	beq.n	6f42 <check_gerkon+0x56>
    6f28:	e017      	b.n	6f5a <check_gerkon+0x6e>
	{
		case 0:
			pin_ctrl(LED,PWR,OFF);
    6f2a:	2200      	movs	r2, #0
    6f2c:	2100      	movs	r1, #0
    6f2e:	2001      	movs	r0, #1
    6f30:	f7ff ff10 	bl	6d54 <pin_ctrl>
			ger_wait = 10;
    6f34:	4b0c      	ldr	r3, [pc, #48]	; (6f68 <check_gerkon+0x7c>)
    6f36:	220a      	movs	r2, #10
    6f38:	601a      	str	r2, [r3, #0]
			gerkon_st = 1;
    6f3a:	4b0a      	ldr	r3, [pc, #40]	; (6f64 <check_gerkon+0x78>)
    6f3c:	2201      	movs	r2, #1
    6f3e:	701a      	strb	r2, [r3, #0]
		break;
    6f40:	e00b      	b.n	6f5a <check_gerkon+0x6e>
		case 1:
			if (ger_wait)	{return;}
    6f42:	4b09      	ldr	r3, [pc, #36]	; (6f68 <check_gerkon+0x7c>)
    6f44:	681b      	ldr	r3, [r3, #0]
    6f46:	2b00      	cmp	r3, #0
    6f48:	d106      	bne.n	6f58 <check_gerkon+0x6c>
			reset = 1; 
    6f4a:	4b08      	ldr	r3, [pc, #32]	; (6f6c <check_gerkon+0x80>)
    6f4c:	2201      	movs	r2, #1
    6f4e:	801a      	strh	r2, [r3, #0]
			cfg_default(); 
    6f50:	4b07      	ldr	r3, [pc, #28]	; (6f70 <check_gerkon+0x84>)
    6f52:	4798      	blx	r3
		break;
    6f54:	46c0      	nop			; (mov r8, r8)
    6f56:	e000      	b.n	6f5a <check_gerkon+0x6e>
			if (ger_wait)	{return;}
    6f58:	46c0      	nop			; (mov r8, r8)
	}
    6f5a:	46bd      	mov	sp, r7
    6f5c:	bd80      	pop	{r7, pc}
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	41004400 	.word	0x41004400
    6f64:	2000045b 	.word	0x2000045b
    6f68:	20000474 	.word	0x20000474
    6f6c:	20002548 	.word	0x20002548
    6f70:	0000ac19 	.word	0x0000ac19

00006f74 <iap_process>:

DWORD iap_key=0;

WORD iap_process(BYTE *buf, WORD size)
//--------------------------------------------------------------------------
{
    6f74:	b580      	push	{r7, lr}
    6f76:	b084      	sub	sp, #16
    6f78:	af00      	add	r7, sp, #0
    6f7a:	6078      	str	r0, [r7, #4]
    6f7c:	000a      	movs	r2, r1
    6f7e:	1cbb      	adds	r3, r7, #2
    6f80:	801a      	strh	r2, [r3, #0]
	DWORD page;
	WORD  wn = 0;
    6f82:	230a      	movs	r3, #10
    6f84:	18fb      	adds	r3, r7, r3
    6f86:	2200      	movs	r2, #0
    6f88:	801a      	strh	r2, [r3, #0]
	memcpy(iap_buf,buf,size);
    6f8a:	1cbb      	adds	r3, r7, #2
    6f8c:	881a      	ldrh	r2, [r3, #0]
    6f8e:	6879      	ldr	r1, [r7, #4]
    6f90:	4b8c      	ldr	r3, [pc, #560]	; (71c4 <iap_process+0x250>)
    6f92:	0018      	movs	r0, r3
    6f94:	4b8c      	ldr	r3, [pc, #560]	; (71c8 <iap_process+0x254>)
    6f96:	4798      	blx	r3
	static BYTE flwr=0;
	
	switch(iap_buf[wn])
    6f98:	230a      	movs	r3, #10
    6f9a:	18fb      	adds	r3, r7, r3
    6f9c:	881b      	ldrh	r3, [r3, #0]
    6f9e:	4a89      	ldr	r2, [pc, #548]	; (71c4 <iap_process+0x250>)
    6fa0:	5cd3      	ldrb	r3, [r2, r3]
    6fa2:	2b03      	cmp	r3, #3
    6fa4:	d040      	beq.n	7028 <iap_process+0xb4>
    6fa6:	dc02      	bgt.n	6fae <iap_process+0x3a>
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d007      	beq.n	6fbc <iap_process+0x48>
    6fac:	e0f7      	b.n	719e <iap_process+0x22a>
    6fae:	2b05      	cmp	r3, #5
    6fb0:	d100      	bne.n	6fb4 <iap_process+0x40>
    6fb2:	e0a2      	b.n	70fa <iap_process+0x186>
    6fb4:	2b07      	cmp	r3, #7
    6fb6:	d100      	bne.n	6fba <iap_process+0x46>
    6fb8:	e0ca      	b.n	7150 <iap_process+0x1dc>
    6fba:	e0f0      	b.n	719e <iap_process+0x22a>
	{
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6fbc:	23c0      	movs	r3, #192	; 0xc0
    6fbe:	025b      	lsls	r3, r3, #9
    6fc0:	60fb      	str	r3, [r7, #12]
    6fc2:	e01f      	b.n	7004 <iap_process+0x90>
											{
												wdt_reset();
    6fc4:	4b81      	ldr	r3, [pc, #516]	; (71cc <iap_process+0x258>)
    6fc6:	799b      	ldrb	r3, [r3, #6]
    6fc8:	07db      	lsls	r3, r3, #31
    6fca:	0fdb      	lsrs	r3, r3, #31
    6fcc:	b2db      	uxtb	r3, r3
    6fce:	2b01      	cmp	r3, #1
    6fd0:	d107      	bne.n	6fe2 <iap_process+0x6e>
    6fd2:	4a7e      	ldr	r2, [pc, #504]	; (71cc <iap_process+0x258>)
    6fd4:	7993      	ldrb	r3, [r2, #6]
    6fd6:	2101      	movs	r1, #1
    6fd8:	430b      	orrs	r3, r1
    6fda:	7193      	strb	r3, [r2, #6]
    6fdc:	4b7b      	ldr	r3, [pc, #492]	; (71cc <iap_process+0x258>)
    6fde:	22a5      	movs	r2, #165	; 0xa5
    6fe0:	721a      	strb	r2, [r3, #8]
												if(!flash_empty(page,256)){flash_erase_page(page);}
    6fe2:	2380      	movs	r3, #128	; 0x80
    6fe4:	005a      	lsls	r2, r3, #1
    6fe6:	68fb      	ldr	r3, [r7, #12]
    6fe8:	0011      	movs	r1, r2
    6fea:	0018      	movs	r0, r3
    6fec:	4b78      	ldr	r3, [pc, #480]	; (71d0 <iap_process+0x25c>)
    6fee:	4798      	blx	r3
    6ff0:	1e03      	subs	r3, r0, #0
    6ff2:	d103      	bne.n	6ffc <iap_process+0x88>
    6ff4:	68fb      	ldr	r3, [r7, #12]
    6ff6:	0018      	movs	r0, r3
    6ff8:	4b76      	ldr	r3, [pc, #472]	; (71d4 <iap_process+0x260>)
    6ffa:	4798      	blx	r3
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6ffc:	68fb      	ldr	r3, [r7, #12]
    6ffe:	3301      	adds	r3, #1
    7000:	33ff      	adds	r3, #255	; 0xff
    7002:	60fb      	str	r3, [r7, #12]
    7004:	68fb      	ldr	r3, [r7, #12]
    7006:	4a74      	ldr	r2, [pc, #464]	; (71d8 <iap_process+0x264>)
    7008:	4293      	cmp	r3, r2
    700a:	d9db      	bls.n	6fc4 <iap_process+0x50>
											}
											iap_buf[wn] = CM2_A_BOOTLOADER_READY;		wn += sizeof(BYTE );
    700c:	230a      	movs	r3, #10
    700e:	18fb      	adds	r3, r7, r3
    7010:	881b      	ldrh	r3, [r3, #0]
    7012:	4a6c      	ldr	r2, [pc, #432]	; (71c4 <iap_process+0x250>)
    7014:	2102      	movs	r1, #2
    7016:	54d1      	strb	r1, [r2, r3]
    7018:	230a      	movs	r3, #10
    701a:	18fb      	adds	r3, r7, r3
    701c:	220a      	movs	r2, #10
    701e:	18ba      	adds	r2, r7, r2
    7020:	8812      	ldrh	r2, [r2, #0]
    7022:	3201      	adds	r2, #1
    7024:	801a      	strh	r2, [r3, #0]
		
	break;
    7026:	e0ba      	b.n	719e <iap_process+0x22a>
	case CM2_R_LOAD_DATA_PAGE   :			iap_buf[wn] = CM2_A_DATA_PAGE_LOAD;			wn += sizeof(BYTE );
    7028:	230a      	movs	r3, #10
    702a:	18fb      	adds	r3, r7, r3
    702c:	881b      	ldrh	r3, [r3, #0]
    702e:	4a65      	ldr	r2, [pc, #404]	; (71c4 <iap_process+0x250>)
    7030:	2104      	movs	r1, #4
    7032:	54d1      	strb	r1, [r2, r3]
    7034:	230a      	movs	r3, #10
    7036:	18fb      	adds	r3, r7, r3
    7038:	220a      	movs	r2, #10
    703a:	18ba      	adds	r2, r7, r2
    703c:	8812      	ldrh	r2, [r2, #0]
    703e:	3201      	adds	r2, #1
    7040:	801a      	strh	r2, [r3, #0]
											iap_size  =iap_buf[wn] | (iap_buf[wn+1]<<8);		wn += sizeof(WORD );
    7042:	230a      	movs	r3, #10
    7044:	18fb      	adds	r3, r7, r3
    7046:	881b      	ldrh	r3, [r3, #0]
    7048:	4a5e      	ldr	r2, [pc, #376]	; (71c4 <iap_process+0x250>)
    704a:	5cd3      	ldrb	r3, [r2, r3]
    704c:	b21a      	sxth	r2, r3
    704e:	230a      	movs	r3, #10
    7050:	18fb      	adds	r3, r7, r3
    7052:	881b      	ldrh	r3, [r3, #0]
    7054:	3301      	adds	r3, #1
    7056:	495b      	ldr	r1, [pc, #364]	; (71c4 <iap_process+0x250>)
    7058:	5ccb      	ldrb	r3, [r1, r3]
    705a:	021b      	lsls	r3, r3, #8
    705c:	b21b      	sxth	r3, r3
    705e:	4313      	orrs	r3, r2
    7060:	b21b      	sxth	r3, r3
    7062:	b29a      	uxth	r2, r3
    7064:	4b5d      	ldr	r3, [pc, #372]	; (71dc <iap_process+0x268>)
    7066:	801a      	strh	r2, [r3, #0]
    7068:	230a      	movs	r3, #10
    706a:	18fb      	adds	r3, r7, r3
    706c:	220a      	movs	r2, #10
    706e:	18ba      	adds	r2, r7, r2
    7070:	8812      	ldrh	r2, [r2, #0]
    7072:	3202      	adds	r2, #2
    7074:	801a      	strh	r2, [r3, #0]
											iap_addr  =iap_buf[wn] | (iap_buf[wn+1]<<8) | (iap_buf[wn+2]<<16) | (iap_buf[wn+3]<<24);
    7076:	230a      	movs	r3, #10
    7078:	18fb      	adds	r3, r7, r3
    707a:	881b      	ldrh	r3, [r3, #0]
    707c:	4a51      	ldr	r2, [pc, #324]	; (71c4 <iap_process+0x250>)
    707e:	5cd3      	ldrb	r3, [r2, r3]
    7080:	0019      	movs	r1, r3
    7082:	230a      	movs	r3, #10
    7084:	18fb      	adds	r3, r7, r3
    7086:	881b      	ldrh	r3, [r3, #0]
    7088:	3301      	adds	r3, #1
    708a:	4a4e      	ldr	r2, [pc, #312]	; (71c4 <iap_process+0x250>)
    708c:	5cd3      	ldrb	r3, [r2, r3]
    708e:	021b      	lsls	r3, r3, #8
    7090:	000a      	movs	r2, r1
    7092:	431a      	orrs	r2, r3
    7094:	230a      	movs	r3, #10
    7096:	18fb      	adds	r3, r7, r3
    7098:	881b      	ldrh	r3, [r3, #0]
    709a:	3302      	adds	r3, #2
    709c:	4949      	ldr	r1, [pc, #292]	; (71c4 <iap_process+0x250>)
    709e:	5ccb      	ldrb	r3, [r1, r3]
    70a0:	041b      	lsls	r3, r3, #16
    70a2:	431a      	orrs	r2, r3
    70a4:	230a      	movs	r3, #10
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	881b      	ldrh	r3, [r3, #0]
    70aa:	3303      	adds	r3, #3
    70ac:	4945      	ldr	r1, [pc, #276]	; (71c4 <iap_process+0x250>)
    70ae:	5ccb      	ldrb	r3, [r1, r3]
    70b0:	061b      	lsls	r3, r3, #24
    70b2:	4313      	orrs	r3, r2
    70b4:	001a      	movs	r2, r3
    70b6:	4b4a      	ldr	r3, [pc, #296]	; (71e0 <iap_process+0x26c>)
    70b8:	601a      	str	r2, [r3, #0]
											wn += sizeof(DWORD);
    70ba:	230a      	movs	r3, #10
    70bc:	18fb      	adds	r3, r7, r3
    70be:	220a      	movs	r2, #10
    70c0:	18ba      	adds	r2, r7, r2
    70c2:	8812      	ldrh	r2, [r2, #0]
    70c4:	3204      	adds	r2, #4
    70c6:	801a      	strh	r2, [r3, #0]
											
											memcpy(iap_page,iap_buf+wn,iap_size);		wn += iap_size;
    70c8:	230a      	movs	r3, #10
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	881a      	ldrh	r2, [r3, #0]
    70ce:	4b3d      	ldr	r3, [pc, #244]	; (71c4 <iap_process+0x250>)
    70d0:	18d1      	adds	r1, r2, r3
    70d2:	4b42      	ldr	r3, [pc, #264]	; (71dc <iap_process+0x268>)
    70d4:	881b      	ldrh	r3, [r3, #0]
    70d6:	001a      	movs	r2, r3
    70d8:	4b42      	ldr	r3, [pc, #264]	; (71e4 <iap_process+0x270>)
    70da:	0018      	movs	r0, r3
    70dc:	4b3a      	ldr	r3, [pc, #232]	; (71c8 <iap_process+0x254>)
    70de:	4798      	blx	r3
    70e0:	4b3e      	ldr	r3, [pc, #248]	; (71dc <iap_process+0x268>)
    70e2:	8819      	ldrh	r1, [r3, #0]
    70e4:	230a      	movs	r3, #10
    70e6:	18fb      	adds	r3, r7, r3
    70e8:	220a      	movs	r2, #10
    70ea:	18ba      	adds	r2, r7, r2
    70ec:	8812      	ldrh	r2, [r2, #0]
    70ee:	188a      	adds	r2, r1, r2
    70f0:	801a      	strh	r2, [r3, #0]
											
											flwr=1;
    70f2:	4b3d      	ldr	r3, [pc, #244]	; (71e8 <iap_process+0x274>)
    70f4:	2201      	movs	r2, #1
    70f6:	701a      	strb	r2, [r3, #0]
	
	break;
    70f8:	e051      	b.n	719e <iap_process+0x22a>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    70fa:	4b39      	ldr	r3, [pc, #228]	; (71e0 <iap_process+0x26c>)
    70fc:	681b      	ldr	r3, [r3, #0]
    70fe:	4a3b      	ldr	r2, [pc, #236]	; (71ec <iap_process+0x278>)
    7100:	4293      	cmp	r3, r2
    7102:	d958      	bls.n	71b6 <iap_process+0x242>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    7104:	4b36      	ldr	r3, [pc, #216]	; (71e0 <iap_process+0x26c>)
    7106:	681a      	ldr	r2, [r3, #0]
    7108:	23c0      	movs	r3, #192	; 0xc0
    710a:	025b      	lsls	r3, r3, #9
    710c:	429a      	cmp	r2, r3
    710e:	d854      	bhi.n	71ba <iap_process+0x246>
											
											if(flwr)
    7110:	4b35      	ldr	r3, [pc, #212]	; (71e8 <iap_process+0x274>)
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	2b00      	cmp	r3, #0
    7116:	d00d      	beq.n	7134 <iap_process+0x1c0>
											{
												flash_write(iap_addr+IAP_SIZE,iap_page,iap_size);
    7118:	4b31      	ldr	r3, [pc, #196]	; (71e0 <iap_process+0x26c>)
    711a:	681b      	ldr	r3, [r3, #0]
    711c:	22a0      	movs	r2, #160	; 0xa0
    711e:	0252      	lsls	r2, r2, #9
    7120:	1898      	adds	r0, r3, r2
    7122:	4b2e      	ldr	r3, [pc, #184]	; (71dc <iap_process+0x268>)
    7124:	881a      	ldrh	r2, [r3, #0]
    7126:	4b2f      	ldr	r3, [pc, #188]	; (71e4 <iap_process+0x270>)
    7128:	0019      	movs	r1, r3
    712a:	4b31      	ldr	r3, [pc, #196]	; (71f0 <iap_process+0x27c>)
    712c:	4798      	blx	r3
												flwr=0;
    712e:	4b2e      	ldr	r3, [pc, #184]	; (71e8 <iap_process+0x274>)
    7130:	2200      	movs	r2, #0
    7132:	701a      	strb	r2, [r3, #0]
											}
											iap_buf[wn] = CM2_A_DATA_PAGE_UPDATE;		wn += sizeof(BYTE );
    7134:	230a      	movs	r3, #10
    7136:	18fb      	adds	r3, r7, r3
    7138:	881b      	ldrh	r3, [r3, #0]
    713a:	4a22      	ldr	r2, [pc, #136]	; (71c4 <iap_process+0x250>)
    713c:	2106      	movs	r1, #6
    713e:	54d1      	strb	r1, [r2, r3]
    7140:	230a      	movs	r3, #10
    7142:	18fb      	adds	r3, r7, r3
    7144:	220a      	movs	r2, #10
    7146:	18ba      	adds	r2, r7, r2
    7148:	8812      	ldrh	r2, [r2, #0]
    714a:	3201      	adds	r2, #1
    714c:	801a      	strh	r2, [r3, #0]
	break;
    714e:	e026      	b.n	719e <iap_process+0x22a>
	case CM2_R_STOP_BOOTLOADER  :  			iap_key = IAP_VAL;
    7150:	4b28      	ldr	r3, [pc, #160]	; (71f4 <iap_process+0x280>)
    7152:	4a29      	ldr	r2, [pc, #164]	; (71f8 <iap_process+0x284>)
    7154:	601a      	str	r2, [r3, #0]
											if(!flash_empty(IAP_KEY,256)){flash_erase_page(IAP_KEY);}
    7156:	2380      	movs	r3, #128	; 0x80
    7158:	005b      	lsls	r3, r3, #1
    715a:	4a28      	ldr	r2, [pc, #160]	; (71fc <iap_process+0x288>)
    715c:	0019      	movs	r1, r3
    715e:	0010      	movs	r0, r2
    7160:	4b1b      	ldr	r3, [pc, #108]	; (71d0 <iap_process+0x25c>)
    7162:	4798      	blx	r3
    7164:	1e03      	subs	r3, r0, #0
    7166:	d103      	bne.n	7170 <iap_process+0x1fc>
    7168:	4b24      	ldr	r3, [pc, #144]	; (71fc <iap_process+0x288>)
    716a:	0018      	movs	r0, r3
    716c:	4b19      	ldr	r3, [pc, #100]	; (71d4 <iap_process+0x260>)
    716e:	4798      	blx	r3
											flash_write(IAP_KEY,&iap_key,4);
    7170:	4b20      	ldr	r3, [pc, #128]	; (71f4 <iap_process+0x280>)
    7172:	4822      	ldr	r0, [pc, #136]	; (71fc <iap_process+0x288>)
    7174:	2204      	movs	r2, #4
    7176:	0019      	movs	r1, r3
    7178:	4b1d      	ldr	r3, [pc, #116]	; (71f0 <iap_process+0x27c>)
    717a:	4798      	blx	r3
											
											iap_buf[wn] = CM2_A_BOOTLOADER_STOP;		wn += sizeof(BYTE );
    717c:	230a      	movs	r3, #10
    717e:	18fb      	adds	r3, r7, r3
    7180:	881b      	ldrh	r3, [r3, #0]
    7182:	4a10      	ldr	r2, [pc, #64]	; (71c4 <iap_process+0x250>)
    7184:	2108      	movs	r1, #8
    7186:	54d1      	strb	r1, [r2, r3]
    7188:	230a      	movs	r3, #10
    718a:	18fb      	adds	r3, r7, r3
    718c:	220a      	movs	r2, #10
    718e:	18ba      	adds	r2, r7, r2
    7190:	8812      	ldrh	r2, [r2, #0]
    7192:	3201      	adds	r2, #1
    7194:	801a      	strh	r2, [r3, #0]
											reset = TRUE;
    7196:	4b1a      	ldr	r3, [pc, #104]	; (7200 <iap_process+0x28c>)
    7198:	2201      	movs	r2, #1
    719a:	801a      	strh	r2, [r3, #0]
	break;
    719c:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(buf,iap_buf,wn);
    719e:	230a      	movs	r3, #10
    71a0:	18fb      	adds	r3, r7, r3
    71a2:	881a      	ldrh	r2, [r3, #0]
    71a4:	4907      	ldr	r1, [pc, #28]	; (71c4 <iap_process+0x250>)
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	0018      	movs	r0, r3
    71aa:	4b07      	ldr	r3, [pc, #28]	; (71c8 <iap_process+0x254>)
    71ac:	4798      	blx	r3
	return	(wn);
    71ae:	230a      	movs	r3, #10
    71b0:	18fb      	adds	r3, r7, r3
    71b2:	881b      	ldrh	r3, [r3, #0]
    71b4:	e002      	b.n	71bc <iap_process+0x248>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    71b6:	46c0      	nop			; (mov r8, r8)
    71b8:	e000      	b.n	71bc <iap_process+0x248>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    71ba:	46c0      	nop			; (mov r8, r8)
}
    71bc:	0018      	movs	r0, r3
    71be:	46bd      	mov	sp, r7
    71c0:	b004      	add	sp, #16
    71c2:	bd80      	pop	{r7, pc}
    71c4:	20002448 	.word	0x20002448
    71c8:	0000c841 	.word	0x0000c841
    71cc:	40001000 	.word	0x40001000
    71d0:	000066bd 	.word	0x000066bd
    71d4:	00006703 	.word	0x00006703
    71d8:	0002bfff 	.word	0x0002bfff
    71dc:	20000460 	.word	0x20000460
    71e0:	2000045c 	.word	0x2000045c
    71e4:	20002348 	.word	0x20002348
    71e8:	20000468 	.word	0x20000468
    71ec:	00003fff 	.word	0x00003fff
    71f0:	00006751 	.word	0x00006751
    71f4:	20000464 	.word	0x20000464
    71f8:	43ff56ac 	.word	0x43ff56ac
    71fc:	0003f200 	.word	0x0003f200
    7200:	20002548 	.word	0x20002548

00007204 <main>:
WORD reset;
ACCOUNTS accnts;
DWORD crc_fw;
BYTE deb = 0;
int main(void)
{
    7204:	b5b0      	push	{r4, r5, r7, lr}
    7206:	af00      	add	r7, sp, #0
	SCB->VTOR=0x00004000;
    7208:	4b48      	ldr	r3, [pc, #288]	; (732c <main+0x128>)
    720a:	2280      	movs	r2, #128	; 0x80
    720c:	01d2      	lsls	r2, r2, #7
    720e:	609a      	str	r2, [r3, #8]
	
	if (PROC_HERZ == (8 * 1000000))	{sys_clock_init_USE_OSC8M();}   //8MHz
	else							{sys_clock_init_USE_DFLL48M();}	//48MHz
    7210:	4b47      	ldr	r3, [pc, #284]	; (7330 <main+0x12c>)
    7212:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    7214:	b662      	cpsie	i
		
	__enable_irq();
	wdt_reset();
    7216:	4b47      	ldr	r3, [pc, #284]	; (7334 <main+0x130>)
    7218:	799b      	ldrb	r3, [r3, #6]
    721a:	07db      	lsls	r3, r3, #31
    721c:	0fdb      	lsrs	r3, r3, #31
    721e:	b2db      	uxtb	r3, r3
    7220:	2b01      	cmp	r3, #1
    7222:	d107      	bne.n	7234 <main+0x30>
    7224:	4a43      	ldr	r2, [pc, #268]	; (7334 <main+0x130>)
    7226:	7993      	ldrb	r3, [r2, #6]
    7228:	2101      	movs	r1, #1
    722a:	430b      	orrs	r3, r1
    722c:	7193      	strb	r3, [r2, #6]
    722e:	4b41      	ldr	r3, [pc, #260]	; (7334 <main+0x130>)
    7230:	22a5      	movs	r2, #165	; 0xa5
    7232:	721a      	strb	r2, [r3, #8]
	wdt_start();	
    7234:	4b3f      	ldr	r3, [pc, #252]	; (7334 <main+0x130>)
    7236:	781b      	ldrb	r3, [r3, #0]
    7238:	079b      	lsls	r3, r3, #30
    723a:	0fdb      	lsrs	r3, r3, #31
    723c:	b2db      	uxtb	r3, r3
    723e:	2b00      	cmp	r3, #0
    7240:	d119      	bne.n	7276 <main+0x72>
    7242:	4a3c      	ldr	r2, [pc, #240]	; (7334 <main+0x130>)
    7244:	7853      	ldrb	r3, [r2, #1]
    7246:	210f      	movs	r1, #15
    7248:	438b      	bics	r3, r1
    724a:	1c19      	adds	r1, r3, #0
    724c:	230b      	movs	r3, #11
    724e:	430b      	orrs	r3, r1
    7250:	7053      	strb	r3, [r2, #1]
    7252:	4a38      	ldr	r2, [pc, #224]	; (7334 <main+0x130>)
    7254:	7893      	ldrb	r3, [r2, #2]
    7256:	210f      	movs	r1, #15
    7258:	438b      	bics	r3, r1
    725a:	1c19      	adds	r1, r3, #0
    725c:	230a      	movs	r3, #10
    725e:	430b      	orrs	r3, r1
    7260:	7093      	strb	r3, [r2, #2]
    7262:	4a34      	ldr	r2, [pc, #208]	; (7334 <main+0x130>)
    7264:	7953      	ldrb	r3, [r2, #5]
    7266:	2101      	movs	r1, #1
    7268:	430b      	orrs	r3, r1
    726a:	7153      	strb	r3, [r2, #5]
    726c:	4a31      	ldr	r2, [pc, #196]	; (7334 <main+0x130>)
    726e:	7813      	ldrb	r3, [r2, #0]
    7270:	2102      	movs	r1, #2
    7272:	430b      	orrs	r3, r1
    7274:	7013      	strb	r3, [r2, #0]
			
	cfg_init  ();
    7276:	4b30      	ldr	r3, [pc, #192]	; (7338 <main+0x134>)
    7278:	4798      	blx	r3
	if(cfg_2_read() == CFG_ERR) {cfg_2_err = CFG_ERR; err_dword.cfg_2_init = 1; }
    727a:	4b30      	ldr	r3, [pc, #192]	; (733c <main+0x138>)
    727c:	4798      	blx	r3
    727e:	1e03      	subs	r3, r0, #0
    7280:	d107      	bne.n	7292 <main+0x8e>
    7282:	4b2f      	ldr	r3, [pc, #188]	; (7340 <main+0x13c>)
    7284:	2200      	movs	r2, #0
    7286:	701a      	strb	r2, [r3, #0]
    7288:	4b2e      	ldr	r3, [pc, #184]	; (7344 <main+0x140>)
    728a:	781a      	ldrb	r2, [r3, #0]
    728c:	2102      	movs	r1, #2
    728e:	430a      	orrs	r2, r1
    7290:	701a      	strb	r2, [r3, #0]
	if(cfg_read()   == CFG_ERR)	{err_dword.cfg_2_init = 1; cfg_default();}
    7292:	4b2d      	ldr	r3, [pc, #180]	; (7348 <main+0x144>)
    7294:	4798      	blx	r3
    7296:	1e03      	subs	r3, r0, #0
    7298:	d106      	bne.n	72a8 <main+0xa4>
    729a:	4b2a      	ldr	r3, [pc, #168]	; (7344 <main+0x140>)
    729c:	781a      	ldrb	r2, [r3, #0]
    729e:	2102      	movs	r1, #2
    72a0:	430a      	orrs	r2, r1
    72a2:	701a      	strb	r2, [r3, #0]
    72a4:	4b29      	ldr	r3, [pc, #164]	; (734c <main+0x148>)
    72a6:	4798      	blx	r3
	cfg_check();
    72a8:	4b29      	ldr	r3, [pc, #164]	; (7350 <main+0x14c>)
    72aa:	4798      	blx	r3

	gpio_init();
    72ac:	4b29      	ldr	r3, [pc, #164]	; (7354 <main+0x150>)
    72ae:	4798      	blx	r3
	TC3_init();
    72b0:	4b29      	ldr	r3, [pc, #164]	; (7358 <main+0x154>)
    72b2:	4798      	blx	r3
	spi_init();
    72b4:	4b29      	ldr	r3, [pc, #164]	; (735c <main+0x158>)
    72b6:	4798      	blx	r3
	usart_init();
    72b8:	4b29      	ldr	r3, [pc, #164]	; (7360 <main+0x15c>)
    72ba:	4798      	blx	r3
	eth_init();
    72bc:	4b29      	ldr	r3, [pc, #164]	; (7364 <main+0x160>)
    72be:	4798      	blx	r3
	
	acc(READ);
    72c0:	2000      	movs	r0, #0
    72c2:	4b29      	ldr	r3, [pc, #164]	; (7368 <main+0x164>)
    72c4:	4798      	blx	r3
	log_ch();
    72c6:	4b29      	ldr	r3, [pc, #164]	; (736c <main+0x168>)
    72c8:	4798      	blx	r3
	log_safe(0, 0x00000000, 0x00000000, START);
    72ca:	2304      	movs	r3, #4
    72cc:	2200      	movs	r2, #0
    72ce:	2100      	movs	r1, #0
    72d0:	2000      	movs	r0, #0
    72d2:	4c27      	ldr	r4, [pc, #156]	; (7370 <main+0x16c>)
    72d4:	47a0      	blx	r4
	
	crc_fw = crc32(0x00004000, 0x00014000);
    72d6:	23a0      	movs	r3, #160	; 0xa0
    72d8:	025a      	lsls	r2, r3, #9
    72da:	2380      	movs	r3, #128	; 0x80
    72dc:	01db      	lsls	r3, r3, #7
    72de:	0011      	movs	r1, r2
    72e0:	0018      	movs	r0, r3
    72e2:	4b24      	ldr	r3, [pc, #144]	; (7374 <main+0x170>)
    72e4:	4798      	blx	r3
    72e6:	0003      	movs	r3, r0
    72e8:	001a      	movs	r2, r3
    72ea:	4b23      	ldr	r3, [pc, #140]	; (7378 <main+0x174>)
    72ec:	601a      	str	r2, [r3, #0]
	
	led_init();
    72ee:	2201      	movs	r2, #1
    72f0:	2100      	movs	r1, #0
    72f2:	2001      	movs	r0, #1
    72f4:	4b21      	ldr	r3, [pc, #132]	; (737c <main+0x178>)
    72f6:	4798      	blx	r3
	if (sizeof(CFG_1) != 0x100 ) { warning_led(1); DWORD ERR1 = sizeof(CFG_1);}
	if (sizeof(CFG_2) != 0x100 ) { warning_led(2); DWORD ERR2 = sizeof(CFG_2);}
/*DEBUG*/				
	while (1)
	{
	    if(reset == NULL)
    72f8:	4b21      	ldr	r3, [pc, #132]	; (7380 <main+0x17c>)
    72fa:	881b      	ldrh	r3, [r3, #0]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d10e      	bne.n	731e <main+0x11a>
		 {wdt_reset();}//wdt-drop timer
    7300:	4b0c      	ldr	r3, [pc, #48]	; (7334 <main+0x130>)
    7302:	799b      	ldrb	r3, [r3, #6]
    7304:	07db      	lsls	r3, r3, #31
    7306:	0fdb      	lsrs	r3, r3, #31
    7308:	b2db      	uxtb	r3, r3
    730a:	2b01      	cmp	r3, #1
    730c:	d107      	bne.n	731e <main+0x11a>
    730e:	4a09      	ldr	r2, [pc, #36]	; (7334 <main+0x130>)
    7310:	7993      	ldrb	r3, [r2, #6]
    7312:	2101      	movs	r1, #1
    7314:	430b      	orrs	r3, r1
    7316:	7193      	strb	r3, [r2, #6]
    7318:	4b06      	ldr	r3, [pc, #24]	; (7334 <main+0x130>)
    731a:	22a5      	movs	r2, #165	; 0xa5
    731c:	721a      	strb	r2, [r3, #8]
		eth_process();
    731e:	4b19      	ldr	r3, [pc, #100]	; (7384 <main+0x180>)
    7320:	4798      	blx	r3
		cmd_process();
    7322:	4b19      	ldr	r3, [pc, #100]	; (7388 <main+0x184>)
    7324:	4798      	blx	r3
		tc3_process();
    7326:	4b19      	ldr	r3, [pc, #100]	; (738c <main+0x188>)
    7328:	4798      	blx	r3
	    if(reset == NULL)
    732a:	e7e5      	b.n	72f8 <main+0xf4>
    732c:	e000ed00 	.word	0xe000ed00
    7330:	00007d9d 	.word	0x00007d9d
    7334:	40001000 	.word	0x40001000
    7338:	0000ab25 	.word	0x0000ab25
    733c:	0000abb9 	.word	0x0000abb9
    7340:	20000002 	.word	0x20000002
    7344:	20002550 	.word	0x20002550
    7348:	0000ab59 	.word	0x0000ab59
    734c:	0000ac19 	.word	0x0000ac19
    7350:	0000af3d 	.word	0x0000af3d
    7354:	00006a41 	.word	0x00006a41
    7358:	000080a9 	.word	0x000080a9
    735c:	000076a5 	.word	0x000076a5
    7360:	00008619 	.word	0x00008619
    7364:	00006239 	.word	0x00006239
    7368:	00004215 	.word	0x00004215
    736c:	00004491 	.word	0x00004491
    7370:	00004525 	.word	0x00004525
    7374:	00005e95 	.word	0x00005e95
    7378:	2000254c 	.word	0x2000254c
    737c:	00006d55 	.word	0x00006d55
    7380:	20002548 	.word	0x20002548
    7384:	0000634d 	.word	0x0000634d
    7388:	00004981 	.word	0x00004981
    738c:	000081fd 	.word	0x000081fd

00007390 <socket_init>:




BYTE socket_init (BYTE numb, WORD src_port, BYTE mode)
{
    7390:	b590      	push	{r4, r7, lr}
    7392:	b085      	sub	sp, #20
    7394:	af00      	add	r7, sp, #0
    7396:	0004      	movs	r4, r0
    7398:	0008      	movs	r0, r1
    739a:	0011      	movs	r1, r2
    739c:	1dfb      	adds	r3, r7, #7
    739e:	1c22      	adds	r2, r4, #0
    73a0:	701a      	strb	r2, [r3, #0]
    73a2:	1d3b      	adds	r3, r7, #4
    73a4:	1c02      	adds	r2, r0, #0
    73a6:	801a      	strh	r2, [r3, #0]
    73a8:	1dbb      	adds	r3, r7, #6
    73aa:	1c0a      	adds	r2, r1, #0
    73ac:	701a      	strb	r2, [r3, #0]
	BYTE buf[2];
	
	//mode
	if(mode==UDP){buf[0]=SR_00_P2;}
    73ae:	1dbb      	adds	r3, r7, #6
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	2b01      	cmp	r3, #1
    73b4:	d103      	bne.n	73be <socket_init+0x2e>
    73b6:	230c      	movs	r3, #12
    73b8:	18fb      	adds	r3, r7, r3
    73ba:	2202      	movs	r2, #2
    73bc:	701a      	strb	r2, [r3, #0]
	if(mode==TCP){buf[0]=SR_00_P1;}	
    73be:	1dbb      	adds	r3, r7, #6
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	2b02      	cmp	r3, #2
    73c4:	d103      	bne.n	73ce <socket_init+0x3e>
    73c6:	230c      	movs	r3, #12
    73c8:	18fb      	adds	r3, r7, r3
    73ca:	2201      	movs	r2, #1
    73cc:	701a      	strb	r2, [r3, #0]
		
	spi_write_timeout(ADDR_SOC_MODE,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    73ce:	4b5f      	ldr	r3, [pc, #380]	; (754c <socket_init+0x1bc>)
    73d0:	220a      	movs	r2, #10
    73d2:	801a      	strh	r2, [r3, #0]
    73d4:	e006      	b.n	73e4 <socket_init+0x54>
    73d6:	4b5d      	ldr	r3, [pc, #372]	; (754c <socket_init+0x1bc>)
    73d8:	881b      	ldrh	r3, [r3, #0]
    73da:	b29b      	uxth	r3, r3
    73dc:	2b00      	cmp	r3, #0
    73de:	d101      	bne.n	73e4 <socket_init+0x54>
    73e0:	2301      	movs	r3, #1
    73e2:	e0af      	b.n	7544 <socket_init+0x1b4>
    73e4:	1dfb      	adds	r3, r7, #7
    73e6:	781b      	ldrb	r3, [r3, #0]
    73e8:	015b      	lsls	r3, r3, #5
    73ea:	b25b      	sxtb	r3, r3
    73ec:	2208      	movs	r2, #8
    73ee:	4313      	orrs	r3, r2
    73f0:	b25b      	sxtb	r3, r3
    73f2:	b2d9      	uxtb	r1, r3
    73f4:	230c      	movs	r3, #12
    73f6:	18fa      	adds	r2, r7, r3
    73f8:	2301      	movs	r3, #1
    73fa:	2000      	movs	r0, #0
    73fc:	4c54      	ldr	r4, [pc, #336]	; (7550 <socket_init+0x1c0>)
    73fe:	47a0      	blx	r4
    7400:	1e03      	subs	r3, r0, #0
    7402:	d0e8      	beq.n	73d6 <socket_init+0x46>
	
	//src_port
	buf[0]=((src_port & 0xFF00)>>8);
    7404:	1d3b      	adds	r3, r7, #4
    7406:	881b      	ldrh	r3, [r3, #0]
    7408:	0a1b      	lsrs	r3, r3, #8
    740a:	b29b      	uxth	r3, r3
    740c:	b2da      	uxtb	r2, r3
    740e:	230c      	movs	r3, #12
    7410:	18fb      	adds	r3, r7, r3
    7412:	701a      	strb	r2, [r3, #0]
	buf[1]=( src_port & 0x00FF);
    7414:	1d3b      	adds	r3, r7, #4
    7416:	881b      	ldrh	r3, [r3, #0]
    7418:	b2da      	uxtb	r2, r3
    741a:	230c      	movs	r3, #12
    741c:	18fb      	adds	r3, r7, r3
    741e:	705a      	strb	r2, [r3, #1]
	spi_write_timeout(ADDR_SOC_SRC_PORT0,(SOCKET_REGISTER | SOCKET(numb)),buf,2,10);
    7420:	4b4a      	ldr	r3, [pc, #296]	; (754c <socket_init+0x1bc>)
    7422:	220a      	movs	r2, #10
    7424:	801a      	strh	r2, [r3, #0]
    7426:	e006      	b.n	7436 <socket_init+0xa6>
    7428:	4b48      	ldr	r3, [pc, #288]	; (754c <socket_init+0x1bc>)
    742a:	881b      	ldrh	r3, [r3, #0]
    742c:	b29b      	uxth	r3, r3
    742e:	2b00      	cmp	r3, #0
    7430:	d101      	bne.n	7436 <socket_init+0xa6>
    7432:	2301      	movs	r3, #1
    7434:	e086      	b.n	7544 <socket_init+0x1b4>
    7436:	1dfb      	adds	r3, r7, #7
    7438:	781b      	ldrb	r3, [r3, #0]
    743a:	015b      	lsls	r3, r3, #5
    743c:	b25b      	sxtb	r3, r3
    743e:	2208      	movs	r2, #8
    7440:	4313      	orrs	r3, r2
    7442:	b25b      	sxtb	r3, r3
    7444:	b2d9      	uxtb	r1, r3
    7446:	230c      	movs	r3, #12
    7448:	18fa      	adds	r2, r7, r3
    744a:	2302      	movs	r3, #2
    744c:	2004      	movs	r0, #4
    744e:	4c40      	ldr	r4, [pc, #256]	; (7550 <socket_init+0x1c0>)
    7450:	47a0      	blx	r4
    7452:	1e03      	subs	r3, r0, #0
    7454:	d0e8      	beq.n	7428 <socket_init+0x98>
	
	
	//socket_cmd_open
	buf[0]=CMD_OPEN;
    7456:	230c      	movs	r3, #12
    7458:	18fb      	adds	r3, r7, r3
    745a:	2201      	movs	r2, #1
    745c:	701a      	strb	r2, [r3, #0]
	spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    745e:	4b3b      	ldr	r3, [pc, #236]	; (754c <socket_init+0x1bc>)
    7460:	220a      	movs	r2, #10
    7462:	801a      	strh	r2, [r3, #0]
    7464:	e006      	b.n	7474 <socket_init+0xe4>
    7466:	4b39      	ldr	r3, [pc, #228]	; (754c <socket_init+0x1bc>)
    7468:	881b      	ldrh	r3, [r3, #0]
    746a:	b29b      	uxth	r3, r3
    746c:	2b00      	cmp	r3, #0
    746e:	d101      	bne.n	7474 <socket_init+0xe4>
    7470:	2301      	movs	r3, #1
    7472:	e067      	b.n	7544 <socket_init+0x1b4>
    7474:	1dfb      	adds	r3, r7, #7
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	015b      	lsls	r3, r3, #5
    747a:	b25b      	sxtb	r3, r3
    747c:	2208      	movs	r2, #8
    747e:	4313      	orrs	r3, r2
    7480:	b25b      	sxtb	r3, r3
    7482:	b2d9      	uxtb	r1, r3
    7484:	230c      	movs	r3, #12
    7486:	18fa      	adds	r2, r7, r3
    7488:	2301      	movs	r3, #1
    748a:	2001      	movs	r0, #1
    748c:	4c30      	ldr	r4, [pc, #192]	; (7550 <socket_init+0x1c0>)
    748e:	47a0      	blx	r4
    7490:	1e03      	subs	r3, r0, #0
    7492:	d0e8      	beq.n	7466 <socket_init+0xd6>
	
	if (mode == TCP)
    7494:	1dbb      	adds	r3, r7, #6
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	2b02      	cmp	r3, #2
    749a:	d152      	bne.n	7542 <socket_init+0x1b2>
	{
		//socket_set_RTR
		buf[0]=0x0F;
    749c:	230c      	movs	r3, #12
    749e:	18fb      	adds	r3, r7, r3
    74a0:	220f      	movs	r2, #15
    74a2:	701a      	strb	r2, [r3, #0]
		buf[1]=0xA0;
    74a4:	230c      	movs	r3, #12
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	22a0      	movs	r2, #160	; 0xa0
    74aa:	705a      	strb	r2, [r3, #1]
		spi_write_timeout(ADDR_COM_RETRY_TIME_0,COMMON_REGISTER,buf,2,10);
    74ac:	4b27      	ldr	r3, [pc, #156]	; (754c <socket_init+0x1bc>)
    74ae:	220a      	movs	r2, #10
    74b0:	801a      	strh	r2, [r3, #0]
    74b2:	e006      	b.n	74c2 <socket_init+0x132>
    74b4:	4b25      	ldr	r3, [pc, #148]	; (754c <socket_init+0x1bc>)
    74b6:	881b      	ldrh	r3, [r3, #0]
    74b8:	b29b      	uxth	r3, r3
    74ba:	2b00      	cmp	r3, #0
    74bc:	d101      	bne.n	74c2 <socket_init+0x132>
    74be:	2301      	movs	r3, #1
    74c0:	e040      	b.n	7544 <socket_init+0x1b4>
    74c2:	230c      	movs	r3, #12
    74c4:	18fa      	adds	r2, r7, r3
    74c6:	2302      	movs	r3, #2
    74c8:	2100      	movs	r1, #0
    74ca:	2019      	movs	r0, #25
    74cc:	4c20      	ldr	r4, [pc, #128]	; (7550 <socket_init+0x1c0>)
    74ce:	47a0      	blx	r4
    74d0:	1e03      	subs	r3, r0, #0
    74d2:	d0ef      	beq.n	74b4 <socket_init+0x124>
		//socket_set_RCR
		buf[0]=0x04;
    74d4:	230c      	movs	r3, #12
    74d6:	18fb      	adds	r3, r7, r3
    74d8:	2204      	movs	r2, #4
    74da:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_COM_RETRY_COUNT,COMMON_REGISTER,buf,1,10);
    74dc:	4b1b      	ldr	r3, [pc, #108]	; (754c <socket_init+0x1bc>)
    74de:	220a      	movs	r2, #10
    74e0:	801a      	strh	r2, [r3, #0]
    74e2:	e006      	b.n	74f2 <socket_init+0x162>
    74e4:	4b19      	ldr	r3, [pc, #100]	; (754c <socket_init+0x1bc>)
    74e6:	881b      	ldrh	r3, [r3, #0]
    74e8:	b29b      	uxth	r3, r3
    74ea:	2b00      	cmp	r3, #0
    74ec:	d101      	bne.n	74f2 <socket_init+0x162>
    74ee:	2301      	movs	r3, #1
    74f0:	e028      	b.n	7544 <socket_init+0x1b4>
    74f2:	230c      	movs	r3, #12
    74f4:	18fa      	adds	r2, r7, r3
    74f6:	2301      	movs	r3, #1
    74f8:	2100      	movs	r1, #0
    74fa:	201b      	movs	r0, #27
    74fc:	4c14      	ldr	r4, [pc, #80]	; (7550 <socket_init+0x1c0>)
    74fe:	47a0      	blx	r4
    7500:	1e03      	subs	r3, r0, #0
    7502:	d0ef      	beq.n	74e4 <socket_init+0x154>
		//socket_cmd_listen
		buf[0]=CMD_LISTEN;
    7504:	230c      	movs	r3, #12
    7506:	18fb      	adds	r3, r7, r3
    7508:	2202      	movs	r2, #2
    750a:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    750c:	4b0f      	ldr	r3, [pc, #60]	; (754c <socket_init+0x1bc>)
    750e:	220a      	movs	r2, #10
    7510:	801a      	strh	r2, [r3, #0]
    7512:	e006      	b.n	7522 <socket_init+0x192>
    7514:	4b0d      	ldr	r3, [pc, #52]	; (754c <socket_init+0x1bc>)
    7516:	881b      	ldrh	r3, [r3, #0]
    7518:	b29b      	uxth	r3, r3
    751a:	2b00      	cmp	r3, #0
    751c:	d101      	bne.n	7522 <socket_init+0x192>
    751e:	2301      	movs	r3, #1
    7520:	e010      	b.n	7544 <socket_init+0x1b4>
    7522:	1dfb      	adds	r3, r7, #7
    7524:	781b      	ldrb	r3, [r3, #0]
    7526:	015b      	lsls	r3, r3, #5
    7528:	b25b      	sxtb	r3, r3
    752a:	2208      	movs	r2, #8
    752c:	4313      	orrs	r3, r2
    752e:	b25b      	sxtb	r3, r3
    7530:	b2d9      	uxtb	r1, r3
    7532:	230c      	movs	r3, #12
    7534:	18fa      	adds	r2, r7, r3
    7536:	2301      	movs	r3, #1
    7538:	2001      	movs	r0, #1
    753a:	4c05      	ldr	r4, [pc, #20]	; (7550 <socket_init+0x1c0>)
    753c:	47a0      	blx	r4
    753e:	1e03      	subs	r3, r0, #0
    7540:	d0e8      	beq.n	7514 <socket_init+0x184>
	}
		
	return SUCCESS;
    7542:	2300      	movs	r3, #0
	
    7544:	0018      	movs	r0, r3
    7546:	46bd      	mov	sp, r7
    7548:	b005      	add	sp, #20
    754a:	bd90      	pop	{r4, r7, pc}
    754c:	200031f4 	.word	0x200031f4
    7550:	00007929 	.word	0x00007929

00007554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7554:	b580      	push	{r7, lr}
    7556:	b082      	sub	sp, #8
    7558:	af00      	add	r7, sp, #0
    755a:	0002      	movs	r2, r0
    755c:	1dfb      	adds	r3, r7, #7
    755e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7560:	1dfb      	adds	r3, r7, #7
    7562:	781b      	ldrb	r3, [r3, #0]
    7564:	2b7f      	cmp	r3, #127	; 0x7f
    7566:	d809      	bhi.n	757c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7568:	4b06      	ldr	r3, [pc, #24]	; (7584 <__NVIC_EnableIRQ+0x30>)
    756a:	1dfa      	adds	r2, r7, #7
    756c:	7812      	ldrb	r2, [r2, #0]
    756e:	0011      	movs	r1, r2
    7570:	221f      	movs	r2, #31
    7572:	400a      	ands	r2, r1
    7574:	2101      	movs	r1, #1
    7576:	4091      	lsls	r1, r2
    7578:	000a      	movs	r2, r1
    757a:	601a      	str	r2, [r3, #0]
  }
}
    757c:	46c0      	nop			; (mov r8, r8)
    757e:	46bd      	mov	sp, r7
    7580:	b002      	add	sp, #8
    7582:	bd80      	pop	{r7, pc}
    7584:	e000e100 	.word	0xe000e100

00007588 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
    758e:	0002      	movs	r2, r0
    7590:	1dfb      	adds	r3, r7, #7
    7592:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7594:	1dfb      	adds	r3, r7, #7
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	2b7f      	cmp	r3, #127	; 0x7f
    759a:	d80e      	bhi.n	75ba <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    759c:	4909      	ldr	r1, [pc, #36]	; (75c4 <__NVIC_DisableIRQ+0x3c>)
    759e:	1dfb      	adds	r3, r7, #7
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	001a      	movs	r2, r3
    75a4:	231f      	movs	r3, #31
    75a6:	4013      	ands	r3, r2
    75a8:	2201      	movs	r2, #1
    75aa:	409a      	lsls	r2, r3
    75ac:	0013      	movs	r3, r2
    75ae:	2280      	movs	r2, #128	; 0x80
    75b0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    75b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75b6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	46bd      	mov	sp, r7
    75be:	b002      	add	sp, #8
    75c0:	bd80      	pop	{r7, pc}
    75c2:	46c0      	nop			; (mov r8, r8)
    75c4:	e000e100 	.word	0xe000e100

000075c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    75c8:	b5b0      	push	{r4, r5, r7, lr}
    75ca:	b082      	sub	sp, #8
    75cc:	af00      	add	r7, sp, #0
    75ce:	0002      	movs	r2, r0
    75d0:	6039      	str	r1, [r7, #0]
    75d2:	1dfb      	adds	r3, r7, #7
    75d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    75d6:	1dfb      	adds	r3, r7, #7
    75d8:	781b      	ldrb	r3, [r3, #0]
    75da:	2b7f      	cmp	r3, #127	; 0x7f
    75dc:	d828      	bhi.n	7630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    75de:	4c2f      	ldr	r4, [pc, #188]	; (769c <__NVIC_SetPriority+0xd4>)
    75e0:	1dfb      	adds	r3, r7, #7
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	b25b      	sxtb	r3, r3
    75e6:	089b      	lsrs	r3, r3, #2
    75e8:	492c      	ldr	r1, [pc, #176]	; (769c <__NVIC_SetPriority+0xd4>)
    75ea:	1dfa      	adds	r2, r7, #7
    75ec:	7812      	ldrb	r2, [r2, #0]
    75ee:	b252      	sxtb	r2, r2
    75f0:	0892      	lsrs	r2, r2, #2
    75f2:	32c0      	adds	r2, #192	; 0xc0
    75f4:	0092      	lsls	r2, r2, #2
    75f6:	5852      	ldr	r2, [r2, r1]
    75f8:	1df9      	adds	r1, r7, #7
    75fa:	7809      	ldrb	r1, [r1, #0]
    75fc:	0008      	movs	r0, r1
    75fe:	2103      	movs	r1, #3
    7600:	4001      	ands	r1, r0
    7602:	00c9      	lsls	r1, r1, #3
    7604:	20ff      	movs	r0, #255	; 0xff
    7606:	4088      	lsls	r0, r1
    7608:	0001      	movs	r1, r0
    760a:	43c9      	mvns	r1, r1
    760c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    760e:	683a      	ldr	r2, [r7, #0]
    7610:	0192      	lsls	r2, r2, #6
    7612:	20ff      	movs	r0, #255	; 0xff
    7614:	4010      	ands	r0, r2
    7616:	1dfa      	adds	r2, r7, #7
    7618:	7812      	ldrb	r2, [r2, #0]
    761a:	0015      	movs	r5, r2
    761c:	2203      	movs	r2, #3
    761e:	402a      	ands	r2, r5
    7620:	00d2      	lsls	r2, r2, #3
    7622:	4090      	lsls	r0, r2
    7624:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7626:	430a      	orrs	r2, r1
    7628:	33c0      	adds	r3, #192	; 0xc0
    762a:	009b      	lsls	r3, r3, #2
    762c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    762e:	e031      	b.n	7694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7630:	4c1b      	ldr	r4, [pc, #108]	; (76a0 <__NVIC_SetPriority+0xd8>)
    7632:	1dfb      	adds	r3, r7, #7
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	001a      	movs	r2, r3
    7638:	230f      	movs	r3, #15
    763a:	4013      	ands	r3, r2
    763c:	3b08      	subs	r3, #8
    763e:	0899      	lsrs	r1, r3, #2
    7640:	4a17      	ldr	r2, [pc, #92]	; (76a0 <__NVIC_SetPriority+0xd8>)
    7642:	1dfb      	adds	r3, r7, #7
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	0018      	movs	r0, r3
    7648:	230f      	movs	r3, #15
    764a:	4003      	ands	r3, r0
    764c:	3b08      	subs	r3, #8
    764e:	089b      	lsrs	r3, r3, #2
    7650:	3306      	adds	r3, #6
    7652:	009b      	lsls	r3, r3, #2
    7654:	18d3      	adds	r3, r2, r3
    7656:	3304      	adds	r3, #4
    7658:	681b      	ldr	r3, [r3, #0]
    765a:	1dfa      	adds	r2, r7, #7
    765c:	7812      	ldrb	r2, [r2, #0]
    765e:	0010      	movs	r0, r2
    7660:	2203      	movs	r2, #3
    7662:	4002      	ands	r2, r0
    7664:	00d2      	lsls	r2, r2, #3
    7666:	20ff      	movs	r0, #255	; 0xff
    7668:	4090      	lsls	r0, r2
    766a:	0002      	movs	r2, r0
    766c:	43d2      	mvns	r2, r2
    766e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7670:	683b      	ldr	r3, [r7, #0]
    7672:	019b      	lsls	r3, r3, #6
    7674:	20ff      	movs	r0, #255	; 0xff
    7676:	4018      	ands	r0, r3
    7678:	1dfb      	adds	r3, r7, #7
    767a:	781b      	ldrb	r3, [r3, #0]
    767c:	001d      	movs	r5, r3
    767e:	2303      	movs	r3, #3
    7680:	402b      	ands	r3, r5
    7682:	00db      	lsls	r3, r3, #3
    7684:	4098      	lsls	r0, r3
    7686:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7688:	431a      	orrs	r2, r3
    768a:	1d8b      	adds	r3, r1, #6
    768c:	009b      	lsls	r3, r3, #2
    768e:	18e3      	adds	r3, r4, r3
    7690:	3304      	adds	r3, #4
    7692:	601a      	str	r2, [r3, #0]
}
    7694:	46c0      	nop			; (mov r8, r8)
    7696:	46bd      	mov	sp, r7
    7698:	b002      	add	sp, #8
    769a:	bdb0      	pop	{r4, r5, r7, pc}
    769c:	e000e100 	.word	0xe000e100
    76a0:	e000ed00 	.word	0xe000ed00

000076a4 <spi_init>:
SPI spi;


void spi_init(void)
//-----------------------------------------------------------------------------
{
    76a4:	b580      	push	{r7, lr}
    76a6:	af00      	add	r7, sp, #0
	PM->APBCMASK.bit.SERCOM5_ =1; // Bit  2    - SERCOM4: SERCOM4 APB Clock Enable (1 - enabled)
    76a8:	4a67      	ldr	r2, [pc, #412]	; (7848 <spi_init+0x1a4>)
    76aa:	6a13      	ldr	r3, [r2, #32]
    76ac:	2180      	movs	r1, #128	; 0x80
    76ae:	430b      	orrs	r3, r1
    76b0:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.bit.ID   =GCLK_CLKCTRL_ID_SERCOM5_CORE; // Bits 5:0  - ID: Generic Clock Selection ID (0x18 - SERCOM4_CORE)
    76b2:	4a66      	ldr	r2, [pc, #408]	; (784c <spi_init+0x1a8>)
    76b4:	8853      	ldrh	r3, [r2, #2]
    76b6:	213f      	movs	r1, #63	; 0x3f
    76b8:	438b      	bics	r3, r1
    76ba:	1c19      	adds	r1, r3, #0
    76bc:	2319      	movs	r3, #25
    76be:	430b      	orrs	r3, r1
    76c0:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    76c2:	4a62      	ldr	r2, [pc, #392]	; (784c <spi_init+0x1a8>)
    76c4:	8853      	ldrh	r3, [r2, #2]
    76c6:	4962      	ldr	r1, [pc, #392]	; (7850 <spi_init+0x1ac>)
    76c8:	400b      	ands	r3, r1
    76ca:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    76cc:	4a5f      	ldr	r2, [pc, #380]	; (784c <spi_init+0x1a8>)
    76ce:	8853      	ldrh	r3, [r2, #2]
    76d0:	2180      	movs	r1, #128	; 0x80
    76d2:	01c9      	lsls	r1, r1, #7
    76d4:	430b      	orrs	r3, r1
    76d6:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	if(SERCOM5->SPI.SYNCBUSY.bit.SWRST)   // Bit 0 - SWRST: Software Reset Synchronization Busy
    76d8:	4b5e      	ldr	r3, [pc, #376]	; (7854 <spi_init+0x1b0>)
    76da:	69db      	ldr	r3, [r3, #28]
    76dc:	07db      	lsls	r3, r3, #31
    76de:	0fdb      	lsrs	r3, r3, #31
    76e0:	b2db      	uxtb	r3, r3
    76e2:	2b00      	cmp	r3, #0
    76e4:	d01b      	beq.n	771e <spi_init+0x7a>
	{
		if(SERCOM5->SPI.CTRLA.bit.ENABLE)   // Bit 1 - ENABLE: Enable
    76e6:	4b5b      	ldr	r3, [pc, #364]	; (7854 <spi_init+0x1b0>)
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	079b      	lsls	r3, r3, #30
    76ec:	0fdb      	lsrs	r3, r3, #31
    76ee:	b2db      	uxtb	r3, r3
    76f0:	2b00      	cmp	r3, #0
    76f2:	d014      	beq.n	771e <spi_init+0x7a>
		{
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    76f4:	46c0      	nop			; (mov r8, r8)
    76f6:	4b57      	ldr	r3, [pc, #348]	; (7854 <spi_init+0x1b0>)
    76f8:	69db      	ldr	r3, [r3, #28]
    76fa:	079b      	lsls	r3, r3, #30
    76fc:	0fdb      	lsrs	r3, r3, #31
    76fe:	b2db      	uxtb	r3, r3
    7700:	2b00      	cmp	r3, #0
    7702:	d1f8      	bne.n	76f6 <spi_init+0x52>
			SERCOM5->SPI.CTRLA.bit.ENABLE=0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    7704:	4a53      	ldr	r2, [pc, #332]	; (7854 <spi_init+0x1b0>)
    7706:	6813      	ldr	r3, [r2, #0]
    7708:	2102      	movs	r1, #2
    770a:	438b      	bics	r3, r1
    770c:	6013      	str	r3, [r2, #0]
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    770e:	46c0      	nop			; (mov r8, r8)
    7710:	4b50      	ldr	r3, [pc, #320]	; (7854 <spi_init+0x1b0>)
    7712:	69db      	ldr	r3, [r3, #28]
    7714:	079b      	lsls	r3, r3, #30
    7716:	0fdb      	lsrs	r3, r3, #31
    7718:	b2db      	uxtb	r3, r3
    771a:	2b00      	cmp	r3, #0
    771c:	d1f8      	bne.n	7710 <spi_init+0x6c>
		}
	}

	//.............................................................................

	SERCOM5->SPI.CTRLA.bit.SWRST   =0x01; // Bit  0     - SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    771e:	4a4d      	ldr	r2, [pc, #308]	; (7854 <spi_init+0x1b0>)
    7720:	6813      	ldr	r3, [r2, #0]
    7722:	2101      	movs	r1, #1
    7724:	430b      	orrs	r3, r1
    7726:	6013      	str	r3, [r2, #0]
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    7728:	46c0      	nop			; (mov r8, r8)
    772a:	4b4a      	ldr	r3, [pc, #296]	; (7854 <spi_init+0x1b0>)
    772c:	69db      	ldr	r3, [r3, #28]
    772e:	07db      	lsls	r3, r3, #31
    7730:	0fdb      	lsrs	r3, r3, #31
    7732:	b2db      	uxtb	r3, r3
    7734:	2b00      	cmp	r3, #0
    7736:	d1f8      	bne.n	772a <spi_init+0x86>

	SERCOM5->SPI.CTRLA.bit.DORD    =0x00; // Bit  30    - DORD: Data Order (0: MSB is transferred first)
    7738:	4a46      	ldr	r2, [pc, #280]	; (7854 <spi_init+0x1b0>)
    773a:	6813      	ldr	r3, [r2, #0]
    773c:	4946      	ldr	r1, [pc, #280]	; (7858 <spi_init+0x1b4>)
    773e:	400b      	ands	r3, r1
    7740:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL    =0x00; // Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    7742:	4a44      	ldr	r2, [pc, #272]	; (7854 <spi_init+0x1b0>)
    7744:	6813      	ldr	r3, [r2, #0]
    7746:	4945      	ldr	r1, [pc, #276]	; (785c <spi_init+0x1b8>)
    7748:	400b      	ands	r3, r1
    774a:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPHA    =0x00; // Bit  28    - CPHA: Clock Phase (0: The data is sampled on a leading SCK edge and changed on a trailing SCK edge)
    774c:	4a41      	ldr	r2, [pc, #260]	; (7854 <spi_init+0x1b0>)
    774e:	6813      	ldr	r3, [r2, #0]
    7750:	4943      	ldr	r1, [pc, #268]	; (7860 <spi_init+0x1bc>)
    7752:	400b      	ands	r3, r1
    7754:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.FORM    =0x00; // Bits 27:24 - FORM: Frame Format (0: SPI frame)
    7756:	4a3f      	ldr	r2, [pc, #252]	; (7854 <spi_init+0x1b0>)
    7758:	6813      	ldr	r3, [r2, #0]
    775a:	4942      	ldr	r1, [pc, #264]	; (7864 <spi_init+0x1c0>)
    775c:	400b      	ands	r3, r1
    775e:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.IBON    =0x00; // Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    7760:	4a3c      	ldr	r2, [pc, #240]	; (7854 <spi_init+0x1b0>)
    7762:	6813      	ldr	r3, [r2, #0]
    7764:	4940      	ldr	r1, [pc, #256]	; (7868 <spi_init+0x1c4>)
    7766:	400b      	ands	r3, r1
    7768:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.RUNSTDBY=0x00; // Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    776a:	4a3a      	ldr	r2, [pc, #232]	; (7854 <spi_init+0x1b0>)
    776c:	6813      	ldr	r3, [r2, #0]
    776e:	2180      	movs	r1, #128	; 0x80
    7770:	438b      	bics	r3, r1
    7772:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.MODE    =0x03; // Bits 4:2   - MODE: Operating Mode (3: SPI master operation)
    7774:	4a37      	ldr	r2, [pc, #220]	; (7854 <spi_init+0x1b0>)
    7776:	6813      	ldr	r3, [r2, #0]
    7778:	211c      	movs	r1, #28
    777a:	438b      	bics	r3, r1
    777c:	210c      	movs	r1, #12
    777e:	430b      	orrs	r3, r1
    7780:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7782:	46c0      	nop			; (mov r8, r8)
    7784:	4b33      	ldr	r3, [pc, #204]	; (7854 <spi_init+0x1b0>)
    7786:	69db      	ldr	r3, [r3, #28]
    7788:	2207      	movs	r2, #7
    778a:	4013      	ands	r3, r2
    778c:	d1fa      	bne.n	7784 <spi_init+0xe0>
	SERCOM5->SPI.CTRLA.bit.DOPO=0x02;     // Bits 17:16 - DOPO: Data Out Pinout (0: MOSI->PAD[3], SCK->PAD[1])
    778e:	4a31      	ldr	r2, [pc, #196]	; (7854 <spi_init+0x1b0>)
    7790:	6813      	ldr	r3, [r2, #0]
    7792:	4936      	ldr	r1, [pc, #216]	; (786c <spi_init+0x1c8>)
    7794:	400b      	ands	r3, r1
    7796:	2180      	movs	r1, #128	; 0x80
    7798:	0289      	lsls	r1, r1, #10
    779a:	430b      	orrs	r3, r1
    779c:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	4b2c      	ldr	r3, [pc, #176]	; (7854 <spi_init+0x1b0>)
    77a2:	69db      	ldr	r3, [r3, #28]
    77a4:	2207      	movs	r2, #7
    77a6:	4013      	ands	r3, r2
    77a8:	d1fa      	bne.n	77a0 <spi_init+0xfc>
	SERCOM5->SPI.CTRLA.bit.DIPO=0x00;     // Bits 21:20 - DIPO: Data In Pinout (0: SERCOM PAD[0] is used as data input)
    77aa:	4a2a      	ldr	r2, [pc, #168]	; (7854 <spi_init+0x1b0>)
    77ac:	6813      	ldr	r3, [r2, #0]
    77ae:	4930      	ldr	r1, [pc, #192]	; (7870 <spi_init+0x1cc>)
    77b0:	400b      	ands	r3, r1
    77b2:	6013      	str	r3, [r2, #0]

	SERCOM5->SPI.CTRLB.bit.RXEN   =0x01;  // Bit  17    - RXEN: Receiver Enable (1: The receiver is enabled or it will be enabled when SPI is enabled.)
    77b4:	4a27      	ldr	r2, [pc, #156]	; (7854 <spi_init+0x1b0>)
    77b6:	6853      	ldr	r3, [r2, #4]
    77b8:	2180      	movs	r1, #128	; 0x80
    77ba:	0289      	lsls	r1, r1, #10
    77bc:	430b      	orrs	r3, r1
    77be:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.MSSEN  =0x00;  // Bit  13    - MSSEN: Master Slave Select Enable (0: Hardware _SS control is disabled)
    77c0:	4a24      	ldr	r2, [pc, #144]	; (7854 <spi_init+0x1b0>)
    77c2:	6853      	ldr	r3, [r2, #4]
    77c4:	492b      	ldr	r1, [pc, #172]	; (7874 <spi_init+0x1d0>)
    77c6:	400b      	ands	r3, r1
    77c8:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.AMODE  =0x00;  // Bits 15:14 - AMODE: Address Mode (0: ADDRMASK is used as a mask to the ADDR register)
    77ca:	4a22      	ldr	r2, [pc, #136]	; (7854 <spi_init+0x1b0>)
    77cc:	6853      	ldr	r3, [r2, #4]
    77ce:	492a      	ldr	r1, [pc, #168]	; (7878 <spi_init+0x1d4>)
    77d0:	400b      	ands	r3, r1
    77d2:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.SSDE   =0x00;  // Bit  9     - SSDE: Slave Select Low Detect Enable (0: _SS low detector is disabled.)
    77d4:	4a1f      	ldr	r2, [pc, #124]	; (7854 <spi_init+0x1b0>)
    77d6:	6853      	ldr	r3, [r2, #4]
    77d8:	4928      	ldr	r1, [pc, #160]	; (787c <spi_init+0x1d8>)
    77da:	400b      	ands	r3, r1
    77dc:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.PLOADEN=0x00;  // Bit 6      – PLOADEN: Slave Data Preload Enable ()
    77de:	4a1d      	ldr	r2, [pc, #116]	; (7854 <spi_init+0x1b0>)
    77e0:	6853      	ldr	r3, [r2, #4]
    77e2:	2140      	movs	r1, #64	; 0x40
    77e4:	438b      	bics	r3, r1
    77e6:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.CHSIZE =0x00;  // Bits 2:0   - CHSIZE: Character Size (0: 8 bits)
    77e8:	4a1a      	ldr	r2, [pc, #104]	; (7854 <spi_init+0x1b0>)
    77ea:	6853      	ldr	r3, [r2, #4]
    77ec:	2107      	movs	r1, #7
    77ee:	438b      	bics	r3, r1
    77f0:	6053      	str	r3, [r2, #4]
     / SystemCoreClock / (2 * baudrate) - 1
     / SystemCoreClock = 8000000
     / baudrate = 1000000
    */	
	
	SERCOM5->SPI.BAUD.bit.BAUD        = (float)(PROC_HERZ ) / (2 * (float)(8000000 )) - 1;
    77f2:	4b18      	ldr	r3, [pc, #96]	; (7854 <spi_init+0x1b0>)
    77f4:	2202      	movs	r2, #2
    77f6:	731a      	strb	r2, [r3, #12]
	SERCOM5->SPI.INTENSET.bit.TXC	  = 0x00;
    77f8:	4a16      	ldr	r2, [pc, #88]	; (7854 <spi_init+0x1b0>)
    77fa:	7d93      	ldrb	r3, [r2, #22]
    77fc:	2102      	movs	r1, #2
    77fe:	438b      	bics	r3, r1
    7800:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.DRE     = 0x00;
    7802:	4a14      	ldr	r2, [pc, #80]	; (7854 <spi_init+0x1b0>)
    7804:	7d93      	ldrb	r3, [r2, #22]
    7806:	2101      	movs	r1, #1
    7808:	438b      	bics	r3, r1
    780a:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.RXC     = 0x00;	
    780c:	4a11      	ldr	r2, [pc, #68]	; (7854 <spi_init+0x1b0>)
    780e:	7d93      	ldrb	r3, [r2, #22]
    7810:	2104      	movs	r1, #4
    7812:	438b      	bics	r3, r1
    7814:	7593      	strb	r3, [r2, #22]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	4b0e      	ldr	r3, [pc, #56]	; (7854 <spi_init+0x1b0>)
    781a:	69db      	ldr	r3, [r3, #28]
    781c:	2207      	movs	r2, #7
    781e:	4013      	ands	r3, r2
    7820:	d1fa      	bne.n	7818 <spi_init+0x174>
	SERCOM5->SPI.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    7822:	4a0c      	ldr	r2, [pc, #48]	; (7854 <spi_init+0x1b0>)
    7824:	6813      	ldr	r3, [r2, #0]
    7826:	2102      	movs	r1, #2
    7828:	430b      	orrs	r3, r1
    782a:	6013      	str	r3, [r2, #0]

	NVIC_DisableIRQ(SERCOM5_IRQn);
    782c:	200e      	movs	r0, #14
    782e:	f7ff feab 	bl	7588 <__NVIC_DisableIRQ>
	NVIC_SetPriority(SERCOM5_IRQn, 1);
    7832:	2101      	movs	r1, #1
    7834:	200e      	movs	r0, #14
    7836:	f7ff fec7 	bl	75c8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SERCOM5_IRQn);
    783a:	200e      	movs	r0, #14
    783c:	f7ff fe8a 	bl	7554 <__NVIC_EnableIRQ>
}
    7840:	46c0      	nop			; (mov r8, r8)
    7842:	46bd      	mov	sp, r7
    7844:	bd80      	pop	{r7, pc}
    7846:	46c0      	nop			; (mov r8, r8)
    7848:	40000400 	.word	0x40000400
    784c:	40000c00 	.word	0x40000c00
    7850:	fffff0ff 	.word	0xfffff0ff
    7854:	42001c00 	.word	0x42001c00
    7858:	bfffffff 	.word	0xbfffffff
    785c:	dfffffff 	.word	0xdfffffff
    7860:	efffffff 	.word	0xefffffff
    7864:	f0ffffff 	.word	0xf0ffffff
    7868:	fffffeff 	.word	0xfffffeff
    786c:	fffcffff 	.word	0xfffcffff
    7870:	ffcfffff 	.word	0xffcfffff
    7874:	ffffdfff 	.word	0xffffdfff
    7878:	ffff3fff 	.word	0xffff3fff
    787c:	fffffdff 	.word	0xfffffdff

00007880 <spi_process>:


WORD spi_process (uint16_t addr, uint8_t cb, uint8_t *buf, uint16_t len, BYTE cmd)
{
    7880:	b5b0      	push	{r4, r5, r7, lr}
    7882:	b086      	sub	sp, #24
    7884:	af00      	add	r7, sp, #0
    7886:	0004      	movs	r4, r0
    7888:	0008      	movs	r0, r1
    788a:	60ba      	str	r2, [r7, #8]
    788c:	0019      	movs	r1, r3
    788e:	230e      	movs	r3, #14
    7890:	18fb      	adds	r3, r7, r3
    7892:	1c22      	adds	r2, r4, #0
    7894:	801a      	strh	r2, [r3, #0]
    7896:	230d      	movs	r3, #13
    7898:	18fb      	adds	r3, r7, r3
    789a:	1c02      	adds	r2, r0, #0
    789c:	701a      	strb	r2, [r3, #0]
    789e:	1dbb      	adds	r3, r7, #6
    78a0:	1c0a      	adds	r2, r1, #0
    78a2:	801a      	strh	r2, [r3, #0]
	BYTE st_spi=0;
    78a4:	2315      	movs	r3, #21
    78a6:	18fb      	adds	r3, r7, r3
    78a8:	2200      	movs	r2, #0
    78aa:	701a      	strb	r2, [r3, #0]
	WORD rn_wn=0;
    78ac:	2316      	movs	r3, #22
    78ae:	18fb      	adds	r3, r7, r3
    78b0:	2200      	movs	r2, #0
    78b2:	801a      	strh	r2, [r3, #0]
	
	st_spi = cmd;
    78b4:	2315      	movs	r3, #21
    78b6:	18fb      	adds	r3, r7, r3
    78b8:	2228      	movs	r2, #40	; 0x28
    78ba:	18ba      	adds	r2, r7, r2
    78bc:	7812      	ldrb	r2, [r2, #0]
    78be:	701a      	strb	r2, [r3, #0]
	switch(st_spi)
    78c0:	2315      	movs	r3, #21
    78c2:	18fb      	adds	r3, r7, r3
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	2b01      	cmp	r3, #1
    78c8:	d005      	beq.n	78d6 <spi_process+0x56>
    78ca:	2b02      	cmp	r3, #2
    78cc:	d014      	beq.n	78f8 <spi_process+0x78>
    78ce:	2b00      	cmp	r3, #0
    78d0:	d123      	bne.n	791a <spi_process+0x9a>
	{
		case 0:
			return (1);
    78d2:	2301      	movs	r3, #1
    78d4:	e024      	b.n	7920 <spi_process+0xa0>
		break;
		case READ_DATA:
			rn_wn=spi_read(addr,cb,buf,len);
    78d6:	2316      	movs	r3, #22
    78d8:	18fc      	adds	r4, r7, r3
    78da:	1dbb      	adds	r3, r7, #6
    78dc:	881d      	ldrh	r5, [r3, #0]
    78de:	68ba      	ldr	r2, [r7, #8]
    78e0:	230d      	movs	r3, #13
    78e2:	18fb      	adds	r3, r7, r3
    78e4:	7819      	ldrb	r1, [r3, #0]
    78e6:	230e      	movs	r3, #14
    78e8:	18fb      	adds	r3, r7, r3
    78ea:	8818      	ldrh	r0, [r3, #0]
    78ec:	002b      	movs	r3, r5
    78ee:	f000 f8f7 	bl	7ae0 <spi_read>
    78f2:	0003      	movs	r3, r0
    78f4:	8023      	strh	r3, [r4, #0]
		break;
    78f6:	e010      	b.n	791a <spi_process+0x9a>
		case WRITE_DATA:
			rn_wn=spi_write(addr,cb,buf,len);
    78f8:	2316      	movs	r3, #22
    78fa:	18fc      	adds	r4, r7, r3
    78fc:	1dbb      	adds	r3, r7, #6
    78fe:	881d      	ldrh	r5, [r3, #0]
    7900:	68ba      	ldr	r2, [r7, #8]
    7902:	230d      	movs	r3, #13
    7904:	18fb      	adds	r3, r7, r3
    7906:	7819      	ldrb	r1, [r3, #0]
    7908:	230e      	movs	r3, #14
    790a:	18fb      	adds	r3, r7, r3
    790c:	8818      	ldrh	r0, [r3, #0]
    790e:	002b      	movs	r3, r5
    7910:	f000 f80a 	bl	7928 <spi_write>
    7914:	0003      	movs	r3, r0
    7916:	8023      	strh	r3, [r4, #0]
		break;			
    7918:	46c0      	nop			; (mov r8, r8)
	}
	return (rn_wn);
    791a:	2316      	movs	r3, #22
    791c:	18fb      	adds	r3, r7, r3
    791e:	881b      	ldrh	r3, [r3, #0]
}
    7920:	0018      	movs	r0, r3
    7922:	46bd      	mov	sp, r7
    7924:	b006      	add	sp, #24
    7926:	bdb0      	pop	{r4, r5, r7, pc}

00007928 <spi_write>:

WORD spi_write(uint16_t addr, uint8_t cb, uint8_t *tx_buf, uint16_t len)
{
    7928:	b590      	push	{r4, r7, lr}
    792a:	b087      	sub	sp, #28
    792c:	af00      	add	r7, sp, #0
    792e:	0004      	movs	r4, r0
    7930:	0008      	movs	r0, r1
    7932:	60ba      	str	r2, [r7, #8]
    7934:	0019      	movs	r1, r3
    7936:	230e      	movs	r3, #14
    7938:	18fb      	adds	r3, r7, r3
    793a:	1c22      	adds	r2, r4, #0
    793c:	801a      	strh	r2, [r3, #0]
    793e:	230d      	movs	r3, #13
    7940:	18fb      	adds	r3, r7, r3
    7942:	1c02      	adds	r2, r0, #0
    7944:	701a      	strb	r2, [r3, #0]
    7946:	1dbb      	adds	r3, r7, #6
    7948:	1c0a      	adds	r2, r1, #0
    794a:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    794c:	2316      	movs	r3, #22
    794e:	18fb      	adds	r3, r7, r3
    7950:	2200      	movs	r2, #0
    7952:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7954:	4b5c      	ldr	r3, [pc, #368]	; (7ac8 <spi_write+0x1a0>)
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	2b00      	cmp	r3, #0
    795a:	d003      	beq.n	7964 <spi_write+0x3c>
    795c:	2b01      	cmp	r3, #1
    795e:	d100      	bne.n	7962 <spi_write+0x3a>
    7960:	e08b      	b.n	7a7a <spi_write+0x152>
    7962:	e0ac      	b.n	7abe <spi_write+0x196>
	{
		case 0:
			CS_clr();			
    7964:	23c0      	movs	r3, #192	; 0xc0
    7966:	05db      	lsls	r3, r3, #23
    7968:	2280      	movs	r2, #128	; 0x80
    796a:	0452      	lsls	r2, r2, #17
    796c:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    796e:	2316      	movs	r3, #22
    7970:	18fb      	adds	r3, r7, r3
    7972:	881b      	ldrh	r3, [r3, #0]
    7974:	220e      	movs	r2, #14
    7976:	18ba      	adds	r2, r7, r2
    7978:	8812      	ldrh	r2, [r2, #0]
    797a:	0a12      	lsrs	r2, r2, #8
    797c:	b292      	uxth	r2, r2
    797e:	b2d1      	uxtb	r1, r2
    7980:	4a52      	ldr	r2, [pc, #328]	; (7acc <spi_write+0x1a4>)
    7982:	54d1      	strb	r1, [r2, r3]
    7984:	2316      	movs	r3, #22
    7986:	18fb      	adds	r3, r7, r3
    7988:	881a      	ldrh	r2, [r3, #0]
    798a:	2316      	movs	r3, #22
    798c:	18fb      	adds	r3, r7, r3
    798e:	3201      	adds	r2, #1
    7990:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7992:	2316      	movs	r3, #22
    7994:	18fb      	adds	r3, r7, r3
    7996:	881b      	ldrh	r3, [r3, #0]
    7998:	220e      	movs	r2, #14
    799a:	18ba      	adds	r2, r7, r2
    799c:	8812      	ldrh	r2, [r2, #0]
    799e:	b2d1      	uxtb	r1, r2
    79a0:	4a4a      	ldr	r2, [pc, #296]	; (7acc <spi_write+0x1a4>)
    79a2:	54d1      	strb	r1, [r2, r3]
    79a4:	2316      	movs	r3, #22
    79a6:	18fb      	adds	r3, r7, r3
    79a8:	881a      	ldrh	r2, [r3, #0]
    79aa:	2316      	movs	r3, #22
    79ac:	18fb      	adds	r3, r7, r3
    79ae:	3201      	adds	r2, #1
    79b0:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | WRITE_REG | LEN_N_BYTES;		cnt++;
    79b2:	2316      	movs	r3, #22
    79b4:	18fb      	adds	r3, r7, r3
    79b6:	881b      	ldrh	r3, [r3, #0]
    79b8:	220d      	movs	r2, #13
    79ba:	18ba      	adds	r2, r7, r2
    79bc:	7812      	ldrb	r2, [r2, #0]
    79be:	2104      	movs	r1, #4
    79c0:	430a      	orrs	r2, r1
    79c2:	b2d1      	uxtb	r1, r2
    79c4:	4a41      	ldr	r2, [pc, #260]	; (7acc <spi_write+0x1a4>)
    79c6:	54d1      	strb	r1, [r2, r3]
    79c8:	2316      	movs	r3, #22
    79ca:	18fb      	adds	r3, r7, r3
    79cc:	881a      	ldrh	r2, [r3, #0]
    79ce:	2316      	movs	r3, #22
    79d0:	18fb      	adds	r3, r7, r3
    79d2:	3201      	adds	r2, #1
    79d4:	801a      	strh	r2, [r3, #0]
							
			if((len+cnt)>MAX_SIZE_BUF_SPI)		{len=MAX_SIZE_BUF_SPI-cnt;}
    79d6:	1dbb      	adds	r3, r7, #6
    79d8:	881a      	ldrh	r2, [r3, #0]
    79da:	2316      	movs	r3, #22
    79dc:	18fb      	adds	r3, r7, r3
    79de:	881b      	ldrh	r3, [r3, #0]
    79e0:	18d2      	adds	r2, r2, r3
    79e2:	23b9      	movs	r3, #185	; 0xb9
    79e4:	00db      	lsls	r3, r3, #3
    79e6:	429a      	cmp	r2, r3
    79e8:	dd07      	ble.n	79fa <spi_write+0xd2>
    79ea:	1dbb      	adds	r3, r7, #6
    79ec:	2216      	movs	r2, #22
    79ee:	18ba      	adds	r2, r7, r2
    79f0:	8812      	ldrh	r2, [r2, #0]
    79f2:	21b9      	movs	r1, #185	; 0xb9
    79f4:	00c9      	lsls	r1, r1, #3
    79f6:	1a8a      	subs	r2, r1, r2
    79f8:	801a      	strh	r2, [r3, #0]
			memcpy(&spi.wbuf[cnt],tx_buf,len);  cnt=cnt+len;
    79fa:	2316      	movs	r3, #22
    79fc:	18fb      	adds	r3, r7, r3
    79fe:	881a      	ldrh	r2, [r3, #0]
    7a00:	4b32      	ldr	r3, [pc, #200]	; (7acc <spi_write+0x1a4>)
    7a02:	18d0      	adds	r0, r2, r3
    7a04:	1dbb      	adds	r3, r7, #6
    7a06:	881a      	ldrh	r2, [r3, #0]
    7a08:	68bb      	ldr	r3, [r7, #8]
    7a0a:	0019      	movs	r1, r3
    7a0c:	4b30      	ldr	r3, [pc, #192]	; (7ad0 <spi_write+0x1a8>)
    7a0e:	4798      	blx	r3
    7a10:	2316      	movs	r3, #22
    7a12:	18fb      	adds	r3, r7, r3
    7a14:	2216      	movs	r2, #22
    7a16:	18b9      	adds	r1, r7, r2
    7a18:	1dba      	adds	r2, r7, #6
    7a1a:	8809      	ldrh	r1, [r1, #0]
    7a1c:	8812      	ldrh	r2, [r2, #0]
    7a1e:	188a      	adds	r2, r1, r2
    7a20:	801a      	strh	r2, [r3, #0]
							
			spi.wx = cnt; 
    7a22:	4b2a      	ldr	r3, [pc, #168]	; (7acc <spi_write+0x1a4>)
    7a24:	2216      	movs	r2, #22
    7a26:	18ba      	adds	r2, r7, r2
    7a28:	492a      	ldr	r1, [pc, #168]	; (7ad4 <spi_write+0x1ac>)
    7a2a:	8812      	ldrh	r2, [r2, #0]
    7a2c:	525a      	strh	r2, [r3, r1]
			spi.wn = 0;
    7a2e:	4b27      	ldr	r3, [pc, #156]	; (7acc <spi_write+0x1a4>)
    7a30:	4a29      	ldr	r2, [pc, #164]	; (7ad8 <spi_write+0x1b0>)
    7a32:	2100      	movs	r1, #0
    7a34:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7a36:	4a25      	ldr	r2, [pc, #148]	; (7acc <spi_write+0x1a4>)
    7a38:	23b9      	movs	r3, #185	; 0xb9
    7a3a:	011b      	lsls	r3, r3, #4
    7a3c:	2100      	movs	r1, #0
    7a3e:	52d1      	strh	r1, [r2, r3]
							
			if(spi.wx>MAX_SIZE_BUF_SPI)			{spi.wx=MAX_SIZE_BUF_SPI;}
    7a40:	4b22      	ldr	r3, [pc, #136]	; (7acc <spi_write+0x1a4>)
    7a42:	4a24      	ldr	r2, [pc, #144]	; (7ad4 <spi_write+0x1ac>)
    7a44:	5a9a      	ldrh	r2, [r3, r2]
    7a46:	23b9      	movs	r3, #185	; 0xb9
    7a48:	00db      	lsls	r3, r3, #3
    7a4a:	429a      	cmp	r2, r3
    7a4c:	d904      	bls.n	7a58 <spi_write+0x130>
    7a4e:	4b1f      	ldr	r3, [pc, #124]	; (7acc <spi_write+0x1a4>)
    7a50:	4a20      	ldr	r2, [pc, #128]	; (7ad4 <spi_write+0x1ac>)
    7a52:	21b9      	movs	r1, #185	; 0xb9
    7a54:	00c9      	lsls	r1, r1, #3
    7a56:	5299      	strh	r1, [r3, r2]
			st_read++;
    7a58:	4b1b      	ldr	r3, [pc, #108]	; (7ac8 <spi_write+0x1a0>)
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	3301      	adds	r3, #1
    7a5e:	b2da      	uxtb	r2, r3
    7a60:	4b19      	ldr	r3, [pc, #100]	; (7ac8 <spi_write+0x1a0>)
    7a62:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7a64:	4a1d      	ldr	r2, [pc, #116]	; (7adc <spi_write+0x1b4>)
    7a66:	7d93      	ldrb	r3, [r2, #22]
    7a68:	2101      	movs	r1, #1
    7a6a:	430b      	orrs	r3, r1
    7a6c:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;							
    7a6e:	4a1b      	ldr	r2, [pc, #108]	; (7adc <spi_write+0x1b4>)
    7a70:	7d93      	ldrb	r3, [r2, #22]
    7a72:	2104      	movs	r1, #4
    7a74:	430b      	orrs	r3, r1
    7a76:	7593      	strb	r3, [r2, #22]
		break;
    7a78:	e021      	b.n	7abe <spi_write+0x196>
		case 1:	
			if(spi.wx)							{return 0;}
    7a7a:	4b14      	ldr	r3, [pc, #80]	; (7acc <spi_write+0x1a4>)
    7a7c:	4a15      	ldr	r2, [pc, #84]	; (7ad4 <spi_write+0x1ac>)
    7a7e:	5a9b      	ldrh	r3, [r3, r2]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d001      	beq.n	7a88 <spi_write+0x160>
    7a84:	2300      	movs	r3, #0
    7a86:	e01b      	b.n	7ac0 <spi_write+0x198>
			if(spi.rn!=spi.wn)					{return 0;}
    7a88:	4a10      	ldr	r2, [pc, #64]	; (7acc <spi_write+0x1a4>)
    7a8a:	23b9      	movs	r3, #185	; 0xb9
    7a8c:	011b      	lsls	r3, r3, #4
    7a8e:	5ad2      	ldrh	r2, [r2, r3]
    7a90:	4b0e      	ldr	r3, [pc, #56]	; (7acc <spi_write+0x1a4>)
    7a92:	4911      	ldr	r1, [pc, #68]	; (7ad8 <spi_write+0x1b0>)
    7a94:	5a5b      	ldrh	r3, [r3, r1]
    7a96:	429a      	cmp	r2, r3
    7a98:	d001      	beq.n	7a9e <spi_write+0x176>
    7a9a:	2300      	movs	r3, #0
    7a9c:	e010      	b.n	7ac0 <spi_write+0x198>
			st_read--;
    7a9e:	4b0a      	ldr	r3, [pc, #40]	; (7ac8 <spi_write+0x1a0>)
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	3b01      	subs	r3, #1
    7aa4:	b2da      	uxtb	r2, r3
    7aa6:	4b08      	ldr	r3, [pc, #32]	; (7ac8 <spi_write+0x1a0>)
    7aa8:	701a      	strb	r2, [r3, #0]
			CS_set();
    7aaa:	23c0      	movs	r3, #192	; 0xc0
    7aac:	05db      	lsls	r3, r3, #23
    7aae:	2280      	movs	r2, #128	; 0x80
    7ab0:	0452      	lsls	r2, r2, #17
    7ab2:	619a      	str	r2, [r3, #24]
			
			return (spi.rn);
    7ab4:	4a05      	ldr	r2, [pc, #20]	; (7acc <spi_write+0x1a4>)
    7ab6:	23b9      	movs	r3, #185	; 0xb9
    7ab8:	011b      	lsls	r3, r3, #4
    7aba:	5ad3      	ldrh	r3, [r2, r3]
    7abc:	e000      	b.n	7ac0 <spi_write+0x198>
		break;
	}
	return 0;
    7abe:	2300      	movs	r3, #0
}
    7ac0:	0018      	movs	r0, r3
    7ac2:	46bd      	mov	sp, r7
    7ac4:	b007      	add	sp, #28
    7ac6:	bd90      	pop	{r4, r7, pc}
    7ac8:	20000469 	.word	0x20000469
    7acc:	20002654 	.word	0x20002654
    7ad0:	0000c841 	.word	0x0000c841
    7ad4:	00000b94 	.word	0x00000b94
    7ad8:	00000b92 	.word	0x00000b92
    7adc:	42001c00 	.word	0x42001c00

00007ae0 <spi_read>:

WORD spi_read(uint16_t addr, uint8_t cb, uint8_t *rx_buf, uint16_t len)
{
    7ae0:	b590      	push	{r4, r7, lr}
    7ae2:	b087      	sub	sp, #28
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	0004      	movs	r4, r0
    7ae8:	0008      	movs	r0, r1
    7aea:	60ba      	str	r2, [r7, #8]
    7aec:	0019      	movs	r1, r3
    7aee:	230e      	movs	r3, #14
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	1c22      	adds	r2, r4, #0
    7af4:	801a      	strh	r2, [r3, #0]
    7af6:	230d      	movs	r3, #13
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	1c02      	adds	r2, r0, #0
    7afc:	701a      	strb	r2, [r3, #0]
    7afe:	1dbb      	adds	r3, r7, #6
    7b00:	1c0a      	adds	r2, r1, #0
    7b02:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7b04:	2316      	movs	r3, #22
    7b06:	18fb      	adds	r3, r7, r3
    7b08:	2200      	movs	r2, #0
    7b0a:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7b0c:	4b4e      	ldr	r3, [pc, #312]	; (7c48 <spi_read+0x168>)
    7b0e:	781b      	ldrb	r3, [r3, #0]
    7b10:	2b00      	cmp	r3, #0
    7b12:	d002      	beq.n	7b1a <spi_read+0x3a>
    7b14:	2b01      	cmp	r3, #1
    7b16:	d066      	beq.n	7be6 <spi_read+0x106>
    7b18:	e091      	b.n	7c3e <spi_read+0x15e>
	{
		case 0:
			CS_clr();
    7b1a:	23c0      	movs	r3, #192	; 0xc0
    7b1c:	05db      	lsls	r3, r3, #23
    7b1e:	2280      	movs	r2, #128	; 0x80
    7b20:	0452      	lsls	r2, r2, #17
    7b22:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    7b24:	2316      	movs	r3, #22
    7b26:	18fb      	adds	r3, r7, r3
    7b28:	881b      	ldrh	r3, [r3, #0]
    7b2a:	220e      	movs	r2, #14
    7b2c:	18ba      	adds	r2, r7, r2
    7b2e:	8812      	ldrh	r2, [r2, #0]
    7b30:	0a12      	lsrs	r2, r2, #8
    7b32:	b292      	uxth	r2, r2
    7b34:	b2d1      	uxtb	r1, r2
    7b36:	4a45      	ldr	r2, [pc, #276]	; (7c4c <spi_read+0x16c>)
    7b38:	54d1      	strb	r1, [r2, r3]
    7b3a:	2316      	movs	r3, #22
    7b3c:	18fb      	adds	r3, r7, r3
    7b3e:	881a      	ldrh	r2, [r3, #0]
    7b40:	2316      	movs	r3, #22
    7b42:	18fb      	adds	r3, r7, r3
    7b44:	3201      	adds	r2, #1
    7b46:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7b48:	2316      	movs	r3, #22
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	881b      	ldrh	r3, [r3, #0]
    7b4e:	220e      	movs	r2, #14
    7b50:	18ba      	adds	r2, r7, r2
    7b52:	8812      	ldrh	r2, [r2, #0]
    7b54:	b2d1      	uxtb	r1, r2
    7b56:	4a3d      	ldr	r2, [pc, #244]	; (7c4c <spi_read+0x16c>)
    7b58:	54d1      	strb	r1, [r2, r3]
    7b5a:	2316      	movs	r3, #22
    7b5c:	18fb      	adds	r3, r7, r3
    7b5e:	881a      	ldrh	r2, [r3, #0]
    7b60:	2316      	movs	r3, #22
    7b62:	18fb      	adds	r3, r7, r3
    7b64:	3201      	adds	r2, #1
    7b66:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | READ_REG | LEN_N_BYTES;		cnt++;
    7b68:	2316      	movs	r3, #22
    7b6a:	18fb      	adds	r3, r7, r3
    7b6c:	881b      	ldrh	r3, [r3, #0]
    7b6e:	4a37      	ldr	r2, [pc, #220]	; (7c4c <spi_read+0x16c>)
    7b70:	210d      	movs	r1, #13
    7b72:	1879      	adds	r1, r7, r1
    7b74:	7809      	ldrb	r1, [r1, #0]
    7b76:	54d1      	strb	r1, [r2, r3]
    7b78:	2316      	movs	r3, #22
    7b7a:	18fb      	adds	r3, r7, r3
    7b7c:	881a      	ldrh	r2, [r3, #0]
    7b7e:	2316      	movs	r3, #22
    7b80:	18fb      	adds	r3, r7, r3
    7b82:	3201      	adds	r2, #1
    7b84:	801a      	strh	r2, [r3, #0]
			spi.wx = cnt + len;
    7b86:	2316      	movs	r3, #22
    7b88:	18fa      	adds	r2, r7, r3
    7b8a:	1dbb      	adds	r3, r7, #6
    7b8c:	8812      	ldrh	r2, [r2, #0]
    7b8e:	881b      	ldrh	r3, [r3, #0]
    7b90:	18d3      	adds	r3, r2, r3
    7b92:	b299      	uxth	r1, r3
    7b94:	4b2d      	ldr	r3, [pc, #180]	; (7c4c <spi_read+0x16c>)
    7b96:	4a2e      	ldr	r2, [pc, #184]	; (7c50 <spi_read+0x170>)
    7b98:	5299      	strh	r1, [r3, r2]
			spi.wn = 0;
    7b9a:	4b2c      	ldr	r3, [pc, #176]	; (7c4c <spi_read+0x16c>)
    7b9c:	4a2d      	ldr	r2, [pc, #180]	; (7c54 <spi_read+0x174>)
    7b9e:	2100      	movs	r1, #0
    7ba0:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7ba2:	4a2a      	ldr	r2, [pc, #168]	; (7c4c <spi_read+0x16c>)
    7ba4:	23b9      	movs	r3, #185	; 0xb9
    7ba6:	011b      	lsls	r3, r3, #4
    7ba8:	2100      	movs	r1, #0
    7baa:	52d1      	strh	r1, [r2, r3]
			if(spi.wx>MAX_SIZE_BUF_SPI) {spi.wx=MAX_SIZE_BUF_SPI;}
    7bac:	4b27      	ldr	r3, [pc, #156]	; (7c4c <spi_read+0x16c>)
    7bae:	4a28      	ldr	r2, [pc, #160]	; (7c50 <spi_read+0x170>)
    7bb0:	5a9a      	ldrh	r2, [r3, r2]
    7bb2:	23b9      	movs	r3, #185	; 0xb9
    7bb4:	00db      	lsls	r3, r3, #3
    7bb6:	429a      	cmp	r2, r3
    7bb8:	d904      	bls.n	7bc4 <spi_read+0xe4>
    7bba:	4b24      	ldr	r3, [pc, #144]	; (7c4c <spi_read+0x16c>)
    7bbc:	4a24      	ldr	r2, [pc, #144]	; (7c50 <spi_read+0x170>)
    7bbe:	21b9      	movs	r1, #185	; 0xb9
    7bc0:	00c9      	lsls	r1, r1, #3
    7bc2:	5299      	strh	r1, [r3, r2]
			st_read++;
    7bc4:	4b20      	ldr	r3, [pc, #128]	; (7c48 <spi_read+0x168>)
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	3301      	adds	r3, #1
    7bca:	b2da      	uxtb	r2, r3
    7bcc:	4b1e      	ldr	r3, [pc, #120]	; (7c48 <spi_read+0x168>)
    7bce:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7bd0:	4a21      	ldr	r2, [pc, #132]	; (7c58 <spi_read+0x178>)
    7bd2:	7d93      	ldrb	r3, [r2, #22]
    7bd4:	2101      	movs	r1, #1
    7bd6:	430b      	orrs	r3, r1
    7bd8:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;
    7bda:	4a1f      	ldr	r2, [pc, #124]	; (7c58 <spi_read+0x178>)
    7bdc:	7d93      	ldrb	r3, [r2, #22]
    7bde:	2104      	movs	r1, #4
    7be0:	430b      	orrs	r3, r1
    7be2:	7593      	strb	r3, [r2, #22]
		break;
    7be4:	e02b      	b.n	7c3e <spi_read+0x15e>
		case 1:
			if(spi.wx)							{return 0;}
    7be6:	4b19      	ldr	r3, [pc, #100]	; (7c4c <spi_read+0x16c>)
    7be8:	4a19      	ldr	r2, [pc, #100]	; (7c50 <spi_read+0x170>)
    7bea:	5a9b      	ldrh	r3, [r3, r2]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d001      	beq.n	7bf4 <spi_read+0x114>
    7bf0:	2300      	movs	r3, #0
    7bf2:	e025      	b.n	7c40 <spi_read+0x160>
			if(spi.rn!=spi.wn)					{return 0;}
    7bf4:	4a15      	ldr	r2, [pc, #84]	; (7c4c <spi_read+0x16c>)
    7bf6:	23b9      	movs	r3, #185	; 0xb9
    7bf8:	011b      	lsls	r3, r3, #4
    7bfa:	5ad2      	ldrh	r2, [r2, r3]
    7bfc:	4b13      	ldr	r3, [pc, #76]	; (7c4c <spi_read+0x16c>)
    7bfe:	4915      	ldr	r1, [pc, #84]	; (7c54 <spi_read+0x174>)
    7c00:	5a5b      	ldrh	r3, [r3, r1]
    7c02:	429a      	cmp	r2, r3
    7c04:	d001      	beq.n	7c0a <spi_read+0x12a>
    7c06:	2300      	movs	r3, #0
    7c08:	e01a      	b.n	7c40 <spi_read+0x160>
			memcpy(rx_buf,&spi.rbuf[3],spi.rn);
    7c0a:	4a10      	ldr	r2, [pc, #64]	; (7c4c <spi_read+0x16c>)
    7c0c:	23b9      	movs	r3, #185	; 0xb9
    7c0e:	011b      	lsls	r3, r3, #4
    7c10:	5ad3      	ldrh	r3, [r2, r3]
    7c12:	001a      	movs	r2, r3
    7c14:	4911      	ldr	r1, [pc, #68]	; (7c5c <spi_read+0x17c>)
    7c16:	68bb      	ldr	r3, [r7, #8]
    7c18:	0018      	movs	r0, r3
    7c1a:	4b11      	ldr	r3, [pc, #68]	; (7c60 <spi_read+0x180>)
    7c1c:	4798      	blx	r3
			st_read--;
    7c1e:	4b0a      	ldr	r3, [pc, #40]	; (7c48 <spi_read+0x168>)
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	3b01      	subs	r3, #1
    7c24:	b2da      	uxtb	r2, r3
    7c26:	4b08      	ldr	r3, [pc, #32]	; (7c48 <spi_read+0x168>)
    7c28:	701a      	strb	r2, [r3, #0]
			CS_set();
    7c2a:	23c0      	movs	r3, #192	; 0xc0
    7c2c:	05db      	lsls	r3, r3, #23
    7c2e:	2280      	movs	r2, #128	; 0x80
    7c30:	0452      	lsls	r2, r2, #17
    7c32:	619a      	str	r2, [r3, #24]
				
			return (spi.rn);
    7c34:	4a05      	ldr	r2, [pc, #20]	; (7c4c <spi_read+0x16c>)
    7c36:	23b9      	movs	r3, #185	; 0xb9
    7c38:	011b      	lsls	r3, r3, #4
    7c3a:	5ad3      	ldrh	r3, [r2, r3]
    7c3c:	e000      	b.n	7c40 <spi_read+0x160>
		break;
	}
	return 0;
    7c3e:	2300      	movs	r3, #0
}
    7c40:	0018      	movs	r0, r3
    7c42:	46bd      	mov	sp, r7
    7c44:	b007      	add	sp, #28
    7c46:	bd90      	pop	{r4, r7, pc}
    7c48:	2000046a 	.word	0x2000046a
    7c4c:	20002654 	.word	0x20002654
    7c50:	00000b94 	.word	0x00000b94
    7c54:	00000b92 	.word	0x00000b92
    7c58:	42001c00 	.word	0x42001c00
    7c5c:	20002c1f 	.word	0x20002c1f
    7c60:	0000c841 	.word	0x0000c841

00007c64 <SERCOM5_Handler>:

void SERCOM5_Handler(void)
//-----------------------------------------------------------------------------
{
    7c64:	b580      	push	{r7, lr}
    7c66:	af00      	add	r7, sp, #0
	
	if(SERCOM5->SPI.INTFLAG.bit.RXC)
    7c68:	4b37      	ldr	r3, [pc, #220]	; (7d48 <SERCOM5_Handler+0xe4>)
    7c6a:	7e1b      	ldrb	r3, [r3, #24]
    7c6c:	075b      	lsls	r3, r3, #29
    7c6e:	0fdb      	lsrs	r3, r3, #31
    7c70:	b2db      	uxtb	r3, r3
    7c72:	2b00      	cmp	r3, #0
    7c74:	d029      	beq.n	7cca <SERCOM5_Handler+0x66>
	{
		spi.rbuf[spi.rn] = SERCOM5->SPI.DATA.reg;
    7c76:	4a35      	ldr	r2, [pc, #212]	; (7d4c <SERCOM5_Handler+0xe8>)
    7c78:	23b9      	movs	r3, #185	; 0xb9
    7c7a:	011b      	lsls	r3, r3, #4
    7c7c:	5ad3      	ldrh	r3, [r2, r3]
    7c7e:	0018      	movs	r0, r3
    7c80:	4b31      	ldr	r3, [pc, #196]	; (7d48 <SERCOM5_Handler+0xe4>)
    7c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c84:	b2d9      	uxtb	r1, r3
    7c86:	4a31      	ldr	r2, [pc, #196]	; (7d4c <SERCOM5_Handler+0xe8>)
    7c88:	23b9      	movs	r3, #185	; 0xb9
    7c8a:	00db      	lsls	r3, r3, #3
    7c8c:	1812      	adds	r2, r2, r0
    7c8e:	18d3      	adds	r3, r2, r3
    7c90:	1c0a      	adds	r2, r1, #0
    7c92:	701a      	strb	r2, [r3, #0]
		spi.rn++;	
    7c94:	4a2d      	ldr	r2, [pc, #180]	; (7d4c <SERCOM5_Handler+0xe8>)
    7c96:	23b9      	movs	r3, #185	; 0xb9
    7c98:	011b      	lsls	r3, r3, #4
    7c9a:	5ad3      	ldrh	r3, [r2, r3]
    7c9c:	3301      	adds	r3, #1
    7c9e:	b299      	uxth	r1, r3
    7ca0:	4a2a      	ldr	r2, [pc, #168]	; (7d4c <SERCOM5_Handler+0xe8>)
    7ca2:	23b9      	movs	r3, #185	; 0xb9
    7ca4:	011b      	lsls	r3, r3, #4
    7ca6:	52d1      	strh	r1, [r2, r3]
		spi.RXC_sum++;
    7ca8:	4b28      	ldr	r3, [pc, #160]	; (7d4c <SERCOM5_Handler+0xe8>)
    7caa:	4a29      	ldr	r2, [pc, #164]	; (7d50 <SERCOM5_Handler+0xec>)
    7cac:	589b      	ldr	r3, [r3, r2]
    7cae:	1c5a      	adds	r2, r3, #1
    7cb0:	4b26      	ldr	r3, [pc, #152]	; (7d4c <SERCOM5_Handler+0xe8>)
    7cb2:	4927      	ldr	r1, [pc, #156]	; (7d50 <SERCOM5_Handler+0xec>)
    7cb4:	505a      	str	r2, [r3, r1]
		if(!spi.wx) 
    7cb6:	4b25      	ldr	r3, [pc, #148]	; (7d4c <SERCOM5_Handler+0xe8>)
    7cb8:	4a26      	ldr	r2, [pc, #152]	; (7d54 <SERCOM5_Handler+0xf0>)
    7cba:	5a9b      	ldrh	r3, [r3, r2]
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d104      	bne.n	7cca <SERCOM5_Handler+0x66>
		{
			SERCOM5->SPI.INTENCLR.bit.RXC =0x01;
    7cc0:	4a21      	ldr	r2, [pc, #132]	; (7d48 <SERCOM5_Handler+0xe4>)
    7cc2:	7d13      	ldrb	r3, [r2, #20]
    7cc4:	2104      	movs	r1, #4
    7cc6:	430b      	orrs	r3, r1
    7cc8:	7513      	strb	r3, [r2, #20]
		}	
	}
	if(SERCOM5->SPI.INTFLAG.bit.DRE)
    7cca:	4b1f      	ldr	r3, [pc, #124]	; (7d48 <SERCOM5_Handler+0xe4>)
    7ccc:	7e1b      	ldrb	r3, [r3, #24]
    7cce:	07db      	lsls	r3, r3, #31
    7cd0:	0fdb      	lsrs	r3, r3, #31
    7cd2:	b2db      	uxtb	r3, r3
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d034      	beq.n	7d42 <SERCOM5_Handler+0xde>
	{
		spi.DRE_sum++;
    7cd8:	4b1c      	ldr	r3, [pc, #112]	; (7d4c <SERCOM5_Handler+0xe8>)
    7cda:	4a1f      	ldr	r2, [pc, #124]	; (7d58 <SERCOM5_Handler+0xf4>)
    7cdc:	589b      	ldr	r3, [r3, r2]
    7cde:	1c5a      	adds	r2, r3, #1
    7ce0:	4b1a      	ldr	r3, [pc, #104]	; (7d4c <SERCOM5_Handler+0xe8>)
    7ce2:	491d      	ldr	r1, [pc, #116]	; (7d58 <SERCOM5_Handler+0xf4>)
    7ce4:	505a      	str	r2, [r3, r1]
		if(spi.rn!=spi.wn){return;}
    7ce6:	4a19      	ldr	r2, [pc, #100]	; (7d4c <SERCOM5_Handler+0xe8>)
    7ce8:	23b9      	movs	r3, #185	; 0xb9
    7cea:	011b      	lsls	r3, r3, #4
    7cec:	5ad2      	ldrh	r2, [r2, r3]
    7cee:	4b17      	ldr	r3, [pc, #92]	; (7d4c <SERCOM5_Handler+0xe8>)
    7cf0:	491a      	ldr	r1, [pc, #104]	; (7d5c <SERCOM5_Handler+0xf8>)
    7cf2:	5a5b      	ldrh	r3, [r3, r1]
    7cf4:	429a      	cmp	r2, r3
    7cf6:	d123      	bne.n	7d40 <SERCOM5_Handler+0xdc>
		if(spi.wx)
    7cf8:	4b14      	ldr	r3, [pc, #80]	; (7d4c <SERCOM5_Handler+0xe8>)
    7cfa:	4a16      	ldr	r2, [pc, #88]	; (7d54 <SERCOM5_Handler+0xf0>)
    7cfc:	5a9b      	ldrh	r3, [r3, r2]
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d018      	beq.n	7d34 <SERCOM5_Handler+0xd0>
		{ 
			SERCOM5->SPI.DATA.reg=spi.wbuf[spi.wn];
    7d02:	4b11      	ldr	r3, [pc, #68]	; (7d48 <SERCOM5_Handler+0xe4>)
    7d04:	4a11      	ldr	r2, [pc, #68]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d06:	4915      	ldr	r1, [pc, #84]	; (7d5c <SERCOM5_Handler+0xf8>)
    7d08:	5a52      	ldrh	r2, [r2, r1]
    7d0a:	0011      	movs	r1, r2
    7d0c:	4a0f      	ldr	r2, [pc, #60]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d0e:	5c52      	ldrb	r2, [r2, r1]
    7d10:	629a      	str	r2, [r3, #40]	; 0x28
			spi.wn++;
    7d12:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d14:	4a11      	ldr	r2, [pc, #68]	; (7d5c <SERCOM5_Handler+0xf8>)
    7d16:	5a9b      	ldrh	r3, [r3, r2]
    7d18:	3301      	adds	r3, #1
    7d1a:	b299      	uxth	r1, r3
    7d1c:	4b0b      	ldr	r3, [pc, #44]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d1e:	4a0f      	ldr	r2, [pc, #60]	; (7d5c <SERCOM5_Handler+0xf8>)
    7d20:	5299      	strh	r1, [r3, r2]
			spi.wx--;
    7d22:	4b0a      	ldr	r3, [pc, #40]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d24:	4a0b      	ldr	r2, [pc, #44]	; (7d54 <SERCOM5_Handler+0xf0>)
    7d26:	5a9b      	ldrh	r3, [r3, r2]
    7d28:	3b01      	subs	r3, #1
    7d2a:	b299      	uxth	r1, r3
    7d2c:	4b07      	ldr	r3, [pc, #28]	; (7d4c <SERCOM5_Handler+0xe8>)
    7d2e:	4a09      	ldr	r2, [pc, #36]	; (7d54 <SERCOM5_Handler+0xf0>)
    7d30:	5299      	strh	r1, [r3, r2]
    7d32:	e006      	b.n	7d42 <SERCOM5_Handler+0xde>
		}
		else {SERCOM5->SPI.INTENCLR.bit.DRE =0x01;}
    7d34:	4a04      	ldr	r2, [pc, #16]	; (7d48 <SERCOM5_Handler+0xe4>)
    7d36:	7d13      	ldrb	r3, [r2, #20]
    7d38:	2101      	movs	r1, #1
    7d3a:	430b      	orrs	r3, r1
    7d3c:	7513      	strb	r3, [r2, #20]
    7d3e:	e000      	b.n	7d42 <SERCOM5_Handler+0xde>
		if(spi.rn!=spi.wn){return;}
    7d40:	46c0      	nop			; (mov r8, r8)
	}
}
    7d42:	46bd      	mov	sp, r7
    7d44:	bd80      	pop	{r7, pc}
    7d46:	46c0      	nop			; (mov r8, r8)
    7d48:	42001c00 	.word	0x42001c00
    7d4c:	20002654 	.word	0x20002654
    7d50:	00000b9c 	.word	0x00000b9c
    7d54:	00000b94 	.word	0x00000b94
    7d58:	00000b98 	.word	0x00000b98
    7d5c:	00000b92 	.word	0x00000b92

00007d60 <sys_clock_init_USE_OSC8M>:



void sys_clock_init_USE_OSC8M(void)
//-----------------------------------------------------------------------------
{
    7d60:	b580      	push	{r7, lr}
    7d62:	b082      	sub	sp, #8
    7d64:	af00      	add	r7, sp, #0
	uint32_t temp = SYSCTRL->OSC8M.reg;
    7d66:	4b0c      	ldr	r3, [pc, #48]	; (7d98 <sys_clock_init_USE_OSC8M+0x38>)
    7d68:	6a1b      	ldr	r3, [r3, #32]
    7d6a:	607b      	str	r3, [r7, #4]
	temp &= ~((uint32_t)0x0000FFFF);
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	0c1b      	lsrs	r3, r3, #16
    7d70:	041b      	lsls	r3, r3, #16
    7d72:	607b      	str	r3, [r7, #4]
	temp |= SYSCTRL_OSC8M_PRESC(0x00) | SYSCTRL_OSC8M_ENABLE;
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	2202      	movs	r2, #2
    7d78:	4313      	orrs	r3, r2
    7d7a:	607b      	str	r3, [r7, #4]
	SYSCTRL->OSC8M.reg = temp;
    7d7c:	4b06      	ldr	r3, [pc, #24]	; (7d98 <sys_clock_init_USE_OSC8M+0x38>)
    7d7e:	687a      	ldr	r2, [r7, #4]
    7d80:	621a      	str	r2, [r3, #32]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY)){};
    7d82:	46c0      	nop			; (mov r8, r8)
    7d84:	4b04      	ldr	r3, [pc, #16]	; (7d98 <sys_clock_init_USE_OSC8M+0x38>)
    7d86:	68db      	ldr	r3, [r3, #12]
    7d88:	2208      	movs	r2, #8
    7d8a:	4013      	ands	r3, r2
    7d8c:	d0fa      	beq.n	7d84 <sys_clock_init_USE_OSC8M+0x24>
}
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	46bd      	mov	sp, r7
    7d92:	b002      	add	sp, #8
    7d94:	bd80      	pop	{r7, pc}
    7d96:	46c0      	nop			; (mov r8, r8)
    7d98:	40000800 	.word	0x40000800

00007d9c <sys_clock_init_USE_DFLL48M>:


void sys_clock_init_USE_DFLL48M(void)
{
    7d9c:	b580      	push	{r7, lr}
    7d9e:	b082      	sub	sp, #8
    7da0:	af00      	add	r7, sp, #0
	uint32_t coarse, fine;

	NVMCTRL->CTRLB.bit.RWS=2; //this is needed for 48 MHz
    7da2:	4a2d      	ldr	r2, [pc, #180]	; (7e58 <sys_clock_init_USE_DFLL48M+0xbc>)
    7da4:	6853      	ldr	r3, [r2, #4]
    7da6:	211e      	movs	r1, #30
    7da8:	438b      	bics	r3, r1
    7daa:	2104      	movs	r1, #4
    7dac:	430b      	orrs	r3, r1
    7dae:	6053      	str	r3, [r2, #4]

	coarse=NVM_READ_CAL(DFLL48M_COARSE_CAL); //read coarse calibration value from NVM Software Calibration Area Map
    7db0:	4b2a      	ldr	r3, [pc, #168]	; (7e5c <sys_clock_init_USE_DFLL48M+0xc0>)
    7db2:	681b      	ldr	r3, [r3, #0]
    7db4:	0e9b      	lsrs	r3, r3, #26
    7db6:	607b      	str	r3, [r7, #4]
	fine  =NVM_READ_CAL(DFLL48M_FINE_CAL  ); //read fine calibration value from NVM Software Calibration Area Map
    7db8:	4b29      	ldr	r3, [pc, #164]	; (7e60 <sys_clock_init_USE_DFLL48M+0xc4>)
    7dba:	681b      	ldr	r3, [r3, #0]
    7dbc:	059b      	lsls	r3, r3, #22
    7dbe:	0d9b      	lsrs	r3, r3, #22
    7dc0:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLCTRL.reg=0; // See Errata 9905
    7dc2:	4b28      	ldr	r3, [pc, #160]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dc4:	2200      	movs	r2, #0
    7dc6:	849a      	strh	r2, [r3, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; }
    7dc8:	46c0      	nop			; (mov r8, r8)
    7dca:	4b26      	ldr	r3, [pc, #152]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dcc:	68db      	ldr	r3, [r3, #12]
    7dce:	2210      	movs	r2, #16
    7dd0:	4013      	ands	r3, r2
    7dd2:	d0fa      	beq.n	7dca <sys_clock_init_USE_DFLL48M+0x2e>

	SYSCTRL->DFLLVAL.reg=SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine); //this will set DFLL48 close to 48 MHz
    7dd4:	4b23      	ldr	r3, [pc, #140]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dd6:	687a      	ldr	r2, [r7, #4]
    7dd8:	0292      	lsls	r2, r2, #10
    7dda:	0412      	lsls	r2, r2, #16
    7ddc:	0c11      	lsrs	r1, r2, #16
    7dde:	683a      	ldr	r2, [r7, #0]
    7de0:	0592      	lsls	r2, r2, #22
    7de2:	0d92      	lsrs	r2, r2, #22
    7de4:	430a      	orrs	r2, r1
    7de6:	629a      	str	r2, [r3, #40]	; 0x28
	
	SYSCTRL->DFLLCTRL.bit.STABLE	=1; // Stable frequency (FINE calibration register value will be fixed after a fine lock)
    7de8:	4a1e      	ldr	r2, [pc, #120]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7dea:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7dec:	2108      	movs	r1, #8
    7dee:	430b      	orrs	r3, r1
    7df0:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.BPLCKC	=1; // Bypass coarse clock enable
    7df2:	4a1c      	ldr	r2, [pc, #112]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7df4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7df6:	2180      	movs	r1, #128	; 0x80
    7df8:	00c9      	lsls	r1, r1, #3
    7dfa:	430b      	orrs	r3, r1
    7dfc:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.MODE		=0; // Open loop mode
    7dfe:	4a19      	ldr	r2, [pc, #100]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e00:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e02:	2104      	movs	r1, #4
    7e04:	438b      	bics	r3, r1
    7e06:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ONDEMAND  =0; // On Demand is disabled, the oscillator will always be running when enabled.
    7e08:	4a16      	ldr	r2, [pc, #88]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e0a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e0c:	2180      	movs	r1, #128	; 0x80
    7e0e:	438b      	bics	r3, r1
    7e10:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ENABLE	=1; // Enable DFLL48
    7e12:	4a14      	ldr	r2, [pc, #80]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e14:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e16:	2102      	movs	r1, #2
    7e18:	430b      	orrs	r3, r1
    7e1a:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.CCDIS		=1; // Chill Cycle is disabled
    7e1c:	4a11      	ldr	r2, [pc, #68]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e1e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e20:	2180      	movs	r1, #128	; 0x80
    7e22:	0049      	lsls	r1, r1, #1
    7e24:	430b      	orrs	r3, r1
    7e26:	8493      	strh	r3, [r2, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; } // wait till DFLL is stable and ready to be used as a clock source
    7e28:	46c0      	nop			; (mov r8, r8)
    7e2a:	4b0e      	ldr	r3, [pc, #56]	; (7e64 <sys_clock_init_USE_DFLL48M+0xc8>)
    7e2c:	68db      	ldr	r3, [r3, #12]
    7e2e:	2210      	movs	r2, #16
    7e30:	4013      	ands	r3, r2
    7e32:	d0fa      	beq.n	7e2a <sys_clock_init_USE_DFLL48M+0x8e>

	GCLK->GENDIV.reg =GCLK_GENDIV_ID (GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENDIV_DIV (MAIN_CLK_DEVIDER);//16MHz
    7e34:	4b0c      	ldr	r3, [pc, #48]	; (7e68 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e36:	2280      	movs	r2, #128	; 0x80
    7e38:	0052      	lsls	r2, r2, #1
    7e3a:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg=GCLK_GENCTRL_ID(GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENCTRL_SRC (GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    7e3c:	4b0a      	ldr	r3, [pc, #40]	; (7e68 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e3e:	4a0b      	ldr	r2, [pc, #44]	; (7e6c <sys_clock_init_USE_DFLL48M+0xd0>)
    7e40:	605a      	str	r2, [r3, #4]
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) { ; }
    7e42:	46c0      	nop			; (mov r8, r8)
    7e44:	4b08      	ldr	r3, [pc, #32]	; (7e68 <sys_clock_init_USE_DFLL48M+0xcc>)
    7e46:	785b      	ldrb	r3, [r3, #1]
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	b25b      	sxtb	r3, r3
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	dbf9      	blt.n	7e44 <sys_clock_init_USE_DFLL48M+0xa8>
}
    7e50:	46c0      	nop			; (mov r8, r8)
    7e52:	46bd      	mov	sp, r7
    7e54:	b002      	add	sp, #8
    7e56:	bd80      	pop	{r7, pc}
    7e58:	41004000 	.word	0x41004000
    7e5c:	00806024 	.word	0x00806024
    7e60:	00806028 	.word	0x00806028
    7e64:	40000800 	.word	0x40000800
    7e68:	40000c00 	.word	0x40000c00
    7e6c:	00210700 	.word	0x00210700

00007e70 <__NVIC_EnableIRQ>:
{
    7e70:	b580      	push	{r7, lr}
    7e72:	b082      	sub	sp, #8
    7e74:	af00      	add	r7, sp, #0
    7e76:	0002      	movs	r2, r0
    7e78:	1dfb      	adds	r3, r7, #7
    7e7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7e7c:	1dfb      	adds	r3, r7, #7
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	2b7f      	cmp	r3, #127	; 0x7f
    7e82:	d809      	bhi.n	7e98 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7e84:	4b06      	ldr	r3, [pc, #24]	; (7ea0 <__NVIC_EnableIRQ+0x30>)
    7e86:	1dfa      	adds	r2, r7, #7
    7e88:	7812      	ldrb	r2, [r2, #0]
    7e8a:	0011      	movs	r1, r2
    7e8c:	221f      	movs	r2, #31
    7e8e:	400a      	ands	r2, r1
    7e90:	2101      	movs	r1, #1
    7e92:	4091      	lsls	r1, r2
    7e94:	000a      	movs	r2, r1
    7e96:	601a      	str	r2, [r3, #0]
}
    7e98:	46c0      	nop			; (mov r8, r8)
    7e9a:	46bd      	mov	sp, r7
    7e9c:	b002      	add	sp, #8
    7e9e:	bd80      	pop	{r7, pc}
    7ea0:	e000e100 	.word	0xe000e100

00007ea4 <__NVIC_DisableIRQ>:
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b082      	sub	sp, #8
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	0002      	movs	r2, r0
    7eac:	1dfb      	adds	r3, r7, #7
    7eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7eb0:	1dfb      	adds	r3, r7, #7
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	2b7f      	cmp	r3, #127	; 0x7f
    7eb6:	d80e      	bhi.n	7ed6 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7eb8:	4909      	ldr	r1, [pc, #36]	; (7ee0 <__NVIC_DisableIRQ+0x3c>)
    7eba:	1dfb      	adds	r3, r7, #7
    7ebc:	781b      	ldrb	r3, [r3, #0]
    7ebe:	001a      	movs	r2, r3
    7ec0:	231f      	movs	r3, #31
    7ec2:	4013      	ands	r3, r2
    7ec4:	2201      	movs	r2, #1
    7ec6:	409a      	lsls	r2, r3
    7ec8:	0013      	movs	r3, r2
    7eca:	2280      	movs	r2, #128	; 0x80
    7ecc:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    7ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ed2:	f3bf 8f6f 	isb	sy
}
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	46bd      	mov	sp, r7
    7eda:	b002      	add	sp, #8
    7edc:	bd80      	pop	{r7, pc}
    7ede:	46c0      	nop			; (mov r8, r8)
    7ee0:	e000e100 	.word	0xe000e100

00007ee4 <__NVIC_SetPriority>:
{
    7ee4:	b5b0      	push	{r4, r5, r7, lr}
    7ee6:	b082      	sub	sp, #8
    7ee8:	af00      	add	r7, sp, #0
    7eea:	0002      	movs	r2, r0
    7eec:	6039      	str	r1, [r7, #0]
    7eee:	1dfb      	adds	r3, r7, #7
    7ef0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7ef2:	1dfb      	adds	r3, r7, #7
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	2b7f      	cmp	r3, #127	; 0x7f
    7ef8:	d828      	bhi.n	7f4c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7efa:	4c2f      	ldr	r4, [pc, #188]	; (7fb8 <__NVIC_SetPriority+0xd4>)
    7efc:	1dfb      	adds	r3, r7, #7
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	b25b      	sxtb	r3, r3
    7f02:	089b      	lsrs	r3, r3, #2
    7f04:	492c      	ldr	r1, [pc, #176]	; (7fb8 <__NVIC_SetPriority+0xd4>)
    7f06:	1dfa      	adds	r2, r7, #7
    7f08:	7812      	ldrb	r2, [r2, #0]
    7f0a:	b252      	sxtb	r2, r2
    7f0c:	0892      	lsrs	r2, r2, #2
    7f0e:	32c0      	adds	r2, #192	; 0xc0
    7f10:	0092      	lsls	r2, r2, #2
    7f12:	5852      	ldr	r2, [r2, r1]
    7f14:	1df9      	adds	r1, r7, #7
    7f16:	7809      	ldrb	r1, [r1, #0]
    7f18:	0008      	movs	r0, r1
    7f1a:	2103      	movs	r1, #3
    7f1c:	4001      	ands	r1, r0
    7f1e:	00c9      	lsls	r1, r1, #3
    7f20:	20ff      	movs	r0, #255	; 0xff
    7f22:	4088      	lsls	r0, r1
    7f24:	0001      	movs	r1, r0
    7f26:	43c9      	mvns	r1, r1
    7f28:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f2a:	683a      	ldr	r2, [r7, #0]
    7f2c:	0192      	lsls	r2, r2, #6
    7f2e:	20ff      	movs	r0, #255	; 0xff
    7f30:	4010      	ands	r0, r2
    7f32:	1dfa      	adds	r2, r7, #7
    7f34:	7812      	ldrb	r2, [r2, #0]
    7f36:	0015      	movs	r5, r2
    7f38:	2203      	movs	r2, #3
    7f3a:	402a      	ands	r2, r5
    7f3c:	00d2      	lsls	r2, r2, #3
    7f3e:	4090      	lsls	r0, r2
    7f40:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f42:	430a      	orrs	r2, r1
    7f44:	33c0      	adds	r3, #192	; 0xc0
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	511a      	str	r2, [r3, r4]
}
    7f4a:	e031      	b.n	7fb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f4c:	4c1b      	ldr	r4, [pc, #108]	; (7fbc <__NVIC_SetPriority+0xd8>)
    7f4e:	1dfb      	adds	r3, r7, #7
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	001a      	movs	r2, r3
    7f54:	230f      	movs	r3, #15
    7f56:	4013      	ands	r3, r2
    7f58:	3b08      	subs	r3, #8
    7f5a:	0899      	lsrs	r1, r3, #2
    7f5c:	4a17      	ldr	r2, [pc, #92]	; (7fbc <__NVIC_SetPriority+0xd8>)
    7f5e:	1dfb      	adds	r3, r7, #7
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	0018      	movs	r0, r3
    7f64:	230f      	movs	r3, #15
    7f66:	4003      	ands	r3, r0
    7f68:	3b08      	subs	r3, #8
    7f6a:	089b      	lsrs	r3, r3, #2
    7f6c:	3306      	adds	r3, #6
    7f6e:	009b      	lsls	r3, r3, #2
    7f70:	18d3      	adds	r3, r2, r3
    7f72:	3304      	adds	r3, #4
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	1dfa      	adds	r2, r7, #7
    7f78:	7812      	ldrb	r2, [r2, #0]
    7f7a:	0010      	movs	r0, r2
    7f7c:	2203      	movs	r2, #3
    7f7e:	4002      	ands	r2, r0
    7f80:	00d2      	lsls	r2, r2, #3
    7f82:	20ff      	movs	r0, #255	; 0xff
    7f84:	4090      	lsls	r0, r2
    7f86:	0002      	movs	r2, r0
    7f88:	43d2      	mvns	r2, r2
    7f8a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f8c:	683b      	ldr	r3, [r7, #0]
    7f8e:	019b      	lsls	r3, r3, #6
    7f90:	20ff      	movs	r0, #255	; 0xff
    7f92:	4018      	ands	r0, r3
    7f94:	1dfb      	adds	r3, r7, #7
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	001d      	movs	r5, r3
    7f9a:	2303      	movs	r3, #3
    7f9c:	402b      	ands	r3, r5
    7f9e:	00db      	lsls	r3, r3, #3
    7fa0:	4098      	lsls	r0, r3
    7fa2:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fa4:	431a      	orrs	r2, r3
    7fa6:	1d8b      	adds	r3, r1, #6
    7fa8:	009b      	lsls	r3, r3, #2
    7faa:	18e3      	adds	r3, r4, r3
    7fac:	3304      	adds	r3, #4
    7fae:	601a      	str	r2, [r3, #0]
}
    7fb0:	46c0      	nop			; (mov r8, r8)
    7fb2:	46bd      	mov	sp, r7
    7fb4:	b002      	add	sp, #8
    7fb6:	bdb0      	pop	{r4, r5, r7, pc}
    7fb8:	e000e100 	.word	0xe000e100
    7fbc:	e000ed00 	.word	0xe000ed00

00007fc0 <TC3_start>:
//funx
	extern void TC3_init(void);
	extern void wait(DWORD time_100mk);
	extern void tc3_process(void);
//inline
	static inline void TC3_start(WORD cc) { TC3->COUNT16.CC[0].reg=cc-1; TC3->COUNT16.CTRLBSET.bit.CMD=0x01; }
    7fc0:	b580      	push	{r7, lr}
    7fc2:	b082      	sub	sp, #8
    7fc4:	af00      	add	r7, sp, #0
    7fc6:	0002      	movs	r2, r0
    7fc8:	1dbb      	adds	r3, r7, #6
    7fca:	801a      	strh	r2, [r3, #0]
    7fcc:	4a08      	ldr	r2, [pc, #32]	; (7ff0 <TC3_start+0x30>)
    7fce:	1dbb      	adds	r3, r7, #6
    7fd0:	881b      	ldrh	r3, [r3, #0]
    7fd2:	3b01      	subs	r3, #1
    7fd4:	b29b      	uxth	r3, r3
    7fd6:	8313      	strh	r3, [r2, #24]
    7fd8:	4a05      	ldr	r2, [pc, #20]	; (7ff0 <TC3_start+0x30>)
    7fda:	7953      	ldrb	r3, [r2, #5]
    7fdc:	213f      	movs	r1, #63	; 0x3f
    7fde:	400b      	ands	r3, r1
    7fe0:	1c19      	adds	r1, r3, #0
    7fe2:	2340      	movs	r3, #64	; 0x40
    7fe4:	430b      	orrs	r3, r1
    7fe6:	7153      	strb	r3, [r2, #5]
    7fe8:	46c0      	nop			; (mov r8, r8)
    7fea:	46bd      	mov	sp, r7
    7fec:	b002      	add	sp, #8
    7fee:	bd80      	pop	{r7, pc}
    7ff0:	42002c00 	.word	0x42002c00

00007ff4 <TC3_Handler>:
volatile DWORD  time_100mk=0;
volatile DWORD  TTL=0;

void TC3_Handler(void)
//-----------------------------------------------------------------------------
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg|=0xFFFF;
    7ff8:	4b22      	ldr	r3, [pc, #136]	; (8084 <TC3_Handler+0x90>)
    7ffa:	7b9b      	ldrb	r3, [r3, #14]
    7ffc:	4b21      	ldr	r3, [pc, #132]	; (8084 <TC3_Handler+0x90>)
    7ffe:	22ff      	movs	r2, #255	; 0xff
    8000:	739a      	strb	r2, [r3, #14]
	
	tc3_cnt++;
    8002:	4b21      	ldr	r3, [pc, #132]	; (8088 <TC3_Handler+0x94>)
    8004:	681b      	ldr	r3, [r3, #0]
    8006:	1c5a      	adds	r2, r3, #1
    8008:	4b1f      	ldr	r3, [pc, #124]	; (8088 <TC3_Handler+0x94>)
    800a:	601a      	str	r2, [r3, #0]
	time_wait++;
    800c:	4b1f      	ldr	r3, [pc, #124]	; (808c <TC3_Handler+0x98>)
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	1c5a      	adds	r2, r3, #1
    8012:	4b1e      	ldr	r3, [pc, #120]	; (808c <TC3_Handler+0x98>)
    8014:	601a      	str	r2, [r3, #0]
	port[0].rtime++;
    8016:	4a1e      	ldr	r2, [pc, #120]	; (8090 <TC3_Handler+0x9c>)
    8018:	2385      	movs	r3, #133	; 0x85
    801a:	009b      	lsls	r3, r3, #2
    801c:	5ad3      	ldrh	r3, [r2, r3]
    801e:	b29b      	uxth	r3, r3
    8020:	3301      	adds	r3, #1
    8022:	b299      	uxth	r1, r3
    8024:	4a1a      	ldr	r2, [pc, #104]	; (8090 <TC3_Handler+0x9c>)
    8026:	2385      	movs	r3, #133	; 0x85
    8028:	009b      	lsls	r3, r3, #2
    802a:	52d1      	strh	r1, [r2, r3]
	port[1].rtime++;
    802c:	4b18      	ldr	r3, [pc, #96]	; (8090 <TC3_Handler+0x9c>)
    802e:	4a19      	ldr	r2, [pc, #100]	; (8094 <TC3_Handler+0xa0>)
    8030:	5a9b      	ldrh	r3, [r3, r2]
    8032:	b29b      	uxth	r3, r3
    8034:	3301      	adds	r3, #1
    8036:	b299      	uxth	r1, r3
    8038:	4b15      	ldr	r3, [pc, #84]	; (8090 <TC3_Handler+0x9c>)
    803a:	4a16      	ldr	r2, [pc, #88]	; (8094 <TC3_Handler+0xa0>)
    803c:	5299      	strh	r1, [r3, r2]
	port[2].rtime++;
    803e:	4b14      	ldr	r3, [pc, #80]	; (8090 <TC3_Handler+0x9c>)
    8040:	4a15      	ldr	r2, [pc, #84]	; (8098 <TC3_Handler+0xa4>)
    8042:	5a9b      	ldrh	r3, [r3, r2]
    8044:	b29b      	uxth	r3, r3
    8046:	3301      	adds	r3, #1
    8048:	b299      	uxth	r1, r3
    804a:	4b11      	ldr	r3, [pc, #68]	; (8090 <TC3_Handler+0x9c>)
    804c:	4a12      	ldr	r2, [pc, #72]	; (8098 <TC3_Handler+0xa4>)
    804e:	5299      	strh	r1, [r3, r2]
	port[3].rtime++;
    8050:	4b0f      	ldr	r3, [pc, #60]	; (8090 <TC3_Handler+0x9c>)
    8052:	4a12      	ldr	r2, [pc, #72]	; (809c <TC3_Handler+0xa8>)
    8054:	5a9b      	ldrh	r3, [r3, r2]
    8056:	b29b      	uxth	r3, r3
    8058:	3301      	adds	r3, #1
    805a:	b299      	uxth	r1, r3
    805c:	4b0c      	ldr	r3, [pc, #48]	; (8090 <TC3_Handler+0x9c>)
    805e:	4a0f      	ldr	r2, [pc, #60]	; (809c <TC3_Handler+0xa8>)
    8060:	5299      	strh	r1, [r3, r2]
	
	
	if(spi_wait--);
    8062:	4b0f      	ldr	r3, [pc, #60]	; (80a0 <TC3_Handler+0xac>)
    8064:	881b      	ldrh	r3, [r3, #0]
    8066:	b29b      	uxth	r3, r3
    8068:	3b01      	subs	r3, #1
    806a:	b29a      	uxth	r2, r3
    806c:	4b0c      	ldr	r3, [pc, #48]	; (80a0 <TC3_Handler+0xac>)
    806e:	801a      	strh	r2, [r3, #0]
	if(cmd_spi_wait--);
    8070:	4b0c      	ldr	r3, [pc, #48]	; (80a4 <TC3_Handler+0xb0>)
    8072:	881b      	ldrh	r3, [r3, #0]
    8074:	b29b      	uxth	r3, r3
    8076:	3b01      	subs	r3, #1
    8078:	b29a      	uxth	r2, r3
    807a:	4b0a      	ldr	r3, [pc, #40]	; (80a4 <TC3_Handler+0xb0>)
    807c:	801a      	strh	r2, [r3, #0]
}
    807e:	46c0      	nop			; (mov r8, r8)
    8080:	46bd      	mov	sp, r7
    8082:	bd80      	pop	{r7, pc}
    8084:	42002c00 	.word	0x42002c00
    8088:	2000046c 	.word	0x2000046c
    808c:	200031f8 	.word	0x200031f8
    8090:	200031fc 	.word	0x200031fc
    8094:	00000454 	.word	0x00000454
    8098:	00000694 	.word	0x00000694
    809c:	000008d4 	.word	0x000008d4
    80a0:	200031f4 	.word	0x200031f4
    80a4:	200031f6 	.word	0x200031f6

000080a8 <TC3_init>:

void TC3_init(void)
//-----------------------------------------------------------------------------
{
    80a8:	b580      	push	{r7, lr}
    80aa:	af00      	add	r7, sp, #0
	GCLK->CLKCTRL.bit.ID   =0x1B; // Bits 5:0  - ID: Generic Clock Selection ID (0x1B - TCC2,TC3)
    80ac:	4a37      	ldr	r2, [pc, #220]	; (818c <TC3_init+0xe4>)
    80ae:	8853      	ldrh	r3, [r2, #2]
    80b0:	213f      	movs	r1, #63	; 0x3f
    80b2:	438b      	bics	r3, r1
    80b4:	1c19      	adds	r1, r3, #0
    80b6:	231b      	movs	r3, #27
    80b8:	430b      	orrs	r3, r1
    80ba:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    80bc:	4a33      	ldr	r2, [pc, #204]	; (818c <TC3_init+0xe4>)
    80be:	8853      	ldrh	r3, [r2, #2]
    80c0:	4933      	ldr	r1, [pc, #204]	; (8190 <TC3_init+0xe8>)
    80c2:	400b      	ands	r3, r1
    80c4:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    80c6:	4a31      	ldr	r2, [pc, #196]	; (818c <TC3_init+0xe4>)
    80c8:	8853      	ldrh	r3, [r2, #2]
    80ca:	2180      	movs	r1, #128	; 0x80
    80cc:	01c9      	lsls	r1, r1, #7
    80ce:	430b      	orrs	r3, r1
    80d0:	8053      	strh	r3, [r2, #2]

	PM->APBCSEL.bit.APBCDIV=0x00;
    80d2:	4a30      	ldr	r2, [pc, #192]	; (8194 <TC3_init+0xec>)
    80d4:	7ad3      	ldrb	r3, [r2, #11]
    80d6:	2107      	movs	r1, #7
    80d8:	438b      	bics	r3, r1
    80da:	72d3      	strb	r3, [r2, #11]
	PM->APBCMASK.bit.TC3_  =0x01; //
    80dc:	4a2d      	ldr	r2, [pc, #180]	; (8194 <TC3_init+0xec>)
    80de:	6a13      	ldr	r3, [r2, #32]
    80e0:	2180      	movs	r1, #128	; 0x80
    80e2:	0109      	lsls	r1, r1, #4
    80e4:	430b      	orrs	r3, r1
    80e6:	6213      	str	r3, [r2, #32]

	TC3->COUNT16.CTRLA.bit.MODE     =0x0; // Bits 3:2   - MODE: (0-Counter in 16-bit mode)
    80e8:	4a2b      	ldr	r2, [pc, #172]	; (8198 <TC3_init+0xf0>)
    80ea:	8813      	ldrh	r3, [r2, #0]
    80ec:	210c      	movs	r1, #12
    80ee:	438b      	bics	r3, r1
    80f0:	8013      	strh	r3, [r2, #0]
	if (PROC_HERZ == 8000000)	{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV16_Val; }
	else						{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV64_Val;}
    80f2:	4a29      	ldr	r2, [pc, #164]	; (8198 <TC3_init+0xf0>)
    80f4:	8813      	ldrh	r3, [r2, #0]
    80f6:	4929      	ldr	r1, [pc, #164]	; (819c <TC3_init+0xf4>)
    80f8:	400b      	ands	r3, r1
    80fa:	1c19      	adds	r1, r3, #0
    80fc:	23a0      	movs	r3, #160	; 0xa0
    80fe:	00db      	lsls	r3, r3, #3
    8100:	430b      	orrs	r3, r1
    8102:	8013      	strh	r3, [r2, #0]
		
	
	TC3->COUNT16.CTRLA.bit.PRESCSYNC=0x00; // Bits 13:12 - PRESCSYNC: Prescaler and Counter Synchronization (Reload or reset the counter on next generic clock)
    8104:	4a24      	ldr	r2, [pc, #144]	; (8198 <TC3_init+0xf0>)
    8106:	8813      	ldrh	r3, [r2, #0]
    8108:	4925      	ldr	r1, [pc, #148]	; (81a0 <TC3_init+0xf8>)
    810a:	400b      	ands	r3, r1
    810c:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.WAVEGEN  =0x01; // Bits 6:5   - WAVEGEN: Waveform Generation Operation
    810e:	4a22      	ldr	r2, [pc, #136]	; (8198 <TC3_init+0xf0>)
    8110:	8813      	ldrh	r3, [r2, #0]
    8112:	2160      	movs	r1, #96	; 0x60
    8114:	438b      	bics	r3, r1
    8116:	1c19      	adds	r1, r3, #0
    8118:	2320      	movs	r3, #32
    811a:	430b      	orrs	r3, r1
    811c:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    811e:	4b1e      	ldr	r3, [pc, #120]	; (8198 <TC3_init+0xf0>)
    8120:	2201      	movs	r2, #1
    8122:	4252      	negs	r2, r2
    8124:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    8126:	4b1c      	ldr	r3, [pc, #112]	; (8198 <TC3_init+0xf0>)
    8128:	2201      	movs	r2, #1
    812a:	4252      	negs	r2, r2
    812c:	835a      	strh	r2, [r3, #26]

	//TC3->COUNT16.CTRLBSET.bit.ONESHOT=0x00; // Bit 2 - ONESHOT: One-Shot (1: The timer/counter will wrap around and stop on the next underflow/overflow condition.)
	TC3->COUNT16.CTRLBSET.bit.DIR    =0x00; // Bit 0 - DIR: Counter Direction (0: The timer/counter is counting up (incrementing))
    812e:	4a1a      	ldr	r2, [pc, #104]	; (8198 <TC3_init+0xf0>)
    8130:	7953      	ldrb	r3, [r2, #5]
    8132:	2101      	movs	r1, #1
    8134:	438b      	bics	r3, r1
    8136:	7153      	strb	r3, [r2, #5]
	TC3->COUNT16.CTRLA.bit.ENABLE    =0x01; // Bit 1 - ENABLE: Enable
    8138:	4a17      	ldr	r2, [pc, #92]	; (8198 <TC3_init+0xf0>)
    813a:	8813      	ldrh	r3, [r2, #0]
    813c:	2102      	movs	r1, #2
    813e:	430b      	orrs	r3, r1
    8140:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    8142:	4b15      	ldr	r3, [pc, #84]	; (8198 <TC3_init+0xf0>)
    8144:	2201      	movs	r2, #1
    8146:	4252      	negs	r2, r2
    8148:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    814a:	4b13      	ldr	r3, [pc, #76]	; (8198 <TC3_init+0xf0>)
    814c:	2201      	movs	r2, #1
    814e:	4252      	negs	r2, r2
    8150:	835a      	strh	r2, [r3, #26]
	
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 0x01); // wait for TC3 to be enabled
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	4b10      	ldr	r3, [pc, #64]	; (8198 <TC3_init+0xf0>)
    8156:	7bdb      	ldrb	r3, [r3, #15]
    8158:	061b      	lsls	r3, r3, #24
    815a:	0fdb      	lsrs	r3, r3, #31
    815c:	b2db      	uxtb	r3, r3
    815e:	2b01      	cmp	r3, #1
    8160:	d0f8      	beq.n	8154 <TC3_init+0xac>

	NVIC_DisableIRQ(TC3_IRQn);					// Disable the interrupt
    8162:	2012      	movs	r0, #18
    8164:	f7ff fe9e 	bl	7ea4 <__NVIC_DisableIRQ>
	//TC3->COUNT16.INTENSET.bit.MC0=0x01;	// Enable match interrupts on compare channel 0
	TC3->COUNT16.INTENSET.bit.OVF=0x01;
    8168:	4a0b      	ldr	r2, [pc, #44]	; (8198 <TC3_init+0xf0>)
    816a:	7b53      	ldrb	r3, [r2, #13]
    816c:	2101      	movs	r1, #1
    816e:	430b      	orrs	r3, r1
    8170:	7353      	strb	r3, [r2, #13]
	NVIC_SetPriority(TC3_IRQn, 0);			// Set the interrupt priority to lowest value
    8172:	2100      	movs	r1, #0
    8174:	2012      	movs	r0, #18
    8176:	f7ff feb5 	bl	7ee4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TC3_IRQn);						// Enable the interrupt
    817a:	2012      	movs	r0, #18
    817c:	f7ff fe78 	bl	7e70 <__NVIC_EnableIRQ>
	
	TC3_start(TC3_100mk);
    8180:	204b      	movs	r0, #75	; 0x4b
    8182:	f7ff ff1d 	bl	7fc0 <TC3_start>
}
    8186:	46c0      	nop			; (mov r8, r8)
    8188:	46bd      	mov	sp, r7
    818a:	bd80      	pop	{r7, pc}
    818c:	40000c00 	.word	0x40000c00
    8190:	fffff0ff 	.word	0xfffff0ff
    8194:	40000400 	.word	0x40000400
    8198:	42002c00 	.word	0x42002c00
    819c:	fffff8ff 	.word	0xfffff8ff
    81a0:	ffffcfff 	.word	0xffffcfff

000081a4 <wait>:


	void wait(DWORD time_100mk)
	{
    81a4:	b580      	push	{r7, lr}
    81a6:	b082      	sub	sp, #8
    81a8:	af00      	add	r7, sp, #0
    81aa:	6078      	str	r0, [r7, #4]
	time_wait=0;
    81ac:	4b10      	ldr	r3, [pc, #64]	; (81f0 <wait+0x4c>)
    81ae:	2200      	movs	r2, #0
    81b0:	601a      	str	r2, [r3, #0]
	while(1){if(reset   == NULL) 
    81b2:	4b10      	ldr	r3, [pc, #64]	; (81f4 <wait+0x50>)
    81b4:	881b      	ldrh	r3, [r3, #0]
    81b6:	2b00      	cmp	r3, #0
    81b8:	d10e      	bne.n	81d8 <wait+0x34>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    81ba:	4b0f      	ldr	r3, [pc, #60]	; (81f8 <wait+0x54>)
    81bc:	799b      	ldrb	r3, [r3, #6]
    81be:	07db      	lsls	r3, r3, #31
    81c0:	0fdb      	lsrs	r3, r3, #31
    81c2:	b2db      	uxtb	r3, r3
    81c4:	2b01      	cmp	r3, #1
    81c6:	d107      	bne.n	81d8 <wait+0x34>
    81c8:	4a0b      	ldr	r2, [pc, #44]	; (81f8 <wait+0x54>)
    81ca:	7993      	ldrb	r3, [r2, #6]
    81cc:	2101      	movs	r1, #1
    81ce:	430b      	orrs	r3, r1
    81d0:	7193      	strb	r3, [r2, #6]
    81d2:	4b09      	ldr	r3, [pc, #36]	; (81f8 <wait+0x54>)
    81d4:	22a5      	movs	r2, #165	; 0xa5
    81d6:	721a      	strb	r2, [r3, #8]
    81d8:	4b05      	ldr	r3, [pc, #20]	; (81f0 <wait+0x4c>)
    81da:	681a      	ldr	r2, [r3, #0]
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	429a      	cmp	r2, r3
    81e0:	d800      	bhi.n	81e4 <wait+0x40>
	while(1){if(reset   == NULL) 
    81e2:	e7e6      	b.n	81b2 <wait+0xe>
		{wdt_reset();}if(time_wait>time_100mk){break;}}
    81e4:	46c0      	nop			; (mov r8, r8)
	}
    81e6:	46c0      	nop			; (mov r8, r8)
    81e8:	46bd      	mov	sp, r7
    81ea:	b002      	add	sp, #8
    81ec:	bd80      	pop	{r7, pc}
    81ee:	46c0      	nop			; (mov r8, r8)
    81f0:	200031f8 	.word	0x200031f8
    81f4:	20002548 	.word	0x20002548
    81f8:	40001000 	.word	0x40001000

000081fc <tc3_process>:
	
	
	
	void tc3_process(void)
	//-----------------------------------------------------------------------------
	{
    81fc:	b5b0      	push	{r4, r5, r7, lr}
    81fe:	af00      	add	r7, sp, #0
		if(!tc3_cnt) {return;}
    8200:	4b9e      	ldr	r3, [pc, #632]	; (847c <tc3_process+0x280>)
    8202:	681b      	ldr	r3, [r3, #0]
    8204:	2b00      	cmp	r3, #0
    8206:	d100      	bne.n	820a <tc3_process+0xe>
    8208:	e135      	b.n	8476 <tc3_process+0x27a>
			
		if(port[0].time_port){port[0].time_port--;}
    820a:	4a9d      	ldr	r2, [pc, #628]	; (8480 <tc3_process+0x284>)
    820c:	2388      	movs	r3, #136	; 0x88
    820e:	009b      	lsls	r3, r3, #2
    8210:	58d3      	ldr	r3, [r2, r3]
    8212:	2b00      	cmp	r3, #0
    8214:	d008      	beq.n	8228 <tc3_process+0x2c>
    8216:	4a9a      	ldr	r2, [pc, #616]	; (8480 <tc3_process+0x284>)
    8218:	2388      	movs	r3, #136	; 0x88
    821a:	009b      	lsls	r3, r3, #2
    821c:	58d3      	ldr	r3, [r2, r3]
    821e:	1e59      	subs	r1, r3, #1
    8220:	4a97      	ldr	r2, [pc, #604]	; (8480 <tc3_process+0x284>)
    8222:	2388      	movs	r3, #136	; 0x88
    8224:	009b      	lsls	r3, r3, #2
    8226:	50d1      	str	r1, [r2, r3]
		if(port[1].time_port){port[1].time_port--;}
    8228:	4a95      	ldr	r2, [pc, #596]	; (8480 <tc3_process+0x284>)
    822a:	238c      	movs	r3, #140	; 0x8c
    822c:	00db      	lsls	r3, r3, #3
    822e:	58d3      	ldr	r3, [r2, r3]
    8230:	2b00      	cmp	r3, #0
    8232:	d008      	beq.n	8246 <tc3_process+0x4a>
    8234:	4a92      	ldr	r2, [pc, #584]	; (8480 <tc3_process+0x284>)
    8236:	238c      	movs	r3, #140	; 0x8c
    8238:	00db      	lsls	r3, r3, #3
    823a:	58d3      	ldr	r3, [r2, r3]
    823c:	1e59      	subs	r1, r3, #1
    823e:	4a90      	ldr	r2, [pc, #576]	; (8480 <tc3_process+0x284>)
    8240:	238c      	movs	r3, #140	; 0x8c
    8242:	00db      	lsls	r3, r3, #3
    8244:	50d1      	str	r1, [r2, r3]
		if(port[2].time_port){port[2].time_port--;}
    8246:	4a8e      	ldr	r2, [pc, #568]	; (8480 <tc3_process+0x284>)
    8248:	23d4      	movs	r3, #212	; 0xd4
    824a:	00db      	lsls	r3, r3, #3
    824c:	58d3      	ldr	r3, [r2, r3]
    824e:	2b00      	cmp	r3, #0
    8250:	d008      	beq.n	8264 <tc3_process+0x68>
    8252:	4a8b      	ldr	r2, [pc, #556]	; (8480 <tc3_process+0x284>)
    8254:	23d4      	movs	r3, #212	; 0xd4
    8256:	00db      	lsls	r3, r3, #3
    8258:	58d3      	ldr	r3, [r2, r3]
    825a:	1e59      	subs	r1, r3, #1
    825c:	4a88      	ldr	r2, [pc, #544]	; (8480 <tc3_process+0x284>)
    825e:	23d4      	movs	r3, #212	; 0xd4
    8260:	00db      	lsls	r3, r3, #3
    8262:	50d1      	str	r1, [r2, r3]
		if(port[3].time_port){port[3].time_port--;}
    8264:	4a86      	ldr	r2, [pc, #536]	; (8480 <tc3_process+0x284>)
    8266:	238e      	movs	r3, #142	; 0x8e
    8268:	011b      	lsls	r3, r3, #4
    826a:	58d3      	ldr	r3, [r2, r3]
    826c:	2b00      	cmp	r3, #0
    826e:	d008      	beq.n	8282 <tc3_process+0x86>
    8270:	4a83      	ldr	r2, [pc, #524]	; (8480 <tc3_process+0x284>)
    8272:	238e      	movs	r3, #142	; 0x8e
    8274:	011b      	lsls	r3, r3, #4
    8276:	58d3      	ldr	r3, [r2, r3]
    8278:	1e59      	subs	r1, r3, #1
    827a:	4a81      	ldr	r2, [pc, #516]	; (8480 <tc3_process+0x284>)
    827c:	238e      	movs	r3, #142	; 0x8e
    827e:	011b      	lsls	r3, r3, #4
    8280:	50d1      	str	r1, [r2, r3]
			
		
				
		if(eth_sock[0].time_wait_SEND_OK){eth_sock[0].time_wait_SEND_OK--;}
    8282:	4b80      	ldr	r3, [pc, #512]	; (8484 <tc3_process+0x288>)
    8284:	4a80      	ldr	r2, [pc, #512]	; (8488 <tc3_process+0x28c>)
    8286:	5c9a      	ldrb	r2, [r3, r2]
    8288:	4980      	ldr	r1, [pc, #512]	; (848c <tc3_process+0x290>)
    828a:	5c5b      	ldrb	r3, [r3, r1]
    828c:	021b      	lsls	r3, r3, #8
    828e:	4313      	orrs	r3, r2
    8290:	b29b      	uxth	r3, r3
    8292:	2b00      	cmp	r3, #0
    8294:	d01f      	beq.n	82d6 <tc3_process+0xda>
    8296:	4b7b      	ldr	r3, [pc, #492]	; (8484 <tc3_process+0x288>)
    8298:	4a7b      	ldr	r2, [pc, #492]	; (8488 <tc3_process+0x28c>)
    829a:	5c9a      	ldrb	r2, [r3, r2]
    829c:	497b      	ldr	r1, [pc, #492]	; (848c <tc3_process+0x290>)
    829e:	5c5b      	ldrb	r3, [r3, r1]
    82a0:	021b      	lsls	r3, r3, #8
    82a2:	4313      	orrs	r3, r2
    82a4:	b29b      	uxth	r3, r3
    82a6:	3b01      	subs	r3, #1
    82a8:	b299      	uxth	r1, r3
    82aa:	4b76      	ldr	r3, [pc, #472]	; (8484 <tc3_process+0x288>)
    82ac:	4a76      	ldr	r2, [pc, #472]	; (8488 <tc3_process+0x28c>)
    82ae:	20ff      	movs	r0, #255	; 0xff
    82b0:	4008      	ands	r0, r1
    82b2:	0005      	movs	r5, r0
    82b4:	5c98      	ldrb	r0, [r3, r2]
    82b6:	2400      	movs	r4, #0
    82b8:	4020      	ands	r0, r4
    82ba:	1c04      	adds	r4, r0, #0
    82bc:	1c28      	adds	r0, r5, #0
    82be:	4320      	orrs	r0, r4
    82c0:	5498      	strb	r0, [r3, r2]
    82c2:	0a09      	lsrs	r1, r1, #8
    82c4:	b288      	uxth	r0, r1
    82c6:	189b      	adds	r3, r3, r2
    82c8:	785a      	ldrb	r2, [r3, #1]
    82ca:	2100      	movs	r1, #0
    82cc:	400a      	ands	r2, r1
    82ce:	1c11      	adds	r1, r2, #0
    82d0:	1c02      	adds	r2, r0, #0
    82d2:	430a      	orrs	r2, r1
    82d4:	705a      	strb	r2, [r3, #1]
		if(eth_sock[1].time_wait_SEND_OK){eth_sock[1].time_wait_SEND_OK--;}
    82d6:	4b6b      	ldr	r3, [pc, #428]	; (8484 <tc3_process+0x288>)
    82d8:	4a6d      	ldr	r2, [pc, #436]	; (8490 <tc3_process+0x294>)
    82da:	5c9a      	ldrb	r2, [r3, r2]
    82dc:	496d      	ldr	r1, [pc, #436]	; (8494 <tc3_process+0x298>)
    82de:	5c5b      	ldrb	r3, [r3, r1]
    82e0:	021b      	lsls	r3, r3, #8
    82e2:	4313      	orrs	r3, r2
    82e4:	b29b      	uxth	r3, r3
    82e6:	2b00      	cmp	r3, #0
    82e8:	d01f      	beq.n	832a <tc3_process+0x12e>
    82ea:	4b66      	ldr	r3, [pc, #408]	; (8484 <tc3_process+0x288>)
    82ec:	4a68      	ldr	r2, [pc, #416]	; (8490 <tc3_process+0x294>)
    82ee:	5c9a      	ldrb	r2, [r3, r2]
    82f0:	4968      	ldr	r1, [pc, #416]	; (8494 <tc3_process+0x298>)
    82f2:	5c5b      	ldrb	r3, [r3, r1]
    82f4:	021b      	lsls	r3, r3, #8
    82f6:	4313      	orrs	r3, r2
    82f8:	b29b      	uxth	r3, r3
    82fa:	3b01      	subs	r3, #1
    82fc:	b299      	uxth	r1, r3
    82fe:	4b61      	ldr	r3, [pc, #388]	; (8484 <tc3_process+0x288>)
    8300:	4a63      	ldr	r2, [pc, #396]	; (8490 <tc3_process+0x294>)
    8302:	20ff      	movs	r0, #255	; 0xff
    8304:	4008      	ands	r0, r1
    8306:	0005      	movs	r5, r0
    8308:	5c98      	ldrb	r0, [r3, r2]
    830a:	2400      	movs	r4, #0
    830c:	4020      	ands	r0, r4
    830e:	1c04      	adds	r4, r0, #0
    8310:	1c28      	adds	r0, r5, #0
    8312:	4320      	orrs	r0, r4
    8314:	5498      	strb	r0, [r3, r2]
    8316:	0a09      	lsrs	r1, r1, #8
    8318:	b288      	uxth	r0, r1
    831a:	189b      	adds	r3, r3, r2
    831c:	785a      	ldrb	r2, [r3, #1]
    831e:	2100      	movs	r1, #0
    8320:	400a      	ands	r2, r1
    8322:	1c11      	adds	r1, r2, #0
    8324:	1c02      	adds	r2, r0, #0
    8326:	430a      	orrs	r2, r1
    8328:	705a      	strb	r2, [r3, #1]
		if(eth_sock[2].time_wait_SEND_OK){eth_sock[2].time_wait_SEND_OK--;}
    832a:	4b56      	ldr	r3, [pc, #344]	; (8484 <tc3_process+0x288>)
    832c:	4a5a      	ldr	r2, [pc, #360]	; (8498 <tc3_process+0x29c>)
    832e:	5c9a      	ldrb	r2, [r3, r2]
    8330:	495a      	ldr	r1, [pc, #360]	; (849c <tc3_process+0x2a0>)
    8332:	5c5b      	ldrb	r3, [r3, r1]
    8334:	021b      	lsls	r3, r3, #8
    8336:	4313      	orrs	r3, r2
    8338:	b29b      	uxth	r3, r3
    833a:	2b00      	cmp	r3, #0
    833c:	d01f      	beq.n	837e <tc3_process+0x182>
    833e:	4b51      	ldr	r3, [pc, #324]	; (8484 <tc3_process+0x288>)
    8340:	4a55      	ldr	r2, [pc, #340]	; (8498 <tc3_process+0x29c>)
    8342:	5c9a      	ldrb	r2, [r3, r2]
    8344:	4955      	ldr	r1, [pc, #340]	; (849c <tc3_process+0x2a0>)
    8346:	5c5b      	ldrb	r3, [r3, r1]
    8348:	021b      	lsls	r3, r3, #8
    834a:	4313      	orrs	r3, r2
    834c:	b29b      	uxth	r3, r3
    834e:	3b01      	subs	r3, #1
    8350:	b299      	uxth	r1, r3
    8352:	4b4c      	ldr	r3, [pc, #304]	; (8484 <tc3_process+0x288>)
    8354:	4a50      	ldr	r2, [pc, #320]	; (8498 <tc3_process+0x29c>)
    8356:	20ff      	movs	r0, #255	; 0xff
    8358:	4008      	ands	r0, r1
    835a:	0005      	movs	r5, r0
    835c:	5c98      	ldrb	r0, [r3, r2]
    835e:	2400      	movs	r4, #0
    8360:	4020      	ands	r0, r4
    8362:	1c04      	adds	r4, r0, #0
    8364:	1c28      	adds	r0, r5, #0
    8366:	4320      	orrs	r0, r4
    8368:	5498      	strb	r0, [r3, r2]
    836a:	0a09      	lsrs	r1, r1, #8
    836c:	b288      	uxth	r0, r1
    836e:	189b      	adds	r3, r3, r2
    8370:	785a      	ldrb	r2, [r3, #1]
    8372:	2100      	movs	r1, #0
    8374:	400a      	ands	r2, r1
    8376:	1c11      	adds	r1, r2, #0
    8378:	1c02      	adds	r2, r0, #0
    837a:	430a      	orrs	r2, r1
    837c:	705a      	strb	r2, [r3, #1]
		if(eth_sock[3].time_wait_SEND_OK){eth_sock[3].time_wait_SEND_OK--;}
    837e:	4b41      	ldr	r3, [pc, #260]	; (8484 <tc3_process+0x288>)
    8380:	4a47      	ldr	r2, [pc, #284]	; (84a0 <tc3_process+0x2a4>)
    8382:	5c9a      	ldrb	r2, [r3, r2]
    8384:	4947      	ldr	r1, [pc, #284]	; (84a4 <tc3_process+0x2a8>)
    8386:	5c5b      	ldrb	r3, [r3, r1]
    8388:	021b      	lsls	r3, r3, #8
    838a:	4313      	orrs	r3, r2
    838c:	b29b      	uxth	r3, r3
    838e:	2b00      	cmp	r3, #0
    8390:	d01f      	beq.n	83d2 <tc3_process+0x1d6>
    8392:	4b3c      	ldr	r3, [pc, #240]	; (8484 <tc3_process+0x288>)
    8394:	4a42      	ldr	r2, [pc, #264]	; (84a0 <tc3_process+0x2a4>)
    8396:	5c9a      	ldrb	r2, [r3, r2]
    8398:	4942      	ldr	r1, [pc, #264]	; (84a4 <tc3_process+0x2a8>)
    839a:	5c5b      	ldrb	r3, [r3, r1]
    839c:	021b      	lsls	r3, r3, #8
    839e:	4313      	orrs	r3, r2
    83a0:	b29b      	uxth	r3, r3
    83a2:	3b01      	subs	r3, #1
    83a4:	b299      	uxth	r1, r3
    83a6:	4b37      	ldr	r3, [pc, #220]	; (8484 <tc3_process+0x288>)
    83a8:	4a3d      	ldr	r2, [pc, #244]	; (84a0 <tc3_process+0x2a4>)
    83aa:	20ff      	movs	r0, #255	; 0xff
    83ac:	4008      	ands	r0, r1
    83ae:	0005      	movs	r5, r0
    83b0:	5c98      	ldrb	r0, [r3, r2]
    83b2:	2400      	movs	r4, #0
    83b4:	4020      	ands	r0, r4
    83b6:	1c04      	adds	r4, r0, #0
    83b8:	1c28      	adds	r0, r5, #0
    83ba:	4320      	orrs	r0, r4
    83bc:	5498      	strb	r0, [r3, r2]
    83be:	0a09      	lsrs	r1, r1, #8
    83c0:	b288      	uxth	r0, r1
    83c2:	189b      	adds	r3, r3, r2
    83c4:	785a      	ldrb	r2, [r3, #1]
    83c6:	2100      	movs	r1, #0
    83c8:	400a      	ands	r2, r1
    83ca:	1c11      	adds	r1, r2, #0
    83cc:	1c02      	adds	r2, r0, #0
    83ce:	430a      	orrs	r2, r1
    83d0:	705a      	strb	r2, [r3, #1]
		if(eth_sock[4].time_wait_SEND_OK){eth_sock[4].time_wait_SEND_OK--;}	
    83d2:	4b2c      	ldr	r3, [pc, #176]	; (8484 <tc3_process+0x288>)
    83d4:	4a34      	ldr	r2, [pc, #208]	; (84a8 <tc3_process+0x2ac>)
    83d6:	5c9a      	ldrb	r2, [r3, r2]
    83d8:	4934      	ldr	r1, [pc, #208]	; (84ac <tc3_process+0x2b0>)
    83da:	5c5b      	ldrb	r3, [r3, r1]
    83dc:	021b      	lsls	r3, r3, #8
    83de:	4313      	orrs	r3, r2
    83e0:	b29b      	uxth	r3, r3
    83e2:	2b00      	cmp	r3, #0
    83e4:	d01f      	beq.n	8426 <tc3_process+0x22a>
    83e6:	4b27      	ldr	r3, [pc, #156]	; (8484 <tc3_process+0x288>)
    83e8:	4a2f      	ldr	r2, [pc, #188]	; (84a8 <tc3_process+0x2ac>)
    83ea:	5c9a      	ldrb	r2, [r3, r2]
    83ec:	492f      	ldr	r1, [pc, #188]	; (84ac <tc3_process+0x2b0>)
    83ee:	5c5b      	ldrb	r3, [r3, r1]
    83f0:	021b      	lsls	r3, r3, #8
    83f2:	4313      	orrs	r3, r2
    83f4:	b29b      	uxth	r3, r3
    83f6:	3b01      	subs	r3, #1
    83f8:	b299      	uxth	r1, r3
    83fa:	4b22      	ldr	r3, [pc, #136]	; (8484 <tc3_process+0x288>)
    83fc:	4a2a      	ldr	r2, [pc, #168]	; (84a8 <tc3_process+0x2ac>)
    83fe:	20ff      	movs	r0, #255	; 0xff
    8400:	4008      	ands	r0, r1
    8402:	0005      	movs	r5, r0
    8404:	5c98      	ldrb	r0, [r3, r2]
    8406:	2400      	movs	r4, #0
    8408:	4020      	ands	r0, r4
    840a:	1c04      	adds	r4, r0, #0
    840c:	1c28      	adds	r0, r5, #0
    840e:	4320      	orrs	r0, r4
    8410:	5498      	strb	r0, [r3, r2]
    8412:	0a09      	lsrs	r1, r1, #8
    8414:	b288      	uxth	r0, r1
    8416:	189b      	adds	r3, r3, r2
    8418:	785a      	ldrb	r2, [r3, #1]
    841a:	2100      	movs	r1, #0
    841c:	400a      	ands	r2, r1
    841e:	1c11      	adds	r1, r2, #0
    8420:	1c02      	adds	r2, r0, #0
    8422:	430a      	orrs	r2, r1
    8424:	705a      	strb	r2, [r3, #1]
		
		loggin_timeout++;
    8426:	4b22      	ldr	r3, [pc, #136]	; (84b0 <tc3_process+0x2b4>)
    8428:	681b      	ldr	r3, [r3, #0]
    842a:	1c5a      	adds	r2, r3, #1
    842c:	4b20      	ldr	r3, [pc, #128]	; (84b0 <tc3_process+0x2b4>)
    842e:	601a      	str	r2, [r3, #0]
		time_100mk=time_100mk+tc3_cnt;	
    8430:	4b20      	ldr	r3, [pc, #128]	; (84b4 <tc3_process+0x2b8>)
    8432:	681a      	ldr	r2, [r3, #0]
    8434:	4b11      	ldr	r3, [pc, #68]	; (847c <tc3_process+0x280>)
    8436:	681b      	ldr	r3, [r3, #0]
    8438:	18d2      	adds	r2, r2, r3
    843a:	4b1e      	ldr	r3, [pc, #120]	; (84b4 <tc3_process+0x2b8>)
    843c:	601a      	str	r2, [r3, #0]
		if(time_100mk>=10000)
    843e:	4b1d      	ldr	r3, [pc, #116]	; (84b4 <tc3_process+0x2b8>)
    8440:	681b      	ldr	r3, [r3, #0]
    8442:	4a1d      	ldr	r2, [pc, #116]	; (84b8 <tc3_process+0x2bc>)
    8444:	4293      	cmp	r3, r2
    8446:	d912      	bls.n	846e <tc3_process+0x272>
		{time_100mk=0;TTL++; if(ger_wait){ger_wait--;} check_gerkon();}
    8448:	4b1a      	ldr	r3, [pc, #104]	; (84b4 <tc3_process+0x2b8>)
    844a:	2200      	movs	r2, #0
    844c:	601a      	str	r2, [r3, #0]
    844e:	4b1b      	ldr	r3, [pc, #108]	; (84bc <tc3_process+0x2c0>)
    8450:	681b      	ldr	r3, [r3, #0]
    8452:	1c5a      	adds	r2, r3, #1
    8454:	4b19      	ldr	r3, [pc, #100]	; (84bc <tc3_process+0x2c0>)
    8456:	601a      	str	r2, [r3, #0]
    8458:	4b19      	ldr	r3, [pc, #100]	; (84c0 <tc3_process+0x2c4>)
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	2b00      	cmp	r3, #0
    845e:	d004      	beq.n	846a <tc3_process+0x26e>
    8460:	4b17      	ldr	r3, [pc, #92]	; (84c0 <tc3_process+0x2c4>)
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	1e5a      	subs	r2, r3, #1
    8466:	4b16      	ldr	r3, [pc, #88]	; (84c0 <tc3_process+0x2c4>)
    8468:	601a      	str	r2, [r3, #0]
    846a:	4b16      	ldr	r3, [pc, #88]	; (84c4 <tc3_process+0x2c8>)
    846c:	4798      	blx	r3
		
		tc3_cnt=0;		
    846e:	4b03      	ldr	r3, [pc, #12]	; (847c <tc3_process+0x280>)
    8470:	2200      	movs	r2, #0
    8472:	601a      	str	r2, [r3, #0]
    8474:	e000      	b.n	8478 <tc3_process+0x27c>
		if(!tc3_cnt) {return;}
    8476:	46c0      	nop			; (mov r8, r8)
		
	}
    8478:	46bd      	mov	sp, r7
    847a:	bdb0      	pop	{r4, r5, r7, pc}
    847c:	2000046c 	.word	0x2000046c
    8480:	200031fc 	.word	0x200031fc
    8484:	200005cc 	.word	0x200005cc
    8488:	000005e3 	.word	0x000005e3
    848c:	000005e4 	.word	0x000005e4
    8490:	00000bc8 	.word	0x00000bc8
    8494:	00000bc9 	.word	0x00000bc9
    8498:	000011ad 	.word	0x000011ad
    849c:	000011ae 	.word	0x000011ae
    84a0:	00001792 	.word	0x00001792
    84a4:	00001793 	.word	0x00001793
    84a8:	00001d77 	.word	0x00001d77
    84ac:	00001d78 	.word	0x00001d78
    84b0:	20000470 	.word	0x20000470
    84b4:	20000478 	.word	0x20000478
    84b8:	0000270f 	.word	0x0000270f
    84bc:	2000047c 	.word	0x2000047c
    84c0:	20000474 	.word	0x20000474
    84c4:	00006eed 	.word	0x00006eed

000084c8 <__NVIC_EnableIRQ>:
{
    84c8:	b580      	push	{r7, lr}
    84ca:	b082      	sub	sp, #8
    84cc:	af00      	add	r7, sp, #0
    84ce:	0002      	movs	r2, r0
    84d0:	1dfb      	adds	r3, r7, #7
    84d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	2b7f      	cmp	r3, #127	; 0x7f
    84da:	d809      	bhi.n	84f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    84dc:	4b06      	ldr	r3, [pc, #24]	; (84f8 <__NVIC_EnableIRQ+0x30>)
    84de:	1dfa      	adds	r2, r7, #7
    84e0:	7812      	ldrb	r2, [r2, #0]
    84e2:	0011      	movs	r1, r2
    84e4:	221f      	movs	r2, #31
    84e6:	400a      	ands	r2, r1
    84e8:	2101      	movs	r1, #1
    84ea:	4091      	lsls	r1, r2
    84ec:	000a      	movs	r2, r1
    84ee:	601a      	str	r2, [r3, #0]
}
    84f0:	46c0      	nop			; (mov r8, r8)
    84f2:	46bd      	mov	sp, r7
    84f4:	b002      	add	sp, #8
    84f6:	bd80      	pop	{r7, pc}
    84f8:	e000e100 	.word	0xe000e100

000084fc <__NVIC_DisableIRQ>:
{
    84fc:	b580      	push	{r7, lr}
    84fe:	b082      	sub	sp, #8
    8500:	af00      	add	r7, sp, #0
    8502:	0002      	movs	r2, r0
    8504:	1dfb      	adds	r3, r7, #7
    8506:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8508:	1dfb      	adds	r3, r7, #7
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	2b7f      	cmp	r3, #127	; 0x7f
    850e:	d80e      	bhi.n	852e <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8510:	4909      	ldr	r1, [pc, #36]	; (8538 <__NVIC_DisableIRQ+0x3c>)
    8512:	1dfb      	adds	r3, r7, #7
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	001a      	movs	r2, r3
    8518:	231f      	movs	r3, #31
    851a:	4013      	ands	r3, r2
    851c:	2201      	movs	r2, #1
    851e:	409a      	lsls	r2, r3
    8520:	0013      	movs	r3, r2
    8522:	2280      	movs	r2, #128	; 0x80
    8524:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    8526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    852a:	f3bf 8f6f 	isb	sy
}
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	46bd      	mov	sp, r7
    8532:	b002      	add	sp, #8
    8534:	bd80      	pop	{r7, pc}
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	e000e100 	.word	0xe000e100

0000853c <__NVIC_SetPriority>:
{
    853c:	b5b0      	push	{r4, r5, r7, lr}
    853e:	b082      	sub	sp, #8
    8540:	af00      	add	r7, sp, #0
    8542:	0002      	movs	r2, r0
    8544:	6039      	str	r1, [r7, #0]
    8546:	1dfb      	adds	r3, r7, #7
    8548:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    854a:	1dfb      	adds	r3, r7, #7
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	2b7f      	cmp	r3, #127	; 0x7f
    8550:	d828      	bhi.n	85a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8552:	4c2f      	ldr	r4, [pc, #188]	; (8610 <__NVIC_SetPriority+0xd4>)
    8554:	1dfb      	adds	r3, r7, #7
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	b25b      	sxtb	r3, r3
    855a:	089b      	lsrs	r3, r3, #2
    855c:	492c      	ldr	r1, [pc, #176]	; (8610 <__NVIC_SetPriority+0xd4>)
    855e:	1dfa      	adds	r2, r7, #7
    8560:	7812      	ldrb	r2, [r2, #0]
    8562:	b252      	sxtb	r2, r2
    8564:	0892      	lsrs	r2, r2, #2
    8566:	32c0      	adds	r2, #192	; 0xc0
    8568:	0092      	lsls	r2, r2, #2
    856a:	5852      	ldr	r2, [r2, r1]
    856c:	1df9      	adds	r1, r7, #7
    856e:	7809      	ldrb	r1, [r1, #0]
    8570:	0008      	movs	r0, r1
    8572:	2103      	movs	r1, #3
    8574:	4001      	ands	r1, r0
    8576:	00c9      	lsls	r1, r1, #3
    8578:	20ff      	movs	r0, #255	; 0xff
    857a:	4088      	lsls	r0, r1
    857c:	0001      	movs	r1, r0
    857e:	43c9      	mvns	r1, r1
    8580:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    8582:	683a      	ldr	r2, [r7, #0]
    8584:	0192      	lsls	r2, r2, #6
    8586:	20ff      	movs	r0, #255	; 0xff
    8588:	4010      	ands	r0, r2
    858a:	1dfa      	adds	r2, r7, #7
    858c:	7812      	ldrb	r2, [r2, #0]
    858e:	0015      	movs	r5, r2
    8590:	2203      	movs	r2, #3
    8592:	402a      	ands	r2, r5
    8594:	00d2      	lsls	r2, r2, #3
    8596:	4090      	lsls	r0, r2
    8598:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    859a:	430a      	orrs	r2, r1
    859c:	33c0      	adds	r3, #192	; 0xc0
    859e:	009b      	lsls	r3, r3, #2
    85a0:	511a      	str	r2, [r3, r4]
}
    85a2:	e031      	b.n	8608 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85a4:	4c1b      	ldr	r4, [pc, #108]	; (8614 <__NVIC_SetPriority+0xd8>)
    85a6:	1dfb      	adds	r3, r7, #7
    85a8:	781b      	ldrb	r3, [r3, #0]
    85aa:	001a      	movs	r2, r3
    85ac:	230f      	movs	r3, #15
    85ae:	4013      	ands	r3, r2
    85b0:	3b08      	subs	r3, #8
    85b2:	0899      	lsrs	r1, r3, #2
    85b4:	4a17      	ldr	r2, [pc, #92]	; (8614 <__NVIC_SetPriority+0xd8>)
    85b6:	1dfb      	adds	r3, r7, #7
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	0018      	movs	r0, r3
    85bc:	230f      	movs	r3, #15
    85be:	4003      	ands	r3, r0
    85c0:	3b08      	subs	r3, #8
    85c2:	089b      	lsrs	r3, r3, #2
    85c4:	3306      	adds	r3, #6
    85c6:	009b      	lsls	r3, r3, #2
    85c8:	18d3      	adds	r3, r2, r3
    85ca:	3304      	adds	r3, #4
    85cc:	681b      	ldr	r3, [r3, #0]
    85ce:	1dfa      	adds	r2, r7, #7
    85d0:	7812      	ldrb	r2, [r2, #0]
    85d2:	0010      	movs	r0, r2
    85d4:	2203      	movs	r2, #3
    85d6:	4002      	ands	r2, r0
    85d8:	00d2      	lsls	r2, r2, #3
    85da:	20ff      	movs	r0, #255	; 0xff
    85dc:	4090      	lsls	r0, r2
    85de:	0002      	movs	r2, r0
    85e0:	43d2      	mvns	r2, r2
    85e2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    85e4:	683b      	ldr	r3, [r7, #0]
    85e6:	019b      	lsls	r3, r3, #6
    85e8:	20ff      	movs	r0, #255	; 0xff
    85ea:	4018      	ands	r0, r3
    85ec:	1dfb      	adds	r3, r7, #7
    85ee:	781b      	ldrb	r3, [r3, #0]
    85f0:	001d      	movs	r5, r3
    85f2:	2303      	movs	r3, #3
    85f4:	402b      	ands	r3, r5
    85f6:	00db      	lsls	r3, r3, #3
    85f8:	4098      	lsls	r0, r3
    85fa:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85fc:	431a      	orrs	r2, r3
    85fe:	1d8b      	adds	r3, r1, #6
    8600:	009b      	lsls	r3, r3, #2
    8602:	18e3      	adds	r3, r4, r3
    8604:	3304      	adds	r3, #4
    8606:	601a      	str	r2, [r3, #0]
}
    8608:	46c0      	nop			; (mov r8, r8)
    860a:	46bd      	mov	sp, r7
    860c:	b002      	add	sp, #8
    860e:	bdb0      	pop	{r4, r5, r7, pc}
    8610:	e000e100 	.word	0xe000e100
    8614:	e000ed00 	.word	0xe000ed00

00008618 <usart_init>:
#include "def.h"

volatile USART port[4];

void usart_init(void)	{for(BYTE i= 0; i < 4; i++) {init(i);}}
    8618:	b580      	push	{r7, lr}
    861a:	b082      	sub	sp, #8
    861c:	af00      	add	r7, sp, #0
    861e:	1dfb      	adds	r3, r7, #7
    8620:	2200      	movs	r2, #0
    8622:	701a      	strb	r2, [r3, #0]
    8624:	e009      	b.n	863a <usart_init+0x22>
    8626:	1dfb      	adds	r3, r7, #7
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	0018      	movs	r0, r3
    862c:	f000 f80d 	bl	864a <init>
    8630:	1dfb      	adds	r3, r7, #7
    8632:	781a      	ldrb	r2, [r3, #0]
    8634:	1dfb      	adds	r3, r7, #7
    8636:	3201      	adds	r2, #1
    8638:	701a      	strb	r2, [r3, #0]
    863a:	1dfb      	adds	r3, r7, #7
    863c:	781b      	ldrb	r3, [r3, #0]
    863e:	2b03      	cmp	r3, #3
    8640:	d9f1      	bls.n	8626 <usart_init+0xe>
    8642:	46c0      	nop			; (mov r8, r8)
    8644:	46bd      	mov	sp, r7
    8646:	b002      	add	sp, #8
    8648:	bd80      	pop	{r7, pc}

0000864a <init>:
	
void init(BYTE n_port)
{
    864a:	b5b0      	push	{r4, r5, r7, lr}
    864c:	b088      	sub	sp, #32
    864e:	af00      	add	r7, sp, #0
    8650:	0002      	movs	r2, r0
    8652:	1dfb      	adds	r3, r7, #7
    8654:	701a      	strb	r2, [r3, #0]
	double tout = 0;
    8656:	2300      	movs	r3, #0
    8658:	2400      	movs	r4, #0
    865a:	613b      	str	r3, [r7, #16]
    865c:	617c      	str	r4, [r7, #20]
	double bsize = 0;
    865e:	2300      	movs	r3, #0
    8660:	2400      	movs	r4, #0
    8662:	60bb      	str	r3, [r7, #8]
    8664:	60fc      	str	r4, [r7, #12]
	DWORD val = 0;
    8666:	2300      	movs	r3, #0
    8668:	61fb      	str	r3, [r7, #28]
	bsize = 9;
    866a:	2300      	movs	r3, #0
    866c:	4cef      	ldr	r4, [pc, #956]	; (8a2c <init+0x3e2>)
    866e:	60bb      	str	r3, [r7, #8]
    8670:	60fc      	str	r4, [r7, #12]

	switch(n_port)
    8672:	1dfb      	adds	r3, r7, #7
    8674:	781b      	ldrb	r3, [r3, #0]
    8676:	2b01      	cmp	r3, #1
    8678:	d02f      	beq.n	86da <init+0x90>
    867a:	dc03      	bgt.n	8684 <init+0x3a>
    867c:	2b00      	cmp	r3, #0
    867e:	d007      	beq.n	8690 <init+0x46>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
			port[n_port].sercom = SERCOM1;
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
			port[n_port].irqn_sercom = SERCOM1_IRQn;
		break;
		default: /*error*/ return;
    8680:	f000 fbe7 	bl	8e52 <init+0x808>
	switch(n_port)
    8684:	2b02      	cmp	r3, #2
    8686:	d04d      	beq.n	8724 <init+0xda>
    8688:	2b03      	cmp	r3, #3
    868a:	d070      	beq.n	876e <init+0x124>
		default: /*error*/ return;
    868c:	f000 fbe1 	bl	8e52 <init+0x808>
			PM->APBCMASK.bit.SERCOM3_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8690:	4ae7      	ldr	r2, [pc, #924]	; (8a30 <init+0x3e6>)
    8692:	6a13      	ldr	r3, [r2, #32]
    8694:	2120      	movs	r1, #32
    8696:	430b      	orrs	r3, r1
    8698:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM3;
    869a:	1dfb      	adds	r3, r7, #7
    869c:	781a      	ldrb	r2, [r3, #0]
    869e:	49e5      	ldr	r1, [pc, #916]	; (8a34 <init+0x3ea>)
    86a0:	0013      	movs	r3, r2
    86a2:	00db      	lsls	r3, r3, #3
    86a4:	189b      	adds	r3, r3, r2
    86a6:	019b      	lsls	r3, r3, #6
    86a8:	4ae3      	ldr	r2, [pc, #908]	; (8a38 <init+0x3ee>)
    86aa:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM3_CORE;
    86ac:	1dfb      	adds	r3, r7, #7
    86ae:	781a      	ldrb	r2, [r3, #0]
    86b0:	49e0      	ldr	r1, [pc, #896]	; (8a34 <init+0x3ea>)
    86b2:	0013      	movs	r3, r2
    86b4:	00db      	lsls	r3, r3, #3
    86b6:	189b      	adds	r3, r3, r2
    86b8:	019b      	lsls	r3, r3, #6
    86ba:	18cb      	adds	r3, r1, r3
    86bc:	3304      	adds	r3, #4
    86be:	2217      	movs	r2, #23
    86c0:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM3_IRQn;
    86c2:	1dfb      	adds	r3, r7, #7
    86c4:	781a      	ldrb	r2, [r3, #0]
    86c6:	49db      	ldr	r1, [pc, #876]	; (8a34 <init+0x3ea>)
    86c8:	0013      	movs	r3, r2
    86ca:	00db      	lsls	r3, r3, #3
    86cc:	189b      	adds	r3, r3, r2
    86ce:	019b      	lsls	r3, r3, #6
    86d0:	18cb      	adds	r3, r1, r3
    86d2:	3308      	adds	r3, #8
    86d4:	220c      	movs	r2, #12
    86d6:	701a      	strb	r2, [r3, #0]
		break;
    86d8:	e06e      	b.n	87b8 <init+0x16e>
			PM->APBCMASK.bit.SERCOM2_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    86da:	4ad5      	ldr	r2, [pc, #852]	; (8a30 <init+0x3e6>)
    86dc:	6a13      	ldr	r3, [r2, #32]
    86de:	2110      	movs	r1, #16
    86e0:	430b      	orrs	r3, r1
    86e2:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM2;
    86e4:	1dfb      	adds	r3, r7, #7
    86e6:	781a      	ldrb	r2, [r3, #0]
    86e8:	49d2      	ldr	r1, [pc, #840]	; (8a34 <init+0x3ea>)
    86ea:	0013      	movs	r3, r2
    86ec:	00db      	lsls	r3, r3, #3
    86ee:	189b      	adds	r3, r3, r2
    86f0:	019b      	lsls	r3, r3, #6
    86f2:	4ad2      	ldr	r2, [pc, #840]	; (8a3c <init+0x3f2>)
    86f4:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM2_CORE;
    86f6:	1dfb      	adds	r3, r7, #7
    86f8:	781a      	ldrb	r2, [r3, #0]
    86fa:	49ce      	ldr	r1, [pc, #824]	; (8a34 <init+0x3ea>)
    86fc:	0013      	movs	r3, r2
    86fe:	00db      	lsls	r3, r3, #3
    8700:	189b      	adds	r3, r3, r2
    8702:	019b      	lsls	r3, r3, #6
    8704:	18cb      	adds	r3, r1, r3
    8706:	3304      	adds	r3, #4
    8708:	2216      	movs	r2, #22
    870a:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM2_IRQn;
    870c:	1dfb      	adds	r3, r7, #7
    870e:	781a      	ldrb	r2, [r3, #0]
    8710:	49c8      	ldr	r1, [pc, #800]	; (8a34 <init+0x3ea>)
    8712:	0013      	movs	r3, r2
    8714:	00db      	lsls	r3, r3, #3
    8716:	189b      	adds	r3, r3, r2
    8718:	019b      	lsls	r3, r3, #6
    871a:	18cb      	adds	r3, r1, r3
    871c:	3308      	adds	r3, #8
    871e:	220b      	movs	r2, #11
    8720:	701a      	strb	r2, [r3, #0]
		break;
    8722:	e049      	b.n	87b8 <init+0x16e>
			PM->APBCMASK.bit.SERCOM0_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8724:	4ac2      	ldr	r2, [pc, #776]	; (8a30 <init+0x3e6>)
    8726:	6a13      	ldr	r3, [r2, #32]
    8728:	2104      	movs	r1, #4
    872a:	430b      	orrs	r3, r1
    872c:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM0;
    872e:	1dfb      	adds	r3, r7, #7
    8730:	781a      	ldrb	r2, [r3, #0]
    8732:	49c0      	ldr	r1, [pc, #768]	; (8a34 <init+0x3ea>)
    8734:	0013      	movs	r3, r2
    8736:	00db      	lsls	r3, r3, #3
    8738:	189b      	adds	r3, r3, r2
    873a:	019b      	lsls	r3, r3, #6
    873c:	4ac0      	ldr	r2, [pc, #768]	; (8a40 <init+0x3f6>)
    873e:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM0_CORE;
    8740:	1dfb      	adds	r3, r7, #7
    8742:	781a      	ldrb	r2, [r3, #0]
    8744:	49bb      	ldr	r1, [pc, #748]	; (8a34 <init+0x3ea>)
    8746:	0013      	movs	r3, r2
    8748:	00db      	lsls	r3, r3, #3
    874a:	189b      	adds	r3, r3, r2
    874c:	019b      	lsls	r3, r3, #6
    874e:	18cb      	adds	r3, r1, r3
    8750:	3304      	adds	r3, #4
    8752:	2214      	movs	r2, #20
    8754:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM0_IRQn;
    8756:	1dfb      	adds	r3, r7, #7
    8758:	781a      	ldrb	r2, [r3, #0]
    875a:	49b6      	ldr	r1, [pc, #728]	; (8a34 <init+0x3ea>)
    875c:	0013      	movs	r3, r2
    875e:	00db      	lsls	r3, r3, #3
    8760:	189b      	adds	r3, r3, r2
    8762:	019b      	lsls	r3, r3, #6
    8764:	18cb      	adds	r3, r1, r3
    8766:	3308      	adds	r3, #8
    8768:	2209      	movs	r2, #9
    876a:	701a      	strb	r2, [r3, #0]
		break;
    876c:	e024      	b.n	87b8 <init+0x16e>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    876e:	4ab0      	ldr	r2, [pc, #704]	; (8a30 <init+0x3e6>)
    8770:	6a13      	ldr	r3, [r2, #32]
    8772:	2108      	movs	r1, #8
    8774:	430b      	orrs	r3, r1
    8776:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM1;
    8778:	1dfb      	adds	r3, r7, #7
    877a:	781a      	ldrb	r2, [r3, #0]
    877c:	49ad      	ldr	r1, [pc, #692]	; (8a34 <init+0x3ea>)
    877e:	0013      	movs	r3, r2
    8780:	00db      	lsls	r3, r3, #3
    8782:	189b      	adds	r3, r3, r2
    8784:	019b      	lsls	r3, r3, #6
    8786:	4aaf      	ldr	r2, [pc, #700]	; (8a44 <init+0x3fa>)
    8788:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
    878a:	1dfb      	adds	r3, r7, #7
    878c:	781a      	ldrb	r2, [r3, #0]
    878e:	49a9      	ldr	r1, [pc, #676]	; (8a34 <init+0x3ea>)
    8790:	0013      	movs	r3, r2
    8792:	00db      	lsls	r3, r3, #3
    8794:	189b      	adds	r3, r3, r2
    8796:	019b      	lsls	r3, r3, #6
    8798:	18cb      	adds	r3, r1, r3
    879a:	3304      	adds	r3, #4
    879c:	2215      	movs	r2, #21
    879e:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM1_IRQn;
    87a0:	1dfb      	adds	r3, r7, #7
    87a2:	781a      	ldrb	r2, [r3, #0]
    87a4:	49a3      	ldr	r1, [pc, #652]	; (8a34 <init+0x3ea>)
    87a6:	0013      	movs	r3, r2
    87a8:	00db      	lsls	r3, r3, #3
    87aa:	189b      	adds	r3, r3, r2
    87ac:	019b      	lsls	r3, r3, #6
    87ae:	18cb      	adds	r3, r1, r3
    87b0:	3308      	adds	r3, #8
    87b2:	220a      	movs	r2, #10
    87b4:	701a      	strb	r2, [r3, #0]
		break;
    87b6:	46c0      	nop			; (mov r8, r8)
	}
	
	PM->APBCSEL.bit.APBCDIV   = 0x00;
    87b8:	4a9d      	ldr	r2, [pc, #628]	; (8a30 <init+0x3e6>)
    87ba:	7ad3      	ldrb	r3, [r2, #11]
    87bc:	2107      	movs	r1, #7
    87be:	438b      	bics	r3, r1
    87c0:	72d3      	strb	r3, [r2, #11]
	GCLK->CLKCTRL.bit.WRTLOCK = 0x00;
    87c2:	4aa1      	ldr	r2, [pc, #644]	; (8a48 <init+0x3fe>)
    87c4:	8853      	ldrh	r3, [r2, #2]
    87c6:	045b      	lsls	r3, r3, #17
    87c8:	0c5b      	lsrs	r3, r3, #17
    87ca:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.ID      = port[n_port].gclk_sercom; // Bits 5:0  - ID: Generic Clock Selection ID (0x14 - SERCOM0_CORE)
    87cc:	4a9e      	ldr	r2, [pc, #632]	; (8a48 <init+0x3fe>)
    87ce:	1dfb      	adds	r3, r7, #7
    87d0:	7819      	ldrb	r1, [r3, #0]
    87d2:	4898      	ldr	r0, [pc, #608]	; (8a34 <init+0x3ea>)
    87d4:	000b      	movs	r3, r1
    87d6:	00db      	lsls	r3, r3, #3
    87d8:	185b      	adds	r3, r3, r1
    87da:	019b      	lsls	r3, r3, #6
    87dc:	18c3      	adds	r3, r0, r3
    87de:	3304      	adds	r3, #4
    87e0:	681b      	ldr	r3, [r3, #0]
    87e2:	b2db      	uxtb	r3, r3
    87e4:	1c19      	adds	r1, r3, #0
    87e6:	233f      	movs	r3, #63	; 0x3f
    87e8:	400b      	ands	r3, r1
    87ea:	b2d9      	uxtb	r1, r3
    87ec:	8853      	ldrh	r3, [r2, #2]
    87ee:	1c08      	adds	r0, r1, #0
    87f0:	213f      	movs	r1, #63	; 0x3f
    87f2:	4008      	ands	r0, r1
    87f4:	213f      	movs	r1, #63	; 0x3f
    87f6:	438b      	bics	r3, r1
    87f8:	1c19      	adds	r1, r3, #0
    87fa:	1c03      	adds	r3, r0, #0
    87fc:	430b      	orrs	r3, r1
    87fe:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN     = 0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    8800:	4a91      	ldr	r2, [pc, #580]	; (8a48 <init+0x3fe>)
    8802:	8853      	ldrh	r3, [r2, #2]
    8804:	4991      	ldr	r1, [pc, #580]	; (8a4c <init+0x402>)
    8806:	400b      	ands	r3, r1
    8808:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN   = 0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    880a:	4a8f      	ldr	r2, [pc, #572]	; (8a48 <init+0x3fe>)
    880c:	8853      	ldrh	r3, [r2, #2]
    880e:	2180      	movs	r1, #128	; 0x80
    8810:	01c9      	lsls	r1, r1, #7
    8812:	430b      	orrs	r3, r1
    8814:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.ENABLE = 0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    8816:	1dfb      	adds	r3, r7, #7
    8818:	781a      	ldrb	r2, [r3, #0]
    881a:	4986      	ldr	r1, [pc, #536]	; (8a34 <init+0x3ea>)
    881c:	0013      	movs	r3, r2
    881e:	00db      	lsls	r3, r3, #3
    8820:	189b      	adds	r3, r3, r2
    8822:	019b      	lsls	r3, r3, #6
    8824:	585b      	ldr	r3, [r3, r1]
    8826:	681a      	ldr	r2, [r3, #0]
    8828:	2102      	movs	r1, #2
    882a:	438a      	bics	r2, r1
    882c:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.ENABLE) { ; }
    882e:	46c0      	nop			; (mov r8, r8)
    8830:	1dfb      	adds	r3, r7, #7
    8832:	781a      	ldrb	r2, [r3, #0]
    8834:	497f      	ldr	r1, [pc, #508]	; (8a34 <init+0x3ea>)
    8836:	0013      	movs	r3, r2
    8838:	00db      	lsls	r3, r3, #3
    883a:	189b      	adds	r3, r3, r2
    883c:	019b      	lsls	r3, r3, #6
    883e:	585b      	ldr	r3, [r3, r1]
    8840:	69db      	ldr	r3, [r3, #28]
    8842:	079b      	lsls	r3, r3, #30
    8844:	0fdb      	lsrs	r3, r3, #31
    8846:	b2db      	uxtb	r3, r3
    8848:	2b00      	cmp	r3, #0
    884a:	d1f1      	bne.n	8830 <init+0x1e6>

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.SWRST   =0x01; //Bit0-SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    884c:	1dfb      	adds	r3, r7, #7
    884e:	781a      	ldrb	r2, [r3, #0]
    8850:	4978      	ldr	r1, [pc, #480]	; (8a34 <init+0x3ea>)
    8852:	0013      	movs	r3, r2
    8854:	00db      	lsls	r3, r3, #3
    8856:	189b      	adds	r3, r3, r2
    8858:	019b      	lsls	r3, r3, #6
    885a:	585b      	ldr	r3, [r3, r1]
    885c:	681a      	ldr	r2, [r3, #0]
    885e:	2101      	movs	r1, #1
    8860:	430a      	orrs	r2, r1
    8862:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    8864:	46c0      	nop			; (mov r8, r8)
    8866:	1dfb      	adds	r3, r7, #7
    8868:	781a      	ldrb	r2, [r3, #0]
    886a:	4972      	ldr	r1, [pc, #456]	; (8a34 <init+0x3ea>)
    886c:	0013      	movs	r3, r2
    886e:	00db      	lsls	r3, r3, #3
    8870:	189b      	adds	r3, r3, r2
    8872:	019b      	lsls	r3, r3, #6
    8874:	585b      	ldr	r3, [r3, r1]
    8876:	69db      	ldr	r3, [r3, #28]
    8878:	07db      	lsls	r3, r3, #31
    887a:	0fdb      	lsrs	r3, r3, #31
    887c:	b2db      	uxtb	r3, r3
    887e:	2b00      	cmp	r3, #0
    8880:	d1f1      	bne.n	8866 <init+0x21c>

	port[n_port].sercom->USART.CTRLA.bit.DORD    =0x01;									// Bit  30    - DORD: Data Order (1: LSB is transmitted first.)
    8882:	1dfb      	adds	r3, r7, #7
    8884:	781a      	ldrb	r2, [r3, #0]
    8886:	496b      	ldr	r1, [pc, #428]	; (8a34 <init+0x3ea>)
    8888:	0013      	movs	r3, r2
    888a:	00db      	lsls	r3, r3, #3
    888c:	189b      	adds	r3, r3, r2
    888e:	019b      	lsls	r3, r3, #6
    8890:	585b      	ldr	r3, [r3, r1]
    8892:	681a      	ldr	r2, [r3, #0]
    8894:	2180      	movs	r1, #128	; 0x80
    8896:	05c9      	lsls	r1, r1, #23
    8898:	430a      	orrs	r2, r1
    889a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CPOL    =0x00;									// Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    889c:	1dfb      	adds	r3, r7, #7
    889e:	781a      	ldrb	r2, [r3, #0]
    88a0:	4964      	ldr	r1, [pc, #400]	; (8a34 <init+0x3ea>)
    88a2:	0013      	movs	r3, r2
    88a4:	00db      	lsls	r3, r3, #3
    88a6:	189b      	adds	r3, r3, r2
    88a8:	019b      	lsls	r3, r3, #6
    88aa:	585b      	ldr	r3, [r3, r1]
    88ac:	681a      	ldr	r2, [r3, #0]
    88ae:	4968      	ldr	r1, [pc, #416]	; (8a50 <init+0x406>)
    88b0:	400a      	ands	r2, r1
    88b2:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CMODE   =0x00;									// Bit  28    - CMODE: Communication Mode (0: Asynchronous communication.)
    88b4:	1dfb      	adds	r3, r7, #7
    88b6:	781a      	ldrb	r2, [r3, #0]
    88b8:	495e      	ldr	r1, [pc, #376]	; (8a34 <init+0x3ea>)
    88ba:	0013      	movs	r3, r2
    88bc:	00db      	lsls	r3, r3, #3
    88be:	189b      	adds	r3, r3, r2
    88c0:	019b      	lsls	r3, r3, #6
    88c2:	585b      	ldr	r3, [r3, r1]
    88c4:	681a      	ldr	r2, [r3, #0]
    88c6:	4963      	ldr	r1, [pc, #396]	; (8a54 <init+0x40a>)
    88c8:	400a      	ands	r2, r1
    88ca:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPA   =0x00;									// Bits 23:22 - SAMPA[1:0]: Sample Adjustment (0: 3-4-5)
    88cc:	1dfb      	adds	r3, r7, #7
    88ce:	781a      	ldrb	r2, [r3, #0]
    88d0:	4958      	ldr	r1, [pc, #352]	; (8a34 <init+0x3ea>)
    88d2:	0013      	movs	r3, r2
    88d4:	00db      	lsls	r3, r3, #3
    88d6:	189b      	adds	r3, r3, r2
    88d8:	019b      	lsls	r3, r3, #6
    88da:	585b      	ldr	r3, [r3, r1]
    88dc:	681a      	ldr	r2, [r3, #0]
    88de:	495e      	ldr	r1, [pc, #376]	; (8a58 <init+0x40e>)
    88e0:	400a      	ands	r2, r1
    88e2:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPR   =0x00;									// Bits 15:13 - SAMPR[2:0]: Sample Rate (2: 8x over-sampling using arithmetic baud rate generation.)
    88e4:	1dfb      	adds	r3, r7, #7
    88e6:	781a      	ldrb	r2, [r3, #0]
    88e8:	4952      	ldr	r1, [pc, #328]	; (8a34 <init+0x3ea>)
    88ea:	0013      	movs	r3, r2
    88ec:	00db      	lsls	r3, r3, #3
    88ee:	189b      	adds	r3, r3, r2
    88f0:	019b      	lsls	r3, r3, #6
    88f2:	585b      	ldr	r3, [r3, r1]
    88f4:	681a      	ldr	r2, [r3, #0]
    88f6:	4959      	ldr	r1, [pc, #356]	; (8a5c <init+0x412>)
    88f8:	400a      	ands	r2, r1
    88fa:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.IBON    =0x00;									// Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    88fc:	1dfb      	adds	r3, r7, #7
    88fe:	781a      	ldrb	r2, [r3, #0]
    8900:	494c      	ldr	r1, [pc, #304]	; (8a34 <init+0x3ea>)
    8902:	0013      	movs	r3, r2
    8904:	00db      	lsls	r3, r3, #3
    8906:	189b      	adds	r3, r3, r2
    8908:	019b      	lsls	r3, r3, #6
    890a:	585b      	ldr	r3, [r3, r1]
    890c:	681a      	ldr	r2, [r3, #0]
    890e:	4954      	ldr	r1, [pc, #336]	; (8a60 <init+0x416>)
    8910:	400a      	ands	r2, r1
    8912:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RUNSTDBY=0x00;									// Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    8914:	1dfb      	adds	r3, r7, #7
    8916:	781a      	ldrb	r2, [r3, #0]
    8918:	4946      	ldr	r1, [pc, #280]	; (8a34 <init+0x3ea>)
    891a:	0013      	movs	r3, r2
    891c:	00db      	lsls	r3, r3, #3
    891e:	189b      	adds	r3, r3, r2
    8920:	019b      	lsls	r3, r3, #6
    8922:	585b      	ldr	r3, [r3, r1]
    8924:	681a      	ldr	r2, [r3, #0]
    8926:	2180      	movs	r1, #128	; 0x80
    8928:	438a      	bics	r2, r1
    892a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.MODE    =0x01;									// Bits 4:2   - MODE: Operating Mode (1: USART with internal clock.)
    892c:	1dfb      	adds	r3, r7, #7
    892e:	781a      	ldrb	r2, [r3, #0]
    8930:	4940      	ldr	r1, [pc, #256]	; (8a34 <init+0x3ea>)
    8932:	0013      	movs	r3, r2
    8934:	00db      	lsls	r3, r3, #3
    8936:	189b      	adds	r3, r3, r2
    8938:	019b      	lsls	r3, r3, #6
    893a:	585b      	ldr	r3, [r3, r1]
    893c:	681a      	ldr	r2, [r3, #0]
    893e:	211c      	movs	r1, #28
    8940:	438a      	bics	r2, r1
    8942:	2104      	movs	r1, #4
    8944:	430a      	orrs	r2, r1
    8946:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.TXPO    =0x02;									// Bits 17:16 - TXPO: Transmit Data Pinout (2: TX->PAD[0], RTS->PAD[2])
    8948:	1dfb      	adds	r3, r7, #7
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	4939      	ldr	r1, [pc, #228]	; (8a34 <init+0x3ea>)
    894e:	0013      	movs	r3, r2
    8950:	00db      	lsls	r3, r3, #3
    8952:	189b      	adds	r3, r3, r2
    8954:	019b      	lsls	r3, r3, #6
    8956:	585b      	ldr	r3, [r3, r1]
    8958:	681a      	ldr	r2, [r3, #0]
    895a:	4942      	ldr	r1, [pc, #264]	; (8a64 <init+0x41a>)
    895c:	400a      	ands	r2, r1
    895e:	2180      	movs	r1, #128	; 0x80
    8960:	0289      	lsls	r1, r1, #10
    8962:	430a      	orrs	r2, r1
    8964:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RXPO    =0x01;									// Bits 21:20 - RXPO: Receive Data Pinout (1: RX->PAD[1])
    8966:	1dfb      	adds	r3, r7, #7
    8968:	781a      	ldrb	r2, [r3, #0]
    896a:	4932      	ldr	r1, [pc, #200]	; (8a34 <init+0x3ea>)
    896c:	0013      	movs	r3, r2
    896e:	00db      	lsls	r3, r3, #3
    8970:	189b      	adds	r3, r3, r2
    8972:	019b      	lsls	r3, r3, #6
    8974:	585b      	ldr	r3, [r3, r1]
    8976:	681a      	ldr	r2, [r3, #0]
    8978:	493b      	ldr	r1, [pc, #236]	; (8a68 <init+0x41e>)
    897a:	400a      	ands	r2, r1
    897c:	2180      	movs	r1, #128	; 0x80
    897e:	0349      	lsls	r1, r1, #13
    8980:	430a      	orrs	r2, r1
    8982:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLB.bit.ENC     =0x00;									// Bit  10    - ENC: Encoding Format (0: Data is not encoded.)
    8984:	1dfb      	adds	r3, r7, #7
    8986:	781a      	ldrb	r2, [r3, #0]
    8988:	492a      	ldr	r1, [pc, #168]	; (8a34 <init+0x3ea>)
    898a:	0013      	movs	r3, r2
    898c:	00db      	lsls	r3, r3, #3
    898e:	189b      	adds	r3, r3, r2
    8990:	019b      	lsls	r3, r3, #6
    8992:	585b      	ldr	r3, [r3, r1]
    8994:	685a      	ldr	r2, [r3, #4]
    8996:	4935      	ldr	r1, [pc, #212]	; (8a6c <init+0x422>)
    8998:	400a      	ands	r2, r1
    899a:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.SFDE    =0x01;									// Bit  9     - SFDE: Start of Frame Detection Enable (1: Start-of-frame detection enabled.)
    899c:	1dfb      	adds	r3, r7, #7
    899e:	781a      	ldrb	r2, [r3, #0]
    89a0:	4924      	ldr	r1, [pc, #144]	; (8a34 <init+0x3ea>)
    89a2:	0013      	movs	r3, r2
    89a4:	00db      	lsls	r3, r3, #3
    89a6:	189b      	adds	r3, r3, r2
    89a8:	019b      	lsls	r3, r3, #6
    89aa:	585b      	ldr	r3, [r3, r1]
    89ac:	685a      	ldr	r2, [r3, #4]
    89ae:	2180      	movs	r1, #128	; 0x80
    89b0:	0089      	lsls	r1, r1, #2
    89b2:	430a      	orrs	r2, r1
    89b4:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.COLDEN  =0x00;									// Bit  8     - COLDEN: Collision Detection Enable (0: Collision detection is not enabled.)
    89b6:	1dfb      	adds	r3, r7, #7
    89b8:	781a      	ldrb	r2, [r3, #0]
    89ba:	491e      	ldr	r1, [pc, #120]	; (8a34 <init+0x3ea>)
    89bc:	0013      	movs	r3, r2
    89be:	00db      	lsls	r3, r3, #3
    89c0:	189b      	adds	r3, r3, r2
    89c2:	019b      	lsls	r3, r3, #6
    89c4:	585b      	ldr	r3, [r3, r1]
    89c6:	685a      	ldr	r2, [r3, #4]
    89c8:	4925      	ldr	r1, [pc, #148]	; (8a60 <init+0x416>)
    89ca:	400a      	ands	r2, r1
    89cc:	605a      	str	r2, [r3, #4]
	

	//cfg settings
	//frame
	switch (cfg_1.sock_rs485[n_port].parity) 
    89ce:	1dfb      	adds	r3, r7, #7
    89d0:	781a      	ldrb	r2, [r3, #0]
    89d2:	4927      	ldr	r1, [pc, #156]	; (8a70 <init+0x426>)
    89d4:	2038      	movs	r0, #56	; 0x38
    89d6:	0013      	movs	r3, r2
    89d8:	005b      	lsls	r3, r3, #1
    89da:	189b      	adds	r3, r3, r2
    89dc:	009b      	lsls	r3, r3, #2
    89de:	189b      	adds	r3, r3, r2
    89e0:	18cb      	adds	r3, r1, r3
    89e2:	181b      	adds	r3, r3, r0
    89e4:	795b      	ldrb	r3, [r3, #5]
    89e6:	069b      	lsls	r3, r3, #26
    89e8:	0f9b      	lsrs	r3, r3, #30
    89ea:	b2db      	uxtb	r3, r3
    89ec:	2b01      	cmp	r3, #1
    89ee:	d045      	beq.n	8a7c <init+0x432>
    89f0:	2b02      	cmp	r3, #2
    89f2:	d160      	bne.n	8ab6 <init+0x46c>
	{
		case  PARITY_EVEN:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = EVEN; break;
    89f4:	1dfb      	adds	r3, r7, #7
    89f6:	781a      	ldrb	r2, [r3, #0]
    89f8:	490e      	ldr	r1, [pc, #56]	; (8a34 <init+0x3ea>)
    89fa:	0013      	movs	r3, r2
    89fc:	00db      	lsls	r3, r3, #3
    89fe:	189b      	adds	r3, r3, r2
    8a00:	019b      	lsls	r3, r3, #6
    8a02:	585b      	ldr	r3, [r3, r1]
    8a04:	681a      	ldr	r2, [r3, #0]
    8a06:	491b      	ldr	r1, [pc, #108]	; (8a74 <init+0x42a>)
    8a08:	400a      	ands	r2, r1
    8a0a:	2180      	movs	r1, #128	; 0x80
    8a0c:	0449      	lsls	r1, r1, #17
    8a0e:	430a      	orrs	r2, r1
    8a10:	601a      	str	r2, [r3, #0]
    8a12:	1dfb      	adds	r3, r7, #7
    8a14:	781a      	ldrb	r2, [r3, #0]
    8a16:	4907      	ldr	r1, [pc, #28]	; (8a34 <init+0x3ea>)
    8a18:	0013      	movs	r3, r2
    8a1a:	00db      	lsls	r3, r3, #3
    8a1c:	189b      	adds	r3, r3, r2
    8a1e:	019b      	lsls	r3, r3, #6
    8a20:	585b      	ldr	r3, [r3, r1]
    8a22:	685a      	ldr	r2, [r3, #4]
    8a24:	4914      	ldr	r1, [pc, #80]	; (8a78 <init+0x42e>)
    8a26:	400a      	ands	r2, r1
    8a28:	605a      	str	r2, [r3, #4]
    8a2a:	e051      	b.n	8ad0 <init+0x486>
    8a2c:	40220000 	.word	0x40220000
    8a30:	40000400 	.word	0x40000400
    8a34:	200031fc 	.word	0x200031fc
    8a38:	42001400 	.word	0x42001400
    8a3c:	42001000 	.word	0x42001000
    8a40:	42000800 	.word	0x42000800
    8a44:	42000c00 	.word	0x42000c00
    8a48:	40000c00 	.word	0x40000c00
    8a4c:	fffff0ff 	.word	0xfffff0ff
    8a50:	dfffffff 	.word	0xdfffffff
    8a54:	efffffff 	.word	0xefffffff
    8a58:	ff3fffff 	.word	0xff3fffff
    8a5c:	ffff1fff 	.word	0xffff1fff
    8a60:	fffffeff 	.word	0xfffffeff
    8a64:	fffcffff 	.word	0xfffcffff
    8a68:	ffcfffff 	.word	0xffcfffff
    8a6c:	fffffbff 	.word	0xfffffbff
    8a70:	20003dc8 	.word	0x20003dc8
    8a74:	f0ffffff 	.word	0xf0ffffff
    8a78:	ffffdfff 	.word	0xffffdfff
		case  PARITY_ODD:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = ODD; break;
    8a7c:	1dfb      	adds	r3, r7, #7
    8a7e:	781a      	ldrb	r2, [r3, #0]
    8a80:	4938      	ldr	r1, [pc, #224]	; (8b64 <init+0x51a>)
    8a82:	0013      	movs	r3, r2
    8a84:	00db      	lsls	r3, r3, #3
    8a86:	189b      	adds	r3, r3, r2
    8a88:	019b      	lsls	r3, r3, #6
    8a8a:	585b      	ldr	r3, [r3, r1]
    8a8c:	681a      	ldr	r2, [r3, #0]
    8a8e:	4936      	ldr	r1, [pc, #216]	; (8b68 <init+0x51e>)
    8a90:	400a      	ands	r2, r1
    8a92:	2180      	movs	r1, #128	; 0x80
    8a94:	0449      	lsls	r1, r1, #17
    8a96:	430a      	orrs	r2, r1
    8a98:	601a      	str	r2, [r3, #0]
    8a9a:	1dfb      	adds	r3, r7, #7
    8a9c:	781a      	ldrb	r2, [r3, #0]
    8a9e:	4931      	ldr	r1, [pc, #196]	; (8b64 <init+0x51a>)
    8aa0:	0013      	movs	r3, r2
    8aa2:	00db      	lsls	r3, r3, #3
    8aa4:	189b      	adds	r3, r3, r2
    8aa6:	019b      	lsls	r3, r3, #6
    8aa8:	585b      	ldr	r3, [r3, r1]
    8aaa:	685a      	ldr	r2, [r3, #4]
    8aac:	2180      	movs	r1, #128	; 0x80
    8aae:	0189      	lsls	r1, r1, #6
    8ab0:	430a      	orrs	r2, r1
    8ab2:	605a      	str	r2, [r3, #4]
    8ab4:	e00c      	b.n	8ad0 <init+0x486>
		default:			port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_NO_PARITY; break;
    8ab6:	1dfb      	adds	r3, r7, #7
    8ab8:	781a      	ldrb	r2, [r3, #0]
    8aba:	492a      	ldr	r1, [pc, #168]	; (8b64 <init+0x51a>)
    8abc:	0013      	movs	r3, r2
    8abe:	00db      	lsls	r3, r3, #3
    8ac0:	189b      	adds	r3, r3, r2
    8ac2:	019b      	lsls	r3, r3, #6
    8ac4:	585b      	ldr	r3, [r3, r1]
    8ac6:	681a      	ldr	r2, [r3, #0]
    8ac8:	4927      	ldr	r1, [pc, #156]	; (8b68 <init+0x51e>)
    8aca:	400a      	ands	r2, r1
    8acc:	601a      	str	r2, [r3, #0]
    8ace:	46c0      	nop			; (mov r8, r8)
	}
	//stop bit
	switch(cfg_1.sock_rs485[n_port].stop)	
    8ad0:	1dfb      	adds	r3, r7, #7
    8ad2:	781a      	ldrb	r2, [r3, #0]
    8ad4:	4925      	ldr	r1, [pc, #148]	; (8b6c <init+0x522>)
    8ad6:	2038      	movs	r0, #56	; 0x38
    8ad8:	0013      	movs	r3, r2
    8ada:	005b      	lsls	r3, r3, #1
    8adc:	189b      	adds	r3, r3, r2
    8ade:	009b      	lsls	r3, r3, #2
    8ae0:	189b      	adds	r3, r3, r2
    8ae2:	18cb      	adds	r3, r1, r3
    8ae4:	181b      	adds	r3, r3, r0
    8ae6:	795b      	ldrb	r3, [r3, #5]
    8ae8:	061b      	lsls	r3, r3, #24
    8aea:	0f9b      	lsrs	r3, r3, #30
    8aec:	b2db      	uxtb	r3, r3
    8aee:	2b02      	cmp	r3, #2
    8af0:	d10c      	bne.n	8b0c <init+0x4c2>
	{
		case 2:		port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 1; break;//2 stop bits
    8af2:	1dfb      	adds	r3, r7, #7
    8af4:	781a      	ldrb	r2, [r3, #0]
    8af6:	491b      	ldr	r1, [pc, #108]	; (8b64 <init+0x51a>)
    8af8:	0013      	movs	r3, r2
    8afa:	00db      	lsls	r3, r3, #3
    8afc:	189b      	adds	r3, r3, r2
    8afe:	019b      	lsls	r3, r3, #6
    8b00:	585b      	ldr	r3, [r3, r1]
    8b02:	685a      	ldr	r2, [r3, #4]
    8b04:	2140      	movs	r1, #64	; 0x40
    8b06:	430a      	orrs	r2, r1
    8b08:	605a      	str	r2, [r3, #4]
    8b0a:	e00c      	b.n	8b26 <init+0x4dc>
		default:	port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 0; break;//1 stop bits
    8b0c:	1dfb      	adds	r3, r7, #7
    8b0e:	781a      	ldrb	r2, [r3, #0]
    8b10:	4914      	ldr	r1, [pc, #80]	; (8b64 <init+0x51a>)
    8b12:	0013      	movs	r3, r2
    8b14:	00db      	lsls	r3, r3, #3
    8b16:	189b      	adds	r3, r3, r2
    8b18:	019b      	lsls	r3, r3, #6
    8b1a:	585b      	ldr	r3, [r3, r1]
    8b1c:	685a      	ldr	r2, [r3, #4]
    8b1e:	2140      	movs	r1, #64	; 0x40
    8b20:	438a      	bics	r2, r1
    8b22:	605a      	str	r2, [r3, #4]
    8b24:	46c0      	nop			; (mov r8, r8)
	}
	//char size
	switch (cfg_1.sock_rs485[n_port].bsize)
    8b26:	1dfb      	adds	r3, r7, #7
    8b28:	781a      	ldrb	r2, [r3, #0]
    8b2a:	4910      	ldr	r1, [pc, #64]	; (8b6c <init+0x522>)
    8b2c:	2038      	movs	r0, #56	; 0x38
    8b2e:	0013      	movs	r3, r2
    8b30:	005b      	lsls	r3, r3, #1
    8b32:	189b      	adds	r3, r3, r2
    8b34:	009b      	lsls	r3, r3, #2
    8b36:	189b      	adds	r3, r3, r2
    8b38:	18cb      	adds	r3, r1, r3
    8b3a:	181b      	adds	r3, r3, r0
    8b3c:	795b      	ldrb	r3, [r3, #5]
    8b3e:	071b      	lsls	r3, r3, #28
    8b40:	0f1b      	lsrs	r3, r3, #28
    8b42:	b2db      	uxtb	r3, r3
    8b44:	2b07      	cmp	r3, #7
    8b46:	d113      	bne.n	8b70 <init+0x526>
	{
		case 7:	port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x07; break;
    8b48:	1dfb      	adds	r3, r7, #7
    8b4a:	781a      	ldrb	r2, [r3, #0]
    8b4c:	4905      	ldr	r1, [pc, #20]	; (8b64 <init+0x51a>)
    8b4e:	0013      	movs	r3, r2
    8b50:	00db      	lsls	r3, r3, #3
    8b52:	189b      	adds	r3, r3, r2
    8b54:	019b      	lsls	r3, r3, #6
    8b56:	585b      	ldr	r3, [r3, r1]
    8b58:	685a      	ldr	r2, [r3, #4]
    8b5a:	2107      	movs	r1, #7
    8b5c:	430a      	orrs	r2, r1
    8b5e:	605a      	str	r2, [r3, #4]
    8b60:	e013      	b.n	8b8a <init+0x540>
    8b62:	46c0      	nop			; (mov r8, r8)
    8b64:	200031fc 	.word	0x200031fc
    8b68:	f0ffffff 	.word	0xf0ffffff
    8b6c:	20003dc8 	.word	0x20003dc8
		default:port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x00; break;
    8b70:	1dfb      	adds	r3, r7, #7
    8b72:	781a      	ldrb	r2, [r3, #0]
    8b74:	49b8      	ldr	r1, [pc, #736]	; (8e58 <init+0x80e>)
    8b76:	0013      	movs	r3, r2
    8b78:	00db      	lsls	r3, r3, #3
    8b7a:	189b      	adds	r3, r3, r2
    8b7c:	019b      	lsls	r3, r3, #6
    8b7e:	585b      	ldr	r3, [r3, r1]
    8b80:	685a      	ldr	r2, [r3, #4]
    8b82:	2107      	movs	r1, #7
    8b84:	438a      	bics	r2, r1
    8b86:	605a      	str	r2, [r3, #4]
    8b88:	46c0      	nop			; (mov r8, r8)
	}
	//baud
	val = cfg_1.sock_rs485[n_port].baud;
    8b8a:	1dfb      	adds	r3, r7, #7
    8b8c:	781a      	ldrb	r2, [r3, #0]
    8b8e:	49b3      	ldr	r1, [pc, #716]	; (8e5c <init+0x812>)
    8b90:	0013      	movs	r3, r2
    8b92:	005b      	lsls	r3, r3, #1
    8b94:	189b      	adds	r3, r3, r2
    8b96:	009b      	lsls	r3, r3, #2
    8b98:	189b      	adds	r3, r3, r2
    8b9a:	18cb      	adds	r3, r1, r3
    8b9c:	3330      	adds	r3, #48	; 0x30
    8b9e:	7a5a      	ldrb	r2, [r3, #9]
    8ba0:	7a99      	ldrb	r1, [r3, #10]
    8ba2:	0209      	lsls	r1, r1, #8
    8ba4:	430a      	orrs	r2, r1
    8ba6:	7ad9      	ldrb	r1, [r3, #11]
    8ba8:	0409      	lsls	r1, r1, #16
    8baa:	430a      	orrs	r2, r1
    8bac:	7b1b      	ldrb	r3, [r3, #12]
    8bae:	061b      	lsls	r3, r3, #24
    8bb0:	4313      	orrs	r3, r2
    8bb2:	61fb      	str	r3, [r7, #28]
	if ( !((val == 600) || (val == 1200) || (val == 2400) || (val == 4800) || (val == 9600) || (val == 19200) || (val == 38400) || (val == 57600) || (val == 115200) || (val == 128000) || (val == 256000)) ) {val = 38400;}
    8bb4:	69fa      	ldr	r2, [r7, #28]
    8bb6:	2396      	movs	r3, #150	; 0x96
    8bb8:	009b      	lsls	r3, r3, #2
    8bba:	429a      	cmp	r2, r3
    8bbc:	d034      	beq.n	8c28 <init+0x5de>
    8bbe:	69fa      	ldr	r2, [r7, #28]
    8bc0:	2396      	movs	r3, #150	; 0x96
    8bc2:	00db      	lsls	r3, r3, #3
    8bc4:	429a      	cmp	r2, r3
    8bc6:	d02f      	beq.n	8c28 <init+0x5de>
    8bc8:	69fa      	ldr	r2, [r7, #28]
    8bca:	2396      	movs	r3, #150	; 0x96
    8bcc:	011b      	lsls	r3, r3, #4
    8bce:	429a      	cmp	r2, r3
    8bd0:	d02a      	beq.n	8c28 <init+0x5de>
    8bd2:	69fa      	ldr	r2, [r7, #28]
    8bd4:	2396      	movs	r3, #150	; 0x96
    8bd6:	015b      	lsls	r3, r3, #5
    8bd8:	429a      	cmp	r2, r3
    8bda:	d025      	beq.n	8c28 <init+0x5de>
    8bdc:	69fa      	ldr	r2, [r7, #28]
    8bde:	2396      	movs	r3, #150	; 0x96
    8be0:	019b      	lsls	r3, r3, #6
    8be2:	429a      	cmp	r2, r3
    8be4:	d020      	beq.n	8c28 <init+0x5de>
    8be6:	69fa      	ldr	r2, [r7, #28]
    8be8:	2396      	movs	r3, #150	; 0x96
    8bea:	01db      	lsls	r3, r3, #7
    8bec:	429a      	cmp	r2, r3
    8bee:	d01b      	beq.n	8c28 <init+0x5de>
    8bf0:	69fa      	ldr	r2, [r7, #28]
    8bf2:	2396      	movs	r3, #150	; 0x96
    8bf4:	021b      	lsls	r3, r3, #8
    8bf6:	429a      	cmp	r2, r3
    8bf8:	d016      	beq.n	8c28 <init+0x5de>
    8bfa:	69fa      	ldr	r2, [r7, #28]
    8bfc:	23e1      	movs	r3, #225	; 0xe1
    8bfe:	021b      	lsls	r3, r3, #8
    8c00:	429a      	cmp	r2, r3
    8c02:	d011      	beq.n	8c28 <init+0x5de>
    8c04:	69fa      	ldr	r2, [r7, #28]
    8c06:	23e1      	movs	r3, #225	; 0xe1
    8c08:	025b      	lsls	r3, r3, #9
    8c0a:	429a      	cmp	r2, r3
    8c0c:	d00c      	beq.n	8c28 <init+0x5de>
    8c0e:	69fa      	ldr	r2, [r7, #28]
    8c10:	23fa      	movs	r3, #250	; 0xfa
    8c12:	025b      	lsls	r3, r3, #9
    8c14:	429a      	cmp	r2, r3
    8c16:	d007      	beq.n	8c28 <init+0x5de>
    8c18:	69fa      	ldr	r2, [r7, #28]
    8c1a:	23fa      	movs	r3, #250	; 0xfa
    8c1c:	029b      	lsls	r3, r3, #10
    8c1e:	429a      	cmp	r2, r3
    8c20:	d002      	beq.n	8c28 <init+0x5de>
    8c22:	2396      	movs	r3, #150	; 0x96
    8c24:	021b      	lsls	r3, r3, #8
    8c26:	61fb      	str	r3, [r7, #28]
	port[n_port].sercom->USART.BAUD.bit.BAUD =	65536.0f*(1.0f-(16.0*(float)(val))/(float)(PROC_HERZ)); 
    8c28:	1dfb      	adds	r3, r7, #7
    8c2a:	781a      	ldrb	r2, [r3, #0]
    8c2c:	498a      	ldr	r1, [pc, #552]	; (8e58 <init+0x80e>)
    8c2e:	0013      	movs	r3, r2
    8c30:	00db      	lsls	r3, r3, #3
    8c32:	189b      	adds	r3, r3, r2
    8c34:	019b      	lsls	r3, r3, #6
    8c36:	585c      	ldr	r4, [r3, r1]
    8c38:	4b89      	ldr	r3, [pc, #548]	; (8e60 <init+0x816>)
    8c3a:	69f8      	ldr	r0, [r7, #28]
    8c3c:	4798      	blx	r3
    8c3e:	1c02      	adds	r2, r0, #0
    8c40:	4b88      	ldr	r3, [pc, #544]	; (8e64 <init+0x81a>)
    8c42:	1c10      	adds	r0, r2, #0
    8c44:	4798      	blx	r3
    8c46:	4d88      	ldr	r5, [pc, #544]	; (8e68 <init+0x81e>)
    8c48:	2200      	movs	r2, #0
    8c4a:	4b88      	ldr	r3, [pc, #544]	; (8e6c <init+0x822>)
    8c4c:	47a8      	blx	r5
    8c4e:	0002      	movs	r2, r0
    8c50:	000b      	movs	r3, r1
    8c52:	0010      	movs	r0, r2
    8c54:	0019      	movs	r1, r3
    8c56:	4d86      	ldr	r5, [pc, #536]	; (8e70 <init+0x826>)
    8c58:	2200      	movs	r2, #0
    8c5a:	4b86      	ldr	r3, [pc, #536]	; (8e74 <init+0x82a>)
    8c5c:	47a8      	blx	r5
    8c5e:	0002      	movs	r2, r0
    8c60:	000b      	movs	r3, r1
    8c62:	4d85      	ldr	r5, [pc, #532]	; (8e78 <init+0x82e>)
    8c64:	2000      	movs	r0, #0
    8c66:	4985      	ldr	r1, [pc, #532]	; (8e7c <init+0x832>)
    8c68:	47a8      	blx	r5
    8c6a:	0002      	movs	r2, r0
    8c6c:	000b      	movs	r3, r1
    8c6e:	0010      	movs	r0, r2
    8c70:	0019      	movs	r1, r3
    8c72:	4d7d      	ldr	r5, [pc, #500]	; (8e68 <init+0x81e>)
    8c74:	2200      	movs	r2, #0
    8c76:	4b82      	ldr	r3, [pc, #520]	; (8e80 <init+0x836>)
    8c78:	47a8      	blx	r5
    8c7a:	0002      	movs	r2, r0
    8c7c:	000b      	movs	r3, r1
    8c7e:	0011      	movs	r1, r2
    8c80:	001a      	movs	r2, r3
    8c82:	4b80      	ldr	r3, [pc, #512]	; (8e84 <init+0x83a>)
    8c84:	0008      	movs	r0, r1
    8c86:	0011      	movs	r1, r2
    8c88:	4798      	blx	r3
    8c8a:	0003      	movs	r3, r0
    8c8c:	b29b      	uxth	r3, r3
    8c8e:	81a3      	strh	r3, [r4, #12]
	//SERCOM1->USART.BAUD.bit.BAUD=				65536.0f*(1.0f-(8.0*(float)(38400))/(float)(8000000));
	//cfg settings end

	port[n_port].sercom->USART.INTENSET.bit.RXC  =0x01; // Bit 2 RXC: Receive Complete Interrupt Enable
    8c90:	1dfb      	adds	r3, r7, #7
    8c92:	781a      	ldrb	r2, [r3, #0]
    8c94:	4970      	ldr	r1, [pc, #448]	; (8e58 <init+0x80e>)
    8c96:	0013      	movs	r3, r2
    8c98:	00db      	lsls	r3, r3, #3
    8c9a:	189b      	adds	r3, r3, r2
    8c9c:	019b      	lsls	r3, r3, #6
    8c9e:	585a      	ldr	r2, [r3, r1]
    8ca0:	7d93      	ldrb	r3, [r2, #22]
    8ca2:	2104      	movs	r1, #4
    8ca4:	430b      	orrs	r3, r1
    8ca6:	7593      	strb	r3, [r2, #22]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8ca8:	46c0      	nop			; (mov r8, r8)
    8caa:	1dfb      	adds	r3, r7, #7
    8cac:	781a      	ldrb	r2, [r3, #0]
    8cae:	496a      	ldr	r1, [pc, #424]	; (8e58 <init+0x80e>)
    8cb0:	0013      	movs	r3, r2
    8cb2:	00db      	lsls	r3, r3, #3
    8cb4:	189b      	adds	r3, r3, r2
    8cb6:	019b      	lsls	r3, r3, #6
    8cb8:	585b      	ldr	r3, [r3, r1]
    8cba:	69db      	ldr	r3, [r3, #28]
    8cbc:	2207      	movs	r2, #7
    8cbe:	4013      	ands	r3, r2
    8cc0:	d1f3      	bne.n	8caa <init+0x660>
	port[n_port].sercom->USART.CTRLB.bit.RXEN=0x01;     // Bit 17 - RXEN: Receiver Enable (11: The receiver is enabled or will be enabled when the USART is enabled)
    8cc2:	1dfb      	adds	r3, r7, #7
    8cc4:	781a      	ldrb	r2, [r3, #0]
    8cc6:	4964      	ldr	r1, [pc, #400]	; (8e58 <init+0x80e>)
    8cc8:	0013      	movs	r3, r2
    8cca:	00db      	lsls	r3, r3, #3
    8ccc:	189b      	adds	r3, r3, r2
    8cce:	019b      	lsls	r3, r3, #6
    8cd0:	585b      	ldr	r3, [r3, r1]
    8cd2:	685a      	ldr	r2, [r3, #4]
    8cd4:	2180      	movs	r1, #128	; 0x80
    8cd6:	0289      	lsls	r1, r1, #10
    8cd8:	430a      	orrs	r2, r1
    8cda:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8cdc:	46c0      	nop			; (mov r8, r8)
    8cde:	1dfb      	adds	r3, r7, #7
    8ce0:	781a      	ldrb	r2, [r3, #0]
    8ce2:	495d      	ldr	r1, [pc, #372]	; (8e58 <init+0x80e>)
    8ce4:	0013      	movs	r3, r2
    8ce6:	00db      	lsls	r3, r3, #3
    8ce8:	189b      	adds	r3, r3, r2
    8cea:	019b      	lsls	r3, r3, #6
    8cec:	585b      	ldr	r3, [r3, r1]
    8cee:	69db      	ldr	r3, [r3, #28]
    8cf0:	2207      	movs	r2, #7
    8cf2:	4013      	ands	r3, r2
    8cf4:	d1f3      	bne.n	8cde <init+0x694>
	port[n_port].sercom->USART.CTRLB.bit.TXEN=0x01;     // Bit 16 - TXEN: Transmitter Enable (1: The transmitter is enabled or will be enabled when the USART is enabled.)
    8cf6:	1dfb      	adds	r3, r7, #7
    8cf8:	781a      	ldrb	r2, [r3, #0]
    8cfa:	4957      	ldr	r1, [pc, #348]	; (8e58 <init+0x80e>)
    8cfc:	0013      	movs	r3, r2
    8cfe:	00db      	lsls	r3, r3, #3
    8d00:	189b      	adds	r3, r3, r2
    8d02:	019b      	lsls	r3, r3, #6
    8d04:	585b      	ldr	r3, [r3, r1]
    8d06:	685a      	ldr	r2, [r3, #4]
    8d08:	2180      	movs	r1, #128	; 0x80
    8d0a:	0249      	lsls	r1, r1, #9
    8d0c:	430a      	orrs	r2, r1
    8d0e:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d10:	46c0      	nop			; (mov r8, r8)
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	781a      	ldrb	r2, [r3, #0]
    8d16:	4950      	ldr	r1, [pc, #320]	; (8e58 <init+0x80e>)
    8d18:	0013      	movs	r3, r2
    8d1a:	00db      	lsls	r3, r3, #3
    8d1c:	189b      	adds	r3, r3, r2
    8d1e:	019b      	lsls	r3, r3, #6
    8d20:	585b      	ldr	r3, [r3, r1]
    8d22:	69db      	ldr	r3, [r3, #28]
    8d24:	2207      	movs	r2, #7
    8d26:	4013      	ands	r3, r2
    8d28:	d1f3      	bne.n	8d12 <init+0x6c8>
	port[n_port].sercom->USART.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    8d2a:	1dfb      	adds	r3, r7, #7
    8d2c:	781a      	ldrb	r2, [r3, #0]
    8d2e:	494a      	ldr	r1, [pc, #296]	; (8e58 <init+0x80e>)
    8d30:	0013      	movs	r3, r2
    8d32:	00db      	lsls	r3, r3, #3
    8d34:	189b      	adds	r3, r3, r2
    8d36:	019b      	lsls	r3, r3, #6
    8d38:	585b      	ldr	r3, [r3, r1]
    8d3a:	681a      	ldr	r2, [r3, #0]
    8d3c:	2102      	movs	r1, #2
    8d3e:	430a      	orrs	r2, r1
    8d40:	601a      	str	r2, [r3, #0]

	tout = (double)1000000 / (double)cfg_1.sock_rs485[n_port].baud;
    8d42:	1dfb      	adds	r3, r7, #7
    8d44:	781a      	ldrb	r2, [r3, #0]
    8d46:	4945      	ldr	r1, [pc, #276]	; (8e5c <init+0x812>)
    8d48:	0013      	movs	r3, r2
    8d4a:	005b      	lsls	r3, r3, #1
    8d4c:	189b      	adds	r3, r3, r2
    8d4e:	009b      	lsls	r3, r3, #2
    8d50:	189b      	adds	r3, r3, r2
    8d52:	18cb      	adds	r3, r1, r3
    8d54:	3330      	adds	r3, #48	; 0x30
    8d56:	7a5a      	ldrb	r2, [r3, #9]
    8d58:	7a99      	ldrb	r1, [r3, #10]
    8d5a:	0209      	lsls	r1, r1, #8
    8d5c:	430a      	orrs	r2, r1
    8d5e:	7ad9      	ldrb	r1, [r3, #11]
    8d60:	0409      	lsls	r1, r1, #16
    8d62:	430a      	orrs	r2, r1
    8d64:	7b1b      	ldrb	r3, [r3, #12]
    8d66:	061b      	lsls	r3, r3, #24
    8d68:	4313      	orrs	r3, r2
    8d6a:	001a      	movs	r2, r3
    8d6c:	4b46      	ldr	r3, [pc, #280]	; (8e88 <init+0x83e>)
    8d6e:	0010      	movs	r0, r2
    8d70:	4798      	blx	r3
    8d72:	0002      	movs	r2, r0
    8d74:	000b      	movs	r3, r1
    8d76:	4c3e      	ldr	r4, [pc, #248]	; (8e70 <init+0x826>)
    8d78:	2000      	movs	r0, #0
    8d7a:	4944      	ldr	r1, [pc, #272]	; (8e8c <init+0x842>)
    8d7c:	47a0      	blx	r4
    8d7e:	0003      	movs	r3, r0
    8d80:	000c      	movs	r4, r1
    8d82:	613b      	str	r3, [r7, #16]
    8d84:	617c      	str	r4, [r7, #20]
	tout = tout * bsize;
    8d86:	4c38      	ldr	r4, [pc, #224]	; (8e68 <init+0x81e>)
    8d88:	68ba      	ldr	r2, [r7, #8]
    8d8a:	68fb      	ldr	r3, [r7, #12]
    8d8c:	6938      	ldr	r0, [r7, #16]
    8d8e:	6979      	ldr	r1, [r7, #20]
    8d90:	47a0      	blx	r4
    8d92:	0003      	movs	r3, r0
    8d94:	000c      	movs	r4, r1
    8d96:	613b      	str	r3, [r7, #16]
    8d98:	617c      	str	r4, [r7, #20]
	tout = tout * 4;
    8d9a:	4c33      	ldr	r4, [pc, #204]	; (8e68 <init+0x81e>)
    8d9c:	2200      	movs	r2, #0
    8d9e:	4b3c      	ldr	r3, [pc, #240]	; (8e90 <init+0x846>)
    8da0:	6938      	ldr	r0, [r7, #16]
    8da2:	6979      	ldr	r1, [r7, #20]
    8da4:	47a0      	blx	r4
    8da6:	0003      	movs	r3, r0
    8da8:	000c      	movs	r4, r1
    8daa:	613b      	str	r3, [r7, #16]
    8dac:	617c      	str	r4, [r7, #20]
	tout = tout / 100;
    8dae:	4c30      	ldr	r4, [pc, #192]	; (8e70 <init+0x826>)
    8db0:	2200      	movs	r2, #0
    8db2:	4b38      	ldr	r3, [pc, #224]	; (8e94 <init+0x84a>)
    8db4:	6938      	ldr	r0, [r7, #16]
    8db6:	6979      	ldr	r1, [r7, #20]
    8db8:	47a0      	blx	r4
    8dba:	0003      	movs	r3, r0
    8dbc:	000c      	movs	r4, r1
    8dbe:	613b      	str	r3, [r7, #16]
    8dc0:	617c      	str	r4, [r7, #20]
	port[n_port].rtout = tout;
    8dc2:	1dfb      	adds	r3, r7, #7
    8dc4:	781c      	ldrb	r4, [r3, #0]
    8dc6:	4b2f      	ldr	r3, [pc, #188]	; (8e84 <init+0x83a>)
    8dc8:	6938      	ldr	r0, [r7, #16]
    8dca:	6979      	ldr	r1, [r7, #20]
    8dcc:	4798      	blx	r3
    8dce:	0003      	movs	r3, r0
    8dd0:	b298      	uxth	r0, r3
    8dd2:	4921      	ldr	r1, [pc, #132]	; (8e58 <init+0x80e>)
    8dd4:	2384      	movs	r3, #132	; 0x84
    8dd6:	009a      	lsls	r2, r3, #2
    8dd8:	0023      	movs	r3, r4
    8dda:	00db      	lsls	r3, r3, #3
    8ddc:	191b      	adds	r3, r3, r4
    8dde:	019b      	lsls	r3, r3, #6
    8de0:	18cb      	adds	r3, r1, r3
    8de2:	189b      	adds	r3, r3, r2
    8de4:	1c02      	adds	r2, r0, #0
    8de6:	801a      	strh	r2, [r3, #0]

	NVIC_DisableIRQ(port[n_port].irqn_sercom);
    8de8:	1dfb      	adds	r3, r7, #7
    8dea:	781a      	ldrb	r2, [r3, #0]
    8dec:	491a      	ldr	r1, [pc, #104]	; (8e58 <init+0x80e>)
    8dee:	0013      	movs	r3, r2
    8df0:	00db      	lsls	r3, r3, #3
    8df2:	189b      	adds	r3, r3, r2
    8df4:	019b      	lsls	r3, r3, #6
    8df6:	18cb      	adds	r3, r1, r3
    8df8:	3308      	adds	r3, #8
    8dfa:	781b      	ldrb	r3, [r3, #0]
    8dfc:	b2db      	uxtb	r3, r3
    8dfe:	b25b      	sxtb	r3, r3
    8e00:	0018      	movs	r0, r3
    8e02:	f7ff fb7b 	bl	84fc <__NVIC_DisableIRQ>
	NVIC_SetPriority(port[n_port].irqn_sercom, 1);
    8e06:	1dfb      	adds	r3, r7, #7
    8e08:	781a      	ldrb	r2, [r3, #0]
    8e0a:	4913      	ldr	r1, [pc, #76]	; (8e58 <init+0x80e>)
    8e0c:	0013      	movs	r3, r2
    8e0e:	00db      	lsls	r3, r3, #3
    8e10:	189b      	adds	r3, r3, r2
    8e12:	019b      	lsls	r3, r3, #6
    8e14:	18cb      	adds	r3, r1, r3
    8e16:	3308      	adds	r3, #8
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	b2db      	uxtb	r3, r3
    8e1c:	b25b      	sxtb	r3, r3
    8e1e:	2101      	movs	r1, #1
    8e20:	0018      	movs	r0, r3
    8e22:	f7ff fb8b 	bl	853c <__NVIC_SetPriority>
	NVIC_EnableIRQ(port[n_port].irqn_sercom);
    8e26:	1dfb      	adds	r3, r7, #7
    8e28:	781a      	ldrb	r2, [r3, #0]
    8e2a:	490b      	ldr	r1, [pc, #44]	; (8e58 <init+0x80e>)
    8e2c:	0013      	movs	r3, r2
    8e2e:	00db      	lsls	r3, r3, #3
    8e30:	189b      	adds	r3, r3, r2
    8e32:	019b      	lsls	r3, r3, #6
    8e34:	18cb      	adds	r3, r1, r3
    8e36:	3308      	adds	r3, #8
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	b2db      	uxtb	r3, r3
    8e3c:	b25b      	sxtb	r3, r3
    8e3e:	0018      	movs	r0, r3
    8e40:	f7ff fb42 	bl	84c8 <__NVIC_EnableIRQ>
	pin_ctrl(RTS, n_port, CLR);
    8e44:	1dfb      	adds	r3, r7, #7
    8e46:	781b      	ldrb	r3, [r3, #0]
    8e48:	2202      	movs	r2, #2
    8e4a:	0019      	movs	r1, r3
    8e4c:	2000      	movs	r0, #0
    8e4e:	4b12      	ldr	r3, [pc, #72]	; (8e98 <init+0x84e>)
    8e50:	4798      	blx	r3
}
    8e52:	46bd      	mov	sp, r7
    8e54:	b008      	add	sp, #32
    8e56:	bdb0      	pop	{r4, r5, r7, pc}
    8e58:	200031fc 	.word	0x200031fc
    8e5c:	20003dc8 	.word	0x20003dc8
    8e60:	0000b1a5 	.word	0x0000b1a5
    8e64:	0000c49d 	.word	0x0000c49d
    8e68:	0000b899 	.word	0x0000b899
    8e6c:	40300000 	.word	0x40300000
    8e70:	0000b231 	.word	0x0000b231
    8e74:	4186e360 	.word	0x4186e360
    8e78:	0000bd99 	.word	0x0000bd99
    8e7c:	3ff00000 	.word	0x3ff00000
    8e80:	40f00000 	.word	0x40f00000
    8e84:	0000b169 	.word	0x0000b169
    8e88:	0000c42d 	.word	0x0000c42d
    8e8c:	412e8480 	.word	0x412e8480
    8e90:	40100000 	.word	0x40100000
    8e94:	40590000 	.word	0x40590000
    8e98:	00006d55 	.word	0x00006d55

00008e9c <usart_write>:

WORD usart_write(BYTE n_port, BYTE* wbuf,WORD size)
{
    8e9c:	b590      	push	{r4, r7, lr}
    8e9e:	b083      	sub	sp, #12
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	6039      	str	r1, [r7, #0]
    8ea4:	0011      	movs	r1, r2
    8ea6:	1dfb      	adds	r3, r7, #7
    8ea8:	1c02      	adds	r2, r0, #0
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	1d3b      	adds	r3, r7, #4
    8eae:	1c0a      	adds	r2, r1, #0
    8eb0:	801a      	strh	r2, [r3, #0]
	if(size == 0) { return(0); }
    8eb2:	1d3b      	adds	r3, r7, #4
    8eb4:	881b      	ldrh	r3, [r3, #0]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d101      	bne.n	8ebe <usart_write+0x22>
    8eba:	2300      	movs	r3, #0
    8ebc:	e06c      	b.n	8f98 <usart_write+0xfc>
	pin_ctrl(RTS, n_port, SET);
    8ebe:	1dfb      	adds	r3, r7, #7
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	2201      	movs	r2, #1
    8ec4:	0019      	movs	r1, r3
    8ec6:	2000      	movs	r0, #0
    8ec8:	4b35      	ldr	r3, [pc, #212]	; (8fa0 <usart_write+0x104>)
    8eca:	4798      	blx	r3
	
	if(size > USART_BUF_SIZE) { size = USART_BUF_SIZE; }
    8ecc:	1d3b      	adds	r3, r7, #4
    8ece:	881a      	ldrh	r2, [r3, #0]
    8ed0:	2380      	movs	r3, #128	; 0x80
    8ed2:	005b      	lsls	r3, r3, #1
    8ed4:	429a      	cmp	r2, r3
    8ed6:	d903      	bls.n	8ee0 <usart_write+0x44>
    8ed8:	1d3b      	adds	r3, r7, #4
    8eda:	2280      	movs	r2, #128	; 0x80
    8edc:	0052      	lsls	r2, r2, #1
    8ede:	801a      	strh	r2, [r3, #0]
	memcpy(port[n_port].wbuf,wbuf,size);
    8ee0:	1dfb      	adds	r3, r7, #7
    8ee2:	781a      	ldrb	r2, [r3, #0]
    8ee4:	0013      	movs	r3, r2
    8ee6:	00db      	lsls	r3, r3, #3
    8ee8:	189b      	adds	r3, r3, r2
    8eea:	019b      	lsls	r3, r3, #6
    8eec:	3308      	adds	r3, #8
    8eee:	001a      	movs	r2, r3
    8ef0:	4b2c      	ldr	r3, [pc, #176]	; (8fa4 <usart_write+0x108>)
    8ef2:	18d3      	adds	r3, r2, r3
    8ef4:	1c58      	adds	r0, r3, #1
    8ef6:	1d3b      	adds	r3, r7, #4
    8ef8:	881a      	ldrh	r2, [r3, #0]
    8efa:	683b      	ldr	r3, [r7, #0]
    8efc:	0019      	movs	r1, r3
    8efe:	4b2a      	ldr	r3, [pc, #168]	; (8fa8 <usart_write+0x10c>)
    8f00:	4798      	blx	r3
	port[n_port].wn = size;
    8f02:	1dfb      	adds	r3, r7, #7
    8f04:	781a      	ldrb	r2, [r3, #0]
    8f06:	4927      	ldr	r1, [pc, #156]	; (8fa4 <usart_write+0x108>)
    8f08:	4828      	ldr	r0, [pc, #160]	; (8fac <usart_write+0x110>)
    8f0a:	0013      	movs	r3, r2
    8f0c:	00db      	lsls	r3, r3, #3
    8f0e:	189b      	adds	r3, r3, r2
    8f10:	019b      	lsls	r3, r3, #6
    8f12:	18cb      	adds	r3, r1, r3
    8f14:	181b      	adds	r3, r3, r0
    8f16:	1d3a      	adds	r2, r7, #4
    8f18:	8812      	ldrh	r2, [r2, #0]
    8f1a:	801a      	strh	r2, [r3, #0]
	//port[n_port].wx = 1;
	port[n_port].wx = 0;
    8f1c:	1dfb      	adds	r3, r7, #7
    8f1e:	781a      	ldrb	r2, [r3, #0]
    8f20:	4820      	ldr	r0, [pc, #128]	; (8fa4 <usart_write+0x108>)
    8f22:	2383      	movs	r3, #131	; 0x83
    8f24:	0099      	lsls	r1, r3, #2
    8f26:	0013      	movs	r3, r2
    8f28:	00db      	lsls	r3, r3, #3
    8f2a:	189b      	adds	r3, r3, r2
    8f2c:	019b      	lsls	r3, r3, #6
    8f2e:	18c3      	adds	r3, r0, r3
    8f30:	185b      	adds	r3, r3, r1
    8f32:	2200      	movs	r2, #0
    8f34:	801a      	strh	r2, [r3, #0]
	//port[n_port].sercom->USART.DATA.reg=port[n_port].wbuf[0];
	port[n_port].sercom->USART.INTENCLR.bit.RXC = 1;
    8f36:	1dfb      	adds	r3, r7, #7
    8f38:	781a      	ldrb	r2, [r3, #0]
    8f3a:	491a      	ldr	r1, [pc, #104]	; (8fa4 <usart_write+0x108>)
    8f3c:	0013      	movs	r3, r2
    8f3e:	00db      	lsls	r3, r3, #3
    8f40:	189b      	adds	r3, r3, r2
    8f42:	019b      	lsls	r3, r3, #6
    8f44:	585a      	ldr	r2, [r3, r1]
    8f46:	7d13      	ldrb	r3, [r2, #20]
    8f48:	2104      	movs	r1, #4
    8f4a:	430b      	orrs	r3, r1
    8f4c:	7513      	strb	r3, [r2, #20]
	port[n_port].sercom->USART.INTENSET.bit.DRE = 1;
    8f4e:	1dfb      	adds	r3, r7, #7
    8f50:	781a      	ldrb	r2, [r3, #0]
    8f52:	4914      	ldr	r1, [pc, #80]	; (8fa4 <usart_write+0x108>)
    8f54:	0013      	movs	r3, r2
    8f56:	00db      	lsls	r3, r3, #3
    8f58:	189b      	adds	r3, r3, r2
    8f5a:	019b      	lsls	r3, r3, #6
    8f5c:	585a      	ldr	r2, [r3, r1]
    8f5e:	7d93      	ldrb	r3, [r2, #22]
    8f60:	2101      	movs	r1, #1
    8f62:	430b      	orrs	r3, r1
    8f64:	7593      	strb	r3, [r2, #22]
	port[n_port].counters.tx++;
    8f66:	1dfb      	adds	r3, r7, #7
    8f68:	781a      	ldrb	r2, [r3, #0]
    8f6a:	480e      	ldr	r0, [pc, #56]	; (8fa4 <usart_write+0x108>)
    8f6c:	238d      	movs	r3, #141	; 0x8d
    8f6e:	0099      	lsls	r1, r3, #2
    8f70:	0013      	movs	r3, r2
    8f72:	00db      	lsls	r3, r3, #3
    8f74:	189b      	adds	r3, r3, r2
    8f76:	019b      	lsls	r3, r3, #6
    8f78:	18c3      	adds	r3, r0, r3
    8f7a:	185b      	adds	r3, r3, r1
    8f7c:	681b      	ldr	r3, [r3, #0]
    8f7e:	1c59      	adds	r1, r3, #1
    8f80:	4c08      	ldr	r4, [pc, #32]	; (8fa4 <usart_write+0x108>)
    8f82:	238d      	movs	r3, #141	; 0x8d
    8f84:	0098      	lsls	r0, r3, #2
    8f86:	0013      	movs	r3, r2
    8f88:	00db      	lsls	r3, r3, #3
    8f8a:	189b      	adds	r3, r3, r2
    8f8c:	019b      	lsls	r3, r3, #6
    8f8e:	18e3      	adds	r3, r4, r3
    8f90:	181b      	adds	r3, r3, r0
    8f92:	6019      	str	r1, [r3, #0]
	return(size);
    8f94:	1d3b      	adds	r3, r7, #4
    8f96:	881b      	ldrh	r3, [r3, #0]
}
    8f98:	0018      	movs	r0, r3
    8f9a:	46bd      	mov	sp, r7
    8f9c:	b003      	add	sp, #12
    8f9e:	bd90      	pop	{r4, r7, pc}
    8fa0:	00006d55 	.word	0x00006d55
    8fa4:	200031fc 	.word	0x200031fc
    8fa8:	0000c841 	.word	0x0000c841
    8fac:	0000020a 	.word	0x0000020a

00008fb0 <usart_read>:

WORD usart_read (BYTE n_port, BYTE* rbuf,WORD size)
{
    8fb0:	b590      	push	{r4, r7, lr}
    8fb2:	b085      	sub	sp, #20
    8fb4:	af00      	add	r7, sp, #0
    8fb6:	6039      	str	r1, [r7, #0]
    8fb8:	0011      	movs	r1, r2
    8fba:	1dfb      	adds	r3, r7, #7
    8fbc:	1c02      	adds	r2, r0, #0
    8fbe:	701a      	strb	r2, [r3, #0]
    8fc0:	1d3b      	adds	r3, r7, #4
    8fc2:	1c0a      	adds	r2, r1, #0
    8fc4:	801a      	strh	r2, [r3, #0]
	WORD size_1 = 0;
    8fc6:	230e      	movs	r3, #14
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	2200      	movs	r2, #0
    8fcc:	801a      	strh	r2, [r3, #0]
	
	if(port[n_port].rn     ==       0x00)			{ port[n_port].rtime=0; return(0); }
    8fce:	1dfb      	adds	r3, r7, #7
    8fd0:	781a      	ldrb	r2, [r3, #0]
    8fd2:	4948      	ldr	r1, [pc, #288]	; (90f4 <usart_read+0x144>)
    8fd4:	4848      	ldr	r0, [pc, #288]	; (90f8 <usart_read+0x148>)
    8fd6:	0013      	movs	r3, r2
    8fd8:	00db      	lsls	r3, r3, #3
    8fda:	189b      	adds	r3, r3, r2
    8fdc:	019b      	lsls	r3, r3, #6
    8fde:	18cb      	adds	r3, r1, r3
    8fe0:	181b      	adds	r3, r3, r0
    8fe2:	881b      	ldrh	r3, [r3, #0]
    8fe4:	b29b      	uxth	r3, r3
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d10e      	bne.n	9008 <usart_read+0x58>
    8fea:	1dfb      	adds	r3, r7, #7
    8fec:	781a      	ldrb	r2, [r3, #0]
    8fee:	4841      	ldr	r0, [pc, #260]	; (90f4 <usart_read+0x144>)
    8ff0:	2385      	movs	r3, #133	; 0x85
    8ff2:	0099      	lsls	r1, r3, #2
    8ff4:	0013      	movs	r3, r2
    8ff6:	00db      	lsls	r3, r3, #3
    8ff8:	189b      	adds	r3, r3, r2
    8ffa:	019b      	lsls	r3, r3, #6
    8ffc:	18c3      	adds	r3, r0, r3
    8ffe:	185b      	adds	r3, r3, r1
    9000:	2200      	movs	r2, #0
    9002:	801a      	strh	r2, [r3, #0]
    9004:	2300      	movs	r3, #0
    9006:	e070      	b.n	90ea <usart_read+0x13a>
	if(port[n_port].rtout  >  port[n_port].rtime)	{ return(0); }
    9008:	1dfb      	adds	r3, r7, #7
    900a:	781a      	ldrb	r2, [r3, #0]
    900c:	4839      	ldr	r0, [pc, #228]	; (90f4 <usart_read+0x144>)
    900e:	2384      	movs	r3, #132	; 0x84
    9010:	0099      	lsls	r1, r3, #2
    9012:	0013      	movs	r3, r2
    9014:	00db      	lsls	r3, r3, #3
    9016:	189b      	adds	r3, r3, r2
    9018:	019b      	lsls	r3, r3, #6
    901a:	18c3      	adds	r3, r0, r3
    901c:	185b      	adds	r3, r3, r1
    901e:	881b      	ldrh	r3, [r3, #0]
    9020:	b299      	uxth	r1, r3
    9022:	1dfb      	adds	r3, r7, #7
    9024:	781a      	ldrb	r2, [r3, #0]
    9026:	4c33      	ldr	r4, [pc, #204]	; (90f4 <usart_read+0x144>)
    9028:	2385      	movs	r3, #133	; 0x85
    902a:	0098      	lsls	r0, r3, #2
    902c:	0013      	movs	r3, r2
    902e:	00db      	lsls	r3, r3, #3
    9030:	189b      	adds	r3, r3, r2
    9032:	019b      	lsls	r3, r3, #6
    9034:	18e3      	adds	r3, r4, r3
    9036:	181b      	adds	r3, r3, r0
    9038:	881b      	ldrh	r3, [r3, #0]
    903a:	b29b      	uxth	r3, r3
    903c:	4299      	cmp	r1, r3
    903e:	d901      	bls.n	9044 <usart_read+0x94>
    9040:	2300      	movs	r3, #0
    9042:	e052      	b.n	90ea <usart_read+0x13a>
		
	size_1 = port[n_port].rn; 
    9044:	1dfb      	adds	r3, r7, #7
    9046:	781a      	ldrb	r2, [r3, #0]
    9048:	230e      	movs	r3, #14
    904a:	18f9      	adds	r1, r7, r3
    904c:	4829      	ldr	r0, [pc, #164]	; (90f4 <usart_read+0x144>)
    904e:	4c2a      	ldr	r4, [pc, #168]	; (90f8 <usart_read+0x148>)
    9050:	0013      	movs	r3, r2
    9052:	00db      	lsls	r3, r3, #3
    9054:	189b      	adds	r3, r3, r2
    9056:	019b      	lsls	r3, r3, #6
    9058:	18c3      	adds	r3, r0, r3
    905a:	191b      	adds	r3, r3, r4
    905c:	881b      	ldrh	r3, [r3, #0]
    905e:	800b      	strh	r3, [r1, #0]

	if(size_1 > size) {size_1 = size;}
    9060:	230e      	movs	r3, #14
    9062:	18fa      	adds	r2, r7, r3
    9064:	1d3b      	adds	r3, r7, #4
    9066:	8812      	ldrh	r2, [r2, #0]
    9068:	881b      	ldrh	r3, [r3, #0]
    906a:	429a      	cmp	r2, r3
    906c:	d904      	bls.n	9078 <usart_read+0xc8>
    906e:	230e      	movs	r3, #14
    9070:	18fb      	adds	r3, r7, r3
    9072:	1d3a      	adds	r2, r7, #4
    9074:	8812      	ldrh	r2, [r2, #0]
    9076:	801a      	strh	r2, [r3, #0]
	
	memcpy(rbuf,port[n_port].rbuf,size_1);
    9078:	1dfb      	adds	r3, r7, #7
    907a:	781a      	ldrb	r2, [r3, #0]
    907c:	0013      	movs	r3, r2
    907e:	00db      	lsls	r3, r3, #3
    9080:	189b      	adds	r3, r3, r2
    9082:	019b      	lsls	r3, r3, #6
    9084:	3309      	adds	r3, #9
    9086:	33ff      	adds	r3, #255	; 0xff
    9088:	001a      	movs	r2, r3
    908a:	4b1a      	ldr	r3, [pc, #104]	; (90f4 <usart_read+0x144>)
    908c:	18d3      	adds	r3, r2, r3
    908e:	1c59      	adds	r1, r3, #1
    9090:	230e      	movs	r3, #14
    9092:	18fb      	adds	r3, r7, r3
    9094:	881a      	ldrh	r2, [r3, #0]
    9096:	683b      	ldr	r3, [r7, #0]
    9098:	0018      	movs	r0, r3
    909a:	4b18      	ldr	r3, [pc, #96]	; (90fc <usart_read+0x14c>)
    909c:	4798      	blx	r3
	port[n_port].rn = 0;
    909e:	1dfb      	adds	r3, r7, #7
    90a0:	781a      	ldrb	r2, [r3, #0]
    90a2:	4914      	ldr	r1, [pc, #80]	; (90f4 <usart_read+0x144>)
    90a4:	4814      	ldr	r0, [pc, #80]	; (90f8 <usart_read+0x148>)
    90a6:	0013      	movs	r3, r2
    90a8:	00db      	lsls	r3, r3, #3
    90aa:	189b      	adds	r3, r3, r2
    90ac:	019b      	lsls	r3, r3, #6
    90ae:	18cb      	adds	r3, r1, r3
    90b0:	181b      	adds	r3, r3, r0
    90b2:	2200      	movs	r2, #0
    90b4:	801a      	strh	r2, [r3, #0]
	port[n_port].counters.rx++;
    90b6:	1dfb      	adds	r3, r7, #7
    90b8:	781a      	ldrb	r2, [r3, #0]
    90ba:	480e      	ldr	r0, [pc, #56]	; (90f4 <usart_read+0x144>)
    90bc:	238e      	movs	r3, #142	; 0x8e
    90be:	0099      	lsls	r1, r3, #2
    90c0:	0013      	movs	r3, r2
    90c2:	00db      	lsls	r3, r3, #3
    90c4:	189b      	adds	r3, r3, r2
    90c6:	019b      	lsls	r3, r3, #6
    90c8:	18c3      	adds	r3, r0, r3
    90ca:	185b      	adds	r3, r3, r1
    90cc:	681b      	ldr	r3, [r3, #0]
    90ce:	1c59      	adds	r1, r3, #1
    90d0:	4c08      	ldr	r4, [pc, #32]	; (90f4 <usart_read+0x144>)
    90d2:	238e      	movs	r3, #142	; 0x8e
    90d4:	0098      	lsls	r0, r3, #2
    90d6:	0013      	movs	r3, r2
    90d8:	00db      	lsls	r3, r3, #3
    90da:	189b      	adds	r3, r3, r2
    90dc:	019b      	lsls	r3, r3, #6
    90de:	18e3      	adds	r3, r4, r3
    90e0:	181b      	adds	r3, r3, r0
    90e2:	6019      	str	r1, [r3, #0]
	return(size_1);
    90e4:	230e      	movs	r3, #14
    90e6:	18fb      	adds	r3, r7, r3
    90e8:	881b      	ldrh	r3, [r3, #0]
}
    90ea:	0018      	movs	r0, r3
    90ec:	46bd      	mov	sp, r7
    90ee:	b005      	add	sp, #20
    90f0:	bd90      	pop	{r4, r7, pc}
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	200031fc 	.word	0x200031fc
    90f8:	0000020e 	.word	0x0000020e
    90fc:	0000c841 	.word	0x0000c841

00009100 <sercom_proc>:

void sercom_proc(BYTE n_port)
{
    9100:	b5b0      	push	{r4, r5, r7, lr}
    9102:	b082      	sub	sp, #8
    9104:	af00      	add	r7, sp, #0
    9106:	0002      	movs	r2, r0
    9108:	1dfb      	adds	r3, r7, #7
    910a:	701a      	strb	r2, [r3, #0]
	if (port[n_port].sercom->USART.STATUS.bit.COLL)		{port[n_port].errors.collision++;		port[n_port].sercom->USART.STATUS.bit.COLL   = 1;}
    910c:	1dfb      	adds	r3, r7, #7
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	49c4      	ldr	r1, [pc, #784]	; (9424 <sercom_proc+0x324>)
    9112:	0013      	movs	r3, r2
    9114:	00db      	lsls	r3, r3, #3
    9116:	189b      	adds	r3, r3, r2
    9118:	019b      	lsls	r3, r3, #6
    911a:	585b      	ldr	r3, [r3, r1]
    911c:	8b5b      	ldrh	r3, [r3, #26]
    911e:	069b      	lsls	r3, r3, #26
    9120:	0fdb      	lsrs	r3, r3, #31
    9122:	b2db      	uxtb	r3, r3
    9124:	2b00      	cmp	r3, #0
    9126:	d023      	beq.n	9170 <sercom_proc+0x70>
    9128:	1dfb      	adds	r3, r7, #7
    912a:	781a      	ldrb	r2, [r3, #0]
    912c:	49bd      	ldr	r1, [pc, #756]	; (9424 <sercom_proc+0x324>)
    912e:	48be      	ldr	r0, [pc, #760]	; (9428 <sercom_proc+0x328>)
    9130:	0013      	movs	r3, r2
    9132:	00db      	lsls	r3, r3, #3
    9134:	189b      	adds	r3, r3, r2
    9136:	019b      	lsls	r3, r3, #6
    9138:	18cb      	adds	r3, r1, r3
    913a:	181b      	adds	r3, r3, r0
    913c:	881b      	ldrh	r3, [r3, #0]
    913e:	b29b      	uxth	r3, r3
    9140:	3301      	adds	r3, #1
    9142:	b29c      	uxth	r4, r3
    9144:	49b7      	ldr	r1, [pc, #732]	; (9424 <sercom_proc+0x324>)
    9146:	48b8      	ldr	r0, [pc, #736]	; (9428 <sercom_proc+0x328>)
    9148:	0013      	movs	r3, r2
    914a:	00db      	lsls	r3, r3, #3
    914c:	189b      	adds	r3, r3, r2
    914e:	019b      	lsls	r3, r3, #6
    9150:	18cb      	adds	r3, r1, r3
    9152:	181b      	adds	r3, r3, r0
    9154:	1c22      	adds	r2, r4, #0
    9156:	801a      	strh	r2, [r3, #0]
    9158:	1dfb      	adds	r3, r7, #7
    915a:	781a      	ldrb	r2, [r3, #0]
    915c:	49b1      	ldr	r1, [pc, #708]	; (9424 <sercom_proc+0x324>)
    915e:	0013      	movs	r3, r2
    9160:	00db      	lsls	r3, r3, #3
    9162:	189b      	adds	r3, r3, r2
    9164:	019b      	lsls	r3, r3, #6
    9166:	585a      	ldr	r2, [r3, r1]
    9168:	8b53      	ldrh	r3, [r2, #26]
    916a:	2120      	movs	r1, #32
    916c:	430b      	orrs	r3, r1
    916e:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.ISF)		{port[n_port].errors.synchr++;		    port[n_port].sercom->USART.STATUS.bit.ISF    = 1;}
    9170:	1dfb      	adds	r3, r7, #7
    9172:	781a      	ldrb	r2, [r3, #0]
    9174:	49ab      	ldr	r1, [pc, #684]	; (9424 <sercom_proc+0x324>)
    9176:	0013      	movs	r3, r2
    9178:	00db      	lsls	r3, r3, #3
    917a:	189b      	adds	r3, r3, r2
    917c:	019b      	lsls	r3, r3, #6
    917e:	585b      	ldr	r3, [r3, r1]
    9180:	8b5b      	ldrh	r3, [r3, #26]
    9182:	06db      	lsls	r3, r3, #27
    9184:	0fdb      	lsrs	r3, r3, #31
    9186:	b2db      	uxtb	r3, r3
    9188:	2b00      	cmp	r3, #0
    918a:	d025      	beq.n	91d8 <sercom_proc+0xd8>
    918c:	1dfb      	adds	r3, r7, #7
    918e:	781a      	ldrb	r2, [r3, #0]
    9190:	48a4      	ldr	r0, [pc, #656]	; (9424 <sercom_proc+0x324>)
    9192:	238b      	movs	r3, #139	; 0x8b
    9194:	0099      	lsls	r1, r3, #2
    9196:	0013      	movs	r3, r2
    9198:	00db      	lsls	r3, r3, #3
    919a:	189b      	adds	r3, r3, r2
    919c:	019b      	lsls	r3, r3, #6
    919e:	18c3      	adds	r3, r0, r3
    91a0:	185b      	adds	r3, r3, r1
    91a2:	881b      	ldrh	r3, [r3, #0]
    91a4:	b29b      	uxth	r3, r3
    91a6:	3301      	adds	r3, #1
    91a8:	b29c      	uxth	r4, r3
    91aa:	489e      	ldr	r0, [pc, #632]	; (9424 <sercom_proc+0x324>)
    91ac:	238b      	movs	r3, #139	; 0x8b
    91ae:	0099      	lsls	r1, r3, #2
    91b0:	0013      	movs	r3, r2
    91b2:	00db      	lsls	r3, r3, #3
    91b4:	189b      	adds	r3, r3, r2
    91b6:	019b      	lsls	r3, r3, #6
    91b8:	18c3      	adds	r3, r0, r3
    91ba:	185b      	adds	r3, r3, r1
    91bc:	1c22      	adds	r2, r4, #0
    91be:	801a      	strh	r2, [r3, #0]
    91c0:	1dfb      	adds	r3, r7, #7
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	4997      	ldr	r1, [pc, #604]	; (9424 <sercom_proc+0x324>)
    91c6:	0013      	movs	r3, r2
    91c8:	00db      	lsls	r3, r3, #3
    91ca:	189b      	adds	r3, r3, r2
    91cc:	019b      	lsls	r3, r3, #6
    91ce:	585a      	ldr	r2, [r3, r1]
    91d0:	8b53      	ldrh	r3, [r2, #26]
    91d2:	2110      	movs	r1, #16
    91d4:	430b      	orrs	r3, r1
    91d6:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.BUFOVF)	{port[n_port].errors.buf_ovf++;		    port[n_port].sercom->USART.STATUS.bit.BUFOVF = 1;}
    91d8:	1dfb      	adds	r3, r7, #7
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	4991      	ldr	r1, [pc, #580]	; (9424 <sercom_proc+0x324>)
    91de:	0013      	movs	r3, r2
    91e0:	00db      	lsls	r3, r3, #3
    91e2:	189b      	adds	r3, r3, r2
    91e4:	019b      	lsls	r3, r3, #6
    91e6:	585b      	ldr	r3, [r3, r1]
    91e8:	8b5b      	ldrh	r3, [r3, #26]
    91ea:	075b      	lsls	r3, r3, #29
    91ec:	0fdb      	lsrs	r3, r3, #31
    91ee:	b2db      	uxtb	r3, r3
    91f0:	2b00      	cmp	r3, #0
    91f2:	d023      	beq.n	923c <sercom_proc+0x13c>
    91f4:	1dfb      	adds	r3, r7, #7
    91f6:	781a      	ldrb	r2, [r3, #0]
    91f8:	498a      	ldr	r1, [pc, #552]	; (9424 <sercom_proc+0x324>)
    91fa:	488c      	ldr	r0, [pc, #560]	; (942c <sercom_proc+0x32c>)
    91fc:	0013      	movs	r3, r2
    91fe:	00db      	lsls	r3, r3, #3
    9200:	189b      	adds	r3, r3, r2
    9202:	019b      	lsls	r3, r3, #6
    9204:	18cb      	adds	r3, r1, r3
    9206:	181b      	adds	r3, r3, r0
    9208:	881b      	ldrh	r3, [r3, #0]
    920a:	b29b      	uxth	r3, r3
    920c:	3301      	adds	r3, #1
    920e:	b29c      	uxth	r4, r3
    9210:	4984      	ldr	r1, [pc, #528]	; (9424 <sercom_proc+0x324>)
    9212:	4886      	ldr	r0, [pc, #536]	; (942c <sercom_proc+0x32c>)
    9214:	0013      	movs	r3, r2
    9216:	00db      	lsls	r3, r3, #3
    9218:	189b      	adds	r3, r3, r2
    921a:	019b      	lsls	r3, r3, #6
    921c:	18cb      	adds	r3, r1, r3
    921e:	181b      	adds	r3, r3, r0
    9220:	1c22      	adds	r2, r4, #0
    9222:	801a      	strh	r2, [r3, #0]
    9224:	1dfb      	adds	r3, r7, #7
    9226:	781a      	ldrb	r2, [r3, #0]
    9228:	497e      	ldr	r1, [pc, #504]	; (9424 <sercom_proc+0x324>)
    922a:	0013      	movs	r3, r2
    922c:	00db      	lsls	r3, r3, #3
    922e:	189b      	adds	r3, r3, r2
    9230:	019b      	lsls	r3, r3, #6
    9232:	585a      	ldr	r2, [r3, r1]
    9234:	8b53      	ldrh	r3, [r2, #26]
    9236:	2104      	movs	r1, #4
    9238:	430b      	orrs	r3, r1
    923a:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.FERR)		{port[n_port].errors.st_bit++;		    port[n_port].sercom->USART.STATUS.bit.FERR   = 1;}
    923c:	1dfb      	adds	r3, r7, #7
    923e:	781a      	ldrb	r2, [r3, #0]
    9240:	4978      	ldr	r1, [pc, #480]	; (9424 <sercom_proc+0x324>)
    9242:	0013      	movs	r3, r2
    9244:	00db      	lsls	r3, r3, #3
    9246:	189b      	adds	r3, r3, r2
    9248:	019b      	lsls	r3, r3, #6
    924a:	585b      	ldr	r3, [r3, r1]
    924c:	8b5b      	ldrh	r3, [r3, #26]
    924e:	079b      	lsls	r3, r3, #30
    9250:	0fdb      	lsrs	r3, r3, #31
    9252:	b2db      	uxtb	r3, r3
    9254:	2b00      	cmp	r3, #0
    9256:	d025      	beq.n	92a4 <sercom_proc+0x1a4>
    9258:	1dfb      	adds	r3, r7, #7
    925a:	781a      	ldrb	r2, [r3, #0]
    925c:	4871      	ldr	r0, [pc, #452]	; (9424 <sercom_proc+0x324>)
    925e:	238c      	movs	r3, #140	; 0x8c
    9260:	0099      	lsls	r1, r3, #2
    9262:	0013      	movs	r3, r2
    9264:	00db      	lsls	r3, r3, #3
    9266:	189b      	adds	r3, r3, r2
    9268:	019b      	lsls	r3, r3, #6
    926a:	18c3      	adds	r3, r0, r3
    926c:	185b      	adds	r3, r3, r1
    926e:	881b      	ldrh	r3, [r3, #0]
    9270:	b29b      	uxth	r3, r3
    9272:	3301      	adds	r3, #1
    9274:	b29c      	uxth	r4, r3
    9276:	486b      	ldr	r0, [pc, #428]	; (9424 <sercom_proc+0x324>)
    9278:	238c      	movs	r3, #140	; 0x8c
    927a:	0099      	lsls	r1, r3, #2
    927c:	0013      	movs	r3, r2
    927e:	00db      	lsls	r3, r3, #3
    9280:	189b      	adds	r3, r3, r2
    9282:	019b      	lsls	r3, r3, #6
    9284:	18c3      	adds	r3, r0, r3
    9286:	185b      	adds	r3, r3, r1
    9288:	1c22      	adds	r2, r4, #0
    928a:	801a      	strh	r2, [r3, #0]
    928c:	1dfb      	adds	r3, r7, #7
    928e:	781a      	ldrb	r2, [r3, #0]
    9290:	4964      	ldr	r1, [pc, #400]	; (9424 <sercom_proc+0x324>)
    9292:	0013      	movs	r3, r2
    9294:	00db      	lsls	r3, r3, #3
    9296:	189b      	adds	r3, r3, r2
    9298:	019b      	lsls	r3, r3, #6
    929a:	585a      	ldr	r2, [r3, r1]
    929c:	8b53      	ldrh	r3, [r2, #26]
    929e:	2102      	movs	r1, #2
    92a0:	430b      	orrs	r3, r1
    92a2:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.PERR)		{port[n_port].errors.prty++;			port[n_port].sercom->USART.STATUS.bit.PERR   = 1;}
    92a4:	1dfb      	adds	r3, r7, #7
    92a6:	781a      	ldrb	r2, [r3, #0]
    92a8:	495e      	ldr	r1, [pc, #376]	; (9424 <sercom_proc+0x324>)
    92aa:	0013      	movs	r3, r2
    92ac:	00db      	lsls	r3, r3, #3
    92ae:	189b      	adds	r3, r3, r2
    92b0:	019b      	lsls	r3, r3, #6
    92b2:	585b      	ldr	r3, [r3, r1]
    92b4:	8b5b      	ldrh	r3, [r3, #26]
    92b6:	07db      	lsls	r3, r3, #31
    92b8:	0fdb      	lsrs	r3, r3, #31
    92ba:	b2db      	uxtb	r3, r3
    92bc:	2b00      	cmp	r3, #0
    92be:	d023      	beq.n	9308 <sercom_proc+0x208>
    92c0:	1dfb      	adds	r3, r7, #7
    92c2:	781a      	ldrb	r2, [r3, #0]
    92c4:	4957      	ldr	r1, [pc, #348]	; (9424 <sercom_proc+0x324>)
    92c6:	485a      	ldr	r0, [pc, #360]	; (9430 <sercom_proc+0x330>)
    92c8:	0013      	movs	r3, r2
    92ca:	00db      	lsls	r3, r3, #3
    92cc:	189b      	adds	r3, r3, r2
    92ce:	019b      	lsls	r3, r3, #6
    92d0:	18cb      	adds	r3, r1, r3
    92d2:	181b      	adds	r3, r3, r0
    92d4:	881b      	ldrh	r3, [r3, #0]
    92d6:	b29b      	uxth	r3, r3
    92d8:	3301      	adds	r3, #1
    92da:	b29c      	uxth	r4, r3
    92dc:	4951      	ldr	r1, [pc, #324]	; (9424 <sercom_proc+0x324>)
    92de:	4854      	ldr	r0, [pc, #336]	; (9430 <sercom_proc+0x330>)
    92e0:	0013      	movs	r3, r2
    92e2:	00db      	lsls	r3, r3, #3
    92e4:	189b      	adds	r3, r3, r2
    92e6:	019b      	lsls	r3, r3, #6
    92e8:	18cb      	adds	r3, r1, r3
    92ea:	181b      	adds	r3, r3, r0
    92ec:	1c22      	adds	r2, r4, #0
    92ee:	801a      	strh	r2, [r3, #0]
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781a      	ldrb	r2, [r3, #0]
    92f4:	494b      	ldr	r1, [pc, #300]	; (9424 <sercom_proc+0x324>)
    92f6:	0013      	movs	r3, r2
    92f8:	00db      	lsls	r3, r3, #3
    92fa:	189b      	adds	r3, r3, r2
    92fc:	019b      	lsls	r3, r3, #6
    92fe:	585a      	ldr	r2, [r3, r1]
    9300:	8b53      	ldrh	r3, [r2, #26]
    9302:	2101      	movs	r1, #1
    9304:	430b      	orrs	r3, r1
    9306:	8353      	strh	r3, [r2, #26]
		
	if (port[n_port].sercom->USART.INTFLAG.bit.RXC)
    9308:	1dfb      	adds	r3, r7, #7
    930a:	781a      	ldrb	r2, [r3, #0]
    930c:	4945      	ldr	r1, [pc, #276]	; (9424 <sercom_proc+0x324>)
    930e:	0013      	movs	r3, r2
    9310:	00db      	lsls	r3, r3, #3
    9312:	189b      	adds	r3, r3, r2
    9314:	019b      	lsls	r3, r3, #6
    9316:	585b      	ldr	r3, [r3, r1]
    9318:	7e1b      	ldrb	r3, [r3, #24]
    931a:	075b      	lsls	r3, r3, #29
    931c:	0fdb      	lsrs	r3, r3, #31
    931e:	b2db      	uxtb	r3, r3
    9320:	2b00      	cmp	r3, #0
    9322:	d100      	bne.n	9326 <sercom_proc+0x226>
    9324:	e08a      	b.n	943c <sercom_proc+0x33c>
	{
		port[n_port].rxc++;
    9326:	1dfb      	adds	r3, r7, #7
    9328:	781a      	ldrb	r2, [r3, #0]
    932a:	493e      	ldr	r1, [pc, #248]	; (9424 <sercom_proc+0x324>)
    932c:	4841      	ldr	r0, [pc, #260]	; (9434 <sercom_proc+0x334>)
    932e:	0013      	movs	r3, r2
    9330:	00db      	lsls	r3, r3, #3
    9332:	189b      	adds	r3, r3, r2
    9334:	019b      	lsls	r3, r3, #6
    9336:	18cb      	adds	r3, r1, r3
    9338:	181b      	adds	r3, r3, r0
    933a:	881b      	ldrh	r3, [r3, #0]
    933c:	b29b      	uxth	r3, r3
    933e:	3301      	adds	r3, #1
    9340:	b29c      	uxth	r4, r3
    9342:	4938      	ldr	r1, [pc, #224]	; (9424 <sercom_proc+0x324>)
    9344:	483b      	ldr	r0, [pc, #236]	; (9434 <sercom_proc+0x334>)
    9346:	0013      	movs	r3, r2
    9348:	00db      	lsls	r3, r3, #3
    934a:	189b      	adds	r3, r3, r2
    934c:	019b      	lsls	r3, r3, #6
    934e:	18cb      	adds	r3, r1, r3
    9350:	181b      	adds	r3, r3, r0
    9352:	1c22      	adds	r2, r4, #0
    9354:	801a      	strh	r2, [r3, #0]
		if(port[n_port].rn >= USART_BUF_SIZE){port[n_port].rn = 0;}
    9356:	1dfb      	adds	r3, r7, #7
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	4932      	ldr	r1, [pc, #200]	; (9424 <sercom_proc+0x324>)
    935c:	4836      	ldr	r0, [pc, #216]	; (9438 <sercom_proc+0x338>)
    935e:	0013      	movs	r3, r2
    9360:	00db      	lsls	r3, r3, #3
    9362:	189b      	adds	r3, r3, r2
    9364:	019b      	lsls	r3, r3, #6
    9366:	18cb      	adds	r3, r1, r3
    9368:	181b      	adds	r3, r3, r0
    936a:	881b      	ldrh	r3, [r3, #0]
    936c:	b29b      	uxth	r3, r3
    936e:	2bff      	cmp	r3, #255	; 0xff
    9370:	d90b      	bls.n	938a <sercom_proc+0x28a>
    9372:	1dfb      	adds	r3, r7, #7
    9374:	781a      	ldrb	r2, [r3, #0]
    9376:	492b      	ldr	r1, [pc, #172]	; (9424 <sercom_proc+0x324>)
    9378:	482f      	ldr	r0, [pc, #188]	; (9438 <sercom_proc+0x338>)
    937a:	0013      	movs	r3, r2
    937c:	00db      	lsls	r3, r3, #3
    937e:	189b      	adds	r3, r3, r2
    9380:	019b      	lsls	r3, r3, #6
    9382:	18cb      	adds	r3, r1, r3
    9384:	181b      	adds	r3, r3, r0
    9386:	2200      	movs	r2, #0
    9388:	801a      	strh	r2, [r3, #0]
		port[n_port].rbuf[port[n_port].rn] = port[n_port].sercom->USART.DATA.reg;
    938a:	1dfb      	adds	r3, r7, #7
    938c:	781a      	ldrb	r2, [r3, #0]
    938e:	1dfb      	adds	r3, r7, #7
    9390:	7819      	ldrb	r1, [r3, #0]
    9392:	4824      	ldr	r0, [pc, #144]	; (9424 <sercom_proc+0x324>)
    9394:	4c28      	ldr	r4, [pc, #160]	; (9438 <sercom_proc+0x338>)
    9396:	000b      	movs	r3, r1
    9398:	00db      	lsls	r3, r3, #3
    939a:	185b      	adds	r3, r3, r1
    939c:	019b      	lsls	r3, r3, #6
    939e:	18c3      	adds	r3, r0, r3
    93a0:	191b      	adds	r3, r3, r4
    93a2:	881b      	ldrh	r3, [r3, #0]
    93a4:	b29b      	uxth	r3, r3
    93a6:	001d      	movs	r5, r3
    93a8:	1dfb      	adds	r3, r7, #7
    93aa:	7819      	ldrb	r1, [r3, #0]
    93ac:	481d      	ldr	r0, [pc, #116]	; (9424 <sercom_proc+0x324>)
    93ae:	000b      	movs	r3, r1
    93b0:	00db      	lsls	r3, r3, #3
    93b2:	185b      	adds	r3, r3, r1
    93b4:	019b      	lsls	r3, r3, #6
    93b6:	581b      	ldr	r3, [r3, r0]
    93b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93ba:	b29b      	uxth	r3, r3
    93bc:	b2dc      	uxtb	r4, r3
    93be:	4819      	ldr	r0, [pc, #100]	; (9424 <sercom_proc+0x324>)
    93c0:	230a      	movs	r3, #10
    93c2:	33ff      	adds	r3, #255	; 0xff
    93c4:	0019      	movs	r1, r3
    93c6:	0013      	movs	r3, r2
    93c8:	00db      	lsls	r3, r3, #3
    93ca:	189b      	adds	r3, r3, r2
    93cc:	019b      	lsls	r3, r3, #6
    93ce:	18c3      	adds	r3, r0, r3
    93d0:	195b      	adds	r3, r3, r5
    93d2:	185b      	adds	r3, r3, r1
    93d4:	1c22      	adds	r2, r4, #0
    93d6:	701a      	strb	r2, [r3, #0]
		port[n_port].rn++;
    93d8:	1dfb      	adds	r3, r7, #7
    93da:	781a      	ldrb	r2, [r3, #0]
    93dc:	4911      	ldr	r1, [pc, #68]	; (9424 <sercom_proc+0x324>)
    93de:	4816      	ldr	r0, [pc, #88]	; (9438 <sercom_proc+0x338>)
    93e0:	0013      	movs	r3, r2
    93e2:	00db      	lsls	r3, r3, #3
    93e4:	189b      	adds	r3, r3, r2
    93e6:	019b      	lsls	r3, r3, #6
    93e8:	18cb      	adds	r3, r1, r3
    93ea:	181b      	adds	r3, r3, r0
    93ec:	881b      	ldrh	r3, [r3, #0]
    93ee:	b29b      	uxth	r3, r3
    93f0:	3301      	adds	r3, #1
    93f2:	b29c      	uxth	r4, r3
    93f4:	490b      	ldr	r1, [pc, #44]	; (9424 <sercom_proc+0x324>)
    93f6:	4810      	ldr	r0, [pc, #64]	; (9438 <sercom_proc+0x338>)
    93f8:	0013      	movs	r3, r2
    93fa:	00db      	lsls	r3, r3, #3
    93fc:	189b      	adds	r3, r3, r2
    93fe:	019b      	lsls	r3, r3, #6
    9400:	18cb      	adds	r3, r1, r3
    9402:	181b      	adds	r3, r3, r0
    9404:	1c22      	adds	r2, r4, #0
    9406:	801a      	strh	r2, [r3, #0]
		port[n_port].rtime = 0;
    9408:	1dfb      	adds	r3, r7, #7
    940a:	781a      	ldrb	r2, [r3, #0]
    940c:	4805      	ldr	r0, [pc, #20]	; (9424 <sercom_proc+0x324>)
    940e:	2385      	movs	r3, #133	; 0x85
    9410:	0099      	lsls	r1, r3, #2
    9412:	0013      	movs	r3, r2
    9414:	00db      	lsls	r3, r3, #3
    9416:	189b      	adds	r3, r3, r2
    9418:	019b      	lsls	r3, r3, #6
    941a:	18c3      	adds	r3, r0, r3
    941c:	185b      	adds	r3, r3, r1
    941e:	2200      	movs	r2, #0
    9420:	801a      	strh	r2, [r3, #0]
		return;
    9422:	e0fb      	b.n	961c <sercom_proc+0x51c>
    9424:	200031fc 	.word	0x200031fc
    9428:	0000022a 	.word	0x0000022a
    942c:	0000022e 	.word	0x0000022e
    9430:	00000232 	.word	0x00000232
    9434:	00000226 	.word	0x00000226
    9438:	0000020e 	.word	0x0000020e
	}

	if(port[n_port].sercom->USART.INTFLAG.bit.TXC)
    943c:	1dfb      	adds	r3, r7, #7
    943e:	781a      	ldrb	r2, [r3, #0]
    9440:	4978      	ldr	r1, [pc, #480]	; (9624 <sercom_proc+0x524>)
    9442:	0013      	movs	r3, r2
    9444:	00db      	lsls	r3, r3, #3
    9446:	189b      	adds	r3, r3, r2
    9448:	019b      	lsls	r3, r3, #6
    944a:	585b      	ldr	r3, [r3, r1]
    944c:	7e1b      	ldrb	r3, [r3, #24]
    944e:	079b      	lsls	r3, r3, #30
    9450:	0fdb      	lsrs	r3, r3, #31
    9452:	b2db      	uxtb	r3, r3
    9454:	2b00      	cmp	r3, #0
    9456:	d045      	beq.n	94e4 <sercom_proc+0x3e4>
	{
		port[n_port].txc++;
    9458:	1dfb      	adds	r3, r7, #7
    945a:	781a      	ldrb	r2, [r3, #0]
    945c:	4871      	ldr	r0, [pc, #452]	; (9624 <sercom_proc+0x524>)
    945e:	238a      	movs	r3, #138	; 0x8a
    9460:	0099      	lsls	r1, r3, #2
    9462:	0013      	movs	r3, r2
    9464:	00db      	lsls	r3, r3, #3
    9466:	189b      	adds	r3, r3, r2
    9468:	019b      	lsls	r3, r3, #6
    946a:	18c3      	adds	r3, r0, r3
    946c:	185b      	adds	r3, r3, r1
    946e:	881b      	ldrh	r3, [r3, #0]
    9470:	b29b      	uxth	r3, r3
    9472:	3301      	adds	r3, #1
    9474:	b29c      	uxth	r4, r3
    9476:	486b      	ldr	r0, [pc, #428]	; (9624 <sercom_proc+0x524>)
    9478:	238a      	movs	r3, #138	; 0x8a
    947a:	0099      	lsls	r1, r3, #2
    947c:	0013      	movs	r3, r2
    947e:	00db      	lsls	r3, r3, #3
    9480:	189b      	adds	r3, r3, r2
    9482:	019b      	lsls	r3, r3, #6
    9484:	18c3      	adds	r3, r0, r3
    9486:	185b      	adds	r3, r3, r1
    9488:	1c22      	adds	r2, r4, #0
    948a:	801a      	strh	r2, [r3, #0]
		port[n_port].sercom->USART.INTFLAG.bit.TXC = 1;
    948c:	1dfb      	adds	r3, r7, #7
    948e:	781a      	ldrb	r2, [r3, #0]
    9490:	4964      	ldr	r1, [pc, #400]	; (9624 <sercom_proc+0x524>)
    9492:	0013      	movs	r3, r2
    9494:	00db      	lsls	r3, r3, #3
    9496:	189b      	adds	r3, r3, r2
    9498:	019b      	lsls	r3, r3, #6
    949a:	585a      	ldr	r2, [r3, r1]
    949c:	7e13      	ldrb	r3, [r2, #24]
    949e:	2102      	movs	r1, #2
    94a0:	430b      	orrs	r3, r1
    94a2:	7613      	strb	r3, [r2, #24]
		pin_ctrl(RTS, n_port, CLR);
    94a4:	1dfb      	adds	r3, r7, #7
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	2202      	movs	r2, #2
    94aa:	0019      	movs	r1, r3
    94ac:	2000      	movs	r0, #0
    94ae:	4b5e      	ldr	r3, [pc, #376]	; (9628 <sercom_proc+0x528>)
    94b0:	4798      	blx	r3
		port[n_port].sercom->USART.INTENCLR.bit.TXC = 1;
    94b2:	1dfb      	adds	r3, r7, #7
    94b4:	781a      	ldrb	r2, [r3, #0]
    94b6:	495b      	ldr	r1, [pc, #364]	; (9624 <sercom_proc+0x524>)
    94b8:	0013      	movs	r3, r2
    94ba:	00db      	lsls	r3, r3, #3
    94bc:	189b      	adds	r3, r3, r2
    94be:	019b      	lsls	r3, r3, #6
    94c0:	585a      	ldr	r2, [r3, r1]
    94c2:	7d13      	ldrb	r3, [r2, #20]
    94c4:	2102      	movs	r1, #2
    94c6:	430b      	orrs	r3, r1
    94c8:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.RXC = 1;
    94ca:	1dfb      	adds	r3, r7, #7
    94cc:	781a      	ldrb	r2, [r3, #0]
    94ce:	4955      	ldr	r1, [pc, #340]	; (9624 <sercom_proc+0x524>)
    94d0:	0013      	movs	r3, r2
    94d2:	00db      	lsls	r3, r3, #3
    94d4:	189b      	adds	r3, r3, r2
    94d6:	019b      	lsls	r3, r3, #6
    94d8:	585a      	ldr	r2, [r3, r1]
    94da:	7d93      	ldrb	r3, [r2, #22]
    94dc:	2104      	movs	r1, #4
    94de:	430b      	orrs	r3, r1
    94e0:	7593      	strb	r3, [r2, #22]
		return;
    94e2:	e09b      	b.n	961c <sercom_proc+0x51c>
	}
	
	if(port[n_port].sercom->USART.INTFLAG.bit.DRE)
    94e4:	1dfb      	adds	r3, r7, #7
    94e6:	781a      	ldrb	r2, [r3, #0]
    94e8:	494e      	ldr	r1, [pc, #312]	; (9624 <sercom_proc+0x524>)
    94ea:	0013      	movs	r3, r2
    94ec:	00db      	lsls	r3, r3, #3
    94ee:	189b      	adds	r3, r3, r2
    94f0:	019b      	lsls	r3, r3, #6
    94f2:	585b      	ldr	r3, [r3, r1]
    94f4:	7e1b      	ldrb	r3, [r3, #24]
    94f6:	07db      	lsls	r3, r3, #31
    94f8:	0fdb      	lsrs	r3, r3, #31
    94fa:	b2db      	uxtb	r3, r3
    94fc:	2b00      	cmp	r3, #0
    94fe:	d100      	bne.n	9502 <sercom_proc+0x402>
    9500:	e08c      	b.n	961c <sercom_proc+0x51c>
	{
		port[n_port].dre++;
    9502:	1dfb      	adds	r3, r7, #7
    9504:	781a      	ldrb	r2, [r3, #0]
    9506:	4847      	ldr	r0, [pc, #284]	; (9624 <sercom_proc+0x524>)
    9508:	2389      	movs	r3, #137	; 0x89
    950a:	0099      	lsls	r1, r3, #2
    950c:	0013      	movs	r3, r2
    950e:	00db      	lsls	r3, r3, #3
    9510:	189b      	adds	r3, r3, r2
    9512:	019b      	lsls	r3, r3, #6
    9514:	18c3      	adds	r3, r0, r3
    9516:	185b      	adds	r3, r3, r1
    9518:	881b      	ldrh	r3, [r3, #0]
    951a:	b29b      	uxth	r3, r3
    951c:	3301      	adds	r3, #1
    951e:	b29c      	uxth	r4, r3
    9520:	4840      	ldr	r0, [pc, #256]	; (9624 <sercom_proc+0x524>)
    9522:	2389      	movs	r3, #137	; 0x89
    9524:	0099      	lsls	r1, r3, #2
    9526:	0013      	movs	r3, r2
    9528:	00db      	lsls	r3, r3, #3
    952a:	189b      	adds	r3, r3, r2
    952c:	019b      	lsls	r3, r3, #6
    952e:	18c3      	adds	r3, r0, r3
    9530:	185b      	adds	r3, r3, r1
    9532:	1c22      	adds	r2, r4, #0
    9534:	801a      	strh	r2, [r3, #0]
		if(port[n_port].wx < port[n_port].wn)
    9536:	1dfb      	adds	r3, r7, #7
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	483a      	ldr	r0, [pc, #232]	; (9624 <sercom_proc+0x524>)
    953c:	2383      	movs	r3, #131	; 0x83
    953e:	0099      	lsls	r1, r3, #2
    9540:	0013      	movs	r3, r2
    9542:	00db      	lsls	r3, r3, #3
    9544:	189b      	adds	r3, r3, r2
    9546:	019b      	lsls	r3, r3, #6
    9548:	18c3      	adds	r3, r0, r3
    954a:	185b      	adds	r3, r3, r1
    954c:	881b      	ldrh	r3, [r3, #0]
    954e:	b299      	uxth	r1, r3
    9550:	1dfb      	adds	r3, r7, #7
    9552:	781a      	ldrb	r2, [r3, #0]
    9554:	4833      	ldr	r0, [pc, #204]	; (9624 <sercom_proc+0x524>)
    9556:	4c35      	ldr	r4, [pc, #212]	; (962c <sercom_proc+0x52c>)
    9558:	0013      	movs	r3, r2
    955a:	00db      	lsls	r3, r3, #3
    955c:	189b      	adds	r3, r3, r2
    955e:	019b      	lsls	r3, r3, #6
    9560:	18c3      	adds	r3, r0, r3
    9562:	191b      	adds	r3, r3, r4
    9564:	881b      	ldrh	r3, [r3, #0]
    9566:	b29b      	uxth	r3, r3
    9568:	4299      	cmp	r1, r3
    956a:	d23e      	bcs.n	95ea <sercom_proc+0x4ea>
		{
			port[n_port].sercom->USART.DATA.reg = port[n_port].wbuf[port[n_port].wx];
    956c:	1dfb      	adds	r3, r7, #7
    956e:	781a      	ldrb	r2, [r3, #0]
    9570:	492c      	ldr	r1, [pc, #176]	; (9624 <sercom_proc+0x524>)
    9572:	0013      	movs	r3, r2
    9574:	00db      	lsls	r3, r3, #3
    9576:	189b      	adds	r3, r3, r2
    9578:	019b      	lsls	r3, r3, #6
    957a:	5858      	ldr	r0, [r3, r1]
    957c:	1dfb      	adds	r3, r7, #7
    957e:	781a      	ldrb	r2, [r3, #0]
    9580:	1dfb      	adds	r3, r7, #7
    9582:	7819      	ldrb	r1, [r3, #0]
    9584:	4d27      	ldr	r5, [pc, #156]	; (9624 <sercom_proc+0x524>)
    9586:	2383      	movs	r3, #131	; 0x83
    9588:	009c      	lsls	r4, r3, #2
    958a:	000b      	movs	r3, r1
    958c:	00db      	lsls	r3, r3, #3
    958e:	185b      	adds	r3, r3, r1
    9590:	019b      	lsls	r3, r3, #6
    9592:	18eb      	adds	r3, r5, r3
    9594:	191b      	adds	r3, r3, r4
    9596:	881b      	ldrh	r3, [r3, #0]
    9598:	b29b      	uxth	r3, r3
    959a:	001c      	movs	r4, r3
    959c:	4921      	ldr	r1, [pc, #132]	; (9624 <sercom_proc+0x524>)
    959e:	0013      	movs	r3, r2
    95a0:	00db      	lsls	r3, r3, #3
    95a2:	189b      	adds	r3, r3, r2
    95a4:	019b      	lsls	r3, r3, #6
    95a6:	18cb      	adds	r3, r1, r3
    95a8:	191b      	adds	r3, r3, r4
    95aa:	3309      	adds	r3, #9
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	b2db      	uxtb	r3, r3
    95b0:	b29b      	uxth	r3, r3
    95b2:	8503      	strh	r3, [r0, #40]	; 0x28
			port[n_port].wx  ++;
    95b4:	1dfb      	adds	r3, r7, #7
    95b6:	781a      	ldrb	r2, [r3, #0]
    95b8:	481a      	ldr	r0, [pc, #104]	; (9624 <sercom_proc+0x524>)
    95ba:	2383      	movs	r3, #131	; 0x83
    95bc:	0099      	lsls	r1, r3, #2
    95be:	0013      	movs	r3, r2
    95c0:	00db      	lsls	r3, r3, #3
    95c2:	189b      	adds	r3, r3, r2
    95c4:	019b      	lsls	r3, r3, #6
    95c6:	18c3      	adds	r3, r0, r3
    95c8:	185b      	adds	r3, r3, r1
    95ca:	881b      	ldrh	r3, [r3, #0]
    95cc:	b29b      	uxth	r3, r3
    95ce:	3301      	adds	r3, #1
    95d0:	b29c      	uxth	r4, r3
    95d2:	4814      	ldr	r0, [pc, #80]	; (9624 <sercom_proc+0x524>)
    95d4:	2383      	movs	r3, #131	; 0x83
    95d6:	0099      	lsls	r1, r3, #2
    95d8:	0013      	movs	r3, r2
    95da:	00db      	lsls	r3, r3, #3
    95dc:	189b      	adds	r3, r3, r2
    95de:	019b      	lsls	r3, r3, #6
    95e0:	18c3      	adds	r3, r0, r3
    95e2:	185b      	adds	r3, r3, r1
    95e4:	1c22      	adds	r2, r4, #0
    95e6:	801a      	strh	r2, [r3, #0]
			return;
    95e8:	e018      	b.n	961c <sercom_proc+0x51c>
		}
		port[n_port].sercom->USART.INTENCLR.bit.DRE=1;
    95ea:	1dfb      	adds	r3, r7, #7
    95ec:	781a      	ldrb	r2, [r3, #0]
    95ee:	490d      	ldr	r1, [pc, #52]	; (9624 <sercom_proc+0x524>)
    95f0:	0013      	movs	r3, r2
    95f2:	00db      	lsls	r3, r3, #3
    95f4:	189b      	adds	r3, r3, r2
    95f6:	019b      	lsls	r3, r3, #6
    95f8:	585a      	ldr	r2, [r3, r1]
    95fa:	7d13      	ldrb	r3, [r2, #20]
    95fc:	2101      	movs	r1, #1
    95fe:	430b      	orrs	r3, r1
    9600:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.TXC=1;
    9602:	1dfb      	adds	r3, r7, #7
    9604:	781a      	ldrb	r2, [r3, #0]
    9606:	4907      	ldr	r1, [pc, #28]	; (9624 <sercom_proc+0x524>)
    9608:	0013      	movs	r3, r2
    960a:	00db      	lsls	r3, r3, #3
    960c:	189b      	adds	r3, r3, r2
    960e:	019b      	lsls	r3, r3, #6
    9610:	585a      	ldr	r2, [r3, r1]
    9612:	7d93      	ldrb	r3, [r2, #22]
    9614:	2102      	movs	r1, #2
    9616:	430b      	orrs	r3, r1
    9618:	7593      	strb	r3, [r2, #22]
		return;
    961a:	46c0      	nop			; (mov r8, r8)
	}
};
    961c:	46bd      	mov	sp, r7
    961e:	b002      	add	sp, #8
    9620:	bdb0      	pop	{r4, r5, r7, pc}
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	200031fc 	.word	0x200031fc
    9628:	00006d55 	.word	0x00006d55
    962c:	0000020a 	.word	0x0000020a

00009630 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    9630:	b580      	push	{r7, lr}
    9632:	af00      	add	r7, sp, #0
	sercom_proc(0);
    9634:	2000      	movs	r0, #0
    9636:	f7ff fd63 	bl	9100 <sercom_proc>
}
    963a:	46c0      	nop			; (mov r8, r8)
    963c:	46bd      	mov	sp, r7
    963e:	bd80      	pop	{r7, pc}

00009640 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    9640:	b580      	push	{r7, lr}
    9642:	af00      	add	r7, sp, #0
	sercom_proc(1);
    9644:	2001      	movs	r0, #1
    9646:	f7ff fd5b 	bl	9100 <sercom_proc>
}
    964a:	46c0      	nop			; (mov r8, r8)
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}

00009650 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    9650:	b580      	push	{r7, lr}
    9652:	af00      	add	r7, sp, #0
	sercom_proc(2);
    9654:	2002      	movs	r0, #2
    9656:	f7ff fd53 	bl	9100 <sercom_proc>
}
    965a:	46c0      	nop			; (mov r8, r8)
    965c:	46bd      	mov	sp, r7
    965e:	bd80      	pop	{r7, pc}

00009660 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    9660:	b580      	push	{r7, lr}
    9662:	af00      	add	r7, sp, #0
	sercom_proc(3);
    9664:	2003      	movs	r0, #3
    9666:	f7ff fd4b 	bl	9100 <sercom_proc>
}
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	46bd      	mov	sp, r7
    966e:	bd80      	pop	{r7, pc}

00009670 <w5500_init_reg>:

volatile BYTE ip_tcp[4];


BYTE w5500_init_reg(void)
{
    9670:	b580      	push	{r7, lr}
    9672:	af00      	add	r7, sp, #0
	pin_ctrl(W55,PWR,SET);
    9674:	2201      	movs	r2, #1
    9676:	2100      	movs	r1, #0
    9678:	2002      	movs	r0, #2
    967a:	4b19      	ldr	r3, [pc, #100]	; (96e0 <w5500_init_reg+0x70>)
    967c:	4798      	blx	r3
	
	
		
	if(ip_init()	)	{err_dword.ip_init_er   = 1;	return ERROR;}
    967e:	f000 f893 	bl	97a8 <ip_init>
    9682:	1e03      	subs	r3, r0, #0
    9684:	d007      	beq.n	9696 <w5500_init_reg+0x26>
    9686:	4b17      	ldr	r3, [pc, #92]	; (96e4 <w5500_init_reg+0x74>)
    9688:	781a      	ldrb	r2, [r3, #0]
    968a:	2180      	movs	r1, #128	; 0x80
    968c:	4249      	negs	r1, r1
    968e:	430a      	orrs	r2, r1
    9690:	701a      	strb	r2, [r3, #0]
    9692:	2302      	movs	r3, #2
    9694:	e021      	b.n	96da <w5500_init_reg+0x6a>
	if(mask_init()	)	{err_dword.mask_init_er = 1;	return ERROR;}
    9696:	f000 f867 	bl	9768 <mask_init>
    969a:	1e03      	subs	r3, r0, #0
    969c:	d006      	beq.n	96ac <w5500_init_reg+0x3c>
    969e:	4b11      	ldr	r3, [pc, #68]	; (96e4 <w5500_init_reg+0x74>)
    96a0:	785a      	ldrb	r2, [r3, #1]
    96a2:	2101      	movs	r1, #1
    96a4:	430a      	orrs	r2, r1
    96a6:	705a      	strb	r2, [r3, #1]
    96a8:	2302      	movs	r3, #2
    96aa:	e016      	b.n	96da <w5500_init_reg+0x6a>
	if(gw_init()	)	{err_dword.gw_init_er   = 1;	return ERROR;}		
    96ac:	f000 f83c 	bl	9728 <gw_init>
    96b0:	1e03      	subs	r3, r0, #0
    96b2:	d006      	beq.n	96c2 <w5500_init_reg+0x52>
    96b4:	4b0b      	ldr	r3, [pc, #44]	; (96e4 <w5500_init_reg+0x74>)
    96b6:	785a      	ldrb	r2, [r3, #1]
    96b8:	2102      	movs	r1, #2
    96ba:	430a      	orrs	r2, r1
    96bc:	705a      	strb	r2, [r3, #1]
    96be:	2302      	movs	r3, #2
    96c0:	e00b      	b.n	96da <w5500_init_reg+0x6a>
	if(mac_init()	)	{err_dword.mac_init_er  = 1;	return ERROR;}
    96c2:	f000 f811 	bl	96e8 <mac_init>
    96c6:	1e03      	subs	r3, r0, #0
    96c8:	d006      	beq.n	96d8 <w5500_init_reg+0x68>
    96ca:	4b06      	ldr	r3, [pc, #24]	; (96e4 <w5500_init_reg+0x74>)
    96cc:	785a      	ldrb	r2, [r3, #1]
    96ce:	2104      	movs	r1, #4
    96d0:	430a      	orrs	r2, r1
    96d2:	705a      	strb	r2, [r3, #1]
    96d4:	2302      	movs	r3, #2
    96d6:	e000      	b.n	96da <w5500_init_reg+0x6a>
		
	return SUCCESS;
    96d8:	2300      	movs	r3, #0
}
    96da:	0018      	movs	r0, r3
    96dc:	46bd      	mov	sp, r7
    96de:	bd80      	pop	{r7, pc}
    96e0:	00006d55 	.word	0x00006d55
    96e4:	20002550 	.word	0x20002550

000096e8 <mac_init>:

BYTE mac_init(void)
{
    96e8:	b5b0      	push	{r4, r5, r7, lr}
    96ea:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MAC_ADDR_0,COMMON_REGISTER,cfg_2.mac_addr,sizeof(cfg_2.mac_addr),10);
    96ec:	4b0b      	ldr	r3, [pc, #44]	; (971c <mac_init+0x34>)
    96ee:	220a      	movs	r2, #10
    96f0:	801a      	strh	r2, [r3, #0]
    96f2:	e006      	b.n	9702 <mac_init+0x1a>
    96f4:	4b09      	ldr	r3, [pc, #36]	; (971c <mac_init+0x34>)
    96f6:	881b      	ldrh	r3, [r3, #0]
    96f8:	b29b      	uxth	r3, r3
    96fa:	2b00      	cmp	r3, #0
    96fc:	d101      	bne.n	9702 <mac_init+0x1a>
    96fe:	2301      	movs	r3, #1
    9700:	e008      	b.n	9714 <mac_init+0x2c>
    9702:	4a07      	ldr	r2, [pc, #28]	; (9720 <mac_init+0x38>)
    9704:	2306      	movs	r3, #6
    9706:	2100      	movs	r1, #0
    9708:	2009      	movs	r0, #9
    970a:	4c06      	ldr	r4, [pc, #24]	; (9724 <mac_init+0x3c>)
    970c:	47a0      	blx	r4
    970e:	1e03      	subs	r3, r0, #0
    9710:	d0f0      	beq.n	96f4 <mac_init+0xc>
	return SUCCESS;
    9712:	2300      	movs	r3, #0
}
    9714:	0018      	movs	r0, r3
    9716:	46bd      	mov	sp, r7
    9718:	bdb0      	pop	{r4, r5, r7, pc}
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	200031f4 	.word	0x200031f4
    9720:	20003bc8 	.word	0x20003bc8
    9724:	00007929 	.word	0x00007929

00009728 <gw_init>:
BYTE gw_init(void)
{
    9728:	b5b0      	push	{r4, r5, r7, lr}
    972a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_GATEWAY_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_gate,sizeof(cfg_1.com_network.ip_gate),10);
    972c:	4b0b      	ldr	r3, [pc, #44]	; (975c <gw_init+0x34>)
    972e:	220a      	movs	r2, #10
    9730:	801a      	strh	r2, [r3, #0]
    9732:	e006      	b.n	9742 <gw_init+0x1a>
    9734:	4b09      	ldr	r3, [pc, #36]	; (975c <gw_init+0x34>)
    9736:	881b      	ldrh	r3, [r3, #0]
    9738:	b29b      	uxth	r3, r3
    973a:	2b00      	cmp	r3, #0
    973c:	d101      	bne.n	9742 <gw_init+0x1a>
    973e:	2301      	movs	r3, #1
    9740:	e008      	b.n	9754 <gw_init+0x2c>
    9742:	4a07      	ldr	r2, [pc, #28]	; (9760 <gw_init+0x38>)
    9744:	2304      	movs	r3, #4
    9746:	2100      	movs	r1, #0
    9748:	2001      	movs	r0, #1
    974a:	4c06      	ldr	r4, [pc, #24]	; (9764 <gw_init+0x3c>)
    974c:	47a0      	blx	r4
    974e:	1e03      	subs	r3, r0, #0
    9750:	d0f0      	beq.n	9734 <gw_init+0xc>
	return SUCCESS;
    9752:	2300      	movs	r3, #0
}
    9754:	0018      	movs	r0, r3
    9756:	46bd      	mov	sp, r7
    9758:	bdb0      	pop	{r4, r5, r7, pc}
    975a:	46c0      	nop			; (mov r8, r8)
    975c:	200031f4 	.word	0x200031f4
    9760:	20003df8 	.word	0x20003df8
    9764:	00007929 	.word	0x00007929

00009768 <mask_init>:
BYTE mask_init(void)
{
    9768:	b5b0      	push	{r4, r5, r7, lr}
    976a:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MASK_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_mask,sizeof(cfg_1.com_network.ip_mask),10);
    976c:	4b0b      	ldr	r3, [pc, #44]	; (979c <mask_init+0x34>)
    976e:	220a      	movs	r2, #10
    9770:	801a      	strh	r2, [r3, #0]
    9772:	e006      	b.n	9782 <mask_init+0x1a>
    9774:	4b09      	ldr	r3, [pc, #36]	; (979c <mask_init+0x34>)
    9776:	881b      	ldrh	r3, [r3, #0]
    9778:	b29b      	uxth	r3, r3
    977a:	2b00      	cmp	r3, #0
    977c:	d101      	bne.n	9782 <mask_init+0x1a>
    977e:	2301      	movs	r3, #1
    9780:	e008      	b.n	9794 <mask_init+0x2c>
    9782:	4a07      	ldr	r2, [pc, #28]	; (97a0 <mask_init+0x38>)
    9784:	2304      	movs	r3, #4
    9786:	2100      	movs	r1, #0
    9788:	2005      	movs	r0, #5
    978a:	4c06      	ldr	r4, [pc, #24]	; (97a4 <mask_init+0x3c>)
    978c:	47a0      	blx	r4
    978e:	1e03      	subs	r3, r0, #0
    9790:	d0f0      	beq.n	9774 <mask_init+0xc>
	return SUCCESS;
    9792:	2300      	movs	r3, #0
}
    9794:	0018      	movs	r0, r3
    9796:	46bd      	mov	sp, r7
    9798:	bdb0      	pop	{r4, r5, r7, pc}
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	200031f4 	.word	0x200031f4
    97a0:	20003df4 	.word	0x20003df4
    97a4:	00007929 	.word	0x00007929

000097a8 <ip_init>:
BYTE ip_init(void)
{
    97a8:	b5b0      	push	{r4, r5, r7, lr}
    97aa:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_SRC_IP_ADR_0,COMMON_REGISTER,cfg_1.com_network.ip_addr,sizeof(cfg_1.com_network.ip_addr),10);
    97ac:	4b0b      	ldr	r3, [pc, #44]	; (97dc <ip_init+0x34>)
    97ae:	220a      	movs	r2, #10
    97b0:	801a      	strh	r2, [r3, #0]
    97b2:	e006      	b.n	97c2 <ip_init+0x1a>
    97b4:	4b09      	ldr	r3, [pc, #36]	; (97dc <ip_init+0x34>)
    97b6:	881b      	ldrh	r3, [r3, #0]
    97b8:	b29b      	uxth	r3, r3
    97ba:	2b00      	cmp	r3, #0
    97bc:	d101      	bne.n	97c2 <ip_init+0x1a>
    97be:	2301      	movs	r3, #1
    97c0:	e008      	b.n	97d4 <ip_init+0x2c>
    97c2:	4a07      	ldr	r2, [pc, #28]	; (97e0 <ip_init+0x38>)
    97c4:	2304      	movs	r3, #4
    97c6:	2100      	movs	r1, #0
    97c8:	200f      	movs	r0, #15
    97ca:	4c06      	ldr	r4, [pc, #24]	; (97e4 <ip_init+0x3c>)
    97cc:	47a0      	blx	r4
    97ce:	1e03      	subs	r3, r0, #0
    97d0:	d0f0      	beq.n	97b4 <ip_init+0xc>
	return SUCCESS;
    97d2:	2300      	movs	r3, #0
}
    97d4:	0018      	movs	r0, r3
    97d6:	46bd      	mov	sp, r7
    97d8:	bdb0      	pop	{r4, r5, r7, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	200031f4 	.word	0x200031f4
    97e0:	20003df0 	.word	0x20003df0
    97e4:	00007929 	.word	0x00007929

000097e8 <w5500_process>:

WORD w5500_process (BYTE spi_mode, BYTE sock_numb)
{
    97e8:	b590      	push	{r4, r7, lr}
    97ea:	b087      	sub	sp, #28
    97ec:	af02      	add	r7, sp, #8
    97ee:	0002      	movs	r2, r0
    97f0:	1dfb      	adds	r3, r7, #7
    97f2:	701a      	strb	r2, [r3, #0]
    97f4:	1dbb      	adds	r3, r7, #6
    97f6:	1c0a      	adds	r2, r1, #0
    97f8:	701a      	strb	r2, [r3, #0]
	static BYTE w5500_st=0;
	WORD rtrn=0;
    97fa:	230e      	movs	r3, #14
    97fc:	18fb      	adds	r3, r7, r3
    97fe:	2200      	movs	r2, #0
    9800:	801a      	strh	r2, [r3, #0]
	if(!cmd_spi_wait){w5500_st=0;return 2;} //if 20 mS no answer, break process
    9802:	4b50      	ldr	r3, [pc, #320]	; (9944 <w5500_process+0x15c>)
    9804:	881b      	ldrh	r3, [r3, #0]
    9806:	b29b      	uxth	r3, r3
    9808:	2b00      	cmp	r3, #0
    980a:	d104      	bne.n	9816 <w5500_process+0x2e>
    980c:	4b4e      	ldr	r3, [pc, #312]	; (9948 <w5500_process+0x160>)
    980e:	2200      	movs	r2, #0
    9810:	701a      	strb	r2, [r3, #0]
    9812:	2302      	movs	r3, #2
    9814:	e091      	b.n	993a <w5500_process+0x152>
		
		
	switch (w5500_st)
    9816:	4b4c      	ldr	r3, [pc, #304]	; (9948 <w5500_process+0x160>)
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	2b05      	cmp	r3, #5
    981c:	d900      	bls.n	9820 <w5500_process+0x38>
    981e:	e085      	b.n	992c <w5500_process+0x144>
    9820:	009a      	lsls	r2, r3, #2
    9822:	4b4a      	ldr	r3, [pc, #296]	; (994c <w5500_process+0x164>)
    9824:	18d3      	adds	r3, r2, r3
    9826:	681b      	ldr	r3, [r3, #0]
    9828:	469f      	mov	pc, r3
	{
		case NULLS:
								w5500_st=spi_mode;
    982a:	4b47      	ldr	r3, [pc, #284]	; (9948 <w5500_process+0x160>)
    982c:	1dfa      	adds	r2, r7, #7
    982e:	7812      	ldrb	r2, [r2, #0]
    9830:	701a      	strb	r2, [r3, #0]
								cmd_spi_wait=time_20ms;
    9832:	4b44      	ldr	r3, [pc, #272]	; (9944 <w5500_process+0x15c>)
    9834:	4a46      	ldr	r2, [pc, #280]	; (9950 <w5500_process+0x168>)
    9836:	801a      	strh	r2, [r3, #0]
								return PROC_WAIT;
    9838:	2300      	movs	r3, #0
    983a:	e07e      	b.n	993a <w5500_process+0x152>
		case SPI_PROCESS:
								if(spi_process(addr_w5500,cb_w5500,ptr_buf,len_buf,cmd)){w5500_st=spi_mode;cmd=0;}
    983c:	4b45      	ldr	r3, [pc, #276]	; (9954 <w5500_process+0x16c>)
    983e:	8818      	ldrh	r0, [r3, #0]
    9840:	4b45      	ldr	r3, [pc, #276]	; (9958 <w5500_process+0x170>)
    9842:	881b      	ldrh	r3, [r3, #0]
    9844:	b2d9      	uxtb	r1, r3
    9846:	4b45      	ldr	r3, [pc, #276]	; (995c <w5500_process+0x174>)
    9848:	681a      	ldr	r2, [r3, #0]
    984a:	4b45      	ldr	r3, [pc, #276]	; (9960 <w5500_process+0x178>)
    984c:	881c      	ldrh	r4, [r3, #0]
    984e:	4b45      	ldr	r3, [pc, #276]	; (9964 <w5500_process+0x17c>)
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	9300      	str	r3, [sp, #0]
    9854:	0023      	movs	r3, r4
    9856:	4c44      	ldr	r4, [pc, #272]	; (9968 <w5500_process+0x180>)
    9858:	47a0      	blx	r4
    985a:	1e03      	subs	r3, r0, #0
    985c:	d100      	bne.n	9860 <w5500_process+0x78>
    985e:	e06a      	b.n	9936 <w5500_process+0x14e>
    9860:	4b39      	ldr	r3, [pc, #228]	; (9948 <w5500_process+0x160>)
    9862:	1dfa      	adds	r2, r7, #7
    9864:	7812      	ldrb	r2, [r2, #0]
    9866:	701a      	strb	r2, [r3, #0]
    9868:	4b3e      	ldr	r3, [pc, #248]	; (9964 <w5500_process+0x17c>)
    986a:	2200      	movs	r2, #0
    986c:	701a      	strb	r2, [r3, #0]
		break;
    986e:	e062      	b.n	9936 <w5500_process+0x14e>
		case MODE_OP_READ_UDP:
								rtrn=w5500_cmd_read_socket_udp(sock_numb);
    9870:	230e      	movs	r3, #14
    9872:	18fc      	adds	r4, r7, r3
    9874:	1dbb      	adds	r3, r7, #6
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	0018      	movs	r0, r3
    987a:	f000 f877 	bl	996c <w5500_cmd_read_socket_udp>
    987e:	0003      	movs	r3, r0
    9880:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    9882:	230e      	movs	r3, #14
    9884:	18fb      	adds	r3, r7, r3
    9886:	881b      	ldrh	r3, [r3, #0]
    9888:	2b00      	cmp	r3, #0
    988a:	d009      	beq.n	98a0 <w5500_process+0xb8>
    988c:	4b2e      	ldr	r3, [pc, #184]	; (9948 <w5500_process+0x160>)
    988e:	2200      	movs	r2, #0
    9890:	701a      	strb	r2, [r3, #0]
    9892:	1dfb      	adds	r3, r7, #7
    9894:	2200      	movs	r2, #0
    9896:	701a      	strb	r2, [r3, #0]
    9898:	230e      	movs	r3, #14
    989a:	18fb      	adds	r3, r7, r3
    989c:	881b      	ldrh	r3, [r3, #0]
    989e:	e04c      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98a0:	4b29      	ldr	r3, [pc, #164]	; (9948 <w5500_process+0x160>)
    98a2:	2201      	movs	r2, #1
    98a4:	701a      	strb	r2, [r3, #0]
		break;
    98a6:	e047      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_WRITE_UDP:
								if(w5500_write_socket_udp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    98a8:	1dbb      	adds	r3, r7, #6
    98aa:	781b      	ldrb	r3, [r3, #0]
    98ac:	0018      	movs	r0, r3
    98ae:	f000 f9f1 	bl	9c94 <w5500_write_socket_udp>
    98b2:	1e03      	subs	r3, r0, #0
    98b4:	d007      	beq.n	98c6 <w5500_process+0xde>
    98b6:	4b24      	ldr	r3, [pc, #144]	; (9948 <w5500_process+0x160>)
    98b8:	2200      	movs	r2, #0
    98ba:	701a      	strb	r2, [r3, #0]
    98bc:	1dfb      	adds	r3, r7, #7
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	2301      	movs	r3, #1
    98c4:	e039      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98c6:	4b20      	ldr	r3, [pc, #128]	; (9948 <w5500_process+0x160>)
    98c8:	2201      	movs	r2, #1
    98ca:	701a      	strb	r2, [r3, #0]
		break;
    98cc:	e034      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_READ_TCP:
								rtrn=w5500_cmd_read_socket_tcp(sock_numb);
    98ce:	230e      	movs	r3, #14
    98d0:	18fc      	adds	r4, r7, r3
    98d2:	1dbb      	adds	r3, r7, #6
    98d4:	781b      	ldrb	r3, [r3, #0]
    98d6:	0018      	movs	r0, r3
    98d8:	f000 fc2a 	bl	a130 <w5500_cmd_read_socket_tcp>
    98dc:	0003      	movs	r3, r0
    98de:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    98e0:	230e      	movs	r3, #14
    98e2:	18fb      	adds	r3, r7, r3
    98e4:	881b      	ldrh	r3, [r3, #0]
    98e6:	2b00      	cmp	r3, #0
    98e8:	d009      	beq.n	98fe <w5500_process+0x116>
    98ea:	4b17      	ldr	r3, [pc, #92]	; (9948 <w5500_process+0x160>)
    98ec:	2200      	movs	r2, #0
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	1dfb      	adds	r3, r7, #7
    98f2:	2200      	movs	r2, #0
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	230e      	movs	r3, #14
    98f8:	18fb      	adds	r3, r7, r3
    98fa:	881b      	ldrh	r3, [r3, #0]
    98fc:	e01d      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    98fe:	4b12      	ldr	r3, [pc, #72]	; (9948 <w5500_process+0x160>)
    9900:	2201      	movs	r2, #1
    9902:	701a      	strb	r2, [r3, #0]
		break;
    9904:	e018      	b.n	9938 <w5500_process+0x150>
		case MODE_OP_WRITE_TCP:
								if(w5500_write_socket_tcp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    9906:	1dbb      	adds	r3, r7, #6
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	0018      	movs	r0, r3
    990c:	f000 feb4 	bl	a678 <w5500_write_socket_tcp>
    9910:	1e03      	subs	r3, r0, #0
    9912:	d007      	beq.n	9924 <w5500_process+0x13c>
    9914:	4b0c      	ldr	r3, [pc, #48]	; (9948 <w5500_process+0x160>)
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
    991a:	1dfb      	adds	r3, r7, #7
    991c:	2200      	movs	r2, #0
    991e:	701a      	strb	r2, [r3, #0]
    9920:	2301      	movs	r3, #1
    9922:	e00a      	b.n	993a <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9924:	4b08      	ldr	r3, [pc, #32]	; (9948 <w5500_process+0x160>)
    9926:	2201      	movs	r2, #1
    9928:	701a      	strb	r2, [r3, #0]
		break;
    992a:	e005      	b.n	9938 <w5500_process+0x150>
		default:
								w5500_st=0; return PROC_ER;
    992c:	4b06      	ldr	r3, [pc, #24]	; (9948 <w5500_process+0x160>)
    992e:	2200      	movs	r2, #0
    9930:	701a      	strb	r2, [r3, #0]
    9932:	2302      	movs	r3, #2
    9934:	e001      	b.n	993a <w5500_process+0x152>
		break;
    9936:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    9938:	2300      	movs	r3, #0
}
    993a:	0018      	movs	r0, r3
    993c:	46bd      	mov	sp, r7
    993e:	b005      	add	sp, #20
    9940:	bd90      	pop	{r4, r7, pc}
    9942:	46c0      	nop			; (mov r8, r8)
    9944:	200031f6 	.word	0x200031f6
    9948:	20000488 	.word	0x20000488
    994c:	0000cb84 	.word	0x0000cb84
    9950:	00003a98 	.word	0x00003a98
    9954:	20000480 	.word	0x20000480
    9958:	20000482 	.word	0x20000482
    995c:	20003afc 	.word	0x20003afc
    9960:	20000484 	.word	0x20000484
    9964:	20003bbb 	.word	0x20003bbb
    9968:	00007881 	.word	0x00007881

0000996c <w5500_cmd_read_socket_udp>:

WORD w5500_cmd_read_socket_udp (BYTE sock_numb)
{
    996c:	b590      	push	{r4, r7, lr}
    996e:	b085      	sub	sp, #20
    9970:	af00      	add	r7, sp, #0
    9972:	0002      	movs	r2, r0
    9974:	1dfb      	adds	r3, r7, #7
    9976:	701a      	strb	r2, [r3, #0]
	static BYTE numb_static_r=0;
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	BYTE cnt=0;
    9978:	230f      	movs	r3, #15
    997a:	18fb      	adds	r3, r7, r3
    997c:	2200      	movs	r2, #0
    997e:	701a      	strb	r2, [r3, #0]
	
	if(numb_static_r!=sock_numb){numb_static_r=sock_numb;st_cmd_w5500=0;}
    9980:	4bb6      	ldr	r3, [pc, #728]	; (9c5c <w5500_cmd_read_socket_udp+0x2f0>)
    9982:	781b      	ldrb	r3, [r3, #0]
    9984:	1dfa      	adds	r2, r7, #7
    9986:	7812      	ldrb	r2, [r2, #0]
    9988:	429a      	cmp	r2, r3
    998a:	d006      	beq.n	999a <w5500_cmd_read_socket_udp+0x2e>
    998c:	4bb3      	ldr	r3, [pc, #716]	; (9c5c <w5500_cmd_read_socket_udp+0x2f0>)
    998e:	1dfa      	adds	r2, r7, #7
    9990:	7812      	ldrb	r2, [r2, #0]
    9992:	701a      	strb	r2, [r3, #0]
    9994:	4bb2      	ldr	r3, [pc, #712]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9996:	2200      	movs	r2, #0
    9998:	701a      	strb	r2, [r3, #0]
	
	switch(st_cmd_w5500)
    999a:	4bb1      	ldr	r3, [pc, #708]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	2b04      	cmp	r3, #4
    99a0:	d900      	bls.n	99a4 <w5500_cmd_read_socket_udp+0x38>
    99a2:	e151      	b.n	9c48 <w5500_cmd_read_socket_udp+0x2dc>
    99a4:	009a      	lsls	r2, r3, #2
    99a6:	4baf      	ldr	r3, [pc, #700]	; (9c64 <w5500_cmd_read_socket_udp+0x2f8>)
    99a8:	18d3      	adds	r3, r2, r3
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	469f      	mov	pc, r3
	{
		case UDP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr in w5500 1,2
    99ae:	4bae      	ldr	r3, [pc, #696]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    99b0:	2226      	movs	r2, #38	; 0x26
    99b2:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//cb 3
    99b4:	1dfb      	adds	r3, r7, #7
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	015b      	lsls	r3, r3, #5
    99ba:	b21b      	sxth	r3, r3
    99bc:	2208      	movs	r2, #8
    99be:	4313      	orrs	r3, r2
    99c0:	b21b      	sxth	r3, r3
    99c2:	b29a      	uxth	r2, r3
    99c4:	4ba9      	ldr	r3, [pc, #676]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    99c6:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//4 data (point write data aus w5500)
    99c8:	1dfb      	adds	r3, r7, #7
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	015b      	lsls	r3, r3, #5
    99ce:	3328      	adds	r3, #40	; 0x28
    99d0:	001a      	movs	r2, r3
    99d2:	4ba7      	ldr	r3, [pc, #668]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    99d4:	18d3      	adds	r3, r2, r3
    99d6:	1d5a      	adds	r2, r3, #5
    99d8:	4ba6      	ldr	r3, [pc, #664]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    99da:	601a      	str	r2, [r3, #0]
			len_buf=2;//len
    99dc:	4ba6      	ldr	r3, [pc, #664]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    99de:	2202      	movs	r2, #2
    99e0:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    99e2:	4ba6      	ldr	r3, [pc, #664]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    99e4:	2201      	movs	r2, #1
    99e6:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = UDP_PART_RD;//"next"
    99e8:	4b9d      	ldr	r3, [pc, #628]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    99ea:	2201      	movs	r2, #1
    99ec:	701a      	strb	r2, [r3, #0]
								
			size=0;
    99ee:	4ba4      	ldr	r3, [pc, #656]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    99f0:	2200      	movs	r2, #0
    99f2:	801a      	strh	r2, [r3, #0]
		break;	
    99f4:	e12d      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_PART_RD:					
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    99f6:	1dfb      	adds	r3, r7, #7
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	4a9d      	ldr	r2, [pc, #628]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    99fc:	212d      	movs	r1, #45	; 0x2d
    99fe:	015b      	lsls	r3, r3, #5
    9a00:	18d3      	adds	r3, r2, r3
    9a02:	185b      	adds	r3, r3, r1
    9a04:	781b      	ldrb	r3, [r3, #0]
    9a06:	021b      	lsls	r3, r3, #8
    9a08:	b21a      	sxth	r2, r3
    9a0a:	1dfb      	adds	r3, r7, #7
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <w5500_cmd_read_socket_udp+0x304>)
    9a10:	202e      	movs	r0, #46	; 0x2e
    9a12:	015b      	lsls	r3, r3, #5
    9a14:	18cb      	adds	r3, r1, r3
    9a16:	181b      	adds	r3, r3, r0
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	b21b      	sxth	r3, r3
    9a1c:	4313      	orrs	r3, r2
    9a1e:	b21b      	sxth	r3, r3
    9a20:	b29a      	uxth	r2, r3
    9a22:	4b98      	ldr	r3, [pc, #608]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a24:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return
    9a26:	4b97      	ldr	r3, [pc, #604]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a28:	881b      	ldrh	r3, [r3, #0]
    9a2a:	b29b      	uxth	r3, r3
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d06c      	beq.n	9b0a <w5500_cmd_read_socket_udp+0x19e>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;
    9a30:	1dfb      	adds	r3, r7, #7
    9a32:	781a      	ldrb	r2, [r3, #0]
    9a34:	4994      	ldr	r1, [pc, #592]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a36:	23ba      	movs	r3, #186	; 0xba
    9a38:	00db      	lsls	r3, r3, #3
    9a3a:	4894      	ldr	r0, [pc, #592]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a3c:	4342      	muls	r2, r0
    9a3e:	188a      	adds	r2, r1, r2
    9a40:	18d3      	adds	r3, r2, r3
    9a42:	78da      	ldrb	r2, [r3, #3]
    9a44:	791b      	ldrb	r3, [r3, #4]
    9a46:	021b      	lsls	r3, r3, #8
    9a48:	4313      	orrs	r3, r2
    9a4a:	b29a      	uxth	r2, r3
    9a4c:	4b86      	ldr	r3, [pc, #536]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9a4e:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);
    9a50:	1dfb      	adds	r3, r7, #7
    9a52:	781b      	ldrb	r3, [r3, #0]
    9a54:	015b      	lsls	r3, r3, #5
    9a56:	b21b      	sxth	r3, r3
    9a58:	2218      	movs	r2, #24
    9a5a:	4313      	orrs	r3, r2
    9a5c:	b21b      	sxth	r3, r3
    9a5e:	b29a      	uxth	r2, r3
    9a60:	4b82      	ldr	r3, [pc, #520]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9a62:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb];
    9a64:	1dfb      	adds	r3, r7, #7
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	4a88      	ldr	r2, [pc, #544]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a6a:	435a      	muls	r2, r3
    9a6c:	4b86      	ldr	r3, [pc, #536]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a6e:	18d2      	adds	r2, r2, r3
    9a70:	4b80      	ldr	r3, [pc, #512]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9a72:	601a      	str	r2, [r3, #0]
				len_buf=sizert;
    9a74:	4b83      	ldr	r3, [pc, #524]	; (9c84 <w5500_cmd_read_socket_udp+0x318>)
    9a76:	881b      	ldrh	r3, [r3, #0]
    9a78:	b29a      	uxth	r2, r3
    9a7a:	4b7f      	ldr	r3, [pc, #508]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9a7c:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    9a7e:	1dfb      	adds	r3, r7, #7
    9a80:	7819      	ldrb	r1, [r3, #0]
    9a82:	1dfb      	adds	r3, r7, #7
    9a84:	781a      	ldrb	r2, [r3, #0]
    9a86:	4880      	ldr	r0, [pc, #512]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9a88:	23ba      	movs	r3, #186	; 0xba
    9a8a:	00db      	lsls	r3, r3, #3
    9a8c:	4c7f      	ldr	r4, [pc, #508]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9a8e:	4362      	muls	r2, r4
    9a90:	1882      	adds	r2, r0, r2
    9a92:	18d3      	adds	r3, r2, r3
    9a94:	78da      	ldrb	r2, [r3, #3]
    9a96:	791b      	ldrb	r3, [r3, #4]
    9a98:	021b      	lsls	r3, r3, #8
    9a9a:	4313      	orrs	r3, r2
    9a9c:	b29a      	uxth	r2, r3
    9a9e:	4b76      	ldr	r3, [pc, #472]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9aa0:	881b      	ldrh	r3, [r3, #0]
    9aa2:	18d3      	adds	r3, r2, r3
    9aa4:	b29a      	uxth	r2, r3
    9aa6:	4878      	ldr	r0, [pc, #480]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9aa8:	23ba      	movs	r3, #186	; 0xba
    9aaa:	00db      	lsls	r3, r3, #3
    9aac:	4c77      	ldr	r4, [pc, #476]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9aae:	4361      	muls	r1, r4
    9ab0:	1841      	adds	r1, r0, r1
    9ab2:	18cb      	adds	r3, r1, r3
    9ab4:	3303      	adds	r3, #3
    9ab6:	21ff      	movs	r1, #255	; 0xff
    9ab8:	4011      	ands	r1, r2
    9aba:	000c      	movs	r4, r1
    9abc:	7819      	ldrb	r1, [r3, #0]
    9abe:	2000      	movs	r0, #0
    9ac0:	4001      	ands	r1, r0
    9ac2:	1c08      	adds	r0, r1, #0
    9ac4:	1c21      	adds	r1, r4, #0
    9ac6:	4301      	orrs	r1, r0
    9ac8:	7019      	strb	r1, [r3, #0]
    9aca:	0a12      	lsrs	r2, r2, #8
    9acc:	b290      	uxth	r0, r2
    9ace:	785a      	ldrb	r2, [r3, #1]
    9ad0:	2100      	movs	r1, #0
    9ad2:	400a      	ands	r2, r1
    9ad4:	1c11      	adds	r1, r2, #0
    9ad6:	1c02      	adds	r2, r0, #0
    9ad8:	430a      	orrs	r2, r1
    9ada:	705a      	strb	r2, [r3, #1]
				size=len_buf;
    9adc:	4b66      	ldr	r3, [pc, #408]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9ade:	881a      	ldrh	r2, [r3, #0]
    9ae0:	4b67      	ldr	r3, [pc, #412]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9ae2:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_UDP){size=PROC_ER;}							
    9ae4:	4b64      	ldr	r3, [pc, #400]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9ae6:	881a      	ldrh	r2, [r3, #0]
    9ae8:	23b9      	movs	r3, #185	; 0xb9
    9aea:	00db      	lsls	r3, r3, #3
    9aec:	429a      	cmp	r2, r3
    9aee:	d902      	bls.n	9af6 <w5500_cmd_read_socket_udp+0x18a>
    9af0:	4b63      	ldr	r3, [pc, #396]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9af2:	2202      	movs	r2, #2
    9af4:	801a      	strh	r2, [r3, #0]
				cmd=READ_DATA;
    9af6:	4b61      	ldr	r3, [pc, #388]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9af8:	2201      	movs	r2, #1
    9afa:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500++;
    9afc:	4b58      	ldr	r3, [pc, #352]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	3301      	adds	r3, #1
    9b02:	b2da      	uxtb	r2, r3
    9b04:	4b56      	ldr	r3, [pc, #344]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b06:	701a      	strb	r2, [r3, #0]
				break;
    9b08:	e0a3      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
			}
			st_cmd_w5500--;
    9b0a:	4b55      	ldr	r3, [pc, #340]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b0c:	781b      	ldrb	r3, [r3, #0]
    9b0e:	3b01      	subs	r3, #1
    9b10:	b2da      	uxtb	r2, r3
    9b12:	4b53      	ldr	r3, [pc, #332]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9b14:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    9b16:	2302      	movs	r3, #2
    9b18:	e09c      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		case UDP_PTR_MOVE:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    9b1a:	230f      	movs	r3, #15
    9b1c:	18fb      	adds	r3, r7, r3
    9b1e:	781a      	ldrb	r2, [r3, #0]
    9b20:	1dfb      	adds	r3, r7, #7
    9b22:	7819      	ldrb	r1, [r3, #0]
    9b24:	4858      	ldr	r0, [pc, #352]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9b26:	23ba      	movs	r3, #186	; 0xba
    9b28:	00db      	lsls	r3, r3, #3
    9b2a:	4c58      	ldr	r4, [pc, #352]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9b2c:	4361      	muls	r1, r4
    9b2e:	1841      	adds	r1, r0, r1
    9b30:	18cb      	adds	r3, r1, r3
    9b32:	78d9      	ldrb	r1, [r3, #3]
    9b34:	791b      	ldrb	r3, [r3, #4]
    9b36:	021b      	lsls	r3, r3, #8
    9b38:	430b      	orrs	r3, r1
    9b3a:	b29b      	uxth	r3, r3
    9b3c:	0a1b      	lsrs	r3, r3, #8
    9b3e:	b29b      	uxth	r3, r3
    9b40:	b2d9      	uxtb	r1, r3
    9b42:	4b53      	ldr	r3, [pc, #332]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9b44:	5499      	strb	r1, [r3, r2]
    9b46:	230f      	movs	r3, #15
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	781a      	ldrb	r2, [r3, #0]
    9b4c:	230f      	movs	r3, #15
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	3201      	adds	r2, #1
    9b52:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    9b54:	230f      	movs	r3, #15
    9b56:	18fb      	adds	r3, r7, r3
    9b58:	781a      	ldrb	r2, [r3, #0]
    9b5a:	1dfb      	adds	r3, r7, #7
    9b5c:	7819      	ldrb	r1, [r3, #0]
    9b5e:	484a      	ldr	r0, [pc, #296]	; (9c88 <w5500_cmd_read_socket_udp+0x31c>)
    9b60:	23ba      	movs	r3, #186	; 0xba
    9b62:	00db      	lsls	r3, r3, #3
    9b64:	4c49      	ldr	r4, [pc, #292]	; (9c8c <w5500_cmd_read_socket_udp+0x320>)
    9b66:	4361      	muls	r1, r4
    9b68:	1841      	adds	r1, r0, r1
    9b6a:	18cb      	adds	r3, r1, r3
    9b6c:	78d9      	ldrb	r1, [r3, #3]
    9b6e:	791b      	ldrb	r3, [r3, #4]
    9b70:	021b      	lsls	r3, r3, #8
    9b72:	430b      	orrs	r3, r1
    9b74:	b29b      	uxth	r3, r3
    9b76:	b2d9      	uxtb	r1, r3
    9b78:	4b45      	ldr	r3, [pc, #276]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9b7a:	5499      	strb	r1, [r3, r2]
    9b7c:	230f      	movs	r3, #15
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	781a      	ldrb	r2, [r3, #0]
    9b82:	230f      	movs	r3, #15
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	3201      	adds	r2, #1
    9b88:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;//reg RX_RD(28)
    9b8a:	4b37      	ldr	r3, [pc, #220]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9b8c:	2228      	movs	r2, #40	; 0x28
    9b8e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9b90:	1dfb      	adds	r3, r7, #7
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	015b      	lsls	r3, r3, #5
    9b96:	b21b      	sxth	r3, r3
    9b98:	2208      	movs	r2, #8
    9b9a:	4313      	orrs	r3, r2
    9b9c:	b21b      	sxth	r3, r3
    9b9e:	b29a      	uxth	r2, r3
    9ba0:	4b32      	ldr	r3, [pc, #200]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9ba2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;/*(записать в него смещение)*/
    9ba4:	4b33      	ldr	r3, [pc, #204]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9ba6:	4a3a      	ldr	r2, [pc, #232]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9ba8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9baa:	230f      	movs	r3, #15
    9bac:	18fb      	adds	r3, r7, r3
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	b29a      	uxth	r2, r3
    9bb2:	4b31      	ldr	r3, [pc, #196]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9bb4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9bb6:	4b31      	ldr	r3, [pc, #196]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9bb8:	2202      	movs	r2, #2
    9bba:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9bbc:	4b28      	ldr	r3, [pc, #160]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	3301      	adds	r3, #1
    9bc2:	b2da      	uxtb	r2, r3
    9bc4:	4b26      	ldr	r3, [pc, #152]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9bc6:	701a      	strb	r2, [r3, #0]
		break;
    9bc8:	e043      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_RCV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//перейти в режим приема(возобновить прием)
    9bca:	230f      	movs	r3, #15
    9bcc:	18fb      	adds	r3, r7, r3
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	4a2f      	ldr	r2, [pc, #188]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9bd2:	2140      	movs	r1, #64	; 0x40
    9bd4:	54d1      	strb	r1, [r2, r3]
    9bd6:	230f      	movs	r3, #15
    9bd8:	18fb      	adds	r3, r7, r3
    9bda:	781a      	ldrb	r2, [r3, #0]
    9bdc:	230f      	movs	r3, #15
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	3201      	adds	r2, #1
    9be2:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    9be4:	4b20      	ldr	r3, [pc, #128]	; (9c68 <w5500_cmd_read_socket_udp+0x2fc>)
    9be6:	2201      	movs	r2, #1
    9be8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9bea:	1dfb      	adds	r3, r7, #7
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	015b      	lsls	r3, r3, #5
    9bf0:	b21b      	sxth	r3, r3
    9bf2:	2208      	movs	r2, #8
    9bf4:	4313      	orrs	r3, r2
    9bf6:	b21b      	sxth	r3, r3
    9bf8:	b29a      	uxth	r2, r3
    9bfa:	4b1c      	ldr	r3, [pc, #112]	; (9c6c <w5500_cmd_read_socket_udp+0x300>)
    9bfc:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9bfe:	4b1d      	ldr	r3, [pc, #116]	; (9c74 <w5500_cmd_read_socket_udp+0x308>)
    9c00:	4a23      	ldr	r2, [pc, #140]	; (9c90 <w5500_cmd_read_socket_udp+0x324>)
    9c02:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c04:	230f      	movs	r3, #15
    9c06:	18fb      	adds	r3, r7, r3
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	b29a      	uxth	r2, r3
    9c0c:	4b1a      	ldr	r3, [pc, #104]	; (9c78 <w5500_cmd_read_socket_udp+0x30c>)
    9c0e:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c10:	4b1a      	ldr	r3, [pc, #104]	; (9c7c <w5500_cmd_read_socket_udp+0x310>)
    9c12:	2202      	movs	r2, #2
    9c14:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9c16:	4b12      	ldr	r3, [pc, #72]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c18:	781b      	ldrb	r3, [r3, #0]
    9c1a:	3301      	adds	r3, #1
    9c1c:	b2da      	uxtb	r2, r3
    9c1e:	4b10      	ldr	r3, [pc, #64]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c20:	701a      	strb	r2, [r3, #0]
		break;	
    9c22:	e016      	b.n	9c52 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_BK_START:
			st_cmd_w5500=0;//сброс параметров
    9c24:	4b0e      	ldr	r3, [pc, #56]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c26:	2200      	movs	r2, #0
    9c28:	701a      	strb	r2, [r3, #0]
			if((size > USART_BUF_SIZE) && (sock_numb))	 {return PROC_ER;}
    9c2a:	4b15      	ldr	r3, [pc, #84]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9c2c:	881a      	ldrh	r2, [r3, #0]
    9c2e:	2380      	movs	r3, #128	; 0x80
    9c30:	005b      	lsls	r3, r3, #1
    9c32:	429a      	cmp	r2, r3
    9c34:	d905      	bls.n	9c42 <w5500_cmd_read_socket_udp+0x2d6>
    9c36:	1dfb      	adds	r3, r7, #7
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d001      	beq.n	9c42 <w5500_cmd_read_socket_udp+0x2d6>
    9c3e:	2302      	movs	r3, #2
    9c40:	e008      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
			return (size);
    9c42:	4b0f      	ldr	r3, [pc, #60]	; (9c80 <w5500_cmd_read_socket_udp+0x314>)
    9c44:	881b      	ldrh	r3, [r3, #0]
    9c46:	e005      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    9c48:	4b05      	ldr	r3, [pc, #20]	; (9c60 <w5500_cmd_read_socket_udp+0x2f4>)
    9c4a:	2200      	movs	r2, #0
    9c4c:	701a      	strb	r2, [r3, #0]
    9c4e:	2302      	movs	r3, #2
    9c50:	e000      	b.n	9c54 <w5500_cmd_read_socket_udp+0x2e8>
		break;
	}
	return PROC_WAIT;
    9c52:	2300      	movs	r3, #0
}
    9c54:	0018      	movs	r0, r3
    9c56:	46bd      	mov	sp, r7
    9c58:	b005      	add	sp, #20
    9c5a:	bd90      	pop	{r4, r7, pc}
    9c5c:	20000489 	.word	0x20000489
    9c60:	2000048a 	.word	0x2000048a
    9c64:	0000cb9c 	.word	0x0000cb9c
    9c68:	20000480 	.word	0x20000480
    9c6c:	20000482 	.word	0x20000482
    9c70:	20003b08 	.word	0x20003b08
    9c74:	20003afc 	.word	0x20003afc
    9c78:	20000484 	.word	0x20000484
    9c7c:	20003bbb 	.word	0x20003bbb
    9c80:	2000048c 	.word	0x2000048c
    9c84:	20000486 	.word	0x20000486
    9c88:	200005cc 	.word	0x200005cc
    9c8c:	000005e5 	.word	0x000005e5
    9c90:	20003bbc 	.word	0x20003bbc

00009c94 <w5500_write_socket_udp>:

WORD w5500_write_socket_udp (BYTE sock_numb)
{
    9c94:	b590      	push	{r4, r7, lr}
    9c96:	b085      	sub	sp, #20
    9c98:	af00      	add	r7, sp, #0
    9c9a:	0002      	movs	r2, r0
    9c9c:	1dfb      	adds	r3, r7, #7
    9c9e:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500 = 0;
	static BYTE numb_static = 0;
	WORD cnt = 0;
    9ca0:	230e      	movs	r3, #14
    9ca2:	18fb      	adds	r3, r7, r3
    9ca4:	2200      	movs	r2, #0
    9ca6:	801a      	strh	r2, [r3, #0]
	
	if(numb_static != sock_numb) {numb_static = sock_numb; st_wr_w5500 = 0;}
    9ca8:	4bd9      	ldr	r3, [pc, #868]	; (a010 <w5500_write_socket_udp+0x37c>)
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	1dfa      	adds	r2, r7, #7
    9cae:	7812      	ldrb	r2, [r2, #0]
    9cb0:	429a      	cmp	r2, r3
    9cb2:	d006      	beq.n	9cc2 <w5500_write_socket_udp+0x2e>
    9cb4:	4bd6      	ldr	r3, [pc, #856]	; (a010 <w5500_write_socket_udp+0x37c>)
    9cb6:	1dfa      	adds	r2, r7, #7
    9cb8:	7812      	ldrb	r2, [r2, #0]
    9cba:	701a      	strb	r2, [r3, #0]
    9cbc:	4bd5      	ldr	r3, [pc, #852]	; (a014 <w5500_write_socket_udp+0x380>)
    9cbe:	2200      	movs	r2, #0
    9cc0:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    9cc2:	4bd4      	ldr	r3, [pc, #848]	; (a014 <w5500_write_socket_udp+0x380>)
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	2b08      	cmp	r3, #8
    9cc8:	d900      	bls.n	9ccc <w5500_write_socket_udp+0x38>
    9cca:	e212      	b.n	a0f2 <w5500_write_socket_udp+0x45e>
    9ccc:	009a      	lsls	r2, r3, #2
    9cce:	4bd2      	ldr	r3, [pc, #840]	; (a018 <w5500_write_socket_udp+0x384>)
    9cd0:	18d3      	adds	r3, r2, r3
    9cd2:	681b      	ldr	r3, [r3, #0]
    9cd4:	469f      	mov	pc, r3
	{
		case UDP_RD_TX_STAT:																	//read reg tx status
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;						
    9cd6:	4bd1      	ldr	r3, [pc, #836]	; (a01c <w5500_write_socket_udp+0x388>)
    9cd8:	2220      	movs	r2, #32
    9cda:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9cdc:	1dfb      	adds	r3, r7, #7
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	015b      	lsls	r3, r3, #5
    9ce2:	b21b      	sxth	r3, r3
    9ce4:	2208      	movs	r2, #8
    9ce6:	4313      	orrs	r3, r2
    9ce8:	b21b      	sxth	r3, r3
    9cea:	b29a      	uxth	r2, r3
    9cec:	4bcc      	ldr	r3, [pc, #816]	; (a020 <w5500_write_socket_udp+0x38c>)
    9cee:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    9cf0:	1dfb      	adds	r3, r7, #7
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	3301      	adds	r3, #1
    9cf6:	015a      	lsls	r2, r3, #5
    9cf8:	4bca      	ldr	r3, [pc, #808]	; (a024 <w5500_write_socket_udp+0x390>)
    9cfa:	18d3      	adds	r3, r2, r3
    9cfc:	1dda      	adds	r2, r3, #7
    9cfe:	4bca      	ldr	r3, [pc, #808]	; (a028 <w5500_write_socket_udp+0x394>)
    9d00:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9d02:	4bca      	ldr	r3, [pc, #808]	; (a02c <w5500_write_socket_udp+0x398>)
    9d04:	2206      	movs	r2, #6
    9d06:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9d08:	4bc9      	ldr	r3, [pc, #804]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d0a:	2201      	movs	r2, #1
    9d0c:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d0e:	4bc1      	ldr	r3, [pc, #772]	; (a014 <w5500_write_socket_udp+0x380>)
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	3301      	adds	r3, #1
    9d14:	b2da      	uxtb	r2, r3
    9d16:	4bbf      	ldr	r3, [pc, #764]	; (a014 <w5500_write_socket_udp+0x380>)
    9d18:	701a      	strb	r2, [r3, #0]
		break;
    9d1a:	e1f0      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_IP:																	//write ip
			addr_w5500=ADDR_SOC_D_IP_ADDR0;
    9d1c:	4bbf      	ldr	r3, [pc, #764]	; (a01c <w5500_write_socket_udp+0x388>)
    9d1e:	220c      	movs	r2, #12
    9d20:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d22:	1dfb      	adds	r3, r7, #7
    9d24:	781b      	ldrb	r3, [r3, #0]
    9d26:	015b      	lsls	r3, r3, #5
    9d28:	b21b      	sxth	r3, r3
    9d2a:	2208      	movs	r2, #8
    9d2c:	4313      	orrs	r3, r2
    9d2e:	b21b      	sxth	r3, r3
    9d30:	b29a      	uxth	r2, r3
    9d32:	4bbb      	ldr	r3, [pc, #748]	; (a020 <w5500_write_socket_udp+0x38c>)
    9d34:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].ip_addr;
    9d36:	1dfb      	adds	r3, r7, #7
    9d38:	781b      	ldrb	r3, [r3, #0]
    9d3a:	4abe      	ldr	r2, [pc, #760]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9d3c:	435a      	muls	r2, r3
    9d3e:	4bbe      	ldr	r3, [pc, #760]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9d40:	18d2      	adds	r2, r2, r3
    9d42:	4bb9      	ldr	r3, [pc, #740]	; (a028 <w5500_write_socket_udp+0x394>)
    9d44:	601a      	str	r2, [r3, #0]
			len_buf=4;
    9d46:	4bb9      	ldr	r3, [pc, #740]	; (a02c <w5500_write_socket_udp+0x398>)
    9d48:	2204      	movs	r2, #4
    9d4a:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9d4c:	4bb8      	ldr	r3, [pc, #736]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d4e:	2202      	movs	r2, #2
    9d50:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d52:	4bb0      	ldr	r3, [pc, #704]	; (a014 <w5500_write_socket_udp+0x380>)
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	3301      	adds	r3, #1
    9d58:	b2da      	uxtb	r2, r3
    9d5a:	4bae      	ldr	r3, [pc, #696]	; (a014 <w5500_write_socket_udp+0x380>)
    9d5c:	701a      	strb	r2, [r3, #0]
		break;
    9d5e:	e1ce      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_PORT:																	//write port
			addr_w5500=ADDR_SOC_D_PORT0;
    9d60:	4bae      	ldr	r3, [pc, #696]	; (a01c <w5500_write_socket_udp+0x388>)
    9d62:	2210      	movs	r2, #16
    9d64:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d66:	1dfb      	adds	r3, r7, #7
    9d68:	781b      	ldrb	r3, [r3, #0]
    9d6a:	015b      	lsls	r3, r3, #5
    9d6c:	b21b      	sxth	r3, r3
    9d6e:	2208      	movs	r2, #8
    9d70:	4313      	orrs	r3, r2
    9d72:	b21b      	sxth	r3, r3
    9d74:	b29a      	uxth	r2, r3
    9d76:	4baa      	ldr	r3, [pc, #680]	; (a020 <w5500_write_socket_udp+0x38c>)
    9d78:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].port;
    9d7a:	1dfb      	adds	r3, r7, #7
    9d7c:	781b      	ldrb	r3, [r3, #0]
    9d7e:	4aad      	ldr	r2, [pc, #692]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9d80:	435a      	muls	r2, r3
    9d82:	4bad      	ldr	r3, [pc, #692]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9d84:	18d3      	adds	r3, r2, r3
    9d86:	1d1a      	adds	r2, r3, #4
    9d88:	4ba7      	ldr	r3, [pc, #668]	; (a028 <w5500_write_socket_udp+0x394>)
    9d8a:	601a      	str	r2, [r3, #0]
			len_buf=2;
    9d8c:	4ba7      	ldr	r3, [pc, #668]	; (a02c <w5500_write_socket_udp+0x398>)
    9d8e:	2202      	movs	r2, #2
    9d90:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9d92:	4ba7      	ldr	r3, [pc, #668]	; (a030 <w5500_write_socket_udp+0x39c>)
    9d94:	2202      	movs	r2, #2
    9d96:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d98:	4b9e      	ldr	r3, [pc, #632]	; (a014 <w5500_write_socket_udp+0x380>)
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	3301      	adds	r3, #1
    9d9e:	b2da      	uxtb	r2, r3
    9da0:	4b9c      	ldr	r3, [pc, #624]	; (a014 <w5500_write_socket_udp+0x380>)
    9da2:	701a      	strb	r2, [r3, #0]
		break;
    9da4:	e1ab      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_DATA:																	//write data
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    9da6:	1dfb      	adds	r3, r7, #7
    9da8:	781a      	ldrb	r2, [r3, #0]
    9daa:	49a3      	ldr	r1, [pc, #652]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9dac:	23ba      	movs	r3, #186	; 0xba
    9dae:	00db      	lsls	r3, r3, #3
    9db0:	48a0      	ldr	r0, [pc, #640]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9db2:	4342      	muls	r2, r0
    9db4:	188a      	adds	r2, r1, r2
    9db6:	18d3      	adds	r3, r2, r3
    9db8:	795a      	ldrb	r2, [r3, #5]
    9dba:	799b      	ldrb	r3, [r3, #6]
    9dbc:	021b      	lsls	r3, r3, #8
    9dbe:	4313      	orrs	r3, r2
    9dc0:	b29a      	uxth	r2, r3
    9dc2:	4b96      	ldr	r3, [pc, #600]	; (a01c <w5500_write_socket_udp+0x388>)
    9dc4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    9dc6:	1dfb      	adds	r3, r7, #7
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	015b      	lsls	r3, r3, #5
    9dcc:	b21b      	sxth	r3, r3
    9dce:	2210      	movs	r2, #16
    9dd0:	4313      	orrs	r3, r2
    9dd2:	b21b      	sxth	r3, r3
    9dd4:	b29a      	uxth	r2, r3
    9dd6:	4b92      	ldr	r3, [pc, #584]	; (a020 <w5500_write_socket_udp+0x38c>)
    9dd8:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    9dda:	1dfb      	adds	r3, r7, #7
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	4a95      	ldr	r2, [pc, #596]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9de0:	4353      	muls	r3, r2
    9de2:	3308      	adds	r3, #8
    9de4:	001a      	movs	r2, r3
    9de6:	4b94      	ldr	r3, [pc, #592]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9de8:	18d2      	adds	r2, r2, r3
    9dea:	4b8f      	ldr	r3, [pc, #572]	; (a028 <w5500_write_socket_udp+0x394>)
    9dec:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    9dee:	1dfb      	adds	r3, r7, #7
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	4a91      	ldr	r2, [pc, #580]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9df4:	498f      	ldr	r1, [pc, #572]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9df6:	434b      	muls	r3, r1
    9df8:	18d3      	adds	r3, r2, r3
    9dfa:	3306      	adds	r3, #6
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	021b      	lsls	r3, r3, #8
    9e00:	b21a      	sxth	r2, r3
    9e02:	1dfb      	adds	r3, r7, #7
    9e04:	781b      	ldrb	r3, [r3, #0]
    9e06:	498c      	ldr	r1, [pc, #560]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e08:	488a      	ldr	r0, [pc, #552]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e0a:	4343      	muls	r3, r0
    9e0c:	18cb      	adds	r3, r1, r3
    9e0e:	3307      	adds	r3, #7
    9e10:	781b      	ldrb	r3, [r3, #0]
    9e12:	b21b      	sxth	r3, r3
    9e14:	4313      	orrs	r3, r2
    9e16:	b21b      	sxth	r3, r3
    9e18:	b29a      	uxth	r2, r3
    9e1a:	4b84      	ldr	r3, [pc, #528]	; (a02c <w5500_write_socket_udp+0x398>)
    9e1c:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    9e1e:	1dfb      	adds	r3, r7, #7
    9e20:	7819      	ldrb	r1, [r3, #0]
    9e22:	1dfb      	adds	r3, r7, #7
    9e24:	781a      	ldrb	r2, [r3, #0]
    9e26:	4884      	ldr	r0, [pc, #528]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e28:	23ba      	movs	r3, #186	; 0xba
    9e2a:	00db      	lsls	r3, r3, #3
    9e2c:	4c81      	ldr	r4, [pc, #516]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e2e:	4362      	muls	r2, r4
    9e30:	1882      	adds	r2, r0, r2
    9e32:	18d3      	adds	r3, r2, r3
    9e34:	795a      	ldrb	r2, [r3, #5]
    9e36:	799b      	ldrb	r3, [r3, #6]
    9e38:	021b      	lsls	r3, r3, #8
    9e3a:	4313      	orrs	r3, r2
    9e3c:	b29a      	uxth	r2, r3
    9e3e:	4b7b      	ldr	r3, [pc, #492]	; (a02c <w5500_write_socket_udp+0x398>)
    9e40:	881b      	ldrh	r3, [r3, #0]
    9e42:	18d3      	adds	r3, r2, r3
    9e44:	b29a      	uxth	r2, r3
    9e46:	487c      	ldr	r0, [pc, #496]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e48:	23ba      	movs	r3, #186	; 0xba
    9e4a:	00db      	lsls	r3, r3, #3
    9e4c:	4c79      	ldr	r4, [pc, #484]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9e4e:	4361      	muls	r1, r4
    9e50:	1841      	adds	r1, r0, r1
    9e52:	18cb      	adds	r3, r1, r3
    9e54:	3305      	adds	r3, #5
    9e56:	21ff      	movs	r1, #255	; 0xff
    9e58:	4011      	ands	r1, r2
    9e5a:	000c      	movs	r4, r1
    9e5c:	7819      	ldrb	r1, [r3, #0]
    9e5e:	2000      	movs	r0, #0
    9e60:	4001      	ands	r1, r0
    9e62:	1c08      	adds	r0, r1, #0
    9e64:	1c21      	adds	r1, r4, #0
    9e66:	4301      	orrs	r1, r0
    9e68:	7019      	strb	r1, [r3, #0]
    9e6a:	0a12      	lsrs	r2, r2, #8
    9e6c:	b290      	uxth	r0, r2
    9e6e:	785a      	ldrb	r2, [r3, #1]
    9e70:	2100      	movs	r1, #0
    9e72:	400a      	ands	r2, r1
    9e74:	1c11      	adds	r1, r2, #0
    9e76:	1c02      	adds	r2, r0, #0
    9e78:	430a      	orrs	r2, r1
    9e7a:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    9e7c:	4b6c      	ldr	r3, [pc, #432]	; (a030 <w5500_write_socket_udp+0x39c>)
    9e7e:	2202      	movs	r2, #2
    9e80:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9e82:	4b64      	ldr	r3, [pc, #400]	; (a014 <w5500_write_socket_udp+0x380>)
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	3301      	adds	r3, #1
    9e88:	b2da      	uxtb	r2, r3
    9e8a:	4b62      	ldr	r3, [pc, #392]	; (a014 <w5500_write_socket_udp+0x380>)
    9e8c:	701a      	strb	r2, [r3, #0]
		break;
    9e8e:	e136      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_WR_PTR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    9e90:	230e      	movs	r3, #14
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	881a      	ldrh	r2, [r3, #0]
    9e96:	1dfb      	adds	r3, r7, #7
    9e98:	7819      	ldrb	r1, [r3, #0]
    9e9a:	4867      	ldr	r0, [pc, #412]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9e9c:	23ba      	movs	r3, #186	; 0xba
    9e9e:	00db      	lsls	r3, r3, #3
    9ea0:	4c64      	ldr	r4, [pc, #400]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9ea2:	4361      	muls	r1, r4
    9ea4:	1841      	adds	r1, r0, r1
    9ea6:	18cb      	adds	r3, r1, r3
    9ea8:	7959      	ldrb	r1, [r3, #5]
    9eaa:	799b      	ldrb	r3, [r3, #6]
    9eac:	021b      	lsls	r3, r3, #8
    9eae:	430b      	orrs	r3, r1
    9eb0:	b29b      	uxth	r3, r3
    9eb2:	0a1b      	lsrs	r3, r3, #8
    9eb4:	b29b      	uxth	r3, r3
    9eb6:	b2d9      	uxtb	r1, r3
    9eb8:	4b60      	ldr	r3, [pc, #384]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9eba:	5499      	strb	r1, [r3, r2]
    9ebc:	230e      	movs	r3, #14
    9ebe:	18fb      	adds	r3, r7, r3
    9ec0:	881a      	ldrh	r2, [r3, #0]
    9ec2:	230e      	movs	r3, #14
    9ec4:	18fb      	adds	r3, r7, r3
    9ec6:	3201      	adds	r2, #1
    9ec8:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    9eca:	230e      	movs	r3, #14
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	881a      	ldrh	r2, [r3, #0]
    9ed0:	1dfb      	adds	r3, r7, #7
    9ed2:	7819      	ldrb	r1, [r3, #0]
    9ed4:	4858      	ldr	r0, [pc, #352]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9ed6:	23ba      	movs	r3, #186	; 0xba
    9ed8:	00db      	lsls	r3, r3, #3
    9eda:	4c56      	ldr	r4, [pc, #344]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9edc:	4361      	muls	r1, r4
    9ede:	1841      	adds	r1, r0, r1
    9ee0:	18cb      	adds	r3, r1, r3
    9ee2:	7959      	ldrb	r1, [r3, #5]
    9ee4:	799b      	ldrb	r3, [r3, #6]
    9ee6:	021b      	lsls	r3, r3, #8
    9ee8:	430b      	orrs	r3, r1
    9eea:	b29b      	uxth	r3, r3
    9eec:	b2d9      	uxtb	r1, r3
    9eee:	4b53      	ldr	r3, [pc, #332]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9ef0:	5499      	strb	r1, [r3, r2]
    9ef2:	230e      	movs	r3, #14
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	881a      	ldrh	r2, [r3, #0]
    9ef8:	230e      	movs	r3, #14
    9efa:	18fb      	adds	r3, r7, r3
    9efc:	3201      	adds	r2, #1
    9efe:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    9f00:	4b46      	ldr	r3, [pc, #280]	; (a01c <w5500_write_socket_udp+0x388>)
    9f02:	2224      	movs	r2, #36	; 0x24
    9f04:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f06:	1dfb      	adds	r3, r7, #7
    9f08:	781b      	ldrb	r3, [r3, #0]
    9f0a:	015b      	lsls	r3, r3, #5
    9f0c:	b21b      	sxth	r3, r3
    9f0e:	2208      	movs	r2, #8
    9f10:	4313      	orrs	r3, r2
    9f12:	b21b      	sxth	r3, r3
    9f14:	b29a      	uxth	r2, r3
    9f16:	4b42      	ldr	r3, [pc, #264]	; (a020 <w5500_write_socket_udp+0x38c>)
    9f18:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9f1a:	4b43      	ldr	r3, [pc, #268]	; (a028 <w5500_write_socket_udp+0x394>)
    9f1c:	4a47      	ldr	r2, [pc, #284]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f1e:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9f20:	4b42      	ldr	r3, [pc, #264]	; (a02c <w5500_write_socket_udp+0x398>)
    9f22:	220e      	movs	r2, #14
    9f24:	18ba      	adds	r2, r7, r2
    9f26:	8812      	ldrh	r2, [r2, #0]
    9f28:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9f2a:	4b41      	ldr	r3, [pc, #260]	; (a030 <w5500_write_socket_udp+0x39c>)
    9f2c:	2202      	movs	r2, #2
    9f2e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f30:	4b38      	ldr	r3, [pc, #224]	; (a014 <w5500_write_socket_udp+0x380>)
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	3301      	adds	r3, #1
    9f36:	b2da      	uxtb	r2, r3
    9f38:	4b36      	ldr	r3, [pc, #216]	; (a014 <w5500_write_socket_udp+0x380>)
    9f3a:	701a      	strb	r2, [r3, #0]
		break;
    9f3c:	e0df      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    9f3e:	230e      	movs	r3, #14
    9f40:	18fb      	adds	r3, r7, r3
    9f42:	881b      	ldrh	r3, [r3, #0]
    9f44:	4a3d      	ldr	r2, [pc, #244]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f46:	2120      	movs	r1, #32
    9f48:	54d1      	strb	r1, [r2, r3]
    9f4a:	230e      	movs	r3, #14
    9f4c:	18fb      	adds	r3, r7, r3
    9f4e:	881a      	ldrh	r2, [r3, #0]
    9f50:	230e      	movs	r3, #14
    9f52:	18fb      	adds	r3, r7, r3
    9f54:	3201      	adds	r2, #1
    9f56:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_COMMAND;
    9f58:	4b30      	ldr	r3, [pc, #192]	; (a01c <w5500_write_socket_udp+0x388>)
    9f5a:	2201      	movs	r2, #1
    9f5c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f5e:	1dfb      	adds	r3, r7, #7
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	015b      	lsls	r3, r3, #5
    9f64:	b21b      	sxth	r3, r3
    9f66:	2208      	movs	r2, #8
    9f68:	4313      	orrs	r3, r2
    9f6a:	b21b      	sxth	r3, r3
    9f6c:	b29a      	uxth	r2, r3
    9f6e:	4b2c      	ldr	r3, [pc, #176]	; (a020 <w5500_write_socket_udp+0x38c>)
    9f70:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9f72:	4b2d      	ldr	r3, [pc, #180]	; (a028 <w5500_write_socket_udp+0x394>)
    9f74:	4a31      	ldr	r2, [pc, #196]	; (a03c <w5500_write_socket_udp+0x3a8>)
    9f76:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9f78:	4b2c      	ldr	r3, [pc, #176]	; (a02c <w5500_write_socket_udp+0x398>)
    9f7a:	220e      	movs	r2, #14
    9f7c:	18ba      	adds	r2, r7, r2
    9f7e:	8812      	ldrh	r2, [r2, #0]
    9f80:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9f82:	4b2b      	ldr	r3, [pc, #172]	; (a030 <w5500_write_socket_udp+0x39c>)
    9f84:	2202      	movs	r2, #2
    9f86:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f88:	4b22      	ldr	r3, [pc, #136]	; (a014 <w5500_write_socket_udp+0x380>)
    9f8a:	781b      	ldrb	r3, [r3, #0]
    9f8c:	3301      	adds	r3, #1
    9f8e:	b2da      	uxtb	r2, r3
    9f90:	4b20      	ldr	r3, [pc, #128]	; (a014 <w5500_write_socket_udp+0x380>)
    9f92:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    9f94:	1dfb      	adds	r3, r7, #7
    9f96:	781a      	ldrb	r2, [r3, #0]
    9f98:	4927      	ldr	r1, [pc, #156]	; (a038 <w5500_write_socket_udp+0x3a4>)
    9f9a:	23bc      	movs	r3, #188	; 0xbc
    9f9c:	00db      	lsls	r3, r3, #3
    9f9e:	4825      	ldr	r0, [pc, #148]	; (a034 <w5500_write_socket_udp+0x3a0>)
    9fa0:	4342      	muls	r2, r0
    9fa2:	188a      	adds	r2, r1, r2
    9fa4:	18d3      	adds	r3, r2, r3
    9fa6:	3303      	adds	r3, #3
    9fa8:	781a      	ldrb	r2, [r3, #0]
    9faa:	2100      	movs	r1, #0
    9fac:	400a      	ands	r2, r1
    9fae:	1c11      	adds	r1, r2, #0
    9fb0:	224c      	movs	r2, #76	; 0x4c
    9fb2:	430a      	orrs	r2, r1
    9fb4:	701a      	strb	r2, [r3, #0]
    9fb6:	785a      	ldrb	r2, [r3, #1]
    9fb8:	2100      	movs	r1, #0
    9fba:	400a      	ands	r2, r1
    9fbc:	1c11      	adds	r1, r2, #0
    9fbe:	221d      	movs	r2, #29
    9fc0:	430a      	orrs	r2, r1
    9fc2:	705a      	strb	r2, [r3, #1]
		break;
    9fc4:	e09b      	b.n	a0fe <w5500_write_socket_udp+0x46a>
		case UDP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    9fc6:	4b15      	ldr	r3, [pc, #84]	; (a01c <w5500_write_socket_udp+0x388>)
    9fc8:	2202      	movs	r2, #2
    9fca:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9fcc:	1dfb      	adds	r3, r7, #7
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	015b      	lsls	r3, r3, #5
    9fd2:	b21b      	sxth	r3, r3
    9fd4:	2208      	movs	r2, #8
    9fd6:	4313      	orrs	r3, r2
    9fd8:	b21b      	sxth	r3, r3
    9fda:	b29a      	uxth	r2, r3
    9fdc:	4b10      	ldr	r3, [pc, #64]	; (a020 <w5500_write_socket_udp+0x38c>)
    9fde:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    9fe0:	1dfb      	adds	r3, r7, #7
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	015b      	lsls	r3, r3, #5
    9fe6:	3310      	adds	r3, #16
    9fe8:	001a      	movs	r2, r3
    9fea:	4b0e      	ldr	r3, [pc, #56]	; (a024 <w5500_write_socket_udp+0x390>)
    9fec:	18d3      	adds	r3, r2, r3
    9fee:	1d5a      	adds	r2, r3, #5
    9ff0:	4b0d      	ldr	r3, [pc, #52]	; (a028 <w5500_write_socket_udp+0x394>)
    9ff2:	601a      	str	r2, [r3, #0]
			len_buf=1;
    9ff4:	4b0d      	ldr	r3, [pc, #52]	; (a02c <w5500_write_socket_udp+0x398>)
    9ff6:	2201      	movs	r2, #1
    9ff8:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9ffa:	4b0d      	ldr	r3, [pc, #52]	; (a030 <w5500_write_socket_udp+0x39c>)
    9ffc:	2201      	movs	r2, #1
    9ffe:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a000:	4b04      	ldr	r3, [pc, #16]	; (a014 <w5500_write_socket_udp+0x380>)
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	3301      	adds	r3, #1
    a006:	b2da      	uxtb	r2, r3
    a008:	4b02      	ldr	r3, [pc, #8]	; (a014 <w5500_write_socket_udp+0x380>)
    a00a:	701a      	strb	r2, [r3, #0]
		break;
    a00c:	e077      	b.n	a0fe <w5500_write_socket_udp+0x46a>
    a00e:	46c0      	nop			; (mov r8, r8)
    a010:	2000048e 	.word	0x2000048e
    a014:	2000048f 	.word	0x2000048f
    a018:	0000cbb0 	.word	0x0000cbb0
    a01c:	20000480 	.word	0x20000480
    a020:	20000482 	.word	0x20000482
    a024:	20003b08 	.word	0x20003b08
    a028:	20003afc 	.word	0x20003afc
    a02c:	20000484 	.word	0x20000484
    a030:	20003bbb 	.word	0x20003bbb
    a034:	000005e5 	.word	0x000005e5
    a038:	200005cc 	.word	0x200005cc
    a03c:	20003bbc 	.word	0x20003bbc
		case UDP_STATUS_CLR:															//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a040:	1dfb      	adds	r3, r7, #7
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	4a30      	ldr	r2, [pc, #192]	; (a108 <w5500_write_socket_udp+0x474>)
    a046:	2110      	movs	r1, #16
    a048:	015b      	lsls	r3, r3, #5
    a04a:	18d3      	adds	r3, r2, r3
    a04c:	185b      	adds	r3, r3, r1
    a04e:	795b      	ldrb	r3, [r3, #5]
    a050:	06db      	lsls	r3, r3, #27
    a052:	0fdb      	lsrs	r3, r3, #31
    a054:	b2db      	uxtb	r3, r3
    a056:	2b01      	cmp	r3, #1
    a058:	d12b      	bne.n	a0b2 <w5500_write_socket_udp+0x41e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    a05a:	230e      	movs	r3, #14
    a05c:	18fb      	adds	r3, r7, r3
    a05e:	881b      	ldrh	r3, [r3, #0]
    a060:	4a2a      	ldr	r2, [pc, #168]	; (a10c <w5500_write_socket_udp+0x478>)
    a062:	2110      	movs	r1, #16
    a064:	54d1      	strb	r1, [r2, r3]
    a066:	230e      	movs	r3, #14
    a068:	18fb      	adds	r3, r7, r3
    a06a:	881a      	ldrh	r2, [r3, #0]
    a06c:	230e      	movs	r3, #14
    a06e:	18fb      	adds	r3, r7, r3
    a070:	3201      	adds	r2, #1
    a072:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    a074:	4b26      	ldr	r3, [pc, #152]	; (a110 <w5500_write_socket_udp+0x47c>)
    a076:	2202      	movs	r2, #2
    a078:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a07a:	1dfb      	adds	r3, r7, #7
    a07c:	781b      	ldrb	r3, [r3, #0]
    a07e:	015b      	lsls	r3, r3, #5
    a080:	b21b      	sxth	r3, r3
    a082:	2208      	movs	r2, #8
    a084:	4313      	orrs	r3, r2
    a086:	b21b      	sxth	r3, r3
    a088:	b29a      	uxth	r2, r3
    a08a:	4b22      	ldr	r3, [pc, #136]	; (a114 <w5500_write_socket_udp+0x480>)
    a08c:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    a08e:	4b22      	ldr	r3, [pc, #136]	; (a118 <w5500_write_socket_udp+0x484>)
    a090:	4a1e      	ldr	r2, [pc, #120]	; (a10c <w5500_write_socket_udp+0x478>)
    a092:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    a094:	4b21      	ldr	r3, [pc, #132]	; (a11c <w5500_write_socket_udp+0x488>)
    a096:	220e      	movs	r2, #14
    a098:	18ba      	adds	r2, r7, r2
    a09a:	8812      	ldrh	r2, [r2, #0]
    a09c:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    a09e:	4b20      	ldr	r3, [pc, #128]	; (a120 <w5500_write_socket_udp+0x48c>)
    a0a0:	2202      	movs	r2, #2
    a0a2:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    a0a4:	4b1f      	ldr	r3, [pc, #124]	; (a124 <w5500_write_socket_udp+0x490>)
    a0a6:	781b      	ldrb	r3, [r3, #0]
    a0a8:	3301      	adds	r3, #1
    a0aa:	b2da      	uxtb	r2, r3
    a0ac:	4b1d      	ldr	r3, [pc, #116]	; (a124 <w5500_write_socket_udp+0x490>)
    a0ae:	701a      	strb	r2, [r3, #0]
				break;
    a0b0:	e025      	b.n	a0fe <w5500_write_socket_udp+0x46a>
			}
			st_wr_w5500--;
    a0b2:	4b1c      	ldr	r3, [pc, #112]	; (a124 <w5500_write_socket_udp+0x490>)
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	3b01      	subs	r3, #1
    a0b8:	b2da      	uxtb	r2, r3
    a0ba:	4b1a      	ldr	r3, [pc, #104]	; (a124 <w5500_write_socket_udp+0x490>)
    a0bc:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    a0be:	1dfb      	adds	r3, r7, #7
    a0c0:	781a      	ldrb	r2, [r3, #0]
    a0c2:	4919      	ldr	r1, [pc, #100]	; (a128 <w5500_write_socket_udp+0x494>)
    a0c4:	23bc      	movs	r3, #188	; 0xbc
    a0c6:	00db      	lsls	r3, r3, #3
    a0c8:	4818      	ldr	r0, [pc, #96]	; (a12c <w5500_write_socket_udp+0x498>)
    a0ca:	4342      	muls	r2, r0
    a0cc:	188a      	adds	r2, r1, r2
    a0ce:	18d3      	adds	r3, r2, r3
    a0d0:	78da      	ldrb	r2, [r3, #3]
    a0d2:	791b      	ldrb	r3, [r3, #4]
    a0d4:	021b      	lsls	r3, r3, #8
    a0d6:	4313      	orrs	r3, r2
    a0d8:	b29b      	uxth	r3, r3
    a0da:	2b00      	cmp	r3, #0
    a0dc:	d10e      	bne.n	a0fc <w5500_write_socket_udp+0x468>
			{
				st_wr_w5500=0; 
    a0de:	4b11      	ldr	r3, [pc, #68]	; (a124 <w5500_write_socket_udp+0x490>)
    a0e0:	2200      	movs	r2, #0
    a0e2:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a0e4:	2302      	movs	r3, #2
    a0e6:	e00b      	b.n	a100 <w5500_write_socket_udp+0x46c>
			}
		break;
		case 8:
				st_wr_w5500=0;
    a0e8:	4b0e      	ldr	r3, [pc, #56]	; (a124 <w5500_write_socket_udp+0x490>)
    a0ea:	2200      	movs	r2, #0
    a0ec:	701a      	strb	r2, [r3, #0]
				return PROC_OK;
    a0ee:	2301      	movs	r3, #1
    a0f0:	e006      	b.n	a100 <w5500_write_socket_udp+0x46c>
		break;
		default:
				st_wr_w5500=0; 
    a0f2:	4b0c      	ldr	r3, [pc, #48]	; (a124 <w5500_write_socket_udp+0x490>)
    a0f4:	2200      	movs	r2, #0
    a0f6:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a0f8:	2302      	movs	r3, #2
    a0fa:	e001      	b.n	a100 <w5500_write_socket_udp+0x46c>
		break;
    a0fc:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a0fe:	2300      	movs	r3, #0
}
    a100:	0018      	movs	r0, r3
    a102:	46bd      	mov	sp, r7
    a104:	b005      	add	sp, #20
    a106:	bd90      	pop	{r4, r7, pc}
    a108:	20003b08 	.word	0x20003b08
    a10c:	20003bbc 	.word	0x20003bbc
    a110:	20000480 	.word	0x20000480
    a114:	20000482 	.word	0x20000482
    a118:	20003afc 	.word	0x20003afc
    a11c:	20000484 	.word	0x20000484
    a120:	20003bbb 	.word	0x20003bbb
    a124:	2000048f 	.word	0x2000048f
    a128:	200005cc 	.word	0x200005cc
    a12c:	000005e5 	.word	0x000005e5

0000a130 <w5500_cmd_read_socket_tcp>:

WORD w5500_cmd_read_socket_tcp (BYTE sock_numb)
{
    a130:	b590      	push	{r4, r7, lr}
    a132:	b085      	sub	sp, #20
    a134:	af00      	add	r7, sp, #0
    a136:	0002      	movs	r2, r0
    a138:	1dfb      	adds	r3, r7, #7
    a13a:	701a      	strb	r2, [r3, #0]
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	static BYTE status_ded[MAX_SOCKETS_CNT];
	
	
	BYTE cnt=0;
    a13c:	230f      	movs	r3, #15
    a13e:	18fb      	adds	r3, r7, r3
    a140:	2200      	movs	r2, #0
    a142:	701a      	strb	r2, [r3, #0]

	switch(st_cmd_w5500)
    a144:	4bd2      	ldr	r3, [pc, #840]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	2b07      	cmp	r3, #7
    a14a:	d900      	bls.n	a14e <w5500_cmd_read_socket_tcp+0x1e>
    a14c:	e272      	b.n	a634 <w5500_cmd_read_socket_tcp+0x504>
    a14e:	009a      	lsls	r2, r3, #2
    a150:	4bd0      	ldr	r3, [pc, #832]	; (a494 <w5500_cmd_read_socket_tcp+0x364>)
    a152:	18d3      	adds	r3, r2, r3
    a154:	681b      	ldr	r3, [r3, #0]
    a156:	469f      	mov	pc, r3
	{
		case TCP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr
    a158:	4bcf      	ldr	r3, [pc, #828]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a15a:	2226      	movs	r2, #38	; 0x26
    a15c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a15e:	1dfb      	adds	r3, r7, #7
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	015b      	lsls	r3, r3, #5
    a164:	b21b      	sxth	r3, r3
    a166:	2208      	movs	r2, #8
    a168:	4313      	orrs	r3, r2
    a16a:	b21b      	sxth	r3, r3
    a16c:	b29a      	uxth	r2, r3
    a16e:	4bcb      	ldr	r3, [pc, #812]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a170:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//data
    a172:	1dfb      	adds	r3, r7, #7
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	015b      	lsls	r3, r3, #5
    a178:	3328      	adds	r3, #40	; 0x28
    a17a:	001a      	movs	r2, r3
    a17c:	4bc8      	ldr	r3, [pc, #800]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a17e:	18d3      	adds	r3, r2, r3
    a180:	1d5a      	adds	r2, r3, #5
    a182:	4bc8      	ldr	r3, [pc, #800]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a184:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a186:	4bc8      	ldr	r3, [pc, #800]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a188:	2206      	movs	r2, #6
    a18a:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a18c:	4bc7      	ldr	r3, [pc, #796]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a18e:	2201      	movs	r2, #1
    a190:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_PART_RD; //"next"
    a192:	4bbf      	ldr	r3, [pc, #764]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a194:	2201      	movs	r2, #1
    a196:	701a      	strb	r2, [r3, #0]
			size=0; 
    a198:	4bc5      	ldr	r3, [pc, #788]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a19a:	2200      	movs	r2, #0
    a19c:	801a      	strh	r2, [r3, #0]
			
			eth_sock[sock_numb].check_connect_cnt++;
    a19e:	1dfb      	adds	r3, r7, #7
    a1a0:	781b      	ldrb	r3, [r3, #0]
    a1a2:	48c4      	ldr	r0, [pc, #784]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1a4:	22bc      	movs	r2, #188	; 0xbc
    a1a6:	00d2      	lsls	r2, r2, #3
    a1a8:	49c3      	ldr	r1, [pc, #780]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a1aa:	4359      	muls	r1, r3
    a1ac:	1841      	adds	r1, r0, r1
    a1ae:	188a      	adds	r2, r1, r2
    a1b0:	7851      	ldrb	r1, [r2, #1]
    a1b2:	7892      	ldrb	r2, [r2, #2]
    a1b4:	0212      	lsls	r2, r2, #8
    a1b6:	430a      	orrs	r2, r1
    a1b8:	b292      	uxth	r2, r2
    a1ba:	3201      	adds	r2, #1
    a1bc:	b292      	uxth	r2, r2
    a1be:	48bd      	ldr	r0, [pc, #756]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1c0:	21bc      	movs	r1, #188	; 0xbc
    a1c2:	00c9      	lsls	r1, r1, #3
    a1c4:	4cbc      	ldr	r4, [pc, #752]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a1c6:	4363      	muls	r3, r4
    a1c8:	18c3      	adds	r3, r0, r3
    a1ca:	185b      	adds	r3, r3, r1
    a1cc:	3301      	adds	r3, #1
    a1ce:	21ff      	movs	r1, #255	; 0xff
    a1d0:	4011      	ands	r1, r2
    a1d2:	000c      	movs	r4, r1
    a1d4:	7819      	ldrb	r1, [r3, #0]
    a1d6:	2000      	movs	r0, #0
    a1d8:	4001      	ands	r1, r0
    a1da:	1c08      	adds	r0, r1, #0
    a1dc:	1c21      	adds	r1, r4, #0
    a1de:	4301      	orrs	r1, r0
    a1e0:	7019      	strb	r1, [r3, #0]
    a1e2:	0a12      	lsrs	r2, r2, #8
    a1e4:	b290      	uxth	r0, r2
    a1e6:	785a      	ldrb	r2, [r3, #1]
    a1e8:	2100      	movs	r1, #0
    a1ea:	400a      	ands	r2, r1
    a1ec:	1c11      	adds	r1, r2, #0
    a1ee:	1c02      	adds	r2, r0, #0
    a1f0:	430a      	orrs	r2, r1
    a1f2:	705a      	strb	r2, [r3, #1]
			if(eth_sock[sock_numb].check_connect_cnt > 5) {st_cmd_w5500 = TCP_STATUS_RD; eth_sock[sock_numb].check_connect_cnt=0;}
    a1f4:	1dfb      	adds	r3, r7, #7
    a1f6:	781a      	ldrb	r2, [r3, #0]
    a1f8:	49ae      	ldr	r1, [pc, #696]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a1fa:	23bc      	movs	r3, #188	; 0xbc
    a1fc:	00db      	lsls	r3, r3, #3
    a1fe:	48ae      	ldr	r0, [pc, #696]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a200:	4342      	muls	r2, r0
    a202:	188a      	adds	r2, r1, r2
    a204:	18d3      	adds	r3, r2, r3
    a206:	785a      	ldrb	r2, [r3, #1]
    a208:	789b      	ldrb	r3, [r3, #2]
    a20a:	021b      	lsls	r3, r3, #8
    a20c:	4313      	orrs	r3, r2
    a20e:	b29b      	uxth	r3, r3
    a210:	2b05      	cmp	r3, #5
    a212:	d800      	bhi.n	a216 <w5500_cmd_read_socket_tcp+0xe6>
    a214:	e213      	b.n	a63e <w5500_cmd_read_socket_tcp+0x50e>
    a216:	4b9e      	ldr	r3, [pc, #632]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a218:	2205      	movs	r2, #5
    a21a:	701a      	strb	r2, [r3, #0]
    a21c:	1dfb      	adds	r3, r7, #7
    a21e:	781a      	ldrb	r2, [r3, #0]
    a220:	49a4      	ldr	r1, [pc, #656]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a222:	23bc      	movs	r3, #188	; 0xbc
    a224:	00db      	lsls	r3, r3, #3
    a226:	48a4      	ldr	r0, [pc, #656]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a228:	4342      	muls	r2, r0
    a22a:	188a      	adds	r2, r1, r2
    a22c:	18d3      	adds	r3, r2, r3
    a22e:	3301      	adds	r3, #1
    a230:	781a      	ldrb	r2, [r3, #0]
    a232:	2100      	movs	r1, #0
    a234:	400a      	ands	r2, r1
    a236:	701a      	strb	r2, [r3, #0]
    a238:	785a      	ldrb	r2, [r3, #1]
    a23a:	2100      	movs	r1, #0
    a23c:	400a      	ands	r2, r1
    a23e:	705a      	strb	r2, [r3, #1]
		break;	
    a240:	e1fd      	b.n	a63e <w5500_cmd_read_socket_tcp+0x50e>
		case TCP_STATUS_RD:
			addr_w5500=ADDR_SOC_STATUS;//addr in w5500 
    a242:	4b95      	ldr	r3, [pc, #596]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a244:	2203      	movs	r2, #3
    a246:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a248:	1dfb      	adds	r3, r7, #7
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	015b      	lsls	r3, r3, #5
    a24e:	b21b      	sxth	r3, r3
    a250:	2208      	movs	r2, #8
    a252:	4313      	orrs	r3, r2
    a254:	b21b      	sxth	r3, r3
    a256:	b29a      	uxth	r2, r3
    a258:	4b90      	ldr	r3, [pc, #576]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a25a:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R04_Sn_SR_03.Status;//place for write result
    a25c:	1dfb      	adds	r3, r7, #7
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	015b      	lsls	r3, r3, #5
    a262:	3310      	adds	r3, #16
    a264:	001a      	movs	r2, r3
    a266:	4b8e      	ldr	r3, [pc, #568]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a268:	18d3      	adds	r3, r2, r3
    a26a:	1d9a      	adds	r2, r3, #6
    a26c:	4b8d      	ldr	r3, [pc, #564]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a26e:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a270:	4b8d      	ldr	r3, [pc, #564]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a272:	2201      	movs	r2, #1
    a274:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a276:	4b8d      	ldr	r3, [pc, #564]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a278:	2201      	movs	r2, #1
    a27a:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_FORK;//"next" 
    a27c:	4b84      	ldr	r3, [pc, #528]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a27e:	2206      	movs	r2, #6
    a280:	701a      	strb	r2, [r3, #0]
		break;
    a282:	e1dd      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
		case TCP_FORK:
			if(status_ded[sock_numb]==chip.sockReg[sock_numb].R04_Sn_SR_03.Status){st_cmd_w5500 = TCP_PART_RD; return PROC_WAIT;}
    a284:	1dfb      	adds	r3, r7, #7
    a286:	781b      	ldrb	r3, [r3, #0]
    a288:	4a8c      	ldr	r2, [pc, #560]	; (a4bc <w5500_cmd_read_socket_tcp+0x38c>)
    a28a:	5cd2      	ldrb	r2, [r2, r3]
    a28c:	1dfb      	adds	r3, r7, #7
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	4983      	ldr	r1, [pc, #524]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a292:	015b      	lsls	r3, r3, #5
    a294:	18cb      	adds	r3, r1, r3
    a296:	3316      	adds	r3, #22
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	429a      	cmp	r2, r3
    a29c:	d104      	bne.n	a2a8 <w5500_cmd_read_socket_tcp+0x178>
    a29e:	4b7c      	ldr	r3, [pc, #496]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a2a0:	2201      	movs	r2, #1
    a2a2:	701a      	strb	r2, [r3, #0]
    a2a4:	2300      	movs	r3, #0
    a2a6:	e1cc      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
			status_ded[sock_numb]=chip.sockReg[sock_numb].R04_Sn_SR_03.Status;
    a2a8:	1dfb      	adds	r3, r7, #7
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	1dfa      	adds	r2, r7, #7
    a2ae:	7812      	ldrb	r2, [r2, #0]
    a2b0:	497b      	ldr	r1, [pc, #492]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a2b2:	0152      	lsls	r2, r2, #5
    a2b4:	188a      	adds	r2, r1, r2
    a2b6:	3216      	adds	r2, #22
    a2b8:	7811      	ldrb	r1, [r2, #0]
    a2ba:	4a80      	ldr	r2, [pc, #512]	; (a4bc <w5500_cmd_read_socket_tcp+0x38c>)
    a2bc:	54d1      	strb	r1, [r2, r3]
			switch(chip.sockReg[sock_numb].R04_Sn_SR_03.Status)
    a2be:	1dfb      	adds	r3, r7, #7
    a2c0:	781b      	ldrb	r3, [r3, #0]
    a2c2:	4a77      	ldr	r2, [pc, #476]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a2c4:	015b      	lsls	r3, r3, #5
    a2c6:	18d3      	adds	r3, r2, r3
    a2c8:	3316      	adds	r3, #22
    a2ca:	781b      	ldrb	r3, [r3, #0]
    a2cc:	2b13      	cmp	r3, #19
    a2ce:	d00a      	beq.n	a2e6 <w5500_cmd_read_socket_tcp+0x1b6>
    a2d0:	2b1c      	cmp	r3, #28
    a2d2:	d00f      	beq.n	a2f4 <w5500_cmd_read_socket_tcp+0x1c4>
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d114      	bne.n	a302 <w5500_cmd_read_socket_tcp+0x1d2>
			{
				case ST_CLOSE:
					wbuf_w55[cnt]=CMD_OPEN;
    a2d8:	230f      	movs	r3, #15
    a2da:	18fb      	adds	r3, r7, r3
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	4a78      	ldr	r2, [pc, #480]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2e0:	2101      	movs	r1, #1
    a2e2:	54d1      	strb	r1, [r2, r3]
				break;
    a2e4:	e012      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_INIT:
					wbuf_w55[cnt]=CMD_LISTEN;
    a2e6:	230f      	movs	r3, #15
    a2e8:	18fb      	adds	r3, r7, r3
    a2ea:	781b      	ldrb	r3, [r3, #0]
    a2ec:	4a74      	ldr	r2, [pc, #464]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2ee:	2102      	movs	r1, #2
    a2f0:	54d1      	strb	r1, [r2, r3]
				break;
    a2f2:	e00b      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_CLOSE_WAIT:
					wbuf_w55[cnt]=CMD_CLOSE;			
    a2f4:	230f      	movs	r3, #15
    a2f6:	18fb      	adds	r3, r7, r3
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4a71      	ldr	r2, [pc, #452]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a2fc:	2110      	movs	r1, #16
    a2fe:	54d1      	strb	r1, [r2, r3]
				break;
    a300:	e004      	b.n	a30c <w5500_cmd_read_socket_tcp+0x1dc>
				default:
					st_cmd_w5500=TCP_PART_RD;
    a302:	4b63      	ldr	r3, [pc, #396]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a304:	2201      	movs	r2, #1
    a306:	701a      	strb	r2, [r3, #0]
				return PROC_WAIT;
    a308:	2300      	movs	r3, #0
    a30a:	e19a      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
			}
			addr_w5500=ADDR_SOC_COMMAND;
    a30c:	4b62      	ldr	r3, [pc, #392]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a30e:	2201      	movs	r2, #1
    a310:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a312:	1dfb      	adds	r3, r7, #7
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	015b      	lsls	r3, r3, #5
    a318:	b21b      	sxth	r3, r3
    a31a:	2208      	movs	r2, #8
    a31c:	4313      	orrs	r3, r2
    a31e:	b21b      	sxth	r3, r3
    a320:	b29a      	uxth	r2, r3
    a322:	4b5e      	ldr	r3, [pc, #376]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a324:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a326:	4b5f      	ldr	r3, [pc, #380]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a328:	4a65      	ldr	r2, [pc, #404]	; (a4c0 <w5500_cmd_read_socket_tcp+0x390>)
    a32a:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a32c:	4b5e      	ldr	r3, [pc, #376]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a32e:	2201      	movs	r2, #1
    a330:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a332:	4b5e      	ldr	r3, [pc, #376]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a334:	2202      	movs	r2, #2
    a336:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500=TCP_STATUS_RD;
    a338:	4b55      	ldr	r3, [pc, #340]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a33a:	2205      	movs	r2, #5
    a33c:	701a      	strb	r2, [r3, #0]
		break;
    a33e:	e17f      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
		case TCP_PART_RD:	
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    a340:	1dfb      	adds	r3, r7, #7
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	4a56      	ldr	r2, [pc, #344]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a346:	212d      	movs	r1, #45	; 0x2d
    a348:	015b      	lsls	r3, r3, #5
    a34a:	18d3      	adds	r3, r2, r3
    a34c:	185b      	adds	r3, r3, r1
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	021b      	lsls	r3, r3, #8
    a352:	b21a      	sxth	r2, r3
    a354:	1dfb      	adds	r3, r7, #7
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	4951      	ldr	r1, [pc, #324]	; (a4a0 <w5500_cmd_read_socket_tcp+0x370>)
    a35a:	202e      	movs	r0, #46	; 0x2e
    a35c:	015b      	lsls	r3, r3, #5
    a35e:	18cb      	adds	r3, r1, r3
    a360:	181b      	adds	r3, r3, r0
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	b21b      	sxth	r3, r3
    a366:	4313      	orrs	r3, r2
    a368:	b21b      	sxth	r3, r3
    a36a:	b29a      	uxth	r2, r3
    a36c:	4b55      	ldr	r3, [pc, #340]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a36e:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return		
    a370:	4b54      	ldr	r3, [pc, #336]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a372:	881b      	ldrh	r3, [r3, #0]
    a374:	b29b      	uxth	r3, r3
    a376:	2b00      	cmp	r3, #0
    a378:	d100      	bne.n	a37c <w5500_cmd_read_socket_tcp+0x24c>
    a37a:	e084      	b.n	a486 <w5500_cmd_read_socket_tcp+0x356>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;//addr start messege
    a37c:	1dfb      	adds	r3, r7, #7
    a37e:	781a      	ldrb	r2, [r3, #0]
    a380:	494c      	ldr	r1, [pc, #304]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a382:	23ba      	movs	r3, #186	; 0xba
    a384:	00db      	lsls	r3, r3, #3
    a386:	484c      	ldr	r0, [pc, #304]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a388:	4342      	muls	r2, r0
    a38a:	188a      	adds	r2, r1, r2
    a38c:	18d3      	adds	r3, r2, r3
    a38e:	78da      	ldrb	r2, [r3, #3]
    a390:	791b      	ldrb	r3, [r3, #4]
    a392:	021b      	lsls	r3, r3, #8
    a394:	4313      	orrs	r3, r2
    a396:	b29a      	uxth	r2, r3
    a398:	4b3f      	ldr	r3, [pc, #252]	; (a498 <w5500_cmd_read_socket_tcp+0x368>)
    a39a:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);//bsb sock RX
    a39c:	1dfb      	adds	r3, r7, #7
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	015b      	lsls	r3, r3, #5
    a3a2:	b21b      	sxth	r3, r3
    a3a4:	2218      	movs	r2, #24
    a3a6:	4313      	orrs	r3, r2
    a3a8:	b21b      	sxth	r3, r3
    a3aa:	b29a      	uxth	r2, r3
    a3ac:	4b3b      	ldr	r3, [pc, #236]	; (a49c <w5500_cmd_read_socket_tcp+0x36c>)
    a3ae:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb].data;
    a3b0:	1dfb      	adds	r3, r7, #7
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	4a40      	ldr	r2, [pc, #256]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3b6:	4353      	muls	r3, r2
    a3b8:	3308      	adds	r3, #8
    a3ba:	001a      	movs	r2, r3
    a3bc:	4b3d      	ldr	r3, [pc, #244]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3be:	18d2      	adds	r2, r2, r3
    a3c0:	4b38      	ldr	r3, [pc, #224]	; (a4a4 <w5500_cmd_read_socket_tcp+0x374>)
    a3c2:	601a      	str	r2, [r3, #0]
				len_buf = sizert;
    a3c4:	4b3f      	ldr	r3, [pc, #252]	; (a4c4 <w5500_cmd_read_socket_tcp+0x394>)
    a3c6:	881b      	ldrh	r3, [r3, #0]
    a3c8:	b29a      	uxth	r2, r3
    a3ca:	4b37      	ldr	r3, [pc, #220]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a3cc:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    a3ce:	1dfb      	adds	r3, r7, #7
    a3d0:	7819      	ldrb	r1, [r3, #0]
    a3d2:	1dfb      	adds	r3, r7, #7
    a3d4:	781a      	ldrb	r2, [r3, #0]
    a3d6:	4837      	ldr	r0, [pc, #220]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3d8:	23ba      	movs	r3, #186	; 0xba
    a3da:	00db      	lsls	r3, r3, #3
    a3dc:	4c36      	ldr	r4, [pc, #216]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3de:	4362      	muls	r2, r4
    a3e0:	1882      	adds	r2, r0, r2
    a3e2:	18d3      	adds	r3, r2, r3
    a3e4:	78da      	ldrb	r2, [r3, #3]
    a3e6:	791b      	ldrb	r3, [r3, #4]
    a3e8:	021b      	lsls	r3, r3, #8
    a3ea:	4313      	orrs	r3, r2
    a3ec:	b29a      	uxth	r2, r3
    a3ee:	4b2e      	ldr	r3, [pc, #184]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a3f0:	881b      	ldrh	r3, [r3, #0]
    a3f2:	18d3      	adds	r3, r2, r3
    a3f4:	b29a      	uxth	r2, r3
    a3f6:	482f      	ldr	r0, [pc, #188]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a3f8:	23ba      	movs	r3, #186	; 0xba
    a3fa:	00db      	lsls	r3, r3, #3
    a3fc:	4c2e      	ldr	r4, [pc, #184]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a3fe:	4361      	muls	r1, r4
    a400:	1841      	adds	r1, r0, r1
    a402:	18cb      	adds	r3, r1, r3
    a404:	3303      	adds	r3, #3
    a406:	21ff      	movs	r1, #255	; 0xff
    a408:	4011      	ands	r1, r2
    a40a:	000c      	movs	r4, r1
    a40c:	7819      	ldrb	r1, [r3, #0]
    a40e:	2000      	movs	r0, #0
    a410:	4001      	ands	r1, r0
    a412:	1c08      	adds	r0, r1, #0
    a414:	1c21      	adds	r1, r4, #0
    a416:	4301      	orrs	r1, r0
    a418:	7019      	strb	r1, [r3, #0]
    a41a:	0a12      	lsrs	r2, r2, #8
    a41c:	b290      	uxth	r0, r2
    a41e:	785a      	ldrb	r2, [r3, #1]
    a420:	2100      	movs	r1, #0
    a422:	400a      	ands	r2, r1
    a424:	1c11      	adds	r1, r2, #0
    a426:	1c02      	adds	r2, r0, #0
    a428:	430a      	orrs	r2, r1
    a42a:	705a      	strb	r2, [r3, #1]
				
				size=len_buf;
    a42c:	4b1e      	ldr	r3, [pc, #120]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a42e:	881a      	ldrh	r2, [r3, #0]
    a430:	4b1f      	ldr	r3, [pc, #124]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a432:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_TCP){size=PROC_ER;}
    a434:	4b1c      	ldr	r3, [pc, #112]	; (a4a8 <w5500_cmd_read_socket_tcp+0x378>)
    a436:	881b      	ldrh	r3, [r3, #0]
    a438:	4a23      	ldr	r2, [pc, #140]	; (a4c8 <w5500_cmd_read_socket_tcp+0x398>)
    a43a:	4293      	cmp	r3, r2
    a43c:	d902      	bls.n	a444 <w5500_cmd_read_socket_tcp+0x314>
    a43e:	4b1c      	ldr	r3, [pc, #112]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a440:	2202      	movs	r2, #2
    a442:	801a      	strh	r2, [r3, #0]
					
				eth_sock[sock_numb].len[0]=	(size & 0xFF00)>>8;
    a444:	1dfb      	adds	r3, r7, #7
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	4a19      	ldr	r2, [pc, #100]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a44a:	8812      	ldrh	r2, [r2, #0]
    a44c:	0a12      	lsrs	r2, r2, #8
    a44e:	b292      	uxth	r2, r2
    a450:	b2d0      	uxtb	r0, r2
    a452:	4a18      	ldr	r2, [pc, #96]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a454:	4918      	ldr	r1, [pc, #96]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a456:	434b      	muls	r3, r1
    a458:	18d3      	adds	r3, r2, r3
    a45a:	3306      	adds	r3, #6
    a45c:	1c02      	adds	r2, r0, #0
    a45e:	701a      	strb	r2, [r3, #0]
				eth_sock[sock_numb].len[1]=	(size & 0x00FF);							
    a460:	1dfb      	adds	r3, r7, #7
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	4a12      	ldr	r2, [pc, #72]	; (a4b0 <w5500_cmd_read_socket_tcp+0x380>)
    a466:	8812      	ldrh	r2, [r2, #0]
    a468:	b2d0      	uxtb	r0, r2
    a46a:	4a12      	ldr	r2, [pc, #72]	; (a4b4 <w5500_cmd_read_socket_tcp+0x384>)
    a46c:	4912      	ldr	r1, [pc, #72]	; (a4b8 <w5500_cmd_read_socket_tcp+0x388>)
    a46e:	434b      	muls	r3, r1
    a470:	18d3      	adds	r3, r2, r3
    a472:	3307      	adds	r3, #7
    a474:	1c02      	adds	r2, r0, #0
    a476:	701a      	strb	r2, [r3, #0]
				cmd=READ_DATA;
    a478:	4b0c      	ldr	r3, [pc, #48]	; (a4ac <w5500_cmd_read_socket_tcp+0x37c>)
    a47a:	2201      	movs	r2, #1
    a47c:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500 = TCP_DROP_PTR;
    a47e:	4b04      	ldr	r3, [pc, #16]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a480:	2203      	movs	r2, #3
    a482:	701a      	strb	r2, [r3, #0]
				break;
    a484:	e0dc      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
			}
			st_cmd_w5500=TCP_GIVE_LEN;
    a486:	4b02      	ldr	r3, [pc, #8]	; (a490 <w5500_cmd_read_socket_tcp+0x360>)
    a488:	2200      	movs	r2, #0
    a48a:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    a48c:	2302      	movs	r3, #2
    a48e:	e0d8      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
    a490:	20000490 	.word	0x20000490
    a494:	0000cbd4 	.word	0x0000cbd4
    a498:	20000480 	.word	0x20000480
    a49c:	20000482 	.word	0x20000482
    a4a0:	20003b08 	.word	0x20003b08
    a4a4:	20003afc 	.word	0x20003afc
    a4a8:	20000484 	.word	0x20000484
    a4ac:	20003bbb 	.word	0x20003bbb
    a4b0:	20000492 	.word	0x20000492
    a4b4:	200005cc 	.word	0x200005cc
    a4b8:	000005e5 	.word	0x000005e5
    a4bc:	20000494 	.word	0x20000494
    a4c0:	20003bbc 	.word	0x20003bbc
    a4c4:	20000486 	.word	0x20000486
    a4c8:	000005b4 	.word	0x000005b4
		break;
		case TCP_DROP_PTR:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    a4cc:	230f      	movs	r3, #15
    a4ce:	18fb      	adds	r3, r7, r3
    a4d0:	781a      	ldrb	r2, [r3, #0]
    a4d2:	1dfb      	adds	r3, r7, #7
    a4d4:	7819      	ldrb	r1, [r3, #0]
    a4d6:	485d      	ldr	r0, [pc, #372]	; (a64c <w5500_cmd_read_socket_tcp+0x51c>)
    a4d8:	23ba      	movs	r3, #186	; 0xba
    a4da:	00db      	lsls	r3, r3, #3
    a4dc:	4c5c      	ldr	r4, [pc, #368]	; (a650 <w5500_cmd_read_socket_tcp+0x520>)
    a4de:	4361      	muls	r1, r4
    a4e0:	1841      	adds	r1, r0, r1
    a4e2:	18cb      	adds	r3, r1, r3
    a4e4:	78d9      	ldrb	r1, [r3, #3]
    a4e6:	791b      	ldrb	r3, [r3, #4]
    a4e8:	021b      	lsls	r3, r3, #8
    a4ea:	430b      	orrs	r3, r1
    a4ec:	b29b      	uxth	r3, r3
    a4ee:	0a1b      	lsrs	r3, r3, #8
    a4f0:	b29b      	uxth	r3, r3
    a4f2:	b2d9      	uxtb	r1, r3
    a4f4:	4b57      	ldr	r3, [pc, #348]	; (a654 <w5500_cmd_read_socket_tcp+0x524>)
    a4f6:	5499      	strb	r1, [r3, r2]
    a4f8:	230f      	movs	r3, #15
    a4fa:	18fb      	adds	r3, r7, r3
    a4fc:	781a      	ldrb	r2, [r3, #0]
    a4fe:	230f      	movs	r3, #15
    a500:	18fb      	adds	r3, r7, r3
    a502:	3201      	adds	r2, #1
    a504:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    a506:	230f      	movs	r3, #15
    a508:	18fb      	adds	r3, r7, r3
    a50a:	781a      	ldrb	r2, [r3, #0]
    a50c:	1dfb      	adds	r3, r7, #7
    a50e:	7819      	ldrb	r1, [r3, #0]
    a510:	484e      	ldr	r0, [pc, #312]	; (a64c <w5500_cmd_read_socket_tcp+0x51c>)
    a512:	23ba      	movs	r3, #186	; 0xba
    a514:	00db      	lsls	r3, r3, #3
    a516:	4c4e      	ldr	r4, [pc, #312]	; (a650 <w5500_cmd_read_socket_tcp+0x520>)
    a518:	4361      	muls	r1, r4
    a51a:	1841      	adds	r1, r0, r1
    a51c:	18cb      	adds	r3, r1, r3
    a51e:	78d9      	ldrb	r1, [r3, #3]
    a520:	791b      	ldrb	r3, [r3, #4]
    a522:	021b      	lsls	r3, r3, #8
    a524:	430b      	orrs	r3, r1
    a526:	b29b      	uxth	r3, r3
    a528:	b2d9      	uxtb	r1, r3
    a52a:	4b4a      	ldr	r3, [pc, #296]	; (a654 <w5500_cmd_read_socket_tcp+0x524>)
    a52c:	5499      	strb	r1, [r3, r2]
    a52e:	230f      	movs	r3, #15
    a530:	18fb      	adds	r3, r7, r3
    a532:	781a      	ldrb	r2, [r3, #0]
    a534:	230f      	movs	r3, #15
    a536:	18fb      	adds	r3, r7, r3
    a538:	3201      	adds	r2, #1
    a53a:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;
    a53c:	4b46      	ldr	r3, [pc, #280]	; (a658 <w5500_cmd_read_socket_tcp+0x528>)
    a53e:	2228      	movs	r2, #40	; 0x28
    a540:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a542:	1dfb      	adds	r3, r7, #7
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	015b      	lsls	r3, r3, #5
    a548:	b21b      	sxth	r3, r3
    a54a:	2208      	movs	r2, #8
    a54c:	4313      	orrs	r3, r2
    a54e:	b21b      	sxth	r3, r3
    a550:	b29a      	uxth	r2, r3
    a552:	4b42      	ldr	r3, [pc, #264]	; (a65c <w5500_cmd_read_socket_tcp+0x52c>)
    a554:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a556:	4b42      	ldr	r3, [pc, #264]	; (a660 <w5500_cmd_read_socket_tcp+0x530>)
    a558:	4a3e      	ldr	r2, [pc, #248]	; (a654 <w5500_cmd_read_socket_tcp+0x524>)
    a55a:	601a      	str	r2, [r3, #0]
			len_buf=2;
    a55c:	4b41      	ldr	r3, [pc, #260]	; (a664 <w5500_cmd_read_socket_tcp+0x534>)
    a55e:	2202      	movs	r2, #2
    a560:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a562:	4b41      	ldr	r3, [pc, #260]	; (a668 <w5500_cmd_read_socket_tcp+0x538>)
    a564:	2202      	movs	r2, #2
    a566:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_RSV_CMD;//"next" 
    a568:	4b40      	ldr	r3, [pc, #256]	; (a66c <w5500_cmd_read_socket_tcp+0x53c>)
    a56a:	2202      	movs	r2, #2
    a56c:	701a      	strb	r2, [r3, #0]
		break;
    a56e:	e067      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
		case TCP_RSV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//go to reciv mode (and rewrite number)
    a570:	230f      	movs	r3, #15
    a572:	18fb      	adds	r3, r7, r3
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	4a37      	ldr	r2, [pc, #220]	; (a654 <w5500_cmd_read_socket_tcp+0x524>)
    a578:	2140      	movs	r1, #64	; 0x40
    a57a:	54d1      	strb	r1, [r2, r3]
    a57c:	230f      	movs	r3, #15
    a57e:	18fb      	adds	r3, r7, r3
    a580:	781a      	ldrb	r2, [r3, #0]
    a582:	230f      	movs	r3, #15
    a584:	18fb      	adds	r3, r7, r3
    a586:	3201      	adds	r2, #1
    a588:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a58a:	4b33      	ldr	r3, [pc, #204]	; (a658 <w5500_cmd_read_socket_tcp+0x528>)
    a58c:	2201      	movs	r2, #1
    a58e:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a590:	1dfb      	adds	r3, r7, #7
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	015b      	lsls	r3, r3, #5
    a596:	b21b      	sxth	r3, r3
    a598:	2208      	movs	r2, #8
    a59a:	4313      	orrs	r3, r2
    a59c:	b21b      	sxth	r3, r3
    a59e:	b29a      	uxth	r2, r3
    a5a0:	4b2e      	ldr	r3, [pc, #184]	; (a65c <w5500_cmd_read_socket_tcp+0x52c>)
    a5a2:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a5a4:	4b2e      	ldr	r3, [pc, #184]	; (a660 <w5500_cmd_read_socket_tcp+0x530>)
    a5a6:	4a2b      	ldr	r2, [pc, #172]	; (a654 <w5500_cmd_read_socket_tcp+0x524>)
    a5a8:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a5aa:	230f      	movs	r3, #15
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	b29a      	uxth	r2, r3
    a5b2:	4b2c      	ldr	r3, [pc, #176]	; (a664 <w5500_cmd_read_socket_tcp+0x534>)
    a5b4:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a5b6:	4b2c      	ldr	r3, [pc, #176]	; (a668 <w5500_cmd_read_socket_tcp+0x538>)
    a5b8:	2202      	movs	r2, #2
    a5ba:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_GIVE_IP;//"next" 
    a5bc:	4b2b      	ldr	r3, [pc, #172]	; (a66c <w5500_cmd_read_socket_tcp+0x53c>)
    a5be:	2207      	movs	r2, #7
    a5c0:	701a      	strb	r2, [r3, #0]
		break;
    a5c2:	e03d      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
		case TCP_GIVE_IP:
			addr_w5500=ADDR_SOC_D_IP_ADDR0;//addr
    a5c4:	4b24      	ldr	r3, [pc, #144]	; (a658 <w5500_cmd_read_socket_tcp+0x528>)
    a5c6:	220c      	movs	r2, #12
    a5c8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a5ca:	1dfb      	adds	r3, r7, #7
    a5cc:	781b      	ldrb	r3, [r3, #0]
    a5ce:	015b      	lsls	r3, r3, #5
    a5d0:	b21b      	sxth	r3, r3
    a5d2:	2208      	movs	r2, #8
    a5d4:	4313      	orrs	r3, r2
    a5d6:	b21b      	sxth	r3, r3
    a5d8:	b29a      	uxth	r2, r3
    a5da:	4b20      	ldr	r3, [pc, #128]	; (a65c <w5500_cmd_read_socket_tcp+0x52c>)
    a5dc:	801a      	strh	r2, [r3, #0]
			ptr_buf=ip_tcp;//data
    a5de:	4b20      	ldr	r3, [pc, #128]	; (a660 <w5500_cmd_read_socket_tcp+0x530>)
    a5e0:	4a23      	ldr	r2, [pc, #140]	; (a670 <w5500_cmd_read_socket_tcp+0x540>)
    a5e2:	601a      	str	r2, [r3, #0]
			len_buf=4;
    a5e4:	4b1f      	ldr	r3, [pc, #124]	; (a664 <w5500_cmd_read_socket_tcp+0x534>)
    a5e6:	2204      	movs	r2, #4
    a5e8:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a5ea:	4b1f      	ldr	r3, [pc, #124]	; (a668 <w5500_cmd_read_socket_tcp+0x538>)
    a5ec:	2201      	movs	r2, #1
    a5ee:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_BK_START; //"next"
    a5f0:	4b1e      	ldr	r3, [pc, #120]	; (a66c <w5500_cmd_read_socket_tcp+0x53c>)
    a5f2:	2204      	movs	r2, #4
    a5f4:	701a      	strb	r2, [r3, #0]

		break;		
    a5f6:	e023      	b.n	a640 <w5500_cmd_read_socket_tcp+0x510>
		case TCP_BK_START:
			//memcpy((BYTE*) & eth_sock[sock_numb].ip_addr, ip_tcp, 4);
			eth_sock[sock_numb].ip_addr[0]=ip_tcp[0];
    a5f8:	1dfb      	adds	r3, r7, #7
    a5fa:	781a      	ldrb	r2, [r3, #0]
    a5fc:	4b1c      	ldr	r3, [pc, #112]	; (a670 <w5500_cmd_read_socket_tcp+0x540>)
    a5fe:	781b      	ldrb	r3, [r3, #0]
    a600:	b2d8      	uxtb	r0, r3
    a602:	4b12      	ldr	r3, [pc, #72]	; (a64c <w5500_cmd_read_socket_tcp+0x51c>)
    a604:	4912      	ldr	r1, [pc, #72]	; (a650 <w5500_cmd_read_socket_tcp+0x520>)
    a606:	434a      	muls	r2, r1
    a608:	1c01      	adds	r1, r0, #0
    a60a:	54d1      	strb	r1, [r2, r3]
			st_cmd_w5500=TCP_GIVE_LEN;//сброс параметров
    a60c:	4b17      	ldr	r3, [pc, #92]	; (a66c <w5500_cmd_read_socket_tcp+0x53c>)
    a60e:	2200      	movs	r2, #0
    a610:	701a      	strb	r2, [r3, #0]
			if(!size)					 {return PROC_ER;}
    a612:	4b18      	ldr	r3, [pc, #96]	; (a674 <w5500_cmd_read_socket_tcp+0x544>)
    a614:	881b      	ldrh	r3, [r3, #0]
    a616:	2b00      	cmp	r3, #0
    a618:	d101      	bne.n	a61e <w5500_cmd_read_socket_tcp+0x4ee>
    a61a:	2302      	movs	r3, #2
    a61c:	e011      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
			if(size > USART_BUF_SIZE)	 {return PROC_ER;}
    a61e:	4b15      	ldr	r3, [pc, #84]	; (a674 <w5500_cmd_read_socket_tcp+0x544>)
    a620:	881a      	ldrh	r2, [r3, #0]
    a622:	2380      	movs	r3, #128	; 0x80
    a624:	005b      	lsls	r3, r3, #1
    a626:	429a      	cmp	r2, r3
    a628:	d901      	bls.n	a62e <w5500_cmd_read_socket_tcp+0x4fe>
    a62a:	2302      	movs	r3, #2
    a62c:	e009      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
			return (size);
    a62e:	4b11      	ldr	r3, [pc, #68]	; (a674 <w5500_cmd_read_socket_tcp+0x544>)
    a630:	881b      	ldrh	r3, [r3, #0]
    a632:	e006      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    a634:	4b0d      	ldr	r3, [pc, #52]	; (a66c <w5500_cmd_read_socket_tcp+0x53c>)
    a636:	2200      	movs	r2, #0
    a638:	701a      	strb	r2, [r3, #0]
    a63a:	2302      	movs	r3, #2
    a63c:	e001      	b.n	a642 <w5500_cmd_read_socket_tcp+0x512>
		break;	
    a63e:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a640:	2300      	movs	r3, #0
}
    a642:	0018      	movs	r0, r3
    a644:	46bd      	mov	sp, r7
    a646:	b005      	add	sp, #20
    a648:	bd90      	pop	{r4, r7, pc}
    a64a:	46c0      	nop			; (mov r8, r8)
    a64c:	200005cc 	.word	0x200005cc
    a650:	000005e5 	.word	0x000005e5
    a654:	20003bbc 	.word	0x20003bbc
    a658:	20000480 	.word	0x20000480
    a65c:	20000482 	.word	0x20000482
    a660:	20003afc 	.word	0x20003afc
    a664:	20000484 	.word	0x20000484
    a668:	20003bbb 	.word	0x20003bbb
    a66c:	20000490 	.word	0x20000490
    a670:	20003b00 	.word	0x20003b00
    a674:	20000492 	.word	0x20000492

0000a678 <w5500_write_socket_tcp>:

WORD w5500_write_socket_tcp (BYTE sock_numb)
{
    a678:	b590      	push	{r4, r7, lr}
    a67a:	b085      	sub	sp, #20
    a67c:	af00      	add	r7, sp, #0
    a67e:	0002      	movs	r2, r0
    a680:	1dfb      	adds	r3, r7, #7
    a682:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500=0;
	static BYTE numb_static=0;
	WORD cnt=0;
    a684:	230e      	movs	r3, #14
    a686:	18fb      	adds	r3, r7, r3
    a688:	2200      	movs	r2, #0
    a68a:	801a      	strh	r2, [r3, #0]
	
	if(numb_static!=sock_numb){numb_static=sock_numb;st_wr_w5500=0;}
    a68c:	4bdc      	ldr	r3, [pc, #880]	; (aa00 <w5500_write_socket_tcp+0x388>)
    a68e:	781b      	ldrb	r3, [r3, #0]
    a690:	1dfa      	adds	r2, r7, #7
    a692:	7812      	ldrb	r2, [r2, #0]
    a694:	429a      	cmp	r2, r3
    a696:	d006      	beq.n	a6a6 <w5500_write_socket_tcp+0x2e>
    a698:	4bd9      	ldr	r3, [pc, #868]	; (aa00 <w5500_write_socket_tcp+0x388>)
    a69a:	1dfa      	adds	r2, r7, #7
    a69c:	7812      	ldrb	r2, [r2, #0]
    a69e:	701a      	strb	r2, [r3, #0]
    a6a0:	4bd8      	ldr	r3, [pc, #864]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a6a2:	2200      	movs	r2, #0
    a6a4:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    a6a6:	4bd7      	ldr	r3, [pc, #860]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a6a8:	781b      	ldrb	r3, [r3, #0]
    a6aa:	2b06      	cmp	r3, #6
    a6ac:	d900      	bls.n	a6b0 <w5500_write_socket_tcp+0x38>
    a6ae:	e21a      	b.n	aae6 <w5500_write_socket_tcp+0x46e>
    a6b0:	009a      	lsls	r2, r3, #2
    a6b2:	4bd5      	ldr	r3, [pc, #852]	; (aa08 <w5500_write_socket_tcp+0x390>)
    a6b4:	18d3      	adds	r3, r2, r3
    a6b6:	681b      	ldr	r3, [r3, #0]
    a6b8:	469f      	mov	pc, r3
	{
		case TCP_RD_FSR:																	//read reg tx status FSR
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;
    a6ba:	4bd4      	ldr	r3, [pc, #848]	; (aa0c <w5500_write_socket_tcp+0x394>)
    a6bc:	2220      	movs	r2, #32
    a6be:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a6c0:	1dfb      	adds	r3, r7, #7
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	015b      	lsls	r3, r3, #5
    a6c6:	b21b      	sxth	r3, r3
    a6c8:	2208      	movs	r2, #8
    a6ca:	4313      	orrs	r3, r2
    a6cc:	b21b      	sxth	r3, r3
    a6ce:	b29a      	uxth	r2, r3
    a6d0:	4bcf      	ldr	r3, [pc, #828]	; (aa10 <w5500_write_socket_tcp+0x398>)
    a6d2:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    a6d4:	1dfb      	adds	r3, r7, #7
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	3301      	adds	r3, #1
    a6da:	015a      	lsls	r2, r3, #5
    a6dc:	4bcd      	ldr	r3, [pc, #820]	; (aa14 <w5500_write_socket_tcp+0x39c>)
    a6de:	18d3      	adds	r3, r2, r3
    a6e0:	1dda      	adds	r2, r3, #7
    a6e2:	4bcd      	ldr	r3, [pc, #820]	; (aa18 <w5500_write_socket_tcp+0x3a0>)
    a6e4:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a6e6:	4bcd      	ldr	r3, [pc, #820]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a6e8:	2206      	movs	r2, #6
    a6ea:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a6ec:	4bcc      	ldr	r3, [pc, #816]	; (aa20 <w5500_write_socket_tcp+0x3a8>)
    a6ee:	2201      	movs	r2, #1
    a6f0:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a6f2:	4bc4      	ldr	r3, [pc, #784]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	3301      	adds	r3, #1
    a6f8:	b2da      	uxtb	r2, r3
    a6fa:	4bc2      	ldr	r3, [pc, #776]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a6fc:	701a      	strb	r2, [r3, #0]
		break;
    a6fe:	e1f8      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
		case TCP_WR_DATA:	
			sizert=	(*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case2);				
    a700:	1dfb      	adds	r3, r7, #7
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	4ac3      	ldr	r2, [pc, #780]	; (aa14 <w5500_write_socket_tcp+0x39c>)
    a706:	212b      	movs	r1, #43	; 0x2b
    a708:	015b      	lsls	r3, r3, #5
    a70a:	18d3      	adds	r3, r2, r3
    a70c:	185b      	adds	r3, r3, r1
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	021b      	lsls	r3, r3, #8
    a712:	b21a      	sxth	r2, r3
    a714:	1dfb      	adds	r3, r7, #7
    a716:	781b      	ldrb	r3, [r3, #0]
    a718:	49be      	ldr	r1, [pc, #760]	; (aa14 <w5500_write_socket_tcp+0x39c>)
    a71a:	202c      	movs	r0, #44	; 0x2c
    a71c:	015b      	lsls	r3, r3, #5
    a71e:	18cb      	adds	r3, r1, r3
    a720:	181b      	adds	r3, r3, r0
    a722:	781b      	ldrb	r3, [r3, #0]
    a724:	b21b      	sxth	r3, r3
    a726:	4313      	orrs	r3, r2
    a728:	b21b      	sxth	r3, r3
    a72a:	b29a      	uxth	r2, r3
    a72c:	4bbd      	ldr	r3, [pc, #756]	; (aa24 <w5500_write_socket_tcp+0x3ac>)
    a72e:	801a      	strh	r2, [r3, #0]
			
			if(sizert!=eth_sock[sock_numb].ptr_tx_buf){ eth_sock[sock_numb].ptr_tx_buf=sizert; }
    a730:	1dfb      	adds	r3, r7, #7
    a732:	781a      	ldrb	r2, [r3, #0]
    a734:	49bc      	ldr	r1, [pc, #752]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a736:	23ba      	movs	r3, #186	; 0xba
    a738:	00db      	lsls	r3, r3, #3
    a73a:	48bc      	ldr	r0, [pc, #752]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a73c:	4342      	muls	r2, r0
    a73e:	188a      	adds	r2, r1, r2
    a740:	18d3      	adds	r3, r2, r3
    a742:	795a      	ldrb	r2, [r3, #5]
    a744:	799b      	ldrb	r3, [r3, #6]
    a746:	021b      	lsls	r3, r3, #8
    a748:	4313      	orrs	r3, r2
    a74a:	b29a      	uxth	r2, r3
    a74c:	4bb5      	ldr	r3, [pc, #724]	; (aa24 <w5500_write_socket_tcp+0x3ac>)
    a74e:	881b      	ldrh	r3, [r3, #0]
    a750:	b29b      	uxth	r3, r3
    a752:	429a      	cmp	r2, r3
    a754:	d01f      	beq.n	a796 <w5500_write_socket_tcp+0x11e>
    a756:	1dfb      	adds	r3, r7, #7
    a758:	7819      	ldrb	r1, [r3, #0]
    a75a:	4bb2      	ldr	r3, [pc, #712]	; (aa24 <w5500_write_socket_tcp+0x3ac>)
    a75c:	881b      	ldrh	r3, [r3, #0]
    a75e:	b29a      	uxth	r2, r3
    a760:	48b1      	ldr	r0, [pc, #708]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a762:	23ba      	movs	r3, #186	; 0xba
    a764:	00db      	lsls	r3, r3, #3
    a766:	4cb1      	ldr	r4, [pc, #708]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a768:	4361      	muls	r1, r4
    a76a:	1841      	adds	r1, r0, r1
    a76c:	18cb      	adds	r3, r1, r3
    a76e:	3305      	adds	r3, #5
    a770:	21ff      	movs	r1, #255	; 0xff
    a772:	4011      	ands	r1, r2
    a774:	000c      	movs	r4, r1
    a776:	7819      	ldrb	r1, [r3, #0]
    a778:	2000      	movs	r0, #0
    a77a:	4001      	ands	r1, r0
    a77c:	1c08      	adds	r0, r1, #0
    a77e:	1c21      	adds	r1, r4, #0
    a780:	4301      	orrs	r1, r0
    a782:	7019      	strb	r1, [r3, #0]
    a784:	0a12      	lsrs	r2, r2, #8
    a786:	b290      	uxth	r0, r2
    a788:	785a      	ldrb	r2, [r3, #1]
    a78a:	2100      	movs	r1, #0
    a78c:	400a      	ands	r2, r1
    a78e:	1c11      	adds	r1, r2, #0
    a790:	1c02      	adds	r2, r0, #0
    a792:	430a      	orrs	r2, r1
    a794:	705a      	strb	r2, [r3, #1]
																			
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    a796:	1dfb      	adds	r3, r7, #7
    a798:	781a      	ldrb	r2, [r3, #0]
    a79a:	49a3      	ldr	r1, [pc, #652]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a79c:	23ba      	movs	r3, #186	; 0xba
    a79e:	00db      	lsls	r3, r3, #3
    a7a0:	48a2      	ldr	r0, [pc, #648]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a7a2:	4342      	muls	r2, r0
    a7a4:	188a      	adds	r2, r1, r2
    a7a6:	18d3      	adds	r3, r2, r3
    a7a8:	795a      	ldrb	r2, [r3, #5]
    a7aa:	799b      	ldrb	r3, [r3, #6]
    a7ac:	021b      	lsls	r3, r3, #8
    a7ae:	4313      	orrs	r3, r2
    a7b0:	b29a      	uxth	r2, r3
    a7b2:	4b96      	ldr	r3, [pc, #600]	; (aa0c <w5500_write_socket_tcp+0x394>)
    a7b4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    a7b6:	1dfb      	adds	r3, r7, #7
    a7b8:	781b      	ldrb	r3, [r3, #0]
    a7ba:	015b      	lsls	r3, r3, #5
    a7bc:	b21b      	sxth	r3, r3
    a7be:	2210      	movs	r2, #16
    a7c0:	4313      	orrs	r3, r2
    a7c2:	b21b      	sxth	r3, r3
    a7c4:	b29a      	uxth	r2, r3
    a7c6:	4b92      	ldr	r3, [pc, #584]	; (aa10 <w5500_write_socket_tcp+0x398>)
    a7c8:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    a7ca:	1dfb      	adds	r3, r7, #7
    a7cc:	781b      	ldrb	r3, [r3, #0]
    a7ce:	4a97      	ldr	r2, [pc, #604]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a7d0:	4353      	muls	r3, r2
    a7d2:	3308      	adds	r3, #8
    a7d4:	001a      	movs	r2, r3
    a7d6:	4b94      	ldr	r3, [pc, #592]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a7d8:	18d2      	adds	r2, r2, r3
    a7da:	4b8f      	ldr	r3, [pc, #572]	; (aa18 <w5500_write_socket_tcp+0x3a0>)
    a7dc:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    a7de:	1dfb      	adds	r3, r7, #7
    a7e0:	781b      	ldrb	r3, [r3, #0]
    a7e2:	4a91      	ldr	r2, [pc, #580]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a7e4:	4991      	ldr	r1, [pc, #580]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a7e6:	434b      	muls	r3, r1
    a7e8:	18d3      	adds	r3, r2, r3
    a7ea:	3306      	adds	r3, #6
    a7ec:	781b      	ldrb	r3, [r3, #0]
    a7ee:	021b      	lsls	r3, r3, #8
    a7f0:	b21a      	sxth	r2, r3
    a7f2:	1dfb      	adds	r3, r7, #7
    a7f4:	781b      	ldrb	r3, [r3, #0]
    a7f6:	498c      	ldr	r1, [pc, #560]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a7f8:	488c      	ldr	r0, [pc, #560]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a7fa:	4343      	muls	r3, r0
    a7fc:	18cb      	adds	r3, r1, r3
    a7fe:	3307      	adds	r3, #7
    a800:	781b      	ldrb	r3, [r3, #0]
    a802:	b21b      	sxth	r3, r3
    a804:	4313      	orrs	r3, r2
    a806:	b21b      	sxth	r3, r3
    a808:	b29a      	uxth	r2, r3
    a80a:	4b84      	ldr	r3, [pc, #528]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a80c:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    a80e:	1dfb      	adds	r3, r7, #7
    a810:	7819      	ldrb	r1, [r3, #0]
    a812:	1dfb      	adds	r3, r7, #7
    a814:	781a      	ldrb	r2, [r3, #0]
    a816:	4884      	ldr	r0, [pc, #528]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a818:	23ba      	movs	r3, #186	; 0xba
    a81a:	00db      	lsls	r3, r3, #3
    a81c:	4c83      	ldr	r4, [pc, #524]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a81e:	4362      	muls	r2, r4
    a820:	1882      	adds	r2, r0, r2
    a822:	18d3      	adds	r3, r2, r3
    a824:	795a      	ldrb	r2, [r3, #5]
    a826:	799b      	ldrb	r3, [r3, #6]
    a828:	021b      	lsls	r3, r3, #8
    a82a:	4313      	orrs	r3, r2
    a82c:	b29a      	uxth	r2, r3
    a82e:	4b7b      	ldr	r3, [pc, #492]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a830:	881b      	ldrh	r3, [r3, #0]
    a832:	18d3      	adds	r3, r2, r3
    a834:	b29a      	uxth	r2, r3
    a836:	487c      	ldr	r0, [pc, #496]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a838:	23ba      	movs	r3, #186	; 0xba
    a83a:	00db      	lsls	r3, r3, #3
    a83c:	4c7b      	ldr	r4, [pc, #492]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a83e:	4361      	muls	r1, r4
    a840:	1841      	adds	r1, r0, r1
    a842:	18cb      	adds	r3, r1, r3
    a844:	3305      	adds	r3, #5
    a846:	21ff      	movs	r1, #255	; 0xff
    a848:	4011      	ands	r1, r2
    a84a:	000c      	movs	r4, r1
    a84c:	7819      	ldrb	r1, [r3, #0]
    a84e:	2000      	movs	r0, #0
    a850:	4001      	ands	r1, r0
    a852:	1c08      	adds	r0, r1, #0
    a854:	1c21      	adds	r1, r4, #0
    a856:	4301      	orrs	r1, r0
    a858:	7019      	strb	r1, [r3, #0]
    a85a:	0a12      	lsrs	r2, r2, #8
    a85c:	b290      	uxth	r0, r2
    a85e:	785a      	ldrb	r2, [r3, #1]
    a860:	2100      	movs	r1, #0
    a862:	400a      	ands	r2, r1
    a864:	1c11      	adds	r1, r2, #0
    a866:	1c02      	adds	r2, r0, #0
    a868:	430a      	orrs	r2, r1
    a86a:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    a86c:	4b6c      	ldr	r3, [pc, #432]	; (aa20 <w5500_write_socket_tcp+0x3a8>)
    a86e:	2202      	movs	r2, #2
    a870:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a872:	4b64      	ldr	r3, [pc, #400]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a874:	781b      	ldrb	r3, [r3, #0]
    a876:	3301      	adds	r3, #1
    a878:	b2da      	uxtb	r2, r3
    a87a:	4b62      	ldr	r3, [pc, #392]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a87c:	701a      	strb	r2, [r3, #0]
		break;
    a87e:	e138      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
		case TCP_PTR_WR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    a880:	230e      	movs	r3, #14
    a882:	18fb      	adds	r3, r7, r3
    a884:	881a      	ldrh	r2, [r3, #0]
    a886:	1dfb      	adds	r3, r7, #7
    a888:	7819      	ldrb	r1, [r3, #0]
    a88a:	4867      	ldr	r0, [pc, #412]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a88c:	23ba      	movs	r3, #186	; 0xba
    a88e:	00db      	lsls	r3, r3, #3
    a890:	4c66      	ldr	r4, [pc, #408]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a892:	4361      	muls	r1, r4
    a894:	1841      	adds	r1, r0, r1
    a896:	18cb      	adds	r3, r1, r3
    a898:	7959      	ldrb	r1, [r3, #5]
    a89a:	799b      	ldrb	r3, [r3, #6]
    a89c:	021b      	lsls	r3, r3, #8
    a89e:	430b      	orrs	r3, r1
    a8a0:	b29b      	uxth	r3, r3
    a8a2:	0a1b      	lsrs	r3, r3, #8
    a8a4:	b29b      	uxth	r3, r3
    a8a6:	b2d9      	uxtb	r1, r3
    a8a8:	4b61      	ldr	r3, [pc, #388]	; (aa30 <w5500_write_socket_tcp+0x3b8>)
    a8aa:	5499      	strb	r1, [r3, r2]
    a8ac:	230e      	movs	r3, #14
    a8ae:	18fb      	adds	r3, r7, r3
    a8b0:	881a      	ldrh	r2, [r3, #0]
    a8b2:	230e      	movs	r3, #14
    a8b4:	18fb      	adds	r3, r7, r3
    a8b6:	3201      	adds	r2, #1
    a8b8:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    a8ba:	230e      	movs	r3, #14
    a8bc:	18fb      	adds	r3, r7, r3
    a8be:	881a      	ldrh	r2, [r3, #0]
    a8c0:	1dfb      	adds	r3, r7, #7
    a8c2:	7819      	ldrb	r1, [r3, #0]
    a8c4:	4858      	ldr	r0, [pc, #352]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a8c6:	23ba      	movs	r3, #186	; 0xba
    a8c8:	00db      	lsls	r3, r3, #3
    a8ca:	4c58      	ldr	r4, [pc, #352]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a8cc:	4361      	muls	r1, r4
    a8ce:	1841      	adds	r1, r0, r1
    a8d0:	18cb      	adds	r3, r1, r3
    a8d2:	7959      	ldrb	r1, [r3, #5]
    a8d4:	799b      	ldrb	r3, [r3, #6]
    a8d6:	021b      	lsls	r3, r3, #8
    a8d8:	430b      	orrs	r3, r1
    a8da:	b29b      	uxth	r3, r3
    a8dc:	b2d9      	uxtb	r1, r3
    a8de:	4b54      	ldr	r3, [pc, #336]	; (aa30 <w5500_write_socket_tcp+0x3b8>)
    a8e0:	5499      	strb	r1, [r3, r2]
    a8e2:	230e      	movs	r3, #14
    a8e4:	18fb      	adds	r3, r7, r3
    a8e6:	881a      	ldrh	r2, [r3, #0]
    a8e8:	230e      	movs	r3, #14
    a8ea:	18fb      	adds	r3, r7, r3
    a8ec:	3201      	adds	r2, #1
    a8ee:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    a8f0:	4b46      	ldr	r3, [pc, #280]	; (aa0c <w5500_write_socket_tcp+0x394>)
    a8f2:	2224      	movs	r2, #36	; 0x24
    a8f4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a8f6:	1dfb      	adds	r3, r7, #7
    a8f8:	781b      	ldrb	r3, [r3, #0]
    a8fa:	015b      	lsls	r3, r3, #5
    a8fc:	b21b      	sxth	r3, r3
    a8fe:	2208      	movs	r2, #8
    a900:	4313      	orrs	r3, r2
    a902:	b21b      	sxth	r3, r3
    a904:	b29a      	uxth	r2, r3
    a906:	4b42      	ldr	r3, [pc, #264]	; (aa10 <w5500_write_socket_tcp+0x398>)
    a908:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a90a:	4b43      	ldr	r3, [pc, #268]	; (aa18 <w5500_write_socket_tcp+0x3a0>)
    a90c:	4a48      	ldr	r2, [pc, #288]	; (aa30 <w5500_write_socket_tcp+0x3b8>)
    a90e:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a910:	4b42      	ldr	r3, [pc, #264]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a912:	220e      	movs	r2, #14
    a914:	18ba      	adds	r2, r7, r2
    a916:	8812      	ldrh	r2, [r2, #0]
    a918:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a91a:	4b41      	ldr	r3, [pc, #260]	; (aa20 <w5500_write_socket_tcp+0x3a8>)
    a91c:	2202      	movs	r2, #2
    a91e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a920:	4b38      	ldr	r3, [pc, #224]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	3301      	adds	r3, #1
    a926:	b2da      	uxtb	r2, r3
    a928:	4b36      	ldr	r3, [pc, #216]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a92a:	701a      	strb	r2, [r3, #0]
		break;
    a92c:	e0e1      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
		case TCP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    a92e:	230e      	movs	r3, #14
    a930:	18fb      	adds	r3, r7, r3
    a932:	881b      	ldrh	r3, [r3, #0]
    a934:	4a3e      	ldr	r2, [pc, #248]	; (aa30 <w5500_write_socket_tcp+0x3b8>)
    a936:	2120      	movs	r1, #32
    a938:	54d1      	strb	r1, [r2, r3]
    a93a:	230e      	movs	r3, #14
    a93c:	18fb      	adds	r3, r7, r3
    a93e:	881a      	ldrh	r2, [r3, #0]
    a940:	230e      	movs	r3, #14
    a942:	18fb      	adds	r3, r7, r3
    a944:	3201      	adds	r2, #1
    a946:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a948:	4b30      	ldr	r3, [pc, #192]	; (aa0c <w5500_write_socket_tcp+0x394>)
    a94a:	2201      	movs	r2, #1
    a94c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a94e:	1dfb      	adds	r3, r7, #7
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	015b      	lsls	r3, r3, #5
    a954:	b21b      	sxth	r3, r3
    a956:	2208      	movs	r2, #8
    a958:	4313      	orrs	r3, r2
    a95a:	b21b      	sxth	r3, r3
    a95c:	b29a      	uxth	r2, r3
    a95e:	4b2c      	ldr	r3, [pc, #176]	; (aa10 <w5500_write_socket_tcp+0x398>)
    a960:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a962:	4b2d      	ldr	r3, [pc, #180]	; (aa18 <w5500_write_socket_tcp+0x3a0>)
    a964:	4a32      	ldr	r2, [pc, #200]	; (aa30 <w5500_write_socket_tcp+0x3b8>)
    a966:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a968:	4b2c      	ldr	r3, [pc, #176]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a96a:	220e      	movs	r2, #14
    a96c:	18ba      	adds	r2, r7, r2
    a96e:	8812      	ldrh	r2, [r2, #0]
    a970:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a972:	4b2b      	ldr	r3, [pc, #172]	; (aa20 <w5500_write_socket_tcp+0x3a8>)
    a974:	2202      	movs	r2, #2
    a976:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a978:	4b22      	ldr	r3, [pc, #136]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a97a:	781b      	ldrb	r3, [r3, #0]
    a97c:	3301      	adds	r3, #1
    a97e:	b2da      	uxtb	r2, r3
    a980:	4b20      	ldr	r3, [pc, #128]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a982:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a984:	1dfb      	adds	r3, r7, #7
    a986:	781a      	ldrb	r2, [r3, #0]
    a988:	4927      	ldr	r1, [pc, #156]	; (aa28 <w5500_write_socket_tcp+0x3b0>)
    a98a:	23bc      	movs	r3, #188	; 0xbc
    a98c:	00db      	lsls	r3, r3, #3
    a98e:	4827      	ldr	r0, [pc, #156]	; (aa2c <w5500_write_socket_tcp+0x3b4>)
    a990:	4342      	muls	r2, r0
    a992:	188a      	adds	r2, r1, r2
    a994:	18d3      	adds	r3, r2, r3
    a996:	3303      	adds	r3, #3
    a998:	781a      	ldrb	r2, [r3, #0]
    a99a:	2100      	movs	r1, #0
    a99c:	400a      	ands	r2, r1
    a99e:	1c11      	adds	r1, r2, #0
    a9a0:	224c      	movs	r2, #76	; 0x4c
    a9a2:	430a      	orrs	r2, r1
    a9a4:	701a      	strb	r2, [r3, #0]
    a9a6:	785a      	ldrb	r2, [r3, #1]
    a9a8:	2100      	movs	r1, #0
    a9aa:	400a      	ands	r2, r1
    a9ac:	1c11      	adds	r1, r2, #0
    a9ae:	221d      	movs	r2, #29
    a9b0:	430a      	orrs	r2, r1
    a9b2:	705a      	strb	r2, [r3, #1]
		break;
    a9b4:	e09d      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
		case TCP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    a9b6:	4b15      	ldr	r3, [pc, #84]	; (aa0c <w5500_write_socket_tcp+0x394>)
    a9b8:	2202      	movs	r2, #2
    a9ba:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a9bc:	1dfb      	adds	r3, r7, #7
    a9be:	781b      	ldrb	r3, [r3, #0]
    a9c0:	015b      	lsls	r3, r3, #5
    a9c2:	b21b      	sxth	r3, r3
    a9c4:	2208      	movs	r2, #8
    a9c6:	4313      	orrs	r3, r2
    a9c8:	b21b      	sxth	r3, r3
    a9ca:	b29a      	uxth	r2, r3
    a9cc:	4b10      	ldr	r3, [pc, #64]	; (aa10 <w5500_write_socket_tcp+0x398>)
    a9ce:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a9d0:	1dfb      	adds	r3, r7, #7
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	015b      	lsls	r3, r3, #5
    a9d6:	3310      	adds	r3, #16
    a9d8:	001a      	movs	r2, r3
    a9da:	4b0e      	ldr	r3, [pc, #56]	; (aa14 <w5500_write_socket_tcp+0x39c>)
    a9dc:	18d3      	adds	r3, r2, r3
    a9de:	1d5a      	adds	r2, r3, #5
    a9e0:	4b0d      	ldr	r3, [pc, #52]	; (aa18 <w5500_write_socket_tcp+0x3a0>)
    a9e2:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a9e4:	4b0d      	ldr	r3, [pc, #52]	; (aa1c <w5500_write_socket_tcp+0x3a4>)
    a9e6:	2201      	movs	r2, #1
    a9e8:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a9ea:	4b0d      	ldr	r3, [pc, #52]	; (aa20 <w5500_write_socket_tcp+0x3a8>)
    a9ec:	2201      	movs	r2, #1
    a9ee:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a9f0:	4b04      	ldr	r3, [pc, #16]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a9f2:	781b      	ldrb	r3, [r3, #0]
    a9f4:	3301      	adds	r3, #1
    a9f6:	b2da      	uxtb	r2, r3
    a9f8:	4b02      	ldr	r3, [pc, #8]	; (aa04 <w5500_write_socket_tcp+0x38c>)
    a9fa:	701a      	strb	r2, [r3, #0]
		break;
    a9fc:	e079      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
    a9fe:	46c0      	nop			; (mov r8, r8)
    aa00:	20000499 	.word	0x20000499
    aa04:	2000049a 	.word	0x2000049a
    aa08:	0000cbf4 	.word	0x0000cbf4
    aa0c:	20000480 	.word	0x20000480
    aa10:	20000482 	.word	0x20000482
    aa14:	20003b08 	.word	0x20003b08
    aa18:	20003afc 	.word	0x20003afc
    aa1c:	20000484 	.word	0x20000484
    aa20:	20003bbb 	.word	0x20003bbb
    aa24:	20000486 	.word	0x20000486
    aa28:	200005cc 	.word	0x200005cc
    aa2c:	000005e5 	.word	0x000005e5
    aa30:	20003bbc 	.word	0x20003bbc
		case TCP_STATUS_CLR:																//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    aa34:	1dfb      	adds	r3, r7, #7
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	4a30      	ldr	r2, [pc, #192]	; (aafc <w5500_write_socket_tcp+0x484>)
    aa3a:	2110      	movs	r1, #16
    aa3c:	015b      	lsls	r3, r3, #5
    aa3e:	18d3      	adds	r3, r2, r3
    aa40:	185b      	adds	r3, r3, r1
    aa42:	795b      	ldrb	r3, [r3, #5]
    aa44:	06db      	lsls	r3, r3, #27
    aa46:	0fdb      	lsrs	r3, r3, #31
    aa48:	b2db      	uxtb	r3, r3
    aa4a:	2b01      	cmp	r3, #1
    aa4c:	d12b      	bne.n	aaa6 <w5500_write_socket_tcp+0x42e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    aa4e:	230e      	movs	r3, #14
    aa50:	18fb      	adds	r3, r7, r3
    aa52:	881b      	ldrh	r3, [r3, #0]
    aa54:	4a2a      	ldr	r2, [pc, #168]	; (ab00 <w5500_write_socket_tcp+0x488>)
    aa56:	2110      	movs	r1, #16
    aa58:	54d1      	strb	r1, [r2, r3]
    aa5a:	230e      	movs	r3, #14
    aa5c:	18fb      	adds	r3, r7, r3
    aa5e:	881a      	ldrh	r2, [r3, #0]
    aa60:	230e      	movs	r3, #14
    aa62:	18fb      	adds	r3, r7, r3
    aa64:	3201      	adds	r2, #1
    aa66:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    aa68:	4b26      	ldr	r3, [pc, #152]	; (ab04 <w5500_write_socket_tcp+0x48c>)
    aa6a:	2202      	movs	r2, #2
    aa6c:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    aa6e:	1dfb      	adds	r3, r7, #7
    aa70:	781b      	ldrb	r3, [r3, #0]
    aa72:	015b      	lsls	r3, r3, #5
    aa74:	b21b      	sxth	r3, r3
    aa76:	2208      	movs	r2, #8
    aa78:	4313      	orrs	r3, r2
    aa7a:	b21b      	sxth	r3, r3
    aa7c:	b29a      	uxth	r2, r3
    aa7e:	4b22      	ldr	r3, [pc, #136]	; (ab08 <w5500_write_socket_tcp+0x490>)
    aa80:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    aa82:	4b22      	ldr	r3, [pc, #136]	; (ab0c <w5500_write_socket_tcp+0x494>)
    aa84:	4a1e      	ldr	r2, [pc, #120]	; (ab00 <w5500_write_socket_tcp+0x488>)
    aa86:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    aa88:	4b21      	ldr	r3, [pc, #132]	; (ab10 <w5500_write_socket_tcp+0x498>)
    aa8a:	220e      	movs	r2, #14
    aa8c:	18ba      	adds	r2, r7, r2
    aa8e:	8812      	ldrh	r2, [r2, #0]
    aa90:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    aa92:	4b20      	ldr	r3, [pc, #128]	; (ab14 <w5500_write_socket_tcp+0x49c>)
    aa94:	2202      	movs	r2, #2
    aa96:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    aa98:	4b1f      	ldr	r3, [pc, #124]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	3301      	adds	r3, #1
    aa9e:	b2da      	uxtb	r2, r3
    aaa0:	4b1d      	ldr	r3, [pc, #116]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aaa2:	701a      	strb	r2, [r3, #0]
				break;
    aaa4:	e025      	b.n	aaf2 <w5500_write_socket_tcp+0x47a>
			}
			st_wr_w5500--;
    aaa6:	4b1c      	ldr	r3, [pc, #112]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aaa8:	781b      	ldrb	r3, [r3, #0]
    aaaa:	3b01      	subs	r3, #1
    aaac:	b2da      	uxtb	r2, r3
    aaae:	4b1a      	ldr	r3, [pc, #104]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aab0:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    aab2:	1dfb      	adds	r3, r7, #7
    aab4:	781a      	ldrb	r2, [r3, #0]
    aab6:	4919      	ldr	r1, [pc, #100]	; (ab1c <w5500_write_socket_tcp+0x4a4>)
    aab8:	23bc      	movs	r3, #188	; 0xbc
    aaba:	00db      	lsls	r3, r3, #3
    aabc:	4818      	ldr	r0, [pc, #96]	; (ab20 <w5500_write_socket_tcp+0x4a8>)
    aabe:	4342      	muls	r2, r0
    aac0:	188a      	adds	r2, r1, r2
    aac2:	18d3      	adds	r3, r2, r3
    aac4:	78da      	ldrb	r2, [r3, #3]
    aac6:	791b      	ldrb	r3, [r3, #4]
    aac8:	021b      	lsls	r3, r3, #8
    aaca:	4313      	orrs	r3, r2
    aacc:	b29b      	uxth	r3, r3
    aace:	2b00      	cmp	r3, #0
    aad0:	d10e      	bne.n	aaf0 <w5500_write_socket_tcp+0x478>
			{
				st_wr_w5500=TCP_RD_FSR; 
    aad2:	4b11      	ldr	r3, [pc, #68]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aad4:	2200      	movs	r2, #0
    aad6:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    aad8:	2302      	movs	r3, #2
    aada:	e00b      	b.n	aaf4 <w5500_write_socket_tcp+0x47c>
			}
		break;
		case TCP_BK_TO_START:
			st_wr_w5500=TCP_RD_FSR;
    aadc:	4b0e      	ldr	r3, [pc, #56]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aade:	2200      	movs	r2, #0
    aae0:	701a      	strb	r2, [r3, #0]
			return PROC_OK;
    aae2:	2301      	movs	r3, #1
    aae4:	e006      	b.n	aaf4 <w5500_write_socket_tcp+0x47c>
		break;
		default:
			st_wr_w5500=TCP_RD_FSR; return PROC_ER;
    aae6:	4b0c      	ldr	r3, [pc, #48]	; (ab18 <w5500_write_socket_tcp+0x4a0>)
    aae8:	2200      	movs	r2, #0
    aaea:	701a      	strb	r2, [r3, #0]
    aaec:	2302      	movs	r3, #2
    aaee:	e001      	b.n	aaf4 <w5500_write_socket_tcp+0x47c>
		break;
    aaf0:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    aaf2:	2300      	movs	r3, #0
}
    aaf4:	0018      	movs	r0, r3
    aaf6:	46bd      	mov	sp, r7
    aaf8:	b005      	add	sp, #20
    aafa:	bd90      	pop	{r4, r7, pc}
    aafc:	20003b08 	.word	0x20003b08
    ab00:	20003bbc 	.word	0x20003bbc
    ab04:	20000480 	.word	0x20000480
    ab08:	20000482 	.word	0x20000482
    ab0c:	20003afc 	.word	0x20003afc
    ab10:	20000484 	.word	0x20000484
    ab14:	20003bbb 	.word	0x20003bbb
    ab18:	2000049a 	.word	0x2000049a
    ab1c:	200005cc 	.word	0x200005cc
    ab20:	000005e5 	.word	0x000005e5

0000ab24 <cfg_init>:

BYTE cfg_2_err = 1;

void cfg_init(void)
//--------------------------------------------------------------------------
{
    ab24:	b580      	push	{r7, lr}
    ab26:	af00      	add	r7, sp, #0
	memset(&cfg_1    ,0x00,sizeof(CFG_1));
    ab28:	2380      	movs	r3, #128	; 0x80
    ab2a:	005a      	lsls	r2, r3, #1
    ab2c:	4b07      	ldr	r3, [pc, #28]	; (ab4c <cfg_init+0x28>)
    ab2e:	2100      	movs	r1, #0
    ab30:	0018      	movs	r0, r3
    ab32:	4b07      	ldr	r3, [pc, #28]	; (ab50 <cfg_init+0x2c>)
    ab34:	4798      	blx	r3
	memset(&cfg_1_tmp,0x00,sizeof(CFG_1));
    ab36:	2380      	movs	r3, #128	; 0x80
    ab38:	005a      	lsls	r2, r3, #1
    ab3a:	4b06      	ldr	r3, [pc, #24]	; (ab54 <cfg_init+0x30>)
    ab3c:	2100      	movs	r1, #0
    ab3e:	0018      	movs	r0, r3
    ab40:	4b03      	ldr	r3, [pc, #12]	; (ab50 <cfg_init+0x2c>)
    ab42:	4798      	blx	r3
}
    ab44:	46c0      	nop			; (mov r8, r8)
    ab46:	46bd      	mov	sp, r7
    ab48:	bd80      	pop	{r7, pc}
    ab4a:	46c0      	nop			; (mov r8, r8)
    ab4c:	20003dc8 	.word	0x20003dc8
    ab50:	0000c8c5 	.word	0x0000c8c5
    ab54:	20003cc8 	.word	0x20003cc8

0000ab58 <cfg_read>:

WORD cfg_read(void)
//--------------------------------------------------------------------------
{
    ab58:	b590      	push	{r4, r7, lr}
    ab5a:	b083      	sub	sp, #12
    ab5c:	af00      	add	r7, sp, #0
	WORD size = 0;
    ab5e:	1dbb      	adds	r3, r7, #6
    ab60:	2200      	movs	r2, #0
    ab62:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_1_ADDR,&cfg_1,sizeof(CFG_1));
    ab64:	1dbc      	adds	r4, r7, #6
    ab66:	2380      	movs	r3, #128	; 0x80
    ab68:	005a      	lsls	r2, r3, #1
    ab6a:	4910      	ldr	r1, [pc, #64]	; (abac <cfg_read+0x54>)
    ab6c:	23fc      	movs	r3, #252	; 0xfc
    ab6e:	029b      	lsls	r3, r3, #10
    ab70:	0018      	movs	r0, r3
    ab72:	4b0f      	ldr	r3, [pc, #60]	; (abb0 <cfg_read+0x58>)
    ab74:	4798      	blx	r3
    ab76:	0003      	movs	r3, r0
    ab78:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_1)) {return(CFG_ERR);}
    ab7a:	1dbb      	adds	r3, r7, #6
    ab7c:	881a      	ldrh	r2, [r3, #0]
    ab7e:	2380      	movs	r3, #128	; 0x80
    ab80:	005b      	lsls	r3, r3, #1
    ab82:	429a      	cmp	r2, r3
    ab84:	d001      	beq.n	ab8a <cfg_read+0x32>
    ab86:	2300      	movs	r3, #0
    ab88:	e00b      	b.n	aba2 <cfg_read+0x4a>

	if(crc16_ccit((BYTE*)&cfg_1,sizeof(CFG_1))!=0){return(CFG_ERR);}
    ab8a:	2380      	movs	r3, #128	; 0x80
    ab8c:	005a      	lsls	r2, r3, #1
    ab8e:	4b07      	ldr	r3, [pc, #28]	; (abac <cfg_read+0x54>)
    ab90:	0011      	movs	r1, r2
    ab92:	0018      	movs	r0, r3
    ab94:	4b07      	ldr	r3, [pc, #28]	; (abb4 <cfg_read+0x5c>)
    ab96:	4798      	blx	r3
    ab98:	1e03      	subs	r3, r0, #0
    ab9a:	d001      	beq.n	aba0 <cfg_read+0x48>
    ab9c:	2300      	movs	r3, #0
    ab9e:	e000      	b.n	aba2 <cfg_read+0x4a>

	return(CFG_OK);
    aba0:	2301      	movs	r3, #1
}
    aba2:	0018      	movs	r0, r3
    aba4:	46bd      	mov	sp, r7
    aba6:	b003      	add	sp, #12
    aba8:	bd90      	pop	{r4, r7, pc}
    abaa:	46c0      	nop			; (mov r8, r8)
    abac:	20003dc8 	.word	0x20003dc8
    abb0:	0000690d 	.word	0x0000690d
    abb4:	00005d0d 	.word	0x00005d0d

0000abb8 <cfg_2_read>:

WORD cfg_2_read(void)
//--------------------------------------------------------------------------
{
    abb8:	b590      	push	{r4, r7, lr}
    abba:	b083      	sub	sp, #12
    abbc:	af00      	add	r7, sp, #0
	WORD size = 0;
    abbe:	1dbb      	adds	r3, r7, #6
    abc0:	2200      	movs	r2, #0
    abc2:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_2_ADDR,&cfg_2,sizeof(CFG_2));
    abc4:	1dbc      	adds	r4, r7, #6
    abc6:	2380      	movs	r3, #128	; 0x80
    abc8:	005a      	lsls	r2, r3, #1
    abca:	4b0f      	ldr	r3, [pc, #60]	; (ac08 <cfg_2_read+0x50>)
    abcc:	480f      	ldr	r0, [pc, #60]	; (ac0c <cfg_2_read+0x54>)
    abce:	0019      	movs	r1, r3
    abd0:	4b0f      	ldr	r3, [pc, #60]	; (ac10 <cfg_2_read+0x58>)
    abd2:	4798      	blx	r3
    abd4:	0003      	movs	r3, r0
    abd6:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_2)) {return(CFG_ERR);}
    abd8:	1dbb      	adds	r3, r7, #6
    abda:	881a      	ldrh	r2, [r3, #0]
    abdc:	2380      	movs	r3, #128	; 0x80
    abde:	005b      	lsls	r3, r3, #1
    abe0:	429a      	cmp	r2, r3
    abe2:	d001      	beq.n	abe8 <cfg_2_read+0x30>
    abe4:	2300      	movs	r3, #0
    abe6:	e00b      	b.n	ac00 <cfg_2_read+0x48>

	if(crc16_ccit((BYTE*)&cfg_2,sizeof(CFG_2))!=0){return(CFG_ERR);}
    abe8:	2380      	movs	r3, #128	; 0x80
    abea:	005a      	lsls	r2, r3, #1
    abec:	4b06      	ldr	r3, [pc, #24]	; (ac08 <cfg_2_read+0x50>)
    abee:	0011      	movs	r1, r2
    abf0:	0018      	movs	r0, r3
    abf2:	4b08      	ldr	r3, [pc, #32]	; (ac14 <cfg_2_read+0x5c>)
    abf4:	4798      	blx	r3
    abf6:	1e03      	subs	r3, r0, #0
    abf8:	d001      	beq.n	abfe <cfg_2_read+0x46>
    abfa:	2300      	movs	r3, #0
    abfc:	e000      	b.n	ac00 <cfg_2_read+0x48>

	return(CFG_OK);
    abfe:	2301      	movs	r3, #1
}
    ac00:	0018      	movs	r0, r3
    ac02:	46bd      	mov	sp, r7
    ac04:	b003      	add	sp, #12
    ac06:	bd90      	pop	{r4, r7, pc}
    ac08:	20003bc8 	.word	0x20003bc8
    ac0c:	0003f100 	.word	0x0003f100
    ac10:	0000690d 	.word	0x0000690d
    ac14:	00005d0d 	.word	0x00005d0d

0000ac18 <cfg_default>:

void cfg_default(void)
//--------------------------------------------------------------------------
{
    ac18:	b5b0      	push	{r4, r5, r7, lr}
    ac1a:	b082      	sub	sp, #8
    ac1c:	af00      	add	r7, sp, #0
	WORD  i=0;
    ac1e:	1dbb      	adds	r3, r7, #6
    ac20:	2200      	movs	r2, #0
    ac22:	801a      	strh	r2, [r3, #0]

	cfg_1.guid = 0xFAC6097A;
    ac24:	4bbc      	ldr	r3, [pc, #752]	; (af18 <cfg_default+0x300>)
    ac26:	781a      	ldrb	r2, [r3, #0]
    ac28:	2100      	movs	r1, #0
    ac2a:	400a      	ands	r2, r1
    ac2c:	1c11      	adds	r1, r2, #0
    ac2e:	227a      	movs	r2, #122	; 0x7a
    ac30:	430a      	orrs	r2, r1
    ac32:	701a      	strb	r2, [r3, #0]
    ac34:	785a      	ldrb	r2, [r3, #1]
    ac36:	2100      	movs	r1, #0
    ac38:	400a      	ands	r2, r1
    ac3a:	1c11      	adds	r1, r2, #0
    ac3c:	2209      	movs	r2, #9
    ac3e:	430a      	orrs	r2, r1
    ac40:	705a      	strb	r2, [r3, #1]
    ac42:	789a      	ldrb	r2, [r3, #2]
    ac44:	2100      	movs	r1, #0
    ac46:	400a      	ands	r2, r1
    ac48:	1c11      	adds	r1, r2, #0
    ac4a:	223a      	movs	r2, #58	; 0x3a
    ac4c:	4252      	negs	r2, r2
    ac4e:	430a      	orrs	r2, r1
    ac50:	709a      	strb	r2, [r3, #2]
    ac52:	78da      	ldrb	r2, [r3, #3]
    ac54:	2100      	movs	r1, #0
    ac56:	400a      	ands	r2, r1
    ac58:	1c11      	adds	r1, r2, #0
    ac5a:	2206      	movs	r2, #6
    ac5c:	4252      	negs	r2, r2
    ac5e:	430a      	orrs	r2, r1
    ac60:	70da      	strb	r2, [r3, #3]
	
	cfg_1.in_numb=102;
    ac62:	4bad      	ldr	r3, [pc, #692]	; (af18 <cfg_default+0x300>)
    ac64:	2268      	movs	r2, #104	; 0x68
    ac66:	5c99      	ldrb	r1, [r3, r2]
    ac68:	2000      	movs	r0, #0
    ac6a:	4001      	ands	r1, r0
    ac6c:	1c08      	adds	r0, r1, #0
    ac6e:	2166      	movs	r1, #102	; 0x66
    ac70:	4301      	orrs	r1, r0
    ac72:	5499      	strb	r1, [r3, r2]
    ac74:	189b      	adds	r3, r3, r2
    ac76:	785a      	ldrb	r2, [r3, #1]
    ac78:	2100      	movs	r1, #0
    ac7a:	400a      	ands	r2, r1
    ac7c:	705a      	strb	r2, [r3, #1]
	
	//............................................................................

	cfg_1.com_network.src_port    = 4000;
    ac7e:	4ba6      	ldr	r3, [pc, #664]	; (af18 <cfg_default+0x300>)
    ac80:	2226      	movs	r2, #38	; 0x26
    ac82:	5c99      	ldrb	r1, [r3, r2]
    ac84:	2000      	movs	r0, #0
    ac86:	4001      	ands	r1, r0
    ac88:	1c08      	adds	r0, r1, #0
    ac8a:	2160      	movs	r1, #96	; 0x60
    ac8c:	4249      	negs	r1, r1
    ac8e:	4301      	orrs	r1, r0
    ac90:	5499      	strb	r1, [r3, r2]
    ac92:	2227      	movs	r2, #39	; 0x27
    ac94:	5c99      	ldrb	r1, [r3, r2]
    ac96:	2000      	movs	r0, #0
    ac98:	4001      	ands	r1, r0
    ac9a:	1c08      	adds	r0, r1, #0
    ac9c:	210f      	movs	r1, #15
    ac9e:	4301      	orrs	r1, r0
    aca0:	5499      	strb	r1, [r3, r2]
	
	//ip 192.168.1.102 /SIPR
	cfg_1.com_network.ip_addr[0]=0xC0;//192
    aca2:	4b9d      	ldr	r3, [pc, #628]	; (af18 <cfg_default+0x300>)
    aca4:	2228      	movs	r2, #40	; 0x28
    aca6:	21c0      	movs	r1, #192	; 0xc0
    aca8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[1]=0xA8;//168
    acaa:	4b9b      	ldr	r3, [pc, #620]	; (af18 <cfg_default+0x300>)
    acac:	2229      	movs	r2, #41	; 0x29
    acae:	21a8      	movs	r1, #168	; 0xa8
    acb0:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[2]=0x01;//1
    acb2:	4b99      	ldr	r3, [pc, #612]	; (af18 <cfg_default+0x300>)
    acb4:	222a      	movs	r2, #42	; 0x2a
    acb6:	2101      	movs	r1, #1
    acb8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[3]=0x65;//101
    acba:	4b97      	ldr	r3, [pc, #604]	; (af18 <cfg_default+0x300>)
    acbc:	222b      	movs	r2, #43	; 0x2b
    acbe:	2165      	movs	r1, #101	; 0x65
    acc0:	5499      	strb	r1, [r3, r2]

	//mask 255.255.255.0 /SUBR
	cfg_1.com_network.ip_mask[0]=0xFF;
    acc2:	4b95      	ldr	r3, [pc, #596]	; (af18 <cfg_default+0x300>)
    acc4:	222c      	movs	r2, #44	; 0x2c
    acc6:	21ff      	movs	r1, #255	; 0xff
    acc8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[1]=0xFF;
    acca:	4b93      	ldr	r3, [pc, #588]	; (af18 <cfg_default+0x300>)
    accc:	222d      	movs	r2, #45	; 0x2d
    acce:	21ff      	movs	r1, #255	; 0xff
    acd0:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[2]=0xFF;
    acd2:	4b91      	ldr	r3, [pc, #580]	; (af18 <cfg_default+0x300>)
    acd4:	222e      	movs	r2, #46	; 0x2e
    acd6:	21ff      	movs	r1, #255	; 0xff
    acd8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[3]=0x00;
    acda:	4b8f      	ldr	r3, [pc, #572]	; (af18 <cfg_default+0x300>)
    acdc:	222f      	movs	r2, #47	; 0x2f
    acde:	2100      	movs	r1, #0
    ace0:	5499      	strb	r1, [r3, r2]
	
	//gateway 192.168.1.1 /GAR
	cfg_1.com_network.ip_gate[0]=0xC0;
    ace2:	4b8d      	ldr	r3, [pc, #564]	; (af18 <cfg_default+0x300>)
    ace4:	2230      	movs	r2, #48	; 0x30
    ace6:	21c0      	movs	r1, #192	; 0xc0
    ace8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[1]=0xA8;
    acea:	4b8b      	ldr	r3, [pc, #556]	; (af18 <cfg_default+0x300>)
    acec:	2231      	movs	r2, #49	; 0x31
    acee:	21a8      	movs	r1, #168	; 0xa8
    acf0:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[2]=0x01;
    acf2:	4b89      	ldr	r3, [pc, #548]	; (af18 <cfg_default+0x300>)
    acf4:	2232      	movs	r2, #50	; 0x32
    acf6:	2101      	movs	r1, #1
    acf8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[3]=0x01;
    acfa:	4b87      	ldr	r3, [pc, #540]	; (af18 <cfg_default+0x300>)
    acfc:	2233      	movs	r2, #51	; 0x33
    acfe:	2101      	movs	r1, #1
    ad00:	5499      	strb	r1, [r3, r2]
	
	memcpy(cfg_1.name, NAME, sizeof(NAME));
    ad02:	4986      	ldr	r1, [pc, #536]	; (af1c <cfg_default+0x304>)
    ad04:	4b86      	ldr	r3, [pc, #536]	; (af20 <cfg_default+0x308>)
    ad06:	220c      	movs	r2, #12
    ad08:	0018      	movs	r0, r3
    ad0a:	4b86      	ldr	r3, [pc, #536]	; (af24 <cfg_default+0x30c>)
    ad0c:	4798      	blx	r3
	cfg_1.name[sizeof(NAME) + 1] = 0x00;
    ad0e:	4b82      	ldr	r3, [pc, #520]	; (af18 <cfg_default+0x300>)
    ad10:	2200      	movs	r2, #0
    ad12:	745a      	strb	r2, [r3, #17]
	
	//...........................................................................
	for(i=0;i<4;++i)
    ad14:	1dbb      	adds	r3, r7, #6
    ad16:	2200      	movs	r2, #0
    ad18:	801a      	strh	r2, [r3, #0]
    ad1a:	e0d0      	b.n	aebe <cfg_default+0x2a6>
	{
		cfg_1.sock_rs485[i].mode		= UDP;
    ad1c:	1dbb      	adds	r3, r7, #6
    ad1e:	881a      	ldrh	r2, [r3, #0]
    ad20:	497d      	ldr	r1, [pc, #500]	; (af18 <cfg_default+0x300>)
    ad22:	2035      	movs	r0, #53	; 0x35
    ad24:	0013      	movs	r3, r2
    ad26:	005b      	lsls	r3, r3, #1
    ad28:	189b      	adds	r3, r3, r2
    ad2a:	009b      	lsls	r3, r3, #2
    ad2c:	189b      	adds	r3, r3, r2
    ad2e:	18cb      	adds	r3, r1, r3
    ad30:	181b      	adds	r3, r3, r0
    ad32:	2201      	movs	r2, #1
    ad34:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].pl			= GATE;
    ad36:	1dbb      	adds	r3, r7, #6
    ad38:	881a      	ldrh	r2, [r3, #0]
    ad3a:	4977      	ldr	r1, [pc, #476]	; (af18 <cfg_default+0x300>)
    ad3c:	2036      	movs	r0, #54	; 0x36
    ad3e:	0013      	movs	r3, r2
    ad40:	005b      	lsls	r3, r3, #1
    ad42:	189b      	adds	r3, r3, r2
    ad44:	009b      	lsls	r3, r3, #2
    ad46:	189b      	adds	r3, r3, r2
    ad48:	18cb      	adds	r3, r1, r3
    ad4a:	181b      	adds	r3, r3, r0
    ad4c:	2201      	movs	r2, #1
    ad4e:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].en			= FALSE;
    ad50:	1dbb      	adds	r3, r7, #6
    ad52:	881a      	ldrh	r2, [r3, #0]
    ad54:	4970      	ldr	r1, [pc, #448]	; (af18 <cfg_default+0x300>)
    ad56:	2034      	movs	r0, #52	; 0x34
    ad58:	0013      	movs	r3, r2
    ad5a:	005b      	lsls	r3, r3, #1
    ad5c:	189b      	adds	r3, r3, r2
    ad5e:	009b      	lsls	r3, r3, #2
    ad60:	189b      	adds	r3, r3, r2
    ad62:	18cb      	adds	r3, r1, r3
    ad64:	181b      	adds	r3, r3, r0
    ad66:	2200      	movs	r2, #0
    ad68:	701a      	strb	r2, [r3, #0]
		
		cfg_1.sock_rs485[i].src_port	=4001+i;
    ad6a:	1dbb      	adds	r3, r7, #6
    ad6c:	881a      	ldrh	r2, [r3, #0]
    ad6e:	1dbb      	adds	r3, r7, #6
    ad70:	881b      	ldrh	r3, [r3, #0]
    ad72:	496d      	ldr	r1, [pc, #436]	; (af28 <cfg_default+0x310>)
    ad74:	468c      	mov	ip, r1
    ad76:	4463      	add	r3, ip
    ad78:	b299      	uxth	r1, r3
    ad7a:	4867      	ldr	r0, [pc, #412]	; (af18 <cfg_default+0x300>)
    ad7c:	0013      	movs	r3, r2
    ad7e:	005b      	lsls	r3, r3, #1
    ad80:	189b      	adds	r3, r3, r2
    ad82:	009b      	lsls	r3, r3, #2
    ad84:	189b      	adds	r3, r3, r2
    ad86:	18c3      	adds	r3, r0, r3
    ad88:	3330      	adds	r3, #48	; 0x30
    ad8a:	3307      	adds	r3, #7
    ad8c:	22ff      	movs	r2, #255	; 0xff
    ad8e:	400a      	ands	r2, r1
    ad90:	0014      	movs	r4, r2
    ad92:	781a      	ldrb	r2, [r3, #0]
    ad94:	2000      	movs	r0, #0
    ad96:	4002      	ands	r2, r0
    ad98:	1c10      	adds	r0, r2, #0
    ad9a:	1c22      	adds	r2, r4, #0
    ad9c:	4302      	orrs	r2, r0
    ad9e:	701a      	strb	r2, [r3, #0]
    ada0:	0a0a      	lsrs	r2, r1, #8
    ada2:	b290      	uxth	r0, r2
    ada4:	785a      	ldrb	r2, [r3, #1]
    ada6:	2100      	movs	r1, #0
    ada8:	400a      	ands	r2, r1
    adaa:	1c11      	adds	r1, r2, #0
    adac:	1c02      	adds	r2, r0, #0
    adae:	430a      	orrs	r2, r1
    adb0:	705a      	strb	r2, [r3, #1]
		
		cfg_1.sock_rs485[i].baud		=38400;
    adb2:	1dbb      	adds	r3, r7, #6
    adb4:	881a      	ldrh	r2, [r3, #0]
    adb6:	4958      	ldr	r1, [pc, #352]	; (af18 <cfg_default+0x300>)
    adb8:	0013      	movs	r3, r2
    adba:	005b      	lsls	r3, r3, #1
    adbc:	189b      	adds	r3, r3, r2
    adbe:	009b      	lsls	r3, r3, #2
    adc0:	189b      	adds	r3, r3, r2
    adc2:	18cb      	adds	r3, r1, r3
    adc4:	3330      	adds	r3, #48	; 0x30
    adc6:	3309      	adds	r3, #9
    adc8:	781a      	ldrb	r2, [r3, #0]
    adca:	2100      	movs	r1, #0
    adcc:	400a      	ands	r2, r1
    adce:	701a      	strb	r2, [r3, #0]
    add0:	785a      	ldrb	r2, [r3, #1]
    add2:	2100      	movs	r1, #0
    add4:	400a      	ands	r2, r1
    add6:	1c11      	adds	r1, r2, #0
    add8:	226a      	movs	r2, #106	; 0x6a
    adda:	4252      	negs	r2, r2
    addc:	430a      	orrs	r2, r1
    adde:	705a      	strb	r2, [r3, #1]
    ade0:	789a      	ldrb	r2, [r3, #2]
    ade2:	2100      	movs	r1, #0
    ade4:	400a      	ands	r2, r1
    ade6:	709a      	strb	r2, [r3, #2]
    ade8:	78da      	ldrb	r2, [r3, #3]
    adea:	2100      	movs	r1, #0
    adec:	400a      	ands	r2, r1
    adee:	70da      	strb	r2, [r3, #3]
		cfg_1.sock_rs485[i].bsize		=8;
    adf0:	1dbb      	adds	r3, r7, #6
    adf2:	881a      	ldrh	r2, [r3, #0]
    adf4:	4948      	ldr	r1, [pc, #288]	; (af18 <cfg_default+0x300>)
    adf6:	2038      	movs	r0, #56	; 0x38
    adf8:	0013      	movs	r3, r2
    adfa:	005b      	lsls	r3, r3, #1
    adfc:	189b      	adds	r3, r3, r2
    adfe:	009b      	lsls	r3, r3, #2
    ae00:	189b      	adds	r3, r3, r2
    ae02:	18cb      	adds	r3, r1, r3
    ae04:	181b      	adds	r3, r3, r0
    ae06:	795a      	ldrb	r2, [r3, #5]
    ae08:	210f      	movs	r1, #15
    ae0a:	438a      	bics	r2, r1
    ae0c:	1c11      	adds	r1, r2, #0
    ae0e:	2208      	movs	r2, #8
    ae10:	430a      	orrs	r2, r1
    ae12:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].parity		=0;
    ae14:	1dbb      	adds	r3, r7, #6
    ae16:	881a      	ldrh	r2, [r3, #0]
    ae18:	493f      	ldr	r1, [pc, #252]	; (af18 <cfg_default+0x300>)
    ae1a:	2038      	movs	r0, #56	; 0x38
    ae1c:	0013      	movs	r3, r2
    ae1e:	005b      	lsls	r3, r3, #1
    ae20:	189b      	adds	r3, r3, r2
    ae22:	009b      	lsls	r3, r3, #2
    ae24:	189b      	adds	r3, r3, r2
    ae26:	18cb      	adds	r3, r1, r3
    ae28:	181b      	adds	r3, r3, r0
    ae2a:	795a      	ldrb	r2, [r3, #5]
    ae2c:	2130      	movs	r1, #48	; 0x30
    ae2e:	438a      	bics	r2, r1
    ae30:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].stop		=0;
    ae32:	1dbb      	adds	r3, r7, #6
    ae34:	881a      	ldrh	r2, [r3, #0]
    ae36:	4938      	ldr	r1, [pc, #224]	; (af18 <cfg_default+0x300>)
    ae38:	2038      	movs	r0, #56	; 0x38
    ae3a:	0013      	movs	r3, r2
    ae3c:	005b      	lsls	r3, r3, #1
    ae3e:	189b      	adds	r3, r3, r2
    ae40:	009b      	lsls	r3, r3, #2
    ae42:	189b      	adds	r3, r3, r2
    ae44:	18cb      	adds	r3, r1, r3
    ae46:	181b      	adds	r3, r3, r0
    ae48:	795a      	ldrb	r2, [r3, #5]
    ae4a:	213f      	movs	r1, #63	; 0x3f
    ae4c:	400a      	ands	r2, r1
    ae4e:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].tout		=100;
    ae50:	1dbb      	adds	r3, r7, #6
    ae52:	881a      	ldrh	r2, [r3, #0]
    ae54:	4930      	ldr	r1, [pc, #192]	; (af18 <cfg_default+0x300>)
    ae56:	0013      	movs	r3, r2
    ae58:	005b      	lsls	r3, r3, #1
    ae5a:	189b      	adds	r3, r3, r2
    ae5c:	009b      	lsls	r3, r3, #2
    ae5e:	189b      	adds	r3, r3, r2
    ae60:	18cb      	adds	r3, r1, r3
    ae62:	3338      	adds	r3, #56	; 0x38
    ae64:	3307      	adds	r3, #7
    ae66:	781a      	ldrb	r2, [r3, #0]
    ae68:	2100      	movs	r1, #0
    ae6a:	400a      	ands	r2, r1
    ae6c:	1c11      	adds	r1, r2, #0
    ae6e:	2264      	movs	r2, #100	; 0x64
    ae70:	430a      	orrs	r2, r1
    ae72:	701a      	strb	r2, [r3, #0]
    ae74:	785a      	ldrb	r2, [r3, #1]
    ae76:	2100      	movs	r1, #0
    ae78:	400a      	ands	r2, r1
    ae7a:	705a      	strb	r2, [r3, #1]
		
		memset(cfg_1.access[i].ip, 0, 4*4);
    ae7c:	1dbb      	adds	r3, r7, #6
    ae7e:	881a      	ldrh	r2, [r3, #0]
    ae80:	0013      	movs	r3, r2
    ae82:	00db      	lsls	r3, r3, #3
    ae84:	189b      	adds	r3, r3, r2
    ae86:	005b      	lsls	r3, r3, #1
    ae88:	3368      	adds	r3, #104	; 0x68
    ae8a:	001a      	movs	r2, r3
    ae8c:	4b22      	ldr	r3, [pc, #136]	; (af18 <cfg_default+0x300>)
    ae8e:	18d3      	adds	r3, r2, r3
    ae90:	3304      	adds	r3, #4
    ae92:	2210      	movs	r2, #16
    ae94:	2100      	movs	r1, #0
    ae96:	0018      	movs	r0, r3
    ae98:	4b24      	ldr	r3, [pc, #144]	; (af2c <cfg_default+0x314>)
    ae9a:	4798      	blx	r3
		cfg_1.access[i].en = 1;
    ae9c:	1dbb      	adds	r3, r7, #6
    ae9e:	881a      	ldrh	r2, [r3, #0]
    aea0:	491d      	ldr	r1, [pc, #116]	; (af18 <cfg_default+0x300>)
    aea2:	206a      	movs	r0, #106	; 0x6a
    aea4:	0013      	movs	r3, r2
    aea6:	00db      	lsls	r3, r3, #3
    aea8:	189b      	adds	r3, r3, r2
    aeaa:	005b      	lsls	r3, r3, #1
    aeac:	18cb      	adds	r3, r1, r3
    aeae:	181b      	adds	r3, r3, r0
    aeb0:	2201      	movs	r2, #1
    aeb2:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;++i)
    aeb4:	1dbb      	adds	r3, r7, #6
    aeb6:	1dba      	adds	r2, r7, #6
    aeb8:	8812      	ldrh	r2, [r2, #0]
    aeba:	3201      	adds	r2, #1
    aebc:	801a      	strh	r2, [r3, #0]
    aebe:	1dbb      	adds	r3, r7, #6
    aec0:	881b      	ldrh	r3, [r3, #0]
    aec2:	2b03      	cmp	r3, #3
    aec4:	d800      	bhi.n	aec8 <cfg_default+0x2b0>
    aec6:	e729      	b.n	ad1c <cfg_default+0x104>

	}
	cfg_1.cs=crc16_ccit(((BYTE *)&cfg_1),sizeof(CFG_1)-2);
    aec8:	4b13      	ldr	r3, [pc, #76]	; (af18 <cfg_default+0x300>)
    aeca:	21fe      	movs	r1, #254	; 0xfe
    aecc:	0018      	movs	r0, r3
    aece:	4b18      	ldr	r3, [pc, #96]	; (af30 <cfg_default+0x318>)
    aed0:	4798      	blx	r3
    aed2:	0003      	movs	r3, r0
    aed4:	0019      	movs	r1, r3
    aed6:	4b10      	ldr	r3, [pc, #64]	; (af18 <cfg_default+0x300>)
    aed8:	22fe      	movs	r2, #254	; 0xfe
    aeda:	20ff      	movs	r0, #255	; 0xff
    aedc:	4008      	ands	r0, r1
    aede:	0005      	movs	r5, r0
    aee0:	5c98      	ldrb	r0, [r3, r2]
    aee2:	2400      	movs	r4, #0
    aee4:	4020      	ands	r0, r4
    aee6:	1c04      	adds	r4, r0, #0
    aee8:	1c28      	adds	r0, r5, #0
    aeea:	4320      	orrs	r0, r4
    aeec:	5498      	strb	r0, [r3, r2]
    aeee:	0a09      	lsrs	r1, r1, #8
    aef0:	b288      	uxth	r0, r1
    aef2:	189b      	adds	r3, r3, r2
    aef4:	785a      	ldrb	r2, [r3, #1]
    aef6:	2100      	movs	r1, #0
    aef8:	400a      	ands	r2, r1
    aefa:	1c11      	adds	r1, r2, #0
    aefc:	1c02      	adds	r2, r0, #0
    aefe:	430a      	orrs	r2, r1
    af00:	705a      	strb	r2, [r3, #1]
	//..............................................................................
	cfg_save();
    af02:	f000 f87f 	bl	b004 <cfg_save>
	log_clear();
    af06:	4b0b      	ldr	r3, [pc, #44]	; (af34 <cfg_default+0x31c>)
    af08:	4798      	blx	r3
	acc(DROP);
    af0a:	2002      	movs	r0, #2
    af0c:	4b0a      	ldr	r3, [pc, #40]	; (af38 <cfg_default+0x320>)
    af0e:	4798      	blx	r3
}
    af10:	46c0      	nop			; (mov r8, r8)
    af12:	46bd      	mov	sp, r7
    af14:	b002      	add	sp, #8
    af16:	bdb0      	pop	{r4, r5, r7, pc}
    af18:	20003dc8 	.word	0x20003dc8
    af1c:	0000cc10 	.word	0x0000cc10
    af20:	20003dcc 	.word	0x20003dcc
    af24:	0000c841 	.word	0x0000c841
    af28:	00000fa1 	.word	0x00000fa1
    af2c:	0000c8c5 	.word	0x0000c8c5
    af30:	00005d0d 	.word	0x00005d0d
    af34:	000046f9 	.word	0x000046f9
    af38:	00004215 	.word	0x00004215

0000af3c <cfg_check>:

void cfg_check()
//--------------------------------------------------------------------------
{
    af3c:	b590      	push	{r4, r7, lr}
    af3e:	b083      	sub	sp, #12
    af40:	af00      	add	r7, sp, #0
	BYTE i = 0;
    af42:	1dfb      	adds	r3, r7, #7
    af44:	2200      	movs	r2, #0
    af46:	701a      	strb	r2, [r3, #0]
	
	for(i=0;i<4;i++)
    af48:	1dfb      	adds	r3, r7, #7
    af4a:	2200      	movs	r2, #0
    af4c:	701a      	strb	r2, [r3, #0]
    af4e:	e04d      	b.n	afec <cfg_check+0xb0>
	{
		port[i].tout_port=cfg_1.sock_rs485[i].tout;
    af50:	1dfb      	adds	r3, r7, #7
    af52:	7819      	ldrb	r1, [r3, #0]
    af54:	1dfb      	adds	r3, r7, #7
    af56:	781a      	ldrb	r2, [r3, #0]
    af58:	4828      	ldr	r0, [pc, #160]	; (affc <cfg_check+0xc0>)
    af5a:	0013      	movs	r3, r2
    af5c:	005b      	lsls	r3, r3, #1
    af5e:	189b      	adds	r3, r3, r2
    af60:	009b      	lsls	r3, r3, #2
    af62:	189b      	adds	r3, r3, r2
    af64:	18c3      	adds	r3, r0, r3
    af66:	3338      	adds	r3, #56	; 0x38
    af68:	79da      	ldrb	r2, [r3, #7]
    af6a:	7a1b      	ldrb	r3, [r3, #8]
    af6c:	021b      	lsls	r3, r3, #8
    af6e:	4313      	orrs	r3, r2
    af70:	b29c      	uxth	r4, r3
    af72:	4823      	ldr	r0, [pc, #140]	; (b000 <cfg_check+0xc4>)
    af74:	2386      	movs	r3, #134	; 0x86
    af76:	009a      	lsls	r2, r3, #2
    af78:	000b      	movs	r3, r1
    af7a:	00db      	lsls	r3, r3, #3
    af7c:	185b      	adds	r3, r3, r1
    af7e:	019b      	lsls	r3, r3, #6
    af80:	18c3      	adds	r3, r0, r3
    af82:	189b      	adds	r3, r3, r2
    af84:	1c22      	adds	r2, r4, #0
    af86:	801a      	strh	r2, [r3, #0]
		if ((port[i].tout_port < 50) || (port[i].tout_port > 1000))  {port[i].tout_port= 100;}
    af88:	1dfb      	adds	r3, r7, #7
    af8a:	781a      	ldrb	r2, [r3, #0]
    af8c:	481c      	ldr	r0, [pc, #112]	; (b000 <cfg_check+0xc4>)
    af8e:	2386      	movs	r3, #134	; 0x86
    af90:	0099      	lsls	r1, r3, #2
    af92:	0013      	movs	r3, r2
    af94:	00db      	lsls	r3, r3, #3
    af96:	189b      	adds	r3, r3, r2
    af98:	019b      	lsls	r3, r3, #6
    af9a:	18c3      	adds	r3, r0, r3
    af9c:	185b      	adds	r3, r3, r1
    af9e:	881b      	ldrh	r3, [r3, #0]
    afa0:	b29b      	uxth	r3, r3
    afa2:	2b31      	cmp	r3, #49	; 0x31
    afa4:	d910      	bls.n	afc8 <cfg_check+0x8c>
    afa6:	1dfb      	adds	r3, r7, #7
    afa8:	781a      	ldrb	r2, [r3, #0]
    afaa:	4815      	ldr	r0, [pc, #84]	; (b000 <cfg_check+0xc4>)
    afac:	2386      	movs	r3, #134	; 0x86
    afae:	0099      	lsls	r1, r3, #2
    afb0:	0013      	movs	r3, r2
    afb2:	00db      	lsls	r3, r3, #3
    afb4:	189b      	adds	r3, r3, r2
    afb6:	019b      	lsls	r3, r3, #6
    afb8:	18c3      	adds	r3, r0, r3
    afba:	185b      	adds	r3, r3, r1
    afbc:	881b      	ldrh	r3, [r3, #0]
    afbe:	b29a      	uxth	r2, r3
    afc0:	23fa      	movs	r3, #250	; 0xfa
    afc2:	009b      	lsls	r3, r3, #2
    afc4:	429a      	cmp	r2, r3
    afc6:	d90c      	bls.n	afe2 <cfg_check+0xa6>
    afc8:	1dfb      	adds	r3, r7, #7
    afca:	781a      	ldrb	r2, [r3, #0]
    afcc:	480c      	ldr	r0, [pc, #48]	; (b000 <cfg_check+0xc4>)
    afce:	2386      	movs	r3, #134	; 0x86
    afd0:	0099      	lsls	r1, r3, #2
    afd2:	0013      	movs	r3, r2
    afd4:	00db      	lsls	r3, r3, #3
    afd6:	189b      	adds	r3, r3, r2
    afd8:	019b      	lsls	r3, r3, #6
    afda:	18c3      	adds	r3, r0, r3
    afdc:	185b      	adds	r3, r3, r1
    afde:	2264      	movs	r2, #100	; 0x64
    afe0:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
    afe2:	1dfb      	adds	r3, r7, #7
    afe4:	781a      	ldrb	r2, [r3, #0]
    afe6:	1dfb      	adds	r3, r7, #7
    afe8:	3201      	adds	r2, #1
    afea:	701a      	strb	r2, [r3, #0]
    afec:	1dfb      	adds	r3, r7, #7
    afee:	781b      	ldrb	r3, [r3, #0]
    aff0:	2b03      	cmp	r3, #3
    aff2:	d9ad      	bls.n	af50 <cfg_check+0x14>
	}
	
	return;
    aff4:	46c0      	nop			; (mov r8, r8)
}
    aff6:	46bd      	mov	sp, r7
    aff8:	b003      	add	sp, #12
    affa:	bd90      	pop	{r4, r7, pc}
    affc:	20003dc8 	.word	0x20003dc8
    b000:	200031fc 	.word	0x200031fc

0000b004 <cfg_save>:

WORD cfg_save(void)
//--------------------------------------------------------------------------
{
    b004:	b580      	push	{r7, lr}
    b006:	af00      	add	r7, sp, #0
	if(!flash_empty(CFG_1_ADDR,256))
    b008:	2380      	movs	r3, #128	; 0x80
    b00a:	005a      	lsls	r2, r3, #1
    b00c:	23fc      	movs	r3, #252	; 0xfc
    b00e:	029b      	lsls	r3, r3, #10
    b010:	0011      	movs	r1, r2
    b012:	0018      	movs	r0, r3
    b014:	4b0a      	ldr	r3, [pc, #40]	; (b040 <cfg_save+0x3c>)
    b016:	4798      	blx	r3
    b018:	1e03      	subs	r3, r0, #0
    b01a:	d104      	bne.n	b026 <cfg_save+0x22>
	{
		flash_erase_page(CFG_1_ADDR);
    b01c:	23fc      	movs	r3, #252	; 0xfc
    b01e:	029b      	lsls	r3, r3, #10
    b020:	0018      	movs	r0, r3
    b022:	4b08      	ldr	r3, [pc, #32]	; (b044 <cfg_save+0x40>)
    b024:	4798      	blx	r3
	}
	
	flash_write(CFG_1_ADDR,(BYTE*)&cfg_1,sizeof(CFG_1));
    b026:	2380      	movs	r3, #128	; 0x80
    b028:	005a      	lsls	r2, r3, #1
    b02a:	4907      	ldr	r1, [pc, #28]	; (b048 <cfg_save+0x44>)
    b02c:	23fc      	movs	r3, #252	; 0xfc
    b02e:	029b      	lsls	r3, r3, #10
    b030:	0018      	movs	r0, r3
    b032:	4b06      	ldr	r3, [pc, #24]	; (b04c <cfg_save+0x48>)
    b034:	4798      	blx	r3
			
	return(CFG_OK);
    b036:	2301      	movs	r3, #1
}
    b038:	0018      	movs	r0, r3
    b03a:	46bd      	mov	sp, r7
    b03c:	bd80      	pop	{r7, pc}
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	000066bd 	.word	0x000066bd
    b044:	00006703 	.word	0x00006703
    b048:	20003dc8 	.word	0x20003dc8
    b04c:	00006751 	.word	0x00006751

0000b050 <__udivsi3>:
    b050:	2200      	movs	r2, #0
    b052:	0843      	lsrs	r3, r0, #1
    b054:	428b      	cmp	r3, r1
    b056:	d374      	bcc.n	b142 <__udivsi3+0xf2>
    b058:	0903      	lsrs	r3, r0, #4
    b05a:	428b      	cmp	r3, r1
    b05c:	d35f      	bcc.n	b11e <__udivsi3+0xce>
    b05e:	0a03      	lsrs	r3, r0, #8
    b060:	428b      	cmp	r3, r1
    b062:	d344      	bcc.n	b0ee <__udivsi3+0x9e>
    b064:	0b03      	lsrs	r3, r0, #12
    b066:	428b      	cmp	r3, r1
    b068:	d328      	bcc.n	b0bc <__udivsi3+0x6c>
    b06a:	0c03      	lsrs	r3, r0, #16
    b06c:	428b      	cmp	r3, r1
    b06e:	d30d      	bcc.n	b08c <__udivsi3+0x3c>
    b070:	22ff      	movs	r2, #255	; 0xff
    b072:	0209      	lsls	r1, r1, #8
    b074:	ba12      	rev	r2, r2
    b076:	0c03      	lsrs	r3, r0, #16
    b078:	428b      	cmp	r3, r1
    b07a:	d302      	bcc.n	b082 <__udivsi3+0x32>
    b07c:	1212      	asrs	r2, r2, #8
    b07e:	0209      	lsls	r1, r1, #8
    b080:	d065      	beq.n	b14e <__udivsi3+0xfe>
    b082:	0b03      	lsrs	r3, r0, #12
    b084:	428b      	cmp	r3, r1
    b086:	d319      	bcc.n	b0bc <__udivsi3+0x6c>
    b088:	e000      	b.n	b08c <__udivsi3+0x3c>
    b08a:	0a09      	lsrs	r1, r1, #8
    b08c:	0bc3      	lsrs	r3, r0, #15
    b08e:	428b      	cmp	r3, r1
    b090:	d301      	bcc.n	b096 <__udivsi3+0x46>
    b092:	03cb      	lsls	r3, r1, #15
    b094:	1ac0      	subs	r0, r0, r3
    b096:	4152      	adcs	r2, r2
    b098:	0b83      	lsrs	r3, r0, #14
    b09a:	428b      	cmp	r3, r1
    b09c:	d301      	bcc.n	b0a2 <__udivsi3+0x52>
    b09e:	038b      	lsls	r3, r1, #14
    b0a0:	1ac0      	subs	r0, r0, r3
    b0a2:	4152      	adcs	r2, r2
    b0a4:	0b43      	lsrs	r3, r0, #13
    b0a6:	428b      	cmp	r3, r1
    b0a8:	d301      	bcc.n	b0ae <__udivsi3+0x5e>
    b0aa:	034b      	lsls	r3, r1, #13
    b0ac:	1ac0      	subs	r0, r0, r3
    b0ae:	4152      	adcs	r2, r2
    b0b0:	0b03      	lsrs	r3, r0, #12
    b0b2:	428b      	cmp	r3, r1
    b0b4:	d301      	bcc.n	b0ba <__udivsi3+0x6a>
    b0b6:	030b      	lsls	r3, r1, #12
    b0b8:	1ac0      	subs	r0, r0, r3
    b0ba:	4152      	adcs	r2, r2
    b0bc:	0ac3      	lsrs	r3, r0, #11
    b0be:	428b      	cmp	r3, r1
    b0c0:	d301      	bcc.n	b0c6 <__udivsi3+0x76>
    b0c2:	02cb      	lsls	r3, r1, #11
    b0c4:	1ac0      	subs	r0, r0, r3
    b0c6:	4152      	adcs	r2, r2
    b0c8:	0a83      	lsrs	r3, r0, #10
    b0ca:	428b      	cmp	r3, r1
    b0cc:	d301      	bcc.n	b0d2 <__udivsi3+0x82>
    b0ce:	028b      	lsls	r3, r1, #10
    b0d0:	1ac0      	subs	r0, r0, r3
    b0d2:	4152      	adcs	r2, r2
    b0d4:	0a43      	lsrs	r3, r0, #9
    b0d6:	428b      	cmp	r3, r1
    b0d8:	d301      	bcc.n	b0de <__udivsi3+0x8e>
    b0da:	024b      	lsls	r3, r1, #9
    b0dc:	1ac0      	subs	r0, r0, r3
    b0de:	4152      	adcs	r2, r2
    b0e0:	0a03      	lsrs	r3, r0, #8
    b0e2:	428b      	cmp	r3, r1
    b0e4:	d301      	bcc.n	b0ea <__udivsi3+0x9a>
    b0e6:	020b      	lsls	r3, r1, #8
    b0e8:	1ac0      	subs	r0, r0, r3
    b0ea:	4152      	adcs	r2, r2
    b0ec:	d2cd      	bcs.n	b08a <__udivsi3+0x3a>
    b0ee:	09c3      	lsrs	r3, r0, #7
    b0f0:	428b      	cmp	r3, r1
    b0f2:	d301      	bcc.n	b0f8 <__udivsi3+0xa8>
    b0f4:	01cb      	lsls	r3, r1, #7
    b0f6:	1ac0      	subs	r0, r0, r3
    b0f8:	4152      	adcs	r2, r2
    b0fa:	0983      	lsrs	r3, r0, #6
    b0fc:	428b      	cmp	r3, r1
    b0fe:	d301      	bcc.n	b104 <__udivsi3+0xb4>
    b100:	018b      	lsls	r3, r1, #6
    b102:	1ac0      	subs	r0, r0, r3
    b104:	4152      	adcs	r2, r2
    b106:	0943      	lsrs	r3, r0, #5
    b108:	428b      	cmp	r3, r1
    b10a:	d301      	bcc.n	b110 <__udivsi3+0xc0>
    b10c:	014b      	lsls	r3, r1, #5
    b10e:	1ac0      	subs	r0, r0, r3
    b110:	4152      	adcs	r2, r2
    b112:	0903      	lsrs	r3, r0, #4
    b114:	428b      	cmp	r3, r1
    b116:	d301      	bcc.n	b11c <__udivsi3+0xcc>
    b118:	010b      	lsls	r3, r1, #4
    b11a:	1ac0      	subs	r0, r0, r3
    b11c:	4152      	adcs	r2, r2
    b11e:	08c3      	lsrs	r3, r0, #3
    b120:	428b      	cmp	r3, r1
    b122:	d301      	bcc.n	b128 <__udivsi3+0xd8>
    b124:	00cb      	lsls	r3, r1, #3
    b126:	1ac0      	subs	r0, r0, r3
    b128:	4152      	adcs	r2, r2
    b12a:	0883      	lsrs	r3, r0, #2
    b12c:	428b      	cmp	r3, r1
    b12e:	d301      	bcc.n	b134 <__udivsi3+0xe4>
    b130:	008b      	lsls	r3, r1, #2
    b132:	1ac0      	subs	r0, r0, r3
    b134:	4152      	adcs	r2, r2
    b136:	0843      	lsrs	r3, r0, #1
    b138:	428b      	cmp	r3, r1
    b13a:	d301      	bcc.n	b140 <__udivsi3+0xf0>
    b13c:	004b      	lsls	r3, r1, #1
    b13e:	1ac0      	subs	r0, r0, r3
    b140:	4152      	adcs	r2, r2
    b142:	1a41      	subs	r1, r0, r1
    b144:	d200      	bcs.n	b148 <__udivsi3+0xf8>
    b146:	4601      	mov	r1, r0
    b148:	4152      	adcs	r2, r2
    b14a:	4610      	mov	r0, r2
    b14c:	4770      	bx	lr
    b14e:	e7ff      	b.n	b150 <__udivsi3+0x100>
    b150:	b501      	push	{r0, lr}
    b152:	2000      	movs	r0, #0
    b154:	f000 f806 	bl	b164 <__aeabi_idiv0>
    b158:	bd02      	pop	{r1, pc}
    b15a:	46c0      	nop			; (mov r8, r8)

0000b15c <__aeabi_uidivmod>:
    b15c:	2900      	cmp	r1, #0
    b15e:	d0f7      	beq.n	b150 <__udivsi3+0x100>
    b160:	e776      	b.n	b050 <__udivsi3>
    b162:	4770      	bx	lr

0000b164 <__aeabi_idiv0>:
    b164:	4770      	bx	lr
    b166:	46c0      	nop			; (mov r8, r8)

0000b168 <__aeabi_d2uiz>:
    b168:	b570      	push	{r4, r5, r6, lr}
    b16a:	2200      	movs	r2, #0
    b16c:	4b0c      	ldr	r3, [pc, #48]	; (b1a0 <__aeabi_d2uiz+0x38>)
    b16e:	0004      	movs	r4, r0
    b170:	000d      	movs	r5, r1
    b172:	f001 fa19 	bl	c5a8 <__aeabi_dcmpge>
    b176:	2800      	cmp	r0, #0
    b178:	d104      	bne.n	b184 <__aeabi_d2uiz+0x1c>
    b17a:	0020      	movs	r0, r4
    b17c:	0029      	movs	r1, r5
    b17e:	f001 f921 	bl	c3c4 <__aeabi_d2iz>
    b182:	bd70      	pop	{r4, r5, r6, pc}
    b184:	4b06      	ldr	r3, [pc, #24]	; (b1a0 <__aeabi_d2uiz+0x38>)
    b186:	2200      	movs	r2, #0
    b188:	0020      	movs	r0, r4
    b18a:	0029      	movs	r1, r5
    b18c:	f000 fe04 	bl	bd98 <__aeabi_dsub>
    b190:	f001 f918 	bl	c3c4 <__aeabi_d2iz>
    b194:	2380      	movs	r3, #128	; 0x80
    b196:	061b      	lsls	r3, r3, #24
    b198:	469c      	mov	ip, r3
    b19a:	4460      	add	r0, ip
    b19c:	e7f1      	b.n	b182 <__aeabi_d2uiz+0x1a>
    b19e:	46c0      	nop			; (mov r8, r8)
    b1a0:	41e00000 	.word	0x41e00000

0000b1a4 <__aeabi_ui2f>:
    b1a4:	b510      	push	{r4, lr}
    b1a6:	1e04      	subs	r4, r0, #0
    b1a8:	d027      	beq.n	b1fa <__aeabi_ui2f+0x56>
    b1aa:	f001 fa07 	bl	c5bc <__clzsi2>
    b1ae:	239e      	movs	r3, #158	; 0x9e
    b1b0:	1a1b      	subs	r3, r3, r0
    b1b2:	2b96      	cmp	r3, #150	; 0x96
    b1b4:	dc0a      	bgt.n	b1cc <__aeabi_ui2f+0x28>
    b1b6:	2296      	movs	r2, #150	; 0x96
    b1b8:	1ad2      	subs	r2, r2, r3
    b1ba:	4094      	lsls	r4, r2
    b1bc:	0264      	lsls	r4, r4, #9
    b1be:	0a64      	lsrs	r4, r4, #9
    b1c0:	b2db      	uxtb	r3, r3
    b1c2:	0264      	lsls	r4, r4, #9
    b1c4:	05db      	lsls	r3, r3, #23
    b1c6:	0a60      	lsrs	r0, r4, #9
    b1c8:	4318      	orrs	r0, r3
    b1ca:	bd10      	pop	{r4, pc}
    b1cc:	2b99      	cmp	r3, #153	; 0x99
    b1ce:	dc17      	bgt.n	b200 <__aeabi_ui2f+0x5c>
    b1d0:	2299      	movs	r2, #153	; 0x99
    b1d2:	1ad2      	subs	r2, r2, r3
    b1d4:	2a00      	cmp	r2, #0
    b1d6:	dd27      	ble.n	b228 <__aeabi_ui2f+0x84>
    b1d8:	4094      	lsls	r4, r2
    b1da:	0022      	movs	r2, r4
    b1dc:	4c13      	ldr	r4, [pc, #76]	; (b22c <__aeabi_ui2f+0x88>)
    b1de:	4014      	ands	r4, r2
    b1e0:	0751      	lsls	r1, r2, #29
    b1e2:	d004      	beq.n	b1ee <__aeabi_ui2f+0x4a>
    b1e4:	210f      	movs	r1, #15
    b1e6:	400a      	ands	r2, r1
    b1e8:	2a04      	cmp	r2, #4
    b1ea:	d000      	beq.n	b1ee <__aeabi_ui2f+0x4a>
    b1ec:	3404      	adds	r4, #4
    b1ee:	0162      	lsls	r2, r4, #5
    b1f0:	d412      	bmi.n	b218 <__aeabi_ui2f+0x74>
    b1f2:	01a4      	lsls	r4, r4, #6
    b1f4:	0a64      	lsrs	r4, r4, #9
    b1f6:	b2db      	uxtb	r3, r3
    b1f8:	e7e3      	b.n	b1c2 <__aeabi_ui2f+0x1e>
    b1fa:	2300      	movs	r3, #0
    b1fc:	2400      	movs	r4, #0
    b1fe:	e7e0      	b.n	b1c2 <__aeabi_ui2f+0x1e>
    b200:	22b9      	movs	r2, #185	; 0xb9
    b202:	0021      	movs	r1, r4
    b204:	1ad2      	subs	r2, r2, r3
    b206:	4091      	lsls	r1, r2
    b208:	000a      	movs	r2, r1
    b20a:	1e51      	subs	r1, r2, #1
    b20c:	418a      	sbcs	r2, r1
    b20e:	2105      	movs	r1, #5
    b210:	1a09      	subs	r1, r1, r0
    b212:	40cc      	lsrs	r4, r1
    b214:	4314      	orrs	r4, r2
    b216:	e7db      	b.n	b1d0 <__aeabi_ui2f+0x2c>
    b218:	4b04      	ldr	r3, [pc, #16]	; (b22c <__aeabi_ui2f+0x88>)
    b21a:	401c      	ands	r4, r3
    b21c:	239f      	movs	r3, #159	; 0x9f
    b21e:	01a4      	lsls	r4, r4, #6
    b220:	1a1b      	subs	r3, r3, r0
    b222:	0a64      	lsrs	r4, r4, #9
    b224:	b2db      	uxtb	r3, r3
    b226:	e7cc      	b.n	b1c2 <__aeabi_ui2f+0x1e>
    b228:	0022      	movs	r2, r4
    b22a:	e7d7      	b.n	b1dc <__aeabi_ui2f+0x38>
    b22c:	fbffffff 	.word	0xfbffffff

0000b230 <__aeabi_ddiv>:
    b230:	b5f0      	push	{r4, r5, r6, r7, lr}
    b232:	4657      	mov	r7, sl
    b234:	4645      	mov	r5, r8
    b236:	46de      	mov	lr, fp
    b238:	464e      	mov	r6, r9
    b23a:	b5e0      	push	{r5, r6, r7, lr}
    b23c:	004c      	lsls	r4, r1, #1
    b23e:	030e      	lsls	r6, r1, #12
    b240:	b087      	sub	sp, #28
    b242:	4683      	mov	fp, r0
    b244:	4692      	mov	sl, r2
    b246:	001d      	movs	r5, r3
    b248:	4680      	mov	r8, r0
    b24a:	0b36      	lsrs	r6, r6, #12
    b24c:	0d64      	lsrs	r4, r4, #21
    b24e:	0fcf      	lsrs	r7, r1, #31
    b250:	2c00      	cmp	r4, #0
    b252:	d04f      	beq.n	b2f4 <__aeabi_ddiv+0xc4>
    b254:	4b6f      	ldr	r3, [pc, #444]	; (b414 <__aeabi_ddiv+0x1e4>)
    b256:	429c      	cmp	r4, r3
    b258:	d035      	beq.n	b2c6 <__aeabi_ddiv+0x96>
    b25a:	2380      	movs	r3, #128	; 0x80
    b25c:	0f42      	lsrs	r2, r0, #29
    b25e:	041b      	lsls	r3, r3, #16
    b260:	00f6      	lsls	r6, r6, #3
    b262:	4313      	orrs	r3, r2
    b264:	4333      	orrs	r3, r6
    b266:	4699      	mov	r9, r3
    b268:	00c3      	lsls	r3, r0, #3
    b26a:	4698      	mov	r8, r3
    b26c:	4b6a      	ldr	r3, [pc, #424]	; (b418 <__aeabi_ddiv+0x1e8>)
    b26e:	2600      	movs	r6, #0
    b270:	469c      	mov	ip, r3
    b272:	2300      	movs	r3, #0
    b274:	4464      	add	r4, ip
    b276:	9303      	str	r3, [sp, #12]
    b278:	032b      	lsls	r3, r5, #12
    b27a:	0b1b      	lsrs	r3, r3, #12
    b27c:	469b      	mov	fp, r3
    b27e:	006b      	lsls	r3, r5, #1
    b280:	0fed      	lsrs	r5, r5, #31
    b282:	4650      	mov	r0, sl
    b284:	0d5b      	lsrs	r3, r3, #21
    b286:	9501      	str	r5, [sp, #4]
    b288:	d05e      	beq.n	b348 <__aeabi_ddiv+0x118>
    b28a:	4a62      	ldr	r2, [pc, #392]	; (b414 <__aeabi_ddiv+0x1e4>)
    b28c:	4293      	cmp	r3, r2
    b28e:	d053      	beq.n	b338 <__aeabi_ddiv+0x108>
    b290:	465a      	mov	r2, fp
    b292:	00d1      	lsls	r1, r2, #3
    b294:	2280      	movs	r2, #128	; 0x80
    b296:	0f40      	lsrs	r0, r0, #29
    b298:	0412      	lsls	r2, r2, #16
    b29a:	4302      	orrs	r2, r0
    b29c:	430a      	orrs	r2, r1
    b29e:	4693      	mov	fp, r2
    b2a0:	4652      	mov	r2, sl
    b2a2:	00d1      	lsls	r1, r2, #3
    b2a4:	4a5c      	ldr	r2, [pc, #368]	; (b418 <__aeabi_ddiv+0x1e8>)
    b2a6:	4694      	mov	ip, r2
    b2a8:	2200      	movs	r2, #0
    b2aa:	4463      	add	r3, ip
    b2ac:	0038      	movs	r0, r7
    b2ae:	4068      	eors	r0, r5
    b2b0:	4684      	mov	ip, r0
    b2b2:	9002      	str	r0, [sp, #8]
    b2b4:	1ae4      	subs	r4, r4, r3
    b2b6:	4316      	orrs	r6, r2
    b2b8:	2e0f      	cmp	r6, #15
    b2ba:	d900      	bls.n	b2be <__aeabi_ddiv+0x8e>
    b2bc:	e0b4      	b.n	b428 <__aeabi_ddiv+0x1f8>
    b2be:	4b57      	ldr	r3, [pc, #348]	; (b41c <__aeabi_ddiv+0x1ec>)
    b2c0:	00b6      	lsls	r6, r6, #2
    b2c2:	599b      	ldr	r3, [r3, r6]
    b2c4:	469f      	mov	pc, r3
    b2c6:	0003      	movs	r3, r0
    b2c8:	4333      	orrs	r3, r6
    b2ca:	4699      	mov	r9, r3
    b2cc:	d16c      	bne.n	b3a8 <__aeabi_ddiv+0x178>
    b2ce:	2300      	movs	r3, #0
    b2d0:	4698      	mov	r8, r3
    b2d2:	3302      	adds	r3, #2
    b2d4:	2608      	movs	r6, #8
    b2d6:	9303      	str	r3, [sp, #12]
    b2d8:	e7ce      	b.n	b278 <__aeabi_ddiv+0x48>
    b2da:	46cb      	mov	fp, r9
    b2dc:	4641      	mov	r1, r8
    b2de:	9a03      	ldr	r2, [sp, #12]
    b2e0:	9701      	str	r7, [sp, #4]
    b2e2:	2a02      	cmp	r2, #2
    b2e4:	d165      	bne.n	b3b2 <__aeabi_ddiv+0x182>
    b2e6:	9b01      	ldr	r3, [sp, #4]
    b2e8:	4c4a      	ldr	r4, [pc, #296]	; (b414 <__aeabi_ddiv+0x1e4>)
    b2ea:	469c      	mov	ip, r3
    b2ec:	2300      	movs	r3, #0
    b2ee:	2200      	movs	r2, #0
    b2f0:	4698      	mov	r8, r3
    b2f2:	e06b      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b2f4:	0003      	movs	r3, r0
    b2f6:	4333      	orrs	r3, r6
    b2f8:	4699      	mov	r9, r3
    b2fa:	d04e      	beq.n	b39a <__aeabi_ddiv+0x16a>
    b2fc:	2e00      	cmp	r6, #0
    b2fe:	d100      	bne.n	b302 <__aeabi_ddiv+0xd2>
    b300:	e1bc      	b.n	b67c <__aeabi_ddiv+0x44c>
    b302:	0030      	movs	r0, r6
    b304:	f001 f95a 	bl	c5bc <__clzsi2>
    b308:	0003      	movs	r3, r0
    b30a:	3b0b      	subs	r3, #11
    b30c:	2b1c      	cmp	r3, #28
    b30e:	dd00      	ble.n	b312 <__aeabi_ddiv+0xe2>
    b310:	e1ac      	b.n	b66c <__aeabi_ddiv+0x43c>
    b312:	221d      	movs	r2, #29
    b314:	1ad3      	subs	r3, r2, r3
    b316:	465a      	mov	r2, fp
    b318:	0001      	movs	r1, r0
    b31a:	40da      	lsrs	r2, r3
    b31c:	3908      	subs	r1, #8
    b31e:	408e      	lsls	r6, r1
    b320:	0013      	movs	r3, r2
    b322:	4333      	orrs	r3, r6
    b324:	4699      	mov	r9, r3
    b326:	465b      	mov	r3, fp
    b328:	408b      	lsls	r3, r1
    b32a:	4698      	mov	r8, r3
    b32c:	2300      	movs	r3, #0
    b32e:	4c3c      	ldr	r4, [pc, #240]	; (b420 <__aeabi_ddiv+0x1f0>)
    b330:	2600      	movs	r6, #0
    b332:	1a24      	subs	r4, r4, r0
    b334:	9303      	str	r3, [sp, #12]
    b336:	e79f      	b.n	b278 <__aeabi_ddiv+0x48>
    b338:	4651      	mov	r1, sl
    b33a:	465a      	mov	r2, fp
    b33c:	4311      	orrs	r1, r2
    b33e:	d129      	bne.n	b394 <__aeabi_ddiv+0x164>
    b340:	2200      	movs	r2, #0
    b342:	4693      	mov	fp, r2
    b344:	3202      	adds	r2, #2
    b346:	e7b1      	b.n	b2ac <__aeabi_ddiv+0x7c>
    b348:	4659      	mov	r1, fp
    b34a:	4301      	orrs	r1, r0
    b34c:	d01e      	beq.n	b38c <__aeabi_ddiv+0x15c>
    b34e:	465b      	mov	r3, fp
    b350:	2b00      	cmp	r3, #0
    b352:	d100      	bne.n	b356 <__aeabi_ddiv+0x126>
    b354:	e19e      	b.n	b694 <__aeabi_ddiv+0x464>
    b356:	4658      	mov	r0, fp
    b358:	f001 f930 	bl	c5bc <__clzsi2>
    b35c:	0003      	movs	r3, r0
    b35e:	3b0b      	subs	r3, #11
    b360:	2b1c      	cmp	r3, #28
    b362:	dd00      	ble.n	b366 <__aeabi_ddiv+0x136>
    b364:	e18f      	b.n	b686 <__aeabi_ddiv+0x456>
    b366:	0002      	movs	r2, r0
    b368:	4659      	mov	r1, fp
    b36a:	3a08      	subs	r2, #8
    b36c:	4091      	lsls	r1, r2
    b36e:	468b      	mov	fp, r1
    b370:	211d      	movs	r1, #29
    b372:	1acb      	subs	r3, r1, r3
    b374:	4651      	mov	r1, sl
    b376:	40d9      	lsrs	r1, r3
    b378:	000b      	movs	r3, r1
    b37a:	4659      	mov	r1, fp
    b37c:	430b      	orrs	r3, r1
    b37e:	4651      	mov	r1, sl
    b380:	469b      	mov	fp, r3
    b382:	4091      	lsls	r1, r2
    b384:	4b26      	ldr	r3, [pc, #152]	; (b420 <__aeabi_ddiv+0x1f0>)
    b386:	2200      	movs	r2, #0
    b388:	1a1b      	subs	r3, r3, r0
    b38a:	e78f      	b.n	b2ac <__aeabi_ddiv+0x7c>
    b38c:	2300      	movs	r3, #0
    b38e:	2201      	movs	r2, #1
    b390:	469b      	mov	fp, r3
    b392:	e78b      	b.n	b2ac <__aeabi_ddiv+0x7c>
    b394:	4651      	mov	r1, sl
    b396:	2203      	movs	r2, #3
    b398:	e788      	b.n	b2ac <__aeabi_ddiv+0x7c>
    b39a:	2300      	movs	r3, #0
    b39c:	4698      	mov	r8, r3
    b39e:	3301      	adds	r3, #1
    b3a0:	2604      	movs	r6, #4
    b3a2:	2400      	movs	r4, #0
    b3a4:	9303      	str	r3, [sp, #12]
    b3a6:	e767      	b.n	b278 <__aeabi_ddiv+0x48>
    b3a8:	2303      	movs	r3, #3
    b3aa:	46b1      	mov	r9, r6
    b3ac:	9303      	str	r3, [sp, #12]
    b3ae:	260c      	movs	r6, #12
    b3b0:	e762      	b.n	b278 <__aeabi_ddiv+0x48>
    b3b2:	2a03      	cmp	r2, #3
    b3b4:	d100      	bne.n	b3b8 <__aeabi_ddiv+0x188>
    b3b6:	e25c      	b.n	b872 <__aeabi_ddiv+0x642>
    b3b8:	9b01      	ldr	r3, [sp, #4]
    b3ba:	2a01      	cmp	r2, #1
    b3bc:	d000      	beq.n	b3c0 <__aeabi_ddiv+0x190>
    b3be:	e1e4      	b.n	b78a <__aeabi_ddiv+0x55a>
    b3c0:	4013      	ands	r3, r2
    b3c2:	469c      	mov	ip, r3
    b3c4:	2300      	movs	r3, #0
    b3c6:	2400      	movs	r4, #0
    b3c8:	2200      	movs	r2, #0
    b3ca:	4698      	mov	r8, r3
    b3cc:	2100      	movs	r1, #0
    b3ce:	0312      	lsls	r2, r2, #12
    b3d0:	0b13      	lsrs	r3, r2, #12
    b3d2:	0d0a      	lsrs	r2, r1, #20
    b3d4:	0512      	lsls	r2, r2, #20
    b3d6:	431a      	orrs	r2, r3
    b3d8:	0523      	lsls	r3, r4, #20
    b3da:	4c12      	ldr	r4, [pc, #72]	; (b424 <__aeabi_ddiv+0x1f4>)
    b3dc:	4640      	mov	r0, r8
    b3de:	4022      	ands	r2, r4
    b3e0:	4313      	orrs	r3, r2
    b3e2:	4662      	mov	r2, ip
    b3e4:	005b      	lsls	r3, r3, #1
    b3e6:	07d2      	lsls	r2, r2, #31
    b3e8:	085b      	lsrs	r3, r3, #1
    b3ea:	4313      	orrs	r3, r2
    b3ec:	0019      	movs	r1, r3
    b3ee:	b007      	add	sp, #28
    b3f0:	bc3c      	pop	{r2, r3, r4, r5}
    b3f2:	4690      	mov	r8, r2
    b3f4:	4699      	mov	r9, r3
    b3f6:	46a2      	mov	sl, r4
    b3f8:	46ab      	mov	fp, r5
    b3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3fc:	2300      	movs	r3, #0
    b3fe:	2280      	movs	r2, #128	; 0x80
    b400:	469c      	mov	ip, r3
    b402:	0312      	lsls	r2, r2, #12
    b404:	4698      	mov	r8, r3
    b406:	4c03      	ldr	r4, [pc, #12]	; (b414 <__aeabi_ddiv+0x1e4>)
    b408:	e7e0      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b40a:	2300      	movs	r3, #0
    b40c:	4c01      	ldr	r4, [pc, #4]	; (b414 <__aeabi_ddiv+0x1e4>)
    b40e:	2200      	movs	r2, #0
    b410:	4698      	mov	r8, r3
    b412:	e7db      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b414:	000007ff 	.word	0x000007ff
    b418:	fffffc01 	.word	0xfffffc01
    b41c:	0000cc1c 	.word	0x0000cc1c
    b420:	fffffc0d 	.word	0xfffffc0d
    b424:	800fffff 	.word	0x800fffff
    b428:	45d9      	cmp	r9, fp
    b42a:	d900      	bls.n	b42e <__aeabi_ddiv+0x1fe>
    b42c:	e139      	b.n	b6a2 <__aeabi_ddiv+0x472>
    b42e:	d100      	bne.n	b432 <__aeabi_ddiv+0x202>
    b430:	e134      	b.n	b69c <__aeabi_ddiv+0x46c>
    b432:	2300      	movs	r3, #0
    b434:	4646      	mov	r6, r8
    b436:	464d      	mov	r5, r9
    b438:	469a      	mov	sl, r3
    b43a:	3c01      	subs	r4, #1
    b43c:	465b      	mov	r3, fp
    b43e:	0e0a      	lsrs	r2, r1, #24
    b440:	021b      	lsls	r3, r3, #8
    b442:	431a      	orrs	r2, r3
    b444:	020b      	lsls	r3, r1, #8
    b446:	0c17      	lsrs	r7, r2, #16
    b448:	9303      	str	r3, [sp, #12]
    b44a:	0413      	lsls	r3, r2, #16
    b44c:	0c1b      	lsrs	r3, r3, #16
    b44e:	0039      	movs	r1, r7
    b450:	0028      	movs	r0, r5
    b452:	4690      	mov	r8, r2
    b454:	9301      	str	r3, [sp, #4]
    b456:	f7ff fdfb 	bl	b050 <__udivsi3>
    b45a:	0002      	movs	r2, r0
    b45c:	9b01      	ldr	r3, [sp, #4]
    b45e:	4683      	mov	fp, r0
    b460:	435a      	muls	r2, r3
    b462:	0028      	movs	r0, r5
    b464:	0039      	movs	r1, r7
    b466:	4691      	mov	r9, r2
    b468:	f7ff fe78 	bl	b15c <__aeabi_uidivmod>
    b46c:	0c35      	lsrs	r5, r6, #16
    b46e:	0409      	lsls	r1, r1, #16
    b470:	430d      	orrs	r5, r1
    b472:	45a9      	cmp	r9, r5
    b474:	d90d      	bls.n	b492 <__aeabi_ddiv+0x262>
    b476:	465b      	mov	r3, fp
    b478:	4445      	add	r5, r8
    b47a:	3b01      	subs	r3, #1
    b47c:	45a8      	cmp	r8, r5
    b47e:	d900      	bls.n	b482 <__aeabi_ddiv+0x252>
    b480:	e13a      	b.n	b6f8 <__aeabi_ddiv+0x4c8>
    b482:	45a9      	cmp	r9, r5
    b484:	d800      	bhi.n	b488 <__aeabi_ddiv+0x258>
    b486:	e137      	b.n	b6f8 <__aeabi_ddiv+0x4c8>
    b488:	2302      	movs	r3, #2
    b48a:	425b      	negs	r3, r3
    b48c:	469c      	mov	ip, r3
    b48e:	4445      	add	r5, r8
    b490:	44e3      	add	fp, ip
    b492:	464b      	mov	r3, r9
    b494:	1aeb      	subs	r3, r5, r3
    b496:	0039      	movs	r1, r7
    b498:	0018      	movs	r0, r3
    b49a:	9304      	str	r3, [sp, #16]
    b49c:	f7ff fdd8 	bl	b050 <__udivsi3>
    b4a0:	9b01      	ldr	r3, [sp, #4]
    b4a2:	0005      	movs	r5, r0
    b4a4:	4343      	muls	r3, r0
    b4a6:	0039      	movs	r1, r7
    b4a8:	9804      	ldr	r0, [sp, #16]
    b4aa:	4699      	mov	r9, r3
    b4ac:	f7ff fe56 	bl	b15c <__aeabi_uidivmod>
    b4b0:	0433      	lsls	r3, r6, #16
    b4b2:	0409      	lsls	r1, r1, #16
    b4b4:	0c1b      	lsrs	r3, r3, #16
    b4b6:	430b      	orrs	r3, r1
    b4b8:	4599      	cmp	r9, r3
    b4ba:	d909      	bls.n	b4d0 <__aeabi_ddiv+0x2a0>
    b4bc:	4443      	add	r3, r8
    b4be:	1e6a      	subs	r2, r5, #1
    b4c0:	4598      	cmp	r8, r3
    b4c2:	d900      	bls.n	b4c6 <__aeabi_ddiv+0x296>
    b4c4:	e11a      	b.n	b6fc <__aeabi_ddiv+0x4cc>
    b4c6:	4599      	cmp	r9, r3
    b4c8:	d800      	bhi.n	b4cc <__aeabi_ddiv+0x29c>
    b4ca:	e117      	b.n	b6fc <__aeabi_ddiv+0x4cc>
    b4cc:	3d02      	subs	r5, #2
    b4ce:	4443      	add	r3, r8
    b4d0:	464a      	mov	r2, r9
    b4d2:	1a9b      	subs	r3, r3, r2
    b4d4:	465a      	mov	r2, fp
    b4d6:	0412      	lsls	r2, r2, #16
    b4d8:	432a      	orrs	r2, r5
    b4da:	9903      	ldr	r1, [sp, #12]
    b4dc:	4693      	mov	fp, r2
    b4de:	0c10      	lsrs	r0, r2, #16
    b4e0:	0c0a      	lsrs	r2, r1, #16
    b4e2:	4691      	mov	r9, r2
    b4e4:	0409      	lsls	r1, r1, #16
    b4e6:	465a      	mov	r2, fp
    b4e8:	0c09      	lsrs	r1, r1, #16
    b4ea:	464e      	mov	r6, r9
    b4ec:	000d      	movs	r5, r1
    b4ee:	0412      	lsls	r2, r2, #16
    b4f0:	0c12      	lsrs	r2, r2, #16
    b4f2:	4345      	muls	r5, r0
    b4f4:	9105      	str	r1, [sp, #20]
    b4f6:	4351      	muls	r1, r2
    b4f8:	4372      	muls	r2, r6
    b4fa:	4370      	muls	r0, r6
    b4fc:	1952      	adds	r2, r2, r5
    b4fe:	0c0e      	lsrs	r6, r1, #16
    b500:	18b2      	adds	r2, r6, r2
    b502:	4295      	cmp	r5, r2
    b504:	d903      	bls.n	b50e <__aeabi_ddiv+0x2de>
    b506:	2580      	movs	r5, #128	; 0x80
    b508:	026d      	lsls	r5, r5, #9
    b50a:	46ac      	mov	ip, r5
    b50c:	4460      	add	r0, ip
    b50e:	0c15      	lsrs	r5, r2, #16
    b510:	0409      	lsls	r1, r1, #16
    b512:	0412      	lsls	r2, r2, #16
    b514:	0c09      	lsrs	r1, r1, #16
    b516:	1828      	adds	r0, r5, r0
    b518:	1852      	adds	r2, r2, r1
    b51a:	4283      	cmp	r3, r0
    b51c:	d200      	bcs.n	b520 <__aeabi_ddiv+0x2f0>
    b51e:	e0ce      	b.n	b6be <__aeabi_ddiv+0x48e>
    b520:	d100      	bne.n	b524 <__aeabi_ddiv+0x2f4>
    b522:	e0c8      	b.n	b6b6 <__aeabi_ddiv+0x486>
    b524:	1a1d      	subs	r5, r3, r0
    b526:	4653      	mov	r3, sl
    b528:	1a9e      	subs	r6, r3, r2
    b52a:	45b2      	cmp	sl, r6
    b52c:	4192      	sbcs	r2, r2
    b52e:	4252      	negs	r2, r2
    b530:	1aab      	subs	r3, r5, r2
    b532:	469a      	mov	sl, r3
    b534:	4598      	cmp	r8, r3
    b536:	d100      	bne.n	b53a <__aeabi_ddiv+0x30a>
    b538:	e117      	b.n	b76a <__aeabi_ddiv+0x53a>
    b53a:	0039      	movs	r1, r7
    b53c:	0018      	movs	r0, r3
    b53e:	f7ff fd87 	bl	b050 <__udivsi3>
    b542:	9b01      	ldr	r3, [sp, #4]
    b544:	0005      	movs	r5, r0
    b546:	4343      	muls	r3, r0
    b548:	0039      	movs	r1, r7
    b54a:	4650      	mov	r0, sl
    b54c:	9304      	str	r3, [sp, #16]
    b54e:	f7ff fe05 	bl	b15c <__aeabi_uidivmod>
    b552:	9804      	ldr	r0, [sp, #16]
    b554:	040b      	lsls	r3, r1, #16
    b556:	0c31      	lsrs	r1, r6, #16
    b558:	4319      	orrs	r1, r3
    b55a:	4288      	cmp	r0, r1
    b55c:	d909      	bls.n	b572 <__aeabi_ddiv+0x342>
    b55e:	4441      	add	r1, r8
    b560:	1e6b      	subs	r3, r5, #1
    b562:	4588      	cmp	r8, r1
    b564:	d900      	bls.n	b568 <__aeabi_ddiv+0x338>
    b566:	e107      	b.n	b778 <__aeabi_ddiv+0x548>
    b568:	4288      	cmp	r0, r1
    b56a:	d800      	bhi.n	b56e <__aeabi_ddiv+0x33e>
    b56c:	e104      	b.n	b778 <__aeabi_ddiv+0x548>
    b56e:	3d02      	subs	r5, #2
    b570:	4441      	add	r1, r8
    b572:	9b04      	ldr	r3, [sp, #16]
    b574:	1acb      	subs	r3, r1, r3
    b576:	0018      	movs	r0, r3
    b578:	0039      	movs	r1, r7
    b57a:	9304      	str	r3, [sp, #16]
    b57c:	f7ff fd68 	bl	b050 <__udivsi3>
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	4682      	mov	sl, r0
    b584:	4343      	muls	r3, r0
    b586:	0039      	movs	r1, r7
    b588:	9804      	ldr	r0, [sp, #16]
    b58a:	9301      	str	r3, [sp, #4]
    b58c:	f7ff fde6 	bl	b15c <__aeabi_uidivmod>
    b590:	9801      	ldr	r0, [sp, #4]
    b592:	040b      	lsls	r3, r1, #16
    b594:	0431      	lsls	r1, r6, #16
    b596:	0c09      	lsrs	r1, r1, #16
    b598:	4319      	orrs	r1, r3
    b59a:	4288      	cmp	r0, r1
    b59c:	d90d      	bls.n	b5ba <__aeabi_ddiv+0x38a>
    b59e:	4653      	mov	r3, sl
    b5a0:	4441      	add	r1, r8
    b5a2:	3b01      	subs	r3, #1
    b5a4:	4588      	cmp	r8, r1
    b5a6:	d900      	bls.n	b5aa <__aeabi_ddiv+0x37a>
    b5a8:	e0e8      	b.n	b77c <__aeabi_ddiv+0x54c>
    b5aa:	4288      	cmp	r0, r1
    b5ac:	d800      	bhi.n	b5b0 <__aeabi_ddiv+0x380>
    b5ae:	e0e5      	b.n	b77c <__aeabi_ddiv+0x54c>
    b5b0:	2302      	movs	r3, #2
    b5b2:	425b      	negs	r3, r3
    b5b4:	469c      	mov	ip, r3
    b5b6:	4441      	add	r1, r8
    b5b8:	44e2      	add	sl, ip
    b5ba:	9b01      	ldr	r3, [sp, #4]
    b5bc:	042d      	lsls	r5, r5, #16
    b5be:	1ace      	subs	r6, r1, r3
    b5c0:	4651      	mov	r1, sl
    b5c2:	4329      	orrs	r1, r5
    b5c4:	9d05      	ldr	r5, [sp, #20]
    b5c6:	464f      	mov	r7, r9
    b5c8:	002a      	movs	r2, r5
    b5ca:	040b      	lsls	r3, r1, #16
    b5cc:	0c08      	lsrs	r0, r1, #16
    b5ce:	0c1b      	lsrs	r3, r3, #16
    b5d0:	435a      	muls	r2, r3
    b5d2:	4345      	muls	r5, r0
    b5d4:	437b      	muls	r3, r7
    b5d6:	4378      	muls	r0, r7
    b5d8:	195b      	adds	r3, r3, r5
    b5da:	0c17      	lsrs	r7, r2, #16
    b5dc:	18fb      	adds	r3, r7, r3
    b5de:	429d      	cmp	r5, r3
    b5e0:	d903      	bls.n	b5ea <__aeabi_ddiv+0x3ba>
    b5e2:	2580      	movs	r5, #128	; 0x80
    b5e4:	026d      	lsls	r5, r5, #9
    b5e6:	46ac      	mov	ip, r5
    b5e8:	4460      	add	r0, ip
    b5ea:	0c1d      	lsrs	r5, r3, #16
    b5ec:	0412      	lsls	r2, r2, #16
    b5ee:	041b      	lsls	r3, r3, #16
    b5f0:	0c12      	lsrs	r2, r2, #16
    b5f2:	1828      	adds	r0, r5, r0
    b5f4:	189b      	adds	r3, r3, r2
    b5f6:	4286      	cmp	r6, r0
    b5f8:	d200      	bcs.n	b5fc <__aeabi_ddiv+0x3cc>
    b5fa:	e093      	b.n	b724 <__aeabi_ddiv+0x4f4>
    b5fc:	d100      	bne.n	b600 <__aeabi_ddiv+0x3d0>
    b5fe:	e08e      	b.n	b71e <__aeabi_ddiv+0x4ee>
    b600:	2301      	movs	r3, #1
    b602:	4319      	orrs	r1, r3
    b604:	4ba0      	ldr	r3, [pc, #640]	; (b888 <__aeabi_ddiv+0x658>)
    b606:	18e3      	adds	r3, r4, r3
    b608:	2b00      	cmp	r3, #0
    b60a:	dc00      	bgt.n	b60e <__aeabi_ddiv+0x3de>
    b60c:	e099      	b.n	b742 <__aeabi_ddiv+0x512>
    b60e:	074a      	lsls	r2, r1, #29
    b610:	d000      	beq.n	b614 <__aeabi_ddiv+0x3e4>
    b612:	e09e      	b.n	b752 <__aeabi_ddiv+0x522>
    b614:	465a      	mov	r2, fp
    b616:	01d2      	lsls	r2, r2, #7
    b618:	d506      	bpl.n	b628 <__aeabi_ddiv+0x3f8>
    b61a:	465a      	mov	r2, fp
    b61c:	4b9b      	ldr	r3, [pc, #620]	; (b88c <__aeabi_ddiv+0x65c>)
    b61e:	401a      	ands	r2, r3
    b620:	2380      	movs	r3, #128	; 0x80
    b622:	4693      	mov	fp, r2
    b624:	00db      	lsls	r3, r3, #3
    b626:	18e3      	adds	r3, r4, r3
    b628:	4a99      	ldr	r2, [pc, #612]	; (b890 <__aeabi_ddiv+0x660>)
    b62a:	4293      	cmp	r3, r2
    b62c:	dd68      	ble.n	b700 <__aeabi_ddiv+0x4d0>
    b62e:	2301      	movs	r3, #1
    b630:	9a02      	ldr	r2, [sp, #8]
    b632:	4c98      	ldr	r4, [pc, #608]	; (b894 <__aeabi_ddiv+0x664>)
    b634:	401a      	ands	r2, r3
    b636:	2300      	movs	r3, #0
    b638:	4694      	mov	ip, r2
    b63a:	4698      	mov	r8, r3
    b63c:	2200      	movs	r2, #0
    b63e:	e6c5      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b640:	2280      	movs	r2, #128	; 0x80
    b642:	464b      	mov	r3, r9
    b644:	0312      	lsls	r2, r2, #12
    b646:	4213      	tst	r3, r2
    b648:	d00a      	beq.n	b660 <__aeabi_ddiv+0x430>
    b64a:	465b      	mov	r3, fp
    b64c:	4213      	tst	r3, r2
    b64e:	d106      	bne.n	b65e <__aeabi_ddiv+0x42e>
    b650:	431a      	orrs	r2, r3
    b652:	0312      	lsls	r2, r2, #12
    b654:	0b12      	lsrs	r2, r2, #12
    b656:	46ac      	mov	ip, r5
    b658:	4688      	mov	r8, r1
    b65a:	4c8e      	ldr	r4, [pc, #568]	; (b894 <__aeabi_ddiv+0x664>)
    b65c:	e6b6      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b65e:	464b      	mov	r3, r9
    b660:	431a      	orrs	r2, r3
    b662:	0312      	lsls	r2, r2, #12
    b664:	0b12      	lsrs	r2, r2, #12
    b666:	46bc      	mov	ip, r7
    b668:	4c8a      	ldr	r4, [pc, #552]	; (b894 <__aeabi_ddiv+0x664>)
    b66a:	e6af      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b66c:	0003      	movs	r3, r0
    b66e:	465a      	mov	r2, fp
    b670:	3b28      	subs	r3, #40	; 0x28
    b672:	409a      	lsls	r2, r3
    b674:	2300      	movs	r3, #0
    b676:	4691      	mov	r9, r2
    b678:	4698      	mov	r8, r3
    b67a:	e657      	b.n	b32c <__aeabi_ddiv+0xfc>
    b67c:	4658      	mov	r0, fp
    b67e:	f000 ff9d 	bl	c5bc <__clzsi2>
    b682:	3020      	adds	r0, #32
    b684:	e640      	b.n	b308 <__aeabi_ddiv+0xd8>
    b686:	0003      	movs	r3, r0
    b688:	4652      	mov	r2, sl
    b68a:	3b28      	subs	r3, #40	; 0x28
    b68c:	409a      	lsls	r2, r3
    b68e:	2100      	movs	r1, #0
    b690:	4693      	mov	fp, r2
    b692:	e677      	b.n	b384 <__aeabi_ddiv+0x154>
    b694:	f000 ff92 	bl	c5bc <__clzsi2>
    b698:	3020      	adds	r0, #32
    b69a:	e65f      	b.n	b35c <__aeabi_ddiv+0x12c>
    b69c:	4588      	cmp	r8, r1
    b69e:	d200      	bcs.n	b6a2 <__aeabi_ddiv+0x472>
    b6a0:	e6c7      	b.n	b432 <__aeabi_ddiv+0x202>
    b6a2:	464b      	mov	r3, r9
    b6a4:	07de      	lsls	r6, r3, #31
    b6a6:	085d      	lsrs	r5, r3, #1
    b6a8:	4643      	mov	r3, r8
    b6aa:	085b      	lsrs	r3, r3, #1
    b6ac:	431e      	orrs	r6, r3
    b6ae:	4643      	mov	r3, r8
    b6b0:	07db      	lsls	r3, r3, #31
    b6b2:	469a      	mov	sl, r3
    b6b4:	e6c2      	b.n	b43c <__aeabi_ddiv+0x20c>
    b6b6:	2500      	movs	r5, #0
    b6b8:	4592      	cmp	sl, r2
    b6ba:	d300      	bcc.n	b6be <__aeabi_ddiv+0x48e>
    b6bc:	e733      	b.n	b526 <__aeabi_ddiv+0x2f6>
    b6be:	9e03      	ldr	r6, [sp, #12]
    b6c0:	4659      	mov	r1, fp
    b6c2:	46b4      	mov	ip, r6
    b6c4:	44e2      	add	sl, ip
    b6c6:	45b2      	cmp	sl, r6
    b6c8:	41ad      	sbcs	r5, r5
    b6ca:	426d      	negs	r5, r5
    b6cc:	4445      	add	r5, r8
    b6ce:	18eb      	adds	r3, r5, r3
    b6d0:	3901      	subs	r1, #1
    b6d2:	4598      	cmp	r8, r3
    b6d4:	d207      	bcs.n	b6e6 <__aeabi_ddiv+0x4b6>
    b6d6:	4298      	cmp	r0, r3
    b6d8:	d900      	bls.n	b6dc <__aeabi_ddiv+0x4ac>
    b6da:	e07f      	b.n	b7dc <__aeabi_ddiv+0x5ac>
    b6dc:	d100      	bne.n	b6e0 <__aeabi_ddiv+0x4b0>
    b6de:	e0bc      	b.n	b85a <__aeabi_ddiv+0x62a>
    b6e0:	1a1d      	subs	r5, r3, r0
    b6e2:	468b      	mov	fp, r1
    b6e4:	e71f      	b.n	b526 <__aeabi_ddiv+0x2f6>
    b6e6:	4598      	cmp	r8, r3
    b6e8:	d1fa      	bne.n	b6e0 <__aeabi_ddiv+0x4b0>
    b6ea:	9d03      	ldr	r5, [sp, #12]
    b6ec:	4555      	cmp	r5, sl
    b6ee:	d9f2      	bls.n	b6d6 <__aeabi_ddiv+0x4a6>
    b6f0:	4643      	mov	r3, r8
    b6f2:	468b      	mov	fp, r1
    b6f4:	1a1d      	subs	r5, r3, r0
    b6f6:	e716      	b.n	b526 <__aeabi_ddiv+0x2f6>
    b6f8:	469b      	mov	fp, r3
    b6fa:	e6ca      	b.n	b492 <__aeabi_ddiv+0x262>
    b6fc:	0015      	movs	r5, r2
    b6fe:	e6e7      	b.n	b4d0 <__aeabi_ddiv+0x2a0>
    b700:	465a      	mov	r2, fp
    b702:	08c9      	lsrs	r1, r1, #3
    b704:	0752      	lsls	r2, r2, #29
    b706:	430a      	orrs	r2, r1
    b708:	055b      	lsls	r3, r3, #21
    b70a:	4690      	mov	r8, r2
    b70c:	0d5c      	lsrs	r4, r3, #21
    b70e:	465a      	mov	r2, fp
    b710:	2301      	movs	r3, #1
    b712:	9902      	ldr	r1, [sp, #8]
    b714:	0252      	lsls	r2, r2, #9
    b716:	4019      	ands	r1, r3
    b718:	0b12      	lsrs	r2, r2, #12
    b71a:	468c      	mov	ip, r1
    b71c:	e656      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b71e:	2b00      	cmp	r3, #0
    b720:	d100      	bne.n	b724 <__aeabi_ddiv+0x4f4>
    b722:	e76f      	b.n	b604 <__aeabi_ddiv+0x3d4>
    b724:	4446      	add	r6, r8
    b726:	1e4a      	subs	r2, r1, #1
    b728:	45b0      	cmp	r8, r6
    b72a:	d929      	bls.n	b780 <__aeabi_ddiv+0x550>
    b72c:	0011      	movs	r1, r2
    b72e:	4286      	cmp	r6, r0
    b730:	d000      	beq.n	b734 <__aeabi_ddiv+0x504>
    b732:	e765      	b.n	b600 <__aeabi_ddiv+0x3d0>
    b734:	9a03      	ldr	r2, [sp, #12]
    b736:	4293      	cmp	r3, r2
    b738:	d000      	beq.n	b73c <__aeabi_ddiv+0x50c>
    b73a:	e761      	b.n	b600 <__aeabi_ddiv+0x3d0>
    b73c:	e762      	b.n	b604 <__aeabi_ddiv+0x3d4>
    b73e:	2101      	movs	r1, #1
    b740:	4249      	negs	r1, r1
    b742:	2001      	movs	r0, #1
    b744:	1ac2      	subs	r2, r0, r3
    b746:	2a38      	cmp	r2, #56	; 0x38
    b748:	dd21      	ble.n	b78e <__aeabi_ddiv+0x55e>
    b74a:	9b02      	ldr	r3, [sp, #8]
    b74c:	4003      	ands	r3, r0
    b74e:	469c      	mov	ip, r3
    b750:	e638      	b.n	b3c4 <__aeabi_ddiv+0x194>
    b752:	220f      	movs	r2, #15
    b754:	400a      	ands	r2, r1
    b756:	2a04      	cmp	r2, #4
    b758:	d100      	bne.n	b75c <__aeabi_ddiv+0x52c>
    b75a:	e75b      	b.n	b614 <__aeabi_ddiv+0x3e4>
    b75c:	000a      	movs	r2, r1
    b75e:	1d11      	adds	r1, r2, #4
    b760:	4291      	cmp	r1, r2
    b762:	4192      	sbcs	r2, r2
    b764:	4252      	negs	r2, r2
    b766:	4493      	add	fp, r2
    b768:	e754      	b.n	b614 <__aeabi_ddiv+0x3e4>
    b76a:	4b47      	ldr	r3, [pc, #284]	; (b888 <__aeabi_ddiv+0x658>)
    b76c:	18e3      	adds	r3, r4, r3
    b76e:	2b00      	cmp	r3, #0
    b770:	dde5      	ble.n	b73e <__aeabi_ddiv+0x50e>
    b772:	2201      	movs	r2, #1
    b774:	4252      	negs	r2, r2
    b776:	e7f2      	b.n	b75e <__aeabi_ddiv+0x52e>
    b778:	001d      	movs	r5, r3
    b77a:	e6fa      	b.n	b572 <__aeabi_ddiv+0x342>
    b77c:	469a      	mov	sl, r3
    b77e:	e71c      	b.n	b5ba <__aeabi_ddiv+0x38a>
    b780:	42b0      	cmp	r0, r6
    b782:	d839      	bhi.n	b7f8 <__aeabi_ddiv+0x5c8>
    b784:	d06e      	beq.n	b864 <__aeabi_ddiv+0x634>
    b786:	0011      	movs	r1, r2
    b788:	e73a      	b.n	b600 <__aeabi_ddiv+0x3d0>
    b78a:	9302      	str	r3, [sp, #8]
    b78c:	e73a      	b.n	b604 <__aeabi_ddiv+0x3d4>
    b78e:	2a1f      	cmp	r2, #31
    b790:	dc3c      	bgt.n	b80c <__aeabi_ddiv+0x5dc>
    b792:	2320      	movs	r3, #32
    b794:	1a9b      	subs	r3, r3, r2
    b796:	000c      	movs	r4, r1
    b798:	4658      	mov	r0, fp
    b79a:	4099      	lsls	r1, r3
    b79c:	4098      	lsls	r0, r3
    b79e:	1e4b      	subs	r3, r1, #1
    b7a0:	4199      	sbcs	r1, r3
    b7a2:	465b      	mov	r3, fp
    b7a4:	40d4      	lsrs	r4, r2
    b7a6:	40d3      	lsrs	r3, r2
    b7a8:	4320      	orrs	r0, r4
    b7aa:	4308      	orrs	r0, r1
    b7ac:	001a      	movs	r2, r3
    b7ae:	0743      	lsls	r3, r0, #29
    b7b0:	d009      	beq.n	b7c6 <__aeabi_ddiv+0x596>
    b7b2:	230f      	movs	r3, #15
    b7b4:	4003      	ands	r3, r0
    b7b6:	2b04      	cmp	r3, #4
    b7b8:	d005      	beq.n	b7c6 <__aeabi_ddiv+0x596>
    b7ba:	0001      	movs	r1, r0
    b7bc:	1d08      	adds	r0, r1, #4
    b7be:	4288      	cmp	r0, r1
    b7c0:	419b      	sbcs	r3, r3
    b7c2:	425b      	negs	r3, r3
    b7c4:	18d2      	adds	r2, r2, r3
    b7c6:	0213      	lsls	r3, r2, #8
    b7c8:	d53a      	bpl.n	b840 <__aeabi_ddiv+0x610>
    b7ca:	2301      	movs	r3, #1
    b7cc:	9a02      	ldr	r2, [sp, #8]
    b7ce:	2401      	movs	r4, #1
    b7d0:	401a      	ands	r2, r3
    b7d2:	2300      	movs	r3, #0
    b7d4:	4694      	mov	ip, r2
    b7d6:	4698      	mov	r8, r3
    b7d8:	2200      	movs	r2, #0
    b7da:	e5f7      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b7dc:	2102      	movs	r1, #2
    b7de:	4249      	negs	r1, r1
    b7e0:	468c      	mov	ip, r1
    b7e2:	9d03      	ldr	r5, [sp, #12]
    b7e4:	44e3      	add	fp, ip
    b7e6:	46ac      	mov	ip, r5
    b7e8:	44e2      	add	sl, ip
    b7ea:	45aa      	cmp	sl, r5
    b7ec:	41ad      	sbcs	r5, r5
    b7ee:	426d      	negs	r5, r5
    b7f0:	4445      	add	r5, r8
    b7f2:	18ed      	adds	r5, r5, r3
    b7f4:	1a2d      	subs	r5, r5, r0
    b7f6:	e696      	b.n	b526 <__aeabi_ddiv+0x2f6>
    b7f8:	1e8a      	subs	r2, r1, #2
    b7fa:	9903      	ldr	r1, [sp, #12]
    b7fc:	004d      	lsls	r5, r1, #1
    b7fe:	428d      	cmp	r5, r1
    b800:	4189      	sbcs	r1, r1
    b802:	4249      	negs	r1, r1
    b804:	4441      	add	r1, r8
    b806:	1876      	adds	r6, r6, r1
    b808:	9503      	str	r5, [sp, #12]
    b80a:	e78f      	b.n	b72c <__aeabi_ddiv+0x4fc>
    b80c:	201f      	movs	r0, #31
    b80e:	4240      	negs	r0, r0
    b810:	1ac3      	subs	r3, r0, r3
    b812:	4658      	mov	r0, fp
    b814:	40d8      	lsrs	r0, r3
    b816:	0003      	movs	r3, r0
    b818:	2a20      	cmp	r2, #32
    b81a:	d028      	beq.n	b86e <__aeabi_ddiv+0x63e>
    b81c:	2040      	movs	r0, #64	; 0x40
    b81e:	465d      	mov	r5, fp
    b820:	1a82      	subs	r2, r0, r2
    b822:	4095      	lsls	r5, r2
    b824:	4329      	orrs	r1, r5
    b826:	1e4a      	subs	r2, r1, #1
    b828:	4191      	sbcs	r1, r2
    b82a:	4319      	orrs	r1, r3
    b82c:	2307      	movs	r3, #7
    b82e:	2200      	movs	r2, #0
    b830:	400b      	ands	r3, r1
    b832:	d009      	beq.n	b848 <__aeabi_ddiv+0x618>
    b834:	230f      	movs	r3, #15
    b836:	2200      	movs	r2, #0
    b838:	400b      	ands	r3, r1
    b83a:	0008      	movs	r0, r1
    b83c:	2b04      	cmp	r3, #4
    b83e:	d1bd      	bne.n	b7bc <__aeabi_ddiv+0x58c>
    b840:	0001      	movs	r1, r0
    b842:	0753      	lsls	r3, r2, #29
    b844:	0252      	lsls	r2, r2, #9
    b846:	0b12      	lsrs	r2, r2, #12
    b848:	08c9      	lsrs	r1, r1, #3
    b84a:	4319      	orrs	r1, r3
    b84c:	2301      	movs	r3, #1
    b84e:	4688      	mov	r8, r1
    b850:	9902      	ldr	r1, [sp, #8]
    b852:	2400      	movs	r4, #0
    b854:	4019      	ands	r1, r3
    b856:	468c      	mov	ip, r1
    b858:	e5b8      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b85a:	4552      	cmp	r2, sl
    b85c:	d8be      	bhi.n	b7dc <__aeabi_ddiv+0x5ac>
    b85e:	468b      	mov	fp, r1
    b860:	2500      	movs	r5, #0
    b862:	e660      	b.n	b526 <__aeabi_ddiv+0x2f6>
    b864:	9d03      	ldr	r5, [sp, #12]
    b866:	429d      	cmp	r5, r3
    b868:	d3c6      	bcc.n	b7f8 <__aeabi_ddiv+0x5c8>
    b86a:	0011      	movs	r1, r2
    b86c:	e762      	b.n	b734 <__aeabi_ddiv+0x504>
    b86e:	2500      	movs	r5, #0
    b870:	e7d8      	b.n	b824 <__aeabi_ddiv+0x5f4>
    b872:	2280      	movs	r2, #128	; 0x80
    b874:	465b      	mov	r3, fp
    b876:	0312      	lsls	r2, r2, #12
    b878:	431a      	orrs	r2, r3
    b87a:	9b01      	ldr	r3, [sp, #4]
    b87c:	0312      	lsls	r2, r2, #12
    b87e:	0b12      	lsrs	r2, r2, #12
    b880:	469c      	mov	ip, r3
    b882:	4688      	mov	r8, r1
    b884:	4c03      	ldr	r4, [pc, #12]	; (b894 <__aeabi_ddiv+0x664>)
    b886:	e5a1      	b.n	b3cc <__aeabi_ddiv+0x19c>
    b888:	000003ff 	.word	0x000003ff
    b88c:	feffffff 	.word	0xfeffffff
    b890:	000007fe 	.word	0x000007fe
    b894:	000007ff 	.word	0x000007ff

0000b898 <__aeabi_dmul>:
    b898:	b5f0      	push	{r4, r5, r6, r7, lr}
    b89a:	4657      	mov	r7, sl
    b89c:	4645      	mov	r5, r8
    b89e:	46de      	mov	lr, fp
    b8a0:	464e      	mov	r6, r9
    b8a2:	b5e0      	push	{r5, r6, r7, lr}
    b8a4:	030c      	lsls	r4, r1, #12
    b8a6:	4698      	mov	r8, r3
    b8a8:	004e      	lsls	r6, r1, #1
    b8aa:	0b23      	lsrs	r3, r4, #12
    b8ac:	b087      	sub	sp, #28
    b8ae:	0007      	movs	r7, r0
    b8b0:	4692      	mov	sl, r2
    b8b2:	469b      	mov	fp, r3
    b8b4:	0d76      	lsrs	r6, r6, #21
    b8b6:	0fcd      	lsrs	r5, r1, #31
    b8b8:	2e00      	cmp	r6, #0
    b8ba:	d06b      	beq.n	b994 <__aeabi_dmul+0xfc>
    b8bc:	4b6d      	ldr	r3, [pc, #436]	; (ba74 <__aeabi_dmul+0x1dc>)
    b8be:	429e      	cmp	r6, r3
    b8c0:	d035      	beq.n	b92e <__aeabi_dmul+0x96>
    b8c2:	2480      	movs	r4, #128	; 0x80
    b8c4:	465b      	mov	r3, fp
    b8c6:	0f42      	lsrs	r2, r0, #29
    b8c8:	0424      	lsls	r4, r4, #16
    b8ca:	00db      	lsls	r3, r3, #3
    b8cc:	4314      	orrs	r4, r2
    b8ce:	431c      	orrs	r4, r3
    b8d0:	00c3      	lsls	r3, r0, #3
    b8d2:	4699      	mov	r9, r3
    b8d4:	4b68      	ldr	r3, [pc, #416]	; (ba78 <__aeabi_dmul+0x1e0>)
    b8d6:	46a3      	mov	fp, r4
    b8d8:	469c      	mov	ip, r3
    b8da:	2300      	movs	r3, #0
    b8dc:	2700      	movs	r7, #0
    b8de:	4466      	add	r6, ip
    b8e0:	9302      	str	r3, [sp, #8]
    b8e2:	4643      	mov	r3, r8
    b8e4:	031c      	lsls	r4, r3, #12
    b8e6:	005a      	lsls	r2, r3, #1
    b8e8:	0fdb      	lsrs	r3, r3, #31
    b8ea:	4650      	mov	r0, sl
    b8ec:	0b24      	lsrs	r4, r4, #12
    b8ee:	0d52      	lsrs	r2, r2, #21
    b8f0:	4698      	mov	r8, r3
    b8f2:	d100      	bne.n	b8f6 <__aeabi_dmul+0x5e>
    b8f4:	e076      	b.n	b9e4 <__aeabi_dmul+0x14c>
    b8f6:	4b5f      	ldr	r3, [pc, #380]	; (ba74 <__aeabi_dmul+0x1dc>)
    b8f8:	429a      	cmp	r2, r3
    b8fa:	d06d      	beq.n	b9d8 <__aeabi_dmul+0x140>
    b8fc:	2380      	movs	r3, #128	; 0x80
    b8fe:	0f41      	lsrs	r1, r0, #29
    b900:	041b      	lsls	r3, r3, #16
    b902:	430b      	orrs	r3, r1
    b904:	495c      	ldr	r1, [pc, #368]	; (ba78 <__aeabi_dmul+0x1e0>)
    b906:	00e4      	lsls	r4, r4, #3
    b908:	468c      	mov	ip, r1
    b90a:	431c      	orrs	r4, r3
    b90c:	00c3      	lsls	r3, r0, #3
    b90e:	2000      	movs	r0, #0
    b910:	4462      	add	r2, ip
    b912:	4641      	mov	r1, r8
    b914:	18b6      	adds	r6, r6, r2
    b916:	4069      	eors	r1, r5
    b918:	1c72      	adds	r2, r6, #1
    b91a:	9101      	str	r1, [sp, #4]
    b91c:	4694      	mov	ip, r2
    b91e:	4307      	orrs	r7, r0
    b920:	2f0f      	cmp	r7, #15
    b922:	d900      	bls.n	b926 <__aeabi_dmul+0x8e>
    b924:	e0b0      	b.n	ba88 <__aeabi_dmul+0x1f0>
    b926:	4a55      	ldr	r2, [pc, #340]	; (ba7c <__aeabi_dmul+0x1e4>)
    b928:	00bf      	lsls	r7, r7, #2
    b92a:	59d2      	ldr	r2, [r2, r7]
    b92c:	4697      	mov	pc, r2
    b92e:	465b      	mov	r3, fp
    b930:	4303      	orrs	r3, r0
    b932:	4699      	mov	r9, r3
    b934:	d000      	beq.n	b938 <__aeabi_dmul+0xa0>
    b936:	e087      	b.n	ba48 <__aeabi_dmul+0x1b0>
    b938:	2300      	movs	r3, #0
    b93a:	469b      	mov	fp, r3
    b93c:	3302      	adds	r3, #2
    b93e:	2708      	movs	r7, #8
    b940:	9302      	str	r3, [sp, #8]
    b942:	e7ce      	b.n	b8e2 <__aeabi_dmul+0x4a>
    b944:	4642      	mov	r2, r8
    b946:	9201      	str	r2, [sp, #4]
    b948:	2802      	cmp	r0, #2
    b94a:	d067      	beq.n	ba1c <__aeabi_dmul+0x184>
    b94c:	2803      	cmp	r0, #3
    b94e:	d100      	bne.n	b952 <__aeabi_dmul+0xba>
    b950:	e20e      	b.n	bd70 <__aeabi_dmul+0x4d8>
    b952:	2801      	cmp	r0, #1
    b954:	d000      	beq.n	b958 <__aeabi_dmul+0xc0>
    b956:	e162      	b.n	bc1e <__aeabi_dmul+0x386>
    b958:	2300      	movs	r3, #0
    b95a:	2400      	movs	r4, #0
    b95c:	2200      	movs	r2, #0
    b95e:	4699      	mov	r9, r3
    b960:	9901      	ldr	r1, [sp, #4]
    b962:	4001      	ands	r1, r0
    b964:	b2cd      	uxtb	r5, r1
    b966:	2100      	movs	r1, #0
    b968:	0312      	lsls	r2, r2, #12
    b96a:	0d0b      	lsrs	r3, r1, #20
    b96c:	0b12      	lsrs	r2, r2, #12
    b96e:	051b      	lsls	r3, r3, #20
    b970:	4313      	orrs	r3, r2
    b972:	4a43      	ldr	r2, [pc, #268]	; (ba80 <__aeabi_dmul+0x1e8>)
    b974:	0524      	lsls	r4, r4, #20
    b976:	4013      	ands	r3, r2
    b978:	431c      	orrs	r4, r3
    b97a:	0064      	lsls	r4, r4, #1
    b97c:	07ed      	lsls	r5, r5, #31
    b97e:	0864      	lsrs	r4, r4, #1
    b980:	432c      	orrs	r4, r5
    b982:	4648      	mov	r0, r9
    b984:	0021      	movs	r1, r4
    b986:	b007      	add	sp, #28
    b988:	bc3c      	pop	{r2, r3, r4, r5}
    b98a:	4690      	mov	r8, r2
    b98c:	4699      	mov	r9, r3
    b98e:	46a2      	mov	sl, r4
    b990:	46ab      	mov	fp, r5
    b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b994:	4303      	orrs	r3, r0
    b996:	4699      	mov	r9, r3
    b998:	d04f      	beq.n	ba3a <__aeabi_dmul+0x1a2>
    b99a:	465b      	mov	r3, fp
    b99c:	2b00      	cmp	r3, #0
    b99e:	d100      	bne.n	b9a2 <__aeabi_dmul+0x10a>
    b9a0:	e189      	b.n	bcb6 <__aeabi_dmul+0x41e>
    b9a2:	4658      	mov	r0, fp
    b9a4:	f000 fe0a 	bl	c5bc <__clzsi2>
    b9a8:	0003      	movs	r3, r0
    b9aa:	3b0b      	subs	r3, #11
    b9ac:	2b1c      	cmp	r3, #28
    b9ae:	dd00      	ble.n	b9b2 <__aeabi_dmul+0x11a>
    b9b0:	e17a      	b.n	bca8 <__aeabi_dmul+0x410>
    b9b2:	221d      	movs	r2, #29
    b9b4:	1ad3      	subs	r3, r2, r3
    b9b6:	003a      	movs	r2, r7
    b9b8:	0001      	movs	r1, r0
    b9ba:	465c      	mov	r4, fp
    b9bc:	40da      	lsrs	r2, r3
    b9be:	3908      	subs	r1, #8
    b9c0:	408c      	lsls	r4, r1
    b9c2:	0013      	movs	r3, r2
    b9c4:	408f      	lsls	r7, r1
    b9c6:	4323      	orrs	r3, r4
    b9c8:	469b      	mov	fp, r3
    b9ca:	46b9      	mov	r9, r7
    b9cc:	2300      	movs	r3, #0
    b9ce:	4e2d      	ldr	r6, [pc, #180]	; (ba84 <__aeabi_dmul+0x1ec>)
    b9d0:	2700      	movs	r7, #0
    b9d2:	1a36      	subs	r6, r6, r0
    b9d4:	9302      	str	r3, [sp, #8]
    b9d6:	e784      	b.n	b8e2 <__aeabi_dmul+0x4a>
    b9d8:	4653      	mov	r3, sl
    b9da:	4323      	orrs	r3, r4
    b9dc:	d12a      	bne.n	ba34 <__aeabi_dmul+0x19c>
    b9de:	2400      	movs	r4, #0
    b9e0:	2002      	movs	r0, #2
    b9e2:	e796      	b.n	b912 <__aeabi_dmul+0x7a>
    b9e4:	4653      	mov	r3, sl
    b9e6:	4323      	orrs	r3, r4
    b9e8:	d020      	beq.n	ba2c <__aeabi_dmul+0x194>
    b9ea:	2c00      	cmp	r4, #0
    b9ec:	d100      	bne.n	b9f0 <__aeabi_dmul+0x158>
    b9ee:	e157      	b.n	bca0 <__aeabi_dmul+0x408>
    b9f0:	0020      	movs	r0, r4
    b9f2:	f000 fde3 	bl	c5bc <__clzsi2>
    b9f6:	0003      	movs	r3, r0
    b9f8:	3b0b      	subs	r3, #11
    b9fa:	2b1c      	cmp	r3, #28
    b9fc:	dd00      	ble.n	ba00 <__aeabi_dmul+0x168>
    b9fe:	e149      	b.n	bc94 <__aeabi_dmul+0x3fc>
    ba00:	211d      	movs	r1, #29
    ba02:	1acb      	subs	r3, r1, r3
    ba04:	4651      	mov	r1, sl
    ba06:	0002      	movs	r2, r0
    ba08:	40d9      	lsrs	r1, r3
    ba0a:	4653      	mov	r3, sl
    ba0c:	3a08      	subs	r2, #8
    ba0e:	4094      	lsls	r4, r2
    ba10:	4093      	lsls	r3, r2
    ba12:	430c      	orrs	r4, r1
    ba14:	4a1b      	ldr	r2, [pc, #108]	; (ba84 <__aeabi_dmul+0x1ec>)
    ba16:	1a12      	subs	r2, r2, r0
    ba18:	2000      	movs	r0, #0
    ba1a:	e77a      	b.n	b912 <__aeabi_dmul+0x7a>
    ba1c:	2501      	movs	r5, #1
    ba1e:	9b01      	ldr	r3, [sp, #4]
    ba20:	4c14      	ldr	r4, [pc, #80]	; (ba74 <__aeabi_dmul+0x1dc>)
    ba22:	401d      	ands	r5, r3
    ba24:	2300      	movs	r3, #0
    ba26:	2200      	movs	r2, #0
    ba28:	4699      	mov	r9, r3
    ba2a:	e79c      	b.n	b966 <__aeabi_dmul+0xce>
    ba2c:	2400      	movs	r4, #0
    ba2e:	2200      	movs	r2, #0
    ba30:	2001      	movs	r0, #1
    ba32:	e76e      	b.n	b912 <__aeabi_dmul+0x7a>
    ba34:	4653      	mov	r3, sl
    ba36:	2003      	movs	r0, #3
    ba38:	e76b      	b.n	b912 <__aeabi_dmul+0x7a>
    ba3a:	2300      	movs	r3, #0
    ba3c:	469b      	mov	fp, r3
    ba3e:	3301      	adds	r3, #1
    ba40:	2704      	movs	r7, #4
    ba42:	2600      	movs	r6, #0
    ba44:	9302      	str	r3, [sp, #8]
    ba46:	e74c      	b.n	b8e2 <__aeabi_dmul+0x4a>
    ba48:	2303      	movs	r3, #3
    ba4a:	4681      	mov	r9, r0
    ba4c:	270c      	movs	r7, #12
    ba4e:	9302      	str	r3, [sp, #8]
    ba50:	e747      	b.n	b8e2 <__aeabi_dmul+0x4a>
    ba52:	2280      	movs	r2, #128	; 0x80
    ba54:	2300      	movs	r3, #0
    ba56:	2500      	movs	r5, #0
    ba58:	0312      	lsls	r2, r2, #12
    ba5a:	4699      	mov	r9, r3
    ba5c:	4c05      	ldr	r4, [pc, #20]	; (ba74 <__aeabi_dmul+0x1dc>)
    ba5e:	e782      	b.n	b966 <__aeabi_dmul+0xce>
    ba60:	465c      	mov	r4, fp
    ba62:	464b      	mov	r3, r9
    ba64:	9802      	ldr	r0, [sp, #8]
    ba66:	e76f      	b.n	b948 <__aeabi_dmul+0xb0>
    ba68:	465c      	mov	r4, fp
    ba6a:	464b      	mov	r3, r9
    ba6c:	9501      	str	r5, [sp, #4]
    ba6e:	9802      	ldr	r0, [sp, #8]
    ba70:	e76a      	b.n	b948 <__aeabi_dmul+0xb0>
    ba72:	46c0      	nop			; (mov r8, r8)
    ba74:	000007ff 	.word	0x000007ff
    ba78:	fffffc01 	.word	0xfffffc01
    ba7c:	0000cc5c 	.word	0x0000cc5c
    ba80:	800fffff 	.word	0x800fffff
    ba84:	fffffc0d 	.word	0xfffffc0d
    ba88:	464a      	mov	r2, r9
    ba8a:	4649      	mov	r1, r9
    ba8c:	0c17      	lsrs	r7, r2, #16
    ba8e:	0c1a      	lsrs	r2, r3, #16
    ba90:	041b      	lsls	r3, r3, #16
    ba92:	0c1b      	lsrs	r3, r3, #16
    ba94:	0408      	lsls	r0, r1, #16
    ba96:	0019      	movs	r1, r3
    ba98:	0c00      	lsrs	r0, r0, #16
    ba9a:	4341      	muls	r1, r0
    ba9c:	0015      	movs	r5, r2
    ba9e:	4688      	mov	r8, r1
    baa0:	0019      	movs	r1, r3
    baa2:	437d      	muls	r5, r7
    baa4:	4379      	muls	r1, r7
    baa6:	9503      	str	r5, [sp, #12]
    baa8:	4689      	mov	r9, r1
    baaa:	0029      	movs	r1, r5
    baac:	0015      	movs	r5, r2
    baae:	4345      	muls	r5, r0
    bab0:	444d      	add	r5, r9
    bab2:	9502      	str	r5, [sp, #8]
    bab4:	4645      	mov	r5, r8
    bab6:	0c2d      	lsrs	r5, r5, #16
    bab8:	46aa      	mov	sl, r5
    baba:	9d02      	ldr	r5, [sp, #8]
    babc:	4455      	add	r5, sl
    babe:	45a9      	cmp	r9, r5
    bac0:	d906      	bls.n	bad0 <__aeabi_dmul+0x238>
    bac2:	468a      	mov	sl, r1
    bac4:	2180      	movs	r1, #128	; 0x80
    bac6:	0249      	lsls	r1, r1, #9
    bac8:	4689      	mov	r9, r1
    baca:	44ca      	add	sl, r9
    bacc:	4651      	mov	r1, sl
    bace:	9103      	str	r1, [sp, #12]
    bad0:	0c29      	lsrs	r1, r5, #16
    bad2:	9104      	str	r1, [sp, #16]
    bad4:	4641      	mov	r1, r8
    bad6:	0409      	lsls	r1, r1, #16
    bad8:	042d      	lsls	r5, r5, #16
    bada:	0c09      	lsrs	r1, r1, #16
    badc:	4688      	mov	r8, r1
    bade:	0029      	movs	r1, r5
    bae0:	0c25      	lsrs	r5, r4, #16
    bae2:	0424      	lsls	r4, r4, #16
    bae4:	4441      	add	r1, r8
    bae6:	0c24      	lsrs	r4, r4, #16
    bae8:	9105      	str	r1, [sp, #20]
    baea:	0021      	movs	r1, r4
    baec:	4341      	muls	r1, r0
    baee:	4688      	mov	r8, r1
    baf0:	0021      	movs	r1, r4
    baf2:	4379      	muls	r1, r7
    baf4:	468a      	mov	sl, r1
    baf6:	4368      	muls	r0, r5
    baf8:	4641      	mov	r1, r8
    bafa:	4450      	add	r0, sl
    bafc:	4681      	mov	r9, r0
    bafe:	0c08      	lsrs	r0, r1, #16
    bb00:	4448      	add	r0, r9
    bb02:	436f      	muls	r7, r5
    bb04:	4582      	cmp	sl, r0
    bb06:	d903      	bls.n	bb10 <__aeabi_dmul+0x278>
    bb08:	2180      	movs	r1, #128	; 0x80
    bb0a:	0249      	lsls	r1, r1, #9
    bb0c:	4689      	mov	r9, r1
    bb0e:	444f      	add	r7, r9
    bb10:	0c01      	lsrs	r1, r0, #16
    bb12:	4689      	mov	r9, r1
    bb14:	0039      	movs	r1, r7
    bb16:	4449      	add	r1, r9
    bb18:	9102      	str	r1, [sp, #8]
    bb1a:	4641      	mov	r1, r8
    bb1c:	040f      	lsls	r7, r1, #16
    bb1e:	9904      	ldr	r1, [sp, #16]
    bb20:	0c3f      	lsrs	r7, r7, #16
    bb22:	4688      	mov	r8, r1
    bb24:	0400      	lsls	r0, r0, #16
    bb26:	19c0      	adds	r0, r0, r7
    bb28:	4480      	add	r8, r0
    bb2a:	4641      	mov	r1, r8
    bb2c:	9104      	str	r1, [sp, #16]
    bb2e:	4659      	mov	r1, fp
    bb30:	0c0f      	lsrs	r7, r1, #16
    bb32:	0409      	lsls	r1, r1, #16
    bb34:	0c09      	lsrs	r1, r1, #16
    bb36:	4688      	mov	r8, r1
    bb38:	4359      	muls	r1, r3
    bb3a:	468a      	mov	sl, r1
    bb3c:	0039      	movs	r1, r7
    bb3e:	4351      	muls	r1, r2
    bb40:	4689      	mov	r9, r1
    bb42:	4641      	mov	r1, r8
    bb44:	434a      	muls	r2, r1
    bb46:	4651      	mov	r1, sl
    bb48:	0c09      	lsrs	r1, r1, #16
    bb4a:	468b      	mov	fp, r1
    bb4c:	437b      	muls	r3, r7
    bb4e:	18d2      	adds	r2, r2, r3
    bb50:	445a      	add	r2, fp
    bb52:	4293      	cmp	r3, r2
    bb54:	d903      	bls.n	bb5e <__aeabi_dmul+0x2c6>
    bb56:	2380      	movs	r3, #128	; 0x80
    bb58:	025b      	lsls	r3, r3, #9
    bb5a:	469b      	mov	fp, r3
    bb5c:	44d9      	add	r9, fp
    bb5e:	4651      	mov	r1, sl
    bb60:	0409      	lsls	r1, r1, #16
    bb62:	0c09      	lsrs	r1, r1, #16
    bb64:	468a      	mov	sl, r1
    bb66:	4641      	mov	r1, r8
    bb68:	4361      	muls	r1, r4
    bb6a:	437c      	muls	r4, r7
    bb6c:	0c13      	lsrs	r3, r2, #16
    bb6e:	0412      	lsls	r2, r2, #16
    bb70:	444b      	add	r3, r9
    bb72:	4452      	add	r2, sl
    bb74:	46a1      	mov	r9, r4
    bb76:	468a      	mov	sl, r1
    bb78:	003c      	movs	r4, r7
    bb7a:	4641      	mov	r1, r8
    bb7c:	436c      	muls	r4, r5
    bb7e:	434d      	muls	r5, r1
    bb80:	4651      	mov	r1, sl
    bb82:	444d      	add	r5, r9
    bb84:	0c0f      	lsrs	r7, r1, #16
    bb86:	197d      	adds	r5, r7, r5
    bb88:	45a9      	cmp	r9, r5
    bb8a:	d903      	bls.n	bb94 <__aeabi_dmul+0x2fc>
    bb8c:	2180      	movs	r1, #128	; 0x80
    bb8e:	0249      	lsls	r1, r1, #9
    bb90:	4688      	mov	r8, r1
    bb92:	4444      	add	r4, r8
    bb94:	9f04      	ldr	r7, [sp, #16]
    bb96:	9903      	ldr	r1, [sp, #12]
    bb98:	46b8      	mov	r8, r7
    bb9a:	4441      	add	r1, r8
    bb9c:	468b      	mov	fp, r1
    bb9e:	4583      	cmp	fp, r0
    bba0:	4180      	sbcs	r0, r0
    bba2:	4241      	negs	r1, r0
    bba4:	4688      	mov	r8, r1
    bba6:	4651      	mov	r1, sl
    bba8:	0408      	lsls	r0, r1, #16
    bbaa:	042f      	lsls	r7, r5, #16
    bbac:	0c00      	lsrs	r0, r0, #16
    bbae:	183f      	adds	r7, r7, r0
    bbb0:	4658      	mov	r0, fp
    bbb2:	9902      	ldr	r1, [sp, #8]
    bbb4:	1810      	adds	r0, r2, r0
    bbb6:	4689      	mov	r9, r1
    bbb8:	4290      	cmp	r0, r2
    bbba:	4192      	sbcs	r2, r2
    bbbc:	444f      	add	r7, r9
    bbbe:	46ba      	mov	sl, r7
    bbc0:	4252      	negs	r2, r2
    bbc2:	4699      	mov	r9, r3
    bbc4:	4693      	mov	fp, r2
    bbc6:	44c2      	add	sl, r8
    bbc8:	44d1      	add	r9, sl
    bbca:	44cb      	add	fp, r9
    bbcc:	428f      	cmp	r7, r1
    bbce:	41bf      	sbcs	r7, r7
    bbd0:	45c2      	cmp	sl, r8
    bbd2:	4189      	sbcs	r1, r1
    bbd4:	4599      	cmp	r9, r3
    bbd6:	419b      	sbcs	r3, r3
    bbd8:	4593      	cmp	fp, r2
    bbda:	4192      	sbcs	r2, r2
    bbdc:	427f      	negs	r7, r7
    bbde:	4249      	negs	r1, r1
    bbe0:	0c2d      	lsrs	r5, r5, #16
    bbe2:	4252      	negs	r2, r2
    bbe4:	430f      	orrs	r7, r1
    bbe6:	425b      	negs	r3, r3
    bbe8:	4313      	orrs	r3, r2
    bbea:	197f      	adds	r7, r7, r5
    bbec:	18ff      	adds	r7, r7, r3
    bbee:	465b      	mov	r3, fp
    bbf0:	193c      	adds	r4, r7, r4
    bbf2:	0ddb      	lsrs	r3, r3, #23
    bbf4:	9a05      	ldr	r2, [sp, #20]
    bbf6:	0264      	lsls	r4, r4, #9
    bbf8:	431c      	orrs	r4, r3
    bbfa:	0243      	lsls	r3, r0, #9
    bbfc:	4313      	orrs	r3, r2
    bbfe:	1e5d      	subs	r5, r3, #1
    bc00:	41ab      	sbcs	r3, r5
    bc02:	465a      	mov	r2, fp
    bc04:	0dc0      	lsrs	r0, r0, #23
    bc06:	4303      	orrs	r3, r0
    bc08:	0252      	lsls	r2, r2, #9
    bc0a:	4313      	orrs	r3, r2
    bc0c:	01e2      	lsls	r2, r4, #7
    bc0e:	d556      	bpl.n	bcbe <__aeabi_dmul+0x426>
    bc10:	2001      	movs	r0, #1
    bc12:	085a      	lsrs	r2, r3, #1
    bc14:	4003      	ands	r3, r0
    bc16:	4313      	orrs	r3, r2
    bc18:	07e2      	lsls	r2, r4, #31
    bc1a:	4313      	orrs	r3, r2
    bc1c:	0864      	lsrs	r4, r4, #1
    bc1e:	485a      	ldr	r0, [pc, #360]	; (bd88 <__aeabi_dmul+0x4f0>)
    bc20:	4460      	add	r0, ip
    bc22:	2800      	cmp	r0, #0
    bc24:	dd4d      	ble.n	bcc2 <__aeabi_dmul+0x42a>
    bc26:	075a      	lsls	r2, r3, #29
    bc28:	d009      	beq.n	bc3e <__aeabi_dmul+0x3a6>
    bc2a:	220f      	movs	r2, #15
    bc2c:	401a      	ands	r2, r3
    bc2e:	2a04      	cmp	r2, #4
    bc30:	d005      	beq.n	bc3e <__aeabi_dmul+0x3a6>
    bc32:	1d1a      	adds	r2, r3, #4
    bc34:	429a      	cmp	r2, r3
    bc36:	419b      	sbcs	r3, r3
    bc38:	425b      	negs	r3, r3
    bc3a:	18e4      	adds	r4, r4, r3
    bc3c:	0013      	movs	r3, r2
    bc3e:	01e2      	lsls	r2, r4, #7
    bc40:	d504      	bpl.n	bc4c <__aeabi_dmul+0x3b4>
    bc42:	2080      	movs	r0, #128	; 0x80
    bc44:	4a51      	ldr	r2, [pc, #324]	; (bd8c <__aeabi_dmul+0x4f4>)
    bc46:	00c0      	lsls	r0, r0, #3
    bc48:	4014      	ands	r4, r2
    bc4a:	4460      	add	r0, ip
    bc4c:	4a50      	ldr	r2, [pc, #320]	; (bd90 <__aeabi_dmul+0x4f8>)
    bc4e:	4290      	cmp	r0, r2
    bc50:	dd00      	ble.n	bc54 <__aeabi_dmul+0x3bc>
    bc52:	e6e3      	b.n	ba1c <__aeabi_dmul+0x184>
    bc54:	2501      	movs	r5, #1
    bc56:	08db      	lsrs	r3, r3, #3
    bc58:	0762      	lsls	r2, r4, #29
    bc5a:	431a      	orrs	r2, r3
    bc5c:	0264      	lsls	r4, r4, #9
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	4691      	mov	r9, r2
    bc62:	0b22      	lsrs	r2, r4, #12
    bc64:	0544      	lsls	r4, r0, #21
    bc66:	0d64      	lsrs	r4, r4, #21
    bc68:	401d      	ands	r5, r3
    bc6a:	e67c      	b.n	b966 <__aeabi_dmul+0xce>
    bc6c:	2280      	movs	r2, #128	; 0x80
    bc6e:	4659      	mov	r1, fp
    bc70:	0312      	lsls	r2, r2, #12
    bc72:	4211      	tst	r1, r2
    bc74:	d008      	beq.n	bc88 <__aeabi_dmul+0x3f0>
    bc76:	4214      	tst	r4, r2
    bc78:	d106      	bne.n	bc88 <__aeabi_dmul+0x3f0>
    bc7a:	4322      	orrs	r2, r4
    bc7c:	0312      	lsls	r2, r2, #12
    bc7e:	0b12      	lsrs	r2, r2, #12
    bc80:	4645      	mov	r5, r8
    bc82:	4699      	mov	r9, r3
    bc84:	4c43      	ldr	r4, [pc, #268]	; (bd94 <__aeabi_dmul+0x4fc>)
    bc86:	e66e      	b.n	b966 <__aeabi_dmul+0xce>
    bc88:	465b      	mov	r3, fp
    bc8a:	431a      	orrs	r2, r3
    bc8c:	0312      	lsls	r2, r2, #12
    bc8e:	0b12      	lsrs	r2, r2, #12
    bc90:	4c40      	ldr	r4, [pc, #256]	; (bd94 <__aeabi_dmul+0x4fc>)
    bc92:	e668      	b.n	b966 <__aeabi_dmul+0xce>
    bc94:	0003      	movs	r3, r0
    bc96:	4654      	mov	r4, sl
    bc98:	3b28      	subs	r3, #40	; 0x28
    bc9a:	409c      	lsls	r4, r3
    bc9c:	2300      	movs	r3, #0
    bc9e:	e6b9      	b.n	ba14 <__aeabi_dmul+0x17c>
    bca0:	f000 fc8c 	bl	c5bc <__clzsi2>
    bca4:	3020      	adds	r0, #32
    bca6:	e6a6      	b.n	b9f6 <__aeabi_dmul+0x15e>
    bca8:	0003      	movs	r3, r0
    bcaa:	3b28      	subs	r3, #40	; 0x28
    bcac:	409f      	lsls	r7, r3
    bcae:	2300      	movs	r3, #0
    bcb0:	46bb      	mov	fp, r7
    bcb2:	4699      	mov	r9, r3
    bcb4:	e68a      	b.n	b9cc <__aeabi_dmul+0x134>
    bcb6:	f000 fc81 	bl	c5bc <__clzsi2>
    bcba:	3020      	adds	r0, #32
    bcbc:	e674      	b.n	b9a8 <__aeabi_dmul+0x110>
    bcbe:	46b4      	mov	ip, r6
    bcc0:	e7ad      	b.n	bc1e <__aeabi_dmul+0x386>
    bcc2:	2501      	movs	r5, #1
    bcc4:	1a2a      	subs	r2, r5, r0
    bcc6:	2a38      	cmp	r2, #56	; 0x38
    bcc8:	dd06      	ble.n	bcd8 <__aeabi_dmul+0x440>
    bcca:	9b01      	ldr	r3, [sp, #4]
    bccc:	2400      	movs	r4, #0
    bcce:	401d      	ands	r5, r3
    bcd0:	2300      	movs	r3, #0
    bcd2:	2200      	movs	r2, #0
    bcd4:	4699      	mov	r9, r3
    bcd6:	e646      	b.n	b966 <__aeabi_dmul+0xce>
    bcd8:	2a1f      	cmp	r2, #31
    bcda:	dc21      	bgt.n	bd20 <__aeabi_dmul+0x488>
    bcdc:	2520      	movs	r5, #32
    bcde:	0020      	movs	r0, r4
    bce0:	1aad      	subs	r5, r5, r2
    bce2:	001e      	movs	r6, r3
    bce4:	40ab      	lsls	r3, r5
    bce6:	40a8      	lsls	r0, r5
    bce8:	40d6      	lsrs	r6, r2
    bcea:	1e5d      	subs	r5, r3, #1
    bcec:	41ab      	sbcs	r3, r5
    bcee:	4330      	orrs	r0, r6
    bcf0:	4318      	orrs	r0, r3
    bcf2:	40d4      	lsrs	r4, r2
    bcf4:	0743      	lsls	r3, r0, #29
    bcf6:	d009      	beq.n	bd0c <__aeabi_dmul+0x474>
    bcf8:	230f      	movs	r3, #15
    bcfa:	4003      	ands	r3, r0
    bcfc:	2b04      	cmp	r3, #4
    bcfe:	d005      	beq.n	bd0c <__aeabi_dmul+0x474>
    bd00:	0003      	movs	r3, r0
    bd02:	1d18      	adds	r0, r3, #4
    bd04:	4298      	cmp	r0, r3
    bd06:	419b      	sbcs	r3, r3
    bd08:	425b      	negs	r3, r3
    bd0a:	18e4      	adds	r4, r4, r3
    bd0c:	0223      	lsls	r3, r4, #8
    bd0e:	d521      	bpl.n	bd54 <__aeabi_dmul+0x4bc>
    bd10:	2501      	movs	r5, #1
    bd12:	9b01      	ldr	r3, [sp, #4]
    bd14:	2401      	movs	r4, #1
    bd16:	401d      	ands	r5, r3
    bd18:	2300      	movs	r3, #0
    bd1a:	2200      	movs	r2, #0
    bd1c:	4699      	mov	r9, r3
    bd1e:	e622      	b.n	b966 <__aeabi_dmul+0xce>
    bd20:	251f      	movs	r5, #31
    bd22:	0021      	movs	r1, r4
    bd24:	426d      	negs	r5, r5
    bd26:	1a28      	subs	r0, r5, r0
    bd28:	40c1      	lsrs	r1, r0
    bd2a:	0008      	movs	r0, r1
    bd2c:	2a20      	cmp	r2, #32
    bd2e:	d01d      	beq.n	bd6c <__aeabi_dmul+0x4d4>
    bd30:	355f      	adds	r5, #95	; 0x5f
    bd32:	1aaa      	subs	r2, r5, r2
    bd34:	4094      	lsls	r4, r2
    bd36:	4323      	orrs	r3, r4
    bd38:	1e5c      	subs	r4, r3, #1
    bd3a:	41a3      	sbcs	r3, r4
    bd3c:	2507      	movs	r5, #7
    bd3e:	4303      	orrs	r3, r0
    bd40:	401d      	ands	r5, r3
    bd42:	2200      	movs	r2, #0
    bd44:	2d00      	cmp	r5, #0
    bd46:	d009      	beq.n	bd5c <__aeabi_dmul+0x4c4>
    bd48:	220f      	movs	r2, #15
    bd4a:	2400      	movs	r4, #0
    bd4c:	401a      	ands	r2, r3
    bd4e:	0018      	movs	r0, r3
    bd50:	2a04      	cmp	r2, #4
    bd52:	d1d6      	bne.n	bd02 <__aeabi_dmul+0x46a>
    bd54:	0003      	movs	r3, r0
    bd56:	0765      	lsls	r5, r4, #29
    bd58:	0264      	lsls	r4, r4, #9
    bd5a:	0b22      	lsrs	r2, r4, #12
    bd5c:	08db      	lsrs	r3, r3, #3
    bd5e:	432b      	orrs	r3, r5
    bd60:	2501      	movs	r5, #1
    bd62:	4699      	mov	r9, r3
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	2400      	movs	r4, #0
    bd68:	401d      	ands	r5, r3
    bd6a:	e5fc      	b.n	b966 <__aeabi_dmul+0xce>
    bd6c:	2400      	movs	r4, #0
    bd6e:	e7e2      	b.n	bd36 <__aeabi_dmul+0x49e>
    bd70:	2280      	movs	r2, #128	; 0x80
    bd72:	2501      	movs	r5, #1
    bd74:	0312      	lsls	r2, r2, #12
    bd76:	4322      	orrs	r2, r4
    bd78:	9901      	ldr	r1, [sp, #4]
    bd7a:	0312      	lsls	r2, r2, #12
    bd7c:	0b12      	lsrs	r2, r2, #12
    bd7e:	400d      	ands	r5, r1
    bd80:	4699      	mov	r9, r3
    bd82:	4c04      	ldr	r4, [pc, #16]	; (bd94 <__aeabi_dmul+0x4fc>)
    bd84:	e5ef      	b.n	b966 <__aeabi_dmul+0xce>
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	000003ff 	.word	0x000003ff
    bd8c:	feffffff 	.word	0xfeffffff
    bd90:	000007fe 	.word	0x000007fe
    bd94:	000007ff 	.word	0x000007ff

0000bd98 <__aeabi_dsub>:
    bd98:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd9a:	4646      	mov	r6, r8
    bd9c:	46d6      	mov	lr, sl
    bd9e:	464f      	mov	r7, r9
    bda0:	030c      	lsls	r4, r1, #12
    bda2:	b5c0      	push	{r6, r7, lr}
    bda4:	0fcd      	lsrs	r5, r1, #31
    bda6:	004e      	lsls	r6, r1, #1
    bda8:	0a61      	lsrs	r1, r4, #9
    bdaa:	0f44      	lsrs	r4, r0, #29
    bdac:	430c      	orrs	r4, r1
    bdae:	00c1      	lsls	r1, r0, #3
    bdb0:	0058      	lsls	r0, r3, #1
    bdb2:	0d40      	lsrs	r0, r0, #21
    bdb4:	4684      	mov	ip, r0
    bdb6:	468a      	mov	sl, r1
    bdb8:	000f      	movs	r7, r1
    bdba:	0319      	lsls	r1, r3, #12
    bdbc:	0f50      	lsrs	r0, r2, #29
    bdbe:	0a49      	lsrs	r1, r1, #9
    bdc0:	4301      	orrs	r1, r0
    bdc2:	48c6      	ldr	r0, [pc, #792]	; (c0dc <__aeabi_dsub+0x344>)
    bdc4:	0d76      	lsrs	r6, r6, #21
    bdc6:	46a8      	mov	r8, r5
    bdc8:	0fdb      	lsrs	r3, r3, #31
    bdca:	00d2      	lsls	r2, r2, #3
    bdcc:	4584      	cmp	ip, r0
    bdce:	d100      	bne.n	bdd2 <__aeabi_dsub+0x3a>
    bdd0:	e0d8      	b.n	bf84 <__aeabi_dsub+0x1ec>
    bdd2:	2001      	movs	r0, #1
    bdd4:	4043      	eors	r3, r0
    bdd6:	42ab      	cmp	r3, r5
    bdd8:	d100      	bne.n	bddc <__aeabi_dsub+0x44>
    bdda:	e0a6      	b.n	bf2a <__aeabi_dsub+0x192>
    bddc:	4660      	mov	r0, ip
    bdde:	1a35      	subs	r5, r6, r0
    bde0:	2d00      	cmp	r5, #0
    bde2:	dc00      	bgt.n	bde6 <__aeabi_dsub+0x4e>
    bde4:	e105      	b.n	bff2 <__aeabi_dsub+0x25a>
    bde6:	2800      	cmp	r0, #0
    bde8:	d110      	bne.n	be0c <__aeabi_dsub+0x74>
    bdea:	000b      	movs	r3, r1
    bdec:	4313      	orrs	r3, r2
    bdee:	d100      	bne.n	bdf2 <__aeabi_dsub+0x5a>
    bdf0:	e0d7      	b.n	bfa2 <__aeabi_dsub+0x20a>
    bdf2:	1e6b      	subs	r3, r5, #1
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d000      	beq.n	bdfa <__aeabi_dsub+0x62>
    bdf8:	e14b      	b.n	c092 <__aeabi_dsub+0x2fa>
    bdfa:	4653      	mov	r3, sl
    bdfc:	1a9f      	subs	r7, r3, r2
    bdfe:	45ba      	cmp	sl, r7
    be00:	4180      	sbcs	r0, r0
    be02:	1a64      	subs	r4, r4, r1
    be04:	4240      	negs	r0, r0
    be06:	1a24      	subs	r4, r4, r0
    be08:	2601      	movs	r6, #1
    be0a:	e01e      	b.n	be4a <__aeabi_dsub+0xb2>
    be0c:	4bb3      	ldr	r3, [pc, #716]	; (c0dc <__aeabi_dsub+0x344>)
    be0e:	429e      	cmp	r6, r3
    be10:	d048      	beq.n	bea4 <__aeabi_dsub+0x10c>
    be12:	2380      	movs	r3, #128	; 0x80
    be14:	041b      	lsls	r3, r3, #16
    be16:	4319      	orrs	r1, r3
    be18:	2d38      	cmp	r5, #56	; 0x38
    be1a:	dd00      	ble.n	be1e <__aeabi_dsub+0x86>
    be1c:	e119      	b.n	c052 <__aeabi_dsub+0x2ba>
    be1e:	2d1f      	cmp	r5, #31
    be20:	dd00      	ble.n	be24 <__aeabi_dsub+0x8c>
    be22:	e14c      	b.n	c0be <__aeabi_dsub+0x326>
    be24:	2320      	movs	r3, #32
    be26:	000f      	movs	r7, r1
    be28:	1b5b      	subs	r3, r3, r5
    be2a:	0010      	movs	r0, r2
    be2c:	409a      	lsls	r2, r3
    be2e:	409f      	lsls	r7, r3
    be30:	40e8      	lsrs	r0, r5
    be32:	1e53      	subs	r3, r2, #1
    be34:	419a      	sbcs	r2, r3
    be36:	40e9      	lsrs	r1, r5
    be38:	4307      	orrs	r7, r0
    be3a:	4317      	orrs	r7, r2
    be3c:	4653      	mov	r3, sl
    be3e:	1bdf      	subs	r7, r3, r7
    be40:	1a61      	subs	r1, r4, r1
    be42:	45ba      	cmp	sl, r7
    be44:	41a4      	sbcs	r4, r4
    be46:	4264      	negs	r4, r4
    be48:	1b0c      	subs	r4, r1, r4
    be4a:	0223      	lsls	r3, r4, #8
    be4c:	d400      	bmi.n	be50 <__aeabi_dsub+0xb8>
    be4e:	e0c5      	b.n	bfdc <__aeabi_dsub+0x244>
    be50:	0264      	lsls	r4, r4, #9
    be52:	0a65      	lsrs	r5, r4, #9
    be54:	2d00      	cmp	r5, #0
    be56:	d100      	bne.n	be5a <__aeabi_dsub+0xc2>
    be58:	e0f6      	b.n	c048 <__aeabi_dsub+0x2b0>
    be5a:	0028      	movs	r0, r5
    be5c:	f000 fbae 	bl	c5bc <__clzsi2>
    be60:	0003      	movs	r3, r0
    be62:	3b08      	subs	r3, #8
    be64:	2b1f      	cmp	r3, #31
    be66:	dd00      	ble.n	be6a <__aeabi_dsub+0xd2>
    be68:	e0e9      	b.n	c03e <__aeabi_dsub+0x2a6>
    be6a:	2220      	movs	r2, #32
    be6c:	003c      	movs	r4, r7
    be6e:	1ad2      	subs	r2, r2, r3
    be70:	409d      	lsls	r5, r3
    be72:	40d4      	lsrs	r4, r2
    be74:	409f      	lsls	r7, r3
    be76:	4325      	orrs	r5, r4
    be78:	429e      	cmp	r6, r3
    be7a:	dd00      	ble.n	be7e <__aeabi_dsub+0xe6>
    be7c:	e0db      	b.n	c036 <__aeabi_dsub+0x29e>
    be7e:	1b9e      	subs	r6, r3, r6
    be80:	1c73      	adds	r3, r6, #1
    be82:	2b1f      	cmp	r3, #31
    be84:	dd00      	ble.n	be88 <__aeabi_dsub+0xf0>
    be86:	e10a      	b.n	c09e <__aeabi_dsub+0x306>
    be88:	2220      	movs	r2, #32
    be8a:	0038      	movs	r0, r7
    be8c:	1ad2      	subs	r2, r2, r3
    be8e:	0029      	movs	r1, r5
    be90:	4097      	lsls	r7, r2
    be92:	002c      	movs	r4, r5
    be94:	4091      	lsls	r1, r2
    be96:	40d8      	lsrs	r0, r3
    be98:	1e7a      	subs	r2, r7, #1
    be9a:	4197      	sbcs	r7, r2
    be9c:	40dc      	lsrs	r4, r3
    be9e:	2600      	movs	r6, #0
    bea0:	4301      	orrs	r1, r0
    bea2:	430f      	orrs	r7, r1
    bea4:	077b      	lsls	r3, r7, #29
    bea6:	d009      	beq.n	bebc <__aeabi_dsub+0x124>
    bea8:	230f      	movs	r3, #15
    beaa:	403b      	ands	r3, r7
    beac:	2b04      	cmp	r3, #4
    beae:	d005      	beq.n	bebc <__aeabi_dsub+0x124>
    beb0:	1d3b      	adds	r3, r7, #4
    beb2:	42bb      	cmp	r3, r7
    beb4:	41bf      	sbcs	r7, r7
    beb6:	427f      	negs	r7, r7
    beb8:	19e4      	adds	r4, r4, r7
    beba:	001f      	movs	r7, r3
    bebc:	0223      	lsls	r3, r4, #8
    bebe:	d525      	bpl.n	bf0c <__aeabi_dsub+0x174>
    bec0:	4b86      	ldr	r3, [pc, #536]	; (c0dc <__aeabi_dsub+0x344>)
    bec2:	3601      	adds	r6, #1
    bec4:	429e      	cmp	r6, r3
    bec6:	d100      	bne.n	beca <__aeabi_dsub+0x132>
    bec8:	e0af      	b.n	c02a <__aeabi_dsub+0x292>
    beca:	4b85      	ldr	r3, [pc, #532]	; (c0e0 <__aeabi_dsub+0x348>)
    becc:	2501      	movs	r5, #1
    bece:	401c      	ands	r4, r3
    bed0:	4643      	mov	r3, r8
    bed2:	0762      	lsls	r2, r4, #29
    bed4:	08ff      	lsrs	r7, r7, #3
    bed6:	0264      	lsls	r4, r4, #9
    bed8:	0576      	lsls	r6, r6, #21
    beda:	4317      	orrs	r7, r2
    bedc:	0b24      	lsrs	r4, r4, #12
    bede:	0d76      	lsrs	r6, r6, #21
    bee0:	401d      	ands	r5, r3
    bee2:	2100      	movs	r1, #0
    bee4:	0324      	lsls	r4, r4, #12
    bee6:	0b23      	lsrs	r3, r4, #12
    bee8:	0d0c      	lsrs	r4, r1, #20
    beea:	4a7e      	ldr	r2, [pc, #504]	; (c0e4 <__aeabi_dsub+0x34c>)
    beec:	0524      	lsls	r4, r4, #20
    beee:	431c      	orrs	r4, r3
    bef0:	4014      	ands	r4, r2
    bef2:	0533      	lsls	r3, r6, #20
    bef4:	4323      	orrs	r3, r4
    bef6:	005b      	lsls	r3, r3, #1
    bef8:	07ed      	lsls	r5, r5, #31
    befa:	085b      	lsrs	r3, r3, #1
    befc:	432b      	orrs	r3, r5
    befe:	0038      	movs	r0, r7
    bf00:	0019      	movs	r1, r3
    bf02:	bc1c      	pop	{r2, r3, r4}
    bf04:	4690      	mov	r8, r2
    bf06:	4699      	mov	r9, r3
    bf08:	46a2      	mov	sl, r4
    bf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf0c:	2501      	movs	r5, #1
    bf0e:	4643      	mov	r3, r8
    bf10:	0762      	lsls	r2, r4, #29
    bf12:	08ff      	lsrs	r7, r7, #3
    bf14:	4317      	orrs	r7, r2
    bf16:	08e4      	lsrs	r4, r4, #3
    bf18:	401d      	ands	r5, r3
    bf1a:	4b70      	ldr	r3, [pc, #448]	; (c0dc <__aeabi_dsub+0x344>)
    bf1c:	429e      	cmp	r6, r3
    bf1e:	d036      	beq.n	bf8e <__aeabi_dsub+0x1f6>
    bf20:	0324      	lsls	r4, r4, #12
    bf22:	0576      	lsls	r6, r6, #21
    bf24:	0b24      	lsrs	r4, r4, #12
    bf26:	0d76      	lsrs	r6, r6, #21
    bf28:	e7db      	b.n	bee2 <__aeabi_dsub+0x14a>
    bf2a:	4663      	mov	r3, ip
    bf2c:	1af3      	subs	r3, r6, r3
    bf2e:	2b00      	cmp	r3, #0
    bf30:	dc00      	bgt.n	bf34 <__aeabi_dsub+0x19c>
    bf32:	e094      	b.n	c05e <__aeabi_dsub+0x2c6>
    bf34:	4660      	mov	r0, ip
    bf36:	2800      	cmp	r0, #0
    bf38:	d035      	beq.n	bfa6 <__aeabi_dsub+0x20e>
    bf3a:	4868      	ldr	r0, [pc, #416]	; (c0dc <__aeabi_dsub+0x344>)
    bf3c:	4286      	cmp	r6, r0
    bf3e:	d0b1      	beq.n	bea4 <__aeabi_dsub+0x10c>
    bf40:	2780      	movs	r7, #128	; 0x80
    bf42:	043f      	lsls	r7, r7, #16
    bf44:	4339      	orrs	r1, r7
    bf46:	2b38      	cmp	r3, #56	; 0x38
    bf48:	dc00      	bgt.n	bf4c <__aeabi_dsub+0x1b4>
    bf4a:	e0fd      	b.n	c148 <__aeabi_dsub+0x3b0>
    bf4c:	430a      	orrs	r2, r1
    bf4e:	0017      	movs	r7, r2
    bf50:	2100      	movs	r1, #0
    bf52:	1e7a      	subs	r2, r7, #1
    bf54:	4197      	sbcs	r7, r2
    bf56:	4457      	add	r7, sl
    bf58:	4557      	cmp	r7, sl
    bf5a:	4180      	sbcs	r0, r0
    bf5c:	1909      	adds	r1, r1, r4
    bf5e:	4244      	negs	r4, r0
    bf60:	190c      	adds	r4, r1, r4
    bf62:	0223      	lsls	r3, r4, #8
    bf64:	d53a      	bpl.n	bfdc <__aeabi_dsub+0x244>
    bf66:	4b5d      	ldr	r3, [pc, #372]	; (c0dc <__aeabi_dsub+0x344>)
    bf68:	3601      	adds	r6, #1
    bf6a:	429e      	cmp	r6, r3
    bf6c:	d100      	bne.n	bf70 <__aeabi_dsub+0x1d8>
    bf6e:	e14b      	b.n	c208 <__aeabi_dsub+0x470>
    bf70:	2201      	movs	r2, #1
    bf72:	4b5b      	ldr	r3, [pc, #364]	; (c0e0 <__aeabi_dsub+0x348>)
    bf74:	401c      	ands	r4, r3
    bf76:	087b      	lsrs	r3, r7, #1
    bf78:	4017      	ands	r7, r2
    bf7a:	431f      	orrs	r7, r3
    bf7c:	07e2      	lsls	r2, r4, #31
    bf7e:	4317      	orrs	r7, r2
    bf80:	0864      	lsrs	r4, r4, #1
    bf82:	e78f      	b.n	bea4 <__aeabi_dsub+0x10c>
    bf84:	0008      	movs	r0, r1
    bf86:	4310      	orrs	r0, r2
    bf88:	d000      	beq.n	bf8c <__aeabi_dsub+0x1f4>
    bf8a:	e724      	b.n	bdd6 <__aeabi_dsub+0x3e>
    bf8c:	e721      	b.n	bdd2 <__aeabi_dsub+0x3a>
    bf8e:	0023      	movs	r3, r4
    bf90:	433b      	orrs	r3, r7
    bf92:	d100      	bne.n	bf96 <__aeabi_dsub+0x1fe>
    bf94:	e1b9      	b.n	c30a <__aeabi_dsub+0x572>
    bf96:	2280      	movs	r2, #128	; 0x80
    bf98:	0312      	lsls	r2, r2, #12
    bf9a:	4314      	orrs	r4, r2
    bf9c:	0324      	lsls	r4, r4, #12
    bf9e:	0b24      	lsrs	r4, r4, #12
    bfa0:	e79f      	b.n	bee2 <__aeabi_dsub+0x14a>
    bfa2:	002e      	movs	r6, r5
    bfa4:	e77e      	b.n	bea4 <__aeabi_dsub+0x10c>
    bfa6:	0008      	movs	r0, r1
    bfa8:	4310      	orrs	r0, r2
    bfaa:	d100      	bne.n	bfae <__aeabi_dsub+0x216>
    bfac:	e0ca      	b.n	c144 <__aeabi_dsub+0x3ac>
    bfae:	1e58      	subs	r0, r3, #1
    bfb0:	4684      	mov	ip, r0
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d000      	beq.n	bfb8 <__aeabi_dsub+0x220>
    bfb6:	e0e7      	b.n	c188 <__aeabi_dsub+0x3f0>
    bfb8:	4452      	add	r2, sl
    bfba:	4552      	cmp	r2, sl
    bfbc:	4180      	sbcs	r0, r0
    bfbe:	1864      	adds	r4, r4, r1
    bfc0:	4240      	negs	r0, r0
    bfc2:	1824      	adds	r4, r4, r0
    bfc4:	0017      	movs	r7, r2
    bfc6:	2601      	movs	r6, #1
    bfc8:	0223      	lsls	r3, r4, #8
    bfca:	d507      	bpl.n	bfdc <__aeabi_dsub+0x244>
    bfcc:	2602      	movs	r6, #2
    bfce:	e7cf      	b.n	bf70 <__aeabi_dsub+0x1d8>
    bfd0:	4664      	mov	r4, ip
    bfd2:	432c      	orrs	r4, r5
    bfd4:	d100      	bne.n	bfd8 <__aeabi_dsub+0x240>
    bfd6:	e1b3      	b.n	c340 <__aeabi_dsub+0x5a8>
    bfd8:	002c      	movs	r4, r5
    bfda:	4667      	mov	r7, ip
    bfdc:	077b      	lsls	r3, r7, #29
    bfde:	d000      	beq.n	bfe2 <__aeabi_dsub+0x24a>
    bfe0:	e762      	b.n	bea8 <__aeabi_dsub+0x110>
    bfe2:	0763      	lsls	r3, r4, #29
    bfe4:	08ff      	lsrs	r7, r7, #3
    bfe6:	431f      	orrs	r7, r3
    bfe8:	2501      	movs	r5, #1
    bfea:	4643      	mov	r3, r8
    bfec:	08e4      	lsrs	r4, r4, #3
    bfee:	401d      	ands	r5, r3
    bff0:	e793      	b.n	bf1a <__aeabi_dsub+0x182>
    bff2:	2d00      	cmp	r5, #0
    bff4:	d178      	bne.n	c0e8 <__aeabi_dsub+0x350>
    bff6:	1c75      	adds	r5, r6, #1
    bff8:	056d      	lsls	r5, r5, #21
    bffa:	0d6d      	lsrs	r5, r5, #21
    bffc:	2d01      	cmp	r5, #1
    bffe:	dc00      	bgt.n	c002 <__aeabi_dsub+0x26a>
    c000:	e0f2      	b.n	c1e8 <__aeabi_dsub+0x450>
    c002:	4650      	mov	r0, sl
    c004:	1a80      	subs	r0, r0, r2
    c006:	4582      	cmp	sl, r0
    c008:	41bf      	sbcs	r7, r7
    c00a:	1a65      	subs	r5, r4, r1
    c00c:	427f      	negs	r7, r7
    c00e:	1bed      	subs	r5, r5, r7
    c010:	4684      	mov	ip, r0
    c012:	0228      	lsls	r0, r5, #8
    c014:	d400      	bmi.n	c018 <__aeabi_dsub+0x280>
    c016:	e08c      	b.n	c132 <__aeabi_dsub+0x39a>
    c018:	4650      	mov	r0, sl
    c01a:	1a17      	subs	r7, r2, r0
    c01c:	42ba      	cmp	r2, r7
    c01e:	4192      	sbcs	r2, r2
    c020:	1b0c      	subs	r4, r1, r4
    c022:	4255      	negs	r5, r2
    c024:	1b65      	subs	r5, r4, r5
    c026:	4698      	mov	r8, r3
    c028:	e714      	b.n	be54 <__aeabi_dsub+0xbc>
    c02a:	2501      	movs	r5, #1
    c02c:	4643      	mov	r3, r8
    c02e:	2400      	movs	r4, #0
    c030:	401d      	ands	r5, r3
    c032:	2700      	movs	r7, #0
    c034:	e755      	b.n	bee2 <__aeabi_dsub+0x14a>
    c036:	4c2a      	ldr	r4, [pc, #168]	; (c0e0 <__aeabi_dsub+0x348>)
    c038:	1af6      	subs	r6, r6, r3
    c03a:	402c      	ands	r4, r5
    c03c:	e732      	b.n	bea4 <__aeabi_dsub+0x10c>
    c03e:	003d      	movs	r5, r7
    c040:	3828      	subs	r0, #40	; 0x28
    c042:	4085      	lsls	r5, r0
    c044:	2700      	movs	r7, #0
    c046:	e717      	b.n	be78 <__aeabi_dsub+0xe0>
    c048:	0038      	movs	r0, r7
    c04a:	f000 fab7 	bl	c5bc <__clzsi2>
    c04e:	3020      	adds	r0, #32
    c050:	e706      	b.n	be60 <__aeabi_dsub+0xc8>
    c052:	430a      	orrs	r2, r1
    c054:	0017      	movs	r7, r2
    c056:	2100      	movs	r1, #0
    c058:	1e7a      	subs	r2, r7, #1
    c05a:	4197      	sbcs	r7, r2
    c05c:	e6ee      	b.n	be3c <__aeabi_dsub+0xa4>
    c05e:	2b00      	cmp	r3, #0
    c060:	d000      	beq.n	c064 <__aeabi_dsub+0x2cc>
    c062:	e0e5      	b.n	c230 <__aeabi_dsub+0x498>
    c064:	1c73      	adds	r3, r6, #1
    c066:	469c      	mov	ip, r3
    c068:	055b      	lsls	r3, r3, #21
    c06a:	0d5b      	lsrs	r3, r3, #21
    c06c:	2b01      	cmp	r3, #1
    c06e:	dc00      	bgt.n	c072 <__aeabi_dsub+0x2da>
    c070:	e09f      	b.n	c1b2 <__aeabi_dsub+0x41a>
    c072:	4b1a      	ldr	r3, [pc, #104]	; (c0dc <__aeabi_dsub+0x344>)
    c074:	459c      	cmp	ip, r3
    c076:	d100      	bne.n	c07a <__aeabi_dsub+0x2e2>
    c078:	e0c5      	b.n	c206 <__aeabi_dsub+0x46e>
    c07a:	4452      	add	r2, sl
    c07c:	4552      	cmp	r2, sl
    c07e:	4180      	sbcs	r0, r0
    c080:	1864      	adds	r4, r4, r1
    c082:	4240      	negs	r0, r0
    c084:	1824      	adds	r4, r4, r0
    c086:	07e7      	lsls	r7, r4, #31
    c088:	0852      	lsrs	r2, r2, #1
    c08a:	4317      	orrs	r7, r2
    c08c:	0864      	lsrs	r4, r4, #1
    c08e:	4666      	mov	r6, ip
    c090:	e708      	b.n	bea4 <__aeabi_dsub+0x10c>
    c092:	4812      	ldr	r0, [pc, #72]	; (c0dc <__aeabi_dsub+0x344>)
    c094:	4285      	cmp	r5, r0
    c096:	d100      	bne.n	c09a <__aeabi_dsub+0x302>
    c098:	e085      	b.n	c1a6 <__aeabi_dsub+0x40e>
    c09a:	001d      	movs	r5, r3
    c09c:	e6bc      	b.n	be18 <__aeabi_dsub+0x80>
    c09e:	0029      	movs	r1, r5
    c0a0:	3e1f      	subs	r6, #31
    c0a2:	40f1      	lsrs	r1, r6
    c0a4:	2b20      	cmp	r3, #32
    c0a6:	d100      	bne.n	c0aa <__aeabi_dsub+0x312>
    c0a8:	e07f      	b.n	c1aa <__aeabi_dsub+0x412>
    c0aa:	2240      	movs	r2, #64	; 0x40
    c0ac:	1ad3      	subs	r3, r2, r3
    c0ae:	409d      	lsls	r5, r3
    c0b0:	432f      	orrs	r7, r5
    c0b2:	1e7d      	subs	r5, r7, #1
    c0b4:	41af      	sbcs	r7, r5
    c0b6:	2400      	movs	r4, #0
    c0b8:	430f      	orrs	r7, r1
    c0ba:	2600      	movs	r6, #0
    c0bc:	e78e      	b.n	bfdc <__aeabi_dsub+0x244>
    c0be:	002b      	movs	r3, r5
    c0c0:	000f      	movs	r7, r1
    c0c2:	3b20      	subs	r3, #32
    c0c4:	40df      	lsrs	r7, r3
    c0c6:	2d20      	cmp	r5, #32
    c0c8:	d071      	beq.n	c1ae <__aeabi_dsub+0x416>
    c0ca:	2340      	movs	r3, #64	; 0x40
    c0cc:	1b5d      	subs	r5, r3, r5
    c0ce:	40a9      	lsls	r1, r5
    c0d0:	430a      	orrs	r2, r1
    c0d2:	1e51      	subs	r1, r2, #1
    c0d4:	418a      	sbcs	r2, r1
    c0d6:	2100      	movs	r1, #0
    c0d8:	4317      	orrs	r7, r2
    c0da:	e6af      	b.n	be3c <__aeabi_dsub+0xa4>
    c0dc:	000007ff 	.word	0x000007ff
    c0e0:	ff7fffff 	.word	0xff7fffff
    c0e4:	800fffff 	.word	0x800fffff
    c0e8:	2e00      	cmp	r6, #0
    c0ea:	d03e      	beq.n	c16a <__aeabi_dsub+0x3d2>
    c0ec:	4eb3      	ldr	r6, [pc, #716]	; (c3bc <__aeabi_dsub+0x624>)
    c0ee:	45b4      	cmp	ip, r6
    c0f0:	d045      	beq.n	c17e <__aeabi_dsub+0x3e6>
    c0f2:	2680      	movs	r6, #128	; 0x80
    c0f4:	0436      	lsls	r6, r6, #16
    c0f6:	426d      	negs	r5, r5
    c0f8:	4334      	orrs	r4, r6
    c0fa:	2d38      	cmp	r5, #56	; 0x38
    c0fc:	dd00      	ble.n	c100 <__aeabi_dsub+0x368>
    c0fe:	e0a8      	b.n	c252 <__aeabi_dsub+0x4ba>
    c100:	2d1f      	cmp	r5, #31
    c102:	dd00      	ble.n	c106 <__aeabi_dsub+0x36e>
    c104:	e11f      	b.n	c346 <__aeabi_dsub+0x5ae>
    c106:	2620      	movs	r6, #32
    c108:	0027      	movs	r7, r4
    c10a:	4650      	mov	r0, sl
    c10c:	1b76      	subs	r6, r6, r5
    c10e:	40b7      	lsls	r7, r6
    c110:	40e8      	lsrs	r0, r5
    c112:	4307      	orrs	r7, r0
    c114:	4650      	mov	r0, sl
    c116:	40b0      	lsls	r0, r6
    c118:	1e46      	subs	r6, r0, #1
    c11a:	41b0      	sbcs	r0, r6
    c11c:	40ec      	lsrs	r4, r5
    c11e:	4338      	orrs	r0, r7
    c120:	1a17      	subs	r7, r2, r0
    c122:	42ba      	cmp	r2, r7
    c124:	4192      	sbcs	r2, r2
    c126:	1b0c      	subs	r4, r1, r4
    c128:	4252      	negs	r2, r2
    c12a:	1aa4      	subs	r4, r4, r2
    c12c:	4666      	mov	r6, ip
    c12e:	4698      	mov	r8, r3
    c130:	e68b      	b.n	be4a <__aeabi_dsub+0xb2>
    c132:	4664      	mov	r4, ip
    c134:	4667      	mov	r7, ip
    c136:	432c      	orrs	r4, r5
    c138:	d000      	beq.n	c13c <__aeabi_dsub+0x3a4>
    c13a:	e68b      	b.n	be54 <__aeabi_dsub+0xbc>
    c13c:	2500      	movs	r5, #0
    c13e:	2600      	movs	r6, #0
    c140:	2700      	movs	r7, #0
    c142:	e6ea      	b.n	bf1a <__aeabi_dsub+0x182>
    c144:	001e      	movs	r6, r3
    c146:	e6ad      	b.n	bea4 <__aeabi_dsub+0x10c>
    c148:	2b1f      	cmp	r3, #31
    c14a:	dc60      	bgt.n	c20e <__aeabi_dsub+0x476>
    c14c:	2720      	movs	r7, #32
    c14e:	1af8      	subs	r0, r7, r3
    c150:	000f      	movs	r7, r1
    c152:	4684      	mov	ip, r0
    c154:	4087      	lsls	r7, r0
    c156:	0010      	movs	r0, r2
    c158:	40d8      	lsrs	r0, r3
    c15a:	4307      	orrs	r7, r0
    c15c:	4660      	mov	r0, ip
    c15e:	4082      	lsls	r2, r0
    c160:	1e50      	subs	r0, r2, #1
    c162:	4182      	sbcs	r2, r0
    c164:	40d9      	lsrs	r1, r3
    c166:	4317      	orrs	r7, r2
    c168:	e6f5      	b.n	bf56 <__aeabi_dsub+0x1be>
    c16a:	0026      	movs	r6, r4
    c16c:	4650      	mov	r0, sl
    c16e:	4306      	orrs	r6, r0
    c170:	d005      	beq.n	c17e <__aeabi_dsub+0x3e6>
    c172:	43ed      	mvns	r5, r5
    c174:	2d00      	cmp	r5, #0
    c176:	d0d3      	beq.n	c120 <__aeabi_dsub+0x388>
    c178:	4e90      	ldr	r6, [pc, #576]	; (c3bc <__aeabi_dsub+0x624>)
    c17a:	45b4      	cmp	ip, r6
    c17c:	d1bd      	bne.n	c0fa <__aeabi_dsub+0x362>
    c17e:	000c      	movs	r4, r1
    c180:	0017      	movs	r7, r2
    c182:	4666      	mov	r6, ip
    c184:	4698      	mov	r8, r3
    c186:	e68d      	b.n	bea4 <__aeabi_dsub+0x10c>
    c188:	488c      	ldr	r0, [pc, #560]	; (c3bc <__aeabi_dsub+0x624>)
    c18a:	4283      	cmp	r3, r0
    c18c:	d00b      	beq.n	c1a6 <__aeabi_dsub+0x40e>
    c18e:	4663      	mov	r3, ip
    c190:	e6d9      	b.n	bf46 <__aeabi_dsub+0x1ae>
    c192:	2d00      	cmp	r5, #0
    c194:	d000      	beq.n	c198 <__aeabi_dsub+0x400>
    c196:	e096      	b.n	c2c6 <__aeabi_dsub+0x52e>
    c198:	0008      	movs	r0, r1
    c19a:	4310      	orrs	r0, r2
    c19c:	d100      	bne.n	c1a0 <__aeabi_dsub+0x408>
    c19e:	e0e2      	b.n	c366 <__aeabi_dsub+0x5ce>
    c1a0:	000c      	movs	r4, r1
    c1a2:	0017      	movs	r7, r2
    c1a4:	4698      	mov	r8, r3
    c1a6:	4e85      	ldr	r6, [pc, #532]	; (c3bc <__aeabi_dsub+0x624>)
    c1a8:	e67c      	b.n	bea4 <__aeabi_dsub+0x10c>
    c1aa:	2500      	movs	r5, #0
    c1ac:	e780      	b.n	c0b0 <__aeabi_dsub+0x318>
    c1ae:	2100      	movs	r1, #0
    c1b0:	e78e      	b.n	c0d0 <__aeabi_dsub+0x338>
    c1b2:	0023      	movs	r3, r4
    c1b4:	4650      	mov	r0, sl
    c1b6:	4303      	orrs	r3, r0
    c1b8:	2e00      	cmp	r6, #0
    c1ba:	d000      	beq.n	c1be <__aeabi_dsub+0x426>
    c1bc:	e0a8      	b.n	c310 <__aeabi_dsub+0x578>
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d100      	bne.n	c1c4 <__aeabi_dsub+0x42c>
    c1c2:	e0de      	b.n	c382 <__aeabi_dsub+0x5ea>
    c1c4:	000b      	movs	r3, r1
    c1c6:	4313      	orrs	r3, r2
    c1c8:	d100      	bne.n	c1cc <__aeabi_dsub+0x434>
    c1ca:	e66b      	b.n	bea4 <__aeabi_dsub+0x10c>
    c1cc:	4452      	add	r2, sl
    c1ce:	4552      	cmp	r2, sl
    c1d0:	4180      	sbcs	r0, r0
    c1d2:	1864      	adds	r4, r4, r1
    c1d4:	4240      	negs	r0, r0
    c1d6:	1824      	adds	r4, r4, r0
    c1d8:	0017      	movs	r7, r2
    c1da:	0223      	lsls	r3, r4, #8
    c1dc:	d400      	bmi.n	c1e0 <__aeabi_dsub+0x448>
    c1de:	e6fd      	b.n	bfdc <__aeabi_dsub+0x244>
    c1e0:	4b77      	ldr	r3, [pc, #476]	; (c3c0 <__aeabi_dsub+0x628>)
    c1e2:	4666      	mov	r6, ip
    c1e4:	401c      	ands	r4, r3
    c1e6:	e65d      	b.n	bea4 <__aeabi_dsub+0x10c>
    c1e8:	0025      	movs	r5, r4
    c1ea:	4650      	mov	r0, sl
    c1ec:	4305      	orrs	r5, r0
    c1ee:	2e00      	cmp	r6, #0
    c1f0:	d1cf      	bne.n	c192 <__aeabi_dsub+0x3fa>
    c1f2:	2d00      	cmp	r5, #0
    c1f4:	d14f      	bne.n	c296 <__aeabi_dsub+0x4fe>
    c1f6:	000c      	movs	r4, r1
    c1f8:	4314      	orrs	r4, r2
    c1fa:	d100      	bne.n	c1fe <__aeabi_dsub+0x466>
    c1fc:	e0a0      	b.n	c340 <__aeabi_dsub+0x5a8>
    c1fe:	000c      	movs	r4, r1
    c200:	0017      	movs	r7, r2
    c202:	4698      	mov	r8, r3
    c204:	e64e      	b.n	bea4 <__aeabi_dsub+0x10c>
    c206:	4666      	mov	r6, ip
    c208:	2400      	movs	r4, #0
    c20a:	2700      	movs	r7, #0
    c20c:	e685      	b.n	bf1a <__aeabi_dsub+0x182>
    c20e:	001f      	movs	r7, r3
    c210:	0008      	movs	r0, r1
    c212:	3f20      	subs	r7, #32
    c214:	40f8      	lsrs	r0, r7
    c216:	0007      	movs	r7, r0
    c218:	2b20      	cmp	r3, #32
    c21a:	d100      	bne.n	c21e <__aeabi_dsub+0x486>
    c21c:	e08e      	b.n	c33c <__aeabi_dsub+0x5a4>
    c21e:	2040      	movs	r0, #64	; 0x40
    c220:	1ac3      	subs	r3, r0, r3
    c222:	4099      	lsls	r1, r3
    c224:	430a      	orrs	r2, r1
    c226:	1e51      	subs	r1, r2, #1
    c228:	418a      	sbcs	r2, r1
    c22a:	2100      	movs	r1, #0
    c22c:	4317      	orrs	r7, r2
    c22e:	e692      	b.n	bf56 <__aeabi_dsub+0x1be>
    c230:	2e00      	cmp	r6, #0
    c232:	d114      	bne.n	c25e <__aeabi_dsub+0x4c6>
    c234:	0026      	movs	r6, r4
    c236:	4650      	mov	r0, sl
    c238:	4306      	orrs	r6, r0
    c23a:	d062      	beq.n	c302 <__aeabi_dsub+0x56a>
    c23c:	43db      	mvns	r3, r3
    c23e:	2b00      	cmp	r3, #0
    c240:	d15c      	bne.n	c2fc <__aeabi_dsub+0x564>
    c242:	1887      	adds	r7, r0, r2
    c244:	4297      	cmp	r7, r2
    c246:	4192      	sbcs	r2, r2
    c248:	1864      	adds	r4, r4, r1
    c24a:	4252      	negs	r2, r2
    c24c:	18a4      	adds	r4, r4, r2
    c24e:	4666      	mov	r6, ip
    c250:	e687      	b.n	bf62 <__aeabi_dsub+0x1ca>
    c252:	4650      	mov	r0, sl
    c254:	4320      	orrs	r0, r4
    c256:	1e44      	subs	r4, r0, #1
    c258:	41a0      	sbcs	r0, r4
    c25a:	2400      	movs	r4, #0
    c25c:	e760      	b.n	c120 <__aeabi_dsub+0x388>
    c25e:	4e57      	ldr	r6, [pc, #348]	; (c3bc <__aeabi_dsub+0x624>)
    c260:	45b4      	cmp	ip, r6
    c262:	d04e      	beq.n	c302 <__aeabi_dsub+0x56a>
    c264:	2680      	movs	r6, #128	; 0x80
    c266:	0436      	lsls	r6, r6, #16
    c268:	425b      	negs	r3, r3
    c26a:	4334      	orrs	r4, r6
    c26c:	2b38      	cmp	r3, #56	; 0x38
    c26e:	dd00      	ble.n	c272 <__aeabi_dsub+0x4da>
    c270:	e07f      	b.n	c372 <__aeabi_dsub+0x5da>
    c272:	2b1f      	cmp	r3, #31
    c274:	dd00      	ble.n	c278 <__aeabi_dsub+0x4e0>
    c276:	e08b      	b.n	c390 <__aeabi_dsub+0x5f8>
    c278:	2620      	movs	r6, #32
    c27a:	0027      	movs	r7, r4
    c27c:	4650      	mov	r0, sl
    c27e:	1af6      	subs	r6, r6, r3
    c280:	40b7      	lsls	r7, r6
    c282:	40d8      	lsrs	r0, r3
    c284:	4307      	orrs	r7, r0
    c286:	4650      	mov	r0, sl
    c288:	40b0      	lsls	r0, r6
    c28a:	1e46      	subs	r6, r0, #1
    c28c:	41b0      	sbcs	r0, r6
    c28e:	4307      	orrs	r7, r0
    c290:	40dc      	lsrs	r4, r3
    c292:	18bf      	adds	r7, r7, r2
    c294:	e7d6      	b.n	c244 <__aeabi_dsub+0x4ac>
    c296:	000d      	movs	r5, r1
    c298:	4315      	orrs	r5, r2
    c29a:	d100      	bne.n	c29e <__aeabi_dsub+0x506>
    c29c:	e602      	b.n	bea4 <__aeabi_dsub+0x10c>
    c29e:	4650      	mov	r0, sl
    c2a0:	1a80      	subs	r0, r0, r2
    c2a2:	4582      	cmp	sl, r0
    c2a4:	41bf      	sbcs	r7, r7
    c2a6:	1a65      	subs	r5, r4, r1
    c2a8:	427f      	negs	r7, r7
    c2aa:	1bed      	subs	r5, r5, r7
    c2ac:	4684      	mov	ip, r0
    c2ae:	0228      	lsls	r0, r5, #8
    c2b0:	d400      	bmi.n	c2b4 <__aeabi_dsub+0x51c>
    c2b2:	e68d      	b.n	bfd0 <__aeabi_dsub+0x238>
    c2b4:	4650      	mov	r0, sl
    c2b6:	1a17      	subs	r7, r2, r0
    c2b8:	42ba      	cmp	r2, r7
    c2ba:	4192      	sbcs	r2, r2
    c2bc:	1b0c      	subs	r4, r1, r4
    c2be:	4252      	negs	r2, r2
    c2c0:	1aa4      	subs	r4, r4, r2
    c2c2:	4698      	mov	r8, r3
    c2c4:	e5ee      	b.n	bea4 <__aeabi_dsub+0x10c>
    c2c6:	000d      	movs	r5, r1
    c2c8:	4315      	orrs	r5, r2
    c2ca:	d100      	bne.n	c2ce <__aeabi_dsub+0x536>
    c2cc:	e76b      	b.n	c1a6 <__aeabi_dsub+0x40e>
    c2ce:	4650      	mov	r0, sl
    c2d0:	0767      	lsls	r7, r4, #29
    c2d2:	08c0      	lsrs	r0, r0, #3
    c2d4:	4307      	orrs	r7, r0
    c2d6:	2080      	movs	r0, #128	; 0x80
    c2d8:	08e4      	lsrs	r4, r4, #3
    c2da:	0300      	lsls	r0, r0, #12
    c2dc:	4204      	tst	r4, r0
    c2de:	d007      	beq.n	c2f0 <__aeabi_dsub+0x558>
    c2e0:	08cd      	lsrs	r5, r1, #3
    c2e2:	4205      	tst	r5, r0
    c2e4:	d104      	bne.n	c2f0 <__aeabi_dsub+0x558>
    c2e6:	002c      	movs	r4, r5
    c2e8:	4698      	mov	r8, r3
    c2ea:	08d7      	lsrs	r7, r2, #3
    c2ec:	0749      	lsls	r1, r1, #29
    c2ee:	430f      	orrs	r7, r1
    c2f0:	0f7b      	lsrs	r3, r7, #29
    c2f2:	00e4      	lsls	r4, r4, #3
    c2f4:	431c      	orrs	r4, r3
    c2f6:	00ff      	lsls	r7, r7, #3
    c2f8:	4e30      	ldr	r6, [pc, #192]	; (c3bc <__aeabi_dsub+0x624>)
    c2fa:	e5d3      	b.n	bea4 <__aeabi_dsub+0x10c>
    c2fc:	4e2f      	ldr	r6, [pc, #188]	; (c3bc <__aeabi_dsub+0x624>)
    c2fe:	45b4      	cmp	ip, r6
    c300:	d1b4      	bne.n	c26c <__aeabi_dsub+0x4d4>
    c302:	000c      	movs	r4, r1
    c304:	0017      	movs	r7, r2
    c306:	4666      	mov	r6, ip
    c308:	e5cc      	b.n	bea4 <__aeabi_dsub+0x10c>
    c30a:	2700      	movs	r7, #0
    c30c:	2400      	movs	r4, #0
    c30e:	e5e8      	b.n	bee2 <__aeabi_dsub+0x14a>
    c310:	2b00      	cmp	r3, #0
    c312:	d039      	beq.n	c388 <__aeabi_dsub+0x5f0>
    c314:	000b      	movs	r3, r1
    c316:	4313      	orrs	r3, r2
    c318:	d100      	bne.n	c31c <__aeabi_dsub+0x584>
    c31a:	e744      	b.n	c1a6 <__aeabi_dsub+0x40e>
    c31c:	08c0      	lsrs	r0, r0, #3
    c31e:	0767      	lsls	r7, r4, #29
    c320:	4307      	orrs	r7, r0
    c322:	2080      	movs	r0, #128	; 0x80
    c324:	08e4      	lsrs	r4, r4, #3
    c326:	0300      	lsls	r0, r0, #12
    c328:	4204      	tst	r4, r0
    c32a:	d0e1      	beq.n	c2f0 <__aeabi_dsub+0x558>
    c32c:	08cb      	lsrs	r3, r1, #3
    c32e:	4203      	tst	r3, r0
    c330:	d1de      	bne.n	c2f0 <__aeabi_dsub+0x558>
    c332:	08d7      	lsrs	r7, r2, #3
    c334:	0749      	lsls	r1, r1, #29
    c336:	430f      	orrs	r7, r1
    c338:	001c      	movs	r4, r3
    c33a:	e7d9      	b.n	c2f0 <__aeabi_dsub+0x558>
    c33c:	2100      	movs	r1, #0
    c33e:	e771      	b.n	c224 <__aeabi_dsub+0x48c>
    c340:	2500      	movs	r5, #0
    c342:	2700      	movs	r7, #0
    c344:	e5e9      	b.n	bf1a <__aeabi_dsub+0x182>
    c346:	002e      	movs	r6, r5
    c348:	0027      	movs	r7, r4
    c34a:	3e20      	subs	r6, #32
    c34c:	40f7      	lsrs	r7, r6
    c34e:	2d20      	cmp	r5, #32
    c350:	d02f      	beq.n	c3b2 <__aeabi_dsub+0x61a>
    c352:	2640      	movs	r6, #64	; 0x40
    c354:	1b75      	subs	r5, r6, r5
    c356:	40ac      	lsls	r4, r5
    c358:	4650      	mov	r0, sl
    c35a:	4320      	orrs	r0, r4
    c35c:	1e44      	subs	r4, r0, #1
    c35e:	41a0      	sbcs	r0, r4
    c360:	2400      	movs	r4, #0
    c362:	4338      	orrs	r0, r7
    c364:	e6dc      	b.n	c120 <__aeabi_dsub+0x388>
    c366:	2480      	movs	r4, #128	; 0x80
    c368:	2500      	movs	r5, #0
    c36a:	0324      	lsls	r4, r4, #12
    c36c:	4e13      	ldr	r6, [pc, #76]	; (c3bc <__aeabi_dsub+0x624>)
    c36e:	2700      	movs	r7, #0
    c370:	e5d3      	b.n	bf1a <__aeabi_dsub+0x182>
    c372:	4650      	mov	r0, sl
    c374:	4320      	orrs	r0, r4
    c376:	0007      	movs	r7, r0
    c378:	1e78      	subs	r0, r7, #1
    c37a:	4187      	sbcs	r7, r0
    c37c:	2400      	movs	r4, #0
    c37e:	18bf      	adds	r7, r7, r2
    c380:	e760      	b.n	c244 <__aeabi_dsub+0x4ac>
    c382:	000c      	movs	r4, r1
    c384:	0017      	movs	r7, r2
    c386:	e58d      	b.n	bea4 <__aeabi_dsub+0x10c>
    c388:	000c      	movs	r4, r1
    c38a:	0017      	movs	r7, r2
    c38c:	4e0b      	ldr	r6, [pc, #44]	; (c3bc <__aeabi_dsub+0x624>)
    c38e:	e589      	b.n	bea4 <__aeabi_dsub+0x10c>
    c390:	001e      	movs	r6, r3
    c392:	0027      	movs	r7, r4
    c394:	3e20      	subs	r6, #32
    c396:	40f7      	lsrs	r7, r6
    c398:	2b20      	cmp	r3, #32
    c39a:	d00c      	beq.n	c3b6 <__aeabi_dsub+0x61e>
    c39c:	2640      	movs	r6, #64	; 0x40
    c39e:	1af3      	subs	r3, r6, r3
    c3a0:	409c      	lsls	r4, r3
    c3a2:	4650      	mov	r0, sl
    c3a4:	4320      	orrs	r0, r4
    c3a6:	1e44      	subs	r4, r0, #1
    c3a8:	41a0      	sbcs	r0, r4
    c3aa:	4307      	orrs	r7, r0
    c3ac:	2400      	movs	r4, #0
    c3ae:	18bf      	adds	r7, r7, r2
    c3b0:	e748      	b.n	c244 <__aeabi_dsub+0x4ac>
    c3b2:	2400      	movs	r4, #0
    c3b4:	e7d0      	b.n	c358 <__aeabi_dsub+0x5c0>
    c3b6:	2400      	movs	r4, #0
    c3b8:	e7f3      	b.n	c3a2 <__aeabi_dsub+0x60a>
    c3ba:	46c0      	nop			; (mov r8, r8)
    c3bc:	000007ff 	.word	0x000007ff
    c3c0:	ff7fffff 	.word	0xff7fffff

0000c3c4 <__aeabi_d2iz>:
    c3c4:	b530      	push	{r4, r5, lr}
    c3c6:	4d13      	ldr	r5, [pc, #76]	; (c414 <__aeabi_d2iz+0x50>)
    c3c8:	030a      	lsls	r2, r1, #12
    c3ca:	004b      	lsls	r3, r1, #1
    c3cc:	0b12      	lsrs	r2, r2, #12
    c3ce:	0d5b      	lsrs	r3, r3, #21
    c3d0:	0fc9      	lsrs	r1, r1, #31
    c3d2:	2400      	movs	r4, #0
    c3d4:	42ab      	cmp	r3, r5
    c3d6:	dd10      	ble.n	c3fa <__aeabi_d2iz+0x36>
    c3d8:	4c0f      	ldr	r4, [pc, #60]	; (c418 <__aeabi_d2iz+0x54>)
    c3da:	42a3      	cmp	r3, r4
    c3dc:	dc0f      	bgt.n	c3fe <__aeabi_d2iz+0x3a>
    c3de:	2480      	movs	r4, #128	; 0x80
    c3e0:	4d0e      	ldr	r5, [pc, #56]	; (c41c <__aeabi_d2iz+0x58>)
    c3e2:	0364      	lsls	r4, r4, #13
    c3e4:	4322      	orrs	r2, r4
    c3e6:	1aed      	subs	r5, r5, r3
    c3e8:	2d1f      	cmp	r5, #31
    c3ea:	dd0b      	ble.n	c404 <__aeabi_d2iz+0x40>
    c3ec:	480c      	ldr	r0, [pc, #48]	; (c420 <__aeabi_d2iz+0x5c>)
    c3ee:	1ac3      	subs	r3, r0, r3
    c3f0:	40da      	lsrs	r2, r3
    c3f2:	4254      	negs	r4, r2
    c3f4:	2900      	cmp	r1, #0
    c3f6:	d100      	bne.n	c3fa <__aeabi_d2iz+0x36>
    c3f8:	0014      	movs	r4, r2
    c3fa:	0020      	movs	r0, r4
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	4b09      	ldr	r3, [pc, #36]	; (c424 <__aeabi_d2iz+0x60>)
    c400:	18cc      	adds	r4, r1, r3
    c402:	e7fa      	b.n	c3fa <__aeabi_d2iz+0x36>
    c404:	4c08      	ldr	r4, [pc, #32]	; (c428 <__aeabi_d2iz+0x64>)
    c406:	40e8      	lsrs	r0, r5
    c408:	46a4      	mov	ip, r4
    c40a:	4463      	add	r3, ip
    c40c:	409a      	lsls	r2, r3
    c40e:	4302      	orrs	r2, r0
    c410:	e7ef      	b.n	c3f2 <__aeabi_d2iz+0x2e>
    c412:	46c0      	nop			; (mov r8, r8)
    c414:	000003fe 	.word	0x000003fe
    c418:	0000041d 	.word	0x0000041d
    c41c:	00000433 	.word	0x00000433
    c420:	00000413 	.word	0x00000413
    c424:	7fffffff 	.word	0x7fffffff
    c428:	fffffbed 	.word	0xfffffbed

0000c42c <__aeabi_ui2d>:
    c42c:	b510      	push	{r4, lr}
    c42e:	1e04      	subs	r4, r0, #0
    c430:	d028      	beq.n	c484 <__aeabi_ui2d+0x58>
    c432:	f000 f8c3 	bl	c5bc <__clzsi2>
    c436:	4b15      	ldr	r3, [pc, #84]	; (c48c <__aeabi_ui2d+0x60>)
    c438:	4a15      	ldr	r2, [pc, #84]	; (c490 <__aeabi_ui2d+0x64>)
    c43a:	1a1b      	subs	r3, r3, r0
    c43c:	1ad2      	subs	r2, r2, r3
    c43e:	2a1f      	cmp	r2, #31
    c440:	dd15      	ble.n	c46e <__aeabi_ui2d+0x42>
    c442:	4a14      	ldr	r2, [pc, #80]	; (c494 <__aeabi_ui2d+0x68>)
    c444:	1ad2      	subs	r2, r2, r3
    c446:	4094      	lsls	r4, r2
    c448:	2200      	movs	r2, #0
    c44a:	0324      	lsls	r4, r4, #12
    c44c:	055b      	lsls	r3, r3, #21
    c44e:	0b24      	lsrs	r4, r4, #12
    c450:	0d5b      	lsrs	r3, r3, #21
    c452:	2100      	movs	r1, #0
    c454:	0010      	movs	r0, r2
    c456:	0324      	lsls	r4, r4, #12
    c458:	0d0a      	lsrs	r2, r1, #20
    c45a:	0b24      	lsrs	r4, r4, #12
    c45c:	0512      	lsls	r2, r2, #20
    c45e:	4322      	orrs	r2, r4
    c460:	4c0d      	ldr	r4, [pc, #52]	; (c498 <__aeabi_ui2d+0x6c>)
    c462:	051b      	lsls	r3, r3, #20
    c464:	4022      	ands	r2, r4
    c466:	4313      	orrs	r3, r2
    c468:	005b      	lsls	r3, r3, #1
    c46a:	0859      	lsrs	r1, r3, #1
    c46c:	bd10      	pop	{r4, pc}
    c46e:	0021      	movs	r1, r4
    c470:	4091      	lsls	r1, r2
    c472:	000a      	movs	r2, r1
    c474:	210b      	movs	r1, #11
    c476:	1a08      	subs	r0, r1, r0
    c478:	40c4      	lsrs	r4, r0
    c47a:	055b      	lsls	r3, r3, #21
    c47c:	0324      	lsls	r4, r4, #12
    c47e:	0b24      	lsrs	r4, r4, #12
    c480:	0d5b      	lsrs	r3, r3, #21
    c482:	e7e6      	b.n	c452 <__aeabi_ui2d+0x26>
    c484:	2300      	movs	r3, #0
    c486:	2400      	movs	r4, #0
    c488:	2200      	movs	r2, #0
    c48a:	e7e2      	b.n	c452 <__aeabi_ui2d+0x26>
    c48c:	0000041e 	.word	0x0000041e
    c490:	00000433 	.word	0x00000433
    c494:	00000413 	.word	0x00000413
    c498:	800fffff 	.word	0x800fffff

0000c49c <__aeabi_f2d>:
    c49c:	0041      	lsls	r1, r0, #1
    c49e:	0e09      	lsrs	r1, r1, #24
    c4a0:	1c4b      	adds	r3, r1, #1
    c4a2:	b570      	push	{r4, r5, r6, lr}
    c4a4:	b2db      	uxtb	r3, r3
    c4a6:	0246      	lsls	r6, r0, #9
    c4a8:	0a75      	lsrs	r5, r6, #9
    c4aa:	0fc4      	lsrs	r4, r0, #31
    c4ac:	2b01      	cmp	r3, #1
    c4ae:	dd14      	ble.n	c4da <__aeabi_f2d+0x3e>
    c4b0:	23e0      	movs	r3, #224	; 0xe0
    c4b2:	009b      	lsls	r3, r3, #2
    c4b4:	076d      	lsls	r5, r5, #29
    c4b6:	0b36      	lsrs	r6, r6, #12
    c4b8:	18cb      	adds	r3, r1, r3
    c4ba:	2100      	movs	r1, #0
    c4bc:	0d0a      	lsrs	r2, r1, #20
    c4be:	0028      	movs	r0, r5
    c4c0:	0512      	lsls	r2, r2, #20
    c4c2:	4d1c      	ldr	r5, [pc, #112]	; (c534 <__aeabi_f2d+0x98>)
    c4c4:	4332      	orrs	r2, r6
    c4c6:	055b      	lsls	r3, r3, #21
    c4c8:	402a      	ands	r2, r5
    c4ca:	085b      	lsrs	r3, r3, #1
    c4cc:	4313      	orrs	r3, r2
    c4ce:	005b      	lsls	r3, r3, #1
    c4d0:	07e4      	lsls	r4, r4, #31
    c4d2:	085b      	lsrs	r3, r3, #1
    c4d4:	4323      	orrs	r3, r4
    c4d6:	0019      	movs	r1, r3
    c4d8:	bd70      	pop	{r4, r5, r6, pc}
    c4da:	2900      	cmp	r1, #0
    c4dc:	d114      	bne.n	c508 <__aeabi_f2d+0x6c>
    c4de:	2d00      	cmp	r5, #0
    c4e0:	d01e      	beq.n	c520 <__aeabi_f2d+0x84>
    c4e2:	0028      	movs	r0, r5
    c4e4:	f000 f86a 	bl	c5bc <__clzsi2>
    c4e8:	280a      	cmp	r0, #10
    c4ea:	dc1c      	bgt.n	c526 <__aeabi_f2d+0x8a>
    c4ec:	230b      	movs	r3, #11
    c4ee:	002a      	movs	r2, r5
    c4f0:	1a1b      	subs	r3, r3, r0
    c4f2:	40da      	lsrs	r2, r3
    c4f4:	0003      	movs	r3, r0
    c4f6:	3315      	adds	r3, #21
    c4f8:	409d      	lsls	r5, r3
    c4fa:	4b0f      	ldr	r3, [pc, #60]	; (c538 <__aeabi_f2d+0x9c>)
    c4fc:	0312      	lsls	r2, r2, #12
    c4fe:	1a1b      	subs	r3, r3, r0
    c500:	055b      	lsls	r3, r3, #21
    c502:	0b16      	lsrs	r6, r2, #12
    c504:	0d5b      	lsrs	r3, r3, #21
    c506:	e7d8      	b.n	c4ba <__aeabi_f2d+0x1e>
    c508:	2d00      	cmp	r5, #0
    c50a:	d006      	beq.n	c51a <__aeabi_f2d+0x7e>
    c50c:	0b32      	lsrs	r2, r6, #12
    c50e:	2680      	movs	r6, #128	; 0x80
    c510:	0336      	lsls	r6, r6, #12
    c512:	076d      	lsls	r5, r5, #29
    c514:	4316      	orrs	r6, r2
    c516:	4b09      	ldr	r3, [pc, #36]	; (c53c <__aeabi_f2d+0xa0>)
    c518:	e7cf      	b.n	c4ba <__aeabi_f2d+0x1e>
    c51a:	4b08      	ldr	r3, [pc, #32]	; (c53c <__aeabi_f2d+0xa0>)
    c51c:	2600      	movs	r6, #0
    c51e:	e7cc      	b.n	c4ba <__aeabi_f2d+0x1e>
    c520:	2300      	movs	r3, #0
    c522:	2600      	movs	r6, #0
    c524:	e7c9      	b.n	c4ba <__aeabi_f2d+0x1e>
    c526:	0003      	movs	r3, r0
    c528:	002a      	movs	r2, r5
    c52a:	3b0b      	subs	r3, #11
    c52c:	409a      	lsls	r2, r3
    c52e:	2500      	movs	r5, #0
    c530:	e7e3      	b.n	c4fa <__aeabi_f2d+0x5e>
    c532:	46c0      	nop			; (mov r8, r8)
    c534:	800fffff 	.word	0x800fffff
    c538:	00000389 	.word	0x00000389
    c53c:	000007ff 	.word	0x000007ff

0000c540 <__aeabi_cdrcmple>:
    c540:	4684      	mov	ip, r0
    c542:	1c10      	adds	r0, r2, #0
    c544:	4662      	mov	r2, ip
    c546:	468c      	mov	ip, r1
    c548:	1c19      	adds	r1, r3, #0
    c54a:	4663      	mov	r3, ip
    c54c:	e000      	b.n	c550 <__aeabi_cdcmpeq>
    c54e:	46c0      	nop			; (mov r8, r8)

0000c550 <__aeabi_cdcmpeq>:
    c550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c552:	f000 f8ef 	bl	c734 <__ledf2>
    c556:	2800      	cmp	r0, #0
    c558:	d401      	bmi.n	c55e <__aeabi_cdcmpeq+0xe>
    c55a:	2100      	movs	r1, #0
    c55c:	42c8      	cmn	r0, r1
    c55e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c560 <__aeabi_dcmpeq>:
    c560:	b510      	push	{r4, lr}
    c562:	f000 f849 	bl	c5f8 <__eqdf2>
    c566:	4240      	negs	r0, r0
    c568:	3001      	adds	r0, #1
    c56a:	bd10      	pop	{r4, pc}

0000c56c <__aeabi_dcmplt>:
    c56c:	b510      	push	{r4, lr}
    c56e:	f000 f8e1 	bl	c734 <__ledf2>
    c572:	2800      	cmp	r0, #0
    c574:	db01      	blt.n	c57a <__aeabi_dcmplt+0xe>
    c576:	2000      	movs	r0, #0
    c578:	bd10      	pop	{r4, pc}
    c57a:	2001      	movs	r0, #1
    c57c:	bd10      	pop	{r4, pc}
    c57e:	46c0      	nop			; (mov r8, r8)

0000c580 <__aeabi_dcmple>:
    c580:	b510      	push	{r4, lr}
    c582:	f000 f8d7 	bl	c734 <__ledf2>
    c586:	2800      	cmp	r0, #0
    c588:	dd01      	ble.n	c58e <__aeabi_dcmple+0xe>
    c58a:	2000      	movs	r0, #0
    c58c:	bd10      	pop	{r4, pc}
    c58e:	2001      	movs	r0, #1
    c590:	bd10      	pop	{r4, pc}
    c592:	46c0      	nop			; (mov r8, r8)

0000c594 <__aeabi_dcmpgt>:
    c594:	b510      	push	{r4, lr}
    c596:	f000 f869 	bl	c66c <__gedf2>
    c59a:	2800      	cmp	r0, #0
    c59c:	dc01      	bgt.n	c5a2 <__aeabi_dcmpgt+0xe>
    c59e:	2000      	movs	r0, #0
    c5a0:	bd10      	pop	{r4, pc}
    c5a2:	2001      	movs	r0, #1
    c5a4:	bd10      	pop	{r4, pc}
    c5a6:	46c0      	nop			; (mov r8, r8)

0000c5a8 <__aeabi_dcmpge>:
    c5a8:	b510      	push	{r4, lr}
    c5aa:	f000 f85f 	bl	c66c <__gedf2>
    c5ae:	2800      	cmp	r0, #0
    c5b0:	da01      	bge.n	c5b6 <__aeabi_dcmpge+0xe>
    c5b2:	2000      	movs	r0, #0
    c5b4:	bd10      	pop	{r4, pc}
    c5b6:	2001      	movs	r0, #1
    c5b8:	bd10      	pop	{r4, pc}
    c5ba:	46c0      	nop			; (mov r8, r8)

0000c5bc <__clzsi2>:
    c5bc:	211c      	movs	r1, #28
    c5be:	2301      	movs	r3, #1
    c5c0:	041b      	lsls	r3, r3, #16
    c5c2:	4298      	cmp	r0, r3
    c5c4:	d301      	bcc.n	c5ca <__clzsi2+0xe>
    c5c6:	0c00      	lsrs	r0, r0, #16
    c5c8:	3910      	subs	r1, #16
    c5ca:	0a1b      	lsrs	r3, r3, #8
    c5cc:	4298      	cmp	r0, r3
    c5ce:	d301      	bcc.n	c5d4 <__clzsi2+0x18>
    c5d0:	0a00      	lsrs	r0, r0, #8
    c5d2:	3908      	subs	r1, #8
    c5d4:	091b      	lsrs	r3, r3, #4
    c5d6:	4298      	cmp	r0, r3
    c5d8:	d301      	bcc.n	c5de <__clzsi2+0x22>
    c5da:	0900      	lsrs	r0, r0, #4
    c5dc:	3904      	subs	r1, #4
    c5de:	a202      	add	r2, pc, #8	; (adr r2, c5e8 <__clzsi2+0x2c>)
    c5e0:	5c10      	ldrb	r0, [r2, r0]
    c5e2:	1840      	adds	r0, r0, r1
    c5e4:	4770      	bx	lr
    c5e6:	46c0      	nop			; (mov r8, r8)
    c5e8:	02020304 	.word	0x02020304
    c5ec:	01010101 	.word	0x01010101
	...

0000c5f8 <__eqdf2>:
    c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5fa:	464f      	mov	r7, r9
    c5fc:	4646      	mov	r6, r8
    c5fe:	46d6      	mov	lr, sl
    c600:	005c      	lsls	r4, r3, #1
    c602:	b5c0      	push	{r6, r7, lr}
    c604:	031f      	lsls	r7, r3, #12
    c606:	0fdb      	lsrs	r3, r3, #31
    c608:	469a      	mov	sl, r3
    c60a:	4b17      	ldr	r3, [pc, #92]	; (c668 <__eqdf2+0x70>)
    c60c:	030e      	lsls	r6, r1, #12
    c60e:	004d      	lsls	r5, r1, #1
    c610:	4684      	mov	ip, r0
    c612:	4680      	mov	r8, r0
    c614:	0b36      	lsrs	r6, r6, #12
    c616:	0d6d      	lsrs	r5, r5, #21
    c618:	0fc9      	lsrs	r1, r1, #31
    c61a:	4691      	mov	r9, r2
    c61c:	0b3f      	lsrs	r7, r7, #12
    c61e:	0d64      	lsrs	r4, r4, #21
    c620:	2001      	movs	r0, #1
    c622:	429d      	cmp	r5, r3
    c624:	d008      	beq.n	c638 <__eqdf2+0x40>
    c626:	429c      	cmp	r4, r3
    c628:	d001      	beq.n	c62e <__eqdf2+0x36>
    c62a:	42a5      	cmp	r5, r4
    c62c:	d00b      	beq.n	c646 <__eqdf2+0x4e>
    c62e:	bc1c      	pop	{r2, r3, r4}
    c630:	4690      	mov	r8, r2
    c632:	4699      	mov	r9, r3
    c634:	46a2      	mov	sl, r4
    c636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c638:	4663      	mov	r3, ip
    c63a:	4333      	orrs	r3, r6
    c63c:	d1f7      	bne.n	c62e <__eqdf2+0x36>
    c63e:	42ac      	cmp	r4, r5
    c640:	d1f5      	bne.n	c62e <__eqdf2+0x36>
    c642:	433a      	orrs	r2, r7
    c644:	d1f3      	bne.n	c62e <__eqdf2+0x36>
    c646:	2001      	movs	r0, #1
    c648:	42be      	cmp	r6, r7
    c64a:	d1f0      	bne.n	c62e <__eqdf2+0x36>
    c64c:	45c8      	cmp	r8, r9
    c64e:	d1ee      	bne.n	c62e <__eqdf2+0x36>
    c650:	4551      	cmp	r1, sl
    c652:	d007      	beq.n	c664 <__eqdf2+0x6c>
    c654:	2d00      	cmp	r5, #0
    c656:	d1ea      	bne.n	c62e <__eqdf2+0x36>
    c658:	4663      	mov	r3, ip
    c65a:	431e      	orrs	r6, r3
    c65c:	0030      	movs	r0, r6
    c65e:	1e46      	subs	r6, r0, #1
    c660:	41b0      	sbcs	r0, r6
    c662:	e7e4      	b.n	c62e <__eqdf2+0x36>
    c664:	2000      	movs	r0, #0
    c666:	e7e2      	b.n	c62e <__eqdf2+0x36>
    c668:	000007ff 	.word	0x000007ff

0000c66c <__gedf2>:
    c66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c66e:	4645      	mov	r5, r8
    c670:	46de      	mov	lr, fp
    c672:	4657      	mov	r7, sl
    c674:	464e      	mov	r6, r9
    c676:	b5e0      	push	{r5, r6, r7, lr}
    c678:	031f      	lsls	r7, r3, #12
    c67a:	0b3d      	lsrs	r5, r7, #12
    c67c:	4f2c      	ldr	r7, [pc, #176]	; (c730 <__gedf2+0xc4>)
    c67e:	030e      	lsls	r6, r1, #12
    c680:	004c      	lsls	r4, r1, #1
    c682:	46ab      	mov	fp, r5
    c684:	005d      	lsls	r5, r3, #1
    c686:	4684      	mov	ip, r0
    c688:	0b36      	lsrs	r6, r6, #12
    c68a:	0d64      	lsrs	r4, r4, #21
    c68c:	0fc9      	lsrs	r1, r1, #31
    c68e:	4690      	mov	r8, r2
    c690:	0d6d      	lsrs	r5, r5, #21
    c692:	0fdb      	lsrs	r3, r3, #31
    c694:	42bc      	cmp	r4, r7
    c696:	d02a      	beq.n	c6ee <__gedf2+0x82>
    c698:	4f25      	ldr	r7, [pc, #148]	; (c730 <__gedf2+0xc4>)
    c69a:	42bd      	cmp	r5, r7
    c69c:	d02d      	beq.n	c6fa <__gedf2+0x8e>
    c69e:	2c00      	cmp	r4, #0
    c6a0:	d10f      	bne.n	c6c2 <__gedf2+0x56>
    c6a2:	4330      	orrs	r0, r6
    c6a4:	0007      	movs	r7, r0
    c6a6:	4681      	mov	r9, r0
    c6a8:	4278      	negs	r0, r7
    c6aa:	4178      	adcs	r0, r7
    c6ac:	b2c0      	uxtb	r0, r0
    c6ae:	2d00      	cmp	r5, #0
    c6b0:	d117      	bne.n	c6e2 <__gedf2+0x76>
    c6b2:	465f      	mov	r7, fp
    c6b4:	433a      	orrs	r2, r7
    c6b6:	d114      	bne.n	c6e2 <__gedf2+0x76>
    c6b8:	464b      	mov	r3, r9
    c6ba:	2000      	movs	r0, #0
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d00a      	beq.n	c6d6 <__gedf2+0x6a>
    c6c0:	e006      	b.n	c6d0 <__gedf2+0x64>
    c6c2:	2d00      	cmp	r5, #0
    c6c4:	d102      	bne.n	c6cc <__gedf2+0x60>
    c6c6:	4658      	mov	r0, fp
    c6c8:	4302      	orrs	r2, r0
    c6ca:	d001      	beq.n	c6d0 <__gedf2+0x64>
    c6cc:	4299      	cmp	r1, r3
    c6ce:	d018      	beq.n	c702 <__gedf2+0x96>
    c6d0:	4248      	negs	r0, r1
    c6d2:	2101      	movs	r1, #1
    c6d4:	4308      	orrs	r0, r1
    c6d6:	bc3c      	pop	{r2, r3, r4, r5}
    c6d8:	4690      	mov	r8, r2
    c6da:	4699      	mov	r9, r3
    c6dc:	46a2      	mov	sl, r4
    c6de:	46ab      	mov	fp, r5
    c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6e2:	2800      	cmp	r0, #0
    c6e4:	d0f2      	beq.n	c6cc <__gedf2+0x60>
    c6e6:	2001      	movs	r0, #1
    c6e8:	3b01      	subs	r3, #1
    c6ea:	4318      	orrs	r0, r3
    c6ec:	e7f3      	b.n	c6d6 <__gedf2+0x6a>
    c6ee:	0037      	movs	r7, r6
    c6f0:	4307      	orrs	r7, r0
    c6f2:	d0d1      	beq.n	c698 <__gedf2+0x2c>
    c6f4:	2002      	movs	r0, #2
    c6f6:	4240      	negs	r0, r0
    c6f8:	e7ed      	b.n	c6d6 <__gedf2+0x6a>
    c6fa:	465f      	mov	r7, fp
    c6fc:	4317      	orrs	r7, r2
    c6fe:	d0ce      	beq.n	c69e <__gedf2+0x32>
    c700:	e7f8      	b.n	c6f4 <__gedf2+0x88>
    c702:	42ac      	cmp	r4, r5
    c704:	dce4      	bgt.n	c6d0 <__gedf2+0x64>
    c706:	da03      	bge.n	c710 <__gedf2+0xa4>
    c708:	1e48      	subs	r0, r1, #1
    c70a:	2101      	movs	r1, #1
    c70c:	4308      	orrs	r0, r1
    c70e:	e7e2      	b.n	c6d6 <__gedf2+0x6a>
    c710:	455e      	cmp	r6, fp
    c712:	d8dd      	bhi.n	c6d0 <__gedf2+0x64>
    c714:	d006      	beq.n	c724 <__gedf2+0xb8>
    c716:	2000      	movs	r0, #0
    c718:	455e      	cmp	r6, fp
    c71a:	d2dc      	bcs.n	c6d6 <__gedf2+0x6a>
    c71c:	2301      	movs	r3, #1
    c71e:	1e48      	subs	r0, r1, #1
    c720:	4318      	orrs	r0, r3
    c722:	e7d8      	b.n	c6d6 <__gedf2+0x6a>
    c724:	45c4      	cmp	ip, r8
    c726:	d8d3      	bhi.n	c6d0 <__gedf2+0x64>
    c728:	2000      	movs	r0, #0
    c72a:	45c4      	cmp	ip, r8
    c72c:	d3f6      	bcc.n	c71c <__gedf2+0xb0>
    c72e:	e7d2      	b.n	c6d6 <__gedf2+0x6a>
    c730:	000007ff 	.word	0x000007ff

0000c734 <__ledf2>:
    c734:	b5f0      	push	{r4, r5, r6, r7, lr}
    c736:	464e      	mov	r6, r9
    c738:	4645      	mov	r5, r8
    c73a:	46de      	mov	lr, fp
    c73c:	4657      	mov	r7, sl
    c73e:	005c      	lsls	r4, r3, #1
    c740:	b5e0      	push	{r5, r6, r7, lr}
    c742:	031f      	lsls	r7, r3, #12
    c744:	0fdb      	lsrs	r3, r3, #31
    c746:	4699      	mov	r9, r3
    c748:	4b2a      	ldr	r3, [pc, #168]	; (c7f4 <__ledf2+0xc0>)
    c74a:	030e      	lsls	r6, r1, #12
    c74c:	004d      	lsls	r5, r1, #1
    c74e:	0fc9      	lsrs	r1, r1, #31
    c750:	4684      	mov	ip, r0
    c752:	0b36      	lsrs	r6, r6, #12
    c754:	0d6d      	lsrs	r5, r5, #21
    c756:	468b      	mov	fp, r1
    c758:	4690      	mov	r8, r2
    c75a:	0b3f      	lsrs	r7, r7, #12
    c75c:	0d64      	lsrs	r4, r4, #21
    c75e:	429d      	cmp	r5, r3
    c760:	d020      	beq.n	c7a4 <__ledf2+0x70>
    c762:	4b24      	ldr	r3, [pc, #144]	; (c7f4 <__ledf2+0xc0>)
    c764:	429c      	cmp	r4, r3
    c766:	d022      	beq.n	c7ae <__ledf2+0x7a>
    c768:	2d00      	cmp	r5, #0
    c76a:	d112      	bne.n	c792 <__ledf2+0x5e>
    c76c:	4330      	orrs	r0, r6
    c76e:	4243      	negs	r3, r0
    c770:	4143      	adcs	r3, r0
    c772:	b2db      	uxtb	r3, r3
    c774:	2c00      	cmp	r4, #0
    c776:	d01f      	beq.n	c7b8 <__ledf2+0x84>
    c778:	2b00      	cmp	r3, #0
    c77a:	d00c      	beq.n	c796 <__ledf2+0x62>
    c77c:	464b      	mov	r3, r9
    c77e:	2001      	movs	r0, #1
    c780:	3b01      	subs	r3, #1
    c782:	4303      	orrs	r3, r0
    c784:	0018      	movs	r0, r3
    c786:	bc3c      	pop	{r2, r3, r4, r5}
    c788:	4690      	mov	r8, r2
    c78a:	4699      	mov	r9, r3
    c78c:	46a2      	mov	sl, r4
    c78e:	46ab      	mov	fp, r5
    c790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c792:	2c00      	cmp	r4, #0
    c794:	d016      	beq.n	c7c4 <__ledf2+0x90>
    c796:	45cb      	cmp	fp, r9
    c798:	d017      	beq.n	c7ca <__ledf2+0x96>
    c79a:	465b      	mov	r3, fp
    c79c:	4259      	negs	r1, r3
    c79e:	2301      	movs	r3, #1
    c7a0:	430b      	orrs	r3, r1
    c7a2:	e7ef      	b.n	c784 <__ledf2+0x50>
    c7a4:	0031      	movs	r1, r6
    c7a6:	2302      	movs	r3, #2
    c7a8:	4301      	orrs	r1, r0
    c7aa:	d1eb      	bne.n	c784 <__ledf2+0x50>
    c7ac:	e7d9      	b.n	c762 <__ledf2+0x2e>
    c7ae:	0039      	movs	r1, r7
    c7b0:	2302      	movs	r3, #2
    c7b2:	4311      	orrs	r1, r2
    c7b4:	d1e6      	bne.n	c784 <__ledf2+0x50>
    c7b6:	e7d7      	b.n	c768 <__ledf2+0x34>
    c7b8:	433a      	orrs	r2, r7
    c7ba:	d1dd      	bne.n	c778 <__ledf2+0x44>
    c7bc:	2300      	movs	r3, #0
    c7be:	2800      	cmp	r0, #0
    c7c0:	d0e0      	beq.n	c784 <__ledf2+0x50>
    c7c2:	e7ea      	b.n	c79a <__ledf2+0x66>
    c7c4:	433a      	orrs	r2, r7
    c7c6:	d1e6      	bne.n	c796 <__ledf2+0x62>
    c7c8:	e7e7      	b.n	c79a <__ledf2+0x66>
    c7ca:	42a5      	cmp	r5, r4
    c7cc:	dce5      	bgt.n	c79a <__ledf2+0x66>
    c7ce:	db05      	blt.n	c7dc <__ledf2+0xa8>
    c7d0:	42be      	cmp	r6, r7
    c7d2:	d8e2      	bhi.n	c79a <__ledf2+0x66>
    c7d4:	d007      	beq.n	c7e6 <__ledf2+0xb2>
    c7d6:	2300      	movs	r3, #0
    c7d8:	42be      	cmp	r6, r7
    c7da:	d2d3      	bcs.n	c784 <__ledf2+0x50>
    c7dc:	4659      	mov	r1, fp
    c7de:	2301      	movs	r3, #1
    c7e0:	3901      	subs	r1, #1
    c7e2:	430b      	orrs	r3, r1
    c7e4:	e7ce      	b.n	c784 <__ledf2+0x50>
    c7e6:	45c4      	cmp	ip, r8
    c7e8:	d8d7      	bhi.n	c79a <__ledf2+0x66>
    c7ea:	2300      	movs	r3, #0
    c7ec:	45c4      	cmp	ip, r8
    c7ee:	d3f5      	bcc.n	c7dc <__ledf2+0xa8>
    c7f0:	e7c8      	b.n	c784 <__ledf2+0x50>
    c7f2:	46c0      	nop			; (mov r8, r8)
    c7f4:	000007ff 	.word	0x000007ff

0000c7f8 <__libc_init_array>:
    c7f8:	b570      	push	{r4, r5, r6, lr}
    c7fa:	4e0d      	ldr	r6, [pc, #52]	; (c830 <__libc_init_array+0x38>)
    c7fc:	4d0d      	ldr	r5, [pc, #52]	; (c834 <__libc_init_array+0x3c>)
    c7fe:	2400      	movs	r4, #0
    c800:	1bad      	subs	r5, r5, r6
    c802:	10ad      	asrs	r5, r5, #2
    c804:	d005      	beq.n	c812 <__libc_init_array+0x1a>
    c806:	00a3      	lsls	r3, r4, #2
    c808:	58f3      	ldr	r3, [r6, r3]
    c80a:	3401      	adds	r4, #1
    c80c:	4798      	blx	r3
    c80e:	42a5      	cmp	r5, r4
    c810:	d1f9      	bne.n	c806 <__libc_init_array+0xe>
    c812:	f000 fa45 	bl	cca0 <_init>
    c816:	4e08      	ldr	r6, [pc, #32]	; (c838 <__libc_init_array+0x40>)
    c818:	4d08      	ldr	r5, [pc, #32]	; (c83c <__libc_init_array+0x44>)
    c81a:	2400      	movs	r4, #0
    c81c:	1bad      	subs	r5, r5, r6
    c81e:	10ad      	asrs	r5, r5, #2
    c820:	d005      	beq.n	c82e <__libc_init_array+0x36>
    c822:	00a3      	lsls	r3, r4, #2
    c824:	58f3      	ldr	r3, [r6, r3]
    c826:	3401      	adds	r4, #1
    c828:	4798      	blx	r3
    c82a:	42a5      	cmp	r5, r4
    c82c:	d1f9      	bne.n	c822 <__libc_init_array+0x2a>
    c82e:	bd70      	pop	{r4, r5, r6, pc}
    c830:	0000ccac 	.word	0x0000ccac
    c834:	0000ccac 	.word	0x0000ccac
    c838:	0000ccac 	.word	0x0000ccac
    c83c:	0000ccb4 	.word	0x0000ccb4

0000c840 <memcpy>:
    c840:	b5f0      	push	{r4, r5, r6, r7, lr}
    c842:	0005      	movs	r5, r0
    c844:	2a0f      	cmp	r2, #15
    c846:	d92f      	bls.n	c8a8 <memcpy+0x68>
    c848:	000b      	movs	r3, r1
    c84a:	4303      	orrs	r3, r0
    c84c:	079b      	lsls	r3, r3, #30
    c84e:	d134      	bne.n	c8ba <memcpy+0x7a>
    c850:	0016      	movs	r6, r2
    c852:	000c      	movs	r4, r1
    c854:	0003      	movs	r3, r0
    c856:	3e10      	subs	r6, #16
    c858:	0935      	lsrs	r5, r6, #4
    c85a:	3501      	adds	r5, #1
    c85c:	012d      	lsls	r5, r5, #4
    c85e:	1945      	adds	r5, r0, r5
    c860:	6827      	ldr	r7, [r4, #0]
    c862:	601f      	str	r7, [r3, #0]
    c864:	6867      	ldr	r7, [r4, #4]
    c866:	605f      	str	r7, [r3, #4]
    c868:	68a7      	ldr	r7, [r4, #8]
    c86a:	609f      	str	r7, [r3, #8]
    c86c:	68e7      	ldr	r7, [r4, #12]
    c86e:	3410      	adds	r4, #16
    c870:	60df      	str	r7, [r3, #12]
    c872:	3310      	adds	r3, #16
    c874:	429d      	cmp	r5, r3
    c876:	d1f3      	bne.n	c860 <memcpy+0x20>
    c878:	230f      	movs	r3, #15
    c87a:	439e      	bics	r6, r3
    c87c:	3610      	adds	r6, #16
    c87e:	1985      	adds	r5, r0, r6
    c880:	1989      	adds	r1, r1, r6
    c882:	4013      	ands	r3, r2
    c884:	2b03      	cmp	r3, #3
    c886:	d91a      	bls.n	c8be <memcpy+0x7e>
    c888:	1f1e      	subs	r6, r3, #4
    c88a:	2300      	movs	r3, #0
    c88c:	08b4      	lsrs	r4, r6, #2
    c88e:	3401      	adds	r4, #1
    c890:	00a4      	lsls	r4, r4, #2
    c892:	58cf      	ldr	r7, [r1, r3]
    c894:	50ef      	str	r7, [r5, r3]
    c896:	3304      	adds	r3, #4
    c898:	42a3      	cmp	r3, r4
    c89a:	d1fa      	bne.n	c892 <memcpy+0x52>
    c89c:	2403      	movs	r4, #3
    c89e:	43a6      	bics	r6, r4
    c8a0:	1d33      	adds	r3, r6, #4
    c8a2:	4022      	ands	r2, r4
    c8a4:	18c9      	adds	r1, r1, r3
    c8a6:	18ed      	adds	r5, r5, r3
    c8a8:	2a00      	cmp	r2, #0
    c8aa:	d005      	beq.n	c8b8 <memcpy+0x78>
    c8ac:	2300      	movs	r3, #0
    c8ae:	5ccc      	ldrb	r4, [r1, r3]
    c8b0:	54ec      	strb	r4, [r5, r3]
    c8b2:	3301      	adds	r3, #1
    c8b4:	4293      	cmp	r3, r2
    c8b6:	d1fa      	bne.n	c8ae <memcpy+0x6e>
    c8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8ba:	0005      	movs	r5, r0
    c8bc:	e7f6      	b.n	c8ac <memcpy+0x6c>
    c8be:	001a      	movs	r2, r3
    c8c0:	e7f2      	b.n	c8a8 <memcpy+0x68>
    c8c2:	46c0      	nop			; (mov r8, r8)

0000c8c4 <memset>:
    c8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8c6:	0783      	lsls	r3, r0, #30
    c8c8:	d043      	beq.n	c952 <memset+0x8e>
    c8ca:	1e54      	subs	r4, r2, #1
    c8cc:	2a00      	cmp	r2, #0
    c8ce:	d03f      	beq.n	c950 <memset+0x8c>
    c8d0:	b2ce      	uxtb	r6, r1
    c8d2:	0002      	movs	r2, r0
    c8d4:	2503      	movs	r5, #3
    c8d6:	e002      	b.n	c8de <memset+0x1a>
    c8d8:	001a      	movs	r2, r3
    c8da:	3c01      	subs	r4, #1
    c8dc:	d338      	bcc.n	c950 <memset+0x8c>
    c8de:	1c53      	adds	r3, r2, #1
    c8e0:	7016      	strb	r6, [r2, #0]
    c8e2:	422b      	tst	r3, r5
    c8e4:	d1f8      	bne.n	c8d8 <memset+0x14>
    c8e6:	2c03      	cmp	r4, #3
    c8e8:	d92a      	bls.n	c940 <memset+0x7c>
    c8ea:	22ff      	movs	r2, #255	; 0xff
    c8ec:	400a      	ands	r2, r1
    c8ee:	0215      	lsls	r5, r2, #8
    c8f0:	4315      	orrs	r5, r2
    c8f2:	042a      	lsls	r2, r5, #16
    c8f4:	4315      	orrs	r5, r2
    c8f6:	2c0f      	cmp	r4, #15
    c8f8:	d914      	bls.n	c924 <memset+0x60>
    c8fa:	0027      	movs	r7, r4
    c8fc:	001a      	movs	r2, r3
    c8fe:	3f10      	subs	r7, #16
    c900:	093e      	lsrs	r6, r7, #4
    c902:	3601      	adds	r6, #1
    c904:	0136      	lsls	r6, r6, #4
    c906:	199e      	adds	r6, r3, r6
    c908:	6015      	str	r5, [r2, #0]
    c90a:	6055      	str	r5, [r2, #4]
    c90c:	6095      	str	r5, [r2, #8]
    c90e:	60d5      	str	r5, [r2, #12]
    c910:	3210      	adds	r2, #16
    c912:	4296      	cmp	r6, r2
    c914:	d1f8      	bne.n	c908 <memset+0x44>
    c916:	220f      	movs	r2, #15
    c918:	4397      	bics	r7, r2
    c91a:	3710      	adds	r7, #16
    c91c:	19db      	adds	r3, r3, r7
    c91e:	4014      	ands	r4, r2
    c920:	2c03      	cmp	r4, #3
    c922:	d90d      	bls.n	c940 <memset+0x7c>
    c924:	001a      	movs	r2, r3
    c926:	1f27      	subs	r7, r4, #4
    c928:	08be      	lsrs	r6, r7, #2
    c92a:	3601      	adds	r6, #1
    c92c:	00b6      	lsls	r6, r6, #2
    c92e:	199e      	adds	r6, r3, r6
    c930:	c220      	stmia	r2!, {r5}
    c932:	42b2      	cmp	r2, r6
    c934:	d1fc      	bne.n	c930 <memset+0x6c>
    c936:	2203      	movs	r2, #3
    c938:	4397      	bics	r7, r2
    c93a:	3704      	adds	r7, #4
    c93c:	19db      	adds	r3, r3, r7
    c93e:	4014      	ands	r4, r2
    c940:	2c00      	cmp	r4, #0
    c942:	d005      	beq.n	c950 <memset+0x8c>
    c944:	b2c9      	uxtb	r1, r1
    c946:	191c      	adds	r4, r3, r4
    c948:	7019      	strb	r1, [r3, #0]
    c94a:	3301      	adds	r3, #1
    c94c:	429c      	cmp	r4, r3
    c94e:	d1fb      	bne.n	c948 <memset+0x84>
    c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c952:	0014      	movs	r4, r2
    c954:	0003      	movs	r3, r0
    c956:	e7c6      	b.n	c8e6 <memset+0x22>

0000c958 <register_fini>:
    c958:	4b03      	ldr	r3, [pc, #12]	; (c968 <register_fini+0x10>)
    c95a:	b510      	push	{r4, lr}
    c95c:	2b00      	cmp	r3, #0
    c95e:	d002      	beq.n	c966 <register_fini+0xe>
    c960:	4802      	ldr	r0, [pc, #8]	; (c96c <register_fini+0x14>)
    c962:	f000 f805 	bl	c970 <atexit>
    c966:	bd10      	pop	{r4, pc}
    c968:	00000000 	.word	0x00000000
    c96c:	0000c981 	.word	0x0000c981

0000c970 <atexit>:
    c970:	b510      	push	{r4, lr}
    c972:	0001      	movs	r1, r0
    c974:	2300      	movs	r3, #0
    c976:	2200      	movs	r2, #0
    c978:	2000      	movs	r0, #0
    c97a:	f000 f81f 	bl	c9bc <__register_exitproc>
    c97e:	bd10      	pop	{r4, pc}

0000c980 <__libc_fini_array>:
    c980:	b570      	push	{r4, r5, r6, lr}
    c982:	4b09      	ldr	r3, [pc, #36]	; (c9a8 <__libc_fini_array+0x28>)
    c984:	4c09      	ldr	r4, [pc, #36]	; (c9ac <__libc_fini_array+0x2c>)
    c986:	1ae4      	subs	r4, r4, r3
    c988:	10a4      	asrs	r4, r4, #2
    c98a:	d009      	beq.n	c9a0 <__libc_fini_array+0x20>
    c98c:	4a08      	ldr	r2, [pc, #32]	; (c9b0 <__libc_fini_array+0x30>)
    c98e:	18a5      	adds	r5, r4, r2
    c990:	00ad      	lsls	r5, r5, #2
    c992:	18ed      	adds	r5, r5, r3
    c994:	682b      	ldr	r3, [r5, #0]
    c996:	3c01      	subs	r4, #1
    c998:	4798      	blx	r3
    c99a:	3d04      	subs	r5, #4
    c99c:	2c00      	cmp	r4, #0
    c99e:	d1f9      	bne.n	c994 <__libc_fini_array+0x14>
    c9a0:	f000 f988 	bl	ccb4 <_fini>
    c9a4:	bd70      	pop	{r4, r5, r6, pc}
    c9a6:	46c0      	nop			; (mov r8, r8)
    c9a8:	0000ccc0 	.word	0x0000ccc0
    c9ac:	0000ccc4 	.word	0x0000ccc4
    c9b0:	3fffffff 	.word	0x3fffffff

0000c9b4 <__retarget_lock_acquire_recursive>:
    c9b4:	4770      	bx	lr
    c9b6:	46c0      	nop			; (mov r8, r8)

0000c9b8 <__retarget_lock_release_recursive>:
    c9b8:	4770      	bx	lr
    c9ba:	46c0      	nop			; (mov r8, r8)

0000c9bc <__register_exitproc>:
    c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9be:	464e      	mov	r6, r9
    c9c0:	4645      	mov	r5, r8
    c9c2:	46de      	mov	lr, fp
    c9c4:	4657      	mov	r7, sl
    c9c6:	b5e0      	push	{r5, r6, r7, lr}
    c9c8:	4d36      	ldr	r5, [pc, #216]	; (caa4 <__register_exitproc+0xe8>)
    c9ca:	b083      	sub	sp, #12
    c9cc:	0006      	movs	r6, r0
    c9ce:	6828      	ldr	r0, [r5, #0]
    c9d0:	4698      	mov	r8, r3
    c9d2:	000f      	movs	r7, r1
    c9d4:	4691      	mov	r9, r2
    c9d6:	f7ff ffed 	bl	c9b4 <__retarget_lock_acquire_recursive>
    c9da:	4b33      	ldr	r3, [pc, #204]	; (caa8 <__register_exitproc+0xec>)
    c9dc:	681c      	ldr	r4, [r3, #0]
    c9de:	23a4      	movs	r3, #164	; 0xa4
    c9e0:	005b      	lsls	r3, r3, #1
    c9e2:	58e0      	ldr	r0, [r4, r3]
    c9e4:	2800      	cmp	r0, #0
    c9e6:	d052      	beq.n	ca8e <__register_exitproc+0xd2>
    c9e8:	6843      	ldr	r3, [r0, #4]
    c9ea:	2b1f      	cmp	r3, #31
    c9ec:	dc13      	bgt.n	ca16 <__register_exitproc+0x5a>
    c9ee:	1c5a      	adds	r2, r3, #1
    c9f0:	9201      	str	r2, [sp, #4]
    c9f2:	2e00      	cmp	r6, #0
    c9f4:	d128      	bne.n	ca48 <__register_exitproc+0x8c>
    c9f6:	9a01      	ldr	r2, [sp, #4]
    c9f8:	3302      	adds	r3, #2
    c9fa:	009b      	lsls	r3, r3, #2
    c9fc:	6042      	str	r2, [r0, #4]
    c9fe:	501f      	str	r7, [r3, r0]
    ca00:	6828      	ldr	r0, [r5, #0]
    ca02:	f7ff ffd9 	bl	c9b8 <__retarget_lock_release_recursive>
    ca06:	2000      	movs	r0, #0
    ca08:	b003      	add	sp, #12
    ca0a:	bc3c      	pop	{r2, r3, r4, r5}
    ca0c:	4690      	mov	r8, r2
    ca0e:	4699      	mov	r9, r3
    ca10:	46a2      	mov	sl, r4
    ca12:	46ab      	mov	fp, r5
    ca14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca16:	4b25      	ldr	r3, [pc, #148]	; (caac <__register_exitproc+0xf0>)
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d03d      	beq.n	ca98 <__register_exitproc+0xdc>
    ca1c:	20c8      	movs	r0, #200	; 0xc8
    ca1e:	0040      	lsls	r0, r0, #1
    ca20:	e000      	b.n	ca24 <__register_exitproc+0x68>
    ca22:	bf00      	nop
    ca24:	2800      	cmp	r0, #0
    ca26:	d037      	beq.n	ca98 <__register_exitproc+0xdc>
    ca28:	22a4      	movs	r2, #164	; 0xa4
    ca2a:	2300      	movs	r3, #0
    ca2c:	0052      	lsls	r2, r2, #1
    ca2e:	58a1      	ldr	r1, [r4, r2]
    ca30:	6043      	str	r3, [r0, #4]
    ca32:	6001      	str	r1, [r0, #0]
    ca34:	50a0      	str	r0, [r4, r2]
    ca36:	3240      	adds	r2, #64	; 0x40
    ca38:	5083      	str	r3, [r0, r2]
    ca3a:	3204      	adds	r2, #4
    ca3c:	5083      	str	r3, [r0, r2]
    ca3e:	3301      	adds	r3, #1
    ca40:	9301      	str	r3, [sp, #4]
    ca42:	2300      	movs	r3, #0
    ca44:	2e00      	cmp	r6, #0
    ca46:	d0d6      	beq.n	c9f6 <__register_exitproc+0x3a>
    ca48:	009a      	lsls	r2, r3, #2
    ca4a:	4692      	mov	sl, r2
    ca4c:	4482      	add	sl, r0
    ca4e:	464a      	mov	r2, r9
    ca50:	2188      	movs	r1, #136	; 0x88
    ca52:	4654      	mov	r4, sl
    ca54:	5062      	str	r2, [r4, r1]
    ca56:	22c4      	movs	r2, #196	; 0xc4
    ca58:	0052      	lsls	r2, r2, #1
    ca5a:	4691      	mov	r9, r2
    ca5c:	4481      	add	r9, r0
    ca5e:	464a      	mov	r2, r9
    ca60:	3987      	subs	r1, #135	; 0x87
    ca62:	4099      	lsls	r1, r3
    ca64:	6812      	ldr	r2, [r2, #0]
    ca66:	468b      	mov	fp, r1
    ca68:	430a      	orrs	r2, r1
    ca6a:	4694      	mov	ip, r2
    ca6c:	464a      	mov	r2, r9
    ca6e:	4661      	mov	r1, ip
    ca70:	6011      	str	r1, [r2, #0]
    ca72:	2284      	movs	r2, #132	; 0x84
    ca74:	4641      	mov	r1, r8
    ca76:	0052      	lsls	r2, r2, #1
    ca78:	50a1      	str	r1, [r4, r2]
    ca7a:	2e02      	cmp	r6, #2
    ca7c:	d1bb      	bne.n	c9f6 <__register_exitproc+0x3a>
    ca7e:	0002      	movs	r2, r0
    ca80:	465c      	mov	r4, fp
    ca82:	328d      	adds	r2, #141	; 0x8d
    ca84:	32ff      	adds	r2, #255	; 0xff
    ca86:	6811      	ldr	r1, [r2, #0]
    ca88:	430c      	orrs	r4, r1
    ca8a:	6014      	str	r4, [r2, #0]
    ca8c:	e7b3      	b.n	c9f6 <__register_exitproc+0x3a>
    ca8e:	0020      	movs	r0, r4
    ca90:	304d      	adds	r0, #77	; 0x4d
    ca92:	30ff      	adds	r0, #255	; 0xff
    ca94:	50e0      	str	r0, [r4, r3]
    ca96:	e7a7      	b.n	c9e8 <__register_exitproc+0x2c>
    ca98:	6828      	ldr	r0, [r5, #0]
    ca9a:	f7ff ff8d 	bl	c9b8 <__retarget_lock_release_recursive>
    ca9e:	2001      	movs	r0, #1
    caa0:	4240      	negs	r0, r0
    caa2:	e7b1      	b.n	ca08 <__register_exitproc+0x4c>
    caa4:	20000430 	.word	0x20000430
    caa8:	0000cc9c 	.word	0x0000cc9c
    caac:	00000000 	.word	0x00000000
    cab0:	696d6461 	.word	0x696d6461
    cab4:	0000006e 	.word	0x0000006e
    cab8:	72657375 	.word	0x72657375
    cabc:	00000000 	.word	0x00000000
    cac0:	53434d5f 	.word	0x53434d5f
    cac4:	2d303031 	.word	0x2d303031
    cac8:	54315234 	.word	0x54315234
    cacc:	00000000 	.word	0x00000000
    cad0:	2e302e30 	.word	0x2e302e30
    cad4:	34302e30 	.word	0x34302e30
    cad8:	00000000 	.word	0x00000000
    cadc:	00004ad4 	.word	0x00004ad4
    cae0:	00004b18 	.word	0x00004b18
    cae4:	0000575e 	.word	0x0000575e
    cae8:	0000575e 	.word	0x0000575e
    caec:	0000575e 	.word	0x0000575e
    caf0:	0000575e 	.word	0x0000575e
    caf4:	0000575e 	.word	0x0000575e
    caf8:	00004da8 	.word	0x00004da8
    cafc:	00004eb2 	.word	0x00004eb2
    cb00:	0000575e 	.word	0x0000575e
    cb04:	0000575e 	.word	0x0000575e
    cb08:	0000575e 	.word	0x0000575e
    cb0c:	0000575e 	.word	0x0000575e
    cb10:	0000575e 	.word	0x0000575e
    cb14:	0000575e 	.word	0x0000575e
    cb18:	0000575e 	.word	0x0000575e
    cb1c:	00004fdc 	.word	0x00004fdc
    cb20:	0000575e 	.word	0x0000575e
    cb24:	0000575e 	.word	0x0000575e
    cb28:	0000575e 	.word	0x0000575e
    cb2c:	0000575e 	.word	0x0000575e
    cb30:	0000575e 	.word	0x0000575e
    cb34:	0000575e 	.word	0x0000575e
    cb38:	0000501a 	.word	0x0000501a
    cb3c:	0000575e 	.word	0x0000575e
    cb40:	0000575e 	.word	0x0000575e
    cb44:	0000575e 	.word	0x0000575e
    cb48:	0000575e 	.word	0x0000575e
    cb4c:	0000575e 	.word	0x0000575e
    cb50:	0000575e 	.word	0x0000575e
    cb54:	0000575e 	.word	0x0000575e
    cb58:	0000575e 	.word	0x0000575e
    cb5c:	0000510e 	.word	0x0000510e
    cb60:	000052ca 	.word	0x000052ca
    cb64:	000053e8 	.word	0x000053e8
    cb68:	000054ae 	.word	0x000054ae
    cb6c:	0000575e 	.word	0x0000575e
    cb70:	0000575e 	.word	0x0000575e
    cb74:	0000575e 	.word	0x0000575e
    cb78:	0000551e 	.word	0x0000551e
    cb7c:	0000575e 	.word	0x0000575e
    cb80:	000055e4 	.word	0x000055e4
    cb84:	0000982a 	.word	0x0000982a
    cb88:	0000983c 	.word	0x0000983c
    cb8c:	00009870 	.word	0x00009870
    cb90:	000098a8 	.word	0x000098a8
    cb94:	000098ce 	.word	0x000098ce
    cb98:	00009906 	.word	0x00009906
    cb9c:	000099ae 	.word	0x000099ae
    cba0:	000099f6 	.word	0x000099f6
    cba4:	00009b1a 	.word	0x00009b1a
    cba8:	00009bca 	.word	0x00009bca
    cbac:	00009c24 	.word	0x00009c24
    cbb0:	00009cd6 	.word	0x00009cd6
    cbb4:	00009d1c 	.word	0x00009d1c
    cbb8:	00009d60 	.word	0x00009d60
    cbbc:	00009da6 	.word	0x00009da6
    cbc0:	00009e90 	.word	0x00009e90
    cbc4:	00009f3e 	.word	0x00009f3e
    cbc8:	00009fc6 	.word	0x00009fc6
    cbcc:	0000a040 	.word	0x0000a040
    cbd0:	0000a0e8 	.word	0x0000a0e8
    cbd4:	0000a158 	.word	0x0000a158
    cbd8:	0000a340 	.word	0x0000a340
    cbdc:	0000a570 	.word	0x0000a570
    cbe0:	0000a4cc 	.word	0x0000a4cc
    cbe4:	0000a5f8 	.word	0x0000a5f8
    cbe8:	0000a242 	.word	0x0000a242
    cbec:	0000a284 	.word	0x0000a284
    cbf0:	0000a5c4 	.word	0x0000a5c4
    cbf4:	0000a6ba 	.word	0x0000a6ba
    cbf8:	0000a700 	.word	0x0000a700
    cbfc:	0000a880 	.word	0x0000a880
    cc00:	0000a92e 	.word	0x0000a92e
    cc04:	0000a9b6 	.word	0x0000a9b6
    cc08:	0000aa34 	.word	0x0000aa34
    cc0c:	0000aadc 	.word	0x0000aadc
    cc10:	3153434d 	.word	0x3153434d
    cc14:	342d3030 	.word	0x342d3030
    cc18:	00543152 	.word	0x00543152
    cc1c:	0000b428 	.word	0x0000b428
    cc20:	0000b40a 	.word	0x0000b40a
    cc24:	0000b3c4 	.word	0x0000b3c4
    cc28:	0000b2e2 	.word	0x0000b2e2
    cc2c:	0000b3c4 	.word	0x0000b3c4
    cc30:	0000b3fc 	.word	0x0000b3fc
    cc34:	0000b3c4 	.word	0x0000b3c4
    cc38:	0000b2e2 	.word	0x0000b2e2
    cc3c:	0000b40a 	.word	0x0000b40a
    cc40:	0000b40a 	.word	0x0000b40a
    cc44:	0000b3fc 	.word	0x0000b3fc
    cc48:	0000b2e2 	.word	0x0000b2e2
    cc4c:	0000b2da 	.word	0x0000b2da
    cc50:	0000b2da 	.word	0x0000b2da
    cc54:	0000b2da 	.word	0x0000b2da
    cc58:	0000b640 	.word	0x0000b640
    cc5c:	0000ba88 	.word	0x0000ba88
    cc60:	0000b948 	.word	0x0000b948
    cc64:	0000b948 	.word	0x0000b948
    cc68:	0000b944 	.word	0x0000b944
    cc6c:	0000ba60 	.word	0x0000ba60
    cc70:	0000ba60 	.word	0x0000ba60
    cc74:	0000ba52 	.word	0x0000ba52
    cc78:	0000b944 	.word	0x0000b944
    cc7c:	0000ba60 	.word	0x0000ba60
    cc80:	0000ba52 	.word	0x0000ba52
    cc84:	0000ba60 	.word	0x0000ba60
    cc88:	0000b944 	.word	0x0000b944
    cc8c:	0000ba68 	.word	0x0000ba68
    cc90:	0000ba68 	.word	0x0000ba68
    cc94:	0000ba68 	.word	0x0000ba68
    cc98:	0000bc6c 	.word	0x0000bc6c

0000cc9c <_global_impure_ptr>:
    cc9c:	20000008                                ... 

0000cca0 <_init>:
    cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cca2:	46c0      	nop			; (mov r8, r8)
    cca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cca6:	bc08      	pop	{r3}
    cca8:	469e      	mov	lr, r3
    ccaa:	4770      	bx	lr

0000ccac <__init_array_start>:
    ccac:	0000c959 	.word	0x0000c959

0000ccb0 <__frame_dummy_init_array_entry>:
    ccb0:	000040dd                                .@..

0000ccb4 <_fini>:
    ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ccba:	bc08      	pop	{r3}
    ccbc:	469e      	mov	lr, r3
    ccbe:	4770      	bx	lr

0000ccc0 <__fini_array_start>:
    ccc0:	000040b5 	.word	0x000040b5
