
eth-rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d3c  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000cd3c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ab4  20000434  0000d170  00010434  2**2
                  ALLOC
  3 .stack        00002000  20003ee8  00010c24  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00047133  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003488  00000000  00000000  000575e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000011d0  00000000  00000000  0005aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0005bc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001703f  00000000  00000000  0005be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a71b  00000000  00000000  00072ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00071a73  00000000  00000000  0007d5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001034  00000000  00000000  000ef050  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000f0084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	e8 5e 00 20 15 41 00 00 0d 42 00 00 0d 42 00 00     .^. .A...B...B..
	...
    402c:	0d 42 00 00 00 00 00 00 00 00 00 00 0d 42 00 00     .B...........B..
    403c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    404c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    405c:	0d 42 00 00 0d 42 00 00 d9 96 00 00 e9 96 00 00     .B...B..........
    406c:	c9 96 00 00 b9 96 00 00 0d 42 00 00 ed 7c 00 00     .........B...|..
    407c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 7d 80 00 00     .B...B...B..}...
    408c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    409c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
	...

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000434 	.word	0x20000434
    40d4:	00000000 	.word	0x00000000
    40d8:	0000cd3c 	.word	0x0000cd3c

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000438 	.word	0x20000438
    4108:	0000cd3c 	.word	0x0000cd3c
    410c:	0000cd3c 	.word	0x0000cd3c
    4110:	00000000 	.word	0x00000000

00004114 <Reset_Handler>:
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	4b2f      	ldr	r3, [pc, #188]	; (41d8 <Reset_Handler+0xc4>)
    411c:	607b      	str	r3, [r7, #4]
    411e:	4b2f      	ldr	r3, [pc, #188]	; (41dc <Reset_Handler+0xc8>)
    4120:	603b      	str	r3, [r7, #0]
    4122:	687a      	ldr	r2, [r7, #4]
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d00c      	beq.n	4144 <Reset_Handler+0x30>
    412a:	e007      	b.n	413c <Reset_Handler+0x28>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	1d1a      	adds	r2, r3, #4
    4130:	603a      	str	r2, [r7, #0]
    4132:	687a      	ldr	r2, [r7, #4]
    4134:	1d11      	adds	r1, r2, #4
    4136:	6079      	str	r1, [r7, #4]
    4138:	6812      	ldr	r2, [r2, #0]
    413a:	601a      	str	r2, [r3, #0]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	4b28      	ldr	r3, [pc, #160]	; (41e0 <Reset_Handler+0xcc>)
    4140:	429a      	cmp	r2, r3
    4142:	d3f3      	bcc.n	412c <Reset_Handler+0x18>
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <Reset_Handler+0xd0>)
    4146:	603b      	str	r3, [r7, #0]
    4148:	e004      	b.n	4154 <Reset_Handler+0x40>
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	1d1a      	adds	r2, r3, #4
    414e:	603a      	str	r2, [r7, #0]
    4150:	2200      	movs	r2, #0
    4152:	601a      	str	r2, [r3, #0]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	4b24      	ldr	r3, [pc, #144]	; (41e8 <Reset_Handler+0xd4>)
    4158:	429a      	cmp	r2, r3
    415a:	d3f6      	bcc.n	414a <Reset_Handler+0x36>
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <Reset_Handler+0xd8>)
    415e:	607b      	str	r3, [r7, #4]
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <Reset_Handler+0xdc>)
    4162:	687a      	ldr	r2, [r7, #4]
    4164:	21ff      	movs	r1, #255	; 0xff
    4166:	438a      	bics	r2, r1
    4168:	609a      	str	r2, [r3, #8]
    416a:	4a22      	ldr	r2, [pc, #136]	; (41f4 <Reset_Handler+0xe0>)
    416c:	2390      	movs	r3, #144	; 0x90
    416e:	005b      	lsls	r3, r3, #1
    4170:	2102      	movs	r1, #2
    4172:	50d1      	str	r1, [r2, r3]
    4174:	4a20      	ldr	r2, [pc, #128]	; (41f8 <Reset_Handler+0xe4>)
    4176:	78d3      	ldrb	r3, [r2, #3]
    4178:	2103      	movs	r1, #3
    417a:	438b      	bics	r3, r1
    417c:	1c19      	adds	r1, r3, #0
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	70d3      	strb	r3, [r2, #3]
    4184:	4a1c      	ldr	r2, [pc, #112]	; (41f8 <Reset_Handler+0xe4>)
    4186:	78d3      	ldrb	r3, [r2, #3]
    4188:	210c      	movs	r1, #12
    418a:	438b      	bics	r3, r1
    418c:	1c19      	adds	r1, r3, #0
    418e:	2308      	movs	r3, #8
    4190:	430b      	orrs	r3, r1
    4192:	70d3      	strb	r3, [r2, #3]
    4194:	4a19      	ldr	r2, [pc, #100]	; (41fc <Reset_Handler+0xe8>)
    4196:	7b93      	ldrb	r3, [r2, #14]
    4198:	2130      	movs	r1, #48	; 0x30
    419a:	438b      	bics	r3, r1
    419c:	1c19      	adds	r1, r3, #0
    419e:	2320      	movs	r3, #32
    41a0:	430b      	orrs	r3, r1
    41a2:	7393      	strb	r3, [r2, #14]
    41a4:	4a15      	ldr	r2, [pc, #84]	; (41fc <Reset_Handler+0xe8>)
    41a6:	7b93      	ldrb	r3, [r2, #14]
    41a8:	210c      	movs	r1, #12
    41aa:	438b      	bics	r3, r1
    41ac:	1c19      	adds	r1, r3, #0
    41ae:	2308      	movs	r3, #8
    41b0:	430b      	orrs	r3, r1
    41b2:	7393      	strb	r3, [r2, #14]
    41b4:	4a11      	ldr	r2, [pc, #68]	; (41fc <Reset_Handler+0xe8>)
    41b6:	7b93      	ldrb	r3, [r2, #14]
    41b8:	2103      	movs	r1, #3
    41ba:	438b      	bics	r3, r1
    41bc:	1c19      	adds	r1, r3, #0
    41be:	2302      	movs	r3, #2
    41c0:	430b      	orrs	r3, r1
    41c2:	7393      	strb	r3, [r2, #14]
    41c4:	4a0e      	ldr	r2, [pc, #56]	; (4200 <Reset_Handler+0xec>)
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	2180      	movs	r1, #128	; 0x80
    41ca:	430b      	orrs	r3, r1
    41cc:	6053      	str	r3, [r2, #4]
    41ce:	4b0d      	ldr	r3, [pc, #52]	; (4204 <Reset_Handler+0xf0>)
    41d0:	4798      	blx	r3
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <Reset_Handler+0xf4>)
    41d4:	4798      	blx	r3
    41d6:	e7fe      	b.n	41d6 <Reset_Handler+0xc2>
    41d8:	0000cd3c 	.word	0x0000cd3c
    41dc:	20000000 	.word	0x20000000
    41e0:	20000434 	.word	0x20000434
    41e4:	20000434 	.word	0x20000434
    41e8:	20003ee8 	.word	0x20003ee8
    41ec:	00004000 	.word	0x00004000
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	41007000 	.word	0x41007000
    41f8:	41005000 	.word	0x41005000
    41fc:	41004800 	.word	0x41004800
    4200:	41004000 	.word	0x41004000
    4204:	0000c871 	.word	0x0000c871
    4208:	0000728d 	.word	0x0000728d

0000420c <Dummy_Handler>:
    420c:	b580      	push	{r7, lr}
    420e:	af00      	add	r7, sp, #0
    4210:	e7fe      	b.n	4210 <Dummy_Handler+0x4>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <acc>:
#include "def.h"

void acc(BYTE cmd)//command(читать, записать, сбросить)
{
    4214:	b5b0      	push	{r4, r5, r7, lr}
    4216:	b082      	sub	sp, #8
    4218:	af00      	add	r7, sp, #0
    421a:	0002      	movs	r2, r0
    421c:	1dfb      	adds	r3, r7, #7
    421e:	701a      	strb	r2, [r3, #0]
	if (sizeof(ACCOUNTS) != 256) {warning_led(3);return;}
		
	switch(cmd)
    4220:	1dfb      	adds	r3, r7, #7
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	2b01      	cmp	r3, #1
    4226:	d00c      	beq.n	4242 <acc+0x2e>
    4228:	2b02      	cmp	r3, #2
    422a:	d01f      	beq.n	426c <acc+0x58>
    422c:	2b00      	cmp	r3, #0
    422e:	d000      	beq.n	4232 <acc+0x1e>
			
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
		break;
		default:			
		break;
    4230:	e074      	b.n	431c <acc+0x108>
			memcpy(&accnts.accnt[0].login[0], ACCOUNT_PLACE, sizeof(ACCOUNTS));
    4232:	2380      	movs	r3, #128	; 0x80
    4234:	005a      	lsls	r2, r3, #1
    4236:	493b      	ldr	r1, [pc, #236]	; (4324 <acc+0x110>)
    4238:	4b3b      	ldr	r3, [pc, #236]	; (4328 <acc+0x114>)
    423a:	0018      	movs	r0, r3
    423c:	4b3b      	ldr	r3, [pc, #236]	; (432c <acc+0x118>)
    423e:	4798      	blx	r3
		break;
    4240:	e06c      	b.n	431c <acc+0x108>
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    4242:	2380      	movs	r3, #128	; 0x80
    4244:	005b      	lsls	r3, r3, #1
    4246:	4a37      	ldr	r2, [pc, #220]	; (4324 <acc+0x110>)
    4248:	0019      	movs	r1, r3
    424a:	0010      	movs	r0, r2
    424c:	4b38      	ldr	r3, [pc, #224]	; (4330 <acc+0x11c>)
    424e:	4798      	blx	r3
    4250:	1e03      	subs	r3, r0, #0
    4252:	d103      	bne.n	425c <acc+0x48>
    4254:	4b33      	ldr	r3, [pc, #204]	; (4324 <acc+0x110>)
    4256:	0018      	movs	r0, r3
    4258:	4b36      	ldr	r3, [pc, #216]	; (4334 <acc+0x120>)
    425a:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0], sizeof(ACCOUNTS));
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	005a      	lsls	r2, r3, #1
    4260:	4b31      	ldr	r3, [pc, #196]	; (4328 <acc+0x114>)
    4262:	4830      	ldr	r0, [pc, #192]	; (4324 <acc+0x110>)
    4264:	0019      	movs	r1, r3
    4266:	4b34      	ldr	r3, [pc, #208]	; (4338 <acc+0x124>)
    4268:	4798      	blx	r3
		break;
    426a:	e057      	b.n	431c <acc+0x108>
			memset(&accnts.accnt[0].login[0], 0, 64);
    426c:	4b2e      	ldr	r3, [pc, #184]	; (4328 <acc+0x114>)
    426e:	2240      	movs	r2, #64	; 0x40
    4270:	2100      	movs	r1, #0
    4272:	0018      	movs	r0, r3
    4274:	4b31      	ldr	r3, [pc, #196]	; (433c <acc+0x128>)
    4276:	4798      	blx	r3
			memcpy(&accnts.accnt[0].login[0], ADMIN, sizeof(ADMIN));
    4278:	4931      	ldr	r1, [pc, #196]	; (4340 <acc+0x12c>)
    427a:	4b2b      	ldr	r3, [pc, #172]	; (4328 <acc+0x114>)
    427c:	2206      	movs	r2, #6
    427e:	0018      	movs	r0, r3
    4280:	4b2a      	ldr	r3, [pc, #168]	; (432c <acc+0x118>)
    4282:	4798      	blx	r3
			memcpy(&accnts.accnt[0].password[0], ADMIN, sizeof(ADMIN));
    4284:	492e      	ldr	r1, [pc, #184]	; (4340 <acc+0x12c>)
    4286:	4b2f      	ldr	r3, [pc, #188]	; (4344 <acc+0x130>)
    4288:	2206      	movs	r2, #6
    428a:	0018      	movs	r0, r3
    428c:	4b27      	ldr	r3, [pc, #156]	; (432c <acc+0x118>)
    428e:	4798      	blx	r3
			memset(&accnts.accnt[1].login[0], 0, 64);
    4290:	4b2d      	ldr	r3, [pc, #180]	; (4348 <acc+0x134>)
    4292:	2240      	movs	r2, #64	; 0x40
    4294:	2100      	movs	r1, #0
    4296:	0018      	movs	r0, r3
    4298:	4b28      	ldr	r3, [pc, #160]	; (433c <acc+0x128>)
    429a:	4798      	blx	r3
			memcpy(&accnts.accnt[1].login[0], USER, sizeof(USER));
    429c:	492b      	ldr	r1, [pc, #172]	; (434c <acc+0x138>)
    429e:	4b2a      	ldr	r3, [pc, #168]	; (4348 <acc+0x134>)
    42a0:	2205      	movs	r2, #5
    42a2:	0018      	movs	r0, r3
    42a4:	4b21      	ldr	r3, [pc, #132]	; (432c <acc+0x118>)
    42a6:	4798      	blx	r3
			memcpy(&accnts.accnt[1].password[0], USER, sizeof(USER));
    42a8:	4928      	ldr	r1, [pc, #160]	; (434c <acc+0x138>)
    42aa:	4b29      	ldr	r3, [pc, #164]	; (4350 <acc+0x13c>)
    42ac:	2205      	movs	r2, #5
    42ae:	0018      	movs	r0, r3
    42b0:	4b1e      	ldr	r3, [pc, #120]	; (432c <acc+0x118>)
    42b2:	4798      	blx	r3
			accnts.cs = crc16_ccit(&accnts.accnt[0].login, sizeof(ACCOUNTS));
    42b4:	2380      	movs	r3, #128	; 0x80
    42b6:	005a      	lsls	r2, r3, #1
    42b8:	4b1b      	ldr	r3, [pc, #108]	; (4328 <acc+0x114>)
    42ba:	0011      	movs	r1, r2
    42bc:	0018      	movs	r0, r3
    42be:	4b25      	ldr	r3, [pc, #148]	; (4354 <acc+0x140>)
    42c0:	4798      	blx	r3
    42c2:	0003      	movs	r3, r0
    42c4:	0019      	movs	r1, r3
    42c6:	4b18      	ldr	r3, [pc, #96]	; (4328 <acc+0x114>)
    42c8:	22fe      	movs	r2, #254	; 0xfe
    42ca:	20ff      	movs	r0, #255	; 0xff
    42cc:	4008      	ands	r0, r1
    42ce:	0005      	movs	r5, r0
    42d0:	5c98      	ldrb	r0, [r3, r2]
    42d2:	2400      	movs	r4, #0
    42d4:	4020      	ands	r0, r4
    42d6:	1c04      	adds	r4, r0, #0
    42d8:	1c28      	adds	r0, r5, #0
    42da:	4320      	orrs	r0, r4
    42dc:	5498      	strb	r0, [r3, r2]
    42de:	0a09      	lsrs	r1, r1, #8
    42e0:	b288      	uxth	r0, r1
    42e2:	189b      	adds	r3, r3, r2
    42e4:	785a      	ldrb	r2, [r3, #1]
    42e6:	2100      	movs	r1, #0
    42e8:	400a      	ands	r2, r1
    42ea:	1c11      	adds	r1, r2, #0
    42ec:	1c02      	adds	r2, r0, #0
    42ee:	430a      	orrs	r2, r1
    42f0:	705a      	strb	r2, [r3, #1]
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    42f2:	2380      	movs	r3, #128	; 0x80
    42f4:	005b      	lsls	r3, r3, #1
    42f6:	4a0b      	ldr	r2, [pc, #44]	; (4324 <acc+0x110>)
    42f8:	0019      	movs	r1, r3
    42fa:	0010      	movs	r0, r2
    42fc:	4b0c      	ldr	r3, [pc, #48]	; (4330 <acc+0x11c>)
    42fe:	4798      	blx	r3
    4300:	1e03      	subs	r3, r0, #0
    4302:	d103      	bne.n	430c <acc+0xf8>
    4304:	4b07      	ldr	r3, [pc, #28]	; (4324 <acc+0x110>)
    4306:	0018      	movs	r0, r3
    4308:	4b0a      	ldr	r3, [pc, #40]	; (4334 <acc+0x120>)
    430a:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
    430c:	2380      	movs	r3, #128	; 0x80
    430e:	005a      	lsls	r2, r3, #1
    4310:	4b05      	ldr	r3, [pc, #20]	; (4328 <acc+0x114>)
    4312:	4804      	ldr	r0, [pc, #16]	; (4324 <acc+0x110>)
    4314:	0019      	movs	r1, r3
    4316:	4b08      	ldr	r3, [pc, #32]	; (4338 <acc+0x124>)
    4318:	4798      	blx	r3
		break;
    431a:	46c0      	nop			; (mov r8, r8)
	}
}
    431c:	46bd      	mov	sp, r7
    431e:	b002      	add	sp, #8
    4320:	bdb0      	pop	{r4, r5, r7, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	0003f300 	.word	0x0003f300
    4328:	20002554 	.word	0x20002554
    432c:	0000c8b9 	.word	0x0000c8b9
    4330:	00006745 	.word	0x00006745
    4334:	0000678b 	.word	0x0000678b
    4338:	000067d9 	.word	0x000067d9
    433c:	0000c93d 	.word	0x0000c93d
    4340:	0000cb28 	.word	0x0000cb28
    4344:	20002574 	.word	0x20002574
    4348:	20002594 	.word	0x20002594
    434c:	0000cb30 	.word	0x0000cb30
    4350:	200025b4 	.word	0x200025b4
    4354:	00005d45 	.word	0x00005d45

00004358 <acces_ip>:

BYTE acces_ip(BYTE n_port)//True-1,F-0;
{
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
    435e:	0002      	movs	r2, r0
    4360:	1dfb      	adds	r3, r7, #7
    4362:	701a      	strb	r2, [r3, #0]
	if		(SRAV(4, &cfg_1.access[n_port].ip[0], eth_sock[n_port+1].ip_addr)) {return 1;}
    4364:	1dfb      	adds	r3, r7, #7
    4366:	781a      	ldrb	r2, [r3, #0]
    4368:	0013      	movs	r3, r2
    436a:	00db      	lsls	r3, r3, #3
    436c:	189b      	adds	r3, r3, r2
    436e:	005b      	lsls	r3, r3, #1
    4370:	3368      	adds	r3, #104	; 0x68
    4372:	001a      	movs	r2, r3
    4374:	4b32      	ldr	r3, [pc, #200]	; (4440 <acces_ip+0xe8>)
    4376:	18d3      	adds	r3, r2, r3
    4378:	1d19      	adds	r1, r3, #4
    437a:	1dfb      	adds	r3, r7, #7
    437c:	781b      	ldrb	r3, [r3, #0]
    437e:	3301      	adds	r3, #1
    4380:	4a30      	ldr	r2, [pc, #192]	; (4444 <acces_ip+0xec>)
    4382:	435a      	muls	r2, r3
    4384:	4b30      	ldr	r3, [pc, #192]	; (4448 <acces_ip+0xf0>)
    4386:	18d3      	adds	r3, r2, r3
    4388:	001a      	movs	r2, r3
    438a:	2004      	movs	r0, #4
    438c:	4b2f      	ldr	r3, [pc, #188]	; (444c <acces_ip+0xf4>)
    438e:	4798      	blx	r3
    4390:	1e03      	subs	r3, r0, #0
    4392:	d001      	beq.n	4398 <acces_ip+0x40>
    4394:	2301      	movs	r3, #1
    4396:	e04e      	b.n	4436 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[1], eth_sock[n_port+1].ip_addr)) {return 1;}
    4398:	1dfb      	adds	r3, r7, #7
    439a:	781a      	ldrb	r2, [r3, #0]
    439c:	0013      	movs	r3, r2
    439e:	00db      	lsls	r3, r3, #3
    43a0:	189b      	adds	r3, r3, r2
    43a2:	005b      	lsls	r3, r3, #1
    43a4:	336c      	adds	r3, #108	; 0x6c
    43a6:	001a      	movs	r2, r3
    43a8:	4b25      	ldr	r3, [pc, #148]	; (4440 <acces_ip+0xe8>)
    43aa:	18d3      	adds	r3, r2, r3
    43ac:	1d19      	adds	r1, r3, #4
    43ae:	1dfb      	adds	r3, r7, #7
    43b0:	781b      	ldrb	r3, [r3, #0]
    43b2:	3301      	adds	r3, #1
    43b4:	4a23      	ldr	r2, [pc, #140]	; (4444 <acces_ip+0xec>)
    43b6:	435a      	muls	r2, r3
    43b8:	4b23      	ldr	r3, [pc, #140]	; (4448 <acces_ip+0xf0>)
    43ba:	18d3      	adds	r3, r2, r3
    43bc:	001a      	movs	r2, r3
    43be:	2004      	movs	r0, #4
    43c0:	4b22      	ldr	r3, [pc, #136]	; (444c <acces_ip+0xf4>)
    43c2:	4798      	blx	r3
    43c4:	1e03      	subs	r3, r0, #0
    43c6:	d001      	beq.n	43cc <acces_ip+0x74>
    43c8:	2301      	movs	r3, #1
    43ca:	e034      	b.n	4436 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[2], eth_sock[n_port+1].ip_addr)) {return 1;}
    43cc:	1dfb      	adds	r3, r7, #7
    43ce:	781a      	ldrb	r2, [r3, #0]
    43d0:	0013      	movs	r3, r2
    43d2:	00db      	lsls	r3, r3, #3
    43d4:	189b      	adds	r3, r3, r2
    43d6:	005b      	lsls	r3, r3, #1
    43d8:	3370      	adds	r3, #112	; 0x70
    43da:	001a      	movs	r2, r3
    43dc:	4b18      	ldr	r3, [pc, #96]	; (4440 <acces_ip+0xe8>)
    43de:	18d3      	adds	r3, r2, r3
    43e0:	1d19      	adds	r1, r3, #4
    43e2:	1dfb      	adds	r3, r7, #7
    43e4:	781b      	ldrb	r3, [r3, #0]
    43e6:	3301      	adds	r3, #1
    43e8:	4a16      	ldr	r2, [pc, #88]	; (4444 <acces_ip+0xec>)
    43ea:	435a      	muls	r2, r3
    43ec:	4b16      	ldr	r3, [pc, #88]	; (4448 <acces_ip+0xf0>)
    43ee:	18d3      	adds	r3, r2, r3
    43f0:	001a      	movs	r2, r3
    43f2:	2004      	movs	r0, #4
    43f4:	4b15      	ldr	r3, [pc, #84]	; (444c <acces_ip+0xf4>)
    43f6:	4798      	blx	r3
    43f8:	1e03      	subs	r3, r0, #0
    43fa:	d001      	beq.n	4400 <acces_ip+0xa8>
    43fc:	2301      	movs	r3, #1
    43fe:	e01a      	b.n	4436 <acces_ip+0xde>
	if		(SRAV(4, &cfg_1.access[n_port].ip[3], eth_sock[n_port+1].ip_addr)) {return 1;}
    4400:	1dfb      	adds	r3, r7, #7
    4402:	781a      	ldrb	r2, [r3, #0]
    4404:	0013      	movs	r3, r2
    4406:	00db      	lsls	r3, r3, #3
    4408:	189b      	adds	r3, r3, r2
    440a:	005b      	lsls	r3, r3, #1
    440c:	3374      	adds	r3, #116	; 0x74
    440e:	001a      	movs	r2, r3
    4410:	4b0b      	ldr	r3, [pc, #44]	; (4440 <acces_ip+0xe8>)
    4412:	18d3      	adds	r3, r2, r3
    4414:	1d19      	adds	r1, r3, #4
    4416:	1dfb      	adds	r3, r7, #7
    4418:	781b      	ldrb	r3, [r3, #0]
    441a:	3301      	adds	r3, #1
    441c:	4a09      	ldr	r2, [pc, #36]	; (4444 <acces_ip+0xec>)
    441e:	435a      	muls	r2, r3
    4420:	4b09      	ldr	r3, [pc, #36]	; (4448 <acces_ip+0xf0>)
    4422:	18d3      	adds	r3, r2, r3
    4424:	001a      	movs	r2, r3
    4426:	2004      	movs	r0, #4
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <acces_ip+0xf4>)
    442a:	4798      	blx	r3
    442c:	1e03      	subs	r3, r0, #0
    442e:	d001      	beq.n	4434 <acces_ip+0xdc>
    4430:	2301      	movs	r3, #1
    4432:	e000      	b.n	4436 <acces_ip+0xde>
	return 0;
    4434:	2300      	movs	r3, #0
}
    4436:	0018      	movs	r0, r3
    4438:	46bd      	mov	sp, r7
    443a:	b002      	add	sp, #8
    443c:	bd80      	pop	{r7, pc}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	20003dc4 	.word	0x20003dc4
    4444:	000005e5 	.word	0x000005e5
    4448:	200005cc 	.word	0x200005cc
    444c:	00004883 	.word	0x00004883

00004450 <log_ch>:

void log_ch( )
{
    4450:	b580      	push	{r7, lr}
    4452:	4f21      	ldr	r7, [pc, #132]	; (44d8 <log_ch+0x88>)
    4454:	44bd      	add	sp, r7
    4456:	af00      	add	r7, sp, #0
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    4458:	2380      	movs	r3, #128	; 0x80
    445a:	00da      	lsls	r2, r3, #3
    445c:	23b0      	movs	r3, #176	; 0xb0
    445e:	029b      	lsls	r3, r3, #10
    4460:	0011      	movs	r1, r2
    4462:	0018      	movs	r0, r3
    4464:	4b1d      	ldr	r3, [pc, #116]	; (44dc <log_ch+0x8c>)
    4466:	4798      	blx	r3
    4468:	1e03      	subs	r3, r0, #0
    446a:	d02f      	beq.n	44cc <log_ch+0x7c>
	
	LOG_DATA data;
	data.cell[0].ip				= 0x00000000;
    446c:	4b1a      	ldr	r3, [pc, #104]	; (44d8 <log_ch+0x88>)
    446e:	2280      	movs	r2, #128	; 0x80
    4470:	0152      	lsls	r2, r2, #5
    4472:	4694      	mov	ip, r2
    4474:	44bc      	add	ip, r7
    4476:	4463      	add	r3, ip
    4478:	2200      	movs	r2, #0
    447a:	601a      	str	r2, [r3, #0]
	data.cell[0].times			= 0x00000000;
    447c:	4b16      	ldr	r3, [pc, #88]	; (44d8 <log_ch+0x88>)
    447e:	2280      	movs	r2, #128	; 0x80
    4480:	0152      	lsls	r2, r2, #5
    4482:	4694      	mov	ip, r2
    4484:	44bc      	add	ip, r7
    4486:	4463      	add	r3, ip
    4488:	2200      	movs	r2, #0
    448a:	605a      	str	r2, [r3, #4]
	data.cell[0].indx			= 0;
    448c:	4b12      	ldr	r3, [pc, #72]	; (44d8 <log_ch+0x88>)
    448e:	2280      	movs	r2, #128	; 0x80
    4490:	0152      	lsls	r2, r2, #5
    4492:	4694      	mov	ip, r2
    4494:	44bc      	add	ip, r7
    4496:	4463      	add	r3, ip
    4498:	2200      	movs	r2, #0
    449a:	609a      	str	r2, [r3, #8]
	data.cell[0].operat_code	= START;
    449c:	4b0e      	ldr	r3, [pc, #56]	; (44d8 <log_ch+0x88>)
    449e:	2280      	movs	r2, #128	; 0x80
    44a0:	0152      	lsls	r2, r2, #5
    44a2:	4694      	mov	ip, r2
    44a4:	44bc      	add	ip, r7
    44a6:	4463      	add	r3, ip
    44a8:	2204      	movs	r2, #4
    44aa:	819a      	strh	r2, [r3, #12]
	data.cell[0].version		= VERSION_B;
    44ac:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <log_ch+0x88>)
    44ae:	2280      	movs	r2, #128	; 0x80
    44b0:	0152      	lsls	r2, r2, #5
    44b2:	4694      	mov	ip, r2
    44b4:	44bc      	add	ip, r7
    44b6:	4463      	add	r3, ip
    44b8:	2204      	movs	r2, #4
    44ba:	81da      	strh	r2, [r3, #14]
	flash_write(LOGS_ADDR ,&data.cell[0] , 16);
    44bc:	0039      	movs	r1, r7
    44be:	23b0      	movs	r3, #176	; 0xb0
    44c0:	029b      	lsls	r3, r3, #10
    44c2:	2210      	movs	r2, #16
    44c4:	0018      	movs	r0, r3
    44c6:	4b06      	ldr	r3, [pc, #24]	; (44e0 <log_ch+0x90>)
    44c8:	4798      	blx	r3
    44ca:	e000      	b.n	44ce <log_ch+0x7e>
	if (!flash_empty(LOGS_ADDR, 1024))/*1024 * 4(DWORD)*/{return;}
    44cc:	46c0      	nop			; (mov r8, r8)
}
    44ce:	46bd      	mov	sp, r7
    44d0:	2380      	movs	r3, #128	; 0x80
    44d2:	015b      	lsls	r3, r3, #5
    44d4:	449d      	add	sp, r3
    44d6:	bd80      	pop	{r7, pc}
    44d8:	fffff000 	.word	0xfffff000
    44dc:	00006745 	.word	0x00006745
    44e0:	000067d9 	.word	0x000067d9

000044e4 <log_safe>:

void log_safe(BYTE actv_user_id, DWORD ip, DWORD times, WORD operat_code)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	4f69      	ldr	r7, [pc, #420]	; (468c <log_safe+0x1a8>)
    44e8:	44bd      	add	sp, r7
    44ea:	af00      	add	r7, sp, #0
    44ec:	60b9      	str	r1, [r7, #8]
    44ee:	607a      	str	r2, [r7, #4]
    44f0:	0019      	movs	r1, r3
    44f2:	4b67      	ldr	r3, [pc, #412]	; (4690 <log_safe+0x1ac>)
    44f4:	4a67      	ldr	r2, [pc, #412]	; (4694 <log_safe+0x1b0>)
    44f6:	4694      	mov	ip, r2
    44f8:	44bc      	add	ip, r7
    44fa:	4463      	add	r3, ip
    44fc:	1c02      	adds	r2, r0, #0
    44fe:	701a      	strb	r2, [r3, #0]
    4500:	4b65      	ldr	r3, [pc, #404]	; (4698 <log_safe+0x1b4>)
    4502:	4a64      	ldr	r2, [pc, #400]	; (4694 <log_safe+0x1b0>)
    4504:	4694      	mov	ip, r2
    4506:	44bc      	add	ip, r7
    4508:	4463      	add	r3, ip
    450a:	1c0a      	adds	r2, r1, #0
    450c:	801a      	strh	r2, [r3, #0]
	LOG_DATA data;
	flash_read(LOGS_ADDR, &data, 4096);
    450e:	2380      	movs	r3, #128	; 0x80
    4510:	015a      	lsls	r2, r3, #5
    4512:	2310      	movs	r3, #16
    4514:	18f9      	adds	r1, r7, r3
    4516:	23b0      	movs	r3, #176	; 0xb0
    4518:	029b      	lsls	r3, r3, #10
    451a:	0018      	movs	r0, r3
    451c:	4b5f      	ldr	r3, [pc, #380]	; (469c <log_safe+0x1b8>)
    451e:	4798      	blx	r3
	BYTE ptr = 1;
    4520:	4b5f      	ldr	r3, [pc, #380]	; (46a0 <log_safe+0x1bc>)
    4522:	18fb      	adds	r3, r7, r3
    4524:	2201      	movs	r2, #1
    4526:	701a      	strb	r2, [r3, #0]
	BYTE last_ptr = 0;
    4528:	4b5e      	ldr	r3, [pc, #376]	; (46a4 <log_safe+0x1c0>)
    452a:	18fb      	adds	r3, r7, r3
    452c:	2200      	movs	r2, #0
    452e:	701a      	strb	r2, [r3, #0]
	BYTE* dst;
	
	while(1)	
	{
		if (ptr == CELLS)											{ptr = 0; break;}//OVF
		if ((data.cell[last_ptr].indx + 1) != data.cell[ptr].indx)  { break;}
    4530:	4b5c      	ldr	r3, [pc, #368]	; (46a4 <log_safe+0x1c0>)
    4532:	18fb      	adds	r3, r7, r3
    4534:	781b      	ldrb	r3, [r3, #0]
    4536:	4a5c      	ldr	r2, [pc, #368]	; (46a8 <log_safe+0x1c4>)
    4538:	4956      	ldr	r1, [pc, #344]	; (4694 <log_safe+0x1b0>)
    453a:	468c      	mov	ip, r1
    453c:	44bc      	add	ip, r7
    453e:	4462      	add	r2, ip
    4540:	011b      	lsls	r3, r3, #4
    4542:	18d3      	adds	r3, r2, r3
    4544:	3308      	adds	r3, #8
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	1c5a      	adds	r2, r3, #1
    454a:	4b55      	ldr	r3, [pc, #340]	; (46a0 <log_safe+0x1bc>)
    454c:	18fb      	adds	r3, r7, r3
    454e:	781b      	ldrb	r3, [r3, #0]
    4550:	4955      	ldr	r1, [pc, #340]	; (46a8 <log_safe+0x1c4>)
    4552:	4850      	ldr	r0, [pc, #320]	; (4694 <log_safe+0x1b0>)
    4554:	4684      	mov	ip, r0
    4556:	44bc      	add	ip, r7
    4558:	4461      	add	r1, ip
    455a:	011b      	lsls	r3, r3, #4
    455c:	18cb      	adds	r3, r1, r3
    455e:	3308      	adds	r3, #8
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	429a      	cmp	r2, r3
    4564:	d10e      	bne.n	4584 <log_safe+0xa0>
		last_ptr++;	
    4566:	4b4f      	ldr	r3, [pc, #316]	; (46a4 <log_safe+0x1c0>)
    4568:	18fb      	adds	r3, r7, r3
    456a:	781a      	ldrb	r2, [r3, #0]
    456c:	4b4d      	ldr	r3, [pc, #308]	; (46a4 <log_safe+0x1c0>)
    456e:	18fb      	adds	r3, r7, r3
    4570:	3201      	adds	r2, #1
    4572:	701a      	strb	r2, [r3, #0]
		ptr++;	
    4574:	4b4a      	ldr	r3, [pc, #296]	; (46a0 <log_safe+0x1bc>)
    4576:	18fb      	adds	r3, r7, r3
    4578:	781a      	ldrb	r2, [r3, #0]
    457a:	4b49      	ldr	r3, [pc, #292]	; (46a0 <log_safe+0x1bc>)
    457c:	18fb      	adds	r3, r7, r3
    457e:	3201      	adds	r2, #1
    4580:	701a      	strb	r2, [r3, #0]
		if (ptr == CELLS)											{ptr = 0; break;}//OVF
    4582:	e7d5      	b.n	4530 <log_safe+0x4c>
		if ((data.cell[last_ptr].indx + 1) != data.cell[ptr].indx)  { break;}
    4584:	46c0      	nop			; (mov r8, r8)
	}
	data.cell[ptr].ip			= ip;
    4586:	4b46      	ldr	r3, [pc, #280]	; (46a0 <log_safe+0x1bc>)
    4588:	18fb      	adds	r3, r7, r3
    458a:	781a      	ldrb	r2, [r3, #0]
    458c:	4b46      	ldr	r3, [pc, #280]	; (46a8 <log_safe+0x1c4>)
    458e:	4941      	ldr	r1, [pc, #260]	; (4694 <log_safe+0x1b0>)
    4590:	468c      	mov	ip, r1
    4592:	44bc      	add	ip, r7
    4594:	4463      	add	r3, ip
    4596:	0112      	lsls	r2, r2, #4
    4598:	68b9      	ldr	r1, [r7, #8]
    459a:	50d1      	str	r1, [r2, r3]
	data.cell[ptr].times		= times;
    459c:	4b40      	ldr	r3, [pc, #256]	; (46a0 <log_safe+0x1bc>)
    459e:	18fb      	adds	r3, r7, r3
    45a0:	781b      	ldrb	r3, [r3, #0]
    45a2:	4a41      	ldr	r2, [pc, #260]	; (46a8 <log_safe+0x1c4>)
    45a4:	493b      	ldr	r1, [pc, #236]	; (4694 <log_safe+0x1b0>)
    45a6:	468c      	mov	ip, r1
    45a8:	44bc      	add	ip, r7
    45aa:	4462      	add	r2, ip
    45ac:	011b      	lsls	r3, r3, #4
    45ae:	18d3      	adds	r3, r2, r3
    45b0:	3304      	adds	r3, #4
    45b2:	687a      	ldr	r2, [r7, #4]
    45b4:	601a      	str	r2, [r3, #0]
	data.cell[ptr].indx			= data.cell[last_ptr].indx + 1;
    45b6:	4b3a      	ldr	r3, [pc, #232]	; (46a0 <log_safe+0x1bc>)
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	7818      	ldrb	r0, [r3, #0]
    45bc:	4b39      	ldr	r3, [pc, #228]	; (46a4 <log_safe+0x1c0>)
    45be:	18fb      	adds	r3, r7, r3
    45c0:	781b      	ldrb	r3, [r3, #0]
    45c2:	4a39      	ldr	r2, [pc, #228]	; (46a8 <log_safe+0x1c4>)
    45c4:	4933      	ldr	r1, [pc, #204]	; (4694 <log_safe+0x1b0>)
    45c6:	468c      	mov	ip, r1
    45c8:	44bc      	add	ip, r7
    45ca:	4462      	add	r2, ip
    45cc:	011b      	lsls	r3, r3, #4
    45ce:	18d3      	adds	r3, r2, r3
    45d0:	3308      	adds	r3, #8
    45d2:	681b      	ldr	r3, [r3, #0]
    45d4:	1c5a      	adds	r2, r3, #1
    45d6:	4b34      	ldr	r3, [pc, #208]	; (46a8 <log_safe+0x1c4>)
    45d8:	492e      	ldr	r1, [pc, #184]	; (4694 <log_safe+0x1b0>)
    45da:	1879      	adds	r1, r7, r1
    45dc:	18c9      	adds	r1, r1, r3
    45de:	0103      	lsls	r3, r0, #4
    45e0:	18cb      	adds	r3, r1, r3
    45e2:	3308      	adds	r3, #8
    45e4:	601a      	str	r2, [r3, #0]
	data.cell[ptr].operat_code	= operat_code;
    45e6:	4b2e      	ldr	r3, [pc, #184]	; (46a0 <log_safe+0x1bc>)
    45e8:	18fb      	adds	r3, r7, r3
    45ea:	781b      	ldrb	r3, [r3, #0]
    45ec:	4a2e      	ldr	r2, [pc, #184]	; (46a8 <log_safe+0x1c4>)
    45ee:	4929      	ldr	r1, [pc, #164]	; (4694 <log_safe+0x1b0>)
    45f0:	468c      	mov	ip, r1
    45f2:	44bc      	add	ip, r7
    45f4:	4462      	add	r2, ip
    45f6:	011b      	lsls	r3, r3, #4
    45f8:	18d3      	adds	r3, r2, r3
    45fa:	330c      	adds	r3, #12
    45fc:	4a26      	ldr	r2, [pc, #152]	; (4698 <log_safe+0x1b4>)
    45fe:	4925      	ldr	r1, [pc, #148]	; (4694 <log_safe+0x1b0>)
    4600:	468c      	mov	ip, r1
    4602:	44bc      	add	ip, r7
    4604:	4462      	add	r2, ip
    4606:	8812      	ldrh	r2, [r2, #0]
    4608:	801a      	strh	r2, [r3, #0]
	data.cell[ptr].version		= VERSION_B;
    460a:	4b25      	ldr	r3, [pc, #148]	; (46a0 <log_safe+0x1bc>)
    460c:	18fb      	adds	r3, r7, r3
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	4a25      	ldr	r2, [pc, #148]	; (46a8 <log_safe+0x1c4>)
    4612:	4920      	ldr	r1, [pc, #128]	; (4694 <log_safe+0x1b0>)
    4614:	468c      	mov	ip, r1
    4616:	44bc      	add	ip, r7
    4618:	4462      	add	r2, ip
    461a:	011b      	lsls	r3, r3, #4
    461c:	18d3      	adds	r3, r2, r3
    461e:	330e      	adds	r3, #14
    4620:	2204      	movs	r2, #4
    4622:	801a      	strh	r2, [r3, #0]
	
	dst = LOGS_ADDR + (ptr * CELL);
    4624:	4b1e      	ldr	r3, [pc, #120]	; (46a0 <log_safe+0x1bc>)
    4626:	18fb      	adds	r3, r7, r3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	011b      	lsls	r3, r3, #4
    462c:	22b0      	movs	r2, #176	; 0xb0
    462e:	0292      	lsls	r2, r2, #10
    4630:	4694      	mov	ip, r2
    4632:	4463      	add	r3, ip
    4634:	4a1d      	ldr	r2, [pc, #116]	; (46ac <log_safe+0x1c8>)
    4636:	18ba      	adds	r2, r7, r2
    4638:	6013      	str	r3, [r2, #0]
		
	if ((ptr % 16) == 0) 
    463a:	4b19      	ldr	r3, [pc, #100]	; (46a0 <log_safe+0x1bc>)
    463c:	18fb      	adds	r3, r7, r3
    463e:	781b      	ldrb	r3, [r3, #0]
    4640:	220f      	movs	r2, #15
    4642:	4013      	ands	r3, r2
    4644:	b2db      	uxtb	r3, r3
    4646:	2b00      	cmp	r3, #0
    4648:	d10c      	bne.n	4664 <log_safe+0x180>
	{
		flash_erase_row(LOGS_ADDR + ((ptr/CELL) * BLOCK));
    464a:	4b15      	ldr	r3, [pc, #84]	; (46a0 <log_safe+0x1bc>)
    464c:	18fb      	adds	r3, r7, r3
    464e:	781b      	ldrb	r3, [r3, #0]
    4650:	091b      	lsrs	r3, r3, #4
    4652:	b2db      	uxtb	r3, r3
    4654:	021b      	lsls	r3, r3, #8
    4656:	22b0      	movs	r2, #176	; 0xb0
    4658:	0292      	lsls	r2, r2, #10
    465a:	4694      	mov	ip, r2
    465c:	4463      	add	r3, ip
    465e:	0018      	movs	r0, r3
    4660:	4b13      	ldr	r3, [pc, #76]	; (46b0 <log_safe+0x1cc>)
    4662:	4798      	blx	r3
	} 
	flash_write(dst, &data.cell[ptr].ip, 16);
    4664:	4b11      	ldr	r3, [pc, #68]	; (46ac <log_safe+0x1c8>)
    4666:	18fb      	adds	r3, r7, r3
    4668:	6818      	ldr	r0, [r3, #0]
    466a:	4b0d      	ldr	r3, [pc, #52]	; (46a0 <log_safe+0x1bc>)
    466c:	18fb      	adds	r3, r7, r3
    466e:	781b      	ldrb	r3, [r3, #0]
    4670:	2210      	movs	r2, #16
    4672:	18ba      	adds	r2, r7, r2
    4674:	011b      	lsls	r3, r3, #4
    4676:	18d3      	adds	r3, r2, r3
    4678:	2210      	movs	r2, #16
    467a:	0019      	movs	r1, r3
    467c:	4b0d      	ldr	r3, [pc, #52]	; (46b4 <log_safe+0x1d0>)
    467e:	4798      	blx	r3
}
    4680:	46c0      	nop			; (mov r8, r8)
    4682:	46bd      	mov	sp, r7
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <log_safe+0x1b0>)
    4686:	449d      	add	sp, r3
    4688:	bd80      	pop	{r7, pc}
    468a:	46c0      	nop			; (mov r8, r8)
    468c:	ffffefe8 	.word	0xffffefe8
    4690:	ffffeff7 	.word	0xffffeff7
    4694:	00001018 	.word	0x00001018
    4698:	ffffeff4 	.word	0xffffeff4
    469c:	00006995 	.word	0x00006995
    46a0:	00001017 	.word	0x00001017
    46a4:	00001016 	.word	0x00001016
    46a8:	ffffeff8 	.word	0xffffeff8
    46ac:	00001010 	.word	0x00001010
    46b0:	00006a1d 	.word	0x00006a1d
    46b4:	000067d9 	.word	0x000067d9

000046b8 <log_clear>:

void log_clear()
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b082      	sub	sp, #8
    46bc:	af00      	add	r7, sp, #0
	for (BYTE i = 0; i < 16; i++)	
    46be:	1dfb      	adds	r3, r7, #7
    46c0:	2200      	movs	r2, #0
    46c2:	701a      	strb	r2, [r3, #0]
    46c4:	e01c      	b.n	4700 <log_clear+0x48>
	{
		if(!flash_empty(LOGS_ADDR + (i * 256), 256))	
    46c6:	1dfb      	adds	r3, r7, #7
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	021b      	lsls	r3, r3, #8
    46cc:	22b0      	movs	r2, #176	; 0xb0
    46ce:	0292      	lsls	r2, r2, #10
    46d0:	189a      	adds	r2, r3, r2
    46d2:	2380      	movs	r3, #128	; 0x80
    46d4:	005b      	lsls	r3, r3, #1
    46d6:	0019      	movs	r1, r3
    46d8:	0010      	movs	r0, r2
    46da:	4b0d      	ldr	r3, [pc, #52]	; (4710 <log_clear+0x58>)
    46dc:	4798      	blx	r3
    46de:	1e03      	subs	r3, r0, #0
    46e0:	d109      	bne.n	46f6 <log_clear+0x3e>
		{flash_erase_page(LOGS_ADDR + (i * 256));}	
    46e2:	1dfb      	adds	r3, r7, #7
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	021b      	lsls	r3, r3, #8
    46e8:	22b0      	movs	r2, #176	; 0xb0
    46ea:	0292      	lsls	r2, r2, #10
    46ec:	4694      	mov	ip, r2
    46ee:	4463      	add	r3, ip
    46f0:	0018      	movs	r0, r3
    46f2:	4b08      	ldr	r3, [pc, #32]	; (4714 <log_clear+0x5c>)
    46f4:	4798      	blx	r3
	for (BYTE i = 0; i < 16; i++)	
    46f6:	1dfb      	adds	r3, r7, #7
    46f8:	781a      	ldrb	r2, [r3, #0]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	3201      	adds	r2, #1
    46fe:	701a      	strb	r2, [r3, #0]
    4700:	1dfb      	adds	r3, r7, #7
    4702:	781b      	ldrb	r3, [r3, #0]
    4704:	2b0f      	cmp	r3, #15
    4706:	d9de      	bls.n	46c6 <log_clear+0xe>
	}
}
    4708:	46c0      	nop			; (mov r8, r8)
    470a:	46bd      	mov	sp, r7
    470c:	b002      	add	sp, #8
    470e:	bd80      	pop	{r7, pc}
    4710:	00006745 	.word	0x00006745
    4714:	0000678b 	.word	0x0000678b

00004718 <num_to_byte>:
#include "def.h"


BYTE num_to_byte(DWORD num, BYTE len, BYTE* dst, BYTE side)//write number as bite line
{
    4718:	b580      	push	{r7, lr}
    471a:	b086      	sub	sp, #24
    471c:	af00      	add	r7, sp, #0
    471e:	60f8      	str	r0, [r7, #12]
    4720:	0008      	movs	r0, r1
    4722:	607a      	str	r2, [r7, #4]
    4724:	0019      	movs	r1, r3
    4726:	230b      	movs	r3, #11
    4728:	18fb      	adds	r3, r7, r3
    472a:	1c02      	adds	r2, r0, #0
    472c:	701a      	strb	r2, [r3, #0]
    472e:	230a      	movs	r3, #10
    4730:	18fb      	adds	r3, r7, r3
    4732:	1c0a      	adds	r2, r1, #0
    4734:	701a      	strb	r2, [r3, #0]
	BYTE i = 0;
    4736:	2317      	movs	r3, #23
    4738:	18fb      	adds	r3, r7, r3
    473a:	2200      	movs	r2, #0
    473c:	701a      	strb	r2, [r3, #0]
	if((len != W_LEN)    &&  (len != DW_LEN))         {return LEN_ERR;}
    473e:	230b      	movs	r3, #11
    4740:	18fb      	adds	r3, r7, r3
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	2b02      	cmp	r3, #2
    4746:	d006      	beq.n	4756 <num_to_byte+0x3e>
    4748:	230b      	movs	r3, #11
    474a:	18fb      	adds	r3, r7, r3
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	2b04      	cmp	r3, #4
    4750:	d001      	beq.n	4756 <num_to_byte+0x3e>
    4752:	2365      	movs	r3, #101	; 0x65
    4754:	e042      	b.n	47dc <num_to_byte+0xc4>
	if((side != L_SIDE)  &&  (side != R_SIDE))     {return SIDE_ERR;}
    4756:	230a      	movs	r3, #10
    4758:	18fb      	adds	r3, r7, r3
    475a:	781b      	ldrb	r3, [r3, #0]
    475c:	2b01      	cmp	r3, #1
    475e:	d006      	beq.n	476e <num_to_byte+0x56>
    4760:	230a      	movs	r3, #10
    4762:	18fb      	adds	r3, r7, r3
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	2b00      	cmp	r3, #0
    4768:	d001      	beq.n	476e <num_to_byte+0x56>
    476a:	2366      	movs	r3, #102	; 0x66
    476c:	e036      	b.n	47dc <num_to_byte+0xc4>

	for (i = 0; i < len; i++)
    476e:	2317      	movs	r3, #23
    4770:	18fb      	adds	r3, r7, r3
    4772:	2200      	movs	r2, #0
    4774:	701a      	strb	r2, [r3, #0]
    4776:	e028      	b.n	47ca <num_to_byte+0xb2>
	{
		if(side)    {*dst = num >> (( 8 * (len - 1 ) ) - ( i * 8 ));}
    4778:	230a      	movs	r3, #10
    477a:	18fb      	adds	r3, r7, r3
    477c:	781b      	ldrb	r3, [r3, #0]
    477e:	2b00      	cmp	r3, #0
    4780:	d00f      	beq.n	47a2 <num_to_byte+0x8a>
    4782:	230b      	movs	r3, #11
    4784:	18fb      	adds	r3, r7, r3
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	1e5a      	subs	r2, r3, #1
    478a:	2317      	movs	r3, #23
    478c:	18fb      	adds	r3, r7, r3
    478e:	781b      	ldrb	r3, [r3, #0]
    4790:	1ad3      	subs	r3, r2, r3
    4792:	00db      	lsls	r3, r3, #3
    4794:	68fa      	ldr	r2, [r7, #12]
    4796:	40da      	lsrs	r2, r3
    4798:	0013      	movs	r3, r2
    479a:	b2da      	uxtb	r2, r3
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	701a      	strb	r2, [r3, #0]
    47a0:	e009      	b.n	47b6 <num_to_byte+0x9e>
		else        {*dst = num >> ( i * 8 );}
    47a2:	2317      	movs	r3, #23
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	00db      	lsls	r3, r3, #3
    47aa:	68fa      	ldr	r2, [r7, #12]
    47ac:	40da      	lsrs	r2, r3
    47ae:	0013      	movs	r3, r2
    47b0:	b2da      	uxtb	r2, r3
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	701a      	strb	r2, [r3, #0]
		dst++;
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	3301      	adds	r3, #1
    47ba:	607b      	str	r3, [r7, #4]
	for (i = 0; i < len; i++)
    47bc:	2317      	movs	r3, #23
    47be:	18fb      	adds	r3, r7, r3
    47c0:	781a      	ldrb	r2, [r3, #0]
    47c2:	2317      	movs	r3, #23
    47c4:	18fb      	adds	r3, r7, r3
    47c6:	3201      	adds	r2, #1
    47c8:	701a      	strb	r2, [r3, #0]
    47ca:	2317      	movs	r3, #23
    47cc:	18fa      	adds	r2, r7, r3
    47ce:	230b      	movs	r3, #11
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	7812      	ldrb	r2, [r2, #0]
    47d4:	781b      	ldrb	r3, [r3, #0]
    47d6:	429a      	cmp	r2, r3
    47d8:	d3ce      	bcc.n	4778 <num_to_byte+0x60>
	}
	return SUCCESS;
    47da:	2300      	movs	r3, #0
}
    47dc:	0018      	movs	r0, r3
    47de:	46bd      	mov	sp, r7
    47e0:	b006      	add	sp, #24
    47e2:	bd80      	pop	{r7, pc}

000047e4 <num_aus_byte>:
DWORD num_aus_byte(BYTE len, BYTE* src, BYTE side)//read bite line as number
{
    47e4:	b580      	push	{r7, lr}
    47e6:	b084      	sub	sp, #16
    47e8:	af00      	add	r7, sp, #0
    47ea:	6039      	str	r1, [r7, #0]
    47ec:	0011      	movs	r1, r2
    47ee:	1dfb      	adds	r3, r7, #7
    47f0:	1c02      	adds	r2, r0, #0
    47f2:	701a      	strb	r2, [r3, #0]
    47f4:	1dbb      	adds	r3, r7, #6
    47f6:	1c0a      	adds	r2, r1, #0
    47f8:	701a      	strb	r2, [r3, #0]
	DWORD num = 0;
    47fa:	2300      	movs	r3, #0
    47fc:	60fb      	str	r3, [r7, #12]
	BYTE i = 0;
    47fe:	230b      	movs	r3, #11
    4800:	18fb      	adds	r3, r7, r3
    4802:	2200      	movs	r2, #0
    4804:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < len;i++)
    4806:	230b      	movs	r3, #11
    4808:	18fb      	adds	r3, r7, r3
    480a:	2200      	movs	r2, #0
    480c:	701a      	strb	r2, [r3, #0]
    480e:	e02c      	b.n	486a <num_aus_byte+0x86>
	{
		if(side)    {num += *src << (((len - 1) * 8) - (i * 8));}
    4810:	1dbb      	adds	r3, r7, #6
    4812:	781b      	ldrb	r3, [r3, #0]
    4814:	2b00      	cmp	r3, #0
    4816:	d011      	beq.n	483c <num_aus_byte+0x58>
    4818:	683b      	ldr	r3, [r7, #0]
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	0019      	movs	r1, r3
    481e:	1dfb      	adds	r3, r7, #7
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	1e5a      	subs	r2, r3, #1
    4824:	230b      	movs	r3, #11
    4826:	18fb      	adds	r3, r7, r3
    4828:	781b      	ldrb	r3, [r3, #0]
    482a:	1ad3      	subs	r3, r2, r3
    482c:	00db      	lsls	r3, r3, #3
    482e:	4099      	lsls	r1, r3
    4830:	000b      	movs	r3, r1
    4832:	001a      	movs	r2, r3
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	189b      	adds	r3, r3, r2
    4838:	60fb      	str	r3, [r7, #12]
    483a:	e00c      	b.n	4856 <num_aus_byte+0x72>
		else        {num += *src << ( i * 8 );}
    483c:	683b      	ldr	r3, [r7, #0]
    483e:	781b      	ldrb	r3, [r3, #0]
    4840:	001a      	movs	r2, r3
    4842:	230b      	movs	r3, #11
    4844:	18fb      	adds	r3, r7, r3
    4846:	781b      	ldrb	r3, [r3, #0]
    4848:	00db      	lsls	r3, r3, #3
    484a:	409a      	lsls	r2, r3
    484c:	0013      	movs	r3, r2
    484e:	001a      	movs	r2, r3
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	189b      	adds	r3, r3, r2
    4854:	60fb      	str	r3, [r7, #12]
		src++;
    4856:	683b      	ldr	r3, [r7, #0]
    4858:	3301      	adds	r3, #1
    485a:	603b      	str	r3, [r7, #0]
	for (i = 0; i < len;i++)
    485c:	230b      	movs	r3, #11
    485e:	18fb      	adds	r3, r7, r3
    4860:	781a      	ldrb	r2, [r3, #0]
    4862:	230b      	movs	r3, #11
    4864:	18fb      	adds	r3, r7, r3
    4866:	3201      	adds	r2, #1
    4868:	701a      	strb	r2, [r3, #0]
    486a:	230b      	movs	r3, #11
    486c:	18fa      	adds	r2, r7, r3
    486e:	1dfb      	adds	r3, r7, #7
    4870:	7812      	ldrb	r2, [r2, #0]
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	429a      	cmp	r2, r3
    4876:	d3cb      	bcc.n	4810 <num_aus_byte+0x2c>
	}
	return num;
    4878:	68fb      	ldr	r3, [r7, #12]
}
    487a:	0018      	movs	r0, r3
    487c:	46bd      	mov	sp, r7
    487e:	b004      	add	sp, #16
    4880:	bd80      	pop	{r7, pc}

00004882 <SRAV>:

BYTE SRAV(BYTE len, BYTE* buf1, BYTE* buf2)//BUF1 = BUF2 ? True-1,F-0;
{	
    4882:	b580      	push	{r7, lr}
    4884:	b086      	sub	sp, #24
    4886:	af00      	add	r7, sp, #0
    4888:	60b9      	str	r1, [r7, #8]
    488a:	607a      	str	r2, [r7, #4]
    488c:	230f      	movs	r3, #15
    488e:	18fb      	adds	r3, r7, r3
    4890:	1c02      	adds	r2, r0, #0
    4892:	701a      	strb	r2, [r3, #0]
	BYTE i = 0;
    4894:	2317      	movs	r3, #23
    4896:	18fb      	adds	r3, r7, r3
    4898:	2200      	movs	r2, #0
    489a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < len; i++)	
    489c:	2317      	movs	r3, #23
    489e:	18fb      	adds	r3, r7, r3
    48a0:	2200      	movs	r2, #0
    48a2:	701a      	strb	r2, [r3, #0]
    48a4:	e012      	b.n	48cc <SRAV+0x4a>
	{	
		if(*buf1++ != *buf2++) 		{return FALSE;}	
    48a6:	68bb      	ldr	r3, [r7, #8]
    48a8:	1c5a      	adds	r2, r3, #1
    48aa:	60ba      	str	r2, [r7, #8]
    48ac:	781a      	ldrb	r2, [r3, #0]
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	1c59      	adds	r1, r3, #1
    48b2:	6079      	str	r1, [r7, #4]
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	429a      	cmp	r2, r3
    48b8:	d001      	beq.n	48be <SRAV+0x3c>
    48ba:	2300      	movs	r3, #0
    48bc:	e00f      	b.n	48de <SRAV+0x5c>
	for(i = 0; i < len; i++)	
    48be:	2317      	movs	r3, #23
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	781a      	ldrb	r2, [r3, #0]
    48c4:	2317      	movs	r3, #23
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	3201      	adds	r2, #1
    48ca:	701a      	strb	r2, [r3, #0]
    48cc:	2317      	movs	r3, #23
    48ce:	18fa      	adds	r2, r7, r3
    48d0:	230f      	movs	r3, #15
    48d2:	18fb      	adds	r3, r7, r3
    48d4:	7812      	ldrb	r2, [r2, #0]
    48d6:	781b      	ldrb	r3, [r3, #0]
    48d8:	429a      	cmp	r2, r3
    48da:	d3e4      	bcc.n	48a6 <SRAV+0x24>
	}
	return TRUE;	
    48dc:	2301      	movs	r3, #1
}
    48de:	0018      	movs	r0, r3
    48e0:	46bd      	mov	sp, r7
    48e2:	b006      	add	sp, #24
    48e4:	bd80      	pop	{r7, pc}
	...

000048e8 <cmd_process>:

#define CM2_STATUS_PACK 0x02
#define UID_STATUS_PACK 0x8002

void cmd_process(void)
{
    48e8:	b580      	push	{r7, lr}
    48ea:	af00      	add	r7, sp, #0
	cmd_common_process ();
    48ec:	f000 f805 	bl	48fa <cmd_common_process>
	cmd_usart_process ();
    48f0:	f000 ff6c 	bl	57cc <cmd_usart_process>
}
    48f4:	46c0      	nop			; (mov r8, r8)
    48f6:	46bd      	mov	sp, r7
    48f8:	bd80      	pop	{r7, pc}

000048fa <cmd_common_process>:


void cmd_common_process (void)
{
    48fa:	b590      	push	{r4, r7, lr}
    48fc:	b085      	sub	sp, #20
    48fe:	af00      	add	r7, sp, #0
	WORD	size	= 0;
    4900:	230e      	movs	r3, #14
    4902:	18fb      	adds	r3, r7, r3
    4904:	2200      	movs	r2, #0
    4906:	801a      	strh	r2, [r3, #0]
	WORD	addr	= 0;
    4908:	1dbb      	adds	r3, r7, #6
    490a:	2200      	movs	r2, #0
    490c:	801a      	strh	r2, [r3, #0]
	WORD	cnt		= 0;
    490e:	230c      	movs	r3, #12
    4910:	18fb      	adds	r3, r7, r3
    4912:	2200      	movs	r2, #0
    4914:	801a      	strh	r2, [r3, #0]
	WORD	wn		= 0;
    4916:	230a      	movs	r3, #10
    4918:	18fb      	adds	r3, r7, r3
    491a:	2200      	movs	r2, #0
    491c:	801a      	strh	r2, [r3, #0]
	WORD	cs		= 0;
    491e:	1d3b      	adds	r3, r7, #4
    4920:	2200      	movs	r2, #0
    4922:	801a      	strh	r2, [r3, #0]
	BYTE	i		= 0;
    4924:	2309      	movs	r3, #9
    4926:	18fb      	adds	r3, r7, r3
    4928:	2200      	movs	r2, #0
    492a:	701a      	strb	r2, [r3, #0]
	WORD	ixo		= 0;
    492c:	1cbb      	adds	r3, r7, #2
    492e:	2200      	movs	r2, #0
    4930:	801a      	strh	r2, [r3, #0]
	BYTE	ch		= 0;
    4932:	2308      	movs	r3, #8
    4934:	18fb      	adds	r3, r7, r3
    4936:	2200      	movs	r2, #0
    4938:	701a      	strb	r2, [r3, #0]
	
	if (log_stat == 1)	
    493a:	4b98      	ldr	r3, [pc, #608]	; (4b9c <cmd_common_process+0x2a2>)
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	b2db      	uxtb	r3, r3
    4940:	2b01      	cmp	r3, #1
    4942:	d107      	bne.n	4954 <cmd_common_process+0x5a>
	{
		if (loggin_timeout > (3010000)) 
    4944:	4b96      	ldr	r3, [pc, #600]	; (4ba0 <cmd_common_process+0x2a6>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	4a96      	ldr	r2, [pc, #600]	; (4ba4 <cmd_common_process+0x2aa>)
    494a:	4293      	cmp	r3, r2
    494c:	d902      	bls.n	4954 <cmd_common_process+0x5a>
		{log_stat = 0;}
    494e:	4b93      	ldr	r3, [pc, #588]	; (4b9c <cmd_common_process+0x2a2>)
    4950:	2200      	movs	r2, #0
    4952:	701a      	strb	r2, [r3, #0]
	}
			
	if(eth_sock[0].r_status==FALSE) {return;}
    4954:	4b94      	ldr	r3, [pc, #592]	; (4ba8 <cmd_common_process+0x2ae>)
    4956:	4a95      	ldr	r2, [pc, #596]	; (4bac <cmd_common_process+0x2b2>)
    4958:	5c9b      	ldrb	r3, [r3, r2]
    495a:	2b00      	cmp	r3, #0
    495c:	d101      	bne.n	4962 <cmd_common_process+0x68>
    495e:	f000 ff01 	bl	5764 <cmd_common_process+0xe6a>
	eth_sock[0].r_status=FALSE;
    4962:	4b91      	ldr	r3, [pc, #580]	; (4ba8 <cmd_common_process+0x2ae>)
    4964:	4a91      	ldr	r2, [pc, #580]	; (4bac <cmd_common_process+0x2b2>)
    4966:	2100      	movs	r1, #0
    4968:	5499      	strb	r1, [r3, r2]

	size=((eth_sock[0].len[0]<<8) | (eth_sock[0].len[1]));
    496a:	4b8f      	ldr	r3, [pc, #572]	; (4ba8 <cmd_common_process+0x2ae>)
    496c:	799b      	ldrb	r3, [r3, #6]
    496e:	021b      	lsls	r3, r3, #8
    4970:	b21a      	sxth	r2, r3
    4972:	4b8d      	ldr	r3, [pc, #564]	; (4ba8 <cmd_common_process+0x2ae>)
    4974:	79db      	ldrb	r3, [r3, #7]
    4976:	b21b      	sxth	r3, r3
    4978:	4313      	orrs	r3, r2
    497a:	b21a      	sxth	r2, r3
    497c:	230e      	movs	r3, #14
    497e:	18fb      	adds	r3, r7, r3
    4980:	801a      	strh	r2, [r3, #0]
	
	if(size	 <    5			  )	{ return; }
    4982:	230e      	movs	r3, #14
    4984:	18fb      	adds	r3, r7, r3
    4986:	881b      	ldrh	r3, [r3, #0]
    4988:	2b04      	cmp	r3, #4
    498a:	d801      	bhi.n	4990 <cmd_common_process+0x96>
    498c:	f000 feec 	bl	5768 <cmd_common_process+0xe6e>
	
	if(size  >    sizeof(cbuf))	{size=sizeof(cbuf);}
    4990:	230e      	movs	r3, #14
    4992:	18fb      	adds	r3, r7, r3
    4994:	881a      	ldrh	r2, [r3, #0]
    4996:	2396      	movs	r3, #150	; 0x96
    4998:	005b      	lsls	r3, r3, #1
    499a:	429a      	cmp	r2, r3
    499c:	d904      	bls.n	49a8 <cmd_common_process+0xae>
    499e:	230e      	movs	r3, #14
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	2296      	movs	r2, #150	; 0x96
    49a4:	0052      	lsls	r2, r2, #1
    49a6:	801a      	strh	r2, [r3, #0]
	memcpy(cbuf,(BYTE*)&eth_sock[0].data,size);
    49a8:	230e      	movs	r3, #14
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	881a      	ldrh	r2, [r3, #0]
    49ae:	4980      	ldr	r1, [pc, #512]	; (4bb0 <cmd_common_process+0x2b6>)
    49b0:	4b80      	ldr	r3, [pc, #512]	; (4bb4 <cmd_common_process+0x2ba>)
    49b2:	0018      	movs	r0, r3
    49b4:	4b80      	ldr	r3, [pc, #512]	; (4bb8 <cmd_common_process+0x2be>)
    49b6:	4798      	blx	r3

	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    49b8:	230e      	movs	r3, #14
    49ba:	18fb      	adds	r3, r7, r3
    49bc:	881a      	ldrh	r2, [r3, #0]
    49be:	4b7d      	ldr	r3, [pc, #500]	; (4bb4 <cmd_common_process+0x2ba>)
    49c0:	0011      	movs	r1, r2
    49c2:	0018      	movs	r0, r3
    49c4:	4b7d      	ldr	r3, [pc, #500]	; (4bbc <cmd_common_process+0x2c2>)
    49c6:	4798      	blx	r3
    49c8:	1e03      	subs	r3, r0, #0
    49ca:	d001      	beq.n	49d0 <cmd_common_process+0xd6>
    49cc:	f000 fece 	bl	576c <cmd_common_process+0xe72>
	
	addr  = *(__packed WORD*)(cbuf+0);      wn=+sizeof(WORD);
    49d0:	4a78      	ldr	r2, [pc, #480]	; (4bb4 <cmd_common_process+0x2ba>)
    49d2:	1dbb      	adds	r3, r7, #6
    49d4:	8812      	ldrh	r2, [r2, #0]
    49d6:	801a      	strh	r2, [r3, #0]
    49d8:	230a      	movs	r3, #10
    49da:	18fb      	adds	r3, r7, r3
    49dc:	2202      	movs	r2, #2
    49de:	801a      	strh	r2, [r3, #0]

	if(addr !=  0){return;}
    49e0:	1dbb      	adds	r3, r7, #6
    49e2:	881b      	ldrh	r3, [r3, #0]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d001      	beq.n	49ec <cmd_common_process+0xf2>
    49e8:	f000 fec2 	bl	5770 <cmd_common_process+0xe76>
	wn++;//cmd
    49ec:	230a      	movs	r3, #10
    49ee:	18fb      	adds	r3, r7, r3
    49f0:	881a      	ldrh	r2, [r3, #0]
    49f2:	230a      	movs	r3, #10
    49f4:	18fb      	adds	r3, r7, r3
    49f6:	3201      	adds	r2, #1
    49f8:	801a      	strh	r2, [r3, #0]
//logging
	if (!SRAV(4, &eth_sock[0].ip_addr[0], &ip_addrs)) {log_stat = 0;}
    49fa:	4a71      	ldr	r2, [pc, #452]	; (4bc0 <cmd_common_process+0x2c6>)
    49fc:	4b6a      	ldr	r3, [pc, #424]	; (4ba8 <cmd_common_process+0x2ae>)
    49fe:	0019      	movs	r1, r3
    4a00:	2004      	movs	r0, #4
    4a02:	4b70      	ldr	r3, [pc, #448]	; (4bc4 <cmd_common_process+0x2ca>)
    4a04:	4798      	blx	r3
    4a06:	1e03      	subs	r3, r0, #0
    4a08:	d102      	bne.n	4a10 <cmd_common_process+0x116>
    4a0a:	4b64      	ldr	r3, [pc, #400]	; (4b9c <cmd_common_process+0x2a2>)
    4a0c:	2200      	movs	r2, #0
    4a0e:	701a      	strb	r2, [r3, #0]

	if ( ( (cbuf[2] != 0x00) && (cbuf[2] != 0x20) && (cbuf[2] != 0x10) ) && (!log_stat) ) 
    4a10:	4b68      	ldr	r3, [pc, #416]	; (4bb4 <cmd_common_process+0x2ba>)
    4a12:	789b      	ldrb	r3, [r3, #2]
    4a14:	2b00      	cmp	r3, #0
    4a16:	d00e      	beq.n	4a36 <cmd_common_process+0x13c>
    4a18:	4b66      	ldr	r3, [pc, #408]	; (4bb4 <cmd_common_process+0x2ba>)
    4a1a:	789b      	ldrb	r3, [r3, #2]
    4a1c:	2b20      	cmp	r3, #32
    4a1e:	d00a      	beq.n	4a36 <cmd_common_process+0x13c>
    4a20:	4b64      	ldr	r3, [pc, #400]	; (4bb4 <cmd_common_process+0x2ba>)
    4a22:	789b      	ldrb	r3, [r3, #2]
    4a24:	2b10      	cmp	r3, #16
    4a26:	d006      	beq.n	4a36 <cmd_common_process+0x13c>
    4a28:	4b5c      	ldr	r3, [pc, #368]	; (4b9c <cmd_common_process+0x2a2>)
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	b2db      	uxtb	r3, r3
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d101      	bne.n	4a36 <cmd_common_process+0x13c>
    4a32:	f000 fe9f 	bl	5774 <cmd_common_process+0xe7a>
	{return 0;}
	
	
	
	
	switch(cbuf[2])
    4a36:	4b5f      	ldr	r3, [pc, #380]	; (4bb4 <cmd_common_process+0x2ba>)
    4a38:	789b      	ldrb	r3, [r3, #2]
    4a3a:	2b29      	cmp	r3, #41	; 0x29
    4a3c:	d901      	bls.n	4a42 <cmd_common_process+0x148>
    4a3e:	f000 fe9b 	bl	5778 <cmd_common_process+0xe7e>
    4a42:	009a      	lsls	r2, r3, #2
    4a44:	4b60      	ldr	r3, [pc, #384]	; (4bc8 <cmd_common_process+0x2ce>)
    4a46:	18d3      	adds	r3, r2, r3
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	469f      	mov	pc, r3
	{
		case 0x00:	if(size  !=  9) { return; }
    4a4c:	230e      	movs	r3, #14
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	881b      	ldrh	r3, [r3, #0]
    4a52:	2b09      	cmp	r3, #9
    4a54:	d001      	beq.n	4a5a <cmd_common_process+0x160>
    4a56:	f000 fe91 	bl	577c <cmd_common_process+0xe82>
					rsv_time = num_aus_byte(DW_LEN, &cbuf[3], R_SIDE);
    4a5a:	4b5c      	ldr	r3, [pc, #368]	; (4bcc <cmd_common_process+0x2d2>)
    4a5c:	2200      	movs	r2, #0
    4a5e:	0019      	movs	r1, r3
    4a60:	2004      	movs	r0, #4
    4a62:	4b5b      	ldr	r3, [pc, #364]	; (4bd0 <cmd_common_process+0x2d6>)
    4a64:	4798      	blx	r3
    4a66:	0002      	movs	r2, r0
    4a68:	4b5a      	ldr	r3, [pc, #360]	; (4bd4 <cmd_common_process+0x2da>)
    4a6a:	601a      	str	r2, [r3, #0]
					loggin_timeout = 0;
    4a6c:	4b4c      	ldr	r3, [pc, #304]	; (4ba0 <cmd_common_process+0x2a6>)
    4a6e:	2200      	movs	r2, #0
    4a70:	601a      	str	r2, [r3, #0]
					send_admin();
    4a72:	230a      	movs	r3, #10
    4a74:	18fb      	adds	r3, r7, r3
    4a76:	881b      	ldrh	r3, [r3, #0]
    4a78:	4a4e      	ldr	r2, [pc, #312]	; (4bb4 <cmd_common_process+0x2ba>)
    4a7a:	2101      	movs	r1, #1
    4a7c:	54d1      	strb	r1, [r2, r3]
    4a7e:	230a      	movs	r3, #10
    4a80:	18fb      	adds	r3, r7, r3
    4a82:	881a      	ldrh	r2, [r3, #0]
    4a84:	230a      	movs	r3, #10
    4a86:	18fb      	adds	r3, r7, r3
    4a88:	3201      	adds	r2, #1
    4a8a:	801a      	strh	r2, [r3, #0]
		break;
    4a8c:	f000 fe15 	bl	56ba <cmd_common_process+0xdc0>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    4a90:	230e      	movs	r3, #14
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2b06      	cmp	r3, #6
    4a98:	d001      	beq.n	4a9e <cmd_common_process+0x1a4>
    4a9a:	f000 fe71 	bl	5780 <cmd_common_process+0xe86>
					if(cbuf[wn]==0x01)
    4a9e:	230a      	movs	r3, #10
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	881b      	ldrh	r3, [r3, #0]
    4aa4:	4a43      	ldr	r2, [pc, #268]	; (4bb4 <cmd_common_process+0x2ba>)
    4aa6:	5cd3      	ldrb	r3, [r2, r3]
    4aa8:	2b01      	cmp	r3, #1
    4aaa:	d13d      	bne.n	4b28 <cmd_common_process+0x22e>
					{
						cbuf[wn]  = (BYTE)UID_WHO_ARE_YOU;								wn += sizeof(BYTE);
    4aac:	230a      	movs	r3, #10
    4aae:	18fb      	adds	r3, r7, r3
    4ab0:	881b      	ldrh	r3, [r3, #0]
    4ab2:	4a40      	ldr	r2, [pc, #256]	; (4bb4 <cmd_common_process+0x2ba>)
    4ab4:	2101      	movs	r1, #1
    4ab6:	54d1      	strb	r1, [r2, r3]
    4ab8:	230a      	movs	r3, #10
    4aba:	18fb      	adds	r3, r7, r3
    4abc:	220a      	movs	r2, #10
    4abe:	18ba      	adds	r2, r7, r2
    4ac0:	8812      	ldrh	r2, [r2, #0]
    4ac2:	3201      	adds	r2, #1
    4ac4:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_WHO_ARE_YOU>>8);							wn += sizeof(BYTE);
    4ac6:	230a      	movs	r3, #10
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	881b      	ldrh	r3, [r3, #0]
    4acc:	4a39      	ldr	r2, [pc, #228]	; (4bb4 <cmd_common_process+0x2ba>)
    4ace:	2180      	movs	r1, #128	; 0x80
    4ad0:	54d1      	strb	r1, [r2, r3]
    4ad2:	230a      	movs	r3, #10
    4ad4:	18fb      	adds	r3, r7, r3
    4ad6:	220a      	movs	r2, #10
    4ad8:	18ba      	adds	r2, r7, r2
    4ada:	8812      	ldrh	r2, [r2, #0]
    4adc:	3201      	adds	r2, #1
    4ade:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],MODEL,sizeof(MODEL));							wn +=sizeof(MODEL);
    4ae0:	230a      	movs	r3, #10
    4ae2:	18fb      	adds	r3, r7, r3
    4ae4:	881a      	ldrh	r2, [r3, #0]
    4ae6:	4b33      	ldr	r3, [pc, #204]	; (4bb4 <cmd_common_process+0x2ba>)
    4ae8:	18d3      	adds	r3, r2, r3
    4aea:	493b      	ldr	r1, [pc, #236]	; (4bd8 <cmd_common_process+0x2de>)
    4aec:	220d      	movs	r2, #13
    4aee:	0018      	movs	r0, r3
    4af0:	4b31      	ldr	r3, [pc, #196]	; (4bb8 <cmd_common_process+0x2be>)
    4af2:	4798      	blx	r3
    4af4:	230a      	movs	r3, #10
    4af6:	18fb      	adds	r3, r7, r3
    4af8:	220a      	movs	r2, #10
    4afa:	18ba      	adds	r2, r7, r2
    4afc:	8812      	ldrh	r2, [r2, #0]
    4afe:	320d      	adds	r2, #13
    4b00:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],VERSION,sizeof(VERSION));						wn +=sizeof(VERSION);
    4b02:	230a      	movs	r3, #10
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	881a      	ldrh	r2, [r3, #0]
    4b08:	4b2a      	ldr	r3, [pc, #168]	; (4bb4 <cmd_common_process+0x2ba>)
    4b0a:	18d3      	adds	r3, r2, r3
    4b0c:	4933      	ldr	r1, [pc, #204]	; (4bdc <cmd_common_process+0x2e2>)
    4b0e:	2209      	movs	r2, #9
    4b10:	0018      	movs	r0, r3
    4b12:	4b29      	ldr	r3, [pc, #164]	; (4bb8 <cmd_common_process+0x2be>)
    4b14:	4798      	blx	r3
    4b16:	230a      	movs	r3, #10
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	220a      	movs	r2, #10
    4b1c:	18ba      	adds	r2, r7, r2
    4b1e:	8812      	ldrh	r2, [r2, #0]
    4b20:	3209      	adds	r2, #9
    4b22:	801a      	strh	r2, [r3, #0]
						break;
    4b24:	f000 fdc9 	bl	56ba <cmd_common_process+0xdc0>
					}
		
					if(cbuf[wn]==0x02)
    4b28:	230a      	movs	r3, #10
    4b2a:	18fb      	adds	r3, r7, r3
    4b2c:	881b      	ldrh	r3, [r3, #0]
    4b2e:	4a21      	ldr	r2, [pc, #132]	; (4bb4 <cmd_common_process+0x2ba>)
    4b30:	5cd3      	ldrb	r3, [r2, r3]
    4b32:	2b02      	cmp	r3, #2
    4b34:	d001      	beq.n	4b3a <cmd_common_process+0x240>
    4b36:	f000 fd8c 	bl	5652 <cmd_common_process+0xd58>
					{
						cbuf[wn]  = (BYTE)UID_STATUS_PACK;								wn += sizeof(BYTE);
    4b3a:	230a      	movs	r3, #10
    4b3c:	18fb      	adds	r3, r7, r3
    4b3e:	881b      	ldrh	r3, [r3, #0]
    4b40:	4a1c      	ldr	r2, [pc, #112]	; (4bb4 <cmd_common_process+0x2ba>)
    4b42:	2102      	movs	r1, #2
    4b44:	54d1      	strb	r1, [r2, r3]
    4b46:	230a      	movs	r3, #10
    4b48:	18fb      	adds	r3, r7, r3
    4b4a:	220a      	movs	r2, #10
    4b4c:	18ba      	adds	r2, r7, r2
    4b4e:	8812      	ldrh	r2, [r2, #0]
    4b50:	3201      	adds	r2, #1
    4b52:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_STATUS_PACK>>8);							wn += sizeof(BYTE); //uid device
    4b54:	230a      	movs	r3, #10
    4b56:	18fb      	adds	r3, r7, r3
    4b58:	881b      	ldrh	r3, [r3, #0]
    4b5a:	4a16      	ldr	r2, [pc, #88]	; (4bb4 <cmd_common_process+0x2ba>)
    4b5c:	2180      	movs	r1, #128	; 0x80
    4b5e:	54d1      	strb	r1, [r2, r3]
    4b60:	230a      	movs	r3, #10
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	220a      	movs	r2, #10
    4b66:	18ba      	adds	r2, r7, r2
    4b68:	8812      	ldrh	r2, [r2, #0]
    4b6a:	3201      	adds	r2, #1
    4b6c:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],(BYTE*)&TTL,4);								wn += sizeof(DWORD);//TTL
    4b6e:	230a      	movs	r3, #10
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	881a      	ldrh	r2, [r3, #0]
    4b74:	4b0f      	ldr	r3, [pc, #60]	; (4bb4 <cmd_common_process+0x2ba>)
    4b76:	18d3      	adds	r3, r2, r3
    4b78:	4919      	ldr	r1, [pc, #100]	; (4be0 <cmd_common_process+0x2e6>)
    4b7a:	2204      	movs	r2, #4
    4b7c:	0018      	movs	r0, r3
    4b7e:	4b0e      	ldr	r3, [pc, #56]	; (4bb8 <cmd_common_process+0x2be>)
    4b80:	4798      	blx	r3
    4b82:	230a      	movs	r3, #10
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	220a      	movs	r2, #10
    4b88:	18ba      	adds	r2, r7, r2
    4b8a:	8812      	ldrh	r2, [r2, #0]
    4b8c:	3204      	adds	r2, #4
    4b8e:	801a      	strh	r2, [r3, #0]
			
						for (i = 0; i < 4; i++)
    4b90:	2309      	movs	r3, #9
    4b92:	18fb      	adds	r3, r7, r3
    4b94:	2200      	movs	r2, #0
    4b96:	701a      	strb	r2, [r3, #0]
    4b98:	e0ba      	b.n	4d10 <cmd_common_process+0x416>
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	20000450 	.word	0x20000450
    4ba0:	20000470 	.word	0x20000470
    4ba4:	002dedd0 	.word	0x002dedd0
    4ba8:	200005cc 	.word	0x200005cc
    4bac:	000005d1 	.word	0x000005d1
    4bb0:	200005d4 	.word	0x200005d4
    4bb4:	200004a0 	.word	0x200004a0
    4bb8:	0000c8b9 	.word	0x0000c8b9
    4bbc:	00005d45 	.word	0x00005d45
    4bc0:	2000049c 	.word	0x2000049c
    4bc4:	00004883 	.word	0x00004883
    4bc8:	0000cb54 	.word	0x0000cb54
    4bcc:	200004a3 	.word	0x200004a3
    4bd0:	000047e5 	.word	0x000047e5
    4bd4:	20000454 	.word	0x20000454
    4bd8:	0000cb38 	.word	0x0000cb38
    4bdc:	0000cb48 	.word	0x0000cb48
    4be0:	2000047c 	.word	0x2000047c
							{
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.rx,4);		wn += sizeof(DWORD);
    4be4:	230a      	movs	r3, #10
    4be6:	18fb      	adds	r3, r7, r3
    4be8:	881a      	ldrh	r2, [r3, #0]
    4bea:	4bd2      	ldr	r3, [pc, #840]	; (4f34 <cmd_common_process+0x63a>)
    4bec:	18d0      	adds	r0, r2, r3
    4bee:	2309      	movs	r3, #9
    4bf0:	18fb      	adds	r3, r7, r3
    4bf2:	781b      	ldrb	r3, [r3, #0]
    4bf4:	3301      	adds	r3, #1
    4bf6:	4ad0      	ldr	r2, [pc, #832]	; (4f38 <cmd_common_process+0x63e>)
    4bf8:	4353      	muls	r3, r2
    4bfa:	22ba      	movs	r2, #186	; 0xba
    4bfc:	00d2      	lsls	r2, r2, #3
    4bfe:	189a      	adds	r2, r3, r2
    4c00:	4bce      	ldr	r3, [pc, #824]	; (4f3c <cmd_common_process+0x642>)
    4c02:	18d3      	adds	r3, r2, r3
    4c04:	330b      	adds	r3, #11
    4c06:	2204      	movs	r2, #4
    4c08:	0019      	movs	r1, r3
    4c0a:	4bcd      	ldr	r3, [pc, #820]	; (4f40 <cmd_common_process+0x646>)
    4c0c:	4798      	blx	r3
    4c0e:	230a      	movs	r3, #10
    4c10:	18fb      	adds	r3, r7, r3
    4c12:	220a      	movs	r2, #10
    4c14:	18ba      	adds	r2, r7, r2
    4c16:	8812      	ldrh	r2, [r2, #0]
    4c18:	3204      	adds	r2, #4
    4c1a:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.tx,4);		wn += sizeof(DWORD);
    4c1c:	230a      	movs	r3, #10
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	881a      	ldrh	r2, [r3, #0]
    4c22:	4bc4      	ldr	r3, [pc, #784]	; (4f34 <cmd_common_process+0x63a>)
    4c24:	18d0      	adds	r0, r2, r3
    4c26:	2309      	movs	r3, #9
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	3301      	adds	r3, #1
    4c2e:	4ac2      	ldr	r2, [pc, #776]	; (4f38 <cmd_common_process+0x63e>)
    4c30:	4353      	muls	r3, r2
    4c32:	22ba      	movs	r2, #186	; 0xba
    4c34:	00d2      	lsls	r2, r2, #3
    4c36:	189a      	adds	r2, r3, r2
    4c38:	4bc0      	ldr	r3, [pc, #768]	; (4f3c <cmd_common_process+0x642>)
    4c3a:	18d3      	adds	r3, r2, r3
    4c3c:	3307      	adds	r3, #7
    4c3e:	2204      	movs	r2, #4
    4c40:	0019      	movs	r1, r3
    4c42:	4bbf      	ldr	r3, [pc, #764]	; (4f40 <cmd_common_process+0x646>)
    4c44:	4798      	blx	r3
    4c46:	230a      	movs	r3, #10
    4c48:	18fb      	adds	r3, r7, r3
    4c4a:	220a      	movs	r2, #10
    4c4c:	18ba      	adds	r2, r7, r2
    4c4e:	8812      	ldrh	r2, [r2, #0]
    4c50:	3204      	adds	r2, #4
    4c52:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.rx,4);			wn += sizeof(DWORD);
    4c54:	230a      	movs	r3, #10
    4c56:	18fb      	adds	r3, r7, r3
    4c58:	881a      	ldrh	r2, [r3, #0]
    4c5a:	4bb6      	ldr	r3, [pc, #728]	; (4f34 <cmd_common_process+0x63a>)
    4c5c:	18d0      	adds	r0, r2, r3
    4c5e:	2309      	movs	r3, #9
    4c60:	18fb      	adds	r3, r7, r3
    4c62:	781a      	ldrb	r2, [r3, #0]
    4c64:	0013      	movs	r3, r2
    4c66:	00db      	lsls	r3, r3, #3
    4c68:	189b      	adds	r3, r3, r2
    4c6a:	019b      	lsls	r3, r3, #6
    4c6c:	228c      	movs	r2, #140	; 0x8c
    4c6e:	0092      	lsls	r2, r2, #2
    4c70:	189a      	adds	r2, r3, r2
    4c72:	4bb4      	ldr	r3, [pc, #720]	; (4f44 <cmd_common_process+0x64a>)
    4c74:	18d3      	adds	r3, r2, r3
    4c76:	3308      	adds	r3, #8
    4c78:	2204      	movs	r2, #4
    4c7a:	0019      	movs	r1, r3
    4c7c:	4bb0      	ldr	r3, [pc, #704]	; (4f40 <cmd_common_process+0x646>)
    4c7e:	4798      	blx	r3
    4c80:	230a      	movs	r3, #10
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	220a      	movs	r2, #10
    4c86:	18ba      	adds	r2, r7, r2
    4c88:	8812      	ldrh	r2, [r2, #0]
    4c8a:	3204      	adds	r2, #4
    4c8c:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.tx,4);			wn += sizeof(DWORD);
    4c8e:	230a      	movs	r3, #10
    4c90:	18fb      	adds	r3, r7, r3
    4c92:	881a      	ldrh	r2, [r3, #0]
    4c94:	4ba7      	ldr	r3, [pc, #668]	; (4f34 <cmd_common_process+0x63a>)
    4c96:	18d0      	adds	r0, r2, r3
    4c98:	2309      	movs	r3, #9
    4c9a:	18fb      	adds	r3, r7, r3
    4c9c:	781a      	ldrb	r2, [r3, #0]
    4c9e:	0013      	movs	r3, r2
    4ca0:	00db      	lsls	r3, r3, #3
    4ca2:	189b      	adds	r3, r3, r2
    4ca4:	019b      	lsls	r3, r3, #6
    4ca6:	228c      	movs	r2, #140	; 0x8c
    4ca8:	0092      	lsls	r2, r2, #2
    4caa:	189a      	adds	r2, r3, r2
    4cac:	4ba5      	ldr	r3, [pc, #660]	; (4f44 <cmd_common_process+0x64a>)
    4cae:	18d3      	adds	r3, r2, r3
    4cb0:	3304      	adds	r3, #4
    4cb2:	2204      	movs	r2, #4
    4cb4:	0019      	movs	r1, r3
    4cb6:	4ba2      	ldr	r3, [pc, #648]	; (4f40 <cmd_common_process+0x646>)
    4cb8:	4798      	blx	r3
    4cba:	230a      	movs	r3, #10
    4cbc:	18fb      	adds	r3, r7, r3
    4cbe:	220a      	movs	r2, #10
    4cc0:	18ba      	adds	r2, r7, r2
    4cc2:	8812      	ldrh	r2, [r2, #0]
    4cc4:	3204      	adds	r2, #4
    4cc6:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].dt,2);						wn += sizeof(WORD);//dt port0
    4cc8:	230a      	movs	r3, #10
    4cca:	18fb      	adds	r3, r7, r3
    4ccc:	881a      	ldrh	r2, [r3, #0]
    4cce:	4b99      	ldr	r3, [pc, #612]	; (4f34 <cmd_common_process+0x63a>)
    4cd0:	18d0      	adds	r0, r2, r3
    4cd2:	2309      	movs	r3, #9
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	0013      	movs	r3, r2
    4cda:	00db      	lsls	r3, r3, #3
    4cdc:	189b      	adds	r3, r3, r2
    4cde:	019b      	lsls	r3, r3, #6
    4ce0:	2286      	movs	r2, #134	; 0x86
    4ce2:	0092      	lsls	r2, r2, #2
    4ce4:	189a      	adds	r2, r3, r2
    4ce6:	4b97      	ldr	r3, [pc, #604]	; (4f44 <cmd_common_process+0x64a>)
    4ce8:	18d3      	adds	r3, r2, r3
    4cea:	3302      	adds	r3, #2
    4cec:	2202      	movs	r2, #2
    4cee:	0019      	movs	r1, r3
    4cf0:	4b93      	ldr	r3, [pc, #588]	; (4f40 <cmd_common_process+0x646>)
    4cf2:	4798      	blx	r3
    4cf4:	230a      	movs	r3, #10
    4cf6:	18fb      	adds	r3, r7, r3
    4cf8:	220a      	movs	r2, #10
    4cfa:	18ba      	adds	r2, r7, r2
    4cfc:	8812      	ldrh	r2, [r2, #0]
    4cfe:	3202      	adds	r2, #2
    4d00:	801a      	strh	r2, [r3, #0]
						for (i = 0; i < 4; i++)
    4d02:	2309      	movs	r3, #9
    4d04:	18fb      	adds	r3, r7, r3
    4d06:	781a      	ldrb	r2, [r3, #0]
    4d08:	2309      	movs	r3, #9
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	3201      	adds	r2, #1
    4d0e:	701a      	strb	r2, [r3, #0]
    4d10:	2309      	movs	r3, #9
    4d12:	18fb      	adds	r3, r7, r3
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	2b03      	cmp	r3, #3
    4d18:	d800      	bhi.n	4d1c <cmd_common_process+0x422>
    4d1a:	e763      	b.n	4be4 <cmd_common_process+0x2ea>
							}			
					}
		break;
    4d1c:	f000 fc99 	bl	5652 <cmd_common_process+0xd58>
		//......................................................................
		//......................................................................
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    4d20:	230e      	movs	r3, #14
    4d22:	18fb      	adds	r3, r7, r3
    4d24:	881b      	ldrh	r3, [r3, #0]
    4d26:	2b07      	cmp	r3, #7
    4d28:	d001      	beq.n	4d2e <cmd_common_process+0x434>
    4d2a:	f000 fd2b 	bl	5784 <cmd_common_process+0xe8a>
					check_admin();	
    4d2e:	4b86      	ldr	r3, [pc, #536]	; (4f48 <cmd_common_process+0x64e>)
    4d30:	781b      	ldrb	r3, [r3, #0]
    4d32:	2b01      	cmp	r3, #1
    4d34:	d00e      	beq.n	4d54 <cmd_common_process+0x45a>
    4d36:	230a      	movs	r3, #10
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	881b      	ldrh	r3, [r3, #0]
    4d3c:	4a7d      	ldr	r2, [pc, #500]	; (4f34 <cmd_common_process+0x63a>)
    4d3e:	2100      	movs	r1, #0
    4d40:	54d1      	strb	r1, [r2, r3]
    4d42:	230a      	movs	r3, #10
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	881a      	ldrh	r2, [r3, #0]
    4d48:	230a      	movs	r3, #10
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	3201      	adds	r2, #1
    4d4e:	801a      	strh	r2, [r3, #0]
    4d50:	f000 fcb3 	bl	56ba <cmd_common_process+0xdc0>
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4d54:	4b77      	ldr	r3, [pc, #476]	; (4f34 <cmd_common_process+0x63a>)
    4d56:	78db      	ldrb	r3, [r3, #3]
    4d58:	b21a      	sxth	r2, r3
    4d5a:	4b76      	ldr	r3, [pc, #472]	; (4f34 <cmd_common_process+0x63a>)
    4d5c:	791b      	ldrb	r3, [r3, #4]
    4d5e:	021b      	lsls	r3, r3, #8
    4d60:	b21b      	sxth	r3, r3
    4d62:	4313      	orrs	r3, r2
    4d64:	b21a      	sxth	r2, r3
    4d66:	1cbb      	adds	r3, r7, #2
    4d68:	801a      	strh	r2, [r3, #0]
    4d6a:	230a      	movs	r3, #10
    4d6c:	18fb      	adds	r3, r7, r3
    4d6e:	220a      	movs	r2, #10
    4d70:	18ba      	adds	r2, r7, r2
    4d72:	8812      	ldrh	r2, [r2, #0]
    4d74:	3202      	adds	r2, #2
    4d76:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_1) - ixo;
    4d78:	230c      	movs	r3, #12
    4d7a:	18fb      	adds	r3, r7, r3
    4d7c:	1cba      	adds	r2, r7, #2
    4d7e:	8812      	ldrh	r2, [r2, #0]
    4d80:	2180      	movs	r1, #128	; 0x80
    4d82:	0049      	lsls	r1, r1, #1
    4d84:	1a8a      	subs	r2, r1, r2
    4d86:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_1)	) { break;  }
    4d88:	1cbb      	adds	r3, r7, #2
    4d8a:	881a      	ldrh	r2, [r3, #0]
    4d8c:	2380      	movs	r3, #128	; 0x80
    4d8e:	005b      	lsls	r3, r3, #1
    4d90:	429a      	cmp	r2, r3
    4d92:	d901      	bls.n	4d98 <cmd_common_process+0x49e>
    4d94:	f000 fc5f 	bl	5656 <cmd_common_process+0xd5c>
					if(cnt > 256			) { cnt=256;  }
    4d98:	230c      	movs	r3, #12
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	881a      	ldrh	r2, [r3, #0]
    4d9e:	2380      	movs	r3, #128	; 0x80
    4da0:	005b      	lsls	r3, r3, #1
    4da2:	429a      	cmp	r2, r3
    4da4:	d904      	bls.n	4db0 <cmd_common_process+0x4b6>
    4da6:	230c      	movs	r3, #12
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	2280      	movs	r2, #128	; 0x80
    4dac:	0052      	lsls	r2, r2, #1
    4dae:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4db0:	230a      	movs	r3, #10
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	881b      	ldrh	r3, [r3, #0]
    4db6:	220c      	movs	r2, #12
    4db8:	18ba      	adds	r2, r7, r2
    4dba:	8812      	ldrh	r2, [r2, #0]
    4dbc:	b2d1      	uxtb	r1, r2
    4dbe:	4a5d      	ldr	r2, [pc, #372]	; (4f34 <cmd_common_process+0x63a>)
    4dc0:	54d1      	strb	r1, [r2, r3]
    4dc2:	230a      	movs	r3, #10
    4dc4:	18fb      	adds	r3, r7, r3
    4dc6:	220a      	movs	r2, #10
    4dc8:	18ba      	adds	r2, r7, r2
    4dca:	8812      	ldrh	r2, [r2, #0]
    4dcc:	3201      	adds	r2, #1
    4dce:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4dd0:	230a      	movs	r3, #10
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	881b      	ldrh	r3, [r3, #0]
    4dd6:	220c      	movs	r2, #12
    4dd8:	18ba      	adds	r2, r7, r2
    4dda:	8812      	ldrh	r2, [r2, #0]
    4ddc:	0a12      	lsrs	r2, r2, #8
    4dde:	b292      	uxth	r2, r2
    4de0:	b2d1      	uxtb	r1, r2
    4de2:	4a54      	ldr	r2, [pc, #336]	; (4f34 <cmd_common_process+0x63a>)
    4de4:	54d1      	strb	r1, [r2, r3]
    4de6:	230a      	movs	r3, #10
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	220a      	movs	r2, #10
    4dec:	18ba      	adds	r2, r7, r2
    4dee:	8812      	ldrh	r2, [r2, #0]
    4df0:	3201      	adds	r2, #1
    4df2:	801a      	strh	r2, [r3, #0]

					memcpy(&cbuf[wn],((BYTE*)&cfg_1)+ixo,cnt);				wn+=cnt;
    4df4:	230a      	movs	r3, #10
    4df6:	18fb      	adds	r3, r7, r3
    4df8:	881a      	ldrh	r2, [r3, #0]
    4dfa:	4b4e      	ldr	r3, [pc, #312]	; (4f34 <cmd_common_process+0x63a>)
    4dfc:	18d0      	adds	r0, r2, r3
    4dfe:	1cbb      	adds	r3, r7, #2
    4e00:	881a      	ldrh	r2, [r3, #0]
    4e02:	4b52      	ldr	r3, [pc, #328]	; (4f4c <cmd_common_process+0x652>)
    4e04:	18d1      	adds	r1, r2, r3
    4e06:	230c      	movs	r3, #12
    4e08:	18fb      	adds	r3, r7, r3
    4e0a:	881b      	ldrh	r3, [r3, #0]
    4e0c:	001a      	movs	r2, r3
    4e0e:	4b4c      	ldr	r3, [pc, #304]	; (4f40 <cmd_common_process+0x646>)
    4e10:	4798      	blx	r3
    4e12:	230a      	movs	r3, #10
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	220a      	movs	r2, #10
    4e18:	18b9      	adds	r1, r7, r2
    4e1a:	220c      	movs	r2, #12
    4e1c:	18ba      	adds	r2, r7, r2
    4e1e:	8809      	ldrh	r1, [r1, #0]
    4e20:	8812      	ldrh	r2, [r2, #0]
    4e22:	188a      	adds	r2, r1, r2
    4e24:	801a      	strh	r2, [r3, #0]
		break;
    4e26:	f000 fc48 	bl	56ba <cmd_common_process+0xdc0>

		//......................................................................
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    4e2a:	230e      	movs	r3, #14
    4e2c:	18fb      	adds	r3, r7, r3
    4e2e:	881b      	ldrh	r3, [r3, #0]
    4e30:	2b07      	cmp	r3, #7
    4e32:	d001      	beq.n	4e38 <cmd_common_process+0x53e>
    4e34:	f000 fca8 	bl	5788 <cmd_common_process+0xe8e>
					check_admin();	
    4e38:	4b43      	ldr	r3, [pc, #268]	; (4f48 <cmd_common_process+0x64e>)
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	2b01      	cmp	r3, #1
    4e3e:	d00e      	beq.n	4e5e <cmd_common_process+0x564>
    4e40:	230a      	movs	r3, #10
    4e42:	18fb      	adds	r3, r7, r3
    4e44:	881b      	ldrh	r3, [r3, #0]
    4e46:	4a3b      	ldr	r2, [pc, #236]	; (4f34 <cmd_common_process+0x63a>)
    4e48:	2100      	movs	r1, #0
    4e4a:	54d1      	strb	r1, [r2, r3]
    4e4c:	230a      	movs	r3, #10
    4e4e:	18fb      	adds	r3, r7, r3
    4e50:	881a      	ldrh	r2, [r3, #0]
    4e52:	230a      	movs	r3, #10
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	3201      	adds	r2, #1
    4e58:	801a      	strh	r2, [r3, #0]
    4e5a:	f000 fc2e 	bl	56ba <cmd_common_process+0xdc0>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4e5e:	4b35      	ldr	r3, [pc, #212]	; (4f34 <cmd_common_process+0x63a>)
    4e60:	78db      	ldrb	r3, [r3, #3]
    4e62:	b21a      	sxth	r2, r3
    4e64:	4b33      	ldr	r3, [pc, #204]	; (4f34 <cmd_common_process+0x63a>)
    4e66:	791b      	ldrb	r3, [r3, #4]
    4e68:	021b      	lsls	r3, r3, #8
    4e6a:	b21b      	sxth	r3, r3
    4e6c:	4313      	orrs	r3, r2
    4e6e:	b21a      	sxth	r2, r3
    4e70:	1cbb      	adds	r3, r7, #2
    4e72:	801a      	strh	r2, [r3, #0]
    4e74:	230a      	movs	r3, #10
    4e76:	18fb      	adds	r3, r7, r3
    4e78:	220a      	movs	r2, #10
    4e7a:	18ba      	adds	r2, r7, r2
    4e7c:	8812      	ldrh	r2, [r2, #0]
    4e7e:	3202      	adds	r2, #2
    4e80:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_2) - ixo;
    4e82:	230c      	movs	r3, #12
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	1cba      	adds	r2, r7, #2
    4e88:	8812      	ldrh	r2, [r2, #0]
    4e8a:	2180      	movs	r1, #128	; 0x80
    4e8c:	0049      	lsls	r1, r1, #1
    4e8e:	1a8a      	subs	r2, r1, r2
    4e90:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_2)	) { break;  }
    4e92:	1cbb      	adds	r3, r7, #2
    4e94:	881a      	ldrh	r2, [r3, #0]
    4e96:	2380      	movs	r3, #128	; 0x80
    4e98:	005b      	lsls	r3, r3, #1
    4e9a:	429a      	cmp	r2, r3
    4e9c:	d901      	bls.n	4ea2 <cmd_common_process+0x5a8>
    4e9e:	f000 fbdc 	bl	565a <cmd_common_process+0xd60>
					if(cnt > 256			) { cnt=256;  }
    4ea2:	230c      	movs	r3, #12
    4ea4:	18fb      	adds	r3, r7, r3
    4ea6:	881a      	ldrh	r2, [r3, #0]
    4ea8:	2380      	movs	r3, #128	; 0x80
    4eaa:	005b      	lsls	r3, r3, #1
    4eac:	429a      	cmp	r2, r3
    4eae:	d904      	bls.n	4eba <cmd_common_process+0x5c0>
    4eb0:	230c      	movs	r3, #12
    4eb2:	18fb      	adds	r3, r7, r3
    4eb4:	2280      	movs	r2, #128	; 0x80
    4eb6:	0052      	lsls	r2, r2, #1
    4eb8:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4eba:	230a      	movs	r3, #10
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	881b      	ldrh	r3, [r3, #0]
    4ec0:	220c      	movs	r2, #12
    4ec2:	18ba      	adds	r2, r7, r2
    4ec4:	8812      	ldrh	r2, [r2, #0]
    4ec6:	b2d1      	uxtb	r1, r2
    4ec8:	4a1a      	ldr	r2, [pc, #104]	; (4f34 <cmd_common_process+0x63a>)
    4eca:	54d1      	strb	r1, [r2, r3]
    4ecc:	230a      	movs	r3, #10
    4ece:	18fb      	adds	r3, r7, r3
    4ed0:	220a      	movs	r2, #10
    4ed2:	18ba      	adds	r2, r7, r2
    4ed4:	8812      	ldrh	r2, [r2, #0]
    4ed6:	3201      	adds	r2, #1
    4ed8:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4eda:	230a      	movs	r3, #10
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	881b      	ldrh	r3, [r3, #0]
    4ee0:	220c      	movs	r2, #12
    4ee2:	18ba      	adds	r2, r7, r2
    4ee4:	8812      	ldrh	r2, [r2, #0]
    4ee6:	0a12      	lsrs	r2, r2, #8
    4ee8:	b292      	uxth	r2, r2
    4eea:	b2d1      	uxtb	r1, r2
    4eec:	4a11      	ldr	r2, [pc, #68]	; (4f34 <cmd_common_process+0x63a>)
    4eee:	54d1      	strb	r1, [r2, r3]
    4ef0:	230a      	movs	r3, #10
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	220a      	movs	r2, #10
    4ef6:	18ba      	adds	r2, r7, r2
    4ef8:	8812      	ldrh	r2, [r2, #0]
    4efa:	3201      	adds	r2, #1
    4efc:	801a      	strh	r2, [r3, #0]

					
					memcpy(&cbuf[wn],((BYTE*)&cfg_2)+ixo,cnt);				wn+=cnt;
    4efe:	230a      	movs	r3, #10
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	881a      	ldrh	r2, [r3, #0]
    4f04:	4b0b      	ldr	r3, [pc, #44]	; (4f34 <cmd_common_process+0x63a>)
    4f06:	18d0      	adds	r0, r2, r3
    4f08:	1cbb      	adds	r3, r7, #2
    4f0a:	881a      	ldrh	r2, [r3, #0]
    4f0c:	4b10      	ldr	r3, [pc, #64]	; (4f50 <cmd_common_process+0x656>)
    4f0e:	18d1      	adds	r1, r2, r3
    4f10:	230c      	movs	r3, #12
    4f12:	18fb      	adds	r3, r7, r3
    4f14:	881b      	ldrh	r3, [r3, #0]
    4f16:	001a      	movs	r2, r3
    4f18:	4b09      	ldr	r3, [pc, #36]	; (4f40 <cmd_common_process+0x646>)
    4f1a:	4798      	blx	r3
    4f1c:	230a      	movs	r3, #10
    4f1e:	18fb      	adds	r3, r7, r3
    4f20:	220a      	movs	r2, #10
    4f22:	18b9      	adds	r1, r7, r2
    4f24:	220c      	movs	r2, #12
    4f26:	18ba      	adds	r2, r7, r2
    4f28:	8809      	ldrh	r1, [r1, #0]
    4f2a:	8812      	ldrh	r2, [r2, #0]
    4f2c:	188a      	adds	r2, r1, r2
    4f2e:	801a      	strh	r2, [r3, #0]
		break;
    4f30:	f000 fbc3 	bl	56ba <cmd_common_process+0xdc0>
    4f34:	200004a0 	.word	0x200004a0
    4f38:	000005e5 	.word	0x000005e5
    4f3c:	200005cc 	.word	0x200005cc
    4f40:	0000c8b9 	.word	0x0000c8b9
    4f44:	200031fc 	.word	0x200031fc
    4f48:	20000451 	.word	0x20000451
    4f4c:	20003dc4 	.word	0x20003dc4
    4f50:	20003bc4 	.word	0x20003bc4

		//......................................................................

		case 0x10:	if(size <  6) { return; }
    4f54:	230e      	movs	r3, #14
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	881b      	ldrh	r3, [r3, #0]
    4f5a:	2b05      	cmp	r3, #5
    4f5c:	d801      	bhi.n	4f62 <cmd_common_process+0x668>
    4f5e:	f000 fc15 	bl	578c <cmd_common_process+0xe92>
					wn+=iap_process(&cbuf[wn],size-5);
    4f62:	230a      	movs	r3, #10
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	881a      	ldrh	r2, [r3, #0]
    4f68:	4bd5      	ldr	r3, [pc, #852]	; (52c0 <cmd_common_process+0x9c6>)
    4f6a:	18d2      	adds	r2, r2, r3
    4f6c:	230e      	movs	r3, #14
    4f6e:	18fb      	adds	r3, r7, r3
    4f70:	881b      	ldrh	r3, [r3, #0]
    4f72:	3b05      	subs	r3, #5
    4f74:	b29b      	uxth	r3, r3
    4f76:	0019      	movs	r1, r3
    4f78:	0010      	movs	r0, r2
    4f7a:	4bd2      	ldr	r3, [pc, #840]	; (52c4 <cmd_common_process+0x9ca>)
    4f7c:	4798      	blx	r3
    4f7e:	0003      	movs	r3, r0
    4f80:	0019      	movs	r1, r3
    4f82:	230a      	movs	r3, #10
    4f84:	18fb      	adds	r3, r7, r3
    4f86:	220a      	movs	r2, #10
    4f88:	18ba      	adds	r2, r7, r2
    4f8a:	8812      	ldrh	r2, [r2, #0]
    4f8c:	188a      	adds	r2, r1, r2
    4f8e:	801a      	strh	r2, [r3, #0]
		break;
    4f90:	f000 fb93 	bl	56ba <cmd_common_process+0xdc0>

		//......................................................................
		case 0x17:	if(size  <  7) { return; }
    4f94:	230e      	movs	r3, #14
    4f96:	18fb      	adds	r3, r7, r3
    4f98:	881b      	ldrh	r3, [r3, #0]
    4f9a:	2b06      	cmp	r3, #6
    4f9c:	d801      	bhi.n	4fa2 <cmd_common_process+0x6a8>
    4f9e:	f000 fbf7 	bl	5790 <cmd_common_process+0xe96>
		
					ixo = cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4fa2:	4bc7      	ldr	r3, [pc, #796]	; (52c0 <cmd_common_process+0x9c6>)
    4fa4:	78db      	ldrb	r3, [r3, #3]
    4fa6:	b21a      	sxth	r2, r3
    4fa8:	4bc5      	ldr	r3, [pc, #788]	; (52c0 <cmd_common_process+0x9c6>)
    4faa:	791b      	ldrb	r3, [r3, #4]
    4fac:	021b      	lsls	r3, r3, #8
    4fae:	b21b      	sxth	r3, r3
    4fb0:	4313      	orrs	r3, r2
    4fb2:	b21a      	sxth	r2, r3
    4fb4:	1cbb      	adds	r3, r7, #2
    4fb6:	801a      	strh	r2, [r3, #0]
    4fb8:	230a      	movs	r3, #10
    4fba:	18fb      	adds	r3, r7, r3
    4fbc:	220a      	movs	r2, #10
    4fbe:	18ba      	adds	r2, r7, r2
    4fc0:	8812      	ldrh	r2, [r2, #0]
    4fc2:	3202      	adds	r2, #2
    4fc4:	801a      	strh	r2, [r3, #0]
					cnt = cbuf[5] | (cbuf[6]<<8);							wn+=sizeof(WORD);
    4fc6:	4bbe      	ldr	r3, [pc, #760]	; (52c0 <cmd_common_process+0x9c6>)
    4fc8:	795b      	ldrb	r3, [r3, #5]
    4fca:	b21a      	sxth	r2, r3
    4fcc:	4bbc      	ldr	r3, [pc, #752]	; (52c0 <cmd_common_process+0x9c6>)
    4fce:	799b      	ldrb	r3, [r3, #6]
    4fd0:	021b      	lsls	r3, r3, #8
    4fd2:	b21b      	sxth	r3, r3
    4fd4:	4313      	orrs	r3, r2
    4fd6:	b21a      	sxth	r2, r3
    4fd8:	230c      	movs	r3, #12
    4fda:	18fb      	adds	r3, r7, r3
    4fdc:	801a      	strh	r2, [r3, #0]
    4fde:	230a      	movs	r3, #10
    4fe0:	18fb      	adds	r3, r7, r3
    4fe2:	220a      	movs	r2, #10
    4fe4:	18ba      	adds	r2, r7, r2
    4fe6:	8812      	ldrh	r2, [r2, #0]
    4fe8:	3202      	adds	r2, #2
    4fea:	801a      	strh	r2, [r3, #0]
					
					if(cnt  ==  0) { break; }
    4fec:	230c      	movs	r3, #12
    4fee:	18fb      	adds	r3, r7, r3
    4ff0:	881b      	ldrh	r3, [r3, #0]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d100      	bne.n	4ff8 <cmd_common_process+0x6fe>
    4ff6:	e332      	b.n	565e <cmd_common_process+0xd64>
					if(ixo  ==  0) {memset(&cfg_1_tmp,0x00,sizeof(CFG_1));}
    4ff8:	1cbb      	adds	r3, r7, #2
    4ffa:	881b      	ldrh	r3, [r3, #0]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d106      	bne.n	500e <cmd_common_process+0x714>
    5000:	2380      	movs	r3, #128	; 0x80
    5002:	005a      	lsls	r2, r3, #1
    5004:	4bb0      	ldr	r3, [pc, #704]	; (52c8 <cmd_common_process+0x9ce>)
    5006:	2100      	movs	r1, #0
    5008:	0018      	movs	r0, r3
    500a:	4bb0      	ldr	r3, [pc, #704]	; (52cc <cmd_common_process+0x9d2>)
    500c:	4798      	blx	r3
					
					if(ixo       >= sizeof(CFG_1)) { break; }
    500e:	1cbb      	adds	r3, r7, #2
    5010:	881b      	ldrh	r3, [r3, #0]
    5012:	2bff      	cmp	r3, #255	; 0xff
    5014:	d900      	bls.n	5018 <cmd_common_process+0x71e>
    5016:	e324      	b.n	5662 <cmd_common_process+0xd68>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    5018:	230c      	movs	r3, #12
    501a:	18fb      	adds	r3, r7, r3
    501c:	881a      	ldrh	r2, [r3, #0]
    501e:	1cbb      	adds	r3, r7, #2
    5020:	881b      	ldrh	r3, [r3, #0]
    5022:	18d3      	adds	r3, r2, r3
    5024:	001a      	movs	r2, r3
    5026:	2380      	movs	r3, #128	; 0x80
    5028:	005b      	lsls	r3, r3, #1
    502a:	429a      	cmp	r2, r3
    502c:	d900      	bls.n	5030 <cmd_common_process+0x736>
    502e:	e343      	b.n	56b8 <cmd_common_process+0xdbe>
					
					memcpy(((BYTE*)&cfg_1_tmp)+ixo,cbuf+wn                  ,cnt);
    5030:	1cbb      	adds	r3, r7, #2
    5032:	881a      	ldrh	r2, [r3, #0]
    5034:	4ba4      	ldr	r3, [pc, #656]	; (52c8 <cmd_common_process+0x9ce>)
    5036:	18d0      	adds	r0, r2, r3
    5038:	230a      	movs	r3, #10
    503a:	18fb      	adds	r3, r7, r3
    503c:	881a      	ldrh	r2, [r3, #0]
    503e:	4ba0      	ldr	r3, [pc, #640]	; (52c0 <cmd_common_process+0x9c6>)
    5040:	18d1      	adds	r1, r2, r3
    5042:	230c      	movs	r3, #12
    5044:	18fb      	adds	r3, r7, r3
    5046:	881b      	ldrh	r3, [r3, #0]
    5048:	001a      	movs	r2, r3
    504a:	4ba1      	ldr	r3, [pc, #644]	; (52d0 <cmd_common_process+0x9d6>)
    504c:	4798      	blx	r3
					memcpy(cbuf+wn                  ,((BYTE*)&cfg_1_tmp)+ixo,cnt);
    504e:	230a      	movs	r3, #10
    5050:	18fb      	adds	r3, r7, r3
    5052:	881a      	ldrh	r2, [r3, #0]
    5054:	4b9a      	ldr	r3, [pc, #616]	; (52c0 <cmd_common_process+0x9c6>)
    5056:	18d0      	adds	r0, r2, r3
    5058:	1cbb      	adds	r3, r7, #2
    505a:	881a      	ldrh	r2, [r3, #0]
    505c:	4b9a      	ldr	r3, [pc, #616]	; (52c8 <cmd_common_process+0x9ce>)
    505e:	18d1      	adds	r1, r2, r3
    5060:	230c      	movs	r3, #12
    5062:	18fb      	adds	r3, r7, r3
    5064:	881b      	ldrh	r3, [r3, #0]
    5066:	001a      	movs	r2, r3
    5068:	4b99      	ldr	r3, [pc, #612]	; (52d0 <cmd_common_process+0x9d6>)
    506a:	4798      	blx	r3
					wn+=cnt;
    506c:	230a      	movs	r3, #10
    506e:	18fb      	adds	r3, r7, r3
    5070:	220a      	movs	r2, #10
    5072:	18b9      	adds	r1, r7, r2
    5074:	220c      	movs	r2, #12
    5076:	18ba      	adds	r2, r7, r2
    5078:	8809      	ldrh	r1, [r1, #0]
    507a:	8812      	ldrh	r2, [r2, #0]
    507c:	188a      	adds	r2, r1, r2
    507e:	801a      	strh	r2, [r3, #0]
					wr_flag_cfg = 1;
    5080:	4b94      	ldr	r3, [pc, #592]	; (52d4 <cmd_common_process+0x9da>)
    5082:	2201      	movs	r2, #1
    5084:	701a      	strb	r2, [r3, #0]
		break;
    5086:	e318      	b.n	56ba <cmd_common_process+0xdc0>
		//......................................................................
		case 0x20:	if(size <  7)		{ return; }								//login
    5088:	230e      	movs	r3, #14
    508a:	18fb      	adds	r3, r7, r3
    508c:	881b      	ldrh	r3, [r3, #0]
    508e:	2b06      	cmp	r3, #6
    5090:	d801      	bhi.n	5096 <cmd_common_process+0x79c>
    5092:	f000 fb7f 	bl	5794 <cmd_common_process+0xe9a>

					cnt = 3;
    5096:	230c      	movs	r3, #12
    5098:	18fb      	adds	r3, r7, r3
    509a:	2203      	movs	r2, #3
    509c:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);
    509e:	230c      	movs	r3, #12
    50a0:	18fb      	adds	r3, r7, r3
    50a2:	881a      	ldrh	r2, [r3, #0]
    50a4:	4b86      	ldr	r3, [pc, #536]	; (52c0 <cmd_common_process+0x9c6>)
    50a6:	18d3      	adds	r3, r2, r3
    50a8:	0018      	movs	r0, r3
    50aa:	4b8b      	ldr	r3, [pc, #556]	; (52d8 <cmd_common_process+0x9de>)
    50ac:	4798      	blx	r3

					for (i = 0; i < 2; i++ ) { if (SRAV(32, &cbuf[3], &accnts.accnt[i].login[0])) 	{ch = i + 1; break;	} } //compare login
    50ae:	2309      	movs	r3, #9
    50b0:	18fb      	adds	r3, r7, r3
    50b2:	2200      	movs	r2, #0
    50b4:	701a      	strb	r2, [r3, #0]
    50b6:	e01b      	b.n	50f0 <cmd_common_process+0x7f6>
    50b8:	2309      	movs	r3, #9
    50ba:	18fb      	adds	r3, r7, r3
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	019a      	lsls	r2, r3, #6
    50c0:	4b86      	ldr	r3, [pc, #536]	; (52dc <cmd_common_process+0x9e2>)
    50c2:	18d2      	adds	r2, r2, r3
    50c4:	4b86      	ldr	r3, [pc, #536]	; (52e0 <cmd_common_process+0x9e6>)
    50c6:	0019      	movs	r1, r3
    50c8:	2020      	movs	r0, #32
    50ca:	4b86      	ldr	r3, [pc, #536]	; (52e4 <cmd_common_process+0x9ea>)
    50cc:	4798      	blx	r3
    50ce:	1e03      	subs	r3, r0, #0
    50d0:	d007      	beq.n	50e2 <cmd_common_process+0x7e8>
    50d2:	2308      	movs	r3, #8
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	2209      	movs	r2, #9
    50d8:	18ba      	adds	r2, r7, r2
    50da:	7812      	ldrb	r2, [r2, #0]
    50dc:	3201      	adds	r2, #1
    50de:	701a      	strb	r2, [r3, #0]
    50e0:	e00b      	b.n	50fa <cmd_common_process+0x800>
    50e2:	2309      	movs	r3, #9
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	781a      	ldrb	r2, [r3, #0]
    50e8:	2309      	movs	r3, #9
    50ea:	18fb      	adds	r3, r7, r3
    50ec:	3201      	adds	r2, #1
    50ee:	701a      	strb	r2, [r3, #0]
    50f0:	2309      	movs	r3, #9
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	2b01      	cmp	r3, #1
    50f8:	d9de      	bls.n	50b8 <cmd_common_process+0x7be>
					if (!ch) {send_error_EX();}																				//if login not searched
    50fa:	2308      	movs	r3, #8
    50fc:	18fb      	adds	r3, r7, r3
    50fe:	781b      	ldrb	r3, [r3, #0]
    5100:	2b00      	cmp	r3, #0
    5102:	d137      	bne.n	5174 <cmd_common_process+0x87a>
    5104:	230a      	movs	r3, #10
    5106:	18fb      	adds	r3, r7, r3
    5108:	881b      	ldrh	r3, [r3, #0]
    510a:	220a      	movs	r2, #10
    510c:	18ba      	adds	r2, r7, r2
    510e:	1c59      	adds	r1, r3, #1
    5110:	8011      	strh	r1, [r2, #0]
    5112:	001a      	movs	r2, r3
    5114:	4b6a      	ldr	r3, [pc, #424]	; (52c0 <cmd_common_process+0x9c6>)
    5116:	2100      	movs	r1, #0
    5118:	5499      	strb	r1, [r3, r2]
    511a:	230a      	movs	r3, #10
    511c:	18fb      	adds	r3, r7, r3
    511e:	881b      	ldrh	r3, [r3, #0]
    5120:	220a      	movs	r2, #10
    5122:	18ba      	adds	r2, r7, r2
    5124:	1c59      	adds	r1, r3, #1
    5126:	8011      	strh	r1, [r2, #0]
    5128:	001a      	movs	r2, r3
    512a:	4b65      	ldr	r3, [pc, #404]	; (52c0 <cmd_common_process+0x9c6>)
    512c:	2100      	movs	r1, #0
    512e:	5499      	strb	r1, [r3, r2]
    5130:	230a      	movs	r3, #10
    5132:	18fb      	adds	r3, r7, r3
    5134:	881b      	ldrh	r3, [r3, #0]
    5136:	220a      	movs	r2, #10
    5138:	18ba      	adds	r2, r7, r2
    513a:	1c59      	adds	r1, r3, #1
    513c:	8011      	strh	r1, [r2, #0]
    513e:	001a      	movs	r2, r3
    5140:	4b5f      	ldr	r3, [pc, #380]	; (52c0 <cmd_common_process+0x9c6>)
    5142:	2100      	movs	r1, #0
    5144:	5499      	strb	r1, [r3, r2]
    5146:	230a      	movs	r3, #10
    5148:	18fb      	adds	r3, r7, r3
    514a:	881b      	ldrh	r3, [r3, #0]
    514c:	220a      	movs	r2, #10
    514e:	18ba      	adds	r2, r7, r2
    5150:	1c59      	adds	r1, r3, #1
    5152:	8011      	strh	r1, [r2, #0]
    5154:	001a      	movs	r2, r3
    5156:	4b5a      	ldr	r3, [pc, #360]	; (52c0 <cmd_common_process+0x9c6>)
    5158:	2100      	movs	r1, #0
    515a:	5499      	strb	r1, [r3, r2]
    515c:	230a      	movs	r3, #10
    515e:	18fb      	adds	r3, r7, r3
    5160:	881b      	ldrh	r3, [r3, #0]
    5162:	220a      	movs	r2, #10
    5164:	18ba      	adds	r2, r7, r2
    5166:	1c59      	adds	r1, r3, #1
    5168:	8011      	strh	r1, [r2, #0]
    516a:	001a      	movs	r2, r3
    516c:	4b54      	ldr	r3, [pc, #336]	; (52c0 <cmd_common_process+0x9c6>)
    516e:	2100      	movs	r1, #0
    5170:	5499      	strb	r1, [r3, r2]
    5172:	e2a2      	b.n	56ba <cmd_common_process+0xdc0>

					cnt += 32;
    5174:	230c      	movs	r3, #12
    5176:	18fb      	adds	r3, r7, r3
    5178:	220c      	movs	r2, #12
    517a:	18ba      	adds	r2, r7, r2
    517c:	8812      	ldrh	r2, [r2, #0]
    517e:	3220      	adds	r2, #32
    5180:	801a      	strh	r2, [r3, #0]
					if (!SRAV(32, &cbuf[cnt], &accnts.accnt[ch-1].password[0])) {send_error_EX();}									//if password no match
    5182:	230c      	movs	r3, #12
    5184:	18fb      	adds	r3, r7, r3
    5186:	881a      	ldrh	r2, [r3, #0]
    5188:	4b4d      	ldr	r3, [pc, #308]	; (52c0 <cmd_common_process+0x9c6>)
    518a:	18d1      	adds	r1, r2, r3
    518c:	2308      	movs	r3, #8
    518e:	18fb      	adds	r3, r7, r3
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	3b01      	subs	r3, #1
    5194:	019b      	lsls	r3, r3, #6
    5196:	3320      	adds	r3, #32
    5198:	001a      	movs	r2, r3
    519a:	4b50      	ldr	r3, [pc, #320]	; (52dc <cmd_common_process+0x9e2>)
    519c:	18d3      	adds	r3, r2, r3
    519e:	001a      	movs	r2, r3
    51a0:	2020      	movs	r0, #32
    51a2:	4b50      	ldr	r3, [pc, #320]	; (52e4 <cmd_common_process+0x9ea>)
    51a4:	4798      	blx	r3
    51a6:	1e03      	subs	r3, r0, #0
    51a8:	d137      	bne.n	521a <cmd_common_process+0x920>
    51aa:	230a      	movs	r3, #10
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	881b      	ldrh	r3, [r3, #0]
    51b0:	220a      	movs	r2, #10
    51b2:	18ba      	adds	r2, r7, r2
    51b4:	1c59      	adds	r1, r3, #1
    51b6:	8011      	strh	r1, [r2, #0]
    51b8:	001a      	movs	r2, r3
    51ba:	4b41      	ldr	r3, [pc, #260]	; (52c0 <cmd_common_process+0x9c6>)
    51bc:	2100      	movs	r1, #0
    51be:	5499      	strb	r1, [r3, r2]
    51c0:	230a      	movs	r3, #10
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	881b      	ldrh	r3, [r3, #0]
    51c6:	220a      	movs	r2, #10
    51c8:	18ba      	adds	r2, r7, r2
    51ca:	1c59      	adds	r1, r3, #1
    51cc:	8011      	strh	r1, [r2, #0]
    51ce:	001a      	movs	r2, r3
    51d0:	4b3b      	ldr	r3, [pc, #236]	; (52c0 <cmd_common_process+0x9c6>)
    51d2:	2100      	movs	r1, #0
    51d4:	5499      	strb	r1, [r3, r2]
    51d6:	230a      	movs	r3, #10
    51d8:	18fb      	adds	r3, r7, r3
    51da:	881b      	ldrh	r3, [r3, #0]
    51dc:	220a      	movs	r2, #10
    51de:	18ba      	adds	r2, r7, r2
    51e0:	1c59      	adds	r1, r3, #1
    51e2:	8011      	strh	r1, [r2, #0]
    51e4:	001a      	movs	r2, r3
    51e6:	4b36      	ldr	r3, [pc, #216]	; (52c0 <cmd_common_process+0x9c6>)
    51e8:	2100      	movs	r1, #0
    51ea:	5499      	strb	r1, [r3, r2]
    51ec:	230a      	movs	r3, #10
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	881b      	ldrh	r3, [r3, #0]
    51f2:	220a      	movs	r2, #10
    51f4:	18ba      	adds	r2, r7, r2
    51f6:	1c59      	adds	r1, r3, #1
    51f8:	8011      	strh	r1, [r2, #0]
    51fa:	001a      	movs	r2, r3
    51fc:	4b30      	ldr	r3, [pc, #192]	; (52c0 <cmd_common_process+0x9c6>)
    51fe:	2100      	movs	r1, #0
    5200:	5499      	strb	r1, [r3, r2]
    5202:	230a      	movs	r3, #10
    5204:	18fb      	adds	r3, r7, r3
    5206:	881b      	ldrh	r3, [r3, #0]
    5208:	220a      	movs	r2, #10
    520a:	18ba      	adds	r2, r7, r2
    520c:	1c59      	adds	r1, r3, #1
    520e:	8011      	strh	r1, [r2, #0]
    5210:	001a      	movs	r2, r3
    5212:	4b2b      	ldr	r3, [pc, #172]	; (52c0 <cmd_common_process+0x9c6>)
    5214:	2100      	movs	r1, #0
    5216:	5499      	strb	r1, [r3, r2]
    5218:	e24f      	b.n	56ba <cmd_common_process+0xdc0>
																
					if (ch == ADMIN_LOGIN) {save_log(ADMIN_LOGIN); send_admin();} else {send_user();}
    521a:	2308      	movs	r3, #8
    521c:	18fb      	adds	r3, r7, r3
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	2b01      	cmp	r3, #1
    5222:	d11b      	bne.n	525c <cmd_common_process+0x962>
    5224:	4b30      	ldr	r3, [pc, #192]	; (52e8 <cmd_common_process+0x9ee>)
    5226:	681b      	ldr	r3, [r3, #0]
    5228:	2b00      	cmp	r3, #0
    522a:	d009      	beq.n	5240 <cmd_common_process+0x946>
    522c:	4b2f      	ldr	r3, [pc, #188]	; (52ec <cmd_common_process+0x9f2>)
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	0018      	movs	r0, r3
    5232:	4b2f      	ldr	r3, [pc, #188]	; (52f0 <cmd_common_process+0x9f6>)
    5234:	6819      	ldr	r1, [r3, #0]
    5236:	4b2c      	ldr	r3, [pc, #176]	; (52e8 <cmd_common_process+0x9ee>)
    5238:	681a      	ldr	r2, [r3, #0]
    523a:	2301      	movs	r3, #1
    523c:	4c2d      	ldr	r4, [pc, #180]	; (52f4 <cmd_common_process+0x9fa>)
    523e:	47a0      	blx	r4
    5240:	230a      	movs	r3, #10
    5242:	18fb      	adds	r3, r7, r3
    5244:	881b      	ldrh	r3, [r3, #0]
    5246:	4a1e      	ldr	r2, [pc, #120]	; (52c0 <cmd_common_process+0x9c6>)
    5248:	2101      	movs	r1, #1
    524a:	54d1      	strb	r1, [r2, r3]
    524c:	230a      	movs	r3, #10
    524e:	18fb      	adds	r3, r7, r3
    5250:	881a      	ldrh	r2, [r3, #0]
    5252:	230a      	movs	r3, #10
    5254:	18fb      	adds	r3, r7, r3
    5256:	3201      	adds	r2, #1
    5258:	801a      	strh	r2, [r3, #0]
    525a:	e00c      	b.n	5276 <cmd_common_process+0x97c>
    525c:	230a      	movs	r3, #10
    525e:	18fb      	adds	r3, r7, r3
    5260:	881b      	ldrh	r3, [r3, #0]
    5262:	4a17      	ldr	r2, [pc, #92]	; (52c0 <cmd_common_process+0x9c6>)
    5264:	2102      	movs	r1, #2
    5266:	54d1      	strb	r1, [r2, r3]
    5268:	230a      	movs	r3, #10
    526a:	18fb      	adds	r3, r7, r3
    526c:	881a      	ldrh	r2, [r3, #0]
    526e:	230a      	movs	r3, #10
    5270:	18fb      	adds	r3, r7, r3
    5272:	3201      	adds	r2, #1
    5274:	801a      	strh	r2, [r3, #0]
					actv_user_id = ch;
    5276:	4b1d      	ldr	r3, [pc, #116]	; (52ec <cmd_common_process+0x9f2>)
    5278:	2208      	movs	r2, #8
    527a:	18ba      	adds	r2, r7, r2
    527c:	7812      	ldrb	r2, [r2, #0]
    527e:	701a      	strb	r2, [r3, #0]
					log_stat = 1;	
    5280:	4b1d      	ldr	r3, [pc, #116]	; (52f8 <cmd_common_process+0x9fe>)
    5282:	2201      	movs	r2, #1
    5284:	701a      	strb	r2, [r3, #0]
					loggin_timeout = 0;																						//login status up
    5286:	4b1d      	ldr	r3, [pc, #116]	; (52fc <cmd_common_process+0xa02>)
    5288:	2200      	movs	r2, #0
    528a:	601a      	str	r2, [r3, #0]
					memcpy((BYTE*)&ip_addrs, &eth_sock[0].ip_addr[0], DW_LEN);														//write crc firmware
    528c:	491c      	ldr	r1, [pc, #112]	; (5300 <cmd_common_process+0xa06>)
    528e:	4b18      	ldr	r3, [pc, #96]	; (52f0 <cmd_common_process+0x9f6>)
    5290:	2204      	movs	r2, #4
    5292:	0018      	movs	r0, r3
    5294:	4b0e      	ldr	r3, [pc, #56]	; (52d0 <cmd_common_process+0x9d6>)
    5296:	4798      	blx	r3
					num_to_byte(crc_fw, DW_LEN, &cbuf[wn], L_SIDE);			wn += 4;
    5298:	4b1a      	ldr	r3, [pc, #104]	; (5304 <cmd_common_process+0xa0a>)
    529a:	6818      	ldr	r0, [r3, #0]
    529c:	230a      	movs	r3, #10
    529e:	18fb      	adds	r3, r7, r3
    52a0:	881a      	ldrh	r2, [r3, #0]
    52a2:	4b07      	ldr	r3, [pc, #28]	; (52c0 <cmd_common_process+0x9c6>)
    52a4:	18d2      	adds	r2, r2, r3
    52a6:	2301      	movs	r3, #1
    52a8:	2104      	movs	r1, #4
    52aa:	4c17      	ldr	r4, [pc, #92]	; (5308 <cmd_common_process+0xa0e>)
    52ac:	47a0      	blx	r4
    52ae:	230a      	movs	r3, #10
    52b0:	18fb      	adds	r3, r7, r3
    52b2:	220a      	movs	r2, #10
    52b4:	18ba      	adds	r2, r7, r2
    52b6:	8812      	ldrh	r2, [r2, #0]
    52b8:	3204      	adds	r2, #4
    52ba:	801a      	strh	r2, [r3, #0]
		break;
    52bc:	e1fd      	b.n	56ba <cmd_common_process+0xdc0>
    52be:	46c0      	nop			; (mov r8, r8)
    52c0:	200004a0 	.word	0x200004a0
    52c4:	00006ffd 	.word	0x00006ffd
    52c8:	20003cc4 	.word	0x20003cc4
    52cc:	0000c93d 	.word	0x0000c93d
    52d0:	0000c8b9 	.word	0x0000c8b9
    52d4:	20000458 	.word	0x20000458
    52d8:	00006047 	.word	0x00006047
    52dc:	20002554 	.word	0x20002554
    52e0:	200004a3 	.word	0x200004a3
    52e4:	00004883 	.word	0x00004883
    52e8:	20000454 	.word	0x20000454
    52ec:	20000451 	.word	0x20000451
    52f0:	2000049c 	.word	0x2000049c
    52f4:	000044e5 	.word	0x000044e5
    52f8:	20000450 	.word	0x20000450
    52fc:	20000470 	.word	0x20000470
    5300:	200005cc 	.word	0x200005cc
    5304:	2000254c 	.word	0x2000254c
    5308:	00004719 	.word	0x00004719
		//......................................................................
		case 0x21:	if(size < 5)		{ return; }								//login send
    530c:	230e      	movs	r3, #14
    530e:	18fb      	adds	r3, r7, r3
    5310:	881b      	ldrh	r3, [r3, #0]
    5312:	2b04      	cmp	r3, #4
    5314:	d800      	bhi.n	5318 <cmd_common_process+0xa1e>
    5316:	e23f      	b.n	5798 <cmd_common_process+0xe9e>
 					check_admin();
    5318:	4bd3      	ldr	r3, [pc, #844]	; (5668 <cmd_common_process+0xd6e>)
    531a:	781b      	ldrb	r3, [r3, #0]
    531c:	2b01      	cmp	r3, #1
    531e:	d00d      	beq.n	533c <cmd_common_process+0xa42>
    5320:	230a      	movs	r3, #10
    5322:	18fb      	adds	r3, r7, r3
    5324:	881b      	ldrh	r3, [r3, #0]
    5326:	4ad1      	ldr	r2, [pc, #836]	; (566c <cmd_common_process+0xd72>)
    5328:	2100      	movs	r1, #0
    532a:	54d1      	strb	r1, [r2, r3]
    532c:	230a      	movs	r3, #10
    532e:	18fb      	adds	r3, r7, r3
    5330:	881a      	ldrh	r2, [r3, #0]
    5332:	230a      	movs	r3, #10
    5334:	18fb      	adds	r3, r7, r3
    5336:	3201      	adds	r2, #1
    5338:	801a      	strh	r2, [r3, #0]
    533a:	e1be      	b.n	56ba <cmd_common_process+0xdc0>
					cnt = 3;
    533c:	230c      	movs	r3, #12
    533e:	18fb      	adds	r3, r7, r3
    5340:	2203      	movs	r2, #3
    5342:	801a      	strh	r2, [r3, #0]
					
					memcpy(&cbuf[3], &accnts.accnt[0].login[0], USART_BUF_SIZE);
    5344:	2380      	movs	r3, #128	; 0x80
    5346:	005a      	lsls	r2, r3, #1
    5348:	49c9      	ldr	r1, [pc, #804]	; (5670 <cmd_common_process+0xd76>)
    534a:	4bca      	ldr	r3, [pc, #808]	; (5674 <cmd_common_process+0xd7a>)
    534c:	0018      	movs	r0, r3
    534e:	4bca      	ldr	r3, [pc, #808]	; (5678 <cmd_common_process+0xd7e>)
    5350:	4798      	blx	r3
					crypted(&cbuf[cnt]);		cnt += 64;
    5352:	230c      	movs	r3, #12
    5354:	18fb      	adds	r3, r7, r3
    5356:	881a      	ldrh	r2, [r3, #0]
    5358:	4bc4      	ldr	r3, [pc, #784]	; (566c <cmd_common_process+0xd72>)
    535a:	18d3      	adds	r3, r2, r3
    535c:	0018      	movs	r0, r3
    535e:	4bc7      	ldr	r3, [pc, #796]	; (567c <cmd_common_process+0xd82>)
    5360:	4798      	blx	r3
    5362:	230c      	movs	r3, #12
    5364:	18fb      	adds	r3, r7, r3
    5366:	220c      	movs	r2, #12
    5368:	18ba      	adds	r2, r7, r2
    536a:	8812      	ldrh	r2, [r2, #0]
    536c:	3240      	adds	r2, #64	; 0x40
    536e:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    5370:	230c      	movs	r3, #12
    5372:	18fb      	adds	r3, r7, r3
    5374:	881a      	ldrh	r2, [r3, #0]
    5376:	4bbd      	ldr	r3, [pc, #756]	; (566c <cmd_common_process+0xd72>)
    5378:	18d3      	adds	r3, r2, r3
    537a:	0018      	movs	r0, r3
    537c:	4bbf      	ldr	r3, [pc, #764]	; (567c <cmd_common_process+0xd82>)
    537e:	4798      	blx	r3
    5380:	230c      	movs	r3, #12
    5382:	18fb      	adds	r3, r7, r3
    5384:	220c      	movs	r2, #12
    5386:	18ba      	adds	r2, r7, r2
    5388:	8812      	ldrh	r2, [r2, #0]
    538a:	3240      	adds	r2, #64	; 0x40
    538c:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    538e:	230c      	movs	r3, #12
    5390:	18fb      	adds	r3, r7, r3
    5392:	881a      	ldrh	r2, [r3, #0]
    5394:	4bb5      	ldr	r3, [pc, #724]	; (566c <cmd_common_process+0xd72>)
    5396:	18d3      	adds	r3, r2, r3
    5398:	0018      	movs	r0, r3
    539a:	4bb8      	ldr	r3, [pc, #736]	; (567c <cmd_common_process+0xd82>)
    539c:	4798      	blx	r3
    539e:	230c      	movs	r3, #12
    53a0:	18fb      	adds	r3, r7, r3
    53a2:	220c      	movs	r2, #12
    53a4:	18ba      	adds	r2, r7, r2
    53a6:	8812      	ldrh	r2, [r2, #0]
    53a8:	3240      	adds	r2, #64	; 0x40
    53aa:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    53ac:	230c      	movs	r3, #12
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	881a      	ldrh	r2, [r3, #0]
    53b2:	4bae      	ldr	r3, [pc, #696]	; (566c <cmd_common_process+0xd72>)
    53b4:	18d3      	adds	r3, r2, r3
    53b6:	0018      	movs	r0, r3
    53b8:	4bb0      	ldr	r3, [pc, #704]	; (567c <cmd_common_process+0xd82>)
    53ba:	4798      	blx	r3
    53bc:	230c      	movs	r3, #12
    53be:	18fb      	adds	r3, r7, r3
    53c0:	220c      	movs	r2, #12
    53c2:	18ba      	adds	r2, r7, r2
    53c4:	8812      	ldrh	r2, [r2, #0]
    53c6:	3240      	adds	r2, #64	; 0x40
    53c8:	801a      	strh	r2, [r3, #0]
					wn += 256;
    53ca:	230a      	movs	r3, #10
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	220a      	movs	r2, #10
    53d0:	18ba      	adds	r2, r7, r2
    53d2:	8812      	ldrh	r2, [r2, #0]
    53d4:	3201      	adds	r2, #1
    53d6:	32ff      	adds	r2, #255	; 0xff
    53d8:	801a      	strh	r2, [r3, #0]
		break;
    53da:	e16e      	b.n	56ba <cmd_common_process+0xdc0>
		//......................................................................
		case 0x22:	if(size <  5)		{ return; }								//login change
    53dc:	230e      	movs	r3, #14
    53de:	18fb      	adds	r3, r7, r3
    53e0:	881b      	ldrh	r3, [r3, #0]
    53e2:	2b04      	cmp	r3, #4
    53e4:	d800      	bhi.n	53e8 <cmd_common_process+0xaee>
    53e6:	e1d9      	b.n	579c <cmd_common_process+0xea2>
					check_admin();
    53e8:	4b9f      	ldr	r3, [pc, #636]	; (5668 <cmd_common_process+0xd6e>)
    53ea:	781b      	ldrb	r3, [r3, #0]
    53ec:	2b01      	cmp	r3, #1
    53ee:	d00d      	beq.n	540c <cmd_common_process+0xb12>
    53f0:	230a      	movs	r3, #10
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	881b      	ldrh	r3, [r3, #0]
    53f6:	4a9d      	ldr	r2, [pc, #628]	; (566c <cmd_common_process+0xd72>)
    53f8:	2100      	movs	r1, #0
    53fa:	54d1      	strb	r1, [r2, r3]
    53fc:	230a      	movs	r3, #10
    53fe:	18fb      	adds	r3, r7, r3
    5400:	881a      	ldrh	r2, [r3, #0]
    5402:	230a      	movs	r3, #10
    5404:	18fb      	adds	r3, r7, r3
    5406:	3201      	adds	r2, #1
    5408:	801a      	strh	r2, [r3, #0]
    540a:	e156      	b.n	56ba <cmd_common_process+0xdc0>
					cnt = 3;
    540c:	230c      	movs	r3, #12
    540e:	18fb      	adds	r3, r7, r3
    5410:	2203      	movs	r2, #3
    5412:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5414:	230c      	movs	r3, #12
    5416:	18fb      	adds	r3, r7, r3
    5418:	881a      	ldrh	r2, [r3, #0]
    541a:	4b94      	ldr	r3, [pc, #592]	; (566c <cmd_common_process+0xd72>)
    541c:	18d3      	adds	r3, r2, r3
    541e:	0018      	movs	r0, r3
    5420:	4b97      	ldr	r3, [pc, #604]	; (5680 <cmd_common_process+0xd86>)
    5422:	4798      	blx	r3
    5424:	230c      	movs	r3, #12
    5426:	18fb      	adds	r3, r7, r3
    5428:	220c      	movs	r2, #12
    542a:	18ba      	adds	r2, r7, r2
    542c:	8812      	ldrh	r2, [r2, #0]
    542e:	3240      	adds	r2, #64	; 0x40
    5430:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5432:	230c      	movs	r3, #12
    5434:	18fb      	adds	r3, r7, r3
    5436:	881a      	ldrh	r2, [r3, #0]
    5438:	4b8c      	ldr	r3, [pc, #560]	; (566c <cmd_common_process+0xd72>)
    543a:	18d3      	adds	r3, r2, r3
    543c:	0018      	movs	r0, r3
    543e:	4b90      	ldr	r3, [pc, #576]	; (5680 <cmd_common_process+0xd86>)
    5440:	4798      	blx	r3
    5442:	230c      	movs	r3, #12
    5444:	18fb      	adds	r3, r7, r3
    5446:	220c      	movs	r2, #12
    5448:	18ba      	adds	r2, r7, r2
    544a:	8812      	ldrh	r2, [r2, #0]
    544c:	3240      	adds	r2, #64	; 0x40
    544e:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    5450:	230c      	movs	r3, #12
    5452:	18fb      	adds	r3, r7, r3
    5454:	881a      	ldrh	r2, [r3, #0]
    5456:	4b85      	ldr	r3, [pc, #532]	; (566c <cmd_common_process+0xd72>)
    5458:	18d3      	adds	r3, r2, r3
    545a:	0018      	movs	r0, r3
    545c:	4b88      	ldr	r3, [pc, #544]	; (5680 <cmd_common_process+0xd86>)
    545e:	4798      	blx	r3
    5460:	230c      	movs	r3, #12
    5462:	18fb      	adds	r3, r7, r3
    5464:	220c      	movs	r2, #12
    5466:	18ba      	adds	r2, r7, r2
    5468:	8812      	ldrh	r2, [r2, #0]
    546a:	3240      	adds	r2, #64	; 0x40
    546c:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;
    546e:	230c      	movs	r3, #12
    5470:	18fb      	adds	r3, r7, r3
    5472:	881a      	ldrh	r2, [r3, #0]
    5474:	4b7d      	ldr	r3, [pc, #500]	; (566c <cmd_common_process+0xd72>)
    5476:	18d3      	adds	r3, r2, r3
    5478:	0018      	movs	r0, r3
    547a:	4b81      	ldr	r3, [pc, #516]	; (5680 <cmd_common_process+0xd86>)
    547c:	4798      	blx	r3
    547e:	230c      	movs	r3, #12
    5480:	18fb      	adds	r3, r7, r3
    5482:	220c      	movs	r2, #12
    5484:	18ba      	adds	r2, r7, r2
    5486:	8812      	ldrh	r2, [r2, #0]
    5488:	3240      	adds	r2, #64	; 0x40
    548a:	801a      	strh	r2, [r3, #0]
					
					memcpy(&accnts.accnt[0].login[0], &cbuf[3], USART_BUF_SIZE);
    548c:	2380      	movs	r3, #128	; 0x80
    548e:	005a      	lsls	r2, r3, #1
    5490:	4978      	ldr	r1, [pc, #480]	; (5674 <cmd_common_process+0xd7a>)
    5492:	4b77      	ldr	r3, [pc, #476]	; (5670 <cmd_common_process+0xd76>)
    5494:	0018      	movs	r0, r3
    5496:	4b78      	ldr	r3, [pc, #480]	; (5678 <cmd_common_process+0xd7e>)
    5498:	4798      	blx	r3
					wr_flag_acc = 1;
    549a:	4b7a      	ldr	r3, [pc, #488]	; (5684 <cmd_common_process+0xd8a>)
    549c:	2201      	movs	r2, #1
    549e:	701a      	strb	r2, [r3, #0]

		break;
    54a0:	e10b      	b.n	56ba <cmd_common_process+0xdc0>
		
		//......................................................................
		case 0x23:	if(size <  5)		{ return; }								//read logs
    54a2:	230e      	movs	r3, #14
    54a4:	18fb      	adds	r3, r7, r3
    54a6:	881b      	ldrh	r3, [r3, #0]
    54a8:	2b04      	cmp	r3, #4
    54aa:	d800      	bhi.n	54ae <cmd_common_process+0xbb4>
    54ac:	e178      	b.n	57a0 <cmd_common_process+0xea6>
 					check_admin();
    54ae:	4b6e      	ldr	r3, [pc, #440]	; (5668 <cmd_common_process+0xd6e>)
    54b0:	781b      	ldrb	r3, [r3, #0]
    54b2:	2b01      	cmp	r3, #1
    54b4:	d00d      	beq.n	54d2 <cmd_common_process+0xbd8>
    54b6:	230a      	movs	r3, #10
    54b8:	18fb      	adds	r3, r7, r3
    54ba:	881b      	ldrh	r3, [r3, #0]
    54bc:	4a6b      	ldr	r2, [pc, #428]	; (566c <cmd_common_process+0xd72>)
    54be:	2100      	movs	r1, #0
    54c0:	54d1      	strb	r1, [r2, r3]
    54c2:	230a      	movs	r3, #10
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	881a      	ldrh	r2, [r3, #0]
    54c8:	230a      	movs	r3, #10
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	3201      	adds	r2, #1
    54ce:	801a      	strh	r2, [r3, #0]
    54d0:	e0f3      	b.n	56ba <cmd_common_process+0xdc0>
					cnt = 3; wn++;
    54d2:	230c      	movs	r3, #12
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	2203      	movs	r2, #3
    54d8:	801a      	strh	r2, [r3, #0]
    54da:	230a      	movs	r3, #10
    54dc:	18fb      	adds	r3, r7, r3
    54de:	881a      	ldrh	r2, [r3, #0]
    54e0:	230a      	movs	r3, #10
    54e2:	18fb      	adds	r3, r7, r3
    54e4:	3201      	adds	r2, #1
    54e6:	801a      	strh	r2, [r3, #0]
					flash_read(LOGS_ADDR + (256 * cbuf[3]), &cbuf[4], 256);		wn +=256;
    54e8:	4b60      	ldr	r3, [pc, #384]	; (566c <cmd_common_process+0xd72>)
    54ea:	78db      	ldrb	r3, [r3, #3]
    54ec:	021b      	lsls	r3, r3, #8
    54ee:	22b0      	movs	r2, #176	; 0xb0
    54f0:	0292      	lsls	r2, r2, #10
    54f2:	1898      	adds	r0, r3, r2
    54f4:	2380      	movs	r3, #128	; 0x80
    54f6:	005a      	lsls	r2, r3, #1
    54f8:	4b63      	ldr	r3, [pc, #396]	; (5688 <cmd_common_process+0xd8e>)
    54fa:	0019      	movs	r1, r3
    54fc:	4b63      	ldr	r3, [pc, #396]	; (568c <cmd_common_process+0xd92>)
    54fe:	4798      	blx	r3
    5500:	230a      	movs	r3, #10
    5502:	18fb      	adds	r3, r7, r3
    5504:	220a      	movs	r2, #10
    5506:	18ba      	adds	r2, r7, r2
    5508:	8812      	ldrh	r2, [r2, #0]
    550a:	3201      	adds	r2, #1
    550c:	32ff      	adds	r2, #255	; 0xff
    550e:	801a      	strh	r2, [r3, #0]
		break;
    5510:	e0d3      	b.n	56ba <cmd_common_process+0xdc0>
		//......................................................................
		case 0x27:	if(size  !=  5) { return; }									//change config
    5512:	230e      	movs	r3, #14
    5514:	18fb      	adds	r3, r7, r3
    5516:	881b      	ldrh	r3, [r3, #0]
    5518:	2b05      	cmp	r3, #5
    551a:	d000      	beq.n	551e <cmd_common_process+0xc24>
    551c:	e142      	b.n	57a4 <cmd_common_process+0xeaa>
					check_admin();	
    551e:	4b52      	ldr	r3, [pc, #328]	; (5668 <cmd_common_process+0xd6e>)
    5520:	781b      	ldrb	r3, [r3, #0]
    5522:	2b01      	cmp	r3, #1
    5524:	d00d      	beq.n	5542 <cmd_common_process+0xc48>
    5526:	230a      	movs	r3, #10
    5528:	18fb      	adds	r3, r7, r3
    552a:	881b      	ldrh	r3, [r3, #0]
    552c:	4a4f      	ldr	r2, [pc, #316]	; (566c <cmd_common_process+0xd72>)
    552e:	2100      	movs	r1, #0
    5530:	54d1      	strb	r1, [r2, r3]
    5532:	230a      	movs	r3, #10
    5534:	18fb      	adds	r3, r7, r3
    5536:	881a      	ldrh	r2, [r3, #0]
    5538:	230a      	movs	r3, #10
    553a:	18fb      	adds	r3, r7, r3
    553c:	3201      	adds	r2, #1
    553e:	801a      	strh	r2, [r3, #0]
    5540:	e0bb      	b.n	56ba <cmd_common_process+0xdc0>
					
					if (wr_flag_cfg)
    5542:	4b53      	ldr	r3, [pc, #332]	; (5690 <cmd_common_process+0xd96>)
    5544:	781b      	ldrb	r3, [r3, #0]
    5546:	2b00      	cmp	r3, #0
    5548:	d03a      	beq.n	55c0 <cmd_common_process+0xcc6>
					{	
						if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{send_error();}		
    554a:	2380      	movs	r3, #128	; 0x80
    554c:	005a      	lsls	r2, r3, #1
    554e:	4b51      	ldr	r3, [pc, #324]	; (5694 <cmd_common_process+0xd9a>)
    5550:	0011      	movs	r1, r2
    5552:	0018      	movs	r0, r3
    5554:	4b50      	ldr	r3, [pc, #320]	; (5698 <cmd_common_process+0xd9e>)
    5556:	4798      	blx	r3
    5558:	1e03      	subs	r3, r0, #0
    555a:	d00d      	beq.n	5578 <cmd_common_process+0xc7e>
    555c:	230a      	movs	r3, #10
    555e:	18fb      	adds	r3, r7, r3
    5560:	881b      	ldrh	r3, [r3, #0]
    5562:	4a42      	ldr	r2, [pc, #264]	; (566c <cmd_common_process+0xd72>)
    5564:	2100      	movs	r1, #0
    5566:	54d1      	strb	r1, [r2, r3]
    5568:	230a      	movs	r3, #10
    556a:	18fb      	adds	r3, r7, r3
    556c:	881a      	ldrh	r2, [r3, #0]
    556e:	230a      	movs	r3, #10
    5570:	18fb      	adds	r3, r7, r3
    5572:	3201      	adds	r2, #1
    5574:	801a      	strh	r2, [r3, #0]
    5576:	e0a0      	b.n	56ba <cmd_common_process+0xdc0>
						memcpy(&cfg_1,&cfg_1_tmp,sizeof(CFG_1));
    5578:	4a48      	ldr	r2, [pc, #288]	; (569c <cmd_common_process+0xda2>)
    557a:	4b46      	ldr	r3, [pc, #280]	; (5694 <cmd_common_process+0xd9a>)
    557c:	0010      	movs	r0, r2
    557e:	0019      	movs	r1, r3
    5580:	2380      	movs	r3, #128	; 0x80
    5582:	005b      	lsls	r3, r3, #1
    5584:	001a      	movs	r2, r3
    5586:	4b3c      	ldr	r3, [pc, #240]	; (5678 <cmd_common_process+0xd7e>)
    5588:	4798      	blx	r3
						save_log(EEPROM);
    558a:	4b45      	ldr	r3, [pc, #276]	; (56a0 <cmd_common_process+0xda6>)
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	2b00      	cmp	r3, #0
    5590:	d009      	beq.n	55a6 <cmd_common_process+0xcac>
    5592:	4b35      	ldr	r3, [pc, #212]	; (5668 <cmd_common_process+0xd6e>)
    5594:	781b      	ldrb	r3, [r3, #0]
    5596:	0018      	movs	r0, r3
    5598:	4b42      	ldr	r3, [pc, #264]	; (56a4 <cmd_common_process+0xdaa>)
    559a:	6819      	ldr	r1, [r3, #0]
    559c:	4b40      	ldr	r3, [pc, #256]	; (56a0 <cmd_common_process+0xda6>)
    559e:	681a      	ldr	r2, [r3, #0]
    55a0:	2302      	movs	r3, #2
    55a2:	4c41      	ldr	r4, [pc, #260]	; (56a8 <cmd_common_process+0xdae>)
    55a4:	47a0      	blx	r4
						wn |=+cfg_save();
    55a6:	4b41      	ldr	r3, [pc, #260]	; (56ac <cmd_common_process+0xdb2>)
    55a8:	4798      	blx	r3
    55aa:	0003      	movs	r3, r0
    55ac:	b21a      	sxth	r2, r3
    55ae:	230a      	movs	r3, #10
    55b0:	18fb      	adds	r3, r7, r3
    55b2:	2100      	movs	r1, #0
    55b4:	5e5b      	ldrsh	r3, [r3, r1]
    55b6:	4313      	orrs	r3, r2
    55b8:	b21a      	sxth	r2, r3
    55ba:	230a      	movs	r3, #10
    55bc:	18fb      	adds	r3, r7, r3
    55be:	801a      	strh	r2, [r3, #0]
					}
					
					if (wr_flag_acc)
    55c0:	4b30      	ldr	r3, [pc, #192]	; (5684 <cmd_common_process+0xd8a>)
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d010      	beq.n	55ea <cmd_common_process+0xcf0>
					{
						acc(WRITE);
    55c8:	2001      	movs	r0, #1
    55ca:	4b39      	ldr	r3, [pc, #228]	; (56b0 <cmd_common_process+0xdb6>)
    55cc:	4798      	blx	r3
						save_log(ACC_CHANGE);
    55ce:	4b34      	ldr	r3, [pc, #208]	; (56a0 <cmd_common_process+0xda6>)
    55d0:	681b      	ldr	r3, [r3, #0]
    55d2:	2b00      	cmp	r3, #0
    55d4:	d009      	beq.n	55ea <cmd_common_process+0xcf0>
    55d6:	4b24      	ldr	r3, [pc, #144]	; (5668 <cmd_common_process+0xd6e>)
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	0018      	movs	r0, r3
    55dc:	4b31      	ldr	r3, [pc, #196]	; (56a4 <cmd_common_process+0xdaa>)
    55de:	6819      	ldr	r1, [r3, #0]
    55e0:	4b2f      	ldr	r3, [pc, #188]	; (56a0 <cmd_common_process+0xda6>)
    55e2:	681a      	ldr	r2, [r3, #0]
    55e4:	2303      	movs	r3, #3
    55e6:	4c30      	ldr	r4, [pc, #192]	; (56a8 <cmd_common_process+0xdae>)
    55e8:	47a0      	blx	r4
					}
					
					
					reset=1;
    55ea:	4b32      	ldr	r3, [pc, #200]	; (56b4 <cmd_common_process+0xdba>)
    55ec:	2201      	movs	r2, #1
    55ee:	801a      	strh	r2, [r3, #0]
		break;
    55f0:	e063      	b.n	56ba <cmd_common_process+0xdc0>
		//......................................................................
		case 0x29:	if(size  !=  5) { return; }									//reboot
    55f2:	230e      	movs	r3, #14
    55f4:	18fb      	adds	r3, r7, r3
    55f6:	881b      	ldrh	r3, [r3, #0]
    55f8:	2b05      	cmp	r3, #5
    55fa:	d000      	beq.n	55fe <cmd_common_process+0xd04>
    55fc:	e0d4      	b.n	57a8 <cmd_common_process+0xeae>
					check_admin();
    55fe:	4b1a      	ldr	r3, [pc, #104]	; (5668 <cmd_common_process+0xd6e>)
    5600:	781b      	ldrb	r3, [r3, #0]
    5602:	2b01      	cmp	r3, #1
    5604:	d00d      	beq.n	5622 <cmd_common_process+0xd28>
    5606:	230a      	movs	r3, #10
    5608:	18fb      	adds	r3, r7, r3
    560a:	881b      	ldrh	r3, [r3, #0]
    560c:	4a17      	ldr	r2, [pc, #92]	; (566c <cmd_common_process+0xd72>)
    560e:	2100      	movs	r1, #0
    5610:	54d1      	strb	r1, [r2, r3]
    5612:	230a      	movs	r3, #10
    5614:	18fb      	adds	r3, r7, r3
    5616:	881a      	ldrh	r2, [r3, #0]
    5618:	230a      	movs	r3, #10
    561a:	18fb      	adds	r3, r7, r3
    561c:	3201      	adds	r2, #1
    561e:	801a      	strh	r2, [r3, #0]
    5620:	e04b      	b.n	56ba <cmd_common_process+0xdc0>
					reset=1; wn++;
    5622:	4b24      	ldr	r3, [pc, #144]	; (56b4 <cmd_common_process+0xdba>)
    5624:	2201      	movs	r2, #1
    5626:	801a      	strh	r2, [r3, #0]
    5628:	230a      	movs	r3, #10
    562a:	18fb      	adds	r3, r7, r3
    562c:	881a      	ldrh	r2, [r3, #0]
    562e:	230a      	movs	r3, #10
    5630:	18fb      	adds	r3, r7, r3
    5632:	3201      	adds	r2, #1
    5634:	801a      	strh	r2, [r3, #0]
					send_admin();
    5636:	230a      	movs	r3, #10
    5638:	18fb      	adds	r3, r7, r3
    563a:	881b      	ldrh	r3, [r3, #0]
    563c:	4a0b      	ldr	r2, [pc, #44]	; (566c <cmd_common_process+0xd72>)
    563e:	2101      	movs	r1, #1
    5640:	54d1      	strb	r1, [r2, r3]
    5642:	230a      	movs	r3, #10
    5644:	18fb      	adds	r3, r7, r3
    5646:	881a      	ldrh	r2, [r3, #0]
    5648:	230a      	movs	r3, #10
    564a:	18fb      	adds	r3, r7, r3
    564c:	3201      	adds	r2, #1
    564e:	801a      	strh	r2, [r3, #0]
		break;
    5650:	e033      	b.n	56ba <cmd_common_process+0xdc0>
		break;
    5652:	46c0      	nop			; (mov r8, r8)
    5654:	e031      	b.n	56ba <cmd_common_process+0xdc0>
					if(ixo > sizeof(CFG_1)	) { break;  }
    5656:	46c0      	nop			; (mov r8, r8)
    5658:	e02f      	b.n	56ba <cmd_common_process+0xdc0>
					if(ixo > sizeof(CFG_2)	) { break;  }
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	e02d      	b.n	56ba <cmd_common_process+0xdc0>
					if(cnt  ==  0) { break; }
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	e02b      	b.n	56ba <cmd_common_process+0xdc0>
					if(ixo       >= sizeof(CFG_1)) { break; }
    5662:	46c0      	nop			; (mov r8, r8)
    5664:	e029      	b.n	56ba <cmd_common_process+0xdc0>
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	20000451 	.word	0x20000451
    566c:	200004a0 	.word	0x200004a0
    5670:	20002554 	.word	0x20002554
    5674:	200004a3 	.word	0x200004a3
    5678:	0000c8b9 	.word	0x0000c8b9
    567c:	00006019 	.word	0x00006019
    5680:	00006047 	.word	0x00006047
    5684:	20000459 	.word	0x20000459
    5688:	200004a4 	.word	0x200004a4
    568c:	00006995 	.word	0x00006995
    5690:	20000458 	.word	0x20000458
    5694:	20003cc4 	.word	0x20003cc4
    5698:	00005d45 	.word	0x00005d45
    569c:	20003dc4 	.word	0x20003dc4
    56a0:	20000454 	.word	0x20000454
    56a4:	2000049c 	.word	0x2000049c
    56a8:	000044e5 	.word	0x000044e5
    56ac:	0000b07d 	.word	0x0000b07d
    56b0:	00004215 	.word	0x00004215
    56b4:	20002548 	.word	0x20002548
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    56b8:	46c0      	nop			; (mov r8, r8)
		//......................................................................
		
		default :	   return;
	}
	
	cbuf[2]|=0x80;
    56ba:	4b3e      	ldr	r3, [pc, #248]	; (57b4 <cmd_common_process+0xeba>)
    56bc:	789b      	ldrb	r3, [r3, #2]
    56be:	2280      	movs	r2, #128	; 0x80
    56c0:	4252      	negs	r2, r2
    56c2:	4313      	orrs	r3, r2
    56c4:	b2da      	uxtb	r2, r3
    56c6:	4b3b      	ldr	r3, [pc, #236]	; (57b4 <cmd_common_process+0xeba>)
    56c8:	709a      	strb	r2, [r3, #2]

	cs= crc16_ccit(cbuf,wn);
    56ca:	1d3c      	adds	r4, r7, #4
    56cc:	230a      	movs	r3, #10
    56ce:	18fb      	adds	r3, r7, r3
    56d0:	881a      	ldrh	r2, [r3, #0]
    56d2:	4b38      	ldr	r3, [pc, #224]	; (57b4 <cmd_common_process+0xeba>)
    56d4:	0011      	movs	r1, r2
    56d6:	0018      	movs	r0, r3
    56d8:	4b37      	ldr	r3, [pc, #220]	; (57b8 <cmd_common_process+0xebe>)
    56da:	4798      	blx	r3
    56dc:	0003      	movs	r3, r0
    56de:	8023      	strh	r3, [r4, #0]
	
	cbuf[wn] = (BYTE)(cs & 0x00ff);         wn++;
    56e0:	230a      	movs	r3, #10
    56e2:	18fb      	adds	r3, r7, r3
    56e4:	881b      	ldrh	r3, [r3, #0]
    56e6:	1d3a      	adds	r2, r7, #4
    56e8:	8812      	ldrh	r2, [r2, #0]
    56ea:	b2d1      	uxtb	r1, r2
    56ec:	4a31      	ldr	r2, [pc, #196]	; (57b4 <cmd_common_process+0xeba>)
    56ee:	54d1      	strb	r1, [r2, r3]
    56f0:	230a      	movs	r3, #10
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	881a      	ldrh	r2, [r3, #0]
    56f6:	230a      	movs	r3, #10
    56f8:	18fb      	adds	r3, r7, r3
    56fa:	3201      	adds	r2, #1
    56fc:	801a      	strh	r2, [r3, #0]
	cbuf[wn] = (BYTE)((cs & 0xff00) >> 8);  wn++;
    56fe:	230a      	movs	r3, #10
    5700:	18fb      	adds	r3, r7, r3
    5702:	881b      	ldrh	r3, [r3, #0]
    5704:	1d3a      	adds	r2, r7, #4
    5706:	8812      	ldrh	r2, [r2, #0]
    5708:	0a12      	lsrs	r2, r2, #8
    570a:	b292      	uxth	r2, r2
    570c:	b2d1      	uxtb	r1, r2
    570e:	4a29      	ldr	r2, [pc, #164]	; (57b4 <cmd_common_process+0xeba>)
    5710:	54d1      	strb	r1, [r2, r3]
    5712:	230a      	movs	r3, #10
    5714:	18fb      	adds	r3, r7, r3
    5716:	881a      	ldrh	r2, [r3, #0]
    5718:	230a      	movs	r3, #10
    571a:	18fb      	adds	r3, r7, r3
    571c:	3201      	adds	r2, #1
    571e:	801a      	strh	r2, [r3, #0]
	
	if (wn > MAX_SIZE_BUF_SPI) {return;}
    5720:	230a      	movs	r3, #10
    5722:	18fb      	adds	r3, r7, r3
    5724:	881a      	ldrh	r2, [r3, #0]
    5726:	23b9      	movs	r3, #185	; 0xb9
    5728:	00db      	lsls	r3, r3, #3
    572a:	429a      	cmp	r2, r3
    572c:	d83e      	bhi.n	57ac <cmd_common_process+0xeb2>
	memcpy((BYTE*)&eth_sock[0].data,cbuf,wn);
    572e:	230a      	movs	r3, #10
    5730:	18fb      	adds	r3, r7, r3
    5732:	881a      	ldrh	r2, [r3, #0]
    5734:	491f      	ldr	r1, [pc, #124]	; (57b4 <cmd_common_process+0xeba>)
    5736:	4b21      	ldr	r3, [pc, #132]	; (57bc <cmd_common_process+0xec2>)
    5738:	0018      	movs	r0, r3
    573a:	4b21      	ldr	r3, [pc, #132]	; (57c0 <cmd_common_process+0xec6>)
    573c:	4798      	blx	r3
	
	eth_sock[0].len[0]=((wn & 0xFF00)>>8);
    573e:	230a      	movs	r3, #10
    5740:	18fb      	adds	r3, r7, r3
    5742:	881b      	ldrh	r3, [r3, #0]
    5744:	0a1b      	lsrs	r3, r3, #8
    5746:	b29b      	uxth	r3, r3
    5748:	b2da      	uxtb	r2, r3
    574a:	4b1e      	ldr	r3, [pc, #120]	; (57c4 <cmd_common_process+0xeca>)
    574c:	719a      	strb	r2, [r3, #6]
	eth_sock[0].len[1]=(wn & 0x00FF);
    574e:	230a      	movs	r3, #10
    5750:	18fb      	adds	r3, r7, r3
    5752:	881b      	ldrh	r3, [r3, #0]
    5754:	b2da      	uxtb	r2, r3
    5756:	4b1b      	ldr	r3, [pc, #108]	; (57c4 <cmd_common_process+0xeca>)
    5758:	71da      	strb	r2, [r3, #7]
	eth_sock[0].w_status=1;
    575a:	4b1a      	ldr	r3, [pc, #104]	; (57c4 <cmd_common_process+0xeca>)
    575c:	4a1a      	ldr	r2, [pc, #104]	; (57c8 <cmd_common_process+0xece>)
    575e:	2101      	movs	r1, #1
    5760:	5499      	strb	r1, [r3, r2]
    5762:	e024      	b.n	57ae <cmd_common_process+0xeb4>
	if(eth_sock[0].r_status==FALSE) {return;}
    5764:	46c0      	nop			; (mov r8, r8)
    5766:	e022      	b.n	57ae <cmd_common_process+0xeb4>
	if(size	 <    5			  )	{ return; }
    5768:	46c0      	nop			; (mov r8, r8)
    576a:	e020      	b.n	57ae <cmd_common_process+0xeb4>
	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    576c:	46c0      	nop			; (mov r8, r8)
    576e:	e01e      	b.n	57ae <cmd_common_process+0xeb4>
	if(addr !=  0){return;}
    5770:	46c0      	nop			; (mov r8, r8)
    5772:	e01c      	b.n	57ae <cmd_common_process+0xeb4>
	{return 0;}
    5774:	46c0      	nop			; (mov r8, r8)
    5776:	e01a      	b.n	57ae <cmd_common_process+0xeb4>
		default :	   return;
    5778:	46c0      	nop			; (mov r8, r8)
    577a:	e018      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x00:	if(size  !=  9) { return; }
    577c:	46c0      	nop			; (mov r8, r8)
    577e:	e016      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG	net	
    5780:	46c0      	nop			; (mov r8, r8)
    5782:	e014      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    5784:	46c0      	nop			; (mov r8, r8)
    5786:	e012      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    5788:	46c0      	nop			; (mov r8, r8)
    578a:	e010      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x10:	if(size <  6) { return; }
    578c:	46c0      	nop			; (mov r8, r8)
    578e:	e00e      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x17:	if(size  <  7) { return; }
    5790:	46c0      	nop			; (mov r8, r8)
    5792:	e00c      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x20:	if(size <  7)		{ return; }								//login
    5794:	46c0      	nop			; (mov r8, r8)
    5796:	e00a      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x21:	if(size < 5)		{ return; }								//login send
    5798:	46c0      	nop			; (mov r8, r8)
    579a:	e008      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x22:	if(size <  5)		{ return; }								//login change
    579c:	46c0      	nop			; (mov r8, r8)
    579e:	e006      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x23:	if(size <  5)		{ return; }								//read logs
    57a0:	46c0      	nop			; (mov r8, r8)
    57a2:	e004      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x27:	if(size  !=  5) { return; }									//change config
    57a4:	46c0      	nop			; (mov r8, r8)
    57a6:	e002      	b.n	57ae <cmd_common_process+0xeb4>
		case 0x29:	if(size  !=  5) { return; }									//reboot
    57a8:	46c0      	nop			; (mov r8, r8)
    57aa:	e000      	b.n	57ae <cmd_common_process+0xeb4>
	if (wn > MAX_SIZE_BUF_SPI) {return;}
    57ac:	46c0      	nop			; (mov r8, r8)
}
    57ae:	46bd      	mov	sp, r7
    57b0:	b005      	add	sp, #20
    57b2:	bd90      	pop	{r4, r7, pc}
    57b4:	200004a0 	.word	0x200004a0
    57b8:	00005d45 	.word	0x00005d45
    57bc:	200005d4 	.word	0x200005d4
    57c0:	0000c8b9 	.word	0x0000c8b9
    57c4:	200005cc 	.word	0x200005cc
    57c8:	000005d2 	.word	0x000005d2

000057cc <cmd_usart_process>:

void cmd_usart_process (void)
{
    57cc:	b580      	push	{r7, lr}
    57ce:	af00      	add	r7, sp, #0
	static BYTE n_port=1;
	
	for(n_port=1;n_port<5;n_port++)
    57d0:	4b13      	ldr	r3, [pc, #76]	; (5820 <cmd_usart_process+0x54>)
    57d2:	2201      	movs	r2, #1
    57d4:	701a      	strb	r2, [r3, #0]
    57d6:	e01b      	b.n	5810 <cmd_usart_process+0x44>
	{
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    57d8:	4b11      	ldr	r3, [pc, #68]	; (5820 <cmd_usart_process+0x54>)
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	1e5a      	subs	r2, r3, #1
    57de:	4911      	ldr	r1, [pc, #68]	; (5824 <cmd_usart_process+0x58>)
    57e0:	2034      	movs	r0, #52	; 0x34
    57e2:	0013      	movs	r3, r2
    57e4:	005b      	lsls	r3, r3, #1
    57e6:	189b      	adds	r3, r3, r2
    57e8:	009b      	lsls	r3, r3, #2
    57ea:	189b      	adds	r3, r3, r2
    57ec:	18cb      	adds	r3, r1, r3
    57ee:	181b      	adds	r3, r3, r0
    57f0:	781b      	ldrb	r3, [r3, #0]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d005      	beq.n	5802 <cmd_usart_process+0x36>
		usart_process(n_port);
    57f6:	4b0a      	ldr	r3, [pc, #40]	; (5820 <cmd_usart_process+0x54>)
    57f8:	781b      	ldrb	r3, [r3, #0]
    57fa:	0018      	movs	r0, r3
    57fc:	f000 f814 	bl	5828 <usart_process>
    5800:	e000      	b.n	5804 <cmd_usart_process+0x38>
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    5802:	46c0      	nop			; (mov r8, r8)
	for(n_port=1;n_port<5;n_port++)
    5804:	4b06      	ldr	r3, [pc, #24]	; (5820 <cmd_usart_process+0x54>)
    5806:	781b      	ldrb	r3, [r3, #0]
    5808:	3301      	adds	r3, #1
    580a:	b2da      	uxtb	r2, r3
    580c:	4b04      	ldr	r3, [pc, #16]	; (5820 <cmd_usart_process+0x54>)
    580e:	701a      	strb	r2, [r3, #0]
    5810:	4b03      	ldr	r3, [pc, #12]	; (5820 <cmd_usart_process+0x54>)
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2b04      	cmp	r3, #4
    5816:	d9df      	bls.n	57d8 <cmd_usart_process+0xc>
	}
}
    5818:	46c0      	nop			; (mov r8, r8)
    581a:	46bd      	mov	sp, r7
    581c:	bd80      	pop	{r7, pc}
    581e:	46c0      	nop			; (mov r8, r8)
    5820:	20000000 	.word	0x20000000
    5824:	20003dc4 	.word	0x20003dc4

00005828 <usart_process>:

void usart_process (BYTE n_port)
{
    5828:	b5b0      	push	{r4, r5, r7, lr}
    582a:	b084      	sub	sp, #16
    582c:	af00      	add	r7, sp, #0
    582e:	0002      	movs	r2, r0
    5830:	1dfb      	adds	r3, r7, #7
    5832:	701a      	strb	r2, [r3, #0]
	WORD size=0;
    5834:	230e      	movs	r3, #14
    5836:	18fb      	adds	r3, r7, r3
    5838:	2200      	movs	r2, #0
    583a:	801a      	strh	r2, [r3, #0]
	WORD crc;
	
	switch(port[n_port-1].stage)
    583c:	1dfb      	adds	r3, r7, #7
    583e:	781b      	ldrb	r3, [r3, #0]
    5840:	1e5a      	subs	r2, r3, #1
    5842:	48bc      	ldr	r0, [pc, #752]	; (5b34 <usart_process+0x30c>)
    5844:	2387      	movs	r3, #135	; 0x87
    5846:	0099      	lsls	r1, r3, #2
    5848:	0013      	movs	r3, r2
    584a:	00db      	lsls	r3, r3, #3
    584c:	189b      	adds	r3, r3, r2
    584e:	019b      	lsls	r3, r3, #6
    5850:	18c3      	adds	r3, r0, r3
    5852:	185b      	adds	r3, r3, r1
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	b2db      	uxtb	r3, r3
    5858:	2b00      	cmp	r3, #0
    585a:	d003      	beq.n	5864 <usart_process+0x3c>
    585c:	2b01      	cmp	r3, #1
    585e:	d100      	bne.n	5862 <usart_process+0x3a>
    5860:	e0fd      	b.n	5a5e <usart_process+0x236>
    5862:	e245      	b.n	5cf0 <usart_process+0x4c8>
	{
		case RS485_WRITE:
			//ETH message check
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5864:	1dfb      	adds	r3, r7, #7
    5866:	781b      	ldrb	r3, [r3, #0]
    5868:	4ab3      	ldr	r2, [pc, #716]	; (5b38 <usart_process+0x310>)
    586a:	49b4      	ldr	r1, [pc, #720]	; (5b3c <usart_process+0x314>)
    586c:	48b4      	ldr	r0, [pc, #720]	; (5b40 <usart_process+0x318>)
    586e:	4343      	muls	r3, r0
    5870:	18d3      	adds	r3, r2, r3
    5872:	185b      	adds	r3, r3, r1
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	2b00      	cmp	r3, #0
    5878:	d100      	bne.n	587c <usart_process+0x54>
    587a:	e249      	b.n	5d10 <usart_process+0x4e8>
			
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    587c:	1dfb      	adds	r3, r7, #7
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	1e5a      	subs	r2, r3, #1
    5882:	49b0      	ldr	r1, [pc, #704]	; (5b44 <usart_process+0x31c>)
    5884:	206a      	movs	r0, #106	; 0x6a
    5886:	0013      	movs	r3, r2
    5888:	00db      	lsls	r3, r3, #3
    588a:	189b      	adds	r3, r3, r2
    588c:	005b      	lsls	r3, r3, #1
    588e:	18cb      	adds	r3, r1, r3
    5890:	181b      	adds	r3, r3, r0
    5892:	781b      	ldrb	r3, [r3, #0]
    5894:	2b00      	cmp	r3, #0
    5896:	d108      	bne.n	58aa <usart_process+0x82>
    5898:	1dfb      	adds	r3, r7, #7
    589a:	781b      	ldrb	r3, [r3, #0]
    589c:	3b01      	subs	r3, #1
    589e:	0018      	movs	r0, r3
    58a0:	4ba9      	ldr	r3, [pc, #676]	; (5b48 <usart_process+0x320>)
    58a2:	4798      	blx	r3
    58a4:	1e03      	subs	r3, r0, #0
    58a6:	d100      	bne.n	58aa <usart_process+0x82>
    58a8:	e234      	b.n	5d14 <usart_process+0x4ec>
			
 			port[n_port-1].time_port = port[n_port-1].tout_port*10;							//launch timeout
    58aa:	1dfb      	adds	r3, r7, #7
    58ac:	781b      	ldrb	r3, [r3, #0]
    58ae:	1e5a      	subs	r2, r3, #1
    58b0:	1dfb      	adds	r3, r7, #7
    58b2:	781b      	ldrb	r3, [r3, #0]
    58b4:	1e59      	subs	r1, r3, #1
    58b6:	4c9f      	ldr	r4, [pc, #636]	; (5b34 <usart_process+0x30c>)
    58b8:	2386      	movs	r3, #134	; 0x86
    58ba:	0098      	lsls	r0, r3, #2
    58bc:	000b      	movs	r3, r1
    58be:	00db      	lsls	r3, r3, #3
    58c0:	185b      	adds	r3, r3, r1
    58c2:	019b      	lsls	r3, r3, #6
    58c4:	18e3      	adds	r3, r4, r3
    58c6:	181b      	adds	r3, r3, r0
    58c8:	881b      	ldrh	r3, [r3, #0]
    58ca:	b29b      	uxth	r3, r3
    58cc:	0019      	movs	r1, r3
    58ce:	000b      	movs	r3, r1
    58d0:	009b      	lsls	r3, r3, #2
    58d2:	185b      	adds	r3, r3, r1
    58d4:	005b      	lsls	r3, r3, #1
    58d6:	001c      	movs	r4, r3
    58d8:	4896      	ldr	r0, [pc, #600]	; (5b34 <usart_process+0x30c>)
    58da:	2388      	movs	r3, #136	; 0x88
    58dc:	0099      	lsls	r1, r3, #2
    58de:	0013      	movs	r3, r2
    58e0:	00db      	lsls	r3, r3, #3
    58e2:	189b      	adds	r3, r3, r2
    58e4:	019b      	lsls	r3, r3, #6
    58e6:	18c3      	adds	r3, r0, r3
    58e8:	185b      	adds	r3, r3, r1
    58ea:	601c      	str	r4, [r3, #0]
		
			size = eth_sock[n_port].len[0] << 8 | eth_sock[n_port].len[1];				//give size
    58ec:	1dfb      	adds	r3, r7, #7
    58ee:	781b      	ldrb	r3, [r3, #0]
    58f0:	4a91      	ldr	r2, [pc, #580]	; (5b38 <usart_process+0x310>)
    58f2:	4993      	ldr	r1, [pc, #588]	; (5b40 <usart_process+0x318>)
    58f4:	434b      	muls	r3, r1
    58f6:	18d3      	adds	r3, r2, r3
    58f8:	3306      	adds	r3, #6
    58fa:	781b      	ldrb	r3, [r3, #0]
    58fc:	021b      	lsls	r3, r3, #8
    58fe:	b21a      	sxth	r2, r3
    5900:	1dfb      	adds	r3, r7, #7
    5902:	781b      	ldrb	r3, [r3, #0]
    5904:	498c      	ldr	r1, [pc, #560]	; (5b38 <usart_process+0x310>)
    5906:	488e      	ldr	r0, [pc, #568]	; (5b40 <usart_process+0x318>)
    5908:	4343      	muls	r3, r0
    590a:	18cb      	adds	r3, r1, r3
    590c:	3307      	adds	r3, #7
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	b21b      	sxth	r3, r3
    5912:	4313      	orrs	r3, r2
    5914:	b21a      	sxth	r2, r3
    5916:	230e      	movs	r3, #14
    5918:	18fb      	adds	r3, r7, r3
    591a:	801a      	strh	r2, [r3, #0]
		
			if(size>USART_BUF_SIZE)	{eth_sock[n_port].r_status = 0; return;}			//check overload
    591c:	230e      	movs	r3, #14
    591e:	18fb      	adds	r3, r7, r3
    5920:	881a      	ldrh	r2, [r3, #0]
    5922:	2380      	movs	r3, #128	; 0x80
    5924:	005b      	lsls	r3, r3, #1
    5926:	429a      	cmp	r2, r3
    5928:	d90a      	bls.n	5940 <usart_process+0x118>
    592a:	1dfb      	adds	r3, r7, #7
    592c:	781b      	ldrb	r3, [r3, #0]
    592e:	4a82      	ldr	r2, [pc, #520]	; (5b38 <usart_process+0x310>)
    5930:	4982      	ldr	r1, [pc, #520]	; (5b3c <usart_process+0x314>)
    5932:	4883      	ldr	r0, [pc, #524]	; (5b40 <usart_process+0x318>)
    5934:	4343      	muls	r3, r0
    5936:	18d3      	adds	r3, r2, r3
    5938:	185b      	adds	r3, r3, r1
    593a:	2200      	movs	r2, #0
    593c:	701a      	strb	r2, [r3, #0]
    593e:	e1f0      	b.n	5d22 <usart_process+0x4fa>
			
			switch(cfg_1.sock_rs485[n_port - 1].pl)
    5940:	1dfb      	adds	r3, r7, #7
    5942:	781b      	ldrb	r3, [r3, #0]
    5944:	1e5a      	subs	r2, r3, #1
    5946:	497f      	ldr	r1, [pc, #508]	; (5b44 <usart_process+0x31c>)
    5948:	2036      	movs	r0, #54	; 0x36
    594a:	0013      	movs	r3, r2
    594c:	005b      	lsls	r3, r3, #1
    594e:	189b      	adds	r3, r3, r2
    5950:	009b      	lsls	r3, r3, #2
    5952:	189b      	adds	r3, r3, r2
    5954:	18cb      	adds	r3, r1, r3
    5956:	181b      	adds	r3, r3, r0
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	2b02      	cmp	r3, #2
    595c:	d150      	bne.n	5a00 <usart_process+0x1d8>
			{
				case MBUS:		
					crc = crc16_mbus(eth_sock[n_port].data+MBAP_HDR_LEN, size - MBAP_HDR_LEN);
    595e:	1dfb      	adds	r3, r7, #7
    5960:	781b      	ldrb	r3, [r3, #0]
    5962:	4a77      	ldr	r2, [pc, #476]	; (5b40 <usart_process+0x318>)
    5964:	4353      	muls	r3, r2
    5966:	3308      	adds	r3, #8
    5968:	001a      	movs	r2, r3
    596a:	4b73      	ldr	r3, [pc, #460]	; (5b38 <usart_process+0x310>)
    596c:	18d3      	adds	r3, r2, r3
    596e:	1d9a      	adds	r2, r3, #6
    5970:	230e      	movs	r3, #14
    5972:	18fb      	adds	r3, r7, r3
    5974:	881b      	ldrh	r3, [r3, #0]
    5976:	3b06      	subs	r3, #6
    5978:	b29b      	uxth	r3, r3
    597a:	210c      	movs	r1, #12
    597c:	187c      	adds	r4, r7, r1
    597e:	0019      	movs	r1, r3
    5980:	0010      	movs	r0, r2
    5982:	4b72      	ldr	r3, [pc, #456]	; (5b4c <usart_process+0x324>)
    5984:	4798      	blx	r3
    5986:	0003      	movs	r3, r0
    5988:	8023      	strh	r3, [r4, #0]
					eth_sock[n_port].data[size] = crc; 
    598a:	1dfb      	adds	r3, r7, #7
    598c:	781a      	ldrb	r2, [r3, #0]
    598e:	230e      	movs	r3, #14
    5990:	18fb      	adds	r3, r7, r3
    5992:	881b      	ldrh	r3, [r3, #0]
    5994:	210c      	movs	r1, #12
    5996:	1879      	adds	r1, r7, r1
    5998:	8809      	ldrh	r1, [r1, #0]
    599a:	b2cc      	uxtb	r4, r1
    599c:	4966      	ldr	r1, [pc, #408]	; (5b38 <usart_process+0x310>)
    599e:	4868      	ldr	r0, [pc, #416]	; (5b40 <usart_process+0x318>)
    59a0:	4342      	muls	r2, r0
    59a2:	188a      	adds	r2, r1, r2
    59a4:	18d3      	adds	r3, r2, r3
    59a6:	3308      	adds	r3, #8
    59a8:	1c22      	adds	r2, r4, #0
    59aa:	701a      	strb	r2, [r3, #0]
					eth_sock[n_port].data[size + 1] = crc >> 8;
    59ac:	1dfb      	adds	r3, r7, #7
    59ae:	781a      	ldrb	r2, [r3, #0]
    59b0:	230e      	movs	r3, #14
    59b2:	18fb      	adds	r3, r7, r3
    59b4:	881b      	ldrh	r3, [r3, #0]
    59b6:	3301      	adds	r3, #1
    59b8:	210c      	movs	r1, #12
    59ba:	1879      	adds	r1, r7, r1
    59bc:	8809      	ldrh	r1, [r1, #0]
    59be:	0a09      	lsrs	r1, r1, #8
    59c0:	b289      	uxth	r1, r1
    59c2:	b2cc      	uxtb	r4, r1
    59c4:	495c      	ldr	r1, [pc, #368]	; (5b38 <usart_process+0x310>)
    59c6:	485e      	ldr	r0, [pc, #376]	; (5b40 <usart_process+0x318>)
    59c8:	4342      	muls	r2, r0
    59ca:	188a      	adds	r2, r1, r2
    59cc:	18d3      	adds	r3, r2, r3
    59ce:	3308      	adds	r3, #8
    59d0:	1c22      	adds	r2, r4, #0
    59d2:	701a      	strb	r2, [r3, #0]
					usart_write(n_port - 1, eth_sock[n_port].data + MBAP_HDR_LEN, size - MBAP_HDR_LEN + 2);
    59d4:	1dfb      	adds	r3, r7, #7
    59d6:	781b      	ldrb	r3, [r3, #0]
    59d8:	3b01      	subs	r3, #1
    59da:	b2d8      	uxtb	r0, r3
    59dc:	1dfb      	adds	r3, r7, #7
    59de:	781b      	ldrb	r3, [r3, #0]
    59e0:	4a57      	ldr	r2, [pc, #348]	; (5b40 <usart_process+0x318>)
    59e2:	4353      	muls	r3, r2
    59e4:	3308      	adds	r3, #8
    59e6:	001a      	movs	r2, r3
    59e8:	4b53      	ldr	r3, [pc, #332]	; (5b38 <usart_process+0x310>)
    59ea:	18d3      	adds	r3, r2, r3
    59ec:	1d99      	adds	r1, r3, #6
    59ee:	230e      	movs	r3, #14
    59f0:	18fb      	adds	r3, r7, r3
    59f2:	881b      	ldrh	r3, [r3, #0]
    59f4:	3b04      	subs	r3, #4
    59f6:	b29b      	uxth	r3, r3
    59f8:	001a      	movs	r2, r3
    59fa:	4b55      	ldr	r3, [pc, #340]	; (5b50 <usart_process+0x328>)
    59fc:	4798      	blx	r3
				break;
    59fe:	e012      	b.n	5a26 <usart_process+0x1fe>
				default://GATE
					usart_write(n_port - 1, eth_sock[n_port].data, size);
    5a00:	1dfb      	adds	r3, r7, #7
    5a02:	781b      	ldrb	r3, [r3, #0]
    5a04:	3b01      	subs	r3, #1
    5a06:	b2d8      	uxtb	r0, r3
    5a08:	1dfb      	adds	r3, r7, #7
    5a0a:	781b      	ldrb	r3, [r3, #0]
    5a0c:	4a4c      	ldr	r2, [pc, #304]	; (5b40 <usart_process+0x318>)
    5a0e:	4353      	muls	r3, r2
    5a10:	3308      	adds	r3, #8
    5a12:	001a      	movs	r2, r3
    5a14:	4b48      	ldr	r3, [pc, #288]	; (5b38 <usart_process+0x310>)
    5a16:	18d1      	adds	r1, r2, r3
    5a18:	230e      	movs	r3, #14
    5a1a:	18fb      	adds	r3, r7, r3
    5a1c:	881b      	ldrh	r3, [r3, #0]
    5a1e:	001a      	movs	r2, r3
    5a20:	4b4b      	ldr	r3, [pc, #300]	; (5b50 <usart_process+0x328>)
    5a22:	4798      	blx	r3
				break;
    5a24:	46c0      	nop			; (mov r8, r8)
			}
			port[n_port-1].stage = RS485_READ;
    5a26:	1dfb      	adds	r3, r7, #7
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	1e5a      	subs	r2, r3, #1
    5a2c:	4841      	ldr	r0, [pc, #260]	; (5b34 <usart_process+0x30c>)
    5a2e:	2387      	movs	r3, #135	; 0x87
    5a30:	0099      	lsls	r1, r3, #2
    5a32:	0013      	movs	r3, r2
    5a34:	00db      	lsls	r3, r3, #3
    5a36:	189b      	adds	r3, r3, r2
    5a38:	019b      	lsls	r3, r3, #6
    5a3a:	18c3      	adds	r3, r0, r3
    5a3c:	185b      	adds	r3, r3, r1
    5a3e:	2201      	movs	r2, #1
    5a40:	701a      	strb	r2, [r3, #0]
			port[n_port-1].rn = 0;
    5a42:	1dfb      	adds	r3, r7, #7
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	1e5a      	subs	r2, r3, #1
    5a48:	493a      	ldr	r1, [pc, #232]	; (5b34 <usart_process+0x30c>)
    5a4a:	4842      	ldr	r0, [pc, #264]	; (5b54 <usart_process+0x32c>)
    5a4c:	0013      	movs	r3, r2
    5a4e:	00db      	lsls	r3, r3, #3
    5a50:	189b      	adds	r3, r3, r2
    5a52:	019b      	lsls	r3, r3, #6
    5a54:	18cb      	adds	r3, r1, r3
    5a56:	181b      	adds	r3, r3, r0
    5a58:	2200      	movs	r2, #0
    5a5a:	801a      	strh	r2, [r3, #0]

		return;
    5a5c:	e161      	b.n	5d22 <usart_process+0x4fa>
		case RS485_READ://UP
			size = usart_read(n_port - 1, port[n_port-1].rbuf, USART_BUF_SIZE);   //give mess size
    5a5e:	1dfb      	adds	r3, r7, #7
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	3b01      	subs	r3, #1
    5a64:	b2d8      	uxtb	r0, r3
    5a66:	1dfb      	adds	r3, r7, #7
    5a68:	781b      	ldrb	r3, [r3, #0]
    5a6a:	1e5a      	subs	r2, r3, #1
    5a6c:	0013      	movs	r3, r2
    5a6e:	00db      	lsls	r3, r3, #3
    5a70:	189b      	adds	r3, r3, r2
    5a72:	019b      	lsls	r3, r3, #6
    5a74:	3309      	adds	r3, #9
    5a76:	33ff      	adds	r3, #255	; 0xff
    5a78:	001a      	movs	r2, r3
    5a7a:	4b2e      	ldr	r3, [pc, #184]	; (5b34 <usart_process+0x30c>)
    5a7c:	18d3      	adds	r3, r2, r3
    5a7e:	1c59      	adds	r1, r3, #1
    5a80:	230e      	movs	r3, #14
    5a82:	18fc      	adds	r4, r7, r3
    5a84:	2380      	movs	r3, #128	; 0x80
    5a86:	005b      	lsls	r3, r3, #1
    5a88:	001a      	movs	r2, r3
    5a8a:	4b33      	ldr	r3, [pc, #204]	; (5b58 <usart_process+0x330>)
    5a8c:	4798      	blx	r3
    5a8e:	0003      	movs	r3, r0
    5a90:	8023      	strh	r3, [r4, #0]
			if (size != 0)
    5a92:	230e      	movs	r3, #14
    5a94:	18fb      	adds	r3, r7, r3
    5a96:	881b      	ldrh	r3, [r3, #0]
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d100      	bne.n	5a9e <usart_process+0x276>
    5a9c:	e0f3      	b.n	5c86 <usart_process+0x45e>
			{
				switch (cfg_1.sock_rs485[n_port - 1].pl)
    5a9e:	1dfb      	adds	r3, r7, #7
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	1e5a      	subs	r2, r3, #1
    5aa4:	4927      	ldr	r1, [pc, #156]	; (5b44 <usart_process+0x31c>)
    5aa6:	2036      	movs	r0, #54	; 0x36
    5aa8:	0013      	movs	r3, r2
    5aaa:	005b      	lsls	r3, r3, #1
    5aac:	189b      	adds	r3, r3, r2
    5aae:	009b      	lsls	r3, r3, #2
    5ab0:	189b      	adds	r3, r3, r2
    5ab2:	18cb      	adds	r3, r1, r3
    5ab4:	181b      	adds	r3, r3, r0
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	2b02      	cmp	r3, #2
    5aba:	d151      	bne.n	5b60 <usart_process+0x338>
				{
					case MBUS:
						if (size > USART_BUF_SIZE) {return;}
    5abc:	230e      	movs	r3, #14
    5abe:	18fb      	adds	r3, r7, r3
    5ac0:	881a      	ldrh	r2, [r3, #0]
    5ac2:	2380      	movs	r3, #128	; 0x80
    5ac4:	005b      	lsls	r3, r3, #1
    5ac6:	429a      	cmp	r2, r3
    5ac8:	d900      	bls.n	5acc <usart_process+0x2a4>
    5aca:	e125      	b.n	5d18 <usart_process+0x4f0>
						memcpy(eth_sock[n_port].data + MBAP_HDR_LEN, port[n_port-1].rbuf, size);
    5acc:	1dfb      	adds	r3, r7, #7
    5ace:	781b      	ldrb	r3, [r3, #0]
    5ad0:	4a1b      	ldr	r2, [pc, #108]	; (5b40 <usart_process+0x318>)
    5ad2:	4353      	muls	r3, r2
    5ad4:	3308      	adds	r3, #8
    5ad6:	001a      	movs	r2, r3
    5ad8:	4b17      	ldr	r3, [pc, #92]	; (5b38 <usart_process+0x310>)
    5ada:	18d3      	adds	r3, r2, r3
    5adc:	1d98      	adds	r0, r3, #6
    5ade:	1dfb      	adds	r3, r7, #7
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	1e5a      	subs	r2, r3, #1
    5ae4:	0013      	movs	r3, r2
    5ae6:	00db      	lsls	r3, r3, #3
    5ae8:	189b      	adds	r3, r3, r2
    5aea:	019b      	lsls	r3, r3, #6
    5aec:	3309      	adds	r3, #9
    5aee:	33ff      	adds	r3, #255	; 0xff
    5af0:	001a      	movs	r2, r3
    5af2:	4b10      	ldr	r3, [pc, #64]	; (5b34 <usart_process+0x30c>)
    5af4:	18d3      	adds	r3, r2, r3
    5af6:	1c59      	adds	r1, r3, #1
    5af8:	230e      	movs	r3, #14
    5afa:	18fb      	adds	r3, r7, r3
    5afc:	881b      	ldrh	r3, [r3, #0]
    5afe:	001a      	movs	r2, r3
    5b00:	4b16      	ldr	r3, [pc, #88]	; (5b5c <usart_process+0x334>)
    5b02:	4798      	blx	r3
						size += MBAP_HDR_LEN - 2;
    5b04:	230e      	movs	r3, #14
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	220e      	movs	r2, #14
    5b0a:	18ba      	adds	r2, r7, r2
    5b0c:	8812      	ldrh	r2, [r2, #0]
    5b0e:	3204      	adds	r2, #4
    5b10:	801a      	strh	r2, [r3, #0]
						eth_sock[n_port].data[5]=size-MBAP_HDR_LEN;
    5b12:	1dfb      	adds	r3, r7, #7
    5b14:	781b      	ldrb	r3, [r3, #0]
    5b16:	220e      	movs	r2, #14
    5b18:	18ba      	adds	r2, r7, r2
    5b1a:	8812      	ldrh	r2, [r2, #0]
    5b1c:	b2d2      	uxtb	r2, r2
    5b1e:	3a06      	subs	r2, #6
    5b20:	b2d0      	uxtb	r0, r2
    5b22:	4a05      	ldr	r2, [pc, #20]	; (5b38 <usart_process+0x310>)
    5b24:	4906      	ldr	r1, [pc, #24]	; (5b40 <usart_process+0x318>)
    5b26:	434b      	muls	r3, r1
    5b28:	18d3      	adds	r3, r2, r3
    5b2a:	330d      	adds	r3, #13
    5b2c:	1c02      	adds	r2, r0, #0
    5b2e:	701a      	strb	r2, [r3, #0]
					break;
    5b30:	e03a      	b.n	5ba8 <usart_process+0x380>
    5b32:	46c0      	nop			; (mov r8, r8)
    5b34:	200031fc 	.word	0x200031fc
    5b38:	200005cc 	.word	0x200005cc
    5b3c:	000005d1 	.word	0x000005d1
    5b40:	000005e5 	.word	0x000005e5
    5b44:	20003dc4 	.word	0x20003dc4
    5b48:	00004359 	.word	0x00004359
    5b4c:	00005e05 	.word	0x00005e05
    5b50:	00008f25 	.word	0x00008f25
    5b54:	0000020e 	.word	0x0000020e
    5b58:	00009039 	.word	0x00009039
    5b5c:	0000c8b9 	.word	0x0000c8b9
					default://GATE
						if (size > USART_BUF_SIZE) {return;}
    5b60:	230e      	movs	r3, #14
    5b62:	18fb      	adds	r3, r7, r3
    5b64:	881a      	ldrh	r2, [r3, #0]
    5b66:	2380      	movs	r3, #128	; 0x80
    5b68:	005b      	lsls	r3, r3, #1
    5b6a:	429a      	cmp	r2, r3
    5b6c:	d900      	bls.n	5b70 <usart_process+0x348>
    5b6e:	e0d5      	b.n	5d1c <usart_process+0x4f4>
						memcpy(eth_sock[n_port].data, port[n_port-1].rbuf, size); 
    5b70:	1dfb      	adds	r3, r7, #7
    5b72:	781b      	ldrb	r3, [r3, #0]
    5b74:	4a6c      	ldr	r2, [pc, #432]	; (5d28 <usart_process+0x500>)
    5b76:	4353      	muls	r3, r2
    5b78:	3308      	adds	r3, #8
    5b7a:	001a      	movs	r2, r3
    5b7c:	4b6b      	ldr	r3, [pc, #428]	; (5d2c <usart_process+0x504>)
    5b7e:	18d0      	adds	r0, r2, r3
    5b80:	1dfb      	adds	r3, r7, #7
    5b82:	781b      	ldrb	r3, [r3, #0]
    5b84:	1e5a      	subs	r2, r3, #1
    5b86:	0013      	movs	r3, r2
    5b88:	00db      	lsls	r3, r3, #3
    5b8a:	189b      	adds	r3, r3, r2
    5b8c:	019b      	lsls	r3, r3, #6
    5b8e:	3309      	adds	r3, #9
    5b90:	33ff      	adds	r3, #255	; 0xff
    5b92:	001a      	movs	r2, r3
    5b94:	4b66      	ldr	r3, [pc, #408]	; (5d30 <usart_process+0x508>)
    5b96:	18d3      	adds	r3, r2, r3
    5b98:	1c59      	adds	r1, r3, #1
    5b9a:	230e      	movs	r3, #14
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	881b      	ldrh	r3, [r3, #0]
    5ba0:	001a      	movs	r2, r3
    5ba2:	4b64      	ldr	r3, [pc, #400]	; (5d34 <usart_process+0x50c>)
    5ba4:	4798      	blx	r3
					break;
    5ba6:	46c0      	nop			; (mov r8, r8)
				}
			
				eth_sock[n_port].len[0]		= (size & 0xFF00) >> 8;
    5ba8:	1dfb      	adds	r3, r7, #7
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	220e      	movs	r2, #14
    5bae:	18ba      	adds	r2, r7, r2
    5bb0:	8812      	ldrh	r2, [r2, #0]
    5bb2:	0a12      	lsrs	r2, r2, #8
    5bb4:	b292      	uxth	r2, r2
    5bb6:	b2d0      	uxtb	r0, r2
    5bb8:	4a5c      	ldr	r2, [pc, #368]	; (5d2c <usart_process+0x504>)
    5bba:	495b      	ldr	r1, [pc, #364]	; (5d28 <usart_process+0x500>)
    5bbc:	434b      	muls	r3, r1
    5bbe:	18d3      	adds	r3, r2, r3
    5bc0:	3306      	adds	r3, #6
    5bc2:	1c02      	adds	r2, r0, #0
    5bc4:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].len[1]		=  size & 0x00FF;
    5bc6:	1dfb      	adds	r3, r7, #7
    5bc8:	781b      	ldrb	r3, [r3, #0]
    5bca:	220e      	movs	r2, #14
    5bcc:	18ba      	adds	r2, r7, r2
    5bce:	8812      	ldrh	r2, [r2, #0]
    5bd0:	b2d0      	uxtb	r0, r2
    5bd2:	4a56      	ldr	r2, [pc, #344]	; (5d2c <usart_process+0x504>)
    5bd4:	4954      	ldr	r1, [pc, #336]	; (5d28 <usart_process+0x500>)
    5bd6:	434b      	muls	r3, r1
    5bd8:	18d3      	adds	r3, r2, r3
    5bda:	3307      	adds	r3, #7
    5bdc:	1c02      	adds	r2, r0, #0
    5bde:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].w_status	= 1;
    5be0:	1dfb      	adds	r3, r7, #7
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	4a51      	ldr	r2, [pc, #324]	; (5d2c <usart_process+0x504>)
    5be6:	4954      	ldr	r1, [pc, #336]	; (5d38 <usart_process+0x510>)
    5be8:	484f      	ldr	r0, [pc, #316]	; (5d28 <usart_process+0x500>)
    5bea:	4343      	muls	r3, r0
    5bec:	18d3      	adds	r3, r2, r3
    5bee:	185b      	adds	r3, r3, r1
    5bf0:	2201      	movs	r2, #1
    5bf2:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt			= (port[n_port-1].tout_port*10)-port[n_port-1].time_port;
    5bf4:	1dfb      	adds	r3, r7, #7
    5bf6:	781b      	ldrb	r3, [r3, #0]
    5bf8:	1e5a      	subs	r2, r3, #1
    5bfa:	1dfb      	adds	r3, r7, #7
    5bfc:	781b      	ldrb	r3, [r3, #0]
    5bfe:	1e59      	subs	r1, r3, #1
    5c00:	4c4b      	ldr	r4, [pc, #300]	; (5d30 <usart_process+0x508>)
    5c02:	2386      	movs	r3, #134	; 0x86
    5c04:	0098      	lsls	r0, r3, #2
    5c06:	000b      	movs	r3, r1
    5c08:	00db      	lsls	r3, r3, #3
    5c0a:	185b      	adds	r3, r3, r1
    5c0c:	019b      	lsls	r3, r3, #6
    5c0e:	18e3      	adds	r3, r4, r3
    5c10:	181b      	adds	r3, r3, r0
    5c12:	881b      	ldrh	r3, [r3, #0]
    5c14:	b29b      	uxth	r3, r3
    5c16:	1c19      	adds	r1, r3, #0
    5c18:	0089      	lsls	r1, r1, #2
    5c1a:	18cb      	adds	r3, r1, r3
    5c1c:	18db      	adds	r3, r3, r3
    5c1e:	b298      	uxth	r0, r3
    5c20:	1dfb      	adds	r3, r7, #7
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	1e59      	subs	r1, r3, #1
    5c26:	4d42      	ldr	r5, [pc, #264]	; (5d30 <usart_process+0x508>)
    5c28:	2388      	movs	r3, #136	; 0x88
    5c2a:	009c      	lsls	r4, r3, #2
    5c2c:	000b      	movs	r3, r1
    5c2e:	00db      	lsls	r3, r3, #3
    5c30:	185b      	adds	r3, r3, r1
    5c32:	019b      	lsls	r3, r3, #6
    5c34:	18eb      	adds	r3, r5, r3
    5c36:	191b      	adds	r3, r3, r4
    5c38:	681b      	ldr	r3, [r3, #0]
    5c3a:	b29b      	uxth	r3, r3
    5c3c:	1ac3      	subs	r3, r0, r3
    5c3e:	b29c      	uxth	r4, r3
    5c40:	493b      	ldr	r1, [pc, #236]	; (5d30 <usart_process+0x508>)
    5c42:	483e      	ldr	r0, [pc, #248]	; (5d3c <usart_process+0x514>)
    5c44:	0013      	movs	r3, r2
    5c46:	00db      	lsls	r3, r3, #3
    5c48:	189b      	adds	r3, r3, r2
    5c4a:	019b      	lsls	r3, r3, #6
    5c4c:	18cb      	adds	r3, r1, r3
    5c4e:	181b      	adds	r3, r3, r0
    5c50:	1c22      	adds	r2, r4, #0
    5c52:	801a      	strh	r2, [r3, #0]
				port[n_port-1].stage		= RS485_WRITE;
    5c54:	1dfb      	adds	r3, r7, #7
    5c56:	781b      	ldrb	r3, [r3, #0]
    5c58:	1e5a      	subs	r2, r3, #1
    5c5a:	4835      	ldr	r0, [pc, #212]	; (5d30 <usart_process+0x508>)
    5c5c:	2387      	movs	r3, #135	; 0x87
    5c5e:	0099      	lsls	r1, r3, #2
    5c60:	0013      	movs	r3, r2
    5c62:	00db      	lsls	r3, r3, #3
    5c64:	189b      	adds	r3, r3, r2
    5c66:	019b      	lsls	r3, r3, #6
    5c68:	18c3      	adds	r3, r0, r3
    5c6a:	185b      	adds	r3, r3, r1
    5c6c:	2200      	movs	r2, #0
    5c6e:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].r_status	= 0;
    5c70:	1dfb      	adds	r3, r7, #7
    5c72:	781b      	ldrb	r3, [r3, #0]
    5c74:	4a2d      	ldr	r2, [pc, #180]	; (5d2c <usart_process+0x504>)
    5c76:	4932      	ldr	r1, [pc, #200]	; (5d40 <usart_process+0x518>)
    5c78:	482b      	ldr	r0, [pc, #172]	; (5d28 <usart_process+0x500>)
    5c7a:	4343      	muls	r3, r0
    5c7c:	18d3      	adds	r3, r2, r3
    5c7e:	185b      	adds	r3, r3, r1
    5c80:	2200      	movs	r2, #0
    5c82:	701a      	strb	r2, [r3, #0]
				return;
    5c84:	e04d      	b.n	5d22 <usart_process+0x4fa>
			}
			if (port[n_port-1].time_port==0)
    5c86:	1dfb      	adds	r3, r7, #7
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	1e5a      	subs	r2, r3, #1
    5c8c:	4828      	ldr	r0, [pc, #160]	; (5d30 <usart_process+0x508>)
    5c8e:	2388      	movs	r3, #136	; 0x88
    5c90:	0099      	lsls	r1, r3, #2
    5c92:	0013      	movs	r3, r2
    5c94:	00db      	lsls	r3, r3, #3
    5c96:	189b      	adds	r3, r3, r2
    5c98:	019b      	lsls	r3, r3, #6
    5c9a:	18c3      	adds	r3, r0, r3
    5c9c:	185b      	adds	r3, r3, r1
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d13d      	bne.n	5d20 <usart_process+0x4f8>
			{
				port[n_port-1].stage = RS485_WRITE;
    5ca4:	1dfb      	adds	r3, r7, #7
    5ca6:	781b      	ldrb	r3, [r3, #0]
    5ca8:	1e5a      	subs	r2, r3, #1
    5caa:	4821      	ldr	r0, [pc, #132]	; (5d30 <usart_process+0x508>)
    5cac:	2387      	movs	r3, #135	; 0x87
    5cae:	0099      	lsls	r1, r3, #2
    5cb0:	0013      	movs	r3, r2
    5cb2:	00db      	lsls	r3, r3, #3
    5cb4:	189b      	adds	r3, r3, r2
    5cb6:	019b      	lsls	r3, r3, #6
    5cb8:	18c3      	adds	r3, r0, r3
    5cba:	185b      	adds	r3, r3, r1
    5cbc:	2200      	movs	r2, #0
    5cbe:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt 	 = 0;
    5cc0:	1dfb      	adds	r3, r7, #7
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	1e5a      	subs	r2, r3, #1
    5cc6:	491a      	ldr	r1, [pc, #104]	; (5d30 <usart_process+0x508>)
    5cc8:	481c      	ldr	r0, [pc, #112]	; (5d3c <usart_process+0x514>)
    5cca:	0013      	movs	r3, r2
    5ccc:	00db      	lsls	r3, r3, #3
    5cce:	189b      	adds	r3, r3, r2
    5cd0:	019b      	lsls	r3, r3, #6
    5cd2:	18cb      	adds	r3, r1, r3
    5cd4:	181b      	adds	r3, r3, r0
    5cd6:	2200      	movs	r2, #0
    5cd8:	801a      	strh	r2, [r3, #0]
				eth_sock[n_port].r_status = 0;
    5cda:	1dfb      	adds	r3, r7, #7
    5cdc:	781b      	ldrb	r3, [r3, #0]
    5cde:	4a13      	ldr	r2, [pc, #76]	; (5d2c <usart_process+0x504>)
    5ce0:	4917      	ldr	r1, [pc, #92]	; (5d40 <usart_process+0x518>)
    5ce2:	4811      	ldr	r0, [pc, #68]	; (5d28 <usart_process+0x500>)
    5ce4:	4343      	muls	r3, r0
    5ce6:	18d3      	adds	r3, r2, r3
    5ce8:	185b      	adds	r3, r3, r1
    5cea:	2200      	movs	r2, #0
    5cec:	701a      	strb	r2, [r3, #0]
			}
		return;
    5cee:	e017      	b.n	5d20 <usart_process+0x4f8>
		default:
			port[n_port-1].stage = RS485_WRITE;
    5cf0:	1dfb      	adds	r3, r7, #7
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	1e5a      	subs	r2, r3, #1
    5cf6:	480e      	ldr	r0, [pc, #56]	; (5d30 <usart_process+0x508>)
    5cf8:	2387      	movs	r3, #135	; 0x87
    5cfa:	0099      	lsls	r1, r3, #2
    5cfc:	0013      	movs	r3, r2
    5cfe:	00db      	lsls	r3, r3, #3
    5d00:	189b      	adds	r3, r3, r2
    5d02:	019b      	lsls	r3, r3, #6
    5d04:	18c3      	adds	r3, r0, r3
    5d06:	185b      	adds	r3, r3, r1
    5d08:	2200      	movs	r2, #0
    5d0a:	701a      	strb	r2, [r3, #0]
		break;
    5d0c:	46c0      	nop			; (mov r8, r8)
    5d0e:	e008      	b.n	5d22 <usart_process+0x4fa>
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5d10:	46c0      	nop			; (mov r8, r8)
    5d12:	e006      	b.n	5d22 <usart_process+0x4fa>
			if(!cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5d14:	46c0      	nop			; (mov r8, r8)
    5d16:	e004      	b.n	5d22 <usart_process+0x4fa>
						if (size > USART_BUF_SIZE) {return;}
    5d18:	46c0      	nop			; (mov r8, r8)
    5d1a:	e002      	b.n	5d22 <usart_process+0x4fa>
						if (size > USART_BUF_SIZE) {return;}
    5d1c:	46c0      	nop			; (mov r8, r8)
    5d1e:	e000      	b.n	5d22 <usart_process+0x4fa>
		return;
    5d20:	46c0      	nop			; (mov r8, r8)
	}
    5d22:	46bd      	mov	sp, r7
    5d24:	b004      	add	sp, #16
    5d26:	bdb0      	pop	{r4, r5, r7, pc}
    5d28:	000005e5 	.word	0x000005e5
    5d2c:	200005cc 	.word	0x200005cc
    5d30:	200031fc 	.word	0x200031fc
    5d34:	0000c8b9 	.word	0x0000c8b9
    5d38:	000005d2 	.word	0x000005d2
    5d3c:	0000021a 	.word	0x0000021a
    5d40:	000005d1 	.word	0x000005d1

00005d44 <crc16_ccit>:
#include "def.h"

WORD crc16_ccit(BYTE *buf,WORD size)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b084      	sub	sp, #16
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
    5d4c:	000a      	movs	r2, r1
    5d4e:	1cbb      	adds	r3, r7, #2
    5d50:	801a      	strh	r2, [r3, #0]
	WORD crc = 0xFFFF;
    5d52:	230e      	movs	r3, #14
    5d54:	18fb      	adds	r3, r7, r3
    5d56:	2201      	movs	r2, #1
    5d58:	4252      	negs	r2, r2
    5d5a:	801a      	strh	r2, [r3, #0]
	BYTE i;

	while (size--)
    5d5c:	e037      	b.n	5dce <crc16_ccit+0x8a>
	{
		crc ^= *buf++ << 8;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	1c5a      	adds	r2, r3, #1
    5d62:	607a      	str	r2, [r7, #4]
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	021b      	lsls	r3, r3, #8
    5d68:	b21a      	sxth	r2, r3
    5d6a:	230e      	movs	r3, #14
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	2100      	movs	r1, #0
    5d70:	5e5b      	ldrsh	r3, [r3, r1]
    5d72:	4053      	eors	r3, r2
    5d74:	b21a      	sxth	r2, r3
    5d76:	230e      	movs	r3, #14
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++)
    5d7c:	230d      	movs	r3, #13
    5d7e:	18fb      	adds	r3, r7, r3
    5d80:	2200      	movs	r2, #0
    5d82:	701a      	strb	r2, [r3, #0]
    5d84:	e01e      	b.n	5dc4 <crc16_ccit+0x80>
		crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
    5d86:	230e      	movs	r3, #14
    5d88:	18fb      	adds	r3, r7, r3
    5d8a:	2200      	movs	r2, #0
    5d8c:	5e9b      	ldrsh	r3, [r3, r2]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	da09      	bge.n	5da6 <crc16_ccit+0x62>
    5d92:	230e      	movs	r3, #14
    5d94:	18fb      	adds	r3, r7, r3
    5d96:	881b      	ldrh	r3, [r3, #0]
    5d98:	005b      	lsls	r3, r3, #1
    5d9a:	b21b      	sxth	r3, r3
    5d9c:	4a18      	ldr	r2, [pc, #96]	; (5e00 <crc16_ccit+0xbc>)
    5d9e:	4053      	eors	r3, r2
    5da0:	b21b      	sxth	r3, r3
    5da2:	b29b      	uxth	r3, r3
    5da4:	e004      	b.n	5db0 <crc16_ccit+0x6c>
    5da6:	230e      	movs	r3, #14
    5da8:	18fb      	adds	r3, r7, r3
    5daa:	881b      	ldrh	r3, [r3, #0]
    5dac:	18db      	adds	r3, r3, r3
    5dae:	b29b      	uxth	r3, r3
    5db0:	220e      	movs	r2, #14
    5db2:	18ba      	adds	r2, r7, r2
    5db4:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++)
    5db6:	230d      	movs	r3, #13
    5db8:	18fb      	adds	r3, r7, r3
    5dba:	781a      	ldrb	r2, [r3, #0]
    5dbc:	230d      	movs	r3, #13
    5dbe:	18fb      	adds	r3, r7, r3
    5dc0:	3201      	adds	r2, #1
    5dc2:	701a      	strb	r2, [r3, #0]
    5dc4:	230d      	movs	r3, #13
    5dc6:	18fb      	adds	r3, r7, r3
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	2b07      	cmp	r3, #7
    5dcc:	d9db      	bls.n	5d86 <crc16_ccit+0x42>
	while (size--)
    5dce:	1cbb      	adds	r3, r7, #2
    5dd0:	881b      	ldrh	r3, [r3, #0]
    5dd2:	1cba      	adds	r2, r7, #2
    5dd4:	1e59      	subs	r1, r3, #1
    5dd6:	8011      	strh	r1, [r2, #0]
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d1c0      	bne.n	5d5e <crc16_ccit+0x1a>
	}
	return ((crc>>8) | (crc<<8));
    5ddc:	230e      	movs	r3, #14
    5dde:	18fb      	adds	r3, r7, r3
    5de0:	881b      	ldrh	r3, [r3, #0]
    5de2:	0a1b      	lsrs	r3, r3, #8
    5de4:	b29b      	uxth	r3, r3
    5de6:	b21a      	sxth	r2, r3
    5de8:	230e      	movs	r3, #14
    5dea:	18fb      	adds	r3, r7, r3
    5dec:	881b      	ldrh	r3, [r3, #0]
    5dee:	021b      	lsls	r3, r3, #8
    5df0:	b21b      	sxth	r3, r3
    5df2:	4313      	orrs	r3, r2
    5df4:	b21b      	sxth	r3, r3
    5df6:	b29b      	uxth	r3, r3
}
    5df8:	0018      	movs	r0, r3
    5dfa:	46bd      	mov	sp, r7
    5dfc:	b004      	add	sp, #16
    5dfe:	bd80      	pop	{r7, pc}
    5e00:	00001021 	.word	0x00001021

00005e04 <crc16_mbus>:

WORD crc16_mbus( BYTE *buf, WORD size )
{
    5e04:	b580      	push	{r7, lr}
    5e06:	b084      	sub	sp, #16
    5e08:	af00      	add	r7, sp, #0
    5e0a:	6078      	str	r0, [r7, #4]
    5e0c:	000a      	movs	r2, r1
    5e0e:	1cbb      	adds	r3, r7, #2
    5e10:	801a      	strh	r2, [r3, #0]
	 WORD n;
	 uint8_t i;
	 WORD crc = 0xFFFF;
    5e12:	230a      	movs	r3, #10
    5e14:	18fb      	adds	r3, r7, r3
    5e16:	2201      	movs	r2, #1
    5e18:	4252      	negs	r2, r2
    5e1a:	801a      	strh	r2, [r3, #0]
	 for ( n = 0; n < size; n++ )
    5e1c:	230e      	movs	r3, #14
    5e1e:	18fb      	adds	r3, r7, r3
    5e20:	2200      	movs	r2, #0
    5e22:	801a      	strh	r2, [r3, #0]
    5e24:	e042      	b.n	5eac <crc16_mbus+0xa8>
	 {
		 crc ^= buf[n];
    5e26:	230e      	movs	r3, #14
    5e28:	18fb      	adds	r3, r7, r3
    5e2a:	881b      	ldrh	r3, [r3, #0]
    5e2c:	687a      	ldr	r2, [r7, #4]
    5e2e:	18d3      	adds	r3, r2, r3
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	b299      	uxth	r1, r3
    5e34:	230a      	movs	r3, #10
    5e36:	18fb      	adds	r3, r7, r3
    5e38:	220a      	movs	r2, #10
    5e3a:	18ba      	adds	r2, r7, r2
    5e3c:	8812      	ldrh	r2, [r2, #0]
    5e3e:	404a      	eors	r2, r1
    5e40:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e42:	230d      	movs	r3, #13
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	2208      	movs	r2, #8
    5e48:	701a      	strb	r2, [r3, #0]
    5e4a:	e023      	b.n	5e94 <crc16_mbus+0x90>
		 {
			 if ( crc & 0x0001 )
    5e4c:	230a      	movs	r3, #10
    5e4e:	18fb      	adds	r3, r7, r3
    5e50:	881b      	ldrh	r3, [r3, #0]
    5e52:	2201      	movs	r2, #1
    5e54:	4013      	ands	r3, r2
    5e56:	d00f      	beq.n	5e78 <crc16_mbus+0x74>
			 {
				 crc >>= 1;
    5e58:	230a      	movs	r3, #10
    5e5a:	18fb      	adds	r3, r7, r3
    5e5c:	220a      	movs	r2, #10
    5e5e:	18ba      	adds	r2, r7, r2
    5e60:	8812      	ldrh	r2, [r2, #0]
    5e62:	0852      	lsrs	r2, r2, #1
    5e64:	801a      	strh	r2, [r3, #0]
				 crc ^= 0xA001;
    5e66:	230a      	movs	r3, #10
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	220a      	movs	r2, #10
    5e6c:	18ba      	adds	r2, r7, r2
    5e6e:	8812      	ldrh	r2, [r2, #0]
    5e70:	4915      	ldr	r1, [pc, #84]	; (5ec8 <crc16_mbus+0xc4>)
    5e72:	404a      	eors	r2, r1
    5e74:	801a      	strh	r2, [r3, #0]
    5e76:	e006      	b.n	5e86 <crc16_mbus+0x82>
			 }
			 else
			 {
				 crc >>= 1;
    5e78:	230a      	movs	r3, #10
    5e7a:	18fb      	adds	r3, r7, r3
    5e7c:	220a      	movs	r2, #10
    5e7e:	18ba      	adds	r2, r7, r2
    5e80:	8812      	ldrh	r2, [r2, #0]
    5e82:	0852      	lsrs	r2, r2, #1
    5e84:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5e86:	230d      	movs	r3, #13
    5e88:	18fb      	adds	r3, r7, r3
    5e8a:	781a      	ldrb	r2, [r3, #0]
    5e8c:	230d      	movs	r3, #13
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	3a01      	subs	r2, #1
    5e92:	701a      	strb	r2, [r3, #0]
    5e94:	230d      	movs	r3, #13
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d1d6      	bne.n	5e4c <crc16_mbus+0x48>
	 for ( n = 0; n < size; n++ )
    5e9e:	230e      	movs	r3, #14
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	881a      	ldrh	r2, [r3, #0]
    5ea4:	230e      	movs	r3, #14
    5ea6:	18fb      	adds	r3, r7, r3
    5ea8:	3201      	adds	r2, #1
    5eaa:	801a      	strh	r2, [r3, #0]
    5eac:	230e      	movs	r3, #14
    5eae:	18fa      	adds	r2, r7, r3
    5eb0:	1cbb      	adds	r3, r7, #2
    5eb2:	8812      	ldrh	r2, [r2, #0]
    5eb4:	881b      	ldrh	r3, [r3, #0]
    5eb6:	429a      	cmp	r2, r3
    5eb8:	d3b5      	bcc.n	5e26 <crc16_mbus+0x22>
			 }
		 }
	 }
	 return crc;
    5eba:	230a      	movs	r3, #10
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	881b      	ldrh	r3, [r3, #0]
}
    5ec0:	0018      	movs	r0, r3
    5ec2:	46bd      	mov	sp, r7
    5ec4:	b004      	add	sp, #16
    5ec6:	bd80      	pop	{r7, pc}
    5ec8:	ffffa001 	.word	0xffffa001

00005ecc <crc32>:

uint_least32_t crc32(unsigned char *buf, size_t len)
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	4f4c      	ldr	r7, [pc, #304]	; (6000 <crc32+0x134>)
    5ed0:	44bd      	add	sp, r7
    5ed2:	af00      	add	r7, sp, #0
    5ed4:	6078      	str	r0, [r7, #4]
    5ed6:	6039      	str	r1, [r7, #0]
	uint_least32_t crc_table[256];
	uint_least32_t crc; int i, j;
	
	for (i = 0; i < 256; i++)
    5ed8:	2300      	movs	r3, #0
    5eda:	2282      	movs	r2, #130	; 0x82
    5edc:	00d2      	lsls	r2, r2, #3
    5ede:	18ba      	adds	r2, r7, r2
    5ee0:	6013      	str	r3, [r2, #0]
    5ee2:	e043      	b.n	5f6c <crc32+0xa0>
	{
		crc = i;
    5ee4:	2382      	movs	r3, #130	; 0x82
    5ee6:	00db      	lsls	r3, r3, #3
    5ee8:	18fb      	adds	r3, r7, r3
    5eea:	681b      	ldr	r3, [r3, #0]
    5eec:	4a45      	ldr	r2, [pc, #276]	; (6004 <crc32+0x138>)
    5eee:	18ba      	adds	r2, r7, r2
    5ef0:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5ef2:	2300      	movs	r3, #0
    5ef4:	4a44      	ldr	r2, [pc, #272]	; (6008 <crc32+0x13c>)
    5ef6:	18ba      	adds	r2, r7, r2
    5ef8:	6013      	str	r3, [r2, #0]
    5efa:	e01a      	b.n	5f32 <crc32+0x66>
		crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
    5efc:	4b41      	ldr	r3, [pc, #260]	; (6004 <crc32+0x138>)
    5efe:	18fb      	adds	r3, r7, r3
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	2201      	movs	r2, #1
    5f04:	4013      	ands	r3, r2
    5f06:	d006      	beq.n	5f16 <crc32+0x4a>
    5f08:	4b3e      	ldr	r3, [pc, #248]	; (6004 <crc32+0x138>)
    5f0a:	18fb      	adds	r3, r7, r3
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	085b      	lsrs	r3, r3, #1
    5f10:	4a3e      	ldr	r2, [pc, #248]	; (600c <crc32+0x140>)
    5f12:	4053      	eors	r3, r2
    5f14:	e003      	b.n	5f1e <crc32+0x52>
    5f16:	4b3b      	ldr	r3, [pc, #236]	; (6004 <crc32+0x138>)
    5f18:	18fb      	adds	r3, r7, r3
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	085b      	lsrs	r3, r3, #1
    5f1e:	4a39      	ldr	r2, [pc, #228]	; (6004 <crc32+0x138>)
    5f20:	18ba      	adds	r2, r7, r2
    5f22:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 8; j++)
    5f24:	4b38      	ldr	r3, [pc, #224]	; (6008 <crc32+0x13c>)
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	3301      	adds	r3, #1
    5f2c:	4a36      	ldr	r2, [pc, #216]	; (6008 <crc32+0x13c>)
    5f2e:	18ba      	adds	r2, r7, r2
    5f30:	6013      	str	r3, [r2, #0]
    5f32:	4b35      	ldr	r3, [pc, #212]	; (6008 <crc32+0x13c>)
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	681b      	ldr	r3, [r3, #0]
    5f38:	2b07      	cmp	r3, #7
    5f3a:	dddf      	ble.n	5efc <crc32+0x30>

		crc_table[i] = crc;
    5f3c:	4b34      	ldr	r3, [pc, #208]	; (6010 <crc32+0x144>)
    5f3e:	2283      	movs	r2, #131	; 0x83
    5f40:	00d2      	lsls	r2, r2, #3
    5f42:	4694      	mov	ip, r2
    5f44:	44bc      	add	ip, r7
    5f46:	4463      	add	r3, ip
    5f48:	2282      	movs	r2, #130	; 0x82
    5f4a:	00d2      	lsls	r2, r2, #3
    5f4c:	18ba      	adds	r2, r7, r2
    5f4e:	6812      	ldr	r2, [r2, #0]
    5f50:	0092      	lsls	r2, r2, #2
    5f52:	492c      	ldr	r1, [pc, #176]	; (6004 <crc32+0x138>)
    5f54:	1879      	adds	r1, r7, r1
    5f56:	6809      	ldr	r1, [r1, #0]
    5f58:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 256; i++)
    5f5a:	2382      	movs	r3, #130	; 0x82
    5f5c:	00db      	lsls	r3, r3, #3
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	3301      	adds	r3, #1
    5f64:	2282      	movs	r2, #130	; 0x82
    5f66:	00d2      	lsls	r2, r2, #3
    5f68:	18ba      	adds	r2, r7, r2
    5f6a:	6013      	str	r3, [r2, #0]
    5f6c:	2382      	movs	r3, #130	; 0x82
    5f6e:	00db      	lsls	r3, r3, #3
    5f70:	18fb      	adds	r3, r7, r3
    5f72:	681b      	ldr	r3, [r3, #0]
    5f74:	2bff      	cmp	r3, #255	; 0xff
    5f76:	ddb5      	ble.n	5ee4 <crc32+0x18>
	};

	crc = 0xFFFFFFFFUL;
    5f78:	2301      	movs	r3, #1
    5f7a:	425b      	negs	r3, r3
    5f7c:	4a21      	ldr	r2, [pc, #132]	; (6004 <crc32+0x138>)
    5f7e:	18ba      	adds	r2, r7, r2
    5f80:	6013      	str	r3, [r2, #0]
	
	while (len--)
    5f82:	e02d      	b.n	5fe0 <crc32+0x114>
	{
		if(!(len % 32768)) {wdt_reset();}
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	045b      	lsls	r3, r3, #17
    5f88:	0c5b      	lsrs	r3, r3, #17
    5f8a:	d10e      	bne.n	5faa <crc32+0xde>
    5f8c:	4b21      	ldr	r3, [pc, #132]	; (6014 <crc32+0x148>)
    5f8e:	799b      	ldrb	r3, [r3, #6]
    5f90:	07db      	lsls	r3, r3, #31
    5f92:	0fdb      	lsrs	r3, r3, #31
    5f94:	b2db      	uxtb	r3, r3
    5f96:	2b01      	cmp	r3, #1
    5f98:	d107      	bne.n	5faa <crc32+0xde>
    5f9a:	4a1e      	ldr	r2, [pc, #120]	; (6014 <crc32+0x148>)
    5f9c:	7993      	ldrb	r3, [r2, #6]
    5f9e:	2101      	movs	r1, #1
    5fa0:	430b      	orrs	r3, r1
    5fa2:	7193      	strb	r3, [r2, #6]
    5fa4:	4b1b      	ldr	r3, [pc, #108]	; (6014 <crc32+0x148>)
    5fa6:	22a5      	movs	r2, #165	; 0xa5
    5fa8:	721a      	strb	r2, [r3, #8]
		crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
    5faa:	687b      	ldr	r3, [r7, #4]
    5fac:	1c5a      	adds	r2, r3, #1
    5fae:	607a      	str	r2, [r7, #4]
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	001a      	movs	r2, r3
    5fb4:	4b13      	ldr	r3, [pc, #76]	; (6004 <crc32+0x138>)
    5fb6:	18fb      	adds	r3, r7, r3
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	4053      	eors	r3, r2
    5fbc:	22ff      	movs	r2, #255	; 0xff
    5fbe:	401a      	ands	r2, r3
    5fc0:	4b13      	ldr	r3, [pc, #76]	; (6010 <crc32+0x144>)
    5fc2:	2183      	movs	r1, #131	; 0x83
    5fc4:	00c9      	lsls	r1, r1, #3
    5fc6:	468c      	mov	ip, r1
    5fc8:	44bc      	add	ip, r7
    5fca:	4463      	add	r3, ip
    5fcc:	0092      	lsls	r2, r2, #2
    5fce:	58d2      	ldr	r2, [r2, r3]
    5fd0:	4b0c      	ldr	r3, [pc, #48]	; (6004 <crc32+0x138>)
    5fd2:	18fb      	adds	r3, r7, r3
    5fd4:	681b      	ldr	r3, [r3, #0]
    5fd6:	0a1b      	lsrs	r3, r3, #8
    5fd8:	4053      	eors	r3, r2
    5fda:	4a0a      	ldr	r2, [pc, #40]	; (6004 <crc32+0x138>)
    5fdc:	18ba      	adds	r2, r7, r2
    5fde:	6013      	str	r3, [r2, #0]
	while (len--)
    5fe0:	683b      	ldr	r3, [r7, #0]
    5fe2:	1e5a      	subs	r2, r3, #1
    5fe4:	603a      	str	r2, [r7, #0]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d1cc      	bne.n	5f84 <crc32+0xb8>
	}
	
	return crc ^ 0xFFFFFFFFUL;
    5fea:	4b06      	ldr	r3, [pc, #24]	; (6004 <crc32+0x138>)
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	681b      	ldr	r3, [r3, #0]
    5ff0:	43db      	mvns	r3, r3
    5ff2:	0018      	movs	r0, r3
    5ff4:	46bd      	mov	sp, r7
    5ff6:	2383      	movs	r3, #131	; 0x83
    5ff8:	00db      	lsls	r3, r3, #3
    5ffa:	449d      	add	sp, r3
    5ffc:	bd80      	pop	{r7, pc}
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	fffffbe8 	.word	0xfffffbe8
    6004:	00000414 	.word	0x00000414
    6008:	0000040c 	.word	0x0000040c
    600c:	edb88320 	.word	0xedb88320
    6010:	fffffbf4 	.word	0xfffffbf4
    6014:	40001000 	.word	0x40001000

00006018 <crypted>:

#define CRYPTED 	1
#define DECRYPTED 	0

void crypted(char* str)
{
    6018:	b580      	push	{r7, lr}
    601a:	b082      	sub	sp, #8
    601c:	af00      	add	r7, sp, #0
    601e:	6078      	str	r0, [r7, #4]
	move(str, CRYPTED);
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	2101      	movs	r1, #1
    6024:	0018      	movs	r0, r3
    6026:	f000 f917 	bl	6258 <move>
	wave(str, CRYPTED);
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	2101      	movs	r1, #1
    602e:	0018      	movs	r0, r3
    6030:	f000 f820 	bl	6074 <wave>
	shell_game(str,CRYPTED);
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	2101      	movs	r1, #1
    6038:	0018      	movs	r0, r3
    603a:	f000 f87e 	bl	613a <shell_game>
}
    603e:	46c0      	nop			; (mov r8, r8)
    6040:	46bd      	mov	sp, r7
    6042:	b002      	add	sp, #8
    6044:	bd80      	pop	{r7, pc}

00006046 <decrypted>:

void decrypted(char* str)
{
    6046:	b580      	push	{r7, lr}
    6048:	b082      	sub	sp, #8
    604a:	af00      	add	r7, sp, #0
    604c:	6078      	str	r0, [r7, #4]
	shell_game(str,DECRYPTED);
    604e:	687b      	ldr	r3, [r7, #4]
    6050:	2100      	movs	r1, #0
    6052:	0018      	movs	r0, r3
    6054:	f000 f871 	bl	613a <shell_game>
	wave(str, DECRYPTED);
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	2100      	movs	r1, #0
    605c:	0018      	movs	r0, r3
    605e:	f000 f809 	bl	6074 <wave>
	move(str, DECRYPTED);
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	2100      	movs	r1, #0
    6066:	0018      	movs	r0, r3
    6068:	f000 f8f6 	bl	6258 <move>
}
    606c:	46c0      	nop			; (mov r8, r8)
    606e:	46bd      	mov	sp, r7
    6070:	b002      	add	sp, #8
    6072:	bd80      	pop	{r7, pc}

00006074 <wave>:

void wave(char* ptr, char mode)
{
    6074:	b580      	push	{r7, lr}
    6076:	b084      	sub	sp, #16
    6078:	af00      	add	r7, sp, #0
    607a:	6078      	str	r0, [r7, #4]
    607c:	000a      	movs	r2, r1
    607e:	1cfb      	adds	r3, r7, #3
    6080:	701a      	strb	r2, [r3, #0]
	char plus;
	char sign = -1;
    6082:	230f      	movs	r3, #15
    6084:	18fb      	adds	r3, r7, r3
    6086:	22ff      	movs	r2, #255	; 0xff
    6088:	701a      	strb	r2, [r3, #0]
	char i=0;
    608a:	230e      	movs	r3, #14
    608c:	18fb      	adds	r3, r7, r3
    608e:	2200      	movs	r2, #0
    6090:	701a      	strb	r2, [r3, #0]
	char step=0;
    6092:	230d      	movs	r3, #13
    6094:	18fb      	adds	r3, r7, r3
    6096:	2200      	movs	r2, #0
    6098:	701a      	strb	r2, [r3, #0]
	
	
	if (mode == CRYPTED) {sign = 1;}
    609a:	1cfb      	adds	r3, r7, #3
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	2b01      	cmp	r3, #1
    60a0:	d103      	bne.n	60aa <wave+0x36>
    60a2:	230f      	movs	r3, #15
    60a4:	18fb      	adds	r3, r7, r3
    60a6:	2201      	movs	r2, #1
    60a8:	701a      	strb	r2, [r3, #0]
	for ( i= 0; i < 64; i++)
    60aa:	230e      	movs	r3, #14
    60ac:	18fb      	adds	r3, r7, r3
    60ae:	2200      	movs	r2, #0
    60b0:	701a      	strb	r2, [r3, #0]
    60b2:	e039      	b.n	6128 <wave+0xb4>
	{
		step = i % 2;
    60b4:	230d      	movs	r3, #13
    60b6:	18fb      	adds	r3, r7, r3
    60b8:	220e      	movs	r2, #14
    60ba:	18ba      	adds	r2, r7, r2
    60bc:	7812      	ldrb	r2, [r2, #0]
    60be:	2101      	movs	r1, #1
    60c0:	400a      	ands	r2, r1
    60c2:	701a      	strb	r2, [r3, #0]
		plus = ((63 - i) / 2) * sign;
    60c4:	230e      	movs	r3, #14
    60c6:	18fb      	adds	r3, r7, r3
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	223f      	movs	r2, #63	; 0x3f
    60cc:	1ad3      	subs	r3, r2, r3
    60ce:	d500      	bpl.n	60d2 <wave+0x5e>
    60d0:	3301      	adds	r3, #1
    60d2:	105b      	asrs	r3, r3, #1
    60d4:	b2da      	uxtb	r2, r3
    60d6:	230c      	movs	r3, #12
    60d8:	18fb      	adds	r3, r7, r3
    60da:	210f      	movs	r1, #15
    60dc:	1879      	adds	r1, r7, r1
    60de:	7809      	ldrb	r1, [r1, #0]
    60e0:	434a      	muls	r2, r1
    60e2:	701a      	strb	r2, [r3, #0]
		if (step) { *ptr -= plus; } else {*ptr += plus;}
    60e4:	230d      	movs	r3, #13
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d009      	beq.n	6102 <wave+0x8e>
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	781a      	ldrb	r2, [r3, #0]
    60f2:	230c      	movs	r3, #12
    60f4:	18fb      	adds	r3, r7, r3
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	1ad3      	subs	r3, r2, r3
    60fa:	b2da      	uxtb	r2, r3
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	701a      	strb	r2, [r3, #0]
    6100:	e008      	b.n	6114 <wave+0xa0>
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	781a      	ldrb	r2, [r3, #0]
    6106:	230c      	movs	r3, #12
    6108:	18fb      	adds	r3, r7, r3
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	18d3      	adds	r3, r2, r3
    610e:	b2da      	uxtb	r2, r3
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	701a      	strb	r2, [r3, #0]
		ptr++;
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	3301      	adds	r3, #1
    6118:	607b      	str	r3, [r7, #4]
	for ( i= 0; i < 64; i++)
    611a:	230e      	movs	r3, #14
    611c:	18fb      	adds	r3, r7, r3
    611e:	781a      	ldrb	r2, [r3, #0]
    6120:	230e      	movs	r3, #14
    6122:	18fb      	adds	r3, r7, r3
    6124:	3201      	adds	r2, #1
    6126:	701a      	strb	r2, [r3, #0]
    6128:	230e      	movs	r3, #14
    612a:	18fb      	adds	r3, r7, r3
    612c:	781b      	ldrb	r3, [r3, #0]
    612e:	2b3f      	cmp	r3, #63	; 0x3f
    6130:	d9c0      	bls.n	60b4 <wave+0x40>
	}
}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	46bd      	mov	sp, r7
    6136:	b004      	add	sp, #16
    6138:	bd80      	pop	{r7, pc}

0000613a <shell_game>:

void shell_game(char* ptr, char mode)
{
    613a:	b580      	push	{r7, lr}
    613c:	b094      	sub	sp, #80	; 0x50
    613e:	af00      	add	r7, sp, #0
    6140:	6078      	str	r0, [r7, #4]
    6142:	000a      	movs	r2, r1
    6144:	1cfb      	adds	r3, r7, #3
    6146:	701a      	strb	r2, [r3, #0]
	char buf[64];
	char lap = 0;
    6148:	234f      	movs	r3, #79	; 0x4f
    614a:	18fb      	adds	r3, r7, r3
    614c:	2200      	movs	r2, #0
    614e:	701a      	strb	r2, [r3, #0]
	char cursour = 0;
    6150:	234e      	movs	r3, #78	; 0x4e
    6152:	18fb      	adds	r3, r7, r3
    6154:	2200      	movs	r2, #0
    6156:	701a      	strb	r2, [r3, #0]
	char* debug = ptr;
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	64bb      	str	r3, [r7, #72]	; 0x48
	BYTE j = 0;
    615c:	234d      	movs	r3, #77	; 0x4d
    615e:	18fb      	adds	r3, r7, r3
    6160:	2200      	movs	r2, #0
    6162:	701a      	strb	r2, [r3, #0]
	BYTE i = 0;
    6164:	234c      	movs	r3, #76	; 0x4c
    6166:	18fb      	adds	r3, r7, r3
    6168:	2200      	movs	r2, #0
    616a:	701a      	strb	r2, [r3, #0]
	
	memcpy(buf, ptr, 64);
    616c:	2308      	movs	r3, #8
    616e:	18fa      	adds	r2, r7, r3
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	0010      	movs	r0, r2
    6174:	0019      	movs	r1, r3
    6176:	2340      	movs	r3, #64	; 0x40
    6178:	001a      	movs	r2, r3
    617a:	4b36      	ldr	r3, [pc, #216]	; (6254 <shell_game+0x11a>)
    617c:	4798      	blx	r3
	if (mode == CRYPTED) {mode = 3;} else {mode = 1;}
    617e:	1cfb      	adds	r3, r7, #3
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	2b01      	cmp	r3, #1
    6184:	d103      	bne.n	618e <shell_game+0x54>
    6186:	1cfb      	adds	r3, r7, #3
    6188:	2203      	movs	r2, #3
    618a:	701a      	strb	r2, [r3, #0]
    618c:	e002      	b.n	6194 <shell_game+0x5a>
    618e:	1cfb      	adds	r3, r7, #3
    6190:	2201      	movs	r2, #1
    6192:	701a      	strb	r2, [r3, #0]
		
	for (j = 0; j < mode; j++)
    6194:	234d      	movs	r3, #77	; 0x4d
    6196:	18fb      	adds	r3, r7, r3
    6198:	2200      	movs	r2, #0
    619a:	701a      	strb	r2, [r3, #0]
    619c:	e04e      	b.n	623c <shell_game+0x102>
	{
		for (i = 0; i < 63 ; i++)
    619e:	234c      	movs	r3, #76	; 0x4c
    61a0:	18fb      	adds	r3, r7, r3
    61a2:	2200      	movs	r2, #0
    61a4:	701a      	strb	r2, [r3, #0]
    61a6:	e02a      	b.n	61fe <shell_game+0xc4>
		{
			if (cursour > 63)	{lap++; cursour = lap;}
    61a8:	234e      	movs	r3, #78	; 0x4e
    61aa:	18fb      	adds	r3, r7, r3
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	2b3f      	cmp	r3, #63	; 0x3f
    61b0:	d90c      	bls.n	61cc <shell_game+0x92>
    61b2:	234f      	movs	r3, #79	; 0x4f
    61b4:	18fb      	adds	r3, r7, r3
    61b6:	781a      	ldrb	r2, [r3, #0]
    61b8:	234f      	movs	r3, #79	; 0x4f
    61ba:	18fb      	adds	r3, r7, r3
    61bc:	3201      	adds	r2, #1
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	234e      	movs	r3, #78	; 0x4e
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	224f      	movs	r2, #79	; 0x4f
    61c6:	18ba      	adds	r2, r7, r2
    61c8:	7812      	ldrb	r2, [r2, #0]
    61ca:	701a      	strb	r2, [r3, #0]
			*ptr = buf[cursour];
    61cc:	234e      	movs	r3, #78	; 0x4e
    61ce:	18fb      	adds	r3, r7, r3
    61d0:	781b      	ldrb	r3, [r3, #0]
    61d2:	2208      	movs	r2, #8
    61d4:	18ba      	adds	r2, r7, r2
    61d6:	5cd2      	ldrb	r2, [r2, r3]
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	701a      	strb	r2, [r3, #0]
			ptr++;
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	3301      	adds	r3, #1
    61e0:	607b      	str	r3, [r7, #4]
			cursour += 8;
    61e2:	234e      	movs	r3, #78	; 0x4e
    61e4:	18fb      	adds	r3, r7, r3
    61e6:	224e      	movs	r2, #78	; 0x4e
    61e8:	18ba      	adds	r2, r7, r2
    61ea:	7812      	ldrb	r2, [r2, #0]
    61ec:	3208      	adds	r2, #8
    61ee:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 63 ; i++)
    61f0:	234c      	movs	r3, #76	; 0x4c
    61f2:	18fb      	adds	r3, r7, r3
    61f4:	781a      	ldrb	r2, [r3, #0]
    61f6:	234c      	movs	r3, #76	; 0x4c
    61f8:	18fb      	adds	r3, r7, r3
    61fa:	3201      	adds	r2, #1
    61fc:	701a      	strb	r2, [r3, #0]
    61fe:	234c      	movs	r3, #76	; 0x4c
    6200:	18fb      	adds	r3, r7, r3
    6202:	781b      	ldrb	r3, [r3, #0]
    6204:	2b3e      	cmp	r3, #62	; 0x3e
    6206:	d9cf      	bls.n	61a8 <shell_game+0x6e>
		}
		lap = 0;
    6208:	234f      	movs	r3, #79	; 0x4f
    620a:	18fb      	adds	r3, r7, r3
    620c:	2200      	movs	r2, #0
    620e:	701a      	strb	r2, [r3, #0]
		cursour = 0;
    6210:	234e      	movs	r3, #78	; 0x4e
    6212:	18fb      	adds	r3, r7, r3
    6214:	2200      	movs	r2, #0
    6216:	701a      	strb	r2, [r3, #0]
		ptr = debug;
    6218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    621a:	607b      	str	r3, [r7, #4]
		memcpy(buf, ptr, 64);
    621c:	2308      	movs	r3, #8
    621e:	18fa      	adds	r2, r7, r3
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	0010      	movs	r0, r2
    6224:	0019      	movs	r1, r3
    6226:	2340      	movs	r3, #64	; 0x40
    6228:	001a      	movs	r2, r3
    622a:	4b0a      	ldr	r3, [pc, #40]	; (6254 <shell_game+0x11a>)
    622c:	4798      	blx	r3
	for (j = 0; j < mode; j++)
    622e:	234d      	movs	r3, #77	; 0x4d
    6230:	18fb      	adds	r3, r7, r3
    6232:	781a      	ldrb	r2, [r3, #0]
    6234:	234d      	movs	r3, #77	; 0x4d
    6236:	18fb      	adds	r3, r7, r3
    6238:	3201      	adds	r2, #1
    623a:	701a      	strb	r2, [r3, #0]
    623c:	234d      	movs	r3, #77	; 0x4d
    623e:	18fa      	adds	r2, r7, r3
    6240:	1cfb      	adds	r3, r7, #3
    6242:	7812      	ldrb	r2, [r2, #0]
    6244:	781b      	ldrb	r3, [r3, #0]
    6246:	429a      	cmp	r2, r3
    6248:	d3a9      	bcc.n	619e <shell_game+0x64>
	}
}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	46bd      	mov	sp, r7
    624e:	b014      	add	sp, #80	; 0x50
    6250:	bd80      	pop	{r7, pc}
    6252:	46c0      	nop			; (mov r8, r8)
    6254:	0000c8b9 	.word	0x0000c8b9

00006258 <move>:

void move(char* ptr, char mode)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
    6260:	000a      	movs	r2, r1
    6262:	1cfb      	adds	r3, r7, #3
    6264:	701a      	strb	r2, [r3, #0]
	char sign = - 1;
    6266:	230f      	movs	r3, #15
    6268:	18fb      	adds	r3, r7, r3
    626a:	22ff      	movs	r2, #255	; 0xff
    626c:	701a      	strb	r2, [r3, #0]
	BYTE i = 0;
    626e:	230e      	movs	r3, #14
    6270:	18fb      	adds	r3, r7, r3
    6272:	2200      	movs	r2, #0
    6274:	701a      	strb	r2, [r3, #0]
	
	
	if (mode == CRYPTED){sign = 1;}
    6276:	1cfb      	adds	r3, r7, #3
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	2b01      	cmp	r3, #1
    627c:	d103      	bne.n	6286 <move+0x2e>
    627e:	230f      	movs	r3, #15
    6280:	18fb      	adds	r3, r7, r3
    6282:	2201      	movs	r2, #1
    6284:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 63; i++)
    6286:	230e      	movs	r3, #14
    6288:	18fb      	adds	r3, r7, r3
    628a:	2200      	movs	r2, #0
    628c:	701a      	strb	r2, [r3, #0]
    628e:	e012      	b.n	62b6 <move+0x5e>
	{
		*ptr += 68 * sign;
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	781a      	ldrb	r2, [r3, #0]
    6294:	230f      	movs	r3, #15
    6296:	18fb      	adds	r3, r7, r3
    6298:	781b      	ldrb	r3, [r3, #0]
    629a:	2144      	movs	r1, #68	; 0x44
    629c:	434b      	muls	r3, r1
    629e:	b2db      	uxtb	r3, r3
    62a0:	18d3      	adds	r3, r2, r3
    62a2:	b2da      	uxtb	r2, r3
    62a4:	687b      	ldr	r3, [r7, #4]
    62a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 63; i++)
    62a8:	230e      	movs	r3, #14
    62aa:	18fb      	adds	r3, r7, r3
    62ac:	781a      	ldrb	r2, [r3, #0]
    62ae:	230e      	movs	r3, #14
    62b0:	18fb      	adds	r3, r7, r3
    62b2:	3201      	adds	r2, #1
    62b4:	701a      	strb	r2, [r3, #0]
    62b6:	230e      	movs	r3, #14
    62b8:	18fb      	adds	r3, r7, r3
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	2b3e      	cmp	r3, #62	; 0x3e
    62be:	d9e7      	bls.n	6290 <move+0x38>
	}	
    62c0:	46c0      	nop			; (mov r8, r8)
    62c2:	46bd      	mov	sp, r7
    62c4:	b004      	add	sp, #16
    62c6:	bd80      	pop	{r7, pc}

000062c8 <eth_init>:
#include "def.h"

ETH_HDR eth_sock[MAX_SOCKETS_CNT];

void eth_init(void)
{
    62c8:	b5b0      	push	{r4, r5, r7, lr}
    62ca:	b082      	sub	sp, #8
    62cc:	af00      	add	r7, sp, #0
	w5500_init_reg();
    62ce:	4b3d      	ldr	r3, [pc, #244]	; (63c4 <eth_init+0xfc>)
    62d0:	4798      	blx	r3
	
	//common socket for settings
	if(socket_init(SOCKET_0,cfg_1.com_network.src_port,UDP)) {err_dword.common_sock = 1;}
    62d2:	4b3d      	ldr	r3, [pc, #244]	; (63c8 <eth_init+0x100>)
    62d4:	2226      	movs	r2, #38	; 0x26
    62d6:	5c9a      	ldrb	r2, [r3, r2]
    62d8:	2127      	movs	r1, #39	; 0x27
    62da:	5c5b      	ldrb	r3, [r3, r1]
    62dc:	021b      	lsls	r3, r3, #8
    62de:	4313      	orrs	r3, r2
    62e0:	b29b      	uxth	r3, r3
    62e2:	2201      	movs	r2, #1
    62e4:	0019      	movs	r1, r3
    62e6:	2000      	movs	r0, #0
    62e8:	4b38      	ldr	r3, [pc, #224]	; (63cc <eth_init+0x104>)
    62ea:	4798      	blx	r3
    62ec:	1e03      	subs	r3, r0, #0
    62ee:	d004      	beq.n	62fa <eth_init+0x32>
    62f0:	4b37      	ldr	r3, [pc, #220]	; (63d0 <eth_init+0x108>)
    62f2:	781a      	ldrb	r2, [r3, #0]
    62f4:	2104      	movs	r1, #4
    62f6:	430a      	orrs	r2, r1
    62f8:	701a      	strb	r2, [r3, #0]

	//port socket
	for(BYTE i=0; i<4; i++)
    62fa:	1dfb      	adds	r3, r7, #7
    62fc:	2200      	movs	r2, #0
    62fe:	701a      	strb	r2, [r3, #0]
    6300:	e057      	b.n	63b2 <eth_init+0xea>
	{
		if(cfg_1.sock_rs485[i].en==FALSE) {continue;} 
    6302:	1dfb      	adds	r3, r7, #7
    6304:	781a      	ldrb	r2, [r3, #0]
    6306:	4930      	ldr	r1, [pc, #192]	; (63c8 <eth_init+0x100>)
    6308:	2034      	movs	r0, #52	; 0x34
    630a:	0013      	movs	r3, r2
    630c:	005b      	lsls	r3, r3, #1
    630e:	189b      	adds	r3, r3, r2
    6310:	009b      	lsls	r3, r3, #2
    6312:	189b      	adds	r3, r3, r2
    6314:	18cb      	adds	r3, r1, r3
    6316:	181b      	adds	r3, r3, r0
    6318:	781b      	ldrb	r3, [r3, #0]
    631a:	2b00      	cmp	r3, #0
    631c:	d043      	beq.n	63a6 <eth_init+0xde>
		if(socket_init(i+1,cfg_1.sock_rs485[i].src_port,cfg_1.sock_rs485[i].mode)) {err_dword.socket += (1 << i);}
    631e:	1dfb      	adds	r3, r7, #7
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	3301      	adds	r3, #1
    6324:	b2dc      	uxtb	r4, r3
    6326:	1dfb      	adds	r3, r7, #7
    6328:	781a      	ldrb	r2, [r3, #0]
    632a:	4927      	ldr	r1, [pc, #156]	; (63c8 <eth_init+0x100>)
    632c:	0013      	movs	r3, r2
    632e:	005b      	lsls	r3, r3, #1
    6330:	189b      	adds	r3, r3, r2
    6332:	009b      	lsls	r3, r3, #2
    6334:	189b      	adds	r3, r3, r2
    6336:	18cb      	adds	r3, r1, r3
    6338:	3330      	adds	r3, #48	; 0x30
    633a:	79da      	ldrb	r2, [r3, #7]
    633c:	7a1b      	ldrb	r3, [r3, #8]
    633e:	021b      	lsls	r3, r3, #8
    6340:	4313      	orrs	r3, r2
    6342:	b29d      	uxth	r5, r3
    6344:	1dfb      	adds	r3, r7, #7
    6346:	781a      	ldrb	r2, [r3, #0]
    6348:	491f      	ldr	r1, [pc, #124]	; (63c8 <eth_init+0x100>)
    634a:	2035      	movs	r0, #53	; 0x35
    634c:	0013      	movs	r3, r2
    634e:	005b      	lsls	r3, r3, #1
    6350:	189b      	adds	r3, r3, r2
    6352:	009b      	lsls	r3, r3, #2
    6354:	189b      	adds	r3, r3, r2
    6356:	18cb      	adds	r3, r1, r3
    6358:	181b      	adds	r3, r3, r0
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	001a      	movs	r2, r3
    635e:	0029      	movs	r1, r5
    6360:	0020      	movs	r0, r4
    6362:	4b1a      	ldr	r3, [pc, #104]	; (63cc <eth_init+0x104>)
    6364:	4798      	blx	r3
    6366:	1e03      	subs	r3, r0, #0
    6368:	d01e      	beq.n	63a8 <eth_init+0xe0>
    636a:	4b19      	ldr	r3, [pc, #100]	; (63d0 <eth_init+0x108>)
    636c:	781b      	ldrb	r3, [r3, #0]
    636e:	065b      	lsls	r3, r3, #25
    6370:	0f1b      	lsrs	r3, r3, #28
    6372:	b2db      	uxtb	r3, r3
    6374:	0019      	movs	r1, r3
    6376:	1dfb      	adds	r3, r7, #7
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	2201      	movs	r2, #1
    637c:	409a      	lsls	r2, r3
    637e:	0013      	movs	r3, r2
    6380:	b2db      	uxtb	r3, r3
    6382:	18cb      	adds	r3, r1, r3
    6384:	b2db      	uxtb	r3, r3
    6386:	1c1a      	adds	r2, r3, #0
    6388:	230f      	movs	r3, #15
    638a:	4013      	ands	r3, r2
    638c:	b2da      	uxtb	r2, r3
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <eth_init+0x108>)
    6390:	210f      	movs	r1, #15
    6392:	400a      	ands	r2, r1
    6394:	00d0      	lsls	r0, r2, #3
    6396:	781a      	ldrb	r2, [r3, #0]
    6398:	2178      	movs	r1, #120	; 0x78
    639a:	438a      	bics	r2, r1
    639c:	1c11      	adds	r1, r2, #0
    639e:	1c02      	adds	r2, r0, #0
    63a0:	430a      	orrs	r2, r1
    63a2:	701a      	strb	r2, [r3, #0]
    63a4:	e000      	b.n	63a8 <eth_init+0xe0>
		if(cfg_1.sock_rs485[i].en==FALSE) {continue;} 
    63a6:	46c0      	nop			; (mov r8, r8)
	for(BYTE i=0; i<4; i++)
    63a8:	1dfb      	adds	r3, r7, #7
    63aa:	781a      	ldrb	r2, [r3, #0]
    63ac:	1dfb      	adds	r3, r7, #7
    63ae:	3201      	adds	r2, #1
    63b0:	701a      	strb	r2, [r3, #0]
    63b2:	1dfb      	adds	r3, r7, #7
    63b4:	781b      	ldrb	r3, [r3, #0]
    63b6:	2b03      	cmp	r3, #3
    63b8:	d9a3      	bls.n	6302 <eth_init+0x3a>
	}
}
    63ba:	46c0      	nop			; (mov r8, r8)
    63bc:	46bd      	mov	sp, r7
    63be:	b002      	add	sp, #8
    63c0:	bdb0      	pop	{r4, r5, r7, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	000096f9 	.word	0x000096f9
    63c8:	20003dc4 	.word	0x20003dc4
    63cc:	00007411 	.word	0x00007411
    63d0:	20002550 	.word	0x20002550

000063d4 <eth_process>:

void eth_process(void)
{
    63d4:	b590      	push	{r4, r7, lr}
    63d6:	b083      	sub	sp, #12
    63d8:	af00      	add	r7, sp, #0
	static BYTE eth_st=0;
	WORD rtrn = 0;
    63da:	1dbb      	adds	r3, r7, #6
    63dc:	2200      	movs	r2, #0
    63de:	801a      	strh	r2, [r3, #0]
	switch(eth_st)
    63e0:	4b40      	ldr	r3, [pc, #256]	; (64e4 <eth_process+0x110>)
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	2b01      	cmp	r3, #1
    63e6:	d038      	beq.n	645a <eth_process+0x86>
    63e8:	2b02      	cmp	r3, #2
    63ea:	d059      	beq.n	64a0 <eth_process+0xcc>
    63ec:	2b00      	cmp	r3, #0
    63ee:	d000      	beq.n	63f2 <eth_process+0x1e>
    63f0:	e069      	b.n	64c6 <eth_process+0xf2>
	{
		case CHECK:				
			rtrn = check_data_wr_process();	
    63f2:	f000 f92d 	bl	6650 <check_data_wr_process>
    63f6:	0003      	movs	r3, r0
    63f8:	001a      	movs	r2, r3
    63fa:	1dbb      	adds	r3, r7, #6
    63fc:	801a      	strh	r2, [r3, #0]
			if(rtrn != NO_SOKET)								
    63fe:	1dbb      	adds	r3, r7, #6
    6400:	881b      	ldrh	r3, [r3, #0]
    6402:	2b6d      	cmp	r3, #109	; 0x6d
    6404:	d021      	beq.n	644a <eth_process+0x76>
			{
				eth_st					= WRITE_PROCESS;
    6406:	4b37      	ldr	r3, [pc, #220]	; (64e4 <eth_process+0x110>)
    6408:	2202      	movs	r2, #2
    640a:	701a      	strb	r2, [r3, #0]
				w5500_mode.mode_op		= MODE_OP_WRITE_UDP;
    640c:	4b36      	ldr	r3, [pc, #216]	; (64e8 <eth_process+0x114>)
    640e:	2203      	movs	r2, #3
    6410:	701a      	strb	r2, [r3, #0]
				w5500_mode.numb_socket	= rtrn;
    6412:	1dbb      	adds	r3, r7, #6
    6414:	881b      	ldrh	r3, [r3, #0]
    6416:	b2da      	uxtb	r2, r3
    6418:	4b33      	ldr	r3, [pc, #204]	; (64e8 <eth_process+0x114>)
    641a:	705a      	strb	r2, [r3, #1]
				switch(rtrn)
    641c:	1dbb      	adds	r3, r7, #6
    641e:	881b      	ldrh	r3, [r3, #0]
    6420:	2b00      	cmp	r3, #0
    6422:	d055      	beq.n	64d0 <eth_process+0xfc>
				{
					case COMMON_SOCK_VAL:																						return;
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    6424:	1dbb      	adds	r3, r7, #6
    6426:	881b      	ldrh	r3, [r3, #0]
    6428:	1e5a      	subs	r2, r3, #1
    642a:	4930      	ldr	r1, [pc, #192]	; (64ec <eth_process+0x118>)
    642c:	2035      	movs	r0, #53	; 0x35
    642e:	0013      	movs	r3, r2
    6430:	005b      	lsls	r3, r3, #1
    6432:	189b      	adds	r3, r3, r2
    6434:	009b      	lsls	r3, r3, #2
    6436:	189b      	adds	r3, r3, r2
    6438:	18cb      	adds	r3, r1, r3
    643a:	181b      	adds	r3, r3, r0
    643c:	781b      	ldrb	r3, [r3, #0]
    643e:	2b02      	cmp	r3, #2
    6440:	d148      	bne.n	64d4 <eth_process+0x100>
    6442:	4b29      	ldr	r3, [pc, #164]	; (64e8 <eth_process+0x114>)
    6444:	2205      	movs	r2, #5
    6446:	701a      	strb	r2, [r3, #0]
    6448:	e044      	b.n	64d4 <eth_process+0x100>
				} 
			}

			check_sockets_process((BYTE*)&w5500_mode);//select sockets for read			
    644a:	4b27      	ldr	r3, [pc, #156]	; (64e8 <eth_process+0x114>)
    644c:	0018      	movs	r0, r3
    644e:	f000 f851 	bl	64f4 <check_sockets_process>
			eth_st = READ_PROCESS;
    6452:	4b24      	ldr	r3, [pc, #144]	; (64e4 <eth_process+0x110>)
    6454:	2201      	movs	r2, #1
    6456:	701a      	strb	r2, [r3, #0]
		break;
    6458:	e041      	b.n	64de <eth_process+0x10a>
		case READ_PROCESS:
			rtrn = w5500_process (w5500_mode.mode_op,w5500_mode.numb_socket);
    645a:	4b23      	ldr	r3, [pc, #140]	; (64e8 <eth_process+0x114>)
    645c:	781a      	ldrb	r2, [r3, #0]
    645e:	4b22      	ldr	r3, [pc, #136]	; (64e8 <eth_process+0x114>)
    6460:	785b      	ldrb	r3, [r3, #1]
    6462:	1dbc      	adds	r4, r7, #6
    6464:	0019      	movs	r1, r3
    6466:	0010      	movs	r0, r2
    6468:	4b21      	ldr	r3, [pc, #132]	; (64f0 <eth_process+0x11c>)
    646a:	4798      	blx	r3
    646c:	0003      	movs	r3, r0
    646e:	8023      	strh	r3, [r4, #0]
			if(rtrn == 2)	{eth_st=0;break;}
    6470:	1dbb      	adds	r3, r7, #6
    6472:	881b      	ldrh	r3, [r3, #0]
    6474:	2b02      	cmp	r3, #2
    6476:	d103      	bne.n	6480 <eth_process+0xac>
    6478:	4b1a      	ldr	r3, [pc, #104]	; (64e4 <eth_process+0x110>)
    647a:	2200      	movs	r2, #0
    647c:	701a      	strb	r2, [r3, #0]
    647e:	e02e      	b.n	64de <eth_process+0x10a>
			if(rtrn)		{eth_parse(w5500_mode.numb_socket,rtrn); eth_st=0;}
    6480:	1dbb      	adds	r3, r7, #6
    6482:	881b      	ldrh	r3, [r3, #0]
    6484:	2b00      	cmp	r3, #0
    6486:	d027      	beq.n	64d8 <eth_process+0x104>
    6488:	4b17      	ldr	r3, [pc, #92]	; (64e8 <eth_process+0x114>)
    648a:	785a      	ldrb	r2, [r3, #1]
    648c:	1dbb      	adds	r3, r7, #6
    648e:	881b      	ldrh	r3, [r3, #0]
    6490:	0019      	movs	r1, r3
    6492:	0010      	movs	r0, r2
    6494:	f000 f86e 	bl	6574 <eth_parse>
    6498:	4b12      	ldr	r3, [pc, #72]	; (64e4 <eth_process+0x110>)
    649a:	2200      	movs	r2, #0
    649c:	701a      	strb	r2, [r3, #0]
		break;
    649e:	e01b      	b.n	64d8 <eth_process+0x104>
		case WRITE_PROCESS:
			rtrn = w5500_process(w5500_mode.mode_op,w5500_mode.numb_socket);
    64a0:	4b11      	ldr	r3, [pc, #68]	; (64e8 <eth_process+0x114>)
    64a2:	781a      	ldrb	r2, [r3, #0]
    64a4:	4b10      	ldr	r3, [pc, #64]	; (64e8 <eth_process+0x114>)
    64a6:	785b      	ldrb	r3, [r3, #1]
    64a8:	1dbc      	adds	r4, r7, #6
    64aa:	0019      	movs	r1, r3
    64ac:	0010      	movs	r0, r2
    64ae:	4b10      	ldr	r3, [pc, #64]	; (64f0 <eth_process+0x11c>)
    64b0:	4798      	blx	r3
    64b2:	0003      	movs	r3, r0
    64b4:	8023      	strh	r3, [r4, #0]
			if(rtrn)		{eth_st=0;}
    64b6:	1dbb      	adds	r3, r7, #6
    64b8:	881b      	ldrh	r3, [r3, #0]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d00e      	beq.n	64dc <eth_process+0x108>
    64be:	4b09      	ldr	r3, [pc, #36]	; (64e4 <eth_process+0x110>)
    64c0:	2200      	movs	r2, #0
    64c2:	701a      	strb	r2, [r3, #0]
		break;
    64c4:	e00a      	b.n	64dc <eth_process+0x108>
		default:
			eth_st = CHECK;
    64c6:	4b07      	ldr	r3, [pc, #28]	; (64e4 <eth_process+0x110>)
    64c8:	2200      	movs	r2, #0
    64ca:	701a      	strb	r2, [r3, #0]
		break;
    64cc:	46c0      	nop			; (mov r8, r8)
    64ce:	e006      	b.n	64de <eth_process+0x10a>
					case COMMON_SOCK_VAL:																						return;
    64d0:	46c0      	nop			; (mov r8, r8)
    64d2:	e004      	b.n	64de <eth_process+0x10a>
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    64d4:	46c0      	nop			; (mov r8, r8)
    64d6:	e002      	b.n	64de <eth_process+0x10a>
		break;
    64d8:	46c0      	nop			; (mov r8, r8)
    64da:	e000      	b.n	64de <eth_process+0x10a>
		break;
    64dc:	46c0      	nop			; (mov r8, r8)

	}
}
    64de:	46bd      	mov	sp, r7
    64e0:	b003      	add	sp, #12
    64e2:	bd90      	pop	{r4, r7, pc}
    64e4:	2000045a 	.word	0x2000045a
    64e8:	20003b00 	.word	0x20003b00
    64ec:	20003dc4 	.word	0x20003dc4
    64f0:	00009871 	.word	0x00009871

000064f4 <check_sockets_process>:

void check_sockets_process (BYTE *buf)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b082      	sub	sp, #8
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
	static BYTE index = MAX_SOCKETS_VAL;
	
	index++;
    64fc:	4b1a      	ldr	r3, [pc, #104]	; (6568 <check_sockets_process+0x74>)
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	3301      	adds	r3, #1
    6502:	b2da      	uxtb	r2, r3
    6504:	4b18      	ldr	r3, [pc, #96]	; (6568 <check_sockets_process+0x74>)
    6506:	701a      	strb	r2, [r3, #0]
	if(index > MAX_SOCKETS_VAL){index=0;}
    6508:	4b17      	ldr	r3, [pc, #92]	; (6568 <check_sockets_process+0x74>)
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	2b04      	cmp	r3, #4
    650e:	d902      	bls.n	6516 <check_sockets_process+0x22>
    6510:	4b15      	ldr	r3, [pc, #84]	; (6568 <check_sockets_process+0x74>)
    6512:	2200      	movs	r2, #0
    6514:	701a      	strb	r2, [r3, #0]
	
	switch (index)
    6516:	4b14      	ldr	r3, [pc, #80]	; (6568 <check_sockets_process+0x74>)
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	2b00      	cmp	r3, #0
    651c:	d106      	bne.n	652c <check_sockets_process+0x38>
	{
		case COMMON_SOCK_VAL:
			w5500_mode.numb_socket	= SOCKET_0;
    651e:	4b13      	ldr	r3, [pc, #76]	; (656c <check_sockets_process+0x78>)
    6520:	2200      	movs	r2, #0
    6522:	705a      	strb	r2, [r3, #1]
			w5500_mode.mode_op		= MODE_OP_READ_UDP;
    6524:	4b11      	ldr	r3, [pc, #68]	; (656c <check_sockets_process+0x78>)
    6526:	2202      	movs	r2, #2
    6528:	701a      	strb	r2, [r3, #0]
		return;
    652a:	e01a      	b.n	6562 <check_sockets_process+0x6e>
		default:
			w5500_mode.numb_socket = index;
    652c:	4b0e      	ldr	r3, [pc, #56]	; (6568 <check_sockets_process+0x74>)
    652e:	781a      	ldrb	r2, [r3, #0]
    6530:	4b0e      	ldr	r3, [pc, #56]	; (656c <check_sockets_process+0x78>)
    6532:	705a      	strb	r2, [r3, #1]
			if (cfg_1.sock_rs485[index-1].mode == TCP)	
    6534:	4b0c      	ldr	r3, [pc, #48]	; (6568 <check_sockets_process+0x74>)
    6536:	781b      	ldrb	r3, [r3, #0]
    6538:	1e5a      	subs	r2, r3, #1
    653a:	490d      	ldr	r1, [pc, #52]	; (6570 <check_sockets_process+0x7c>)
    653c:	2035      	movs	r0, #53	; 0x35
    653e:	0013      	movs	r3, r2
    6540:	005b      	lsls	r3, r3, #1
    6542:	189b      	adds	r3, r3, r2
    6544:	009b      	lsls	r3, r3, #2
    6546:	189b      	adds	r3, r3, r2
    6548:	18cb      	adds	r3, r1, r3
    654a:	181b      	adds	r3, r3, r0
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	2b02      	cmp	r3, #2
    6550:	d103      	bne.n	655a <check_sockets_process+0x66>
			{w5500_mode.mode_op = MODE_OP_READ_TCP;}
    6552:	4b06      	ldr	r3, [pc, #24]	; (656c <check_sockets_process+0x78>)
    6554:	2204      	movs	r2, #4
    6556:	701a      	strb	r2, [r3, #0]
			else										
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
		return;
    6558:	e003      	b.n	6562 <check_sockets_process+0x6e>
			{w5500_mode.mode_op = MODE_OP_READ_UDP;}
    655a:	4b04      	ldr	r3, [pc, #16]	; (656c <check_sockets_process+0x78>)
    655c:	2202      	movs	r2, #2
    655e:	701a      	strb	r2, [r3, #0]
		return;
    6560:	46c0      	nop			; (mov r8, r8)
	}									{w5500_mode.mode_op=MODE_OP_READ_UDP;}
	return;
}
    6562:	46bd      	mov	sp, r7
    6564:	b002      	add	sp, #8
    6566:	bd80      	pop	{r7, pc}
    6568:	20000001 	.word	0x20000001
    656c:	20003b00 	.word	0x20003b00
    6570:	20003dc4 	.word	0x20003dc4

00006574 <eth_parse>:

void eth_parse (BYTE numb_sock,WORD size)
{	
    6574:	b590      	push	{r4, r7, lr}
    6576:	b083      	sub	sp, #12
    6578:	af00      	add	r7, sp, #0
    657a:	0002      	movs	r2, r0
    657c:	1dfb      	adds	r3, r7, #7
    657e:	701a      	strb	r2, [r3, #0]
    6580:	1d3b      	adds	r3, r7, #4
    6582:	1c0a      	adds	r2, r1, #0
    6584:	801a      	strh	r2, [r3, #0]
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    6586:	1dfb      	adds	r3, r7, #7
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	4a2e      	ldr	r2, [pc, #184]	; (6644 <eth_parse+0xd0>)
    658c:	492e      	ldr	r1, [pc, #184]	; (6648 <eth_parse+0xd4>)
    658e:	482f      	ldr	r0, [pc, #188]	; (664c <eth_parse+0xd8>)
    6590:	4343      	muls	r3, r0
    6592:	18d3      	adds	r3, r2, r3
    6594:	185b      	adds	r3, r3, r1
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	2b01      	cmp	r3, #1
    659a:	d04e      	beq.n	663a <eth_parse+0xc6>
		
	eth_sock[numb_sock].counters.rx++;
    659c:	1dfb      	adds	r3, r7, #7
    659e:	7819      	ldrb	r1, [r3, #0]
    65a0:	4828      	ldr	r0, [pc, #160]	; (6644 <eth_parse+0xd0>)
    65a2:	23ba      	movs	r3, #186	; 0xba
    65a4:	00db      	lsls	r3, r3, #3
    65a6:	4a29      	ldr	r2, [pc, #164]	; (664c <eth_parse+0xd8>)
    65a8:	434a      	muls	r2, r1
    65aa:	1882      	adds	r2, r0, r2
    65ac:	18d3      	adds	r3, r2, r3
    65ae:	7ada      	ldrb	r2, [r3, #11]
    65b0:	7b18      	ldrb	r0, [r3, #12]
    65b2:	0200      	lsls	r0, r0, #8
    65b4:	4302      	orrs	r2, r0
    65b6:	7b58      	ldrb	r0, [r3, #13]
    65b8:	0400      	lsls	r0, r0, #16
    65ba:	4302      	orrs	r2, r0
    65bc:	7b9b      	ldrb	r3, [r3, #14]
    65be:	061b      	lsls	r3, r3, #24
    65c0:	4313      	orrs	r3, r2
    65c2:	1c5a      	adds	r2, r3, #1
    65c4:	481f      	ldr	r0, [pc, #124]	; (6644 <eth_parse+0xd0>)
    65c6:	23ba      	movs	r3, #186	; 0xba
    65c8:	00db      	lsls	r3, r3, #3
    65ca:	4c20      	ldr	r4, [pc, #128]	; (664c <eth_parse+0xd8>)
    65cc:	4361      	muls	r1, r4
    65ce:	1841      	adds	r1, r0, r1
    65d0:	18cb      	adds	r3, r1, r3
    65d2:	330b      	adds	r3, #11
    65d4:	21ff      	movs	r1, #255	; 0xff
    65d6:	4011      	ands	r1, r2
    65d8:	000c      	movs	r4, r1
    65da:	7819      	ldrb	r1, [r3, #0]
    65dc:	2000      	movs	r0, #0
    65de:	4001      	ands	r1, r0
    65e0:	1c08      	adds	r0, r1, #0
    65e2:	1c21      	adds	r1, r4, #0
    65e4:	4301      	orrs	r1, r0
    65e6:	7019      	strb	r1, [r3, #0]
    65e8:	0a11      	lsrs	r1, r2, #8
    65ea:	20ff      	movs	r0, #255	; 0xff
    65ec:	4001      	ands	r1, r0
    65ee:	000c      	movs	r4, r1
    65f0:	7859      	ldrb	r1, [r3, #1]
    65f2:	2000      	movs	r0, #0
    65f4:	4001      	ands	r1, r0
    65f6:	1c08      	adds	r0, r1, #0
    65f8:	1c21      	adds	r1, r4, #0
    65fa:	4301      	orrs	r1, r0
    65fc:	7059      	strb	r1, [r3, #1]
    65fe:	0c11      	lsrs	r1, r2, #16
    6600:	20ff      	movs	r0, #255	; 0xff
    6602:	4001      	ands	r1, r0
    6604:	000c      	movs	r4, r1
    6606:	7899      	ldrb	r1, [r3, #2]
    6608:	2000      	movs	r0, #0
    660a:	4001      	ands	r1, r0
    660c:	1c08      	adds	r0, r1, #0
    660e:	1c21      	adds	r1, r4, #0
    6610:	4301      	orrs	r1, r0
    6612:	7099      	strb	r1, [r3, #2]
    6614:	0e10      	lsrs	r0, r2, #24
    6616:	78da      	ldrb	r2, [r3, #3]
    6618:	2100      	movs	r1, #0
    661a:	400a      	ands	r2, r1
    661c:	1c11      	adds	r1, r2, #0
    661e:	1c02      	adds	r2, r0, #0
    6620:	430a      	orrs	r2, r1
    6622:	70da      	strb	r2, [r3, #3]
	eth_sock[numb_sock].r_status = 1;
    6624:	1dfb      	adds	r3, r7, #7
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	4a06      	ldr	r2, [pc, #24]	; (6644 <eth_parse+0xd0>)
    662a:	4907      	ldr	r1, [pc, #28]	; (6648 <eth_parse+0xd4>)
    662c:	4807      	ldr	r0, [pc, #28]	; (664c <eth_parse+0xd8>)
    662e:	4343      	muls	r3, r0
    6630:	18d3      	adds	r3, r2, r3
    6632:	185b      	adds	r3, r3, r1
    6634:	2201      	movs	r2, #1
    6636:	701a      	strb	r2, [r3, #0]
    6638:	e000      	b.n	663c <eth_parse+0xc8>
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    663a:	46c0      	nop			; (mov r8, r8)
}
    663c:	46bd      	mov	sp, r7
    663e:	b003      	add	sp, #12
    6640:	bd90      	pop	{r4, r7, pc}
    6642:	46c0      	nop			; (mov r8, r8)
    6644:	200005cc 	.word	0x200005cc
    6648:	000005d1 	.word	0x000005d1
    664c:	000005e5 	.word	0x000005e5

00006650 <check_data_wr_process>:

BYTE check_data_wr_process (void)
{
    6650:	b590      	push	{r4, r7, lr}
    6652:	b083      	sub	sp, #12
    6654:	af00      	add	r7, sp, #0
	BYTE numb_sock=0;
    6656:	1dfb      	adds	r3, r7, #7
    6658:	2200      	movs	r2, #0
    665a:	701a      	strb	r2, [r3, #0]

	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    665c:	1dfb      	adds	r3, r7, #7
    665e:	2200      	movs	r2, #0
    6660:	701a      	strb	r2, [r3, #0]
    6662:	e060      	b.n	6726 <check_data_wr_process+0xd6>
	{
		if( eth_sock[numb_sock].w_status == 1 )
    6664:	1dfb      	adds	r3, r7, #7
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	4a33      	ldr	r2, [pc, #204]	; (6738 <check_data_wr_process+0xe8>)
    666a:	4934      	ldr	r1, [pc, #208]	; (673c <check_data_wr_process+0xec>)
    666c:	4834      	ldr	r0, [pc, #208]	; (6740 <check_data_wr_process+0xf0>)
    666e:	4343      	muls	r3, r0
    6670:	18d3      	adds	r3, r2, r3
    6672:	185b      	adds	r3, r3, r1
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	2b01      	cmp	r3, #1
    6678:	d150      	bne.n	671c <check_data_wr_process+0xcc>
		{
			eth_sock[numb_sock].w_status = 0;
    667a:	1dfb      	adds	r3, r7, #7
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	4a2e      	ldr	r2, [pc, #184]	; (6738 <check_data_wr_process+0xe8>)
    6680:	492e      	ldr	r1, [pc, #184]	; (673c <check_data_wr_process+0xec>)
    6682:	482f      	ldr	r0, [pc, #188]	; (6740 <check_data_wr_process+0xf0>)
    6684:	4343      	muls	r3, r0
    6686:	18d3      	adds	r3, r2, r3
    6688:	185b      	adds	r3, r3, r1
    668a:	2200      	movs	r2, #0
    668c:	701a      	strb	r2, [r3, #0]
			eth_sock[numb_sock].counters.tx++;
    668e:	1dfb      	adds	r3, r7, #7
    6690:	7819      	ldrb	r1, [r3, #0]
    6692:	4829      	ldr	r0, [pc, #164]	; (6738 <check_data_wr_process+0xe8>)
    6694:	23ba      	movs	r3, #186	; 0xba
    6696:	00db      	lsls	r3, r3, #3
    6698:	4a29      	ldr	r2, [pc, #164]	; (6740 <check_data_wr_process+0xf0>)
    669a:	434a      	muls	r2, r1
    669c:	1882      	adds	r2, r0, r2
    669e:	18d3      	adds	r3, r2, r3
    66a0:	79da      	ldrb	r2, [r3, #7]
    66a2:	7a18      	ldrb	r0, [r3, #8]
    66a4:	0200      	lsls	r0, r0, #8
    66a6:	4302      	orrs	r2, r0
    66a8:	7a58      	ldrb	r0, [r3, #9]
    66aa:	0400      	lsls	r0, r0, #16
    66ac:	4302      	orrs	r2, r0
    66ae:	7a9b      	ldrb	r3, [r3, #10]
    66b0:	061b      	lsls	r3, r3, #24
    66b2:	4313      	orrs	r3, r2
    66b4:	1c5a      	adds	r2, r3, #1
    66b6:	4820      	ldr	r0, [pc, #128]	; (6738 <check_data_wr_process+0xe8>)
    66b8:	23ba      	movs	r3, #186	; 0xba
    66ba:	00db      	lsls	r3, r3, #3
    66bc:	4c20      	ldr	r4, [pc, #128]	; (6740 <check_data_wr_process+0xf0>)
    66be:	4361      	muls	r1, r4
    66c0:	1841      	adds	r1, r0, r1
    66c2:	18cb      	adds	r3, r1, r3
    66c4:	3307      	adds	r3, #7
    66c6:	21ff      	movs	r1, #255	; 0xff
    66c8:	4011      	ands	r1, r2
    66ca:	000c      	movs	r4, r1
    66cc:	7819      	ldrb	r1, [r3, #0]
    66ce:	2000      	movs	r0, #0
    66d0:	4001      	ands	r1, r0
    66d2:	1c08      	adds	r0, r1, #0
    66d4:	1c21      	adds	r1, r4, #0
    66d6:	4301      	orrs	r1, r0
    66d8:	7019      	strb	r1, [r3, #0]
    66da:	0a11      	lsrs	r1, r2, #8
    66dc:	20ff      	movs	r0, #255	; 0xff
    66de:	4001      	ands	r1, r0
    66e0:	000c      	movs	r4, r1
    66e2:	7859      	ldrb	r1, [r3, #1]
    66e4:	2000      	movs	r0, #0
    66e6:	4001      	ands	r1, r0
    66e8:	1c08      	adds	r0, r1, #0
    66ea:	1c21      	adds	r1, r4, #0
    66ec:	4301      	orrs	r1, r0
    66ee:	7059      	strb	r1, [r3, #1]
    66f0:	0c11      	lsrs	r1, r2, #16
    66f2:	20ff      	movs	r0, #255	; 0xff
    66f4:	4001      	ands	r1, r0
    66f6:	000c      	movs	r4, r1
    66f8:	7899      	ldrb	r1, [r3, #2]
    66fa:	2000      	movs	r0, #0
    66fc:	4001      	ands	r1, r0
    66fe:	1c08      	adds	r0, r1, #0
    6700:	1c21      	adds	r1, r4, #0
    6702:	4301      	orrs	r1, r0
    6704:	7099      	strb	r1, [r3, #2]
    6706:	0e10      	lsrs	r0, r2, #24
    6708:	78da      	ldrb	r2, [r3, #3]
    670a:	2100      	movs	r1, #0
    670c:	400a      	ands	r2, r1
    670e:	1c11      	adds	r1, r2, #0
    6710:	1c02      	adds	r2, r0, #0
    6712:	430a      	orrs	r2, r1
    6714:	70da      	strb	r2, [r3, #3]
			return (numb_sock);
    6716:	1dfb      	adds	r3, r7, #7
    6718:	781b      	ldrb	r3, [r3, #0]
    671a:	e009      	b.n	6730 <check_data_wr_process+0xe0>
	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    671c:	1dfb      	adds	r3, r7, #7
    671e:	781a      	ldrb	r2, [r3, #0]
    6720:	1dfb      	adds	r3, r7, #7
    6722:	3201      	adds	r2, #1
    6724:	701a      	strb	r2, [r3, #0]
    6726:	1dfb      	adds	r3, r7, #7
    6728:	781b      	ldrb	r3, [r3, #0]
    672a:	2b04      	cmp	r3, #4
    672c:	d99a      	bls.n	6664 <check_data_wr_process+0x14>
		}
	}
	return (NO_SOKET);	
    672e:	236d      	movs	r3, #109	; 0x6d
}
    6730:	0018      	movs	r0, r3
    6732:	46bd      	mov	sp, r7
    6734:	b003      	add	sp, #12
    6736:	bd90      	pop	{r4, r7, pc}
    6738:	200005cc 	.word	0x200005cc
    673c:	000005d2 	.word	0x000005d2
    6740:	000005e5 	.word	0x000005e5

00006744 <flash_empty>:
#include "def.h"



WORD flash_empty(DWORD addr,WORD size)
{
    6744:	b580      	push	{r7, lr}
    6746:	b084      	sub	sp, #16
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	000a      	movs	r2, r1
    674e:	1cbb      	adds	r3, r7, #2
    6750:	801a      	strh	r2, [r3, #0]
	DWORD  v    = 0;
    6752:	2300      	movs	r3, #0
    6754:	60fb      	str	r3, [r7, #12]
	for(;size;addr+=4,size-=4)
    6756:	e00f      	b.n	6778 <flash_empty+0x34>
	{
		v = *(__IO DWORD*)(addr);
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	681b      	ldr	r3, [r3, #0]
    675c:	60fb      	str	r3, [r7, #12]
		if(v != 0xFFFFFFFF)
    675e:	68fb      	ldr	r3, [r7, #12]
    6760:	3301      	adds	r3, #1
    6762:	d001      	beq.n	6768 <flash_empty+0x24>
		{
			return(0);
    6764:	2300      	movs	r3, #0
    6766:	e00c      	b.n	6782 <flash_empty+0x3e>
	for(;size;addr+=4,size-=4)
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	3304      	adds	r3, #4
    676c:	607b      	str	r3, [r7, #4]
    676e:	1cbb      	adds	r3, r7, #2
    6770:	1cba      	adds	r2, r7, #2
    6772:	8812      	ldrh	r2, [r2, #0]
    6774:	3a04      	subs	r2, #4
    6776:	801a      	strh	r2, [r3, #0]
    6778:	1cbb      	adds	r3, r7, #2
    677a:	881b      	ldrh	r3, [r3, #0]
    677c:	2b00      	cmp	r3, #0
    677e:	d1eb      	bne.n	6758 <flash_empty+0x14>
		}
	}


	return(1);
    6780:	2301      	movs	r3, #1
}
    6782:	0018      	movs	r0, r3
    6784:	46bd      	mov	sp, r7
    6786:	b004      	add	sp, #16
    6788:	bd80      	pop	{r7, pc}

0000678a <flash_erase_page>:

void flash_erase_page(DWORD addr)
//-----------------------------------------------------------------------------
{
    678a:	b580      	push	{r7, lr}
    678c:	b082      	sub	sp, #8
    678e:	af00      	add	r7, sp, #0
    6790:	6078      	str	r0, [r7, #4]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	4b0e      	ldr	r3, [pc, #56]	; (67d0 <flash_erase_page+0x46>)
    6796:	7d1b      	ldrb	r3, [r3, #20]
    6798:	07db      	lsls	r3, r3, #31
    679a:	0fdb      	lsrs	r3, r3, #31
    679c:	b2db      	uxtb	r3, r3
    679e:	2b00      	cmp	r3, #0
    67a0:	d0f8      	beq.n	6794 <flash_erase_page+0xa>
	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    67a2:	4b0b      	ldr	r3, [pc, #44]	; (67d0 <flash_erase_page+0x46>)
    67a4:	2220      	movs	r2, #32
    67a6:	32ff      	adds	r2, #255	; 0xff
    67a8:	831a      	strh	r2, [r3, #24]
	*(__IO DWORD *)(addr)=0xFFFFFFFF;
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	2201      	movs	r2, #1
    67ae:	4252      	negs	r2, r2
    67b0:	601a      	str	r2, [r3, #0]
	NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    67b2:	4b07      	ldr	r3, [pc, #28]	; (67d0 <flash_erase_page+0x46>)
    67b4:	4a07      	ldr	r2, [pc, #28]	; (67d4 <flash_erase_page+0x4a>)
    67b6:	801a      	strh	r2, [r3, #0]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    67b8:	46c0      	nop			; (mov r8, r8)
    67ba:	4b05      	ldr	r3, [pc, #20]	; (67d0 <flash_erase_page+0x46>)
    67bc:	7d1b      	ldrb	r3, [r3, #20]
    67be:	07db      	lsls	r3, r3, #31
    67c0:	0fdb      	lsrs	r3, r3, #31
    67c2:	b2db      	uxtb	r3, r3
    67c4:	2b00      	cmp	r3, #0
    67c6:	d0f8      	beq.n	67ba <flash_erase_page+0x30>
}
    67c8:	46c0      	nop			; (mov r8, r8)
    67ca:	46bd      	mov	sp, r7
    67cc:	b002      	add	sp, #8
    67ce:	bd80      	pop	{r7, pc}
    67d0:	41004000 	.word	0x41004000
    67d4:	ffffa502 	.word	0xffffa502

000067d8 <flash_write>:

void flash_write(DWORD addr,BYTE *buf,WORD size)
//-----------------------------------------------------------------------------
{
    67d8:	b580      	push	{r7, lr}
    67da:	b088      	sub	sp, #32
    67dc:	af00      	add	r7, sp, #0
    67de:	60f8      	str	r0, [r7, #12]
    67e0:	60b9      	str	r1, [r7, #8]
    67e2:	1dbb      	adds	r3, r7, #6
    67e4:	801a      	strh	r2, [r3, #0]
	WORD wn   = 0;
    67e6:	231e      	movs	r3, #30
    67e8:	18fb      	adds	r3, r7, r3
    67ea:	2200      	movs	r2, #0
    67ec:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    67ee:	2300      	movs	r3, #0
    67f0:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    67f2:	2300      	movs	r3, #0
    67f4:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    67f6:	4a2b      	ldr	r2, [pc, #172]	; (68a4 <flash_write+0xcc>)
    67f8:	6853      	ldr	r3, [r2, #4]
    67fa:	2180      	movs	r1, #128	; 0x80
    67fc:	438b      	bics	r3, r1
    67fe:	6053      	str	r3, [r2, #4]

	while(size > 0)
    6800:	e048      	b.n	6894 <flash_write+0xbc>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    6802:	1dbb      	adds	r3, r7, #6
    6804:	881b      	ldrh	r3, [r3, #0]
    6806:	2b10      	cmp	r3, #16
    6808:	d802      	bhi.n	6810 <flash_write+0x38>
    680a:	1dbb      	adds	r3, r7, #6
    680c:	881b      	ldrh	r3, [r3, #0]
    680e:	e000      	b.n	6812 <flash_write+0x3a>
    6810:	2310      	movs	r3, #16
    6812:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6814:	697b      	ldr	r3, [r7, #20]
    6816:	b29a      	uxth	r2, r3
    6818:	1dbb      	adds	r3, r7, #6
    681a:	1db9      	adds	r1, r7, #6
    681c:	8809      	ldrh	r1, [r1, #0]
    681e:	1a8a      	subs	r2, r1, r2
    6820:	801a      	strh	r2, [r3, #0]
		
		//wdt_reset();
		
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6822:	4b20      	ldr	r3, [pc, #128]	; (68a4 <flash_write+0xcc>)
    6824:	4a20      	ldr	r2, [pc, #128]	; (68a8 <flash_write+0xd0>)
    6826:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6828:	46c0      	nop			; (mov r8, r8)
    682a:	4b1e      	ldr	r3, [pc, #120]	; (68a4 <flash_write+0xcc>)
    682c:	7d1b      	ldrb	r3, [r3, #20]
    682e:	07db      	lsls	r3, r3, #31
    6830:	0fdb      	lsrs	r3, r3, #31
    6832:	b2db      	uxtb	r3, r3
    6834:	2b00      	cmp	r3, #0
    6836:	d0f8      	beq.n	682a <flash_write+0x52>

		for(wn=0;wn<len;wn+=4,addr+=4)
    6838:	231e      	movs	r3, #30
    683a:	18fb      	adds	r3, r7, r3
    683c:	2200      	movs	r2, #0
    683e:	801a      	strh	r2, [r3, #0]
    6840:	e013      	b.n	686a <flash_write+0x92>
		{
			*(__IO DWORD*)(addr) = *(DWORD*)&buf[wn+cnt];
    6842:	68fb      	ldr	r3, [r7, #12]
    6844:	221e      	movs	r2, #30
    6846:	18ba      	adds	r2, r7, r2
    6848:	8811      	ldrh	r1, [r2, #0]
    684a:	69ba      	ldr	r2, [r7, #24]
    684c:	188a      	adds	r2, r1, r2
    684e:	68b9      	ldr	r1, [r7, #8]
    6850:	188a      	adds	r2, r1, r2
    6852:	6812      	ldr	r2, [r2, #0]
    6854:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,addr+=4)
    6856:	231e      	movs	r3, #30
    6858:	18fb      	adds	r3, r7, r3
    685a:	221e      	movs	r2, #30
    685c:	18ba      	adds	r2, r7, r2
    685e:	8812      	ldrh	r2, [r2, #0]
    6860:	3204      	adds	r2, #4
    6862:	801a      	strh	r2, [r3, #0]
    6864:	68fb      	ldr	r3, [r7, #12]
    6866:	3304      	adds	r3, #4
    6868:	60fb      	str	r3, [r7, #12]
    686a:	231e      	movs	r3, #30
    686c:	18fb      	adds	r3, r7, r3
    686e:	881a      	ldrh	r2, [r3, #0]
    6870:	697b      	ldr	r3, [r7, #20]
    6872:	429a      	cmp	r2, r3
    6874:	d3e5      	bcc.n	6842 <flash_write+0x6a>
		}
		
		cnt=cnt+len;
    6876:	69ba      	ldr	r2, [r7, #24]
    6878:	697b      	ldr	r3, [r7, #20]
    687a:	18d3      	adds	r3, r2, r3
    687c:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    687e:	4b09      	ldr	r3, [pc, #36]	; (68a4 <flash_write+0xcc>)
    6880:	4a0a      	ldr	r2, [pc, #40]	; (68ac <flash_write+0xd4>)
    6882:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6884:	46c0      	nop			; (mov r8, r8)
    6886:	4b07      	ldr	r3, [pc, #28]	; (68a4 <flash_write+0xcc>)
    6888:	7d1b      	ldrb	r3, [r3, #20]
    688a:	07db      	lsls	r3, r3, #31
    688c:	0fdb      	lsrs	r3, r3, #31
    688e:	b2db      	uxtb	r3, r3
    6890:	2b00      	cmp	r3, #0
    6892:	d0f8      	beq.n	6886 <flash_write+0xae>
	while(size > 0)
    6894:	1dbb      	adds	r3, r7, #6
    6896:	881b      	ldrh	r3, [r3, #0]
    6898:	2b00      	cmp	r3, #0
    689a:	d1b2      	bne.n	6802 <flash_write+0x2a>
	}
}
    689c:	46c0      	nop			; (mov r8, r8)
    689e:	46bd      	mov	sp, r7
    68a0:	b008      	add	sp, #32
    68a2:	bd80      	pop	{r7, pc}
    68a4:	41004000 	.word	0x41004000
    68a8:	ffffa544 	.word	0xffffa544
    68ac:	ffffa504 	.word	0xffffa504

000068b0 <flash_copy>:

WORD flash_copy(DWORD dst,DWORD src,DWORD size)
//--------------------------------------------------------------------------
{
    68b0:	b580      	push	{r7, lr}
    68b2:	b088      	sub	sp, #32
    68b4:	af00      	add	r7, sp, #0
    68b6:	60f8      	str	r0, [r7, #12]
    68b8:	60b9      	str	r1, [r7, #8]
    68ba:	607a      	str	r2, [r7, #4]
	WORD wn   = 0;
    68bc:	231e      	movs	r3, #30
    68be:	18fb      	adds	r3, r7, r3
    68c0:	2200      	movs	r2, #0
    68c2:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    68c4:	2300      	movs	r3, #0
    68c6:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    68c8:	2300      	movs	r3, #0
    68ca:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    68cc:	4a2d      	ldr	r2, [pc, #180]	; (6984 <flash_copy+0xd4>)
    68ce:	6853      	ldr	r3, [r2, #4]
    68d0:	2180      	movs	r1, #128	; 0x80
    68d2:	438b      	bics	r3, r1
    68d4:	6053      	str	r3, [r2, #4]

	while(size > 0)
    68d6:	e04d      	b.n	6974 <flash_copy+0xc4>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	2b10      	cmp	r3, #16
    68dc:	d900      	bls.n	68e0 <flash_copy+0x30>
    68de:	2310      	movs	r3, #16
    68e0:	617b      	str	r3, [r7, #20]
		
		size-=len;
    68e2:	687a      	ldr	r2, [r7, #4]
    68e4:	697b      	ldr	r3, [r7, #20]
    68e6:	1ad3      	subs	r3, r2, r3
    68e8:	607b      	str	r3, [r7, #4]
		wdt_reset();
    68ea:	4b27      	ldr	r3, [pc, #156]	; (6988 <flash_copy+0xd8>)
    68ec:	799b      	ldrb	r3, [r3, #6]
    68ee:	07db      	lsls	r3, r3, #31
    68f0:	0fdb      	lsrs	r3, r3, #31
    68f2:	b2db      	uxtb	r3, r3
    68f4:	2b01      	cmp	r3, #1
    68f6:	d107      	bne.n	6908 <flash_copy+0x58>
    68f8:	4a23      	ldr	r2, [pc, #140]	; (6988 <flash_copy+0xd8>)
    68fa:	7993      	ldrb	r3, [r2, #6]
    68fc:	2101      	movs	r1, #1
    68fe:	430b      	orrs	r3, r1
    6900:	7193      	strb	r3, [r2, #6]
    6902:	4b21      	ldr	r3, [pc, #132]	; (6988 <flash_copy+0xd8>)
    6904:	22a5      	movs	r2, #165	; 0xa5
    6906:	721a      	strb	r2, [r3, #8]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6908:	4b1e      	ldr	r3, [pc, #120]	; (6984 <flash_copy+0xd4>)
    690a:	4a20      	ldr	r2, [pc, #128]	; (698c <flash_copy+0xdc>)
    690c:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    690e:	46c0      	nop			; (mov r8, r8)
    6910:	4b1c      	ldr	r3, [pc, #112]	; (6984 <flash_copy+0xd4>)
    6912:	7d1b      	ldrb	r3, [r3, #20]
    6914:	07db      	lsls	r3, r3, #31
    6916:	0fdb      	lsrs	r3, r3, #31
    6918:	b2db      	uxtb	r3, r3
    691a:	2b00      	cmp	r3, #0
    691c:	d0f8      	beq.n	6910 <flash_copy+0x60>

		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    691e:	231e      	movs	r3, #30
    6920:	18fb      	adds	r3, r7, r3
    6922:	2200      	movs	r2, #0
    6924:	801a      	strh	r2, [r3, #0]
    6926:	e010      	b.n	694a <flash_copy+0x9a>
		{
			
			*(__IO DWORD*)(dst) = *(__IO DWORD*)(src);
    6928:	68fb      	ldr	r3, [r7, #12]
    692a:	68ba      	ldr	r2, [r7, #8]
    692c:	6812      	ldr	r2, [r2, #0]
    692e:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    6930:	231e      	movs	r3, #30
    6932:	18fb      	adds	r3, r7, r3
    6934:	221e      	movs	r2, #30
    6936:	18ba      	adds	r2, r7, r2
    6938:	8812      	ldrh	r2, [r2, #0]
    693a:	3204      	adds	r2, #4
    693c:	801a      	strh	r2, [r3, #0]
    693e:	68fb      	ldr	r3, [r7, #12]
    6940:	3304      	adds	r3, #4
    6942:	60fb      	str	r3, [r7, #12]
    6944:	68bb      	ldr	r3, [r7, #8]
    6946:	3304      	adds	r3, #4
    6948:	60bb      	str	r3, [r7, #8]
    694a:	231e      	movs	r3, #30
    694c:	18fb      	adds	r3, r7, r3
    694e:	881a      	ldrh	r2, [r3, #0]
    6950:	697b      	ldr	r3, [r7, #20]
    6952:	429a      	cmp	r2, r3
    6954:	d3e8      	bcc.n	6928 <flash_copy+0x78>
		}
		
		cnt=cnt+len;
    6956:	69ba      	ldr	r2, [r7, #24]
    6958:	697b      	ldr	r3, [r7, #20]
    695a:	18d3      	adds	r3, r2, r3
    695c:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    695e:	4b09      	ldr	r3, [pc, #36]	; (6984 <flash_copy+0xd4>)
    6960:	4a0b      	ldr	r2, [pc, #44]	; (6990 <flash_copy+0xe0>)
    6962:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6964:	46c0      	nop			; (mov r8, r8)
    6966:	4b07      	ldr	r3, [pc, #28]	; (6984 <flash_copy+0xd4>)
    6968:	7d1b      	ldrb	r3, [r3, #20]
    696a:	07db      	lsls	r3, r3, #31
    696c:	0fdb      	lsrs	r3, r3, #31
    696e:	b2db      	uxtb	r3, r3
    6970:	2b00      	cmp	r3, #0
    6972:	d0f8      	beq.n	6966 <flash_copy+0xb6>
	while(size > 0)
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	2b00      	cmp	r3, #0
    6978:	d1ae      	bne.n	68d8 <flash_copy+0x28>
	}
	return 0;
    697a:	2300      	movs	r3, #0
}
    697c:	0018      	movs	r0, r3
    697e:	46bd      	mov	sp, r7
    6980:	b008      	add	sp, #32
    6982:	bd80      	pop	{r7, pc}
    6984:	41004000 	.word	0x41004000
    6988:	40001000 	.word	0x40001000
    698c:	ffffa544 	.word	0xffffa544
    6990:	ffffa504 	.word	0xffffa504

00006994 <flash_read>:

WORD flash_read(DWORD addr,void* buf,WORD size)
//--------------------------------------------------------------------------
{
    6994:	b580      	push	{r7, lr}
    6996:	b086      	sub	sp, #24
    6998:	af00      	add	r7, sp, #0
    699a:	60f8      	str	r0, [r7, #12]
    699c:	60b9      	str	r1, [r7, #8]
    699e:	1dbb      	adds	r3, r7, #6
    69a0:	801a      	strh	r2, [r3, #0]
	WORD  cnt  = 0;
    69a2:	2316      	movs	r3, #22
    69a4:	18fb      	adds	r3, r7, r3
    69a6:	2200      	movs	r2, #0
    69a8:	801a      	strh	r2, [r3, #0]
	WORD* ptr = (WORD*)buf;
    69aa:	68bb      	ldr	r3, [r7, #8]
    69ac:	613b      	str	r3, [r7, #16]
	
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    69ae:	2316      	movs	r3, #22
    69b0:	18fb      	adds	r3, r7, r3
    69b2:	2200      	movs	r2, #0
    69b4:	801a      	strh	r2, [r3, #0]
    69b6:	e020      	b.n	69fa <flash_read+0x66>
	{
		*ptr = *(__IO uint16_t*)(addr);
    69b8:	68fb      	ldr	r3, [r7, #12]
    69ba:	881b      	ldrh	r3, [r3, #0]
    69bc:	b29a      	uxth	r2, r3
    69be:	693b      	ldr	r3, [r7, #16]
    69c0:	801a      	strh	r2, [r3, #0]
		ptr++;
    69c2:	693b      	ldr	r3, [r7, #16]
    69c4:	3302      	adds	r3, #2
    69c6:	613b      	str	r3, [r7, #16]
		wdt_reset();
    69c8:	4b13      	ldr	r3, [pc, #76]	; (6a18 <flash_read+0x84>)
    69ca:	799b      	ldrb	r3, [r3, #6]
    69cc:	07db      	lsls	r3, r3, #31
    69ce:	0fdb      	lsrs	r3, r3, #31
    69d0:	b2db      	uxtb	r3, r3
    69d2:	2b01      	cmp	r3, #1
    69d4:	d107      	bne.n	69e6 <flash_read+0x52>
    69d6:	4a10      	ldr	r2, [pc, #64]	; (6a18 <flash_read+0x84>)
    69d8:	7993      	ldrb	r3, [r2, #6]
    69da:	2101      	movs	r1, #1
    69dc:	430b      	orrs	r3, r1
    69de:	7193      	strb	r3, [r2, #6]
    69e0:	4b0d      	ldr	r3, [pc, #52]	; (6a18 <flash_read+0x84>)
    69e2:	22a5      	movs	r2, #165	; 0xa5
    69e4:	721a      	strb	r2, [r3, #8]
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    69e6:	68fb      	ldr	r3, [r7, #12]
    69e8:	3302      	adds	r3, #2
    69ea:	60fb      	str	r3, [r7, #12]
    69ec:	2316      	movs	r3, #22
    69ee:	18fb      	adds	r3, r7, r3
    69f0:	2216      	movs	r2, #22
    69f2:	18ba      	adds	r2, r7, r2
    69f4:	8812      	ldrh	r2, [r2, #0]
    69f6:	3202      	adds	r2, #2
    69f8:	801a      	strh	r2, [r3, #0]
    69fa:	2316      	movs	r3, #22
    69fc:	18fa      	adds	r2, r7, r3
    69fe:	1dbb      	adds	r3, r7, #6
    6a00:	8812      	ldrh	r2, [r2, #0]
    6a02:	881b      	ldrh	r3, [r3, #0]
    6a04:	429a      	cmp	r2, r3
    6a06:	d3d7      	bcc.n	69b8 <flash_read+0x24>
	}
	return(cnt);
    6a08:	2316      	movs	r3, #22
    6a0a:	18fb      	adds	r3, r7, r3
    6a0c:	881b      	ldrh	r3, [r3, #0]
}
    6a0e:	0018      	movs	r0, r3
    6a10:	46bd      	mov	sp, r7
    6a12:	b006      	add	sp, #24
    6a14:	bd80      	pop	{r7, pc}
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	40001000 	.word	0x40001000

00006a1c <flash_erase_row>:

void flash_erase_row(DWORD *dst) 
//-----------------------------------------------------------------------------
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	b082      	sub	sp, #8
    6a20:	af00      	add	r7, sp, #0
    6a22:	6078      	str	r0, [r7, #4]
while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a24:	46c0      	nop			; (mov r8, r8)
    6a26:	4b0f      	ldr	r3, [pc, #60]	; (6a64 <flash_erase_row+0x48>)
    6a28:	7d1b      	ldrb	r3, [r3, #20]
    6a2a:	07db      	lsls	r3, r3, #31
    6a2c:	0fdb      	lsrs	r3, r3, #31
    6a2e:	b2db      	uxtb	r3, r3
    6a30:	2b00      	cmp	r3, #0
    6a32:	d0f8      	beq.n	6a26 <flash_erase_row+0xa>

NVMCTRL->STATUS.reg=NVMCTRL_STATUS_MASK;
    6a34:	4b0b      	ldr	r3, [pc, #44]	; (6a64 <flash_erase_row+0x48>)
    6a36:	2220      	movs	r2, #32
    6a38:	32ff      	adds	r2, #255	; 0xff
    6a3a:	831a      	strh	r2, [r3, #24]
*dst=0xFFFFFFFF;
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	2201      	movs	r2, #1
    6a40:	4252      	negs	r2, r2
    6a42:	601a      	str	r2, [r3, #0]
NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    6a44:	4b07      	ldr	r3, [pc, #28]	; (6a64 <flash_erase_row+0x48>)
    6a46:	4a08      	ldr	r2, [pc, #32]	; (6a68 <flash_erase_row+0x4c>)
    6a48:	801a      	strh	r2, [r3, #0]

while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a4a:	46c0      	nop			; (mov r8, r8)
    6a4c:	4b05      	ldr	r3, [pc, #20]	; (6a64 <flash_erase_row+0x48>)
    6a4e:	7d1b      	ldrb	r3, [r3, #20]
    6a50:	07db      	lsls	r3, r3, #31
    6a52:	0fdb      	lsrs	r3, r3, #31
    6a54:	b2db      	uxtb	r3, r3
    6a56:	2b00      	cmp	r3, #0
    6a58:	d0f8      	beq.n	6a4c <flash_erase_row+0x30>
}
    6a5a:	46c0      	nop			; (mov r8, r8)
    6a5c:	46bd      	mov	sp, r7
    6a5e:	b002      	add	sp, #8
    6a60:	bd80      	pop	{r7, pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	41004000 	.word	0x41004000
    6a68:	ffffa502 	.word	0xffffa502

00006a6c <flash_write_dword>:

void flash_write_dword(DWORD *dst,DWORD* val) 
//-----------------------------------------------------------------------------
{
    6a6c:	b580      	push	{r7, lr}
    6a6e:	b082      	sub	sp, #8
    6a70:	af00      	add	r7, sp, #0
    6a72:	6078      	str	r0, [r7, #4]
    6a74:	6039      	str	r1, [r7, #0]
NVMCTRL->CTRLB.bit.MANW=0;
    6a76:	4a11      	ldr	r2, [pc, #68]	; (6abc <flash_write_dword+0x50>)
    6a78:	6853      	ldr	r3, [r2, #4]
    6a7a:	2180      	movs	r1, #128	; 0x80
    6a7c:	438b      	bics	r3, r1
    6a7e:	6053      	str	r3, [r2, #4]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6a80:	4b0e      	ldr	r3, [pc, #56]	; (6abc <flash_write_dword+0x50>)
    6a82:	4a0f      	ldr	r2, [pc, #60]	; (6ac0 <flash_write_dword+0x54>)
    6a84:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6a86:	46c0      	nop			; (mov r8, r8)
    6a88:	4b0c      	ldr	r3, [pc, #48]	; (6abc <flash_write_dword+0x50>)
    6a8a:	7d1b      	ldrb	r3, [r3, #20]
    6a8c:	07db      	lsls	r3, r3, #31
    6a8e:	0fdb      	lsrs	r3, r3, #31
    6a90:	b2db      	uxtb	r3, r3
    6a92:	2b00      	cmp	r3, #0
    6a94:	d0f8      	beq.n	6a88 <flash_write_dword+0x1c>

*dst=*val;
    6a96:	683b      	ldr	r3, [r7, #0]
    6a98:	681a      	ldr	r2, [r3, #0]
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	601a      	str	r2, [r3, #0]

NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    6a9e:	4b07      	ldr	r3, [pc, #28]	; (6abc <flash_write_dword+0x50>)
    6aa0:	4a08      	ldr	r2, [pc, #32]	; (6ac4 <flash_write_dword+0x58>)
    6aa2:	801a      	strh	r2, [r3, #0]
while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6aa4:	46c0      	nop			; (mov r8, r8)
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <flash_write_dword+0x50>)
    6aa8:	7d1b      	ldrb	r3, [r3, #20]
    6aaa:	07db      	lsls	r3, r3, #31
    6aac:	0fdb      	lsrs	r3, r3, #31
    6aae:	b2db      	uxtb	r3, r3
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d0f8      	beq.n	6aa6 <flash_write_dword+0x3a>
}
    6ab4:	46c0      	nop			; (mov r8, r8)
    6ab6:	46bd      	mov	sp, r7
    6ab8:	b002      	add	sp, #8
    6aba:	bd80      	pop	{r7, pc}
    6abc:	41004000 	.word	0x41004000
    6ac0:	ffffa544 	.word	0xffffa544
    6ac4:	ffffa504 	.word	0xffffa504

00006ac8 <gpio_init>:
#include "def.h"

void gpio_init (void)
{
    6ac8:	b580      	push	{r7, lr}
    6aca:	af00      	add	r7, sp, #0
	//.............................................................................
	// LED ........................................................................
	//.............................................................................

	PORT->Group[1].OUTSET.reg=PORT_PB03;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6acc:	4ac2      	ldr	r2, [pc, #776]	; (6dd8 <gpio_init+0x310>)
    6ace:	2398      	movs	r3, #152	; 0x98
    6ad0:	2108      	movs	r1, #8
    6ad2:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIRSET.reg=PORT_PB03;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6ad4:	4ac0      	ldr	r2, [pc, #768]	; (6dd8 <gpio_init+0x310>)
    6ad6:	2388      	movs	r3, #136	; 0x88
    6ad8:	2108      	movs	r1, #8
    6ada:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6adc:	49be      	ldr	r1, [pc, #760]	; (6dd8 <gpio_init+0x310>)
    6ade:	22c3      	movs	r2, #195	; 0xc3
    6ae0:	5c8b      	ldrb	r3, [r1, r2]
    6ae2:	2001      	movs	r0, #1
    6ae4:	4383      	bics	r3, r0
    6ae6:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART1 SERCOM1_ALT ............................................................
	//.............................................................................
 
	// PA12 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA12;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ae8:	4bbb      	ldr	r3, [pc, #748]	; (6dd8 <gpio_init+0x310>)
    6aea:	2280      	movs	r2, #128	; 0x80
    6aec:	0152      	lsls	r2, r2, #5
    6aee:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA12;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6af0:	4bb9      	ldr	r3, [pc, #740]	; (6dd8 <gpio_init+0x310>)
    6af2:	2280      	movs	r2, #128	; 0x80
    6af4:	0152      	lsls	r2, r2, #5
    6af6:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[12].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6af8:	49b7      	ldr	r1, [pc, #732]	; (6dd8 <gpio_init+0x310>)
    6afa:	224c      	movs	r2, #76	; 0x4c
    6afc:	5c8b      	ldrb	r3, [r1, r2]
    6afe:	2001      	movs	r0, #1
    6b00:	4383      	bics	r3, r0
    6b02:	548b      	strb	r3, [r1, r2]

	// PA00 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA00;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b04:	4bb4      	ldr	r3, [pc, #720]	; (6dd8 <gpio_init+0x310>)
    6b06:	2201      	movs	r2, #1
    6b08:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA00;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b0a:	4bb3      	ldr	r3, [pc, #716]	; (6dd8 <gpio_init+0x310>)
    6b0c:	2201      	movs	r2, #1
    6b0e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[0].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b10:	49b1      	ldr	r1, [pc, #708]	; (6dd8 <gpio_init+0x310>)
    6b12:	2240      	movs	r2, #64	; 0x40
    6b14:	5c8b      	ldrb	r3, [r1, r2]
    6b16:	2001      	movs	r0, #1
    6b18:	4303      	orrs	r3, r0
    6b1a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b1c:	49ae      	ldr	r1, [pc, #696]	; (6dd8 <gpio_init+0x310>)
    6b1e:	2230      	movs	r2, #48	; 0x30
    6b20:	5c8b      	ldrb	r3, [r1, r2]
    6b22:	200f      	movs	r0, #15
    6b24:	4383      	bics	r3, r0
    6b26:	1c18      	adds	r0, r3, #0
    6b28:	2303      	movs	r3, #3
    6b2a:	4303      	orrs	r3, r0
    6b2c:	548b      	strb	r3, [r1, r2]

	// PA01 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA01;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6b2e:	4baa      	ldr	r3, [pc, #680]	; (6dd8 <gpio_init+0x310>)
    6b30:	2202      	movs	r2, #2
    6b32:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[1].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6b34:	49a8      	ldr	r1, [pc, #672]	; (6dd8 <gpio_init+0x310>)
    6b36:	2241      	movs	r2, #65	; 0x41
    6b38:	5c8b      	ldrb	r3, [r1, r2]
    6b3a:	2002      	movs	r0, #2
    6b3c:	4303      	orrs	r3, r0
    6b3e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[1].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b40:	49a5      	ldr	r1, [pc, #660]	; (6dd8 <gpio_init+0x310>)
    6b42:	2241      	movs	r2, #65	; 0x41
    6b44:	5c8b      	ldrb	r3, [r1, r2]
    6b46:	2001      	movs	r0, #1
    6b48:	4303      	orrs	r3, r0
    6b4a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6b4c:	49a2      	ldr	r1, [pc, #648]	; (6dd8 <gpio_init+0x310>)
    6b4e:	2230      	movs	r2, #48	; 0x30
    6b50:	5c8b      	ldrb	r3, [r1, r2]
    6b52:	200f      	movs	r0, #15
    6b54:	4003      	ands	r3, r0
    6b56:	1c18      	adds	r0, r3, #0
    6b58:	2330      	movs	r3, #48	; 0x30
    6b5a:	4303      	orrs	r3, r0
    6b5c:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART2 SERCOM0_ALT ............................................................
	//.............................................................................
	
	// PA13 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA13;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b5e:	4b9e      	ldr	r3, [pc, #632]	; (6dd8 <gpio_init+0x310>)
    6b60:	2280      	movs	r2, #128	; 0x80
    6b62:	0192      	lsls	r2, r2, #6
    6b64:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA13;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b66:	4b9c      	ldr	r3, [pc, #624]	; (6dd8 <gpio_init+0x310>)
    6b68:	2280      	movs	r2, #128	; 0x80
    6b6a:	0192      	lsls	r2, r2, #6
    6b6c:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[13].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6b6e:	499a      	ldr	r1, [pc, #616]	; (6dd8 <gpio_init+0x310>)
    6b70:	224d      	movs	r2, #77	; 0x4d
    6b72:	5c8b      	ldrb	r3, [r1, r2]
    6b74:	2001      	movs	r0, #1
    6b76:	4383      	bics	r3, r0
    6b78:	548b      	strb	r3, [r1, r2]

	// PA04 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA04;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6b7a:	4b97      	ldr	r3, [pc, #604]	; (6dd8 <gpio_init+0x310>)
    6b7c:	2210      	movs	r2, #16
    6b7e:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA04;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6b80:	4b95      	ldr	r3, [pc, #596]	; (6dd8 <gpio_init+0x310>)
    6b82:	2210      	movs	r2, #16
    6b84:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[4].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6b86:	4994      	ldr	r1, [pc, #592]	; (6dd8 <gpio_init+0x310>)
    6b88:	2244      	movs	r2, #68	; 0x44
    6b8a:	5c8b      	ldrb	r3, [r1, r2]
    6b8c:	2001      	movs	r0, #1
    6b8e:	4303      	orrs	r3, r0
    6b90:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6b92:	4991      	ldr	r1, [pc, #580]	; (6dd8 <gpio_init+0x310>)
    6b94:	2232      	movs	r2, #50	; 0x32
    6b96:	5c8b      	ldrb	r3, [r1, r2]
    6b98:	200f      	movs	r0, #15
    6b9a:	4383      	bics	r3, r0
    6b9c:	1c18      	adds	r0, r3, #0
    6b9e:	2303      	movs	r3, #3
    6ba0:	4303      	orrs	r3, r0
    6ba2:	548b      	strb	r3, [r1, r2]

	// PA05 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA05;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6ba4:	4b8c      	ldr	r3, [pc, #560]	; (6dd8 <gpio_init+0x310>)
    6ba6:	2220      	movs	r2, #32
    6ba8:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[5].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6baa:	498b      	ldr	r1, [pc, #556]	; (6dd8 <gpio_init+0x310>)
    6bac:	2245      	movs	r2, #69	; 0x45
    6bae:	5c8b      	ldrb	r3, [r1, r2]
    6bb0:	2002      	movs	r0, #2
    6bb2:	4303      	orrs	r3, r0
    6bb4:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[5].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6bb6:	4988      	ldr	r1, [pc, #544]	; (6dd8 <gpio_init+0x310>)
    6bb8:	2245      	movs	r2, #69	; 0x45
    6bba:	5c8b      	ldrb	r3, [r1, r2]
    6bbc:	2001      	movs	r0, #1
    6bbe:	4303      	orrs	r3, r0
    6bc0:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6bc2:	4985      	ldr	r1, [pc, #532]	; (6dd8 <gpio_init+0x310>)
    6bc4:	2232      	movs	r2, #50	; 0x32
    6bc6:	5c8b      	ldrb	r3, [r1, r2]
    6bc8:	200f      	movs	r0, #15
    6bca:	4003      	ands	r3, r0
    6bcc:	1c18      	adds	r0, r3, #0
    6bce:	2330      	movs	r3, #48	; 0x30
    6bd0:	4303      	orrs	r3, r0
    6bd2:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART3 SERCOM2_ALT ............................................................
	//.............................................................................
		
	// PA14 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA14;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6bd4:	4b80      	ldr	r3, [pc, #512]	; (6dd8 <gpio_init+0x310>)
    6bd6:	2280      	movs	r2, #128	; 0x80
    6bd8:	01d2      	lsls	r2, r2, #7
    6bda:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA14;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bdc:	4b7e      	ldr	r3, [pc, #504]	; (6dd8 <gpio_init+0x310>)
    6bde:	2280      	movs	r2, #128	; 0x80
    6be0:	01d2      	lsls	r2, r2, #7
    6be2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[14].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6be4:	497c      	ldr	r1, [pc, #496]	; (6dd8 <gpio_init+0x310>)
    6be6:	224e      	movs	r2, #78	; 0x4e
    6be8:	5c8b      	ldrb	r3, [r1, r2]
    6bea:	2001      	movs	r0, #1
    6bec:	4383      	bics	r3, r0
    6bee:	548b      	strb	r3, [r1, r2]

	// PA08 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA08;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6bf0:	4b79      	ldr	r3, [pc, #484]	; (6dd8 <gpio_init+0x310>)
    6bf2:	2280      	movs	r2, #128	; 0x80
    6bf4:	0052      	lsls	r2, r2, #1
    6bf6:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA08;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6bf8:	4b77      	ldr	r3, [pc, #476]	; (6dd8 <gpio_init+0x310>)
    6bfa:	2280      	movs	r2, #128	; 0x80
    6bfc:	0052      	lsls	r2, r2, #1
    6bfe:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[8].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c00:	4975      	ldr	r1, [pc, #468]	; (6dd8 <gpio_init+0x310>)
    6c02:	2248      	movs	r2, #72	; 0x48
    6c04:	5c8b      	ldrb	r3, [r1, r2]
    6c06:	2001      	movs	r0, #1
    6c08:	4303      	orrs	r3, r0
    6c0a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6c0c:	4972      	ldr	r1, [pc, #456]	; (6dd8 <gpio_init+0x310>)
    6c0e:	2234      	movs	r2, #52	; 0x34
    6c10:	5c8b      	ldrb	r3, [r1, r2]
    6c12:	200f      	movs	r0, #15
    6c14:	4383      	bics	r3, r0
    6c16:	1c18      	adds	r0, r3, #0
    6c18:	2303      	movs	r3, #3
    6c1a:	4303      	orrs	r3, r0
    6c1c:	548b      	strb	r3, [r1, r2]

	// PA09 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA09;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6c1e:	4b6e      	ldr	r3, [pc, #440]	; (6dd8 <gpio_init+0x310>)
    6c20:	2280      	movs	r2, #128	; 0x80
    6c22:	0092      	lsls	r2, r2, #2
    6c24:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[9].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6c26:	496c      	ldr	r1, [pc, #432]	; (6dd8 <gpio_init+0x310>)
    6c28:	2249      	movs	r2, #73	; 0x49
    6c2a:	5c8b      	ldrb	r3, [r1, r2]
    6c2c:	2002      	movs	r0, #2
    6c2e:	4303      	orrs	r3, r0
    6c30:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[9].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c32:	4969      	ldr	r1, [pc, #420]	; (6dd8 <gpio_init+0x310>)
    6c34:	2249      	movs	r2, #73	; 0x49
    6c36:	5c8b      	ldrb	r3, [r1, r2]
    6c38:	2001      	movs	r0, #1
    6c3a:	4303      	orrs	r3, r0
    6c3c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6c3e:	4966      	ldr	r1, [pc, #408]	; (6dd8 <gpio_init+0x310>)
    6c40:	2234      	movs	r2, #52	; 0x34
    6c42:	5c8b      	ldrb	r3, [r1, r2]
    6c44:	200f      	movs	r0, #15
    6c46:	4003      	ands	r3, r0
    6c48:	1c18      	adds	r0, r3, #0
    6c4a:	2330      	movs	r3, #48	; 0x30
    6c4c:	4303      	orrs	r3, r0
    6c4e:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART4 SERCOM3_ALT ............................................................
	//.............................................................................
		
	// PA15 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA15;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c50:	4b61      	ldr	r3, [pc, #388]	; (6dd8 <gpio_init+0x310>)
    6c52:	2280      	movs	r2, #128	; 0x80
    6c54:	0212      	lsls	r2, r2, #8
    6c56:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA15;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6c58:	4b5f      	ldr	r3, [pc, #380]	; (6dd8 <gpio_init+0x310>)
    6c5a:	2280      	movs	r2, #128	; 0x80
    6c5c:	0212      	lsls	r2, r2, #8
    6c5e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[15].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6c60:	495d      	ldr	r1, [pc, #372]	; (6dd8 <gpio_init+0x310>)
    6c62:	224f      	movs	r2, #79	; 0x4f
    6c64:	5c8b      	ldrb	r3, [r1, r2]
    6c66:	2001      	movs	r0, #1
    6c68:	4383      	bics	r3, r0
    6c6a:	548b      	strb	r3, [r1, r2]

	// PA16 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA16;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6c6c:	4b5a      	ldr	r3, [pc, #360]	; (6dd8 <gpio_init+0x310>)
    6c6e:	2280      	movs	r2, #128	; 0x80
    6c70:	0252      	lsls	r2, r2, #9
    6c72:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA16;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6c74:	4b58      	ldr	r3, [pc, #352]	; (6dd8 <gpio_init+0x310>)
    6c76:	2280      	movs	r2, #128	; 0x80
    6c78:	0252      	lsls	r2, r2, #9
    6c7a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[16].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6c7c:	4956      	ldr	r1, [pc, #344]	; (6dd8 <gpio_init+0x310>)
    6c7e:	2250      	movs	r2, #80	; 0x50
    6c80:	5c8b      	ldrb	r3, [r1, r2]
    6c82:	2001      	movs	r0, #1
    6c84:	4303      	orrs	r3, r0
    6c86:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6c88:	4953      	ldr	r1, [pc, #332]	; (6dd8 <gpio_init+0x310>)
    6c8a:	2238      	movs	r2, #56	; 0x38
    6c8c:	5c8b      	ldrb	r3, [r1, r2]
    6c8e:	200f      	movs	r0, #15
    6c90:	4383      	bics	r3, r0
    6c92:	1c18      	adds	r0, r3, #0
    6c94:	2303      	movs	r3, #3
    6c96:	4303      	orrs	r3, r0
    6c98:	548b      	strb	r3, [r1, r2]

	// PA17 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA17;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6c9a:	4b4f      	ldr	r3, [pc, #316]	; (6dd8 <gpio_init+0x310>)
    6c9c:	2280      	movs	r2, #128	; 0x80
    6c9e:	0292      	lsls	r2, r2, #10
    6ca0:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[17].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6ca2:	494d      	ldr	r1, [pc, #308]	; (6dd8 <gpio_init+0x310>)
    6ca4:	2251      	movs	r2, #81	; 0x51
    6ca6:	5c8b      	ldrb	r3, [r1, r2]
    6ca8:	2002      	movs	r0, #2
    6caa:	4303      	orrs	r3, r0
    6cac:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[17].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cae:	494a      	ldr	r1, [pc, #296]	; (6dd8 <gpio_init+0x310>)
    6cb0:	2251      	movs	r2, #81	; 0x51
    6cb2:	5c8b      	ldrb	r3, [r1, r2]
    6cb4:	2001      	movs	r0, #1
    6cb6:	4303      	orrs	r3, r0
    6cb8:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6cba:	4947      	ldr	r1, [pc, #284]	; (6dd8 <gpio_init+0x310>)
    6cbc:	2238      	movs	r2, #56	; 0x38
    6cbe:	5c8b      	ldrb	r3, [r1, r2]
    6cc0:	200f      	movs	r0, #15
    6cc2:	4003      	ands	r3, r0
    6cc4:	1c18      	adds	r0, r3, #0
    6cc6:	2330      	movs	r3, #48	; 0x30
    6cc8:	4303      	orrs	r3, r0
    6cca:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// SPI SERCOM5_ALT ....................................................................
	//.............................................................................*/

	// PA23 - SPI_MOSI (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA23;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6ccc:	4b42      	ldr	r3, [pc, #264]	; (6dd8 <gpio_init+0x310>)
    6cce:	2280      	movs	r2, #128	; 0x80
    6cd0:	0412      	lsls	r2, r2, #16
    6cd2:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA23;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cd4:	4b40      	ldr	r3, [pc, #256]	; (6dd8 <gpio_init+0x310>)
    6cd6:	2280      	movs	r2, #128	; 0x80
    6cd8:	0412      	lsls	r2, r2, #16
    6cda:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[23].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6cdc:	493e      	ldr	r1, [pc, #248]	; (6dd8 <gpio_init+0x310>)
    6cde:	2257      	movs	r2, #87	; 0x57
    6ce0:	5c8b      	ldrb	r3, [r1, r2]
    6ce2:	2001      	movs	r0, #1
    6ce4:	4303      	orrs	r3, r0
    6ce6:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXO=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6ce8:	493b      	ldr	r1, [pc, #236]	; (6dd8 <gpio_init+0x310>)
    6cea:	223b      	movs	r2, #59	; 0x3b
    6cec:	5c8b      	ldrb	r3, [r1, r2]
    6cee:	200f      	movs	r0, #15
    6cf0:	4003      	ands	r3, r0
    6cf2:	1c18      	adds	r0, r3, #0
    6cf4:	2330      	movs	r3, #48	; 0x30
    6cf6:	4303      	orrs	r3, r0
    6cf8:	548b      	strb	r3, [r1, r2]

	// PA22 - SPI_MISO (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA22;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6cfa:	4b37      	ldr	r3, [pc, #220]	; (6dd8 <gpio_init+0x310>)
    6cfc:	2280      	movs	r2, #128	; 0x80
    6cfe:	03d2      	lsls	r2, r2, #15
    6d00:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[22].bit.INEN  =0x01; // Bit  17   - INEN:   Input Enable
    6d02:	4935      	ldr	r1, [pc, #212]	; (6dd8 <gpio_init+0x310>)
    6d04:	2256      	movs	r2, #86	; 0x56
    6d06:	5c8b      	ldrb	r3, [r1, r2]
    6d08:	2002      	movs	r0, #2
    6d0a:	4303      	orrs	r3, r0
    6d0c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6d0e:	4932      	ldr	r1, [pc, #200]	; (6dd8 <gpio_init+0x310>)
    6d10:	2256      	movs	r2, #86	; 0x56
    6d12:	5c8b      	ldrb	r3, [r1, r2]
    6d14:	2001      	movs	r0, #1
    6d16:	4303      	orrs	r3, r0
    6d18:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXE=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    6d1a:	492f      	ldr	r1, [pc, #188]	; (6dd8 <gpio_init+0x310>)
    6d1c:	223b      	movs	r2, #59	; 0x3b
    6d1e:	5c8b      	ldrb	r3, [r1, r2]
    6d20:	200f      	movs	r0, #15
    6d22:	4383      	bics	r3, r0
    6d24:	1c18      	adds	r0, r3, #0
    6d26:	2303      	movs	r3, #3
    6d28:	4303      	orrs	r3, r0
    6d2a:	548b      	strb	r3, [r1, r2]

	// PA24 - SPI_SCK (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA25;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6d2c:	4b2a      	ldr	r3, [pc, #168]	; (6dd8 <gpio_init+0x310>)
    6d2e:	2280      	movs	r2, #128	; 0x80
    6d30:	0492      	lsls	r2, r2, #18
    6d32:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA25;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d34:	4b28      	ldr	r3, [pc, #160]	; (6dd8 <gpio_init+0x310>)
    6d36:	2280      	movs	r2, #128	; 0x80
    6d38:	0492      	lsls	r2, r2, #18
    6d3a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[25].bit.PMUXEN=0x01; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6d3c:	4926      	ldr	r1, [pc, #152]	; (6dd8 <gpio_init+0x310>)
    6d3e:	2259      	movs	r2, #89	; 0x59
    6d40:	5c8b      	ldrb	r3, [r1, r2]
    6d42:	2001      	movs	r0, #1
    6d44:	4303      	orrs	r3, r0
    6d46:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [12].bit.PMUXO=3;  // Bits 3:0  - PMUXO: Peripheral Multiplexing Odd (5: Peripheral function F selected)
    6d48:	4923      	ldr	r1, [pc, #140]	; (6dd8 <gpio_init+0x310>)
    6d4a:	223c      	movs	r2, #60	; 0x3c
    6d4c:	5c8b      	ldrb	r3, [r1, r2]
    6d4e:	200f      	movs	r0, #15
    6d50:	4003      	ands	r3, r0
    6d52:	1c18      	adds	r0, r3, #0
    6d54:	2330      	movs	r3, #48	; 0x30
    6d56:	4303      	orrs	r3, r0
    6d58:	548b      	strb	r3, [r1, r2]

	// PA25 - SPI_CS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA24;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6d5a:	4b1f      	ldr	r3, [pc, #124]	; (6dd8 <gpio_init+0x310>)
    6d5c:	2280      	movs	r2, #128	; 0x80
    6d5e:	0452      	lsls	r2, r2, #17
    6d60:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA24;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d62:	4b1d      	ldr	r3, [pc, #116]	; (6dd8 <gpio_init+0x310>)
    6d64:	2280      	movs	r2, #128	; 0x80
    6d66:	0452      	lsls	r2, r2, #17
    6d68:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[24].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6d6a:	491b      	ldr	r1, [pc, #108]	; (6dd8 <gpio_init+0x310>)
    6d6c:	2258      	movs	r2, #88	; 0x58
    6d6e:	5c8b      	ldrb	r3, [r1, r2]
    6d70:	2001      	movs	r0, #1
    6d72:	4383      	bics	r3, r0
    6d74:	548b      	strb	r3, [r1, r2]
	
	// PA19 - SPI_INT (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA19;       // Bits 31:0 - DIRCLR: Port Data Direction Clear
    6d76:	4b18      	ldr	r3, [pc, #96]	; (6dd8 <gpio_init+0x310>)
    6d78:	2280      	movs	r2, #128	; 0x80
    6d7a:	0312      	lsls	r2, r2, #12
    6d7c:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[19].bit.PMUXEN=0x00; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6d7e:	4916      	ldr	r1, [pc, #88]	; (6dd8 <gpio_init+0x310>)
    6d80:	2253      	movs	r2, #83	; 0x53
    6d82:	5c8b      	ldrb	r3, [r1, r2]
    6d84:	2001      	movs	r0, #1
    6d86:	4383      	bics	r3, r0
    6d88:	548b      	strb	r3, [r1, r2]

    // PA18 - SPI_RESET (Output)
    PORT->Group[0].OUTSET.reg=PORT_PA18;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6d8a:	4b13      	ldr	r3, [pc, #76]	; (6dd8 <gpio_init+0x310>)
    6d8c:	2280      	movs	r2, #128	; 0x80
    6d8e:	02d2      	lsls	r2, r2, #11
    6d90:	619a      	str	r2, [r3, #24]
    PORT->Group[0].DIRSET.reg=PORT_PA18;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6d92:	4b11      	ldr	r3, [pc, #68]	; (6dd8 <gpio_init+0x310>)
    6d94:	2280      	movs	r2, #128	; 0x80
    6d96:	02d2      	lsls	r2, r2, #11
    6d98:	609a      	str	r2, [r3, #8]
    PORT->Group[0].PINCFG[18].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)*/  
    6d9a:	490f      	ldr	r1, [pc, #60]	; (6dd8 <gpio_init+0x310>)
    6d9c:	2252      	movs	r2, #82	; 0x52
    6d9e:	5c8b      	ldrb	r3, [r1, r2]
    6da0:	2001      	movs	r0, #1
    6da2:	4383      	bics	r3, r0
    6da4:	548b      	strb	r3, [r1, r2]
	PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;  
    6da6:	23c0      	movs	r3, #192	; 0xc0
    6da8:	05db      	lsls	r3, r3, #23
    6daa:	2280      	movs	r2, #128	; 0x80
    6dac:	02d2      	lsls	r2, r2, #11
    6dae:	619a      	str	r2, [r3, #24]
	/*
	//.............................................................................
	// Gerkon ....................................................................
	//.............................................................................*/
	
	PORT->Group[1].DIRCLR.reg=PORT_PB23;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6db0:	4909      	ldr	r1, [pc, #36]	; (6dd8 <gpio_init+0x310>)
    6db2:	2284      	movs	r2, #132	; 0x84
    6db4:	2380      	movs	r3, #128	; 0x80
    6db6:	041b      	lsls	r3, r3, #16
    6db8:	508b      	str	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6dba:	4907      	ldr	r1, [pc, #28]	; (6dd8 <gpio_init+0x310>)
    6dbc:	22d7      	movs	r2, #215	; 0xd7
    6dbe:	5c8b      	ldrb	r3, [r1, r2]
    6dc0:	2002      	movs	r0, #2
    6dc2:	4303      	orrs	r3, r0
    6dc4:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.PMUXEN=0x00;
    6dc6:	4904      	ldr	r1, [pc, #16]	; (6dd8 <gpio_init+0x310>)
    6dc8:	22d7      	movs	r2, #215	; 0xd7
    6dca:	5c8b      	ldrb	r3, [r1, r2]
    6dcc:	2001      	movs	r0, #1
    6dce:	4383      	bics	r3, r0
    6dd0:	548b      	strb	r3, [r1, r2]
}
    6dd2:	46c0      	nop			; (mov r8, r8)
    6dd4:	46bd      	mov	sp, r7
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	41004400 	.word	0x41004400

00006ddc <pin_ctrl>:

DWORD pin_ctrl(BYTE device, BYTE  numb, BYTE mod)
{
    6ddc:	b590      	push	{r4, r7, lr}
    6dde:	b083      	sub	sp, #12
    6de0:	af00      	add	r7, sp, #0
    6de2:	0004      	movs	r4, r0
    6de4:	0008      	movs	r0, r1
    6de6:	0011      	movs	r1, r2
    6de8:	1dfb      	adds	r3, r7, #7
    6dea:	1c22      	adds	r2, r4, #0
    6dec:	701a      	strb	r2, [r3, #0]
    6dee:	1dbb      	adds	r3, r7, #6
    6df0:	1c02      	adds	r2, r0, #0
    6df2:	701a      	strb	r2, [r3, #0]
    6df4:	1d7b      	adds	r3, r7, #5
    6df6:	1c0a      	adds	r2, r1, #0
    6df8:	701a      	strb	r2, [r3, #0]
	switch(device << 8 | numb << 4 | mod)
    6dfa:	1dfb      	adds	r3, r7, #7
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	021a      	lsls	r2, r3, #8
    6e00:	1dbb      	adds	r3, r7, #6
    6e02:	781b      	ldrb	r3, [r3, #0]
    6e04:	011b      	lsls	r3, r3, #4
    6e06:	431a      	orrs	r2, r3
    6e08:	1d7b      	adds	r3, r7, #5
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	4313      	orrs	r3, r2
    6e0e:	2b22      	cmp	r3, #34	; 0x22
    6e10:	d100      	bne.n	6e14 <pin_ctrl+0x38>
    6e12:	e067      	b.n	6ee4 <pin_ctrl+0x108>
    6e14:	dc11      	bgt.n	6e3a <pin_ctrl+0x5e>
    6e16:	2b10      	cmp	r3, #16
    6e18:	d043      	beq.n	6ea2 <pin_ctrl+0xc6>
    6e1a:	dc06      	bgt.n	6e2a <pin_ctrl+0x4e>
    6e1c:	2b01      	cmp	r3, #1
    6e1e:	d032      	beq.n	6e86 <pin_ctrl+0xaa>
    6e20:	2b02      	cmp	r3, #2
    6e22:	d037      	beq.n	6e94 <pin_ctrl+0xb8>
    6e24:	2b00      	cmp	r3, #0
    6e26:	d028      	beq.n	6e7a <pin_ctrl+0x9e>
    6e28:	e09a      	b.n	6f60 <pin_ctrl+0x184>
    6e2a:	2b12      	cmp	r3, #18
    6e2c:	d046      	beq.n	6ebc <pin_ctrl+0xe0>
    6e2e:	db3e      	blt.n	6eae <pin_ctrl+0xd2>
    6e30:	2b20      	cmp	r3, #32
    6e32:	d04a      	beq.n	6eca <pin_ctrl+0xee>
    6e34:	2b21      	cmp	r3, #33	; 0x21
    6e36:	d04e      	beq.n	6ed6 <pin_ctrl+0xfa>
    6e38:	e092      	b.n	6f60 <pin_ctrl+0x184>
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	0052      	lsls	r2, r2, #1
    6e3e:	4293      	cmp	r3, r2
    6e40:	d100      	bne.n	6e44 <pin_ctrl+0x68>
    6e42:	e071      	b.n	6f28 <pin_ctrl+0x14c>
    6e44:	2280      	movs	r2, #128	; 0x80
    6e46:	0052      	lsls	r2, r2, #1
    6e48:	4293      	cmp	r3, r2
    6e4a:	dc06      	bgt.n	6e5a <pin_ctrl+0x7e>
    6e4c:	2b31      	cmp	r3, #49	; 0x31
    6e4e:	d056      	beq.n	6efe <pin_ctrl+0x122>
    6e50:	2b32      	cmp	r3, #50	; 0x32
    6e52:	d05b      	beq.n	6f0c <pin_ctrl+0x130>
    6e54:	2b30      	cmp	r3, #48	; 0x30
    6e56:	d04c      	beq.n	6ef2 <pin_ctrl+0x116>
    6e58:	e082      	b.n	6f60 <pin_ctrl+0x184>
    6e5a:	2281      	movs	r2, #129	; 0x81
    6e5c:	0052      	lsls	r2, r2, #1
    6e5e:	4293      	cmp	r3, r2
    6e60:	d069      	beq.n	6f36 <pin_ctrl+0x15a>
    6e62:	2281      	movs	r2, #129	; 0x81
    6e64:	0052      	lsls	r2, r2, #1
    6e66:	4293      	cmp	r3, r2
    6e68:	db57      	blt.n	6f1a <pin_ctrl+0x13e>
    6e6a:	4a3f      	ldr	r2, [pc, #252]	; (6f68 <pin_ctrl+0x18c>)
    6e6c:	4293      	cmp	r3, r2
    6e6e:	d100      	bne.n	6e72 <pin_ctrl+0x96>
    6e70:	e06f      	b.n	6f52 <pin_ctrl+0x176>
    6e72:	4a3e      	ldr	r2, [pc, #248]	; (6f6c <pin_ctrl+0x190>)
    6e74:	4293      	cmp	r3, r2
    6e76:	d065      	beq.n	6f44 <pin_ctrl+0x168>
    6e78:	e072      	b.n	6f60 <pin_ctrl+0x184>
	{
		//RTS
		case (RTS << 8| PORT485_0 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA15);
    6e7a:	4b3d      	ldr	r3, [pc, #244]	; (6f70 <pin_ctrl+0x194>)
    6e7c:	6a1a      	ldr	r2, [r3, #32]
    6e7e:	2380      	movs	r3, #128	; 0x80
    6e80:	021b      	lsls	r3, r3, #8
    6e82:	4013      	ands	r3, r2
    6e84:	e06c      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA15;return 0;
    6e86:	23c0      	movs	r3, #192	; 0xc0
    6e88:	05db      	lsls	r3, r3, #23
    6e8a:	2280      	movs	r2, #128	; 0x80
    6e8c:	0212      	lsls	r2, r2, #8
    6e8e:	619a      	str	r2, [r3, #24]
    6e90:	2300      	movs	r3, #0
    6e92:	e065      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA15;return 0;
    6e94:	23c0      	movs	r3, #192	; 0xc0
    6e96:	05db      	lsls	r3, r3, #23
    6e98:	2280      	movs	r2, #128	; 0x80
    6e9a:	0212      	lsls	r2, r2, #8
    6e9c:	615a      	str	r2, [r3, #20]
    6e9e:	2300      	movs	r3, #0
    6ea0:	e05e      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA14);
    6ea2:	4b33      	ldr	r3, [pc, #204]	; (6f70 <pin_ctrl+0x194>)
    6ea4:	6a1a      	ldr	r2, [r3, #32]
    6ea6:	2380      	movs	r3, #128	; 0x80
    6ea8:	01db      	lsls	r3, r3, #7
    6eaa:	4013      	ands	r3, r2
    6eac:	e058      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA14;return 0;
    6eae:	23c0      	movs	r3, #192	; 0xc0
    6eb0:	05db      	lsls	r3, r3, #23
    6eb2:	2280      	movs	r2, #128	; 0x80
    6eb4:	01d2      	lsls	r2, r2, #7
    6eb6:	619a      	str	r2, [r3, #24]
    6eb8:	2300      	movs	r3, #0
    6eba:	e051      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA14;return 0;		
    6ebc:	23c0      	movs	r3, #192	; 0xc0
    6ebe:	05db      	lsls	r3, r3, #23
    6ec0:	2280      	movs	r2, #128	; 0x80
    6ec2:	01d2      	lsls	r2, r2, #7
    6ec4:	615a      	str	r2, [r3, #20]
    6ec6:	2300      	movs	r3, #0
    6ec8:	e04a      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA13);
    6eca:	4b29      	ldr	r3, [pc, #164]	; (6f70 <pin_ctrl+0x194>)
    6ecc:	6a1a      	ldr	r2, [r3, #32]
    6ece:	2380      	movs	r3, #128	; 0x80
    6ed0:	019b      	lsls	r3, r3, #6
    6ed2:	4013      	ands	r3, r2
    6ed4:	e044      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA13;return 0;
    6ed6:	23c0      	movs	r3, #192	; 0xc0
    6ed8:	05db      	lsls	r3, r3, #23
    6eda:	2280      	movs	r2, #128	; 0x80
    6edc:	0192      	lsls	r2, r2, #6
    6ede:	619a      	str	r2, [r3, #24]
    6ee0:	2300      	movs	r3, #0
    6ee2:	e03d      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA13;return 0;				
    6ee4:	23c0      	movs	r3, #192	; 0xc0
    6ee6:	05db      	lsls	r3, r3, #23
    6ee8:	2280      	movs	r2, #128	; 0x80
    6eea:	0192      	lsls	r2, r2, #6
    6eec:	615a      	str	r2, [r3, #20]
    6eee:	2300      	movs	r3, #0
    6ef0:	e036      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA12);
    6ef2:	4b1f      	ldr	r3, [pc, #124]	; (6f70 <pin_ctrl+0x194>)
    6ef4:	6a1a      	ldr	r2, [r3, #32]
    6ef6:	2380      	movs	r3, #128	; 0x80
    6ef8:	015b      	lsls	r3, r3, #5
    6efa:	4013      	ands	r3, r2
    6efc:	e030      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA12;return 0;
    6efe:	23c0      	movs	r3, #192	; 0xc0
    6f00:	05db      	lsls	r3, r3, #23
    6f02:	2280      	movs	r2, #128	; 0x80
    6f04:	0152      	lsls	r2, r2, #5
    6f06:	619a      	str	r2, [r3, #24]
    6f08:	2300      	movs	r3, #0
    6f0a:	e029      	b.n	6f60 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA12;return 0;
    6f0c:	23c0      	movs	r3, #192	; 0xc0
    6f0e:	05db      	lsls	r3, r3, #23
    6f10:	2280      	movs	r2, #128	; 0x80
    6f12:	0152      	lsls	r2, r2, #5
    6f14:	615a      	str	r2, [r3, #20]
    6f16:	2300      	movs	r3, #0
    6f18:	e022      	b.n	6f60 <pin_ctrl+0x184>

		//LED TX
		case (LED << 8| PWR << 4| ON):		PORT_IOBUS->Group[1].OUTCLR.reg=PORT_PB03;return 0; 
    6f1a:	23c0      	movs	r3, #192	; 0xc0
    6f1c:	05db      	lsls	r3, r3, #23
    6f1e:	2294      	movs	r2, #148	; 0x94
    6f20:	2108      	movs	r1, #8
    6f22:	5099      	str	r1, [r3, r2]
    6f24:	2300      	movs	r3, #0
    6f26:	e01b      	b.n	6f60 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| OFF):		PORT_IOBUS->Group[1].OUTSET.reg=PORT_PB03;return 0;
    6f28:	23c0      	movs	r3, #192	; 0xc0
    6f2a:	05db      	lsls	r3, r3, #23
    6f2c:	2298      	movs	r2, #152	; 0x98
    6f2e:	2108      	movs	r1, #8
    6f30:	5099      	str	r1, [r3, r2]
    6f32:	2300      	movs	r3, #0
    6f34:	e014      	b.n	6f60 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| TGL):		PORT_IOBUS->Group[1].OUTTGL.reg=PORT_PB03;return 0;
    6f36:	23c0      	movs	r3, #192	; 0xc0
    6f38:	05db      	lsls	r3, r3, #23
    6f3a:	229c      	movs	r2, #156	; 0x9c
    6f3c:	2108      	movs	r1, #8
    6f3e:	5099      	str	r1, [r3, r2]
    6f40:	2300      	movs	r3, #0
    6f42:	e00d      	b.n	6f60 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| CLR):     PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA18;return 0;
    6f44:	23c0      	movs	r3, #192	; 0xc0
    6f46:	05db      	lsls	r3, r3, #23
    6f48:	2280      	movs	r2, #128	; 0x80
    6f4a:	02d2      	lsls	r2, r2, #11
    6f4c:	615a      	str	r2, [r3, #20]
    6f4e:	2300      	movs	r3, #0
    6f50:	e006      	b.n	6f60 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| SET):     PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;return 0;
    6f52:	23c0      	movs	r3, #192	; 0xc0
    6f54:	05db      	lsls	r3, r3, #23
    6f56:	2280      	movs	r2, #128	; 0x80
    6f58:	02d2      	lsls	r2, r2, #11
    6f5a:	619a      	str	r2, [r3, #24]
    6f5c:	2300      	movs	r3, #0
    6f5e:	e7ff      	b.n	6f60 <pin_ctrl+0x184>
		
	}
}
    6f60:	0018      	movs	r0, r3
    6f62:	46bd      	mov	sp, r7
    6f64:	b003      	add	sp, #12
    6f66:	bd90      	pop	{r4, r7, pc}
    6f68:	00000201 	.word	0x00000201
    6f6c:	00000202 	.word	0x00000202
    6f70:	41004400 	.word	0x41004400

00006f74 <check_gerkon>:

void check_gerkon(void)
{
    6f74:	b580      	push	{r7, lr}
    6f76:	af00      	add	r7, sp, #0
	static BYTE gerkon_st = 0;
	
	if (PORT->Group[1].IN.reg & PORT_PB23)	{if(PORT->Group[1].OUTSET.reg & PORT_PB03){pin_ctrl(LED,PWR,ON);} gerkon_st = 0; return;}
    6f78:	4a1b      	ldr	r2, [pc, #108]	; (6fe8 <check_gerkon+0x74>)
    6f7a:	23a0      	movs	r3, #160	; 0xa0
    6f7c:	58d2      	ldr	r2, [r2, r3]
    6f7e:	2380      	movs	r3, #128	; 0x80
    6f80:	041b      	lsls	r3, r3, #16
    6f82:	4013      	ands	r3, r2
    6f84:	d00e      	beq.n	6fa4 <check_gerkon+0x30>
    6f86:	4a18      	ldr	r2, [pc, #96]	; (6fe8 <check_gerkon+0x74>)
    6f88:	2398      	movs	r3, #152	; 0x98
    6f8a:	58d3      	ldr	r3, [r2, r3]
    6f8c:	2208      	movs	r2, #8
    6f8e:	4013      	ands	r3, r2
    6f90:	d004      	beq.n	6f9c <check_gerkon+0x28>
    6f92:	2201      	movs	r2, #1
    6f94:	2100      	movs	r1, #0
    6f96:	2001      	movs	r0, #1
    6f98:	f7ff ff20 	bl	6ddc <pin_ctrl>
    6f9c:	4b13      	ldr	r3, [pc, #76]	; (6fec <check_gerkon+0x78>)
    6f9e:	2200      	movs	r2, #0
    6fa0:	701a      	strb	r2, [r3, #0]
    6fa2:	e01e      	b.n	6fe2 <check_gerkon+0x6e>
	
	switch (gerkon_st)
    6fa4:	4b11      	ldr	r3, [pc, #68]	; (6fec <check_gerkon+0x78>)
    6fa6:	781b      	ldrb	r3, [r3, #0]
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d002      	beq.n	6fb2 <check_gerkon+0x3e>
    6fac:	2b01      	cmp	r3, #1
    6fae:	d00c      	beq.n	6fca <check_gerkon+0x56>
    6fb0:	e017      	b.n	6fe2 <check_gerkon+0x6e>
	{
		case 0:
			pin_ctrl(LED,PWR,OFF);
    6fb2:	2200      	movs	r2, #0
    6fb4:	2100      	movs	r1, #0
    6fb6:	2001      	movs	r0, #1
    6fb8:	f7ff ff10 	bl	6ddc <pin_ctrl>
			ger_wait = 10;
    6fbc:	4b0c      	ldr	r3, [pc, #48]	; (6ff0 <check_gerkon+0x7c>)
    6fbe:	220a      	movs	r2, #10
    6fc0:	601a      	str	r2, [r3, #0]
			gerkon_st = 1;
    6fc2:	4b0a      	ldr	r3, [pc, #40]	; (6fec <check_gerkon+0x78>)
    6fc4:	2201      	movs	r2, #1
    6fc6:	701a      	strb	r2, [r3, #0]
		break;
    6fc8:	e00b      	b.n	6fe2 <check_gerkon+0x6e>
		case 1:
			if (ger_wait)	{return;}
    6fca:	4b09      	ldr	r3, [pc, #36]	; (6ff0 <check_gerkon+0x7c>)
    6fcc:	681b      	ldr	r3, [r3, #0]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d106      	bne.n	6fe0 <check_gerkon+0x6c>
			reset = 1; 
    6fd2:	4b08      	ldr	r3, [pc, #32]	; (6ff4 <check_gerkon+0x80>)
    6fd4:	2201      	movs	r2, #1
    6fd6:	801a      	strh	r2, [r3, #0]
			cfg_default(); 
    6fd8:	4b07      	ldr	r3, [pc, #28]	; (6ff8 <check_gerkon+0x84>)
    6fda:	4798      	blx	r3
		break;
    6fdc:	46c0      	nop			; (mov r8, r8)
    6fde:	e000      	b.n	6fe2 <check_gerkon+0x6e>
			if (ger_wait)	{return;}
    6fe0:	46c0      	nop			; (mov r8, r8)
	}
    6fe2:	46bd      	mov	sp, r7
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	41004400 	.word	0x41004400
    6fec:	2000045b 	.word	0x2000045b
    6ff0:	20000474 	.word	0x20000474
    6ff4:	20002548 	.word	0x20002548
    6ff8:	0000ac91 	.word	0x0000ac91

00006ffc <iap_process>:

DWORD iap_key=0;

WORD iap_process(BYTE *buf, WORD size)
//--------------------------------------------------------------------------
{
    6ffc:	b580      	push	{r7, lr}
    6ffe:	b084      	sub	sp, #16
    7000:	af00      	add	r7, sp, #0
    7002:	6078      	str	r0, [r7, #4]
    7004:	000a      	movs	r2, r1
    7006:	1cbb      	adds	r3, r7, #2
    7008:	801a      	strh	r2, [r3, #0]
	DWORD page;
	WORD  wn = 0;
    700a:	230a      	movs	r3, #10
    700c:	18fb      	adds	r3, r7, r3
    700e:	2200      	movs	r2, #0
    7010:	801a      	strh	r2, [r3, #0]
	memcpy(iap_buf,buf,size);
    7012:	1cbb      	adds	r3, r7, #2
    7014:	881a      	ldrh	r2, [r3, #0]
    7016:	6879      	ldr	r1, [r7, #4]
    7018:	4b8c      	ldr	r3, [pc, #560]	; (724c <iap_process+0x250>)
    701a:	0018      	movs	r0, r3
    701c:	4b8c      	ldr	r3, [pc, #560]	; (7250 <iap_process+0x254>)
    701e:	4798      	blx	r3
	static BYTE flwr=0;
	
	switch(iap_buf[wn])
    7020:	230a      	movs	r3, #10
    7022:	18fb      	adds	r3, r7, r3
    7024:	881b      	ldrh	r3, [r3, #0]
    7026:	4a89      	ldr	r2, [pc, #548]	; (724c <iap_process+0x250>)
    7028:	5cd3      	ldrb	r3, [r2, r3]
    702a:	2b03      	cmp	r3, #3
    702c:	d040      	beq.n	70b0 <iap_process+0xb4>
    702e:	dc02      	bgt.n	7036 <iap_process+0x3a>
    7030:	2b00      	cmp	r3, #0
    7032:	d007      	beq.n	7044 <iap_process+0x48>
    7034:	e0f7      	b.n	7226 <iap_process+0x22a>
    7036:	2b05      	cmp	r3, #5
    7038:	d100      	bne.n	703c <iap_process+0x40>
    703a:	e0a2      	b.n	7182 <iap_process+0x186>
    703c:	2b07      	cmp	r3, #7
    703e:	d100      	bne.n	7042 <iap_process+0x46>
    7040:	e0ca      	b.n	71d8 <iap_process+0x1dc>
    7042:	e0f0      	b.n	7226 <iap_process+0x22a>
	{
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    7044:	23c0      	movs	r3, #192	; 0xc0
    7046:	025b      	lsls	r3, r3, #9
    7048:	60fb      	str	r3, [r7, #12]
    704a:	e01f      	b.n	708c <iap_process+0x90>
											{
												wdt_reset();
    704c:	4b81      	ldr	r3, [pc, #516]	; (7254 <iap_process+0x258>)
    704e:	799b      	ldrb	r3, [r3, #6]
    7050:	07db      	lsls	r3, r3, #31
    7052:	0fdb      	lsrs	r3, r3, #31
    7054:	b2db      	uxtb	r3, r3
    7056:	2b01      	cmp	r3, #1
    7058:	d107      	bne.n	706a <iap_process+0x6e>
    705a:	4a7e      	ldr	r2, [pc, #504]	; (7254 <iap_process+0x258>)
    705c:	7993      	ldrb	r3, [r2, #6]
    705e:	2101      	movs	r1, #1
    7060:	430b      	orrs	r3, r1
    7062:	7193      	strb	r3, [r2, #6]
    7064:	4b7b      	ldr	r3, [pc, #492]	; (7254 <iap_process+0x258>)
    7066:	22a5      	movs	r2, #165	; 0xa5
    7068:	721a      	strb	r2, [r3, #8]
												if(!flash_empty(page,256)){flash_erase_page(page);}
    706a:	2380      	movs	r3, #128	; 0x80
    706c:	005a      	lsls	r2, r3, #1
    706e:	68fb      	ldr	r3, [r7, #12]
    7070:	0011      	movs	r1, r2
    7072:	0018      	movs	r0, r3
    7074:	4b78      	ldr	r3, [pc, #480]	; (7258 <iap_process+0x25c>)
    7076:	4798      	blx	r3
    7078:	1e03      	subs	r3, r0, #0
    707a:	d103      	bne.n	7084 <iap_process+0x88>
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	0018      	movs	r0, r3
    7080:	4b76      	ldr	r3, [pc, #472]	; (725c <iap_process+0x260>)
    7082:	4798      	blx	r3
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	3301      	adds	r3, #1
    7088:	33ff      	adds	r3, #255	; 0xff
    708a:	60fb      	str	r3, [r7, #12]
    708c:	68fb      	ldr	r3, [r7, #12]
    708e:	4a74      	ldr	r2, [pc, #464]	; (7260 <iap_process+0x264>)
    7090:	4293      	cmp	r3, r2
    7092:	d9db      	bls.n	704c <iap_process+0x50>
											}
											iap_buf[wn] = CM2_A_BOOTLOADER_READY;		wn += sizeof(BYTE );
    7094:	230a      	movs	r3, #10
    7096:	18fb      	adds	r3, r7, r3
    7098:	881b      	ldrh	r3, [r3, #0]
    709a:	4a6c      	ldr	r2, [pc, #432]	; (724c <iap_process+0x250>)
    709c:	2102      	movs	r1, #2
    709e:	54d1      	strb	r1, [r2, r3]
    70a0:	230a      	movs	r3, #10
    70a2:	18fb      	adds	r3, r7, r3
    70a4:	220a      	movs	r2, #10
    70a6:	18ba      	adds	r2, r7, r2
    70a8:	8812      	ldrh	r2, [r2, #0]
    70aa:	3201      	adds	r2, #1
    70ac:	801a      	strh	r2, [r3, #0]
		
	break;
    70ae:	e0ba      	b.n	7226 <iap_process+0x22a>
	case CM2_R_LOAD_DATA_PAGE   :			iap_buf[wn] = CM2_A_DATA_PAGE_LOAD;			wn += sizeof(BYTE );
    70b0:	230a      	movs	r3, #10
    70b2:	18fb      	adds	r3, r7, r3
    70b4:	881b      	ldrh	r3, [r3, #0]
    70b6:	4a65      	ldr	r2, [pc, #404]	; (724c <iap_process+0x250>)
    70b8:	2104      	movs	r1, #4
    70ba:	54d1      	strb	r1, [r2, r3]
    70bc:	230a      	movs	r3, #10
    70be:	18fb      	adds	r3, r7, r3
    70c0:	220a      	movs	r2, #10
    70c2:	18ba      	adds	r2, r7, r2
    70c4:	8812      	ldrh	r2, [r2, #0]
    70c6:	3201      	adds	r2, #1
    70c8:	801a      	strh	r2, [r3, #0]
											iap_size  =iap_buf[wn] | (iap_buf[wn+1]<<8);		wn += sizeof(WORD );
    70ca:	230a      	movs	r3, #10
    70cc:	18fb      	adds	r3, r7, r3
    70ce:	881b      	ldrh	r3, [r3, #0]
    70d0:	4a5e      	ldr	r2, [pc, #376]	; (724c <iap_process+0x250>)
    70d2:	5cd3      	ldrb	r3, [r2, r3]
    70d4:	b21a      	sxth	r2, r3
    70d6:	230a      	movs	r3, #10
    70d8:	18fb      	adds	r3, r7, r3
    70da:	881b      	ldrh	r3, [r3, #0]
    70dc:	3301      	adds	r3, #1
    70de:	495b      	ldr	r1, [pc, #364]	; (724c <iap_process+0x250>)
    70e0:	5ccb      	ldrb	r3, [r1, r3]
    70e2:	021b      	lsls	r3, r3, #8
    70e4:	b21b      	sxth	r3, r3
    70e6:	4313      	orrs	r3, r2
    70e8:	b21b      	sxth	r3, r3
    70ea:	b29a      	uxth	r2, r3
    70ec:	4b5d      	ldr	r3, [pc, #372]	; (7264 <iap_process+0x268>)
    70ee:	801a      	strh	r2, [r3, #0]
    70f0:	230a      	movs	r3, #10
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	220a      	movs	r2, #10
    70f6:	18ba      	adds	r2, r7, r2
    70f8:	8812      	ldrh	r2, [r2, #0]
    70fa:	3202      	adds	r2, #2
    70fc:	801a      	strh	r2, [r3, #0]
											iap_addr  =iap_buf[wn] | (iap_buf[wn+1]<<8) | (iap_buf[wn+2]<<16) | (iap_buf[wn+3]<<24);
    70fe:	230a      	movs	r3, #10
    7100:	18fb      	adds	r3, r7, r3
    7102:	881b      	ldrh	r3, [r3, #0]
    7104:	4a51      	ldr	r2, [pc, #324]	; (724c <iap_process+0x250>)
    7106:	5cd3      	ldrb	r3, [r2, r3]
    7108:	0019      	movs	r1, r3
    710a:	230a      	movs	r3, #10
    710c:	18fb      	adds	r3, r7, r3
    710e:	881b      	ldrh	r3, [r3, #0]
    7110:	3301      	adds	r3, #1
    7112:	4a4e      	ldr	r2, [pc, #312]	; (724c <iap_process+0x250>)
    7114:	5cd3      	ldrb	r3, [r2, r3]
    7116:	021b      	lsls	r3, r3, #8
    7118:	000a      	movs	r2, r1
    711a:	431a      	orrs	r2, r3
    711c:	230a      	movs	r3, #10
    711e:	18fb      	adds	r3, r7, r3
    7120:	881b      	ldrh	r3, [r3, #0]
    7122:	3302      	adds	r3, #2
    7124:	4949      	ldr	r1, [pc, #292]	; (724c <iap_process+0x250>)
    7126:	5ccb      	ldrb	r3, [r1, r3]
    7128:	041b      	lsls	r3, r3, #16
    712a:	431a      	orrs	r2, r3
    712c:	230a      	movs	r3, #10
    712e:	18fb      	adds	r3, r7, r3
    7130:	881b      	ldrh	r3, [r3, #0]
    7132:	3303      	adds	r3, #3
    7134:	4945      	ldr	r1, [pc, #276]	; (724c <iap_process+0x250>)
    7136:	5ccb      	ldrb	r3, [r1, r3]
    7138:	061b      	lsls	r3, r3, #24
    713a:	4313      	orrs	r3, r2
    713c:	001a      	movs	r2, r3
    713e:	4b4a      	ldr	r3, [pc, #296]	; (7268 <iap_process+0x26c>)
    7140:	601a      	str	r2, [r3, #0]
											wn += sizeof(DWORD);
    7142:	230a      	movs	r3, #10
    7144:	18fb      	adds	r3, r7, r3
    7146:	220a      	movs	r2, #10
    7148:	18ba      	adds	r2, r7, r2
    714a:	8812      	ldrh	r2, [r2, #0]
    714c:	3204      	adds	r2, #4
    714e:	801a      	strh	r2, [r3, #0]
											
											memcpy(iap_page,iap_buf+wn,iap_size);		wn += iap_size;
    7150:	230a      	movs	r3, #10
    7152:	18fb      	adds	r3, r7, r3
    7154:	881a      	ldrh	r2, [r3, #0]
    7156:	4b3d      	ldr	r3, [pc, #244]	; (724c <iap_process+0x250>)
    7158:	18d1      	adds	r1, r2, r3
    715a:	4b42      	ldr	r3, [pc, #264]	; (7264 <iap_process+0x268>)
    715c:	881b      	ldrh	r3, [r3, #0]
    715e:	001a      	movs	r2, r3
    7160:	4b42      	ldr	r3, [pc, #264]	; (726c <iap_process+0x270>)
    7162:	0018      	movs	r0, r3
    7164:	4b3a      	ldr	r3, [pc, #232]	; (7250 <iap_process+0x254>)
    7166:	4798      	blx	r3
    7168:	4b3e      	ldr	r3, [pc, #248]	; (7264 <iap_process+0x268>)
    716a:	8819      	ldrh	r1, [r3, #0]
    716c:	230a      	movs	r3, #10
    716e:	18fb      	adds	r3, r7, r3
    7170:	220a      	movs	r2, #10
    7172:	18ba      	adds	r2, r7, r2
    7174:	8812      	ldrh	r2, [r2, #0]
    7176:	188a      	adds	r2, r1, r2
    7178:	801a      	strh	r2, [r3, #0]
											
											flwr=1;
    717a:	4b3d      	ldr	r3, [pc, #244]	; (7270 <iap_process+0x274>)
    717c:	2201      	movs	r2, #1
    717e:	701a      	strb	r2, [r3, #0]
	
	break;
    7180:	e051      	b.n	7226 <iap_process+0x22a>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    7182:	4b39      	ldr	r3, [pc, #228]	; (7268 <iap_process+0x26c>)
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	4a3b      	ldr	r2, [pc, #236]	; (7274 <iap_process+0x278>)
    7188:	4293      	cmp	r3, r2
    718a:	d958      	bls.n	723e <iap_process+0x242>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    718c:	4b36      	ldr	r3, [pc, #216]	; (7268 <iap_process+0x26c>)
    718e:	681a      	ldr	r2, [r3, #0]
    7190:	23c0      	movs	r3, #192	; 0xc0
    7192:	025b      	lsls	r3, r3, #9
    7194:	429a      	cmp	r2, r3
    7196:	d854      	bhi.n	7242 <iap_process+0x246>
											
											if(flwr)
    7198:	4b35      	ldr	r3, [pc, #212]	; (7270 <iap_process+0x274>)
    719a:	781b      	ldrb	r3, [r3, #0]
    719c:	2b00      	cmp	r3, #0
    719e:	d00d      	beq.n	71bc <iap_process+0x1c0>
											{
												flash_write(iap_addr+IAP_SIZE,iap_page,iap_size);
    71a0:	4b31      	ldr	r3, [pc, #196]	; (7268 <iap_process+0x26c>)
    71a2:	681b      	ldr	r3, [r3, #0]
    71a4:	22a0      	movs	r2, #160	; 0xa0
    71a6:	0252      	lsls	r2, r2, #9
    71a8:	1898      	adds	r0, r3, r2
    71aa:	4b2e      	ldr	r3, [pc, #184]	; (7264 <iap_process+0x268>)
    71ac:	881a      	ldrh	r2, [r3, #0]
    71ae:	4b2f      	ldr	r3, [pc, #188]	; (726c <iap_process+0x270>)
    71b0:	0019      	movs	r1, r3
    71b2:	4b31      	ldr	r3, [pc, #196]	; (7278 <iap_process+0x27c>)
    71b4:	4798      	blx	r3
												flwr=0;
    71b6:	4b2e      	ldr	r3, [pc, #184]	; (7270 <iap_process+0x274>)
    71b8:	2200      	movs	r2, #0
    71ba:	701a      	strb	r2, [r3, #0]
											}
											iap_buf[wn] = CM2_A_DATA_PAGE_UPDATE;		wn += sizeof(BYTE );
    71bc:	230a      	movs	r3, #10
    71be:	18fb      	adds	r3, r7, r3
    71c0:	881b      	ldrh	r3, [r3, #0]
    71c2:	4a22      	ldr	r2, [pc, #136]	; (724c <iap_process+0x250>)
    71c4:	2106      	movs	r1, #6
    71c6:	54d1      	strb	r1, [r2, r3]
    71c8:	230a      	movs	r3, #10
    71ca:	18fb      	adds	r3, r7, r3
    71cc:	220a      	movs	r2, #10
    71ce:	18ba      	adds	r2, r7, r2
    71d0:	8812      	ldrh	r2, [r2, #0]
    71d2:	3201      	adds	r2, #1
    71d4:	801a      	strh	r2, [r3, #0]
	break;
    71d6:	e026      	b.n	7226 <iap_process+0x22a>
	case CM2_R_STOP_BOOTLOADER  :  			iap_key = IAP_VAL;
    71d8:	4b28      	ldr	r3, [pc, #160]	; (727c <iap_process+0x280>)
    71da:	4a29      	ldr	r2, [pc, #164]	; (7280 <iap_process+0x284>)
    71dc:	601a      	str	r2, [r3, #0]
											if(!flash_empty(IAP_KEY,256)){flash_erase_page(IAP_KEY);}
    71de:	2380      	movs	r3, #128	; 0x80
    71e0:	005b      	lsls	r3, r3, #1
    71e2:	4a28      	ldr	r2, [pc, #160]	; (7284 <iap_process+0x288>)
    71e4:	0019      	movs	r1, r3
    71e6:	0010      	movs	r0, r2
    71e8:	4b1b      	ldr	r3, [pc, #108]	; (7258 <iap_process+0x25c>)
    71ea:	4798      	blx	r3
    71ec:	1e03      	subs	r3, r0, #0
    71ee:	d103      	bne.n	71f8 <iap_process+0x1fc>
    71f0:	4b24      	ldr	r3, [pc, #144]	; (7284 <iap_process+0x288>)
    71f2:	0018      	movs	r0, r3
    71f4:	4b19      	ldr	r3, [pc, #100]	; (725c <iap_process+0x260>)
    71f6:	4798      	blx	r3
											flash_write(IAP_KEY,&iap_key,4);
    71f8:	4b20      	ldr	r3, [pc, #128]	; (727c <iap_process+0x280>)
    71fa:	4822      	ldr	r0, [pc, #136]	; (7284 <iap_process+0x288>)
    71fc:	2204      	movs	r2, #4
    71fe:	0019      	movs	r1, r3
    7200:	4b1d      	ldr	r3, [pc, #116]	; (7278 <iap_process+0x27c>)
    7202:	4798      	blx	r3
											
											iap_buf[wn] = CM2_A_BOOTLOADER_STOP;		wn += sizeof(BYTE );
    7204:	230a      	movs	r3, #10
    7206:	18fb      	adds	r3, r7, r3
    7208:	881b      	ldrh	r3, [r3, #0]
    720a:	4a10      	ldr	r2, [pc, #64]	; (724c <iap_process+0x250>)
    720c:	2108      	movs	r1, #8
    720e:	54d1      	strb	r1, [r2, r3]
    7210:	230a      	movs	r3, #10
    7212:	18fb      	adds	r3, r7, r3
    7214:	220a      	movs	r2, #10
    7216:	18ba      	adds	r2, r7, r2
    7218:	8812      	ldrh	r2, [r2, #0]
    721a:	3201      	adds	r2, #1
    721c:	801a      	strh	r2, [r3, #0]
											reset = TRUE;
    721e:	4b1a      	ldr	r3, [pc, #104]	; (7288 <iap_process+0x28c>)
    7220:	2201      	movs	r2, #1
    7222:	801a      	strh	r2, [r3, #0]
	break;
    7224:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(buf,iap_buf,wn);
    7226:	230a      	movs	r3, #10
    7228:	18fb      	adds	r3, r7, r3
    722a:	881a      	ldrh	r2, [r3, #0]
    722c:	4907      	ldr	r1, [pc, #28]	; (724c <iap_process+0x250>)
    722e:	687b      	ldr	r3, [r7, #4]
    7230:	0018      	movs	r0, r3
    7232:	4b07      	ldr	r3, [pc, #28]	; (7250 <iap_process+0x254>)
    7234:	4798      	blx	r3
	return	(wn);
    7236:	230a      	movs	r3, #10
    7238:	18fb      	adds	r3, r7, r3
    723a:	881b      	ldrh	r3, [r3, #0]
    723c:	e002      	b.n	7244 <iap_process+0x248>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	e000      	b.n	7244 <iap_process+0x248>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    7242:	46c0      	nop			; (mov r8, r8)
}
    7244:	0018      	movs	r0, r3
    7246:	46bd      	mov	sp, r7
    7248:	b004      	add	sp, #16
    724a:	bd80      	pop	{r7, pc}
    724c:	20002448 	.word	0x20002448
    7250:	0000c8b9 	.word	0x0000c8b9
    7254:	40001000 	.word	0x40001000
    7258:	00006745 	.word	0x00006745
    725c:	0000678b 	.word	0x0000678b
    7260:	0002bfff 	.word	0x0002bfff
    7264:	20000460 	.word	0x20000460
    7268:	2000045c 	.word	0x2000045c
    726c:	20002348 	.word	0x20002348
    7270:	20000468 	.word	0x20000468
    7274:	00003fff 	.word	0x00003fff
    7278:	000067d9 	.word	0x000067d9
    727c:	20000464 	.word	0x20000464
    7280:	43ff56ac 	.word	0x43ff56ac
    7284:	0003f200 	.word	0x0003f200
    7288:	20002548 	.word	0x20002548

0000728c <main>:
WORD reset;
ACCOUNTS accnts;
DWORD crc_fw;

int main(void)
{
    728c:	b5b0      	push	{r4, r5, r7, lr}
    728e:	af00      	add	r7, sp, #0
	SCB->VTOR=0x00004000;
    7290:	4b47      	ldr	r3, [pc, #284]	; (73b0 <main+0x124>)
    7292:	2280      	movs	r2, #128	; 0x80
    7294:	01d2      	lsls	r2, r2, #7
    7296:	609a      	str	r2, [r3, #8]
	
	if (PROC_HERZ == (8 * MHz))		{sys_clock_init_USE_OSC8M();}   //8MHz
	else							{sys_clock_init_USE_DFLL48M();}	//48MHz
    7298:	4b46      	ldr	r3, [pc, #280]	; (73b4 <main+0x128>)
    729a:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    729c:	b662      	cpsie	i
		
	__enable_irq();
	wdt_reset();
    729e:	4b46      	ldr	r3, [pc, #280]	; (73b8 <main+0x12c>)
    72a0:	799b      	ldrb	r3, [r3, #6]
    72a2:	07db      	lsls	r3, r3, #31
    72a4:	0fdb      	lsrs	r3, r3, #31
    72a6:	b2db      	uxtb	r3, r3
    72a8:	2b01      	cmp	r3, #1
    72aa:	d107      	bne.n	72bc <main+0x30>
    72ac:	4a42      	ldr	r2, [pc, #264]	; (73b8 <main+0x12c>)
    72ae:	7993      	ldrb	r3, [r2, #6]
    72b0:	2101      	movs	r1, #1
    72b2:	430b      	orrs	r3, r1
    72b4:	7193      	strb	r3, [r2, #6]
    72b6:	4b40      	ldr	r3, [pc, #256]	; (73b8 <main+0x12c>)
    72b8:	22a5      	movs	r2, #165	; 0xa5
    72ba:	721a      	strb	r2, [r3, #8]
	wdt_start();	
    72bc:	4b3e      	ldr	r3, [pc, #248]	; (73b8 <main+0x12c>)
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	079b      	lsls	r3, r3, #30
    72c2:	0fdb      	lsrs	r3, r3, #31
    72c4:	b2db      	uxtb	r3, r3
    72c6:	2b00      	cmp	r3, #0
    72c8:	d119      	bne.n	72fe <main+0x72>
    72ca:	4a3b      	ldr	r2, [pc, #236]	; (73b8 <main+0x12c>)
    72cc:	7853      	ldrb	r3, [r2, #1]
    72ce:	210f      	movs	r1, #15
    72d0:	438b      	bics	r3, r1
    72d2:	1c19      	adds	r1, r3, #0
    72d4:	230b      	movs	r3, #11
    72d6:	430b      	orrs	r3, r1
    72d8:	7053      	strb	r3, [r2, #1]
    72da:	4a37      	ldr	r2, [pc, #220]	; (73b8 <main+0x12c>)
    72dc:	7893      	ldrb	r3, [r2, #2]
    72de:	210f      	movs	r1, #15
    72e0:	438b      	bics	r3, r1
    72e2:	1c19      	adds	r1, r3, #0
    72e4:	230a      	movs	r3, #10
    72e6:	430b      	orrs	r3, r1
    72e8:	7093      	strb	r3, [r2, #2]
    72ea:	4a33      	ldr	r2, [pc, #204]	; (73b8 <main+0x12c>)
    72ec:	7953      	ldrb	r3, [r2, #5]
    72ee:	2101      	movs	r1, #1
    72f0:	430b      	orrs	r3, r1
    72f2:	7153      	strb	r3, [r2, #5]
    72f4:	4a30      	ldr	r2, [pc, #192]	; (73b8 <main+0x12c>)
    72f6:	7813      	ldrb	r3, [r2, #0]
    72f8:	2102      	movs	r1, #2
    72fa:	430b      	orrs	r3, r1
    72fc:	7013      	strb	r3, [r2, #0]
			
	cfg_init  ();
    72fe:	4b2f      	ldr	r3, [pc, #188]	; (73bc <main+0x130>)
    7300:	4798      	blx	r3
	if(cfg_2_read() == CFG_ERR) {err_dword.cfg_2_init = 1; }
    7302:	4b2f      	ldr	r3, [pc, #188]	; (73c0 <main+0x134>)
    7304:	4798      	blx	r3
    7306:	1e03      	subs	r3, r0, #0
    7308:	d104      	bne.n	7314 <main+0x88>
    730a:	4b2e      	ldr	r3, [pc, #184]	; (73c4 <main+0x138>)
    730c:	781a      	ldrb	r2, [r3, #0]
    730e:	2102      	movs	r1, #2
    7310:	430a      	orrs	r2, r1
    7312:	701a      	strb	r2, [r3, #0]
	if(cfg_read()   == CFG_ERR)	{err_dword.cfg_1_init = 1; cfg_default();}
    7314:	4b2c      	ldr	r3, [pc, #176]	; (73c8 <main+0x13c>)
    7316:	4798      	blx	r3
    7318:	1e03      	subs	r3, r0, #0
    731a:	d106      	bne.n	732a <main+0x9e>
    731c:	4b29      	ldr	r3, [pc, #164]	; (73c4 <main+0x138>)
    731e:	781a      	ldrb	r2, [r3, #0]
    7320:	2101      	movs	r1, #1
    7322:	430a      	orrs	r2, r1
    7324:	701a      	strb	r2, [r3, #0]
    7326:	4b29      	ldr	r3, [pc, #164]	; (73cc <main+0x140>)
    7328:	4798      	blx	r3
	cfg_check();
    732a:	4b29      	ldr	r3, [pc, #164]	; (73d0 <main+0x144>)
    732c:	4798      	blx	r3

	gpio_init();
    732e:	4b29      	ldr	r3, [pc, #164]	; (73d4 <main+0x148>)
    7330:	4798      	blx	r3
	TC3_init();
    7332:	4b29      	ldr	r3, [pc, #164]	; (73d8 <main+0x14c>)
    7334:	4798      	blx	r3
	spi_init();
    7336:	4b29      	ldr	r3, [pc, #164]	; (73dc <main+0x150>)
    7338:	4798      	blx	r3
	usart_init();
    733a:	4b29      	ldr	r3, [pc, #164]	; (73e0 <main+0x154>)
    733c:	4798      	blx	r3
	eth_init();
    733e:	4b29      	ldr	r3, [pc, #164]	; (73e4 <main+0x158>)
    7340:	4798      	blx	r3
	
	acc(READ);
    7342:	2000      	movs	r0, #0
    7344:	4b28      	ldr	r3, [pc, #160]	; (73e8 <main+0x15c>)
    7346:	4798      	blx	r3
	log_ch();
    7348:	4b28      	ldr	r3, [pc, #160]	; (73ec <main+0x160>)
    734a:	4798      	blx	r3
	log_safe(0, 0x00000000, 0x00000000, START);
    734c:	2304      	movs	r3, #4
    734e:	2200      	movs	r2, #0
    7350:	2100      	movs	r1, #0
    7352:	2000      	movs	r0, #0
    7354:	4c26      	ldr	r4, [pc, #152]	; (73f0 <main+0x164>)
    7356:	47a0      	blx	r4
	
	crc_fw = crc32(IAP_ADDR, IAP_SIZE);
    7358:	23a0      	movs	r3, #160	; 0xa0
    735a:	025a      	lsls	r2, r3, #9
    735c:	2380      	movs	r3, #128	; 0x80
    735e:	01db      	lsls	r3, r3, #7
    7360:	0011      	movs	r1, r2
    7362:	0018      	movs	r0, r3
    7364:	4b23      	ldr	r3, [pc, #140]	; (73f4 <main+0x168>)
    7366:	4798      	blx	r3
    7368:	0003      	movs	r3, r0
    736a:	001a      	movs	r2, r3
    736c:	4b22      	ldr	r3, [pc, #136]	; (73f8 <main+0x16c>)
    736e:	601a      	str	r2, [r3, #0]
	
	pin_ctrl(LED,PWR,ON);
    7370:	2201      	movs	r2, #1
    7372:	2100      	movs	r1, #0
    7374:	2001      	movs	r0, #1
    7376:	4b21      	ldr	r3, [pc, #132]	; (73fc <main+0x170>)
    7378:	4798      	blx	r3
					
	while (1)
	{
	    if(reset == NULL) {wdt_reset();}
    737a:	4b21      	ldr	r3, [pc, #132]	; (7400 <main+0x174>)
    737c:	881b      	ldrh	r3, [r3, #0]
    737e:	2b00      	cmp	r3, #0
    7380:	d10e      	bne.n	73a0 <main+0x114>
    7382:	4b0d      	ldr	r3, [pc, #52]	; (73b8 <main+0x12c>)
    7384:	799b      	ldrb	r3, [r3, #6]
    7386:	07db      	lsls	r3, r3, #31
    7388:	0fdb      	lsrs	r3, r3, #31
    738a:	b2db      	uxtb	r3, r3
    738c:	2b01      	cmp	r3, #1
    738e:	d107      	bne.n	73a0 <main+0x114>
    7390:	4a09      	ldr	r2, [pc, #36]	; (73b8 <main+0x12c>)
    7392:	7993      	ldrb	r3, [r2, #6]
    7394:	2101      	movs	r1, #1
    7396:	430b      	orrs	r3, r1
    7398:	7193      	strb	r3, [r2, #6]
    739a:	4b07      	ldr	r3, [pc, #28]	; (73b8 <main+0x12c>)
    739c:	22a5      	movs	r2, #165	; 0xa5
    739e:	721a      	strb	r2, [r3, #8]
			
		eth_process();
    73a0:	4b18      	ldr	r3, [pc, #96]	; (7404 <main+0x178>)
    73a2:	4798      	blx	r3
		cmd_process();
    73a4:	4b18      	ldr	r3, [pc, #96]	; (7408 <main+0x17c>)
    73a6:	4798      	blx	r3
		tc3_process();
    73a8:	4b18      	ldr	r3, [pc, #96]	; (740c <main+0x180>)
    73aa:	4798      	blx	r3
	    if(reset == NULL) {wdt_reset();}
    73ac:	e7e5      	b.n	737a <main+0xee>
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	e000ed00 	.word	0xe000ed00
    73b4:	00007e25 	.word	0x00007e25
    73b8:	40001000 	.word	0x40001000
    73bc:	0000ab9d 	.word	0x0000ab9d
    73c0:	0000ac31 	.word	0x0000ac31
    73c4:	20002550 	.word	0x20002550
    73c8:	0000abd1 	.word	0x0000abd1
    73cc:	0000ac91 	.word	0x0000ac91
    73d0:	0000afb5 	.word	0x0000afb5
    73d4:	00006ac9 	.word	0x00006ac9
    73d8:	00008131 	.word	0x00008131
    73dc:	00007725 	.word	0x00007725
    73e0:	000086a1 	.word	0x000086a1
    73e4:	000062c9 	.word	0x000062c9
    73e8:	00004215 	.word	0x00004215
    73ec:	00004451 	.word	0x00004451
    73f0:	000044e5 	.word	0x000044e5
    73f4:	00005ecd 	.word	0x00005ecd
    73f8:	2000254c 	.word	0x2000254c
    73fc:	00006ddd 	.word	0x00006ddd
    7400:	20002548 	.word	0x20002548
    7404:	000063d5 	.word	0x000063d5
    7408:	000048e9 	.word	0x000048e9
    740c:	00008285 	.word	0x00008285

00007410 <socket_init>:




BYTE socket_init (BYTE numb, WORD src_port, BYTE mode)
{
    7410:	b590      	push	{r4, r7, lr}
    7412:	b085      	sub	sp, #20
    7414:	af00      	add	r7, sp, #0
    7416:	0004      	movs	r4, r0
    7418:	0008      	movs	r0, r1
    741a:	0011      	movs	r1, r2
    741c:	1dfb      	adds	r3, r7, #7
    741e:	1c22      	adds	r2, r4, #0
    7420:	701a      	strb	r2, [r3, #0]
    7422:	1d3b      	adds	r3, r7, #4
    7424:	1c02      	adds	r2, r0, #0
    7426:	801a      	strh	r2, [r3, #0]
    7428:	1dbb      	adds	r3, r7, #6
    742a:	1c0a      	adds	r2, r1, #0
    742c:	701a      	strb	r2, [r3, #0]
	BYTE buf[2];
	
	//mode
	if(mode==UDP){buf[0]=SR_00_P2;}
    742e:	1dbb      	adds	r3, r7, #6
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	2b01      	cmp	r3, #1
    7434:	d103      	bne.n	743e <socket_init+0x2e>
    7436:	230c      	movs	r3, #12
    7438:	18fb      	adds	r3, r7, r3
    743a:	2202      	movs	r2, #2
    743c:	701a      	strb	r2, [r3, #0]
	if(mode==TCP){buf[0]=SR_00_P1;}	
    743e:	1dbb      	adds	r3, r7, #6
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	2b02      	cmp	r3, #2
    7444:	d103      	bne.n	744e <socket_init+0x3e>
    7446:	230c      	movs	r3, #12
    7448:	18fb      	adds	r3, r7, r3
    744a:	2201      	movs	r2, #1
    744c:	701a      	strb	r2, [r3, #0]
		
	spi_write_timeout(ADDR_SOC_MODE,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    744e:	4b5f      	ldr	r3, [pc, #380]	; (75cc <socket_init+0x1bc>)
    7450:	220a      	movs	r2, #10
    7452:	801a      	strh	r2, [r3, #0]
    7454:	e006      	b.n	7464 <socket_init+0x54>
    7456:	4b5d      	ldr	r3, [pc, #372]	; (75cc <socket_init+0x1bc>)
    7458:	881b      	ldrh	r3, [r3, #0]
    745a:	b29b      	uxth	r3, r3
    745c:	2b00      	cmp	r3, #0
    745e:	d101      	bne.n	7464 <socket_init+0x54>
    7460:	2301      	movs	r3, #1
    7462:	e0af      	b.n	75c4 <socket_init+0x1b4>
    7464:	1dfb      	adds	r3, r7, #7
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	015b      	lsls	r3, r3, #5
    746a:	b25b      	sxtb	r3, r3
    746c:	2208      	movs	r2, #8
    746e:	4313      	orrs	r3, r2
    7470:	b25b      	sxtb	r3, r3
    7472:	b2d9      	uxtb	r1, r3
    7474:	230c      	movs	r3, #12
    7476:	18fa      	adds	r2, r7, r3
    7478:	2301      	movs	r3, #1
    747a:	2000      	movs	r0, #0
    747c:	4c54      	ldr	r4, [pc, #336]	; (75d0 <socket_init+0x1c0>)
    747e:	47a0      	blx	r4
    7480:	1e03      	subs	r3, r0, #0
    7482:	d0e8      	beq.n	7456 <socket_init+0x46>
	
	//src_port
	buf[0]=((src_port & 0xFF00)>>8);
    7484:	1d3b      	adds	r3, r7, #4
    7486:	881b      	ldrh	r3, [r3, #0]
    7488:	0a1b      	lsrs	r3, r3, #8
    748a:	b29b      	uxth	r3, r3
    748c:	b2da      	uxtb	r2, r3
    748e:	230c      	movs	r3, #12
    7490:	18fb      	adds	r3, r7, r3
    7492:	701a      	strb	r2, [r3, #0]
	buf[1]=( src_port & 0x00FF);
    7494:	1d3b      	adds	r3, r7, #4
    7496:	881b      	ldrh	r3, [r3, #0]
    7498:	b2da      	uxtb	r2, r3
    749a:	230c      	movs	r3, #12
    749c:	18fb      	adds	r3, r7, r3
    749e:	705a      	strb	r2, [r3, #1]
	spi_write_timeout(ADDR_SOC_SRC_PORT0,(SOCKET_REGISTER | SOCKET(numb)),buf,2,10);
    74a0:	4b4a      	ldr	r3, [pc, #296]	; (75cc <socket_init+0x1bc>)
    74a2:	220a      	movs	r2, #10
    74a4:	801a      	strh	r2, [r3, #0]
    74a6:	e006      	b.n	74b6 <socket_init+0xa6>
    74a8:	4b48      	ldr	r3, [pc, #288]	; (75cc <socket_init+0x1bc>)
    74aa:	881b      	ldrh	r3, [r3, #0]
    74ac:	b29b      	uxth	r3, r3
    74ae:	2b00      	cmp	r3, #0
    74b0:	d101      	bne.n	74b6 <socket_init+0xa6>
    74b2:	2301      	movs	r3, #1
    74b4:	e086      	b.n	75c4 <socket_init+0x1b4>
    74b6:	1dfb      	adds	r3, r7, #7
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	015b      	lsls	r3, r3, #5
    74bc:	b25b      	sxtb	r3, r3
    74be:	2208      	movs	r2, #8
    74c0:	4313      	orrs	r3, r2
    74c2:	b25b      	sxtb	r3, r3
    74c4:	b2d9      	uxtb	r1, r3
    74c6:	230c      	movs	r3, #12
    74c8:	18fa      	adds	r2, r7, r3
    74ca:	2302      	movs	r3, #2
    74cc:	2004      	movs	r0, #4
    74ce:	4c40      	ldr	r4, [pc, #256]	; (75d0 <socket_init+0x1c0>)
    74d0:	47a0      	blx	r4
    74d2:	1e03      	subs	r3, r0, #0
    74d4:	d0e8      	beq.n	74a8 <socket_init+0x98>
	
	
	//socket_cmd_open
	buf[0]=CMD_OPEN;
    74d6:	230c      	movs	r3, #12
    74d8:	18fb      	adds	r3, r7, r3
    74da:	2201      	movs	r2, #1
    74dc:	701a      	strb	r2, [r3, #0]
	spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    74de:	4b3b      	ldr	r3, [pc, #236]	; (75cc <socket_init+0x1bc>)
    74e0:	220a      	movs	r2, #10
    74e2:	801a      	strh	r2, [r3, #0]
    74e4:	e006      	b.n	74f4 <socket_init+0xe4>
    74e6:	4b39      	ldr	r3, [pc, #228]	; (75cc <socket_init+0x1bc>)
    74e8:	881b      	ldrh	r3, [r3, #0]
    74ea:	b29b      	uxth	r3, r3
    74ec:	2b00      	cmp	r3, #0
    74ee:	d101      	bne.n	74f4 <socket_init+0xe4>
    74f0:	2301      	movs	r3, #1
    74f2:	e067      	b.n	75c4 <socket_init+0x1b4>
    74f4:	1dfb      	adds	r3, r7, #7
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	015b      	lsls	r3, r3, #5
    74fa:	b25b      	sxtb	r3, r3
    74fc:	2208      	movs	r2, #8
    74fe:	4313      	orrs	r3, r2
    7500:	b25b      	sxtb	r3, r3
    7502:	b2d9      	uxtb	r1, r3
    7504:	230c      	movs	r3, #12
    7506:	18fa      	adds	r2, r7, r3
    7508:	2301      	movs	r3, #1
    750a:	2001      	movs	r0, #1
    750c:	4c30      	ldr	r4, [pc, #192]	; (75d0 <socket_init+0x1c0>)
    750e:	47a0      	blx	r4
    7510:	1e03      	subs	r3, r0, #0
    7512:	d0e8      	beq.n	74e6 <socket_init+0xd6>
	
	if (mode == TCP)
    7514:	1dbb      	adds	r3, r7, #6
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	2b02      	cmp	r3, #2
    751a:	d152      	bne.n	75c2 <socket_init+0x1b2>
	{
		//socket_set_RTR
		buf[0]=0x0F;
    751c:	230c      	movs	r3, #12
    751e:	18fb      	adds	r3, r7, r3
    7520:	220f      	movs	r2, #15
    7522:	701a      	strb	r2, [r3, #0]
		buf[1]=0xA0;
    7524:	230c      	movs	r3, #12
    7526:	18fb      	adds	r3, r7, r3
    7528:	22a0      	movs	r2, #160	; 0xa0
    752a:	705a      	strb	r2, [r3, #1]
		spi_write_timeout(ADDR_COM_RETRY_TIME_0,COMMON_REGISTER,buf,2,10);
    752c:	4b27      	ldr	r3, [pc, #156]	; (75cc <socket_init+0x1bc>)
    752e:	220a      	movs	r2, #10
    7530:	801a      	strh	r2, [r3, #0]
    7532:	e006      	b.n	7542 <socket_init+0x132>
    7534:	4b25      	ldr	r3, [pc, #148]	; (75cc <socket_init+0x1bc>)
    7536:	881b      	ldrh	r3, [r3, #0]
    7538:	b29b      	uxth	r3, r3
    753a:	2b00      	cmp	r3, #0
    753c:	d101      	bne.n	7542 <socket_init+0x132>
    753e:	2301      	movs	r3, #1
    7540:	e040      	b.n	75c4 <socket_init+0x1b4>
    7542:	230c      	movs	r3, #12
    7544:	18fa      	adds	r2, r7, r3
    7546:	2302      	movs	r3, #2
    7548:	2100      	movs	r1, #0
    754a:	2019      	movs	r0, #25
    754c:	4c20      	ldr	r4, [pc, #128]	; (75d0 <socket_init+0x1c0>)
    754e:	47a0      	blx	r4
    7550:	1e03      	subs	r3, r0, #0
    7552:	d0ef      	beq.n	7534 <socket_init+0x124>
		//socket_set_RCR
		buf[0]=0x04;
    7554:	230c      	movs	r3, #12
    7556:	18fb      	adds	r3, r7, r3
    7558:	2204      	movs	r2, #4
    755a:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_COM_RETRY_COUNT,COMMON_REGISTER,buf,1,10);
    755c:	4b1b      	ldr	r3, [pc, #108]	; (75cc <socket_init+0x1bc>)
    755e:	220a      	movs	r2, #10
    7560:	801a      	strh	r2, [r3, #0]
    7562:	e006      	b.n	7572 <socket_init+0x162>
    7564:	4b19      	ldr	r3, [pc, #100]	; (75cc <socket_init+0x1bc>)
    7566:	881b      	ldrh	r3, [r3, #0]
    7568:	b29b      	uxth	r3, r3
    756a:	2b00      	cmp	r3, #0
    756c:	d101      	bne.n	7572 <socket_init+0x162>
    756e:	2301      	movs	r3, #1
    7570:	e028      	b.n	75c4 <socket_init+0x1b4>
    7572:	230c      	movs	r3, #12
    7574:	18fa      	adds	r2, r7, r3
    7576:	2301      	movs	r3, #1
    7578:	2100      	movs	r1, #0
    757a:	201b      	movs	r0, #27
    757c:	4c14      	ldr	r4, [pc, #80]	; (75d0 <socket_init+0x1c0>)
    757e:	47a0      	blx	r4
    7580:	1e03      	subs	r3, r0, #0
    7582:	d0ef      	beq.n	7564 <socket_init+0x154>
		//socket_cmd_listen
		buf[0]=CMD_LISTEN;
    7584:	230c      	movs	r3, #12
    7586:	18fb      	adds	r3, r7, r3
    7588:	2202      	movs	r2, #2
    758a:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    758c:	4b0f      	ldr	r3, [pc, #60]	; (75cc <socket_init+0x1bc>)
    758e:	220a      	movs	r2, #10
    7590:	801a      	strh	r2, [r3, #0]
    7592:	e006      	b.n	75a2 <socket_init+0x192>
    7594:	4b0d      	ldr	r3, [pc, #52]	; (75cc <socket_init+0x1bc>)
    7596:	881b      	ldrh	r3, [r3, #0]
    7598:	b29b      	uxth	r3, r3
    759a:	2b00      	cmp	r3, #0
    759c:	d101      	bne.n	75a2 <socket_init+0x192>
    759e:	2301      	movs	r3, #1
    75a0:	e010      	b.n	75c4 <socket_init+0x1b4>
    75a2:	1dfb      	adds	r3, r7, #7
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	015b      	lsls	r3, r3, #5
    75a8:	b25b      	sxtb	r3, r3
    75aa:	2208      	movs	r2, #8
    75ac:	4313      	orrs	r3, r2
    75ae:	b25b      	sxtb	r3, r3
    75b0:	b2d9      	uxtb	r1, r3
    75b2:	230c      	movs	r3, #12
    75b4:	18fa      	adds	r2, r7, r3
    75b6:	2301      	movs	r3, #1
    75b8:	2001      	movs	r0, #1
    75ba:	4c05      	ldr	r4, [pc, #20]	; (75d0 <socket_init+0x1c0>)
    75bc:	47a0      	blx	r4
    75be:	1e03      	subs	r3, r0, #0
    75c0:	d0e8      	beq.n	7594 <socket_init+0x184>
	}
		
	return SUCCESS;
    75c2:	2300      	movs	r3, #0
	
    75c4:	0018      	movs	r0, r3
    75c6:	46bd      	mov	sp, r7
    75c8:	b005      	add	sp, #20
    75ca:	bd90      	pop	{r4, r7, pc}
    75cc:	200031f4 	.word	0x200031f4
    75d0:	000079a9 	.word	0x000079a9

000075d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    75d4:	b580      	push	{r7, lr}
    75d6:	b082      	sub	sp, #8
    75d8:	af00      	add	r7, sp, #0
    75da:	0002      	movs	r2, r0
    75dc:	1dfb      	adds	r3, r7, #7
    75de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    75e0:	1dfb      	adds	r3, r7, #7
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	2b7f      	cmp	r3, #127	; 0x7f
    75e6:	d809      	bhi.n	75fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    75e8:	4b06      	ldr	r3, [pc, #24]	; (7604 <__NVIC_EnableIRQ+0x30>)
    75ea:	1dfa      	adds	r2, r7, #7
    75ec:	7812      	ldrb	r2, [r2, #0]
    75ee:	0011      	movs	r1, r2
    75f0:	221f      	movs	r2, #31
    75f2:	400a      	ands	r2, r1
    75f4:	2101      	movs	r1, #1
    75f6:	4091      	lsls	r1, r2
    75f8:	000a      	movs	r2, r1
    75fa:	601a      	str	r2, [r3, #0]
  }
}
    75fc:	46c0      	nop			; (mov r8, r8)
    75fe:	46bd      	mov	sp, r7
    7600:	b002      	add	sp, #8
    7602:	bd80      	pop	{r7, pc}
    7604:	e000e100 	.word	0xe000e100

00007608 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7608:	b580      	push	{r7, lr}
    760a:	b082      	sub	sp, #8
    760c:	af00      	add	r7, sp, #0
    760e:	0002      	movs	r2, r0
    7610:	1dfb      	adds	r3, r7, #7
    7612:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7614:	1dfb      	adds	r3, r7, #7
    7616:	781b      	ldrb	r3, [r3, #0]
    7618:	2b7f      	cmp	r3, #127	; 0x7f
    761a:	d80e      	bhi.n	763a <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    761c:	4909      	ldr	r1, [pc, #36]	; (7644 <__NVIC_DisableIRQ+0x3c>)
    761e:	1dfb      	adds	r3, r7, #7
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	001a      	movs	r2, r3
    7624:	231f      	movs	r3, #31
    7626:	4013      	ands	r3, r2
    7628:	2201      	movs	r2, #1
    762a:	409a      	lsls	r2, r3
    762c:	0013      	movs	r3, r2
    762e:	2280      	movs	r2, #128	; 0x80
    7630:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7632:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7636:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	46bd      	mov	sp, r7
    763e:	b002      	add	sp, #8
    7640:	bd80      	pop	{r7, pc}
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	e000e100 	.word	0xe000e100

00007648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    7648:	b5b0      	push	{r4, r5, r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
    764e:	0002      	movs	r2, r0
    7650:	6039      	str	r1, [r7, #0]
    7652:	1dfb      	adds	r3, r7, #7
    7654:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7656:	1dfb      	adds	r3, r7, #7
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	2b7f      	cmp	r3, #127	; 0x7f
    765c:	d828      	bhi.n	76b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    765e:	4c2f      	ldr	r4, [pc, #188]	; (771c <__NVIC_SetPriority+0xd4>)
    7660:	1dfb      	adds	r3, r7, #7
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	b25b      	sxtb	r3, r3
    7666:	089b      	lsrs	r3, r3, #2
    7668:	492c      	ldr	r1, [pc, #176]	; (771c <__NVIC_SetPriority+0xd4>)
    766a:	1dfa      	adds	r2, r7, #7
    766c:	7812      	ldrb	r2, [r2, #0]
    766e:	b252      	sxtb	r2, r2
    7670:	0892      	lsrs	r2, r2, #2
    7672:	32c0      	adds	r2, #192	; 0xc0
    7674:	0092      	lsls	r2, r2, #2
    7676:	5852      	ldr	r2, [r2, r1]
    7678:	1df9      	adds	r1, r7, #7
    767a:	7809      	ldrb	r1, [r1, #0]
    767c:	0008      	movs	r0, r1
    767e:	2103      	movs	r1, #3
    7680:	4001      	ands	r1, r0
    7682:	00c9      	lsls	r1, r1, #3
    7684:	20ff      	movs	r0, #255	; 0xff
    7686:	4088      	lsls	r0, r1
    7688:	0001      	movs	r1, r0
    768a:	43c9      	mvns	r1, r1
    768c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    768e:	683a      	ldr	r2, [r7, #0]
    7690:	0192      	lsls	r2, r2, #6
    7692:	20ff      	movs	r0, #255	; 0xff
    7694:	4010      	ands	r0, r2
    7696:	1dfa      	adds	r2, r7, #7
    7698:	7812      	ldrb	r2, [r2, #0]
    769a:	0015      	movs	r5, r2
    769c:	2203      	movs	r2, #3
    769e:	402a      	ands	r2, r5
    76a0:	00d2      	lsls	r2, r2, #3
    76a2:	4090      	lsls	r0, r2
    76a4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    76a6:	430a      	orrs	r2, r1
    76a8:	33c0      	adds	r3, #192	; 0xc0
    76aa:	009b      	lsls	r3, r3, #2
    76ac:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    76ae:	e031      	b.n	7714 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    76b0:	4c1b      	ldr	r4, [pc, #108]	; (7720 <__NVIC_SetPriority+0xd8>)
    76b2:	1dfb      	adds	r3, r7, #7
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	001a      	movs	r2, r3
    76b8:	230f      	movs	r3, #15
    76ba:	4013      	ands	r3, r2
    76bc:	3b08      	subs	r3, #8
    76be:	0899      	lsrs	r1, r3, #2
    76c0:	4a17      	ldr	r2, [pc, #92]	; (7720 <__NVIC_SetPriority+0xd8>)
    76c2:	1dfb      	adds	r3, r7, #7
    76c4:	781b      	ldrb	r3, [r3, #0]
    76c6:	0018      	movs	r0, r3
    76c8:	230f      	movs	r3, #15
    76ca:	4003      	ands	r3, r0
    76cc:	3b08      	subs	r3, #8
    76ce:	089b      	lsrs	r3, r3, #2
    76d0:	3306      	adds	r3, #6
    76d2:	009b      	lsls	r3, r3, #2
    76d4:	18d3      	adds	r3, r2, r3
    76d6:	3304      	adds	r3, #4
    76d8:	681b      	ldr	r3, [r3, #0]
    76da:	1dfa      	adds	r2, r7, #7
    76dc:	7812      	ldrb	r2, [r2, #0]
    76de:	0010      	movs	r0, r2
    76e0:	2203      	movs	r2, #3
    76e2:	4002      	ands	r2, r0
    76e4:	00d2      	lsls	r2, r2, #3
    76e6:	20ff      	movs	r0, #255	; 0xff
    76e8:	4090      	lsls	r0, r2
    76ea:	0002      	movs	r2, r0
    76ec:	43d2      	mvns	r2, r2
    76ee:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    76f0:	683b      	ldr	r3, [r7, #0]
    76f2:	019b      	lsls	r3, r3, #6
    76f4:	20ff      	movs	r0, #255	; 0xff
    76f6:	4018      	ands	r0, r3
    76f8:	1dfb      	adds	r3, r7, #7
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	001d      	movs	r5, r3
    76fe:	2303      	movs	r3, #3
    7700:	402b      	ands	r3, r5
    7702:	00db      	lsls	r3, r3, #3
    7704:	4098      	lsls	r0, r3
    7706:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7708:	431a      	orrs	r2, r3
    770a:	1d8b      	adds	r3, r1, #6
    770c:	009b      	lsls	r3, r3, #2
    770e:	18e3      	adds	r3, r4, r3
    7710:	3304      	adds	r3, #4
    7712:	601a      	str	r2, [r3, #0]
}
    7714:	46c0      	nop			; (mov r8, r8)
    7716:	46bd      	mov	sp, r7
    7718:	b002      	add	sp, #8
    771a:	bdb0      	pop	{r4, r5, r7, pc}
    771c:	e000e100 	.word	0xe000e100
    7720:	e000ed00 	.word	0xe000ed00

00007724 <spi_init>:
SPI spi;


void spi_init(void)
//-----------------------------------------------------------------------------
{
    7724:	b580      	push	{r7, lr}
    7726:	af00      	add	r7, sp, #0
	PM->APBCMASK.bit.SERCOM5_ =1; // Bit  2    - SERCOM4: SERCOM4 APB Clock Enable (1 - enabled)
    7728:	4a67      	ldr	r2, [pc, #412]	; (78c8 <spi_init+0x1a4>)
    772a:	6a13      	ldr	r3, [r2, #32]
    772c:	2180      	movs	r1, #128	; 0x80
    772e:	430b      	orrs	r3, r1
    7730:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.bit.ID   =GCLK_CLKCTRL_ID_SERCOM5_CORE; // Bits 5:0  - ID: Generic Clock Selection ID (0x18 - SERCOM4_CORE)
    7732:	4a66      	ldr	r2, [pc, #408]	; (78cc <spi_init+0x1a8>)
    7734:	8853      	ldrh	r3, [r2, #2]
    7736:	213f      	movs	r1, #63	; 0x3f
    7738:	438b      	bics	r3, r1
    773a:	1c19      	adds	r1, r3, #0
    773c:	2319      	movs	r3, #25
    773e:	430b      	orrs	r3, r1
    7740:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    7742:	4a62      	ldr	r2, [pc, #392]	; (78cc <spi_init+0x1a8>)
    7744:	8853      	ldrh	r3, [r2, #2]
    7746:	4962      	ldr	r1, [pc, #392]	; (78d0 <spi_init+0x1ac>)
    7748:	400b      	ands	r3, r1
    774a:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    774c:	4a5f      	ldr	r2, [pc, #380]	; (78cc <spi_init+0x1a8>)
    774e:	8853      	ldrh	r3, [r2, #2]
    7750:	2180      	movs	r1, #128	; 0x80
    7752:	01c9      	lsls	r1, r1, #7
    7754:	430b      	orrs	r3, r1
    7756:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	if(SERCOM5->SPI.SYNCBUSY.bit.SWRST)   // Bit 0 - SWRST: Software Reset Synchronization Busy
    7758:	4b5e      	ldr	r3, [pc, #376]	; (78d4 <spi_init+0x1b0>)
    775a:	69db      	ldr	r3, [r3, #28]
    775c:	07db      	lsls	r3, r3, #31
    775e:	0fdb      	lsrs	r3, r3, #31
    7760:	b2db      	uxtb	r3, r3
    7762:	2b00      	cmp	r3, #0
    7764:	d01b      	beq.n	779e <spi_init+0x7a>
	{
		if(SERCOM5->SPI.CTRLA.bit.ENABLE)   // Bit 1 - ENABLE: Enable
    7766:	4b5b      	ldr	r3, [pc, #364]	; (78d4 <spi_init+0x1b0>)
    7768:	681b      	ldr	r3, [r3, #0]
    776a:	079b      	lsls	r3, r3, #30
    776c:	0fdb      	lsrs	r3, r3, #31
    776e:	b2db      	uxtb	r3, r3
    7770:	2b00      	cmp	r3, #0
    7772:	d014      	beq.n	779e <spi_init+0x7a>
		{
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    7774:	46c0      	nop			; (mov r8, r8)
    7776:	4b57      	ldr	r3, [pc, #348]	; (78d4 <spi_init+0x1b0>)
    7778:	69db      	ldr	r3, [r3, #28]
    777a:	079b      	lsls	r3, r3, #30
    777c:	0fdb      	lsrs	r3, r3, #31
    777e:	b2db      	uxtb	r3, r3
    7780:	2b00      	cmp	r3, #0
    7782:	d1f8      	bne.n	7776 <spi_init+0x52>
			SERCOM5->SPI.CTRLA.bit.ENABLE=0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    7784:	4a53      	ldr	r2, [pc, #332]	; (78d4 <spi_init+0x1b0>)
    7786:	6813      	ldr	r3, [r2, #0]
    7788:	2102      	movs	r1, #2
    778a:	438b      	bics	r3, r1
    778c:	6013      	str	r3, [r2, #0]
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    778e:	46c0      	nop			; (mov r8, r8)
    7790:	4b50      	ldr	r3, [pc, #320]	; (78d4 <spi_init+0x1b0>)
    7792:	69db      	ldr	r3, [r3, #28]
    7794:	079b      	lsls	r3, r3, #30
    7796:	0fdb      	lsrs	r3, r3, #31
    7798:	b2db      	uxtb	r3, r3
    779a:	2b00      	cmp	r3, #0
    779c:	d1f8      	bne.n	7790 <spi_init+0x6c>
		}
	}

	//.............................................................................

	SERCOM5->SPI.CTRLA.bit.SWRST   =0x01; // Bit  0     - SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    779e:	4a4d      	ldr	r2, [pc, #308]	; (78d4 <spi_init+0x1b0>)
    77a0:	6813      	ldr	r3, [r2, #0]
    77a2:	2101      	movs	r1, #1
    77a4:	430b      	orrs	r3, r1
    77a6:	6013      	str	r3, [r2, #0]
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    77a8:	46c0      	nop			; (mov r8, r8)
    77aa:	4b4a      	ldr	r3, [pc, #296]	; (78d4 <spi_init+0x1b0>)
    77ac:	69db      	ldr	r3, [r3, #28]
    77ae:	07db      	lsls	r3, r3, #31
    77b0:	0fdb      	lsrs	r3, r3, #31
    77b2:	b2db      	uxtb	r3, r3
    77b4:	2b00      	cmp	r3, #0
    77b6:	d1f8      	bne.n	77aa <spi_init+0x86>

	SERCOM5->SPI.CTRLA.bit.DORD    =0x00; // Bit  30    - DORD: Data Order (0: MSB is transferred first)
    77b8:	4a46      	ldr	r2, [pc, #280]	; (78d4 <spi_init+0x1b0>)
    77ba:	6813      	ldr	r3, [r2, #0]
    77bc:	4946      	ldr	r1, [pc, #280]	; (78d8 <spi_init+0x1b4>)
    77be:	400b      	ands	r3, r1
    77c0:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL    =0x00; // Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    77c2:	4a44      	ldr	r2, [pc, #272]	; (78d4 <spi_init+0x1b0>)
    77c4:	6813      	ldr	r3, [r2, #0]
    77c6:	4945      	ldr	r1, [pc, #276]	; (78dc <spi_init+0x1b8>)
    77c8:	400b      	ands	r3, r1
    77ca:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPHA    =0x00; // Bit  28    - CPHA: Clock Phase (0: The data is sampled on a leading SCK edge and changed on a trailing SCK edge)
    77cc:	4a41      	ldr	r2, [pc, #260]	; (78d4 <spi_init+0x1b0>)
    77ce:	6813      	ldr	r3, [r2, #0]
    77d0:	4943      	ldr	r1, [pc, #268]	; (78e0 <spi_init+0x1bc>)
    77d2:	400b      	ands	r3, r1
    77d4:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.FORM    =0x00; // Bits 27:24 - FORM: Frame Format (0: SPI frame)
    77d6:	4a3f      	ldr	r2, [pc, #252]	; (78d4 <spi_init+0x1b0>)
    77d8:	6813      	ldr	r3, [r2, #0]
    77da:	4942      	ldr	r1, [pc, #264]	; (78e4 <spi_init+0x1c0>)
    77dc:	400b      	ands	r3, r1
    77de:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.IBON    =0x00; // Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    77e0:	4a3c      	ldr	r2, [pc, #240]	; (78d4 <spi_init+0x1b0>)
    77e2:	6813      	ldr	r3, [r2, #0]
    77e4:	4940      	ldr	r1, [pc, #256]	; (78e8 <spi_init+0x1c4>)
    77e6:	400b      	ands	r3, r1
    77e8:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.RUNSTDBY=0x00; // Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    77ea:	4a3a      	ldr	r2, [pc, #232]	; (78d4 <spi_init+0x1b0>)
    77ec:	6813      	ldr	r3, [r2, #0]
    77ee:	2180      	movs	r1, #128	; 0x80
    77f0:	438b      	bics	r3, r1
    77f2:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.MODE    =0x03; // Bits 4:2   - MODE: Operating Mode (3: SPI master operation)
    77f4:	4a37      	ldr	r2, [pc, #220]	; (78d4 <spi_init+0x1b0>)
    77f6:	6813      	ldr	r3, [r2, #0]
    77f8:	211c      	movs	r1, #28
    77fa:	438b      	bics	r3, r1
    77fc:	210c      	movs	r1, #12
    77fe:	430b      	orrs	r3, r1
    7800:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7802:	46c0      	nop			; (mov r8, r8)
    7804:	4b33      	ldr	r3, [pc, #204]	; (78d4 <spi_init+0x1b0>)
    7806:	69db      	ldr	r3, [r3, #28]
    7808:	2207      	movs	r2, #7
    780a:	4013      	ands	r3, r2
    780c:	d1fa      	bne.n	7804 <spi_init+0xe0>
	SERCOM5->SPI.CTRLA.bit.DOPO=0x02;     // Bits 17:16 - DOPO: Data Out Pinout (0: MOSI->PAD[3], SCK->PAD[1])
    780e:	4a31      	ldr	r2, [pc, #196]	; (78d4 <spi_init+0x1b0>)
    7810:	6813      	ldr	r3, [r2, #0]
    7812:	4936      	ldr	r1, [pc, #216]	; (78ec <spi_init+0x1c8>)
    7814:	400b      	ands	r3, r1
    7816:	2180      	movs	r1, #128	; 0x80
    7818:	0289      	lsls	r1, r1, #10
    781a:	430b      	orrs	r3, r1
    781c:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    781e:	46c0      	nop			; (mov r8, r8)
    7820:	4b2c      	ldr	r3, [pc, #176]	; (78d4 <spi_init+0x1b0>)
    7822:	69db      	ldr	r3, [r3, #28]
    7824:	2207      	movs	r2, #7
    7826:	4013      	ands	r3, r2
    7828:	d1fa      	bne.n	7820 <spi_init+0xfc>
	SERCOM5->SPI.CTRLA.bit.DIPO=0x00;     // Bits 21:20 - DIPO: Data In Pinout (0: SERCOM PAD[0] is used as data input)
    782a:	4a2a      	ldr	r2, [pc, #168]	; (78d4 <spi_init+0x1b0>)
    782c:	6813      	ldr	r3, [r2, #0]
    782e:	4930      	ldr	r1, [pc, #192]	; (78f0 <spi_init+0x1cc>)
    7830:	400b      	ands	r3, r1
    7832:	6013      	str	r3, [r2, #0]

	SERCOM5->SPI.CTRLB.bit.RXEN   =0x01;  // Bit  17    - RXEN: Receiver Enable (1: The receiver is enabled or it will be enabled when SPI is enabled.)
    7834:	4a27      	ldr	r2, [pc, #156]	; (78d4 <spi_init+0x1b0>)
    7836:	6853      	ldr	r3, [r2, #4]
    7838:	2180      	movs	r1, #128	; 0x80
    783a:	0289      	lsls	r1, r1, #10
    783c:	430b      	orrs	r3, r1
    783e:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.MSSEN  =0x00;  // Bit  13    - MSSEN: Master Slave Select Enable (0: Hardware _SS control is disabled)
    7840:	4a24      	ldr	r2, [pc, #144]	; (78d4 <spi_init+0x1b0>)
    7842:	6853      	ldr	r3, [r2, #4]
    7844:	492b      	ldr	r1, [pc, #172]	; (78f4 <spi_init+0x1d0>)
    7846:	400b      	ands	r3, r1
    7848:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.AMODE  =0x00;  // Bits 15:14 - AMODE: Address Mode (0: ADDRMASK is used as a mask to the ADDR register)
    784a:	4a22      	ldr	r2, [pc, #136]	; (78d4 <spi_init+0x1b0>)
    784c:	6853      	ldr	r3, [r2, #4]
    784e:	492a      	ldr	r1, [pc, #168]	; (78f8 <spi_init+0x1d4>)
    7850:	400b      	ands	r3, r1
    7852:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.SSDE   =0x00;  // Bit  9     - SSDE: Slave Select Low Detect Enable (0: _SS low detector is disabled.)
    7854:	4a1f      	ldr	r2, [pc, #124]	; (78d4 <spi_init+0x1b0>)
    7856:	6853      	ldr	r3, [r2, #4]
    7858:	4928      	ldr	r1, [pc, #160]	; (78fc <spi_init+0x1d8>)
    785a:	400b      	ands	r3, r1
    785c:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.PLOADEN=0x00;  // Bit 6      – PLOADEN: Slave Data Preload Enable ()
    785e:	4a1d      	ldr	r2, [pc, #116]	; (78d4 <spi_init+0x1b0>)
    7860:	6853      	ldr	r3, [r2, #4]
    7862:	2140      	movs	r1, #64	; 0x40
    7864:	438b      	bics	r3, r1
    7866:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.CHSIZE =0x00;  // Bits 2:0   - CHSIZE: Character Size (0: 8 bits)
    7868:	4a1a      	ldr	r2, [pc, #104]	; (78d4 <spi_init+0x1b0>)
    786a:	6853      	ldr	r3, [r2, #4]
    786c:	2107      	movs	r1, #7
    786e:	438b      	bics	r3, r1
    7870:	6053      	str	r3, [r2, #4]
     / SystemCoreClock / (2 * baudrate) - 1
     / SystemCoreClock = 8000000
     / baudrate = 1000000
    */	
	
	SERCOM5->SPI.BAUD.bit.BAUD        = (float)(PROC_HERZ ) / (2 * (float)(8000000 )) - 1;
    7872:	4b18      	ldr	r3, [pc, #96]	; (78d4 <spi_init+0x1b0>)
    7874:	2202      	movs	r2, #2
    7876:	731a      	strb	r2, [r3, #12]
	SERCOM5->SPI.INTENSET.bit.TXC	  = 0x00;
    7878:	4a16      	ldr	r2, [pc, #88]	; (78d4 <spi_init+0x1b0>)
    787a:	7d93      	ldrb	r3, [r2, #22]
    787c:	2102      	movs	r1, #2
    787e:	438b      	bics	r3, r1
    7880:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.DRE     = 0x00;
    7882:	4a14      	ldr	r2, [pc, #80]	; (78d4 <spi_init+0x1b0>)
    7884:	7d93      	ldrb	r3, [r2, #22]
    7886:	2101      	movs	r1, #1
    7888:	438b      	bics	r3, r1
    788a:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.RXC     = 0x00;	
    788c:	4a11      	ldr	r2, [pc, #68]	; (78d4 <spi_init+0x1b0>)
    788e:	7d93      	ldrb	r3, [r2, #22]
    7890:	2104      	movs	r1, #4
    7892:	438b      	bics	r3, r1
    7894:	7593      	strb	r3, [r2, #22]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7896:	46c0      	nop			; (mov r8, r8)
    7898:	4b0e      	ldr	r3, [pc, #56]	; (78d4 <spi_init+0x1b0>)
    789a:	69db      	ldr	r3, [r3, #28]
    789c:	2207      	movs	r2, #7
    789e:	4013      	ands	r3, r2
    78a0:	d1fa      	bne.n	7898 <spi_init+0x174>
	SERCOM5->SPI.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    78a2:	4a0c      	ldr	r2, [pc, #48]	; (78d4 <spi_init+0x1b0>)
    78a4:	6813      	ldr	r3, [r2, #0]
    78a6:	2102      	movs	r1, #2
    78a8:	430b      	orrs	r3, r1
    78aa:	6013      	str	r3, [r2, #0]

	NVIC_DisableIRQ(SERCOM5_IRQn);
    78ac:	200e      	movs	r0, #14
    78ae:	f7ff feab 	bl	7608 <__NVIC_DisableIRQ>
	NVIC_SetPriority(SERCOM5_IRQn, 1);
    78b2:	2101      	movs	r1, #1
    78b4:	200e      	movs	r0, #14
    78b6:	f7ff fec7 	bl	7648 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SERCOM5_IRQn);
    78ba:	200e      	movs	r0, #14
    78bc:	f7ff fe8a 	bl	75d4 <__NVIC_EnableIRQ>
}
    78c0:	46c0      	nop			; (mov r8, r8)
    78c2:	46bd      	mov	sp, r7
    78c4:	bd80      	pop	{r7, pc}
    78c6:	46c0      	nop			; (mov r8, r8)
    78c8:	40000400 	.word	0x40000400
    78cc:	40000c00 	.word	0x40000c00
    78d0:	fffff0ff 	.word	0xfffff0ff
    78d4:	42001c00 	.word	0x42001c00
    78d8:	bfffffff 	.word	0xbfffffff
    78dc:	dfffffff 	.word	0xdfffffff
    78e0:	efffffff 	.word	0xefffffff
    78e4:	f0ffffff 	.word	0xf0ffffff
    78e8:	fffffeff 	.word	0xfffffeff
    78ec:	fffcffff 	.word	0xfffcffff
    78f0:	ffcfffff 	.word	0xffcfffff
    78f4:	ffffdfff 	.word	0xffffdfff
    78f8:	ffff3fff 	.word	0xffff3fff
    78fc:	fffffdff 	.word	0xfffffdff

00007900 <spi_process>:


WORD spi_process (uint16_t addr, uint8_t cb, uint8_t *buf, uint16_t len, BYTE cmd)
{
    7900:	b5b0      	push	{r4, r5, r7, lr}
    7902:	b086      	sub	sp, #24
    7904:	af00      	add	r7, sp, #0
    7906:	0004      	movs	r4, r0
    7908:	0008      	movs	r0, r1
    790a:	60ba      	str	r2, [r7, #8]
    790c:	0019      	movs	r1, r3
    790e:	230e      	movs	r3, #14
    7910:	18fb      	adds	r3, r7, r3
    7912:	1c22      	adds	r2, r4, #0
    7914:	801a      	strh	r2, [r3, #0]
    7916:	230d      	movs	r3, #13
    7918:	18fb      	adds	r3, r7, r3
    791a:	1c02      	adds	r2, r0, #0
    791c:	701a      	strb	r2, [r3, #0]
    791e:	1dbb      	adds	r3, r7, #6
    7920:	1c0a      	adds	r2, r1, #0
    7922:	801a      	strh	r2, [r3, #0]
	BYTE st_spi=0;
    7924:	2315      	movs	r3, #21
    7926:	18fb      	adds	r3, r7, r3
    7928:	2200      	movs	r2, #0
    792a:	701a      	strb	r2, [r3, #0]
	WORD rn_wn=0;
    792c:	2316      	movs	r3, #22
    792e:	18fb      	adds	r3, r7, r3
    7930:	2200      	movs	r2, #0
    7932:	801a      	strh	r2, [r3, #0]
	st_spi = cmd;
    7934:	2315      	movs	r3, #21
    7936:	18fb      	adds	r3, r7, r3
    7938:	2228      	movs	r2, #40	; 0x28
    793a:	18ba      	adds	r2, r7, r2
    793c:	7812      	ldrb	r2, [r2, #0]
    793e:	701a      	strb	r2, [r3, #0]
	switch(st_spi)
    7940:	2315      	movs	r3, #21
    7942:	18fb      	adds	r3, r7, r3
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	2b01      	cmp	r3, #1
    7948:	d005      	beq.n	7956 <spi_process+0x56>
    794a:	2b02      	cmp	r3, #2
    794c:	d014      	beq.n	7978 <spi_process+0x78>
    794e:	2b00      	cmp	r3, #0
    7950:	d123      	bne.n	799a <spi_process+0x9a>
	{
		case 0:
			return (1);
    7952:	2301      	movs	r3, #1
    7954:	e024      	b.n	79a0 <spi_process+0xa0>
		break;
		case READ_DATA:
			rn_wn=spi_read(addr,cb,buf,len);
    7956:	2316      	movs	r3, #22
    7958:	18fc      	adds	r4, r7, r3
    795a:	1dbb      	adds	r3, r7, #6
    795c:	881d      	ldrh	r5, [r3, #0]
    795e:	68ba      	ldr	r2, [r7, #8]
    7960:	230d      	movs	r3, #13
    7962:	18fb      	adds	r3, r7, r3
    7964:	7819      	ldrb	r1, [r3, #0]
    7966:	230e      	movs	r3, #14
    7968:	18fb      	adds	r3, r7, r3
    796a:	8818      	ldrh	r0, [r3, #0]
    796c:	002b      	movs	r3, r5
    796e:	f000 f8f7 	bl	7b60 <spi_read>
    7972:	0003      	movs	r3, r0
    7974:	8023      	strh	r3, [r4, #0]
		break;
    7976:	e010      	b.n	799a <spi_process+0x9a>
		case WRITE_DATA:
			rn_wn=spi_write(addr,cb,buf,len);
    7978:	2316      	movs	r3, #22
    797a:	18fc      	adds	r4, r7, r3
    797c:	1dbb      	adds	r3, r7, #6
    797e:	881d      	ldrh	r5, [r3, #0]
    7980:	68ba      	ldr	r2, [r7, #8]
    7982:	230d      	movs	r3, #13
    7984:	18fb      	adds	r3, r7, r3
    7986:	7819      	ldrb	r1, [r3, #0]
    7988:	230e      	movs	r3, #14
    798a:	18fb      	adds	r3, r7, r3
    798c:	8818      	ldrh	r0, [r3, #0]
    798e:	002b      	movs	r3, r5
    7990:	f000 f80a 	bl	79a8 <spi_write>
    7994:	0003      	movs	r3, r0
    7996:	8023      	strh	r3, [r4, #0]
		break;			
    7998:	46c0      	nop			; (mov r8, r8)
	}
	return (rn_wn);
    799a:	2316      	movs	r3, #22
    799c:	18fb      	adds	r3, r7, r3
    799e:	881b      	ldrh	r3, [r3, #0]
}
    79a0:	0018      	movs	r0, r3
    79a2:	46bd      	mov	sp, r7
    79a4:	b006      	add	sp, #24
    79a6:	bdb0      	pop	{r4, r5, r7, pc}

000079a8 <spi_write>:

WORD spi_write(uint16_t addr, uint8_t cb, uint8_t *tx_buf, uint16_t len)
{
    79a8:	b590      	push	{r4, r7, lr}
    79aa:	b087      	sub	sp, #28
    79ac:	af00      	add	r7, sp, #0
    79ae:	0004      	movs	r4, r0
    79b0:	0008      	movs	r0, r1
    79b2:	60ba      	str	r2, [r7, #8]
    79b4:	0019      	movs	r1, r3
    79b6:	230e      	movs	r3, #14
    79b8:	18fb      	adds	r3, r7, r3
    79ba:	1c22      	adds	r2, r4, #0
    79bc:	801a      	strh	r2, [r3, #0]
    79be:	230d      	movs	r3, #13
    79c0:	18fb      	adds	r3, r7, r3
    79c2:	1c02      	adds	r2, r0, #0
    79c4:	701a      	strb	r2, [r3, #0]
    79c6:	1dbb      	adds	r3, r7, #6
    79c8:	1c0a      	adds	r2, r1, #0
    79ca:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    79cc:	2316      	movs	r3, #22
    79ce:	18fb      	adds	r3, r7, r3
    79d0:	2200      	movs	r2, #0
    79d2:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    79d4:	4b5c      	ldr	r3, [pc, #368]	; (7b48 <spi_write+0x1a0>)
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	2b00      	cmp	r3, #0
    79da:	d003      	beq.n	79e4 <spi_write+0x3c>
    79dc:	2b01      	cmp	r3, #1
    79de:	d100      	bne.n	79e2 <spi_write+0x3a>
    79e0:	e08b      	b.n	7afa <spi_write+0x152>
    79e2:	e0ac      	b.n	7b3e <spi_write+0x196>
	{
		case 0:
			CS_clr();			
    79e4:	23c0      	movs	r3, #192	; 0xc0
    79e6:	05db      	lsls	r3, r3, #23
    79e8:	2280      	movs	r2, #128	; 0x80
    79ea:	0452      	lsls	r2, r2, #17
    79ec:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    79ee:	2316      	movs	r3, #22
    79f0:	18fb      	adds	r3, r7, r3
    79f2:	881b      	ldrh	r3, [r3, #0]
    79f4:	220e      	movs	r2, #14
    79f6:	18ba      	adds	r2, r7, r2
    79f8:	8812      	ldrh	r2, [r2, #0]
    79fa:	0a12      	lsrs	r2, r2, #8
    79fc:	b292      	uxth	r2, r2
    79fe:	b2d1      	uxtb	r1, r2
    7a00:	4a52      	ldr	r2, [pc, #328]	; (7b4c <spi_write+0x1a4>)
    7a02:	54d1      	strb	r1, [r2, r3]
    7a04:	2316      	movs	r3, #22
    7a06:	18fb      	adds	r3, r7, r3
    7a08:	881a      	ldrh	r2, [r3, #0]
    7a0a:	2316      	movs	r3, #22
    7a0c:	18fb      	adds	r3, r7, r3
    7a0e:	3201      	adds	r2, #1
    7a10:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7a12:	2316      	movs	r3, #22
    7a14:	18fb      	adds	r3, r7, r3
    7a16:	881b      	ldrh	r3, [r3, #0]
    7a18:	220e      	movs	r2, #14
    7a1a:	18ba      	adds	r2, r7, r2
    7a1c:	8812      	ldrh	r2, [r2, #0]
    7a1e:	b2d1      	uxtb	r1, r2
    7a20:	4a4a      	ldr	r2, [pc, #296]	; (7b4c <spi_write+0x1a4>)
    7a22:	54d1      	strb	r1, [r2, r3]
    7a24:	2316      	movs	r3, #22
    7a26:	18fb      	adds	r3, r7, r3
    7a28:	881a      	ldrh	r2, [r3, #0]
    7a2a:	2316      	movs	r3, #22
    7a2c:	18fb      	adds	r3, r7, r3
    7a2e:	3201      	adds	r2, #1
    7a30:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | WRITE_REG | LEN_N_BYTES;		cnt++;
    7a32:	2316      	movs	r3, #22
    7a34:	18fb      	adds	r3, r7, r3
    7a36:	881b      	ldrh	r3, [r3, #0]
    7a38:	220d      	movs	r2, #13
    7a3a:	18ba      	adds	r2, r7, r2
    7a3c:	7812      	ldrb	r2, [r2, #0]
    7a3e:	2104      	movs	r1, #4
    7a40:	430a      	orrs	r2, r1
    7a42:	b2d1      	uxtb	r1, r2
    7a44:	4a41      	ldr	r2, [pc, #260]	; (7b4c <spi_write+0x1a4>)
    7a46:	54d1      	strb	r1, [r2, r3]
    7a48:	2316      	movs	r3, #22
    7a4a:	18fb      	adds	r3, r7, r3
    7a4c:	881a      	ldrh	r2, [r3, #0]
    7a4e:	2316      	movs	r3, #22
    7a50:	18fb      	adds	r3, r7, r3
    7a52:	3201      	adds	r2, #1
    7a54:	801a      	strh	r2, [r3, #0]
							
			if((len+cnt)>MAX_SIZE_BUF_SPI)		{len=MAX_SIZE_BUF_SPI-cnt;}
    7a56:	1dbb      	adds	r3, r7, #6
    7a58:	881a      	ldrh	r2, [r3, #0]
    7a5a:	2316      	movs	r3, #22
    7a5c:	18fb      	adds	r3, r7, r3
    7a5e:	881b      	ldrh	r3, [r3, #0]
    7a60:	18d2      	adds	r2, r2, r3
    7a62:	23b9      	movs	r3, #185	; 0xb9
    7a64:	00db      	lsls	r3, r3, #3
    7a66:	429a      	cmp	r2, r3
    7a68:	dd07      	ble.n	7a7a <spi_write+0xd2>
    7a6a:	1dbb      	adds	r3, r7, #6
    7a6c:	2216      	movs	r2, #22
    7a6e:	18ba      	adds	r2, r7, r2
    7a70:	8812      	ldrh	r2, [r2, #0]
    7a72:	21b9      	movs	r1, #185	; 0xb9
    7a74:	00c9      	lsls	r1, r1, #3
    7a76:	1a8a      	subs	r2, r1, r2
    7a78:	801a      	strh	r2, [r3, #0]
			memcpy(&spi.wbuf[cnt],tx_buf,len);  cnt=cnt+len;
    7a7a:	2316      	movs	r3, #22
    7a7c:	18fb      	adds	r3, r7, r3
    7a7e:	881a      	ldrh	r2, [r3, #0]
    7a80:	4b32      	ldr	r3, [pc, #200]	; (7b4c <spi_write+0x1a4>)
    7a82:	18d0      	adds	r0, r2, r3
    7a84:	1dbb      	adds	r3, r7, #6
    7a86:	881a      	ldrh	r2, [r3, #0]
    7a88:	68bb      	ldr	r3, [r7, #8]
    7a8a:	0019      	movs	r1, r3
    7a8c:	4b30      	ldr	r3, [pc, #192]	; (7b50 <spi_write+0x1a8>)
    7a8e:	4798      	blx	r3
    7a90:	2316      	movs	r3, #22
    7a92:	18fb      	adds	r3, r7, r3
    7a94:	2216      	movs	r2, #22
    7a96:	18b9      	adds	r1, r7, r2
    7a98:	1dba      	adds	r2, r7, #6
    7a9a:	8809      	ldrh	r1, [r1, #0]
    7a9c:	8812      	ldrh	r2, [r2, #0]
    7a9e:	188a      	adds	r2, r1, r2
    7aa0:	801a      	strh	r2, [r3, #0]
							
			spi.wx = cnt; 
    7aa2:	4b2a      	ldr	r3, [pc, #168]	; (7b4c <spi_write+0x1a4>)
    7aa4:	2216      	movs	r2, #22
    7aa6:	18ba      	adds	r2, r7, r2
    7aa8:	492a      	ldr	r1, [pc, #168]	; (7b54 <spi_write+0x1ac>)
    7aaa:	8812      	ldrh	r2, [r2, #0]
    7aac:	525a      	strh	r2, [r3, r1]
			spi.wn = 0;
    7aae:	4b27      	ldr	r3, [pc, #156]	; (7b4c <spi_write+0x1a4>)
    7ab0:	4a29      	ldr	r2, [pc, #164]	; (7b58 <spi_write+0x1b0>)
    7ab2:	2100      	movs	r1, #0
    7ab4:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7ab6:	4a25      	ldr	r2, [pc, #148]	; (7b4c <spi_write+0x1a4>)
    7ab8:	23b9      	movs	r3, #185	; 0xb9
    7aba:	011b      	lsls	r3, r3, #4
    7abc:	2100      	movs	r1, #0
    7abe:	52d1      	strh	r1, [r2, r3]
							
			if(spi.wx>MAX_SIZE_BUF_SPI)			{spi.wx=MAX_SIZE_BUF_SPI;}
    7ac0:	4b22      	ldr	r3, [pc, #136]	; (7b4c <spi_write+0x1a4>)
    7ac2:	4a24      	ldr	r2, [pc, #144]	; (7b54 <spi_write+0x1ac>)
    7ac4:	5a9a      	ldrh	r2, [r3, r2]
    7ac6:	23b9      	movs	r3, #185	; 0xb9
    7ac8:	00db      	lsls	r3, r3, #3
    7aca:	429a      	cmp	r2, r3
    7acc:	d904      	bls.n	7ad8 <spi_write+0x130>
    7ace:	4b1f      	ldr	r3, [pc, #124]	; (7b4c <spi_write+0x1a4>)
    7ad0:	4a20      	ldr	r2, [pc, #128]	; (7b54 <spi_write+0x1ac>)
    7ad2:	21b9      	movs	r1, #185	; 0xb9
    7ad4:	00c9      	lsls	r1, r1, #3
    7ad6:	5299      	strh	r1, [r3, r2]
			st_read++;
    7ad8:	4b1b      	ldr	r3, [pc, #108]	; (7b48 <spi_write+0x1a0>)
    7ada:	781b      	ldrb	r3, [r3, #0]
    7adc:	3301      	adds	r3, #1
    7ade:	b2da      	uxtb	r2, r3
    7ae0:	4b19      	ldr	r3, [pc, #100]	; (7b48 <spi_write+0x1a0>)
    7ae2:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7ae4:	4a1d      	ldr	r2, [pc, #116]	; (7b5c <spi_write+0x1b4>)
    7ae6:	7d93      	ldrb	r3, [r2, #22]
    7ae8:	2101      	movs	r1, #1
    7aea:	430b      	orrs	r3, r1
    7aec:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;							
    7aee:	4a1b      	ldr	r2, [pc, #108]	; (7b5c <spi_write+0x1b4>)
    7af0:	7d93      	ldrb	r3, [r2, #22]
    7af2:	2104      	movs	r1, #4
    7af4:	430b      	orrs	r3, r1
    7af6:	7593      	strb	r3, [r2, #22]
		break;
    7af8:	e021      	b.n	7b3e <spi_write+0x196>
		case 1:	
			if(spi.wx)							{return 0;}
    7afa:	4b14      	ldr	r3, [pc, #80]	; (7b4c <spi_write+0x1a4>)
    7afc:	4a15      	ldr	r2, [pc, #84]	; (7b54 <spi_write+0x1ac>)
    7afe:	5a9b      	ldrh	r3, [r3, r2]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d001      	beq.n	7b08 <spi_write+0x160>
    7b04:	2300      	movs	r3, #0
    7b06:	e01b      	b.n	7b40 <spi_write+0x198>
			if(spi.rn!=spi.wn)					{return 0;}
    7b08:	4a10      	ldr	r2, [pc, #64]	; (7b4c <spi_write+0x1a4>)
    7b0a:	23b9      	movs	r3, #185	; 0xb9
    7b0c:	011b      	lsls	r3, r3, #4
    7b0e:	5ad2      	ldrh	r2, [r2, r3]
    7b10:	4b0e      	ldr	r3, [pc, #56]	; (7b4c <spi_write+0x1a4>)
    7b12:	4911      	ldr	r1, [pc, #68]	; (7b58 <spi_write+0x1b0>)
    7b14:	5a5b      	ldrh	r3, [r3, r1]
    7b16:	429a      	cmp	r2, r3
    7b18:	d001      	beq.n	7b1e <spi_write+0x176>
    7b1a:	2300      	movs	r3, #0
    7b1c:	e010      	b.n	7b40 <spi_write+0x198>
			st_read--;
    7b1e:	4b0a      	ldr	r3, [pc, #40]	; (7b48 <spi_write+0x1a0>)
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	3b01      	subs	r3, #1
    7b24:	b2da      	uxtb	r2, r3
    7b26:	4b08      	ldr	r3, [pc, #32]	; (7b48 <spi_write+0x1a0>)
    7b28:	701a      	strb	r2, [r3, #0]
			CS_set();
    7b2a:	23c0      	movs	r3, #192	; 0xc0
    7b2c:	05db      	lsls	r3, r3, #23
    7b2e:	2280      	movs	r2, #128	; 0x80
    7b30:	0452      	lsls	r2, r2, #17
    7b32:	619a      	str	r2, [r3, #24]
			
			return (spi.rn);
    7b34:	4a05      	ldr	r2, [pc, #20]	; (7b4c <spi_write+0x1a4>)
    7b36:	23b9      	movs	r3, #185	; 0xb9
    7b38:	011b      	lsls	r3, r3, #4
    7b3a:	5ad3      	ldrh	r3, [r2, r3]
    7b3c:	e000      	b.n	7b40 <spi_write+0x198>
		break;
	}
	return 0;
    7b3e:	2300      	movs	r3, #0
}
    7b40:	0018      	movs	r0, r3
    7b42:	46bd      	mov	sp, r7
    7b44:	b007      	add	sp, #28
    7b46:	bd90      	pop	{r4, r7, pc}
    7b48:	20000469 	.word	0x20000469
    7b4c:	20002654 	.word	0x20002654
    7b50:	0000c8b9 	.word	0x0000c8b9
    7b54:	00000b94 	.word	0x00000b94
    7b58:	00000b92 	.word	0x00000b92
    7b5c:	42001c00 	.word	0x42001c00

00007b60 <spi_read>:

WORD spi_read(uint16_t addr, uint8_t cb, uint8_t *rx_buf, uint16_t len)
{
    7b60:	b590      	push	{r4, r7, lr}
    7b62:	b087      	sub	sp, #28
    7b64:	af00      	add	r7, sp, #0
    7b66:	0004      	movs	r4, r0
    7b68:	0008      	movs	r0, r1
    7b6a:	60ba      	str	r2, [r7, #8]
    7b6c:	0019      	movs	r1, r3
    7b6e:	230e      	movs	r3, #14
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	1c22      	adds	r2, r4, #0
    7b74:	801a      	strh	r2, [r3, #0]
    7b76:	230d      	movs	r3, #13
    7b78:	18fb      	adds	r3, r7, r3
    7b7a:	1c02      	adds	r2, r0, #0
    7b7c:	701a      	strb	r2, [r3, #0]
    7b7e:	1dbb      	adds	r3, r7, #6
    7b80:	1c0a      	adds	r2, r1, #0
    7b82:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7b84:	2316      	movs	r3, #22
    7b86:	18fb      	adds	r3, r7, r3
    7b88:	2200      	movs	r2, #0
    7b8a:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	switch (st_read)
    7b8c:	4b50      	ldr	r3, [pc, #320]	; (7cd0 <spi_read+0x170>)
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	2b00      	cmp	r3, #0
    7b92:	d002      	beq.n	7b9a <spi_read+0x3a>
    7b94:	2b01      	cmp	r3, #1
    7b96:	d066      	beq.n	7c66 <spi_read+0x106>
    7b98:	e094      	b.n	7cc4 <spi_read+0x164>
	{
		case 0:
			CS_clr();
    7b9a:	23c0      	movs	r3, #192	; 0xc0
    7b9c:	05db      	lsls	r3, r3, #23
    7b9e:	2280      	movs	r2, #128	; 0x80
    7ba0:	0452      	lsls	r2, r2, #17
    7ba2:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    7ba4:	2316      	movs	r3, #22
    7ba6:	18fb      	adds	r3, r7, r3
    7ba8:	881b      	ldrh	r3, [r3, #0]
    7baa:	220e      	movs	r2, #14
    7bac:	18ba      	adds	r2, r7, r2
    7bae:	8812      	ldrh	r2, [r2, #0]
    7bb0:	0a12      	lsrs	r2, r2, #8
    7bb2:	b292      	uxth	r2, r2
    7bb4:	b2d1      	uxtb	r1, r2
    7bb6:	4a47      	ldr	r2, [pc, #284]	; (7cd4 <spi_read+0x174>)
    7bb8:	54d1      	strb	r1, [r2, r3]
    7bba:	2316      	movs	r3, #22
    7bbc:	18fb      	adds	r3, r7, r3
    7bbe:	881a      	ldrh	r2, [r3, #0]
    7bc0:	2316      	movs	r3, #22
    7bc2:	18fb      	adds	r3, r7, r3
    7bc4:	3201      	adds	r2, #1
    7bc6:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7bc8:	2316      	movs	r3, #22
    7bca:	18fb      	adds	r3, r7, r3
    7bcc:	881b      	ldrh	r3, [r3, #0]
    7bce:	220e      	movs	r2, #14
    7bd0:	18ba      	adds	r2, r7, r2
    7bd2:	8812      	ldrh	r2, [r2, #0]
    7bd4:	b2d1      	uxtb	r1, r2
    7bd6:	4a3f      	ldr	r2, [pc, #252]	; (7cd4 <spi_read+0x174>)
    7bd8:	54d1      	strb	r1, [r2, r3]
    7bda:	2316      	movs	r3, #22
    7bdc:	18fb      	adds	r3, r7, r3
    7bde:	881a      	ldrh	r2, [r3, #0]
    7be0:	2316      	movs	r3, #22
    7be2:	18fb      	adds	r3, r7, r3
    7be4:	3201      	adds	r2, #1
    7be6:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | READ_REG | LEN_N_BYTES;		cnt++;
    7be8:	2316      	movs	r3, #22
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	881b      	ldrh	r3, [r3, #0]
    7bee:	4a39      	ldr	r2, [pc, #228]	; (7cd4 <spi_read+0x174>)
    7bf0:	210d      	movs	r1, #13
    7bf2:	1879      	adds	r1, r7, r1
    7bf4:	7809      	ldrb	r1, [r1, #0]
    7bf6:	54d1      	strb	r1, [r2, r3]
    7bf8:	2316      	movs	r3, #22
    7bfa:	18fb      	adds	r3, r7, r3
    7bfc:	881a      	ldrh	r2, [r3, #0]
    7bfe:	2316      	movs	r3, #22
    7c00:	18fb      	adds	r3, r7, r3
    7c02:	3201      	adds	r2, #1
    7c04:	801a      	strh	r2, [r3, #0]
			spi.wx = cnt + len;
    7c06:	2316      	movs	r3, #22
    7c08:	18fa      	adds	r2, r7, r3
    7c0a:	1dbb      	adds	r3, r7, #6
    7c0c:	8812      	ldrh	r2, [r2, #0]
    7c0e:	881b      	ldrh	r3, [r3, #0]
    7c10:	18d3      	adds	r3, r2, r3
    7c12:	b299      	uxth	r1, r3
    7c14:	4b2f      	ldr	r3, [pc, #188]	; (7cd4 <spi_read+0x174>)
    7c16:	4a30      	ldr	r2, [pc, #192]	; (7cd8 <spi_read+0x178>)
    7c18:	5299      	strh	r1, [r3, r2]
			spi.wn = 0;
    7c1a:	4b2e      	ldr	r3, [pc, #184]	; (7cd4 <spi_read+0x174>)
    7c1c:	4a2f      	ldr	r2, [pc, #188]	; (7cdc <spi_read+0x17c>)
    7c1e:	2100      	movs	r1, #0
    7c20:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7c22:	4a2c      	ldr	r2, [pc, #176]	; (7cd4 <spi_read+0x174>)
    7c24:	23b9      	movs	r3, #185	; 0xb9
    7c26:	011b      	lsls	r3, r3, #4
    7c28:	2100      	movs	r1, #0
    7c2a:	52d1      	strh	r1, [r2, r3]
			if(spi.wx>MAX_SIZE_BUF_SPI) {spi.wx=MAX_SIZE_BUF_SPI;}
    7c2c:	4b29      	ldr	r3, [pc, #164]	; (7cd4 <spi_read+0x174>)
    7c2e:	4a2a      	ldr	r2, [pc, #168]	; (7cd8 <spi_read+0x178>)
    7c30:	5a9a      	ldrh	r2, [r3, r2]
    7c32:	23b9      	movs	r3, #185	; 0xb9
    7c34:	00db      	lsls	r3, r3, #3
    7c36:	429a      	cmp	r2, r3
    7c38:	d904      	bls.n	7c44 <spi_read+0xe4>
    7c3a:	4b26      	ldr	r3, [pc, #152]	; (7cd4 <spi_read+0x174>)
    7c3c:	4a26      	ldr	r2, [pc, #152]	; (7cd8 <spi_read+0x178>)
    7c3e:	21b9      	movs	r1, #185	; 0xb9
    7c40:	00c9      	lsls	r1, r1, #3
    7c42:	5299      	strh	r1, [r3, r2]
			st_read++;
    7c44:	4b22      	ldr	r3, [pc, #136]	; (7cd0 <spi_read+0x170>)
    7c46:	781b      	ldrb	r3, [r3, #0]
    7c48:	3301      	adds	r3, #1
    7c4a:	b2da      	uxtb	r2, r3
    7c4c:	4b20      	ldr	r3, [pc, #128]	; (7cd0 <spi_read+0x170>)
    7c4e:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7c50:	4a23      	ldr	r2, [pc, #140]	; (7ce0 <spi_read+0x180>)
    7c52:	7d93      	ldrb	r3, [r2, #22]
    7c54:	2101      	movs	r1, #1
    7c56:	430b      	orrs	r3, r1
    7c58:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;
    7c5a:	4a21      	ldr	r2, [pc, #132]	; (7ce0 <spi_read+0x180>)
    7c5c:	7d93      	ldrb	r3, [r2, #22]
    7c5e:	2104      	movs	r1, #4
    7c60:	430b      	orrs	r3, r1
    7c62:	7593      	strb	r3, [r2, #22]
		break;
    7c64:	e02e      	b.n	7cc4 <spi_read+0x164>
		case 1:
			if(spi.wx)							{return 0;}
    7c66:	4b1b      	ldr	r3, [pc, #108]	; (7cd4 <spi_read+0x174>)
    7c68:	4a1b      	ldr	r2, [pc, #108]	; (7cd8 <spi_read+0x178>)
    7c6a:	5a9b      	ldrh	r3, [r3, r2]
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d001      	beq.n	7c74 <spi_read+0x114>
    7c70:	2300      	movs	r3, #0
    7c72:	e028      	b.n	7cc6 <spi_read+0x166>
			if(spi.rn!=spi.wn)					{return 0;}
    7c74:	4a17      	ldr	r2, [pc, #92]	; (7cd4 <spi_read+0x174>)
    7c76:	23b9      	movs	r3, #185	; 0xb9
    7c78:	011b      	lsls	r3, r3, #4
    7c7a:	5ad2      	ldrh	r2, [r2, r3]
    7c7c:	4b15      	ldr	r3, [pc, #84]	; (7cd4 <spi_read+0x174>)
    7c7e:	4917      	ldr	r1, [pc, #92]	; (7cdc <spi_read+0x17c>)
    7c80:	5a5b      	ldrh	r3, [r3, r1]
    7c82:	429a      	cmp	r2, r3
    7c84:	d001      	beq.n	7c8a <spi_read+0x12a>
    7c86:	2300      	movs	r3, #0
    7c88:	e01d      	b.n	7cc6 <spi_read+0x166>
			memcpy(rx_buf,&spi.rbuf[3],(spi.rn-3));
    7c8a:	4a12      	ldr	r2, [pc, #72]	; (7cd4 <spi_read+0x174>)
    7c8c:	23b9      	movs	r3, #185	; 0xb9
    7c8e:	011b      	lsls	r3, r3, #4
    7c90:	5ad3      	ldrh	r3, [r2, r3]
    7c92:	3b03      	subs	r3, #3
    7c94:	001a      	movs	r2, r3
    7c96:	4913      	ldr	r1, [pc, #76]	; (7ce4 <spi_read+0x184>)
    7c98:	68bb      	ldr	r3, [r7, #8]
    7c9a:	0018      	movs	r0, r3
    7c9c:	4b12      	ldr	r3, [pc, #72]	; (7ce8 <spi_read+0x188>)
    7c9e:	4798      	blx	r3
			st_read--;
    7ca0:	4b0b      	ldr	r3, [pc, #44]	; (7cd0 <spi_read+0x170>)
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	3b01      	subs	r3, #1
    7ca6:	b2da      	uxtb	r2, r3
    7ca8:	4b09      	ldr	r3, [pc, #36]	; (7cd0 <spi_read+0x170>)
    7caa:	701a      	strb	r2, [r3, #0]
			CS_set();	
    7cac:	23c0      	movs	r3, #192	; 0xc0
    7cae:	05db      	lsls	r3, r3, #23
    7cb0:	2280      	movs	r2, #128	; 0x80
    7cb2:	0452      	lsls	r2, r2, #17
    7cb4:	619a      	str	r2, [r3, #24]
			return (spi.rn-3);
    7cb6:	4a07      	ldr	r2, [pc, #28]	; (7cd4 <spi_read+0x174>)
    7cb8:	23b9      	movs	r3, #185	; 0xb9
    7cba:	011b      	lsls	r3, r3, #4
    7cbc:	5ad3      	ldrh	r3, [r2, r3]
    7cbe:	3b03      	subs	r3, #3
    7cc0:	b29b      	uxth	r3, r3
    7cc2:	e000      	b.n	7cc6 <spi_read+0x166>
		break;
	}
	return 0;
    7cc4:	2300      	movs	r3, #0
}
    7cc6:	0018      	movs	r0, r3
    7cc8:	46bd      	mov	sp, r7
    7cca:	b007      	add	sp, #28
    7ccc:	bd90      	pop	{r4, r7, pc}
    7cce:	46c0      	nop			; (mov r8, r8)
    7cd0:	2000046a 	.word	0x2000046a
    7cd4:	20002654 	.word	0x20002654
    7cd8:	00000b94 	.word	0x00000b94
    7cdc:	00000b92 	.word	0x00000b92
    7ce0:	42001c00 	.word	0x42001c00
    7ce4:	20002c1f 	.word	0x20002c1f
    7ce8:	0000c8b9 	.word	0x0000c8b9

00007cec <SERCOM5_Handler>:

void SERCOM5_Handler(void)
//-----------------------------------------------------------------------------
{
    7cec:	b580      	push	{r7, lr}
    7cee:	af00      	add	r7, sp, #0
	
	if(SERCOM5->SPI.INTFLAG.bit.RXC)
    7cf0:	4b37      	ldr	r3, [pc, #220]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7cf2:	7e1b      	ldrb	r3, [r3, #24]
    7cf4:	075b      	lsls	r3, r3, #29
    7cf6:	0fdb      	lsrs	r3, r3, #31
    7cf8:	b2db      	uxtb	r3, r3
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d029      	beq.n	7d52 <SERCOM5_Handler+0x66>
	{
		spi.rbuf[spi.rn] = SERCOM5->SPI.DATA.reg;
    7cfe:	4a35      	ldr	r2, [pc, #212]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d00:	23b9      	movs	r3, #185	; 0xb9
    7d02:	011b      	lsls	r3, r3, #4
    7d04:	5ad3      	ldrh	r3, [r2, r3]
    7d06:	0018      	movs	r0, r3
    7d08:	4b31      	ldr	r3, [pc, #196]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d0c:	b2d9      	uxtb	r1, r3
    7d0e:	4a31      	ldr	r2, [pc, #196]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d10:	23b9      	movs	r3, #185	; 0xb9
    7d12:	00db      	lsls	r3, r3, #3
    7d14:	1812      	adds	r2, r2, r0
    7d16:	18d3      	adds	r3, r2, r3
    7d18:	1c0a      	adds	r2, r1, #0
    7d1a:	701a      	strb	r2, [r3, #0]
		spi.rn++;	
    7d1c:	4a2d      	ldr	r2, [pc, #180]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d1e:	23b9      	movs	r3, #185	; 0xb9
    7d20:	011b      	lsls	r3, r3, #4
    7d22:	5ad3      	ldrh	r3, [r2, r3]
    7d24:	3301      	adds	r3, #1
    7d26:	b299      	uxth	r1, r3
    7d28:	4a2a      	ldr	r2, [pc, #168]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d2a:	23b9      	movs	r3, #185	; 0xb9
    7d2c:	011b      	lsls	r3, r3, #4
    7d2e:	52d1      	strh	r1, [r2, r3]
		spi.RXC_sum++;
    7d30:	4b28      	ldr	r3, [pc, #160]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d32:	4a29      	ldr	r2, [pc, #164]	; (7dd8 <SERCOM5_Handler+0xec>)
    7d34:	589b      	ldr	r3, [r3, r2]
    7d36:	1c5a      	adds	r2, r3, #1
    7d38:	4b26      	ldr	r3, [pc, #152]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d3a:	4927      	ldr	r1, [pc, #156]	; (7dd8 <SERCOM5_Handler+0xec>)
    7d3c:	505a      	str	r2, [r3, r1]
		if(!spi.wx) 
    7d3e:	4b25      	ldr	r3, [pc, #148]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d40:	4a26      	ldr	r2, [pc, #152]	; (7ddc <SERCOM5_Handler+0xf0>)
    7d42:	5a9b      	ldrh	r3, [r3, r2]
    7d44:	2b00      	cmp	r3, #0
    7d46:	d104      	bne.n	7d52 <SERCOM5_Handler+0x66>
		{
			SERCOM5->SPI.INTENCLR.bit.RXC =0x01;
    7d48:	4a21      	ldr	r2, [pc, #132]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7d4a:	7d13      	ldrb	r3, [r2, #20]
    7d4c:	2104      	movs	r1, #4
    7d4e:	430b      	orrs	r3, r1
    7d50:	7513      	strb	r3, [r2, #20]
		}	
	}
	if(SERCOM5->SPI.INTFLAG.bit.DRE)
    7d52:	4b1f      	ldr	r3, [pc, #124]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7d54:	7e1b      	ldrb	r3, [r3, #24]
    7d56:	07db      	lsls	r3, r3, #31
    7d58:	0fdb      	lsrs	r3, r3, #31
    7d5a:	b2db      	uxtb	r3, r3
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d034      	beq.n	7dca <SERCOM5_Handler+0xde>
	{
		spi.DRE_sum++;
    7d60:	4b1c      	ldr	r3, [pc, #112]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d62:	4a1f      	ldr	r2, [pc, #124]	; (7de0 <SERCOM5_Handler+0xf4>)
    7d64:	589b      	ldr	r3, [r3, r2]
    7d66:	1c5a      	adds	r2, r3, #1
    7d68:	4b1a      	ldr	r3, [pc, #104]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d6a:	491d      	ldr	r1, [pc, #116]	; (7de0 <SERCOM5_Handler+0xf4>)
    7d6c:	505a      	str	r2, [r3, r1]
		if(spi.rn!=spi.wn){return;}
    7d6e:	4a19      	ldr	r2, [pc, #100]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d70:	23b9      	movs	r3, #185	; 0xb9
    7d72:	011b      	lsls	r3, r3, #4
    7d74:	5ad2      	ldrh	r2, [r2, r3]
    7d76:	4b17      	ldr	r3, [pc, #92]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d78:	491a      	ldr	r1, [pc, #104]	; (7de4 <SERCOM5_Handler+0xf8>)
    7d7a:	5a5b      	ldrh	r3, [r3, r1]
    7d7c:	429a      	cmp	r2, r3
    7d7e:	d123      	bne.n	7dc8 <SERCOM5_Handler+0xdc>
		if(spi.wx)
    7d80:	4b14      	ldr	r3, [pc, #80]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d82:	4a16      	ldr	r2, [pc, #88]	; (7ddc <SERCOM5_Handler+0xf0>)
    7d84:	5a9b      	ldrh	r3, [r3, r2]
    7d86:	2b00      	cmp	r3, #0
    7d88:	d018      	beq.n	7dbc <SERCOM5_Handler+0xd0>
		{ 
			SERCOM5->SPI.DATA.reg=spi.wbuf[spi.wn];
    7d8a:	4b11      	ldr	r3, [pc, #68]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7d8c:	4a11      	ldr	r2, [pc, #68]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d8e:	4915      	ldr	r1, [pc, #84]	; (7de4 <SERCOM5_Handler+0xf8>)
    7d90:	5a52      	ldrh	r2, [r2, r1]
    7d92:	0011      	movs	r1, r2
    7d94:	4a0f      	ldr	r2, [pc, #60]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d96:	5c52      	ldrb	r2, [r2, r1]
    7d98:	629a      	str	r2, [r3, #40]	; 0x28
			spi.wn++;
    7d9a:	4b0e      	ldr	r3, [pc, #56]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7d9c:	4a11      	ldr	r2, [pc, #68]	; (7de4 <SERCOM5_Handler+0xf8>)
    7d9e:	5a9b      	ldrh	r3, [r3, r2]
    7da0:	3301      	adds	r3, #1
    7da2:	b299      	uxth	r1, r3
    7da4:	4b0b      	ldr	r3, [pc, #44]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7da6:	4a0f      	ldr	r2, [pc, #60]	; (7de4 <SERCOM5_Handler+0xf8>)
    7da8:	5299      	strh	r1, [r3, r2]
			spi.wx--;
    7daa:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7dac:	4a0b      	ldr	r2, [pc, #44]	; (7ddc <SERCOM5_Handler+0xf0>)
    7dae:	5a9b      	ldrh	r3, [r3, r2]
    7db0:	3b01      	subs	r3, #1
    7db2:	b299      	uxth	r1, r3
    7db4:	4b07      	ldr	r3, [pc, #28]	; (7dd4 <SERCOM5_Handler+0xe8>)
    7db6:	4a09      	ldr	r2, [pc, #36]	; (7ddc <SERCOM5_Handler+0xf0>)
    7db8:	5299      	strh	r1, [r3, r2]
    7dba:	e006      	b.n	7dca <SERCOM5_Handler+0xde>
		}
		else {SERCOM5->SPI.INTENCLR.bit.DRE =0x01;}
    7dbc:	4a04      	ldr	r2, [pc, #16]	; (7dd0 <SERCOM5_Handler+0xe4>)
    7dbe:	7d13      	ldrb	r3, [r2, #20]
    7dc0:	2101      	movs	r1, #1
    7dc2:	430b      	orrs	r3, r1
    7dc4:	7513      	strb	r3, [r2, #20]
    7dc6:	e000      	b.n	7dca <SERCOM5_Handler+0xde>
		if(spi.rn!=spi.wn){return;}
    7dc8:	46c0      	nop			; (mov r8, r8)
	}
}
    7dca:	46bd      	mov	sp, r7
    7dcc:	bd80      	pop	{r7, pc}
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	42001c00 	.word	0x42001c00
    7dd4:	20002654 	.word	0x20002654
    7dd8:	00000b9c 	.word	0x00000b9c
    7ddc:	00000b94 	.word	0x00000b94
    7de0:	00000b98 	.word	0x00000b98
    7de4:	00000b92 	.word	0x00000b92

00007de8 <sys_clock_init_USE_OSC8M>:



void sys_clock_init_USE_OSC8M(void)
//-----------------------------------------------------------------------------
{
    7de8:	b580      	push	{r7, lr}
    7dea:	b082      	sub	sp, #8
    7dec:	af00      	add	r7, sp, #0
	uint32_t temp = SYSCTRL->OSC8M.reg;
    7dee:	4b0c      	ldr	r3, [pc, #48]	; (7e20 <sys_clock_init_USE_OSC8M+0x38>)
    7df0:	6a1b      	ldr	r3, [r3, #32]
    7df2:	607b      	str	r3, [r7, #4]
	temp &= ~((uint32_t)0x0000FFFF);
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	0c1b      	lsrs	r3, r3, #16
    7df8:	041b      	lsls	r3, r3, #16
    7dfa:	607b      	str	r3, [r7, #4]
	temp |= SYSCTRL_OSC8M_PRESC(0x00) | SYSCTRL_OSC8M_ENABLE;
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	2202      	movs	r2, #2
    7e00:	4313      	orrs	r3, r2
    7e02:	607b      	str	r3, [r7, #4]
	SYSCTRL->OSC8M.reg = temp;
    7e04:	4b06      	ldr	r3, [pc, #24]	; (7e20 <sys_clock_init_USE_OSC8M+0x38>)
    7e06:	687a      	ldr	r2, [r7, #4]
    7e08:	621a      	str	r2, [r3, #32]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY)){};
    7e0a:	46c0      	nop			; (mov r8, r8)
    7e0c:	4b04      	ldr	r3, [pc, #16]	; (7e20 <sys_clock_init_USE_OSC8M+0x38>)
    7e0e:	68db      	ldr	r3, [r3, #12]
    7e10:	2208      	movs	r2, #8
    7e12:	4013      	ands	r3, r2
    7e14:	d0fa      	beq.n	7e0c <sys_clock_init_USE_OSC8M+0x24>
}
    7e16:	46c0      	nop			; (mov r8, r8)
    7e18:	46bd      	mov	sp, r7
    7e1a:	b002      	add	sp, #8
    7e1c:	bd80      	pop	{r7, pc}
    7e1e:	46c0      	nop			; (mov r8, r8)
    7e20:	40000800 	.word	0x40000800

00007e24 <sys_clock_init_USE_DFLL48M>:


void sys_clock_init_USE_DFLL48M(void)
{
    7e24:	b580      	push	{r7, lr}
    7e26:	b082      	sub	sp, #8
    7e28:	af00      	add	r7, sp, #0
	uint32_t coarse, fine;

	NVMCTRL->CTRLB.bit.RWS=2; //this is needed for 48 MHz
    7e2a:	4a2d      	ldr	r2, [pc, #180]	; (7ee0 <sys_clock_init_USE_DFLL48M+0xbc>)
    7e2c:	6853      	ldr	r3, [r2, #4]
    7e2e:	211e      	movs	r1, #30
    7e30:	438b      	bics	r3, r1
    7e32:	2104      	movs	r1, #4
    7e34:	430b      	orrs	r3, r1
    7e36:	6053      	str	r3, [r2, #4]

	coarse=NVM_READ_CAL(DFLL48M_COARSE_CAL); //read coarse calibration value from NVM Software Calibration Area Map
    7e38:	4b2a      	ldr	r3, [pc, #168]	; (7ee4 <sys_clock_init_USE_DFLL48M+0xc0>)
    7e3a:	681b      	ldr	r3, [r3, #0]
    7e3c:	0e9b      	lsrs	r3, r3, #26
    7e3e:	607b      	str	r3, [r7, #4]
	fine  =NVM_READ_CAL(DFLL48M_FINE_CAL  ); //read fine calibration value from NVM Software Calibration Area Map
    7e40:	4b29      	ldr	r3, [pc, #164]	; (7ee8 <sys_clock_init_USE_DFLL48M+0xc4>)
    7e42:	681b      	ldr	r3, [r3, #0]
    7e44:	059b      	lsls	r3, r3, #22
    7e46:	0d9b      	lsrs	r3, r3, #22
    7e48:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLCTRL.reg=0; // See Errata 9905
    7e4a:	4b28      	ldr	r3, [pc, #160]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e4c:	2200      	movs	r2, #0
    7e4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; }
    7e50:	46c0      	nop			; (mov r8, r8)
    7e52:	4b26      	ldr	r3, [pc, #152]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e54:	68db      	ldr	r3, [r3, #12]
    7e56:	2210      	movs	r2, #16
    7e58:	4013      	ands	r3, r2
    7e5a:	d0fa      	beq.n	7e52 <sys_clock_init_USE_DFLL48M+0x2e>

	SYSCTRL->DFLLVAL.reg=SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine); //this will set DFLL48 close to 48 MHz
    7e5c:	4b23      	ldr	r3, [pc, #140]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e5e:	687a      	ldr	r2, [r7, #4]
    7e60:	0292      	lsls	r2, r2, #10
    7e62:	0412      	lsls	r2, r2, #16
    7e64:	0c11      	lsrs	r1, r2, #16
    7e66:	683a      	ldr	r2, [r7, #0]
    7e68:	0592      	lsls	r2, r2, #22
    7e6a:	0d92      	lsrs	r2, r2, #22
    7e6c:	430a      	orrs	r2, r1
    7e6e:	629a      	str	r2, [r3, #40]	; 0x28
	
	SYSCTRL->DFLLCTRL.bit.STABLE	=1; // Stable frequency (FINE calibration register value will be fixed after a fine lock)
    7e70:	4a1e      	ldr	r2, [pc, #120]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e72:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e74:	2108      	movs	r1, #8
    7e76:	430b      	orrs	r3, r1
    7e78:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.BPLCKC	=1; // Bypass coarse clock enable
    7e7a:	4a1c      	ldr	r2, [pc, #112]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e7c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e7e:	2180      	movs	r1, #128	; 0x80
    7e80:	00c9      	lsls	r1, r1, #3
    7e82:	430b      	orrs	r3, r1
    7e84:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.MODE		=0; // Open loop mode
    7e86:	4a19      	ldr	r2, [pc, #100]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e88:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e8a:	2104      	movs	r1, #4
    7e8c:	438b      	bics	r3, r1
    7e8e:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ONDEMAND  =0; // On Demand is disabled, the oscillator will always be running when enabled.
    7e90:	4a16      	ldr	r2, [pc, #88]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e92:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e94:	2180      	movs	r1, #128	; 0x80
    7e96:	438b      	bics	r3, r1
    7e98:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ENABLE	=1; // Enable DFLL48
    7e9a:	4a14      	ldr	r2, [pc, #80]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7e9c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7e9e:	2102      	movs	r1, #2
    7ea0:	430b      	orrs	r3, r1
    7ea2:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.CCDIS		=1; // Chill Cycle is disabled
    7ea4:	4a11      	ldr	r2, [pc, #68]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7ea6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7ea8:	2180      	movs	r1, #128	; 0x80
    7eaa:	0049      	lsls	r1, r1, #1
    7eac:	430b      	orrs	r3, r1
    7eae:	8493      	strh	r3, [r2, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; } // wait till DFLL is stable and ready to be used as a clock source
    7eb0:	46c0      	nop			; (mov r8, r8)
    7eb2:	4b0e      	ldr	r3, [pc, #56]	; (7eec <sys_clock_init_USE_DFLL48M+0xc8>)
    7eb4:	68db      	ldr	r3, [r3, #12]
    7eb6:	2210      	movs	r2, #16
    7eb8:	4013      	ands	r3, r2
    7eba:	d0fa      	beq.n	7eb2 <sys_clock_init_USE_DFLL48M+0x8e>

	GCLK->GENDIV.reg =GCLK_GENDIV_ID (GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENDIV_DIV (MAIN_CLK_DEVIDER);//16MHz
    7ebc:	4b0c      	ldr	r3, [pc, #48]	; (7ef0 <sys_clock_init_USE_DFLL48M+0xcc>)
    7ebe:	2280      	movs	r2, #128	; 0x80
    7ec0:	0052      	lsls	r2, r2, #1
    7ec2:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg=GCLK_GENCTRL_ID(GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENCTRL_SRC (GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    7ec4:	4b0a      	ldr	r3, [pc, #40]	; (7ef0 <sys_clock_init_USE_DFLL48M+0xcc>)
    7ec6:	4a0b      	ldr	r2, [pc, #44]	; (7ef4 <sys_clock_init_USE_DFLL48M+0xd0>)
    7ec8:	605a      	str	r2, [r3, #4]
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) { ; }
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	4b08      	ldr	r3, [pc, #32]	; (7ef0 <sys_clock_init_USE_DFLL48M+0xcc>)
    7ece:	785b      	ldrb	r3, [r3, #1]
    7ed0:	b2db      	uxtb	r3, r3
    7ed2:	b25b      	sxtb	r3, r3
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	dbf9      	blt.n	7ecc <sys_clock_init_USE_DFLL48M+0xa8>
}
    7ed8:	46c0      	nop			; (mov r8, r8)
    7eda:	46bd      	mov	sp, r7
    7edc:	b002      	add	sp, #8
    7ede:	bd80      	pop	{r7, pc}
    7ee0:	41004000 	.word	0x41004000
    7ee4:	00806024 	.word	0x00806024
    7ee8:	00806028 	.word	0x00806028
    7eec:	40000800 	.word	0x40000800
    7ef0:	40000c00 	.word	0x40000c00
    7ef4:	00210700 	.word	0x00210700

00007ef8 <__NVIC_EnableIRQ>:
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	0002      	movs	r2, r0
    7f00:	1dfb      	adds	r3, r7, #7
    7f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7f04:	1dfb      	adds	r3, r7, #7
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	2b7f      	cmp	r3, #127	; 0x7f
    7f0a:	d809      	bhi.n	7f20 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f0c:	4b06      	ldr	r3, [pc, #24]	; (7f28 <__NVIC_EnableIRQ+0x30>)
    7f0e:	1dfa      	adds	r2, r7, #7
    7f10:	7812      	ldrb	r2, [r2, #0]
    7f12:	0011      	movs	r1, r2
    7f14:	221f      	movs	r2, #31
    7f16:	400a      	ands	r2, r1
    7f18:	2101      	movs	r1, #1
    7f1a:	4091      	lsls	r1, r2
    7f1c:	000a      	movs	r2, r1
    7f1e:	601a      	str	r2, [r3, #0]
}
    7f20:	46c0      	nop			; (mov r8, r8)
    7f22:	46bd      	mov	sp, r7
    7f24:	b002      	add	sp, #8
    7f26:	bd80      	pop	{r7, pc}
    7f28:	e000e100 	.word	0xe000e100

00007f2c <__NVIC_DisableIRQ>:
{
    7f2c:	b580      	push	{r7, lr}
    7f2e:	b082      	sub	sp, #8
    7f30:	af00      	add	r7, sp, #0
    7f32:	0002      	movs	r2, r0
    7f34:	1dfb      	adds	r3, r7, #7
    7f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7f38:	1dfb      	adds	r3, r7, #7
    7f3a:	781b      	ldrb	r3, [r3, #0]
    7f3c:	2b7f      	cmp	r3, #127	; 0x7f
    7f3e:	d80e      	bhi.n	7f5e <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f40:	4909      	ldr	r1, [pc, #36]	; (7f68 <__NVIC_DisableIRQ+0x3c>)
    7f42:	1dfb      	adds	r3, r7, #7
    7f44:	781b      	ldrb	r3, [r3, #0]
    7f46:	001a      	movs	r2, r3
    7f48:	231f      	movs	r3, #31
    7f4a:	4013      	ands	r3, r2
    7f4c:	2201      	movs	r2, #1
    7f4e:	409a      	lsls	r2, r3
    7f50:	0013      	movs	r3, r2
    7f52:	2280      	movs	r2, #128	; 0x80
    7f54:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    7f56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f5a:	f3bf 8f6f 	isb	sy
}
    7f5e:	46c0      	nop			; (mov r8, r8)
    7f60:	46bd      	mov	sp, r7
    7f62:	b002      	add	sp, #8
    7f64:	bd80      	pop	{r7, pc}
    7f66:	46c0      	nop			; (mov r8, r8)
    7f68:	e000e100 	.word	0xe000e100

00007f6c <__NVIC_SetPriority>:
{
    7f6c:	b5b0      	push	{r4, r5, r7, lr}
    7f6e:	b082      	sub	sp, #8
    7f70:	af00      	add	r7, sp, #0
    7f72:	0002      	movs	r2, r0
    7f74:	6039      	str	r1, [r7, #0]
    7f76:	1dfb      	adds	r3, r7, #7
    7f78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7f7a:	1dfb      	adds	r3, r7, #7
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	2b7f      	cmp	r3, #127	; 0x7f
    7f80:	d828      	bhi.n	7fd4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f82:	4c2f      	ldr	r4, [pc, #188]	; (8040 <__NVIC_SetPriority+0xd4>)
    7f84:	1dfb      	adds	r3, r7, #7
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	b25b      	sxtb	r3, r3
    7f8a:	089b      	lsrs	r3, r3, #2
    7f8c:	492c      	ldr	r1, [pc, #176]	; (8040 <__NVIC_SetPriority+0xd4>)
    7f8e:	1dfa      	adds	r2, r7, #7
    7f90:	7812      	ldrb	r2, [r2, #0]
    7f92:	b252      	sxtb	r2, r2
    7f94:	0892      	lsrs	r2, r2, #2
    7f96:	32c0      	adds	r2, #192	; 0xc0
    7f98:	0092      	lsls	r2, r2, #2
    7f9a:	5852      	ldr	r2, [r2, r1]
    7f9c:	1df9      	adds	r1, r7, #7
    7f9e:	7809      	ldrb	r1, [r1, #0]
    7fa0:	0008      	movs	r0, r1
    7fa2:	2103      	movs	r1, #3
    7fa4:	4001      	ands	r1, r0
    7fa6:	00c9      	lsls	r1, r1, #3
    7fa8:	20ff      	movs	r0, #255	; 0xff
    7faa:	4088      	lsls	r0, r1
    7fac:	0001      	movs	r1, r0
    7fae:	43c9      	mvns	r1, r1
    7fb0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7fb2:	683a      	ldr	r2, [r7, #0]
    7fb4:	0192      	lsls	r2, r2, #6
    7fb6:	20ff      	movs	r0, #255	; 0xff
    7fb8:	4010      	ands	r0, r2
    7fba:	1dfa      	adds	r2, r7, #7
    7fbc:	7812      	ldrb	r2, [r2, #0]
    7fbe:	0015      	movs	r5, r2
    7fc0:	2203      	movs	r2, #3
    7fc2:	402a      	ands	r2, r5
    7fc4:	00d2      	lsls	r2, r2, #3
    7fc6:	4090      	lsls	r0, r2
    7fc8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fca:	430a      	orrs	r2, r1
    7fcc:	33c0      	adds	r3, #192	; 0xc0
    7fce:	009b      	lsls	r3, r3, #2
    7fd0:	511a      	str	r2, [r3, r4]
}
    7fd2:	e031      	b.n	8038 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fd4:	4c1b      	ldr	r4, [pc, #108]	; (8044 <__NVIC_SetPriority+0xd8>)
    7fd6:	1dfb      	adds	r3, r7, #7
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	001a      	movs	r2, r3
    7fdc:	230f      	movs	r3, #15
    7fde:	4013      	ands	r3, r2
    7fe0:	3b08      	subs	r3, #8
    7fe2:	0899      	lsrs	r1, r3, #2
    7fe4:	4a17      	ldr	r2, [pc, #92]	; (8044 <__NVIC_SetPriority+0xd8>)
    7fe6:	1dfb      	adds	r3, r7, #7
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	0018      	movs	r0, r3
    7fec:	230f      	movs	r3, #15
    7fee:	4003      	ands	r3, r0
    7ff0:	3b08      	subs	r3, #8
    7ff2:	089b      	lsrs	r3, r3, #2
    7ff4:	3306      	adds	r3, #6
    7ff6:	009b      	lsls	r3, r3, #2
    7ff8:	18d3      	adds	r3, r2, r3
    7ffa:	3304      	adds	r3, #4
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	1dfa      	adds	r2, r7, #7
    8000:	7812      	ldrb	r2, [r2, #0]
    8002:	0010      	movs	r0, r2
    8004:	2203      	movs	r2, #3
    8006:	4002      	ands	r2, r0
    8008:	00d2      	lsls	r2, r2, #3
    800a:	20ff      	movs	r0, #255	; 0xff
    800c:	4090      	lsls	r0, r2
    800e:	0002      	movs	r2, r0
    8010:	43d2      	mvns	r2, r2
    8012:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    8014:	683b      	ldr	r3, [r7, #0]
    8016:	019b      	lsls	r3, r3, #6
    8018:	20ff      	movs	r0, #255	; 0xff
    801a:	4018      	ands	r0, r3
    801c:	1dfb      	adds	r3, r7, #7
    801e:	781b      	ldrb	r3, [r3, #0]
    8020:	001d      	movs	r5, r3
    8022:	2303      	movs	r3, #3
    8024:	402b      	ands	r3, r5
    8026:	00db      	lsls	r3, r3, #3
    8028:	4098      	lsls	r0, r3
    802a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    802c:	431a      	orrs	r2, r3
    802e:	1d8b      	adds	r3, r1, #6
    8030:	009b      	lsls	r3, r3, #2
    8032:	18e3      	adds	r3, r4, r3
    8034:	3304      	adds	r3, #4
    8036:	601a      	str	r2, [r3, #0]
}
    8038:	46c0      	nop			; (mov r8, r8)
    803a:	46bd      	mov	sp, r7
    803c:	b002      	add	sp, #8
    803e:	bdb0      	pop	{r4, r5, r7, pc}
    8040:	e000e100 	.word	0xe000e100
    8044:	e000ed00 	.word	0xe000ed00

00008048 <TC3_start>:
//funx
	extern void TC3_init(void);
	extern void wait(DWORD time_100mk);
	extern void tc3_process(void);
//inline
	static inline void TC3_start(WORD cc) { TC3->COUNT16.CC[0].reg=cc-1; TC3->COUNT16.CTRLBSET.bit.CMD=0x01; }
    8048:	b580      	push	{r7, lr}
    804a:	b082      	sub	sp, #8
    804c:	af00      	add	r7, sp, #0
    804e:	0002      	movs	r2, r0
    8050:	1dbb      	adds	r3, r7, #6
    8052:	801a      	strh	r2, [r3, #0]
    8054:	4a08      	ldr	r2, [pc, #32]	; (8078 <TC3_start+0x30>)
    8056:	1dbb      	adds	r3, r7, #6
    8058:	881b      	ldrh	r3, [r3, #0]
    805a:	3b01      	subs	r3, #1
    805c:	b29b      	uxth	r3, r3
    805e:	8313      	strh	r3, [r2, #24]
    8060:	4a05      	ldr	r2, [pc, #20]	; (8078 <TC3_start+0x30>)
    8062:	7953      	ldrb	r3, [r2, #5]
    8064:	213f      	movs	r1, #63	; 0x3f
    8066:	400b      	ands	r3, r1
    8068:	1c19      	adds	r1, r3, #0
    806a:	2340      	movs	r3, #64	; 0x40
    806c:	430b      	orrs	r3, r1
    806e:	7153      	strb	r3, [r2, #5]
    8070:	46c0      	nop			; (mov r8, r8)
    8072:	46bd      	mov	sp, r7
    8074:	b002      	add	sp, #8
    8076:	bd80      	pop	{r7, pc}
    8078:	42002c00 	.word	0x42002c00

0000807c <TC3_Handler>:
volatile DWORD  time_100mk=0;
volatile DWORD  TTL=0;

void TC3_Handler(void)
//-----------------------------------------------------------------------------
{
    807c:	b580      	push	{r7, lr}
    807e:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg|=0xFFFF;
    8080:	4b22      	ldr	r3, [pc, #136]	; (810c <TC3_Handler+0x90>)
    8082:	7b9b      	ldrb	r3, [r3, #14]
    8084:	4b21      	ldr	r3, [pc, #132]	; (810c <TC3_Handler+0x90>)
    8086:	22ff      	movs	r2, #255	; 0xff
    8088:	739a      	strb	r2, [r3, #14]
	
	tc3_cnt++;
    808a:	4b21      	ldr	r3, [pc, #132]	; (8110 <TC3_Handler+0x94>)
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	1c5a      	adds	r2, r3, #1
    8090:	4b1f      	ldr	r3, [pc, #124]	; (8110 <TC3_Handler+0x94>)
    8092:	601a      	str	r2, [r3, #0]
	time_wait++;
    8094:	4b1f      	ldr	r3, [pc, #124]	; (8114 <TC3_Handler+0x98>)
    8096:	681b      	ldr	r3, [r3, #0]
    8098:	1c5a      	adds	r2, r3, #1
    809a:	4b1e      	ldr	r3, [pc, #120]	; (8114 <TC3_Handler+0x98>)
    809c:	601a      	str	r2, [r3, #0]
	port[0].rtime++;
    809e:	4a1e      	ldr	r2, [pc, #120]	; (8118 <TC3_Handler+0x9c>)
    80a0:	2385      	movs	r3, #133	; 0x85
    80a2:	009b      	lsls	r3, r3, #2
    80a4:	5ad3      	ldrh	r3, [r2, r3]
    80a6:	b29b      	uxth	r3, r3
    80a8:	3301      	adds	r3, #1
    80aa:	b299      	uxth	r1, r3
    80ac:	4a1a      	ldr	r2, [pc, #104]	; (8118 <TC3_Handler+0x9c>)
    80ae:	2385      	movs	r3, #133	; 0x85
    80b0:	009b      	lsls	r3, r3, #2
    80b2:	52d1      	strh	r1, [r2, r3]
	port[1].rtime++;
    80b4:	4b18      	ldr	r3, [pc, #96]	; (8118 <TC3_Handler+0x9c>)
    80b6:	4a19      	ldr	r2, [pc, #100]	; (811c <TC3_Handler+0xa0>)
    80b8:	5a9b      	ldrh	r3, [r3, r2]
    80ba:	b29b      	uxth	r3, r3
    80bc:	3301      	adds	r3, #1
    80be:	b299      	uxth	r1, r3
    80c0:	4b15      	ldr	r3, [pc, #84]	; (8118 <TC3_Handler+0x9c>)
    80c2:	4a16      	ldr	r2, [pc, #88]	; (811c <TC3_Handler+0xa0>)
    80c4:	5299      	strh	r1, [r3, r2]
	port[2].rtime++;
    80c6:	4b14      	ldr	r3, [pc, #80]	; (8118 <TC3_Handler+0x9c>)
    80c8:	4a15      	ldr	r2, [pc, #84]	; (8120 <TC3_Handler+0xa4>)
    80ca:	5a9b      	ldrh	r3, [r3, r2]
    80cc:	b29b      	uxth	r3, r3
    80ce:	3301      	adds	r3, #1
    80d0:	b299      	uxth	r1, r3
    80d2:	4b11      	ldr	r3, [pc, #68]	; (8118 <TC3_Handler+0x9c>)
    80d4:	4a12      	ldr	r2, [pc, #72]	; (8120 <TC3_Handler+0xa4>)
    80d6:	5299      	strh	r1, [r3, r2]
	port[3].rtime++;
    80d8:	4b0f      	ldr	r3, [pc, #60]	; (8118 <TC3_Handler+0x9c>)
    80da:	4a12      	ldr	r2, [pc, #72]	; (8124 <TC3_Handler+0xa8>)
    80dc:	5a9b      	ldrh	r3, [r3, r2]
    80de:	b29b      	uxth	r3, r3
    80e0:	3301      	adds	r3, #1
    80e2:	b299      	uxth	r1, r3
    80e4:	4b0c      	ldr	r3, [pc, #48]	; (8118 <TC3_Handler+0x9c>)
    80e6:	4a0f      	ldr	r2, [pc, #60]	; (8124 <TC3_Handler+0xa8>)
    80e8:	5299      	strh	r1, [r3, r2]
	
	
	if(spi_wait--);
    80ea:	4b0f      	ldr	r3, [pc, #60]	; (8128 <TC3_Handler+0xac>)
    80ec:	881b      	ldrh	r3, [r3, #0]
    80ee:	b29b      	uxth	r3, r3
    80f0:	3b01      	subs	r3, #1
    80f2:	b29a      	uxth	r2, r3
    80f4:	4b0c      	ldr	r3, [pc, #48]	; (8128 <TC3_Handler+0xac>)
    80f6:	801a      	strh	r2, [r3, #0]
	if(cmd_spi_wait--);
    80f8:	4b0c      	ldr	r3, [pc, #48]	; (812c <TC3_Handler+0xb0>)
    80fa:	881b      	ldrh	r3, [r3, #0]
    80fc:	b29b      	uxth	r3, r3
    80fe:	3b01      	subs	r3, #1
    8100:	b29a      	uxth	r2, r3
    8102:	4b0a      	ldr	r3, [pc, #40]	; (812c <TC3_Handler+0xb0>)
    8104:	801a      	strh	r2, [r3, #0]
}
    8106:	46c0      	nop			; (mov r8, r8)
    8108:	46bd      	mov	sp, r7
    810a:	bd80      	pop	{r7, pc}
    810c:	42002c00 	.word	0x42002c00
    8110:	2000046c 	.word	0x2000046c
    8114:	200031f8 	.word	0x200031f8
    8118:	200031fc 	.word	0x200031fc
    811c:	00000454 	.word	0x00000454
    8120:	00000694 	.word	0x00000694
    8124:	000008d4 	.word	0x000008d4
    8128:	200031f4 	.word	0x200031f4
    812c:	200031f6 	.word	0x200031f6

00008130 <TC3_init>:

void TC3_init(void)
//-----------------------------------------------------------------------------
{
    8130:	b580      	push	{r7, lr}
    8132:	af00      	add	r7, sp, #0
	GCLK->CLKCTRL.bit.ID   =0x1B; // Bits 5:0  - ID: Generic Clock Selection ID (0x1B - TCC2,TC3)
    8134:	4a37      	ldr	r2, [pc, #220]	; (8214 <TC3_init+0xe4>)
    8136:	8853      	ldrh	r3, [r2, #2]
    8138:	213f      	movs	r1, #63	; 0x3f
    813a:	438b      	bics	r3, r1
    813c:	1c19      	adds	r1, r3, #0
    813e:	231b      	movs	r3, #27
    8140:	430b      	orrs	r3, r1
    8142:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    8144:	4a33      	ldr	r2, [pc, #204]	; (8214 <TC3_init+0xe4>)
    8146:	8853      	ldrh	r3, [r2, #2]
    8148:	4933      	ldr	r1, [pc, #204]	; (8218 <TC3_init+0xe8>)
    814a:	400b      	ands	r3, r1
    814c:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    814e:	4a31      	ldr	r2, [pc, #196]	; (8214 <TC3_init+0xe4>)
    8150:	8853      	ldrh	r3, [r2, #2]
    8152:	2180      	movs	r1, #128	; 0x80
    8154:	01c9      	lsls	r1, r1, #7
    8156:	430b      	orrs	r3, r1
    8158:	8053      	strh	r3, [r2, #2]

	PM->APBCSEL.bit.APBCDIV=0x00;
    815a:	4a30      	ldr	r2, [pc, #192]	; (821c <TC3_init+0xec>)
    815c:	7ad3      	ldrb	r3, [r2, #11]
    815e:	2107      	movs	r1, #7
    8160:	438b      	bics	r3, r1
    8162:	72d3      	strb	r3, [r2, #11]
	PM->APBCMASK.bit.TC3_  =0x01; //
    8164:	4a2d      	ldr	r2, [pc, #180]	; (821c <TC3_init+0xec>)
    8166:	6a13      	ldr	r3, [r2, #32]
    8168:	2180      	movs	r1, #128	; 0x80
    816a:	0109      	lsls	r1, r1, #4
    816c:	430b      	orrs	r3, r1
    816e:	6213      	str	r3, [r2, #32]

	TC3->COUNT16.CTRLA.bit.MODE     =0x0; // Bits 3:2   - MODE: (0-Counter in 16-bit mode)
    8170:	4a2b      	ldr	r2, [pc, #172]	; (8220 <TC3_init+0xf0>)
    8172:	8813      	ldrh	r3, [r2, #0]
    8174:	210c      	movs	r1, #12
    8176:	438b      	bics	r3, r1
    8178:	8013      	strh	r3, [r2, #0]
	if (PROC_HERZ == 8000000)	{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV16_Val; }
	else						{TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV64_Val;}
    817a:	4a29      	ldr	r2, [pc, #164]	; (8220 <TC3_init+0xf0>)
    817c:	8813      	ldrh	r3, [r2, #0]
    817e:	4929      	ldr	r1, [pc, #164]	; (8224 <TC3_init+0xf4>)
    8180:	400b      	ands	r3, r1
    8182:	1c19      	adds	r1, r3, #0
    8184:	23a0      	movs	r3, #160	; 0xa0
    8186:	00db      	lsls	r3, r3, #3
    8188:	430b      	orrs	r3, r1
    818a:	8013      	strh	r3, [r2, #0]
		
	
	TC3->COUNT16.CTRLA.bit.PRESCSYNC=0x00; // Bits 13:12 - PRESCSYNC: Prescaler and Counter Synchronization (Reload or reset the counter on next generic clock)
    818c:	4a24      	ldr	r2, [pc, #144]	; (8220 <TC3_init+0xf0>)
    818e:	8813      	ldrh	r3, [r2, #0]
    8190:	4925      	ldr	r1, [pc, #148]	; (8228 <TC3_init+0xf8>)
    8192:	400b      	ands	r3, r1
    8194:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.WAVEGEN  =0x01; // Bits 6:5   - WAVEGEN: Waveform Generation Operation
    8196:	4a22      	ldr	r2, [pc, #136]	; (8220 <TC3_init+0xf0>)
    8198:	8813      	ldrh	r3, [r2, #0]
    819a:	2160      	movs	r1, #96	; 0x60
    819c:	438b      	bics	r3, r1
    819e:	1c19      	adds	r1, r3, #0
    81a0:	2320      	movs	r3, #32
    81a2:	430b      	orrs	r3, r1
    81a4:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    81a6:	4b1e      	ldr	r3, [pc, #120]	; (8220 <TC3_init+0xf0>)
    81a8:	2201      	movs	r2, #1
    81aa:	4252      	negs	r2, r2
    81ac:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    81ae:	4b1c      	ldr	r3, [pc, #112]	; (8220 <TC3_init+0xf0>)
    81b0:	2201      	movs	r2, #1
    81b2:	4252      	negs	r2, r2
    81b4:	835a      	strh	r2, [r3, #26]

	//TC3->COUNT16.CTRLBSET.bit.ONESHOT=0x00; // Bit 2 - ONESHOT: One-Shot (1: The timer/counter will wrap around and stop on the next underflow/overflow condition.)
	TC3->COUNT16.CTRLBSET.bit.DIR    =0x00; // Bit 0 - DIR: Counter Direction (0: The timer/counter is counting up (incrementing))
    81b6:	4a1a      	ldr	r2, [pc, #104]	; (8220 <TC3_init+0xf0>)
    81b8:	7953      	ldrb	r3, [r2, #5]
    81ba:	2101      	movs	r1, #1
    81bc:	438b      	bics	r3, r1
    81be:	7153      	strb	r3, [r2, #5]
	TC3->COUNT16.CTRLA.bit.ENABLE    =0x01; // Bit 1 - ENABLE: Enable
    81c0:	4a17      	ldr	r2, [pc, #92]	; (8220 <TC3_init+0xf0>)
    81c2:	8813      	ldrh	r3, [r2, #0]
    81c4:	2102      	movs	r1, #2
    81c6:	430b      	orrs	r3, r1
    81c8:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    81ca:	4b15      	ldr	r3, [pc, #84]	; (8220 <TC3_init+0xf0>)
    81cc:	2201      	movs	r2, #1
    81ce:	4252      	negs	r2, r2
    81d0:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    81d2:	4b13      	ldr	r3, [pc, #76]	; (8220 <TC3_init+0xf0>)
    81d4:	2201      	movs	r2, #1
    81d6:	4252      	negs	r2, r2
    81d8:	835a      	strh	r2, [r3, #26]
	
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 0x01); // wait for TC3 to be enabled
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	4b10      	ldr	r3, [pc, #64]	; (8220 <TC3_init+0xf0>)
    81de:	7bdb      	ldrb	r3, [r3, #15]
    81e0:	061b      	lsls	r3, r3, #24
    81e2:	0fdb      	lsrs	r3, r3, #31
    81e4:	b2db      	uxtb	r3, r3
    81e6:	2b01      	cmp	r3, #1
    81e8:	d0f8      	beq.n	81dc <TC3_init+0xac>

	NVIC_DisableIRQ(TC3_IRQn);					// Disable the interrupt
    81ea:	2012      	movs	r0, #18
    81ec:	f7ff fe9e 	bl	7f2c <__NVIC_DisableIRQ>
	//TC3->COUNT16.INTENSET.bit.MC0=0x01;	// Enable match interrupts on compare channel 0
	TC3->COUNT16.INTENSET.bit.OVF=0x01;
    81f0:	4a0b      	ldr	r2, [pc, #44]	; (8220 <TC3_init+0xf0>)
    81f2:	7b53      	ldrb	r3, [r2, #13]
    81f4:	2101      	movs	r1, #1
    81f6:	430b      	orrs	r3, r1
    81f8:	7353      	strb	r3, [r2, #13]
	NVIC_SetPriority(TC3_IRQn, 0);			// Set the interrupt priority to lowest value
    81fa:	2100      	movs	r1, #0
    81fc:	2012      	movs	r0, #18
    81fe:	f7ff feb5 	bl	7f6c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TC3_IRQn);						// Enable the interrupt
    8202:	2012      	movs	r0, #18
    8204:	f7ff fe78 	bl	7ef8 <__NVIC_EnableIRQ>
	
	TC3_start(TC3_100mk);
    8208:	204b      	movs	r0, #75	; 0x4b
    820a:	f7ff ff1d 	bl	8048 <TC3_start>
}
    820e:	46c0      	nop			; (mov r8, r8)
    8210:	46bd      	mov	sp, r7
    8212:	bd80      	pop	{r7, pc}
    8214:	40000c00 	.word	0x40000c00
    8218:	fffff0ff 	.word	0xfffff0ff
    821c:	40000400 	.word	0x40000400
    8220:	42002c00 	.word	0x42002c00
    8224:	fffff8ff 	.word	0xfffff8ff
    8228:	ffffcfff 	.word	0xffffcfff

0000822c <wait>:


	void wait(DWORD time_100mk)
	{
    822c:	b580      	push	{r7, lr}
    822e:	b082      	sub	sp, #8
    8230:	af00      	add	r7, sp, #0
    8232:	6078      	str	r0, [r7, #4]
	time_wait=0;
    8234:	4b10      	ldr	r3, [pc, #64]	; (8278 <wait+0x4c>)
    8236:	2200      	movs	r2, #0
    8238:	601a      	str	r2, [r3, #0]
	while(1)
		{
			if(reset   == NULL)		{wdt_reset();}
    823a:	4b10      	ldr	r3, [pc, #64]	; (827c <wait+0x50>)
    823c:	881b      	ldrh	r3, [r3, #0]
    823e:	2b00      	cmp	r3, #0
    8240:	d10e      	bne.n	8260 <wait+0x34>
    8242:	4b0f      	ldr	r3, [pc, #60]	; (8280 <wait+0x54>)
    8244:	799b      	ldrb	r3, [r3, #6]
    8246:	07db      	lsls	r3, r3, #31
    8248:	0fdb      	lsrs	r3, r3, #31
    824a:	b2db      	uxtb	r3, r3
    824c:	2b01      	cmp	r3, #1
    824e:	d107      	bne.n	8260 <wait+0x34>
    8250:	4a0b      	ldr	r2, [pc, #44]	; (8280 <wait+0x54>)
    8252:	7993      	ldrb	r3, [r2, #6]
    8254:	2101      	movs	r1, #1
    8256:	430b      	orrs	r3, r1
    8258:	7193      	strb	r3, [r2, #6]
    825a:	4b09      	ldr	r3, [pc, #36]	; (8280 <wait+0x54>)
    825c:	22a5      	movs	r2, #165	; 0xa5
    825e:	721a      	strb	r2, [r3, #8]
			if(time_wait>time_100mk){break;}
    8260:	4b05      	ldr	r3, [pc, #20]	; (8278 <wait+0x4c>)
    8262:	681a      	ldr	r2, [r3, #0]
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	429a      	cmp	r2, r3
    8268:	d800      	bhi.n	826c <wait+0x40>
			if(reset   == NULL)		{wdt_reset();}
    826a:	e7e6      	b.n	823a <wait+0xe>
			if(time_wait>time_100mk){break;}
    826c:	46c0      	nop			; (mov r8, r8)
		}
	}
    826e:	46c0      	nop			; (mov r8, r8)
    8270:	46bd      	mov	sp, r7
    8272:	b002      	add	sp, #8
    8274:	bd80      	pop	{r7, pc}
    8276:	46c0      	nop			; (mov r8, r8)
    8278:	200031f8 	.word	0x200031f8
    827c:	20002548 	.word	0x20002548
    8280:	40001000 	.word	0x40001000

00008284 <tc3_process>:
	
	
	
	void tc3_process(void)
	//-----------------------------------------------------------------------------
	{
    8284:	b5b0      	push	{r4, r5, r7, lr}
    8286:	af00      	add	r7, sp, #0
		if(!tc3_cnt) {return;}
    8288:	4b9e      	ldr	r3, [pc, #632]	; (8504 <tc3_process+0x280>)
    828a:	681b      	ldr	r3, [r3, #0]
    828c:	2b00      	cmp	r3, #0
    828e:	d100      	bne.n	8292 <tc3_process+0xe>
    8290:	e135      	b.n	84fe <tc3_process+0x27a>
			
		if(port[0].time_port){port[0].time_port--;}
    8292:	4a9d      	ldr	r2, [pc, #628]	; (8508 <tc3_process+0x284>)
    8294:	2388      	movs	r3, #136	; 0x88
    8296:	009b      	lsls	r3, r3, #2
    8298:	58d3      	ldr	r3, [r2, r3]
    829a:	2b00      	cmp	r3, #0
    829c:	d008      	beq.n	82b0 <tc3_process+0x2c>
    829e:	4a9a      	ldr	r2, [pc, #616]	; (8508 <tc3_process+0x284>)
    82a0:	2388      	movs	r3, #136	; 0x88
    82a2:	009b      	lsls	r3, r3, #2
    82a4:	58d3      	ldr	r3, [r2, r3]
    82a6:	1e59      	subs	r1, r3, #1
    82a8:	4a97      	ldr	r2, [pc, #604]	; (8508 <tc3_process+0x284>)
    82aa:	2388      	movs	r3, #136	; 0x88
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	50d1      	str	r1, [r2, r3]
		if(port[1].time_port){port[1].time_port--;}
    82b0:	4a95      	ldr	r2, [pc, #596]	; (8508 <tc3_process+0x284>)
    82b2:	238c      	movs	r3, #140	; 0x8c
    82b4:	00db      	lsls	r3, r3, #3
    82b6:	58d3      	ldr	r3, [r2, r3]
    82b8:	2b00      	cmp	r3, #0
    82ba:	d008      	beq.n	82ce <tc3_process+0x4a>
    82bc:	4a92      	ldr	r2, [pc, #584]	; (8508 <tc3_process+0x284>)
    82be:	238c      	movs	r3, #140	; 0x8c
    82c0:	00db      	lsls	r3, r3, #3
    82c2:	58d3      	ldr	r3, [r2, r3]
    82c4:	1e59      	subs	r1, r3, #1
    82c6:	4a90      	ldr	r2, [pc, #576]	; (8508 <tc3_process+0x284>)
    82c8:	238c      	movs	r3, #140	; 0x8c
    82ca:	00db      	lsls	r3, r3, #3
    82cc:	50d1      	str	r1, [r2, r3]
		if(port[2].time_port){port[2].time_port--;}
    82ce:	4a8e      	ldr	r2, [pc, #568]	; (8508 <tc3_process+0x284>)
    82d0:	23d4      	movs	r3, #212	; 0xd4
    82d2:	00db      	lsls	r3, r3, #3
    82d4:	58d3      	ldr	r3, [r2, r3]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d008      	beq.n	82ec <tc3_process+0x68>
    82da:	4a8b      	ldr	r2, [pc, #556]	; (8508 <tc3_process+0x284>)
    82dc:	23d4      	movs	r3, #212	; 0xd4
    82de:	00db      	lsls	r3, r3, #3
    82e0:	58d3      	ldr	r3, [r2, r3]
    82e2:	1e59      	subs	r1, r3, #1
    82e4:	4a88      	ldr	r2, [pc, #544]	; (8508 <tc3_process+0x284>)
    82e6:	23d4      	movs	r3, #212	; 0xd4
    82e8:	00db      	lsls	r3, r3, #3
    82ea:	50d1      	str	r1, [r2, r3]
		if(port[3].time_port){port[3].time_port--;}
    82ec:	4a86      	ldr	r2, [pc, #536]	; (8508 <tc3_process+0x284>)
    82ee:	238e      	movs	r3, #142	; 0x8e
    82f0:	011b      	lsls	r3, r3, #4
    82f2:	58d3      	ldr	r3, [r2, r3]
    82f4:	2b00      	cmp	r3, #0
    82f6:	d008      	beq.n	830a <tc3_process+0x86>
    82f8:	4a83      	ldr	r2, [pc, #524]	; (8508 <tc3_process+0x284>)
    82fa:	238e      	movs	r3, #142	; 0x8e
    82fc:	011b      	lsls	r3, r3, #4
    82fe:	58d3      	ldr	r3, [r2, r3]
    8300:	1e59      	subs	r1, r3, #1
    8302:	4a81      	ldr	r2, [pc, #516]	; (8508 <tc3_process+0x284>)
    8304:	238e      	movs	r3, #142	; 0x8e
    8306:	011b      	lsls	r3, r3, #4
    8308:	50d1      	str	r1, [r2, r3]
			
		
				
		if(eth_sock[0].time_wait_SEND_OK){eth_sock[0].time_wait_SEND_OK--;}
    830a:	4b80      	ldr	r3, [pc, #512]	; (850c <tc3_process+0x288>)
    830c:	4a80      	ldr	r2, [pc, #512]	; (8510 <tc3_process+0x28c>)
    830e:	5c9a      	ldrb	r2, [r3, r2]
    8310:	4980      	ldr	r1, [pc, #512]	; (8514 <tc3_process+0x290>)
    8312:	5c5b      	ldrb	r3, [r3, r1]
    8314:	021b      	lsls	r3, r3, #8
    8316:	4313      	orrs	r3, r2
    8318:	b29b      	uxth	r3, r3
    831a:	2b00      	cmp	r3, #0
    831c:	d01f      	beq.n	835e <tc3_process+0xda>
    831e:	4b7b      	ldr	r3, [pc, #492]	; (850c <tc3_process+0x288>)
    8320:	4a7b      	ldr	r2, [pc, #492]	; (8510 <tc3_process+0x28c>)
    8322:	5c9a      	ldrb	r2, [r3, r2]
    8324:	497b      	ldr	r1, [pc, #492]	; (8514 <tc3_process+0x290>)
    8326:	5c5b      	ldrb	r3, [r3, r1]
    8328:	021b      	lsls	r3, r3, #8
    832a:	4313      	orrs	r3, r2
    832c:	b29b      	uxth	r3, r3
    832e:	3b01      	subs	r3, #1
    8330:	b299      	uxth	r1, r3
    8332:	4b76      	ldr	r3, [pc, #472]	; (850c <tc3_process+0x288>)
    8334:	4a76      	ldr	r2, [pc, #472]	; (8510 <tc3_process+0x28c>)
    8336:	20ff      	movs	r0, #255	; 0xff
    8338:	4008      	ands	r0, r1
    833a:	0005      	movs	r5, r0
    833c:	5c98      	ldrb	r0, [r3, r2]
    833e:	2400      	movs	r4, #0
    8340:	4020      	ands	r0, r4
    8342:	1c04      	adds	r4, r0, #0
    8344:	1c28      	adds	r0, r5, #0
    8346:	4320      	orrs	r0, r4
    8348:	5498      	strb	r0, [r3, r2]
    834a:	0a09      	lsrs	r1, r1, #8
    834c:	b288      	uxth	r0, r1
    834e:	189b      	adds	r3, r3, r2
    8350:	785a      	ldrb	r2, [r3, #1]
    8352:	2100      	movs	r1, #0
    8354:	400a      	ands	r2, r1
    8356:	1c11      	adds	r1, r2, #0
    8358:	1c02      	adds	r2, r0, #0
    835a:	430a      	orrs	r2, r1
    835c:	705a      	strb	r2, [r3, #1]
		if(eth_sock[1].time_wait_SEND_OK){eth_sock[1].time_wait_SEND_OK--;}
    835e:	4b6b      	ldr	r3, [pc, #428]	; (850c <tc3_process+0x288>)
    8360:	4a6d      	ldr	r2, [pc, #436]	; (8518 <tc3_process+0x294>)
    8362:	5c9a      	ldrb	r2, [r3, r2]
    8364:	496d      	ldr	r1, [pc, #436]	; (851c <tc3_process+0x298>)
    8366:	5c5b      	ldrb	r3, [r3, r1]
    8368:	021b      	lsls	r3, r3, #8
    836a:	4313      	orrs	r3, r2
    836c:	b29b      	uxth	r3, r3
    836e:	2b00      	cmp	r3, #0
    8370:	d01f      	beq.n	83b2 <tc3_process+0x12e>
    8372:	4b66      	ldr	r3, [pc, #408]	; (850c <tc3_process+0x288>)
    8374:	4a68      	ldr	r2, [pc, #416]	; (8518 <tc3_process+0x294>)
    8376:	5c9a      	ldrb	r2, [r3, r2]
    8378:	4968      	ldr	r1, [pc, #416]	; (851c <tc3_process+0x298>)
    837a:	5c5b      	ldrb	r3, [r3, r1]
    837c:	021b      	lsls	r3, r3, #8
    837e:	4313      	orrs	r3, r2
    8380:	b29b      	uxth	r3, r3
    8382:	3b01      	subs	r3, #1
    8384:	b299      	uxth	r1, r3
    8386:	4b61      	ldr	r3, [pc, #388]	; (850c <tc3_process+0x288>)
    8388:	4a63      	ldr	r2, [pc, #396]	; (8518 <tc3_process+0x294>)
    838a:	20ff      	movs	r0, #255	; 0xff
    838c:	4008      	ands	r0, r1
    838e:	0005      	movs	r5, r0
    8390:	5c98      	ldrb	r0, [r3, r2]
    8392:	2400      	movs	r4, #0
    8394:	4020      	ands	r0, r4
    8396:	1c04      	adds	r4, r0, #0
    8398:	1c28      	adds	r0, r5, #0
    839a:	4320      	orrs	r0, r4
    839c:	5498      	strb	r0, [r3, r2]
    839e:	0a09      	lsrs	r1, r1, #8
    83a0:	b288      	uxth	r0, r1
    83a2:	189b      	adds	r3, r3, r2
    83a4:	785a      	ldrb	r2, [r3, #1]
    83a6:	2100      	movs	r1, #0
    83a8:	400a      	ands	r2, r1
    83aa:	1c11      	adds	r1, r2, #0
    83ac:	1c02      	adds	r2, r0, #0
    83ae:	430a      	orrs	r2, r1
    83b0:	705a      	strb	r2, [r3, #1]
		if(eth_sock[2].time_wait_SEND_OK){eth_sock[2].time_wait_SEND_OK--;}
    83b2:	4b56      	ldr	r3, [pc, #344]	; (850c <tc3_process+0x288>)
    83b4:	4a5a      	ldr	r2, [pc, #360]	; (8520 <tc3_process+0x29c>)
    83b6:	5c9a      	ldrb	r2, [r3, r2]
    83b8:	495a      	ldr	r1, [pc, #360]	; (8524 <tc3_process+0x2a0>)
    83ba:	5c5b      	ldrb	r3, [r3, r1]
    83bc:	021b      	lsls	r3, r3, #8
    83be:	4313      	orrs	r3, r2
    83c0:	b29b      	uxth	r3, r3
    83c2:	2b00      	cmp	r3, #0
    83c4:	d01f      	beq.n	8406 <tc3_process+0x182>
    83c6:	4b51      	ldr	r3, [pc, #324]	; (850c <tc3_process+0x288>)
    83c8:	4a55      	ldr	r2, [pc, #340]	; (8520 <tc3_process+0x29c>)
    83ca:	5c9a      	ldrb	r2, [r3, r2]
    83cc:	4955      	ldr	r1, [pc, #340]	; (8524 <tc3_process+0x2a0>)
    83ce:	5c5b      	ldrb	r3, [r3, r1]
    83d0:	021b      	lsls	r3, r3, #8
    83d2:	4313      	orrs	r3, r2
    83d4:	b29b      	uxth	r3, r3
    83d6:	3b01      	subs	r3, #1
    83d8:	b299      	uxth	r1, r3
    83da:	4b4c      	ldr	r3, [pc, #304]	; (850c <tc3_process+0x288>)
    83dc:	4a50      	ldr	r2, [pc, #320]	; (8520 <tc3_process+0x29c>)
    83de:	20ff      	movs	r0, #255	; 0xff
    83e0:	4008      	ands	r0, r1
    83e2:	0005      	movs	r5, r0
    83e4:	5c98      	ldrb	r0, [r3, r2]
    83e6:	2400      	movs	r4, #0
    83e8:	4020      	ands	r0, r4
    83ea:	1c04      	adds	r4, r0, #0
    83ec:	1c28      	adds	r0, r5, #0
    83ee:	4320      	orrs	r0, r4
    83f0:	5498      	strb	r0, [r3, r2]
    83f2:	0a09      	lsrs	r1, r1, #8
    83f4:	b288      	uxth	r0, r1
    83f6:	189b      	adds	r3, r3, r2
    83f8:	785a      	ldrb	r2, [r3, #1]
    83fa:	2100      	movs	r1, #0
    83fc:	400a      	ands	r2, r1
    83fe:	1c11      	adds	r1, r2, #0
    8400:	1c02      	adds	r2, r0, #0
    8402:	430a      	orrs	r2, r1
    8404:	705a      	strb	r2, [r3, #1]
		if(eth_sock[3].time_wait_SEND_OK){eth_sock[3].time_wait_SEND_OK--;}
    8406:	4b41      	ldr	r3, [pc, #260]	; (850c <tc3_process+0x288>)
    8408:	4a47      	ldr	r2, [pc, #284]	; (8528 <tc3_process+0x2a4>)
    840a:	5c9a      	ldrb	r2, [r3, r2]
    840c:	4947      	ldr	r1, [pc, #284]	; (852c <tc3_process+0x2a8>)
    840e:	5c5b      	ldrb	r3, [r3, r1]
    8410:	021b      	lsls	r3, r3, #8
    8412:	4313      	orrs	r3, r2
    8414:	b29b      	uxth	r3, r3
    8416:	2b00      	cmp	r3, #0
    8418:	d01f      	beq.n	845a <tc3_process+0x1d6>
    841a:	4b3c      	ldr	r3, [pc, #240]	; (850c <tc3_process+0x288>)
    841c:	4a42      	ldr	r2, [pc, #264]	; (8528 <tc3_process+0x2a4>)
    841e:	5c9a      	ldrb	r2, [r3, r2]
    8420:	4942      	ldr	r1, [pc, #264]	; (852c <tc3_process+0x2a8>)
    8422:	5c5b      	ldrb	r3, [r3, r1]
    8424:	021b      	lsls	r3, r3, #8
    8426:	4313      	orrs	r3, r2
    8428:	b29b      	uxth	r3, r3
    842a:	3b01      	subs	r3, #1
    842c:	b299      	uxth	r1, r3
    842e:	4b37      	ldr	r3, [pc, #220]	; (850c <tc3_process+0x288>)
    8430:	4a3d      	ldr	r2, [pc, #244]	; (8528 <tc3_process+0x2a4>)
    8432:	20ff      	movs	r0, #255	; 0xff
    8434:	4008      	ands	r0, r1
    8436:	0005      	movs	r5, r0
    8438:	5c98      	ldrb	r0, [r3, r2]
    843a:	2400      	movs	r4, #0
    843c:	4020      	ands	r0, r4
    843e:	1c04      	adds	r4, r0, #0
    8440:	1c28      	adds	r0, r5, #0
    8442:	4320      	orrs	r0, r4
    8444:	5498      	strb	r0, [r3, r2]
    8446:	0a09      	lsrs	r1, r1, #8
    8448:	b288      	uxth	r0, r1
    844a:	189b      	adds	r3, r3, r2
    844c:	785a      	ldrb	r2, [r3, #1]
    844e:	2100      	movs	r1, #0
    8450:	400a      	ands	r2, r1
    8452:	1c11      	adds	r1, r2, #0
    8454:	1c02      	adds	r2, r0, #0
    8456:	430a      	orrs	r2, r1
    8458:	705a      	strb	r2, [r3, #1]
		if(eth_sock[4].time_wait_SEND_OK){eth_sock[4].time_wait_SEND_OK--;}	
    845a:	4b2c      	ldr	r3, [pc, #176]	; (850c <tc3_process+0x288>)
    845c:	4a34      	ldr	r2, [pc, #208]	; (8530 <tc3_process+0x2ac>)
    845e:	5c9a      	ldrb	r2, [r3, r2]
    8460:	4934      	ldr	r1, [pc, #208]	; (8534 <tc3_process+0x2b0>)
    8462:	5c5b      	ldrb	r3, [r3, r1]
    8464:	021b      	lsls	r3, r3, #8
    8466:	4313      	orrs	r3, r2
    8468:	b29b      	uxth	r3, r3
    846a:	2b00      	cmp	r3, #0
    846c:	d01f      	beq.n	84ae <tc3_process+0x22a>
    846e:	4b27      	ldr	r3, [pc, #156]	; (850c <tc3_process+0x288>)
    8470:	4a2f      	ldr	r2, [pc, #188]	; (8530 <tc3_process+0x2ac>)
    8472:	5c9a      	ldrb	r2, [r3, r2]
    8474:	492f      	ldr	r1, [pc, #188]	; (8534 <tc3_process+0x2b0>)
    8476:	5c5b      	ldrb	r3, [r3, r1]
    8478:	021b      	lsls	r3, r3, #8
    847a:	4313      	orrs	r3, r2
    847c:	b29b      	uxth	r3, r3
    847e:	3b01      	subs	r3, #1
    8480:	b299      	uxth	r1, r3
    8482:	4b22      	ldr	r3, [pc, #136]	; (850c <tc3_process+0x288>)
    8484:	4a2a      	ldr	r2, [pc, #168]	; (8530 <tc3_process+0x2ac>)
    8486:	20ff      	movs	r0, #255	; 0xff
    8488:	4008      	ands	r0, r1
    848a:	0005      	movs	r5, r0
    848c:	5c98      	ldrb	r0, [r3, r2]
    848e:	2400      	movs	r4, #0
    8490:	4020      	ands	r0, r4
    8492:	1c04      	adds	r4, r0, #0
    8494:	1c28      	adds	r0, r5, #0
    8496:	4320      	orrs	r0, r4
    8498:	5498      	strb	r0, [r3, r2]
    849a:	0a09      	lsrs	r1, r1, #8
    849c:	b288      	uxth	r0, r1
    849e:	189b      	adds	r3, r3, r2
    84a0:	785a      	ldrb	r2, [r3, #1]
    84a2:	2100      	movs	r1, #0
    84a4:	400a      	ands	r2, r1
    84a6:	1c11      	adds	r1, r2, #0
    84a8:	1c02      	adds	r2, r0, #0
    84aa:	430a      	orrs	r2, r1
    84ac:	705a      	strb	r2, [r3, #1]
		
		loggin_timeout++;
    84ae:	4b22      	ldr	r3, [pc, #136]	; (8538 <tc3_process+0x2b4>)
    84b0:	681b      	ldr	r3, [r3, #0]
    84b2:	1c5a      	adds	r2, r3, #1
    84b4:	4b20      	ldr	r3, [pc, #128]	; (8538 <tc3_process+0x2b4>)
    84b6:	601a      	str	r2, [r3, #0]
		time_100mk=time_100mk+tc3_cnt;	
    84b8:	4b20      	ldr	r3, [pc, #128]	; (853c <tc3_process+0x2b8>)
    84ba:	681a      	ldr	r2, [r3, #0]
    84bc:	4b11      	ldr	r3, [pc, #68]	; (8504 <tc3_process+0x280>)
    84be:	681b      	ldr	r3, [r3, #0]
    84c0:	18d2      	adds	r2, r2, r3
    84c2:	4b1e      	ldr	r3, [pc, #120]	; (853c <tc3_process+0x2b8>)
    84c4:	601a      	str	r2, [r3, #0]
		if(time_100mk>=10000)
    84c6:	4b1d      	ldr	r3, [pc, #116]	; (853c <tc3_process+0x2b8>)
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	4a1d      	ldr	r2, [pc, #116]	; (8540 <tc3_process+0x2bc>)
    84cc:	4293      	cmp	r3, r2
    84ce:	d912      	bls.n	84f6 <tc3_process+0x272>
		{time_100mk=0;TTL++; if(ger_wait){ger_wait--;} check_gerkon();}
    84d0:	4b1a      	ldr	r3, [pc, #104]	; (853c <tc3_process+0x2b8>)
    84d2:	2200      	movs	r2, #0
    84d4:	601a      	str	r2, [r3, #0]
    84d6:	4b1b      	ldr	r3, [pc, #108]	; (8544 <tc3_process+0x2c0>)
    84d8:	681b      	ldr	r3, [r3, #0]
    84da:	1c5a      	adds	r2, r3, #1
    84dc:	4b19      	ldr	r3, [pc, #100]	; (8544 <tc3_process+0x2c0>)
    84de:	601a      	str	r2, [r3, #0]
    84e0:	4b19      	ldr	r3, [pc, #100]	; (8548 <tc3_process+0x2c4>)
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d004      	beq.n	84f2 <tc3_process+0x26e>
    84e8:	4b17      	ldr	r3, [pc, #92]	; (8548 <tc3_process+0x2c4>)
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	1e5a      	subs	r2, r3, #1
    84ee:	4b16      	ldr	r3, [pc, #88]	; (8548 <tc3_process+0x2c4>)
    84f0:	601a      	str	r2, [r3, #0]
    84f2:	4b16      	ldr	r3, [pc, #88]	; (854c <tc3_process+0x2c8>)
    84f4:	4798      	blx	r3
		
		tc3_cnt=0;		
    84f6:	4b03      	ldr	r3, [pc, #12]	; (8504 <tc3_process+0x280>)
    84f8:	2200      	movs	r2, #0
    84fa:	601a      	str	r2, [r3, #0]
    84fc:	e000      	b.n	8500 <tc3_process+0x27c>
		if(!tc3_cnt) {return;}
    84fe:	46c0      	nop			; (mov r8, r8)
		
	}
    8500:	46bd      	mov	sp, r7
    8502:	bdb0      	pop	{r4, r5, r7, pc}
    8504:	2000046c 	.word	0x2000046c
    8508:	200031fc 	.word	0x200031fc
    850c:	200005cc 	.word	0x200005cc
    8510:	000005e3 	.word	0x000005e3
    8514:	000005e4 	.word	0x000005e4
    8518:	00000bc8 	.word	0x00000bc8
    851c:	00000bc9 	.word	0x00000bc9
    8520:	000011ad 	.word	0x000011ad
    8524:	000011ae 	.word	0x000011ae
    8528:	00001792 	.word	0x00001792
    852c:	00001793 	.word	0x00001793
    8530:	00001d77 	.word	0x00001d77
    8534:	00001d78 	.word	0x00001d78
    8538:	20000470 	.word	0x20000470
    853c:	20000478 	.word	0x20000478
    8540:	0000270f 	.word	0x0000270f
    8544:	2000047c 	.word	0x2000047c
    8548:	20000474 	.word	0x20000474
    854c:	00006f75 	.word	0x00006f75

00008550 <__NVIC_EnableIRQ>:
{
    8550:	b580      	push	{r7, lr}
    8552:	b082      	sub	sp, #8
    8554:	af00      	add	r7, sp, #0
    8556:	0002      	movs	r2, r0
    8558:	1dfb      	adds	r3, r7, #7
    855a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    855c:	1dfb      	adds	r3, r7, #7
    855e:	781b      	ldrb	r3, [r3, #0]
    8560:	2b7f      	cmp	r3, #127	; 0x7f
    8562:	d809      	bhi.n	8578 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8564:	4b06      	ldr	r3, [pc, #24]	; (8580 <__NVIC_EnableIRQ+0x30>)
    8566:	1dfa      	adds	r2, r7, #7
    8568:	7812      	ldrb	r2, [r2, #0]
    856a:	0011      	movs	r1, r2
    856c:	221f      	movs	r2, #31
    856e:	400a      	ands	r2, r1
    8570:	2101      	movs	r1, #1
    8572:	4091      	lsls	r1, r2
    8574:	000a      	movs	r2, r1
    8576:	601a      	str	r2, [r3, #0]
}
    8578:	46c0      	nop			; (mov r8, r8)
    857a:	46bd      	mov	sp, r7
    857c:	b002      	add	sp, #8
    857e:	bd80      	pop	{r7, pc}
    8580:	e000e100 	.word	0xe000e100

00008584 <__NVIC_DisableIRQ>:
{
    8584:	b580      	push	{r7, lr}
    8586:	b082      	sub	sp, #8
    8588:	af00      	add	r7, sp, #0
    858a:	0002      	movs	r2, r0
    858c:	1dfb      	adds	r3, r7, #7
    858e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8590:	1dfb      	adds	r3, r7, #7
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	2b7f      	cmp	r3, #127	; 0x7f
    8596:	d80e      	bhi.n	85b6 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8598:	4909      	ldr	r1, [pc, #36]	; (85c0 <__NVIC_DisableIRQ+0x3c>)
    859a:	1dfb      	adds	r3, r7, #7
    859c:	781b      	ldrb	r3, [r3, #0]
    859e:	001a      	movs	r2, r3
    85a0:	231f      	movs	r3, #31
    85a2:	4013      	ands	r3, r2
    85a4:	2201      	movs	r2, #1
    85a6:	409a      	lsls	r2, r3
    85a8:	0013      	movs	r3, r2
    85aa:	2280      	movs	r2, #128	; 0x80
    85ac:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    85ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    85b2:	f3bf 8f6f 	isb	sy
}
    85b6:	46c0      	nop			; (mov r8, r8)
    85b8:	46bd      	mov	sp, r7
    85ba:	b002      	add	sp, #8
    85bc:	bd80      	pop	{r7, pc}
    85be:	46c0      	nop			; (mov r8, r8)
    85c0:	e000e100 	.word	0xe000e100

000085c4 <__NVIC_SetPriority>:
{
    85c4:	b5b0      	push	{r4, r5, r7, lr}
    85c6:	b082      	sub	sp, #8
    85c8:	af00      	add	r7, sp, #0
    85ca:	0002      	movs	r2, r0
    85cc:	6039      	str	r1, [r7, #0]
    85ce:	1dfb      	adds	r3, r7, #7
    85d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    85d2:	1dfb      	adds	r3, r7, #7
    85d4:	781b      	ldrb	r3, [r3, #0]
    85d6:	2b7f      	cmp	r3, #127	; 0x7f
    85d8:	d828      	bhi.n	862c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    85da:	4c2f      	ldr	r4, [pc, #188]	; (8698 <__NVIC_SetPriority+0xd4>)
    85dc:	1dfb      	adds	r3, r7, #7
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	b25b      	sxtb	r3, r3
    85e2:	089b      	lsrs	r3, r3, #2
    85e4:	492c      	ldr	r1, [pc, #176]	; (8698 <__NVIC_SetPriority+0xd4>)
    85e6:	1dfa      	adds	r2, r7, #7
    85e8:	7812      	ldrb	r2, [r2, #0]
    85ea:	b252      	sxtb	r2, r2
    85ec:	0892      	lsrs	r2, r2, #2
    85ee:	32c0      	adds	r2, #192	; 0xc0
    85f0:	0092      	lsls	r2, r2, #2
    85f2:	5852      	ldr	r2, [r2, r1]
    85f4:	1df9      	adds	r1, r7, #7
    85f6:	7809      	ldrb	r1, [r1, #0]
    85f8:	0008      	movs	r0, r1
    85fa:	2103      	movs	r1, #3
    85fc:	4001      	ands	r1, r0
    85fe:	00c9      	lsls	r1, r1, #3
    8600:	20ff      	movs	r0, #255	; 0xff
    8602:	4088      	lsls	r0, r1
    8604:	0001      	movs	r1, r0
    8606:	43c9      	mvns	r1, r1
    8608:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    860a:	683a      	ldr	r2, [r7, #0]
    860c:	0192      	lsls	r2, r2, #6
    860e:	20ff      	movs	r0, #255	; 0xff
    8610:	4010      	ands	r0, r2
    8612:	1dfa      	adds	r2, r7, #7
    8614:	7812      	ldrb	r2, [r2, #0]
    8616:	0015      	movs	r5, r2
    8618:	2203      	movs	r2, #3
    861a:	402a      	ands	r2, r5
    861c:	00d2      	lsls	r2, r2, #3
    861e:	4090      	lsls	r0, r2
    8620:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8622:	430a      	orrs	r2, r1
    8624:	33c0      	adds	r3, #192	; 0xc0
    8626:	009b      	lsls	r3, r3, #2
    8628:	511a      	str	r2, [r3, r4]
}
    862a:	e031      	b.n	8690 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    862c:	4c1b      	ldr	r4, [pc, #108]	; (869c <__NVIC_SetPriority+0xd8>)
    862e:	1dfb      	adds	r3, r7, #7
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	001a      	movs	r2, r3
    8634:	230f      	movs	r3, #15
    8636:	4013      	ands	r3, r2
    8638:	3b08      	subs	r3, #8
    863a:	0899      	lsrs	r1, r3, #2
    863c:	4a17      	ldr	r2, [pc, #92]	; (869c <__NVIC_SetPriority+0xd8>)
    863e:	1dfb      	adds	r3, r7, #7
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	0018      	movs	r0, r3
    8644:	230f      	movs	r3, #15
    8646:	4003      	ands	r3, r0
    8648:	3b08      	subs	r3, #8
    864a:	089b      	lsrs	r3, r3, #2
    864c:	3306      	adds	r3, #6
    864e:	009b      	lsls	r3, r3, #2
    8650:	18d3      	adds	r3, r2, r3
    8652:	3304      	adds	r3, #4
    8654:	681b      	ldr	r3, [r3, #0]
    8656:	1dfa      	adds	r2, r7, #7
    8658:	7812      	ldrb	r2, [r2, #0]
    865a:	0010      	movs	r0, r2
    865c:	2203      	movs	r2, #3
    865e:	4002      	ands	r2, r0
    8660:	00d2      	lsls	r2, r2, #3
    8662:	20ff      	movs	r0, #255	; 0xff
    8664:	4090      	lsls	r0, r2
    8666:	0002      	movs	r2, r0
    8668:	43d2      	mvns	r2, r2
    866a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    866c:	683b      	ldr	r3, [r7, #0]
    866e:	019b      	lsls	r3, r3, #6
    8670:	20ff      	movs	r0, #255	; 0xff
    8672:	4018      	ands	r0, r3
    8674:	1dfb      	adds	r3, r7, #7
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	001d      	movs	r5, r3
    867a:	2303      	movs	r3, #3
    867c:	402b      	ands	r3, r5
    867e:	00db      	lsls	r3, r3, #3
    8680:	4098      	lsls	r0, r3
    8682:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8684:	431a      	orrs	r2, r3
    8686:	1d8b      	adds	r3, r1, #6
    8688:	009b      	lsls	r3, r3, #2
    868a:	18e3      	adds	r3, r4, r3
    868c:	3304      	adds	r3, #4
    868e:	601a      	str	r2, [r3, #0]
}
    8690:	46c0      	nop			; (mov r8, r8)
    8692:	46bd      	mov	sp, r7
    8694:	b002      	add	sp, #8
    8696:	bdb0      	pop	{r4, r5, r7, pc}
    8698:	e000e100 	.word	0xe000e100
    869c:	e000ed00 	.word	0xe000ed00

000086a0 <usart_init>:
#include "def.h"

volatile USART port[4];

void usart_init(void)	{for(BYTE i= 0; i < 4; i++) {init(i);}}
    86a0:	b580      	push	{r7, lr}
    86a2:	b082      	sub	sp, #8
    86a4:	af00      	add	r7, sp, #0
    86a6:	1dfb      	adds	r3, r7, #7
    86a8:	2200      	movs	r2, #0
    86aa:	701a      	strb	r2, [r3, #0]
    86ac:	e009      	b.n	86c2 <usart_init+0x22>
    86ae:	1dfb      	adds	r3, r7, #7
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	0018      	movs	r0, r3
    86b4:	f000 f80d 	bl	86d2 <init>
    86b8:	1dfb      	adds	r3, r7, #7
    86ba:	781a      	ldrb	r2, [r3, #0]
    86bc:	1dfb      	adds	r3, r7, #7
    86be:	3201      	adds	r2, #1
    86c0:	701a      	strb	r2, [r3, #0]
    86c2:	1dfb      	adds	r3, r7, #7
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	2b03      	cmp	r3, #3
    86c8:	d9f1      	bls.n	86ae <usart_init+0xe>
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	46bd      	mov	sp, r7
    86ce:	b002      	add	sp, #8
    86d0:	bd80      	pop	{r7, pc}

000086d2 <init>:
	
void init(BYTE n_port)
{
    86d2:	b5b0      	push	{r4, r5, r7, lr}
    86d4:	b088      	sub	sp, #32
    86d6:	af00      	add	r7, sp, #0
    86d8:	0002      	movs	r2, r0
    86da:	1dfb      	adds	r3, r7, #7
    86dc:	701a      	strb	r2, [r3, #0]
	double tout = 0;
    86de:	2300      	movs	r3, #0
    86e0:	2400      	movs	r4, #0
    86e2:	613b      	str	r3, [r7, #16]
    86e4:	617c      	str	r4, [r7, #20]
	double bsize = 0;
    86e6:	2300      	movs	r3, #0
    86e8:	2400      	movs	r4, #0
    86ea:	60bb      	str	r3, [r7, #8]
    86ec:	60fc      	str	r4, [r7, #12]
	DWORD val = 0;
    86ee:	2300      	movs	r3, #0
    86f0:	61fb      	str	r3, [r7, #28]
	bsize = 9;
    86f2:	2300      	movs	r3, #0
    86f4:	4cef      	ldr	r4, [pc, #956]	; (8ab4 <init+0x3e2>)
    86f6:	60bb      	str	r3, [r7, #8]
    86f8:	60fc      	str	r4, [r7, #12]

	switch(n_port)
    86fa:	1dfb      	adds	r3, r7, #7
    86fc:	781b      	ldrb	r3, [r3, #0]
    86fe:	2b01      	cmp	r3, #1
    8700:	d02f      	beq.n	8762 <init+0x90>
    8702:	dc03      	bgt.n	870c <init+0x3a>
    8704:	2b00      	cmp	r3, #0
    8706:	d007      	beq.n	8718 <init+0x46>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
			port[n_port].sercom = SERCOM1;
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
			port[n_port].irqn_sercom = SERCOM1_IRQn;
		break;
		default: /*error*/ return;
    8708:	f000 fbe7 	bl	8eda <init+0x808>
	switch(n_port)
    870c:	2b02      	cmp	r3, #2
    870e:	d04d      	beq.n	87ac <init+0xda>
    8710:	2b03      	cmp	r3, #3
    8712:	d070      	beq.n	87f6 <init+0x124>
		default: /*error*/ return;
    8714:	f000 fbe1 	bl	8eda <init+0x808>
			PM->APBCMASK.bit.SERCOM3_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8718:	4ae7      	ldr	r2, [pc, #924]	; (8ab8 <init+0x3e6>)
    871a:	6a13      	ldr	r3, [r2, #32]
    871c:	2120      	movs	r1, #32
    871e:	430b      	orrs	r3, r1
    8720:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM3;
    8722:	1dfb      	adds	r3, r7, #7
    8724:	781a      	ldrb	r2, [r3, #0]
    8726:	49e5      	ldr	r1, [pc, #916]	; (8abc <init+0x3ea>)
    8728:	0013      	movs	r3, r2
    872a:	00db      	lsls	r3, r3, #3
    872c:	189b      	adds	r3, r3, r2
    872e:	019b      	lsls	r3, r3, #6
    8730:	4ae3      	ldr	r2, [pc, #908]	; (8ac0 <init+0x3ee>)
    8732:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM3_CORE;
    8734:	1dfb      	adds	r3, r7, #7
    8736:	781a      	ldrb	r2, [r3, #0]
    8738:	49e0      	ldr	r1, [pc, #896]	; (8abc <init+0x3ea>)
    873a:	0013      	movs	r3, r2
    873c:	00db      	lsls	r3, r3, #3
    873e:	189b      	adds	r3, r3, r2
    8740:	019b      	lsls	r3, r3, #6
    8742:	18cb      	adds	r3, r1, r3
    8744:	3304      	adds	r3, #4
    8746:	2217      	movs	r2, #23
    8748:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM3_IRQn;
    874a:	1dfb      	adds	r3, r7, #7
    874c:	781a      	ldrb	r2, [r3, #0]
    874e:	49db      	ldr	r1, [pc, #876]	; (8abc <init+0x3ea>)
    8750:	0013      	movs	r3, r2
    8752:	00db      	lsls	r3, r3, #3
    8754:	189b      	adds	r3, r3, r2
    8756:	019b      	lsls	r3, r3, #6
    8758:	18cb      	adds	r3, r1, r3
    875a:	3308      	adds	r3, #8
    875c:	220c      	movs	r2, #12
    875e:	701a      	strb	r2, [r3, #0]
		break;
    8760:	e06e      	b.n	8840 <init+0x16e>
			PM->APBCMASK.bit.SERCOM2_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8762:	4ad5      	ldr	r2, [pc, #852]	; (8ab8 <init+0x3e6>)
    8764:	6a13      	ldr	r3, [r2, #32]
    8766:	2110      	movs	r1, #16
    8768:	430b      	orrs	r3, r1
    876a:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM2;
    876c:	1dfb      	adds	r3, r7, #7
    876e:	781a      	ldrb	r2, [r3, #0]
    8770:	49d2      	ldr	r1, [pc, #840]	; (8abc <init+0x3ea>)
    8772:	0013      	movs	r3, r2
    8774:	00db      	lsls	r3, r3, #3
    8776:	189b      	adds	r3, r3, r2
    8778:	019b      	lsls	r3, r3, #6
    877a:	4ad2      	ldr	r2, [pc, #840]	; (8ac4 <init+0x3f2>)
    877c:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM2_CORE;
    877e:	1dfb      	adds	r3, r7, #7
    8780:	781a      	ldrb	r2, [r3, #0]
    8782:	49ce      	ldr	r1, [pc, #824]	; (8abc <init+0x3ea>)
    8784:	0013      	movs	r3, r2
    8786:	00db      	lsls	r3, r3, #3
    8788:	189b      	adds	r3, r3, r2
    878a:	019b      	lsls	r3, r3, #6
    878c:	18cb      	adds	r3, r1, r3
    878e:	3304      	adds	r3, #4
    8790:	2216      	movs	r2, #22
    8792:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM2_IRQn;
    8794:	1dfb      	adds	r3, r7, #7
    8796:	781a      	ldrb	r2, [r3, #0]
    8798:	49c8      	ldr	r1, [pc, #800]	; (8abc <init+0x3ea>)
    879a:	0013      	movs	r3, r2
    879c:	00db      	lsls	r3, r3, #3
    879e:	189b      	adds	r3, r3, r2
    87a0:	019b      	lsls	r3, r3, #6
    87a2:	18cb      	adds	r3, r1, r3
    87a4:	3308      	adds	r3, #8
    87a6:	220b      	movs	r2, #11
    87a8:	701a      	strb	r2, [r3, #0]
		break;
    87aa:	e049      	b.n	8840 <init+0x16e>
			PM->APBCMASK.bit.SERCOM0_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    87ac:	4ac2      	ldr	r2, [pc, #776]	; (8ab8 <init+0x3e6>)
    87ae:	6a13      	ldr	r3, [r2, #32]
    87b0:	2104      	movs	r1, #4
    87b2:	430b      	orrs	r3, r1
    87b4:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM0;
    87b6:	1dfb      	adds	r3, r7, #7
    87b8:	781a      	ldrb	r2, [r3, #0]
    87ba:	49c0      	ldr	r1, [pc, #768]	; (8abc <init+0x3ea>)
    87bc:	0013      	movs	r3, r2
    87be:	00db      	lsls	r3, r3, #3
    87c0:	189b      	adds	r3, r3, r2
    87c2:	019b      	lsls	r3, r3, #6
    87c4:	4ac0      	ldr	r2, [pc, #768]	; (8ac8 <init+0x3f6>)
    87c6:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM0_CORE;
    87c8:	1dfb      	adds	r3, r7, #7
    87ca:	781a      	ldrb	r2, [r3, #0]
    87cc:	49bb      	ldr	r1, [pc, #748]	; (8abc <init+0x3ea>)
    87ce:	0013      	movs	r3, r2
    87d0:	00db      	lsls	r3, r3, #3
    87d2:	189b      	adds	r3, r3, r2
    87d4:	019b      	lsls	r3, r3, #6
    87d6:	18cb      	adds	r3, r1, r3
    87d8:	3304      	adds	r3, #4
    87da:	2214      	movs	r2, #20
    87dc:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM0_IRQn;
    87de:	1dfb      	adds	r3, r7, #7
    87e0:	781a      	ldrb	r2, [r3, #0]
    87e2:	49b6      	ldr	r1, [pc, #728]	; (8abc <init+0x3ea>)
    87e4:	0013      	movs	r3, r2
    87e6:	00db      	lsls	r3, r3, #3
    87e8:	189b      	adds	r3, r3, r2
    87ea:	019b      	lsls	r3, r3, #6
    87ec:	18cb      	adds	r3, r1, r3
    87ee:	3308      	adds	r3, #8
    87f0:	2209      	movs	r2, #9
    87f2:	701a      	strb	r2, [r3, #0]
		break;
    87f4:	e024      	b.n	8840 <init+0x16e>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    87f6:	4ab0      	ldr	r2, [pc, #704]	; (8ab8 <init+0x3e6>)
    87f8:	6a13      	ldr	r3, [r2, #32]
    87fa:	2108      	movs	r1, #8
    87fc:	430b      	orrs	r3, r1
    87fe:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM1;
    8800:	1dfb      	adds	r3, r7, #7
    8802:	781a      	ldrb	r2, [r3, #0]
    8804:	49ad      	ldr	r1, [pc, #692]	; (8abc <init+0x3ea>)
    8806:	0013      	movs	r3, r2
    8808:	00db      	lsls	r3, r3, #3
    880a:	189b      	adds	r3, r3, r2
    880c:	019b      	lsls	r3, r3, #6
    880e:	4aaf      	ldr	r2, [pc, #700]	; (8acc <init+0x3fa>)
    8810:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
    8812:	1dfb      	adds	r3, r7, #7
    8814:	781a      	ldrb	r2, [r3, #0]
    8816:	49a9      	ldr	r1, [pc, #676]	; (8abc <init+0x3ea>)
    8818:	0013      	movs	r3, r2
    881a:	00db      	lsls	r3, r3, #3
    881c:	189b      	adds	r3, r3, r2
    881e:	019b      	lsls	r3, r3, #6
    8820:	18cb      	adds	r3, r1, r3
    8822:	3304      	adds	r3, #4
    8824:	2215      	movs	r2, #21
    8826:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM1_IRQn;
    8828:	1dfb      	adds	r3, r7, #7
    882a:	781a      	ldrb	r2, [r3, #0]
    882c:	49a3      	ldr	r1, [pc, #652]	; (8abc <init+0x3ea>)
    882e:	0013      	movs	r3, r2
    8830:	00db      	lsls	r3, r3, #3
    8832:	189b      	adds	r3, r3, r2
    8834:	019b      	lsls	r3, r3, #6
    8836:	18cb      	adds	r3, r1, r3
    8838:	3308      	adds	r3, #8
    883a:	220a      	movs	r2, #10
    883c:	701a      	strb	r2, [r3, #0]
		break;
    883e:	46c0      	nop			; (mov r8, r8)
	}
	
	PM->APBCSEL.bit.APBCDIV   = 0x00;
    8840:	4a9d      	ldr	r2, [pc, #628]	; (8ab8 <init+0x3e6>)
    8842:	7ad3      	ldrb	r3, [r2, #11]
    8844:	2107      	movs	r1, #7
    8846:	438b      	bics	r3, r1
    8848:	72d3      	strb	r3, [r2, #11]
	GCLK->CLKCTRL.bit.WRTLOCK = 0x00;
    884a:	4aa1      	ldr	r2, [pc, #644]	; (8ad0 <init+0x3fe>)
    884c:	8853      	ldrh	r3, [r2, #2]
    884e:	045b      	lsls	r3, r3, #17
    8850:	0c5b      	lsrs	r3, r3, #17
    8852:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.ID      = port[n_port].gclk_sercom; // Bits 5:0  - ID: Generic Clock Selection ID (0x14 - SERCOM0_CORE)
    8854:	4a9e      	ldr	r2, [pc, #632]	; (8ad0 <init+0x3fe>)
    8856:	1dfb      	adds	r3, r7, #7
    8858:	7819      	ldrb	r1, [r3, #0]
    885a:	4898      	ldr	r0, [pc, #608]	; (8abc <init+0x3ea>)
    885c:	000b      	movs	r3, r1
    885e:	00db      	lsls	r3, r3, #3
    8860:	185b      	adds	r3, r3, r1
    8862:	019b      	lsls	r3, r3, #6
    8864:	18c3      	adds	r3, r0, r3
    8866:	3304      	adds	r3, #4
    8868:	681b      	ldr	r3, [r3, #0]
    886a:	b2db      	uxtb	r3, r3
    886c:	1c19      	adds	r1, r3, #0
    886e:	233f      	movs	r3, #63	; 0x3f
    8870:	400b      	ands	r3, r1
    8872:	b2d9      	uxtb	r1, r3
    8874:	8853      	ldrh	r3, [r2, #2]
    8876:	1c08      	adds	r0, r1, #0
    8878:	213f      	movs	r1, #63	; 0x3f
    887a:	4008      	ands	r0, r1
    887c:	213f      	movs	r1, #63	; 0x3f
    887e:	438b      	bics	r3, r1
    8880:	1c19      	adds	r1, r3, #0
    8882:	1c03      	adds	r3, r0, #0
    8884:	430b      	orrs	r3, r1
    8886:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN     = 0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    8888:	4a91      	ldr	r2, [pc, #580]	; (8ad0 <init+0x3fe>)
    888a:	8853      	ldrh	r3, [r2, #2]
    888c:	4991      	ldr	r1, [pc, #580]	; (8ad4 <init+0x402>)
    888e:	400b      	ands	r3, r1
    8890:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN   = 0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    8892:	4a8f      	ldr	r2, [pc, #572]	; (8ad0 <init+0x3fe>)
    8894:	8853      	ldrh	r3, [r2, #2]
    8896:	2180      	movs	r1, #128	; 0x80
    8898:	01c9      	lsls	r1, r1, #7
    889a:	430b      	orrs	r3, r1
    889c:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.ENABLE = 0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    889e:	1dfb      	adds	r3, r7, #7
    88a0:	781a      	ldrb	r2, [r3, #0]
    88a2:	4986      	ldr	r1, [pc, #536]	; (8abc <init+0x3ea>)
    88a4:	0013      	movs	r3, r2
    88a6:	00db      	lsls	r3, r3, #3
    88a8:	189b      	adds	r3, r3, r2
    88aa:	019b      	lsls	r3, r3, #6
    88ac:	585b      	ldr	r3, [r3, r1]
    88ae:	681a      	ldr	r2, [r3, #0]
    88b0:	2102      	movs	r1, #2
    88b2:	438a      	bics	r2, r1
    88b4:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.ENABLE) { ; }
    88b6:	46c0      	nop			; (mov r8, r8)
    88b8:	1dfb      	adds	r3, r7, #7
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	497f      	ldr	r1, [pc, #508]	; (8abc <init+0x3ea>)
    88be:	0013      	movs	r3, r2
    88c0:	00db      	lsls	r3, r3, #3
    88c2:	189b      	adds	r3, r3, r2
    88c4:	019b      	lsls	r3, r3, #6
    88c6:	585b      	ldr	r3, [r3, r1]
    88c8:	69db      	ldr	r3, [r3, #28]
    88ca:	079b      	lsls	r3, r3, #30
    88cc:	0fdb      	lsrs	r3, r3, #31
    88ce:	b2db      	uxtb	r3, r3
    88d0:	2b00      	cmp	r3, #0
    88d2:	d1f1      	bne.n	88b8 <init+0x1e6>

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.SWRST   =0x01; //Bit0-SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    88d4:	1dfb      	adds	r3, r7, #7
    88d6:	781a      	ldrb	r2, [r3, #0]
    88d8:	4978      	ldr	r1, [pc, #480]	; (8abc <init+0x3ea>)
    88da:	0013      	movs	r3, r2
    88dc:	00db      	lsls	r3, r3, #3
    88de:	189b      	adds	r3, r3, r2
    88e0:	019b      	lsls	r3, r3, #6
    88e2:	585b      	ldr	r3, [r3, r1]
    88e4:	681a      	ldr	r2, [r3, #0]
    88e6:	2101      	movs	r1, #1
    88e8:	430a      	orrs	r2, r1
    88ea:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    88ec:	46c0      	nop			; (mov r8, r8)
    88ee:	1dfb      	adds	r3, r7, #7
    88f0:	781a      	ldrb	r2, [r3, #0]
    88f2:	4972      	ldr	r1, [pc, #456]	; (8abc <init+0x3ea>)
    88f4:	0013      	movs	r3, r2
    88f6:	00db      	lsls	r3, r3, #3
    88f8:	189b      	adds	r3, r3, r2
    88fa:	019b      	lsls	r3, r3, #6
    88fc:	585b      	ldr	r3, [r3, r1]
    88fe:	69db      	ldr	r3, [r3, #28]
    8900:	07db      	lsls	r3, r3, #31
    8902:	0fdb      	lsrs	r3, r3, #31
    8904:	b2db      	uxtb	r3, r3
    8906:	2b00      	cmp	r3, #0
    8908:	d1f1      	bne.n	88ee <init+0x21c>

	port[n_port].sercom->USART.CTRLA.bit.DORD    =0x01;									// Bit  30    - DORD: Data Order (1: LSB is transmitted first.)
    890a:	1dfb      	adds	r3, r7, #7
    890c:	781a      	ldrb	r2, [r3, #0]
    890e:	496b      	ldr	r1, [pc, #428]	; (8abc <init+0x3ea>)
    8910:	0013      	movs	r3, r2
    8912:	00db      	lsls	r3, r3, #3
    8914:	189b      	adds	r3, r3, r2
    8916:	019b      	lsls	r3, r3, #6
    8918:	585b      	ldr	r3, [r3, r1]
    891a:	681a      	ldr	r2, [r3, #0]
    891c:	2180      	movs	r1, #128	; 0x80
    891e:	05c9      	lsls	r1, r1, #23
    8920:	430a      	orrs	r2, r1
    8922:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CPOL    =0x00;									// Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    8924:	1dfb      	adds	r3, r7, #7
    8926:	781a      	ldrb	r2, [r3, #0]
    8928:	4964      	ldr	r1, [pc, #400]	; (8abc <init+0x3ea>)
    892a:	0013      	movs	r3, r2
    892c:	00db      	lsls	r3, r3, #3
    892e:	189b      	adds	r3, r3, r2
    8930:	019b      	lsls	r3, r3, #6
    8932:	585b      	ldr	r3, [r3, r1]
    8934:	681a      	ldr	r2, [r3, #0]
    8936:	4968      	ldr	r1, [pc, #416]	; (8ad8 <init+0x406>)
    8938:	400a      	ands	r2, r1
    893a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CMODE   =0x00;									// Bit  28    - CMODE: Communication Mode (0: Asynchronous communication.)
    893c:	1dfb      	adds	r3, r7, #7
    893e:	781a      	ldrb	r2, [r3, #0]
    8940:	495e      	ldr	r1, [pc, #376]	; (8abc <init+0x3ea>)
    8942:	0013      	movs	r3, r2
    8944:	00db      	lsls	r3, r3, #3
    8946:	189b      	adds	r3, r3, r2
    8948:	019b      	lsls	r3, r3, #6
    894a:	585b      	ldr	r3, [r3, r1]
    894c:	681a      	ldr	r2, [r3, #0]
    894e:	4963      	ldr	r1, [pc, #396]	; (8adc <init+0x40a>)
    8950:	400a      	ands	r2, r1
    8952:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPA   =0x00;									// Bits 23:22 - SAMPA[1:0]: Sample Adjustment (0: 3-4-5)
    8954:	1dfb      	adds	r3, r7, #7
    8956:	781a      	ldrb	r2, [r3, #0]
    8958:	4958      	ldr	r1, [pc, #352]	; (8abc <init+0x3ea>)
    895a:	0013      	movs	r3, r2
    895c:	00db      	lsls	r3, r3, #3
    895e:	189b      	adds	r3, r3, r2
    8960:	019b      	lsls	r3, r3, #6
    8962:	585b      	ldr	r3, [r3, r1]
    8964:	681a      	ldr	r2, [r3, #0]
    8966:	495e      	ldr	r1, [pc, #376]	; (8ae0 <init+0x40e>)
    8968:	400a      	ands	r2, r1
    896a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPR   =0x00;									// Bits 15:13 - SAMPR[2:0]: Sample Rate (2: 8x over-sampling using arithmetic baud rate generation.)
    896c:	1dfb      	adds	r3, r7, #7
    896e:	781a      	ldrb	r2, [r3, #0]
    8970:	4952      	ldr	r1, [pc, #328]	; (8abc <init+0x3ea>)
    8972:	0013      	movs	r3, r2
    8974:	00db      	lsls	r3, r3, #3
    8976:	189b      	adds	r3, r3, r2
    8978:	019b      	lsls	r3, r3, #6
    897a:	585b      	ldr	r3, [r3, r1]
    897c:	681a      	ldr	r2, [r3, #0]
    897e:	4959      	ldr	r1, [pc, #356]	; (8ae4 <init+0x412>)
    8980:	400a      	ands	r2, r1
    8982:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.IBON    =0x00;									// Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    8984:	1dfb      	adds	r3, r7, #7
    8986:	781a      	ldrb	r2, [r3, #0]
    8988:	494c      	ldr	r1, [pc, #304]	; (8abc <init+0x3ea>)
    898a:	0013      	movs	r3, r2
    898c:	00db      	lsls	r3, r3, #3
    898e:	189b      	adds	r3, r3, r2
    8990:	019b      	lsls	r3, r3, #6
    8992:	585b      	ldr	r3, [r3, r1]
    8994:	681a      	ldr	r2, [r3, #0]
    8996:	4954      	ldr	r1, [pc, #336]	; (8ae8 <init+0x416>)
    8998:	400a      	ands	r2, r1
    899a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RUNSTDBY=0x00;									// Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    899c:	1dfb      	adds	r3, r7, #7
    899e:	781a      	ldrb	r2, [r3, #0]
    89a0:	4946      	ldr	r1, [pc, #280]	; (8abc <init+0x3ea>)
    89a2:	0013      	movs	r3, r2
    89a4:	00db      	lsls	r3, r3, #3
    89a6:	189b      	adds	r3, r3, r2
    89a8:	019b      	lsls	r3, r3, #6
    89aa:	585b      	ldr	r3, [r3, r1]
    89ac:	681a      	ldr	r2, [r3, #0]
    89ae:	2180      	movs	r1, #128	; 0x80
    89b0:	438a      	bics	r2, r1
    89b2:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.MODE    =0x01;									// Bits 4:2   - MODE: Operating Mode (1: USART with internal clock.)
    89b4:	1dfb      	adds	r3, r7, #7
    89b6:	781a      	ldrb	r2, [r3, #0]
    89b8:	4940      	ldr	r1, [pc, #256]	; (8abc <init+0x3ea>)
    89ba:	0013      	movs	r3, r2
    89bc:	00db      	lsls	r3, r3, #3
    89be:	189b      	adds	r3, r3, r2
    89c0:	019b      	lsls	r3, r3, #6
    89c2:	585b      	ldr	r3, [r3, r1]
    89c4:	681a      	ldr	r2, [r3, #0]
    89c6:	211c      	movs	r1, #28
    89c8:	438a      	bics	r2, r1
    89ca:	2104      	movs	r1, #4
    89cc:	430a      	orrs	r2, r1
    89ce:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.TXPO    =0x02;									// Bits 17:16 - TXPO: Transmit Data Pinout (2: TX->PAD[0], RTS->PAD[2])
    89d0:	1dfb      	adds	r3, r7, #7
    89d2:	781a      	ldrb	r2, [r3, #0]
    89d4:	4939      	ldr	r1, [pc, #228]	; (8abc <init+0x3ea>)
    89d6:	0013      	movs	r3, r2
    89d8:	00db      	lsls	r3, r3, #3
    89da:	189b      	adds	r3, r3, r2
    89dc:	019b      	lsls	r3, r3, #6
    89de:	585b      	ldr	r3, [r3, r1]
    89e0:	681a      	ldr	r2, [r3, #0]
    89e2:	4942      	ldr	r1, [pc, #264]	; (8aec <init+0x41a>)
    89e4:	400a      	ands	r2, r1
    89e6:	2180      	movs	r1, #128	; 0x80
    89e8:	0289      	lsls	r1, r1, #10
    89ea:	430a      	orrs	r2, r1
    89ec:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RXPO    =0x01;									// Bits 21:20 - RXPO: Receive Data Pinout (1: RX->PAD[1])
    89ee:	1dfb      	adds	r3, r7, #7
    89f0:	781a      	ldrb	r2, [r3, #0]
    89f2:	4932      	ldr	r1, [pc, #200]	; (8abc <init+0x3ea>)
    89f4:	0013      	movs	r3, r2
    89f6:	00db      	lsls	r3, r3, #3
    89f8:	189b      	adds	r3, r3, r2
    89fa:	019b      	lsls	r3, r3, #6
    89fc:	585b      	ldr	r3, [r3, r1]
    89fe:	681a      	ldr	r2, [r3, #0]
    8a00:	493b      	ldr	r1, [pc, #236]	; (8af0 <init+0x41e>)
    8a02:	400a      	ands	r2, r1
    8a04:	2180      	movs	r1, #128	; 0x80
    8a06:	0349      	lsls	r1, r1, #13
    8a08:	430a      	orrs	r2, r1
    8a0a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLB.bit.ENC     =0x00;									// Bit  10    - ENC: Encoding Format (0: Data is not encoded.)
    8a0c:	1dfb      	adds	r3, r7, #7
    8a0e:	781a      	ldrb	r2, [r3, #0]
    8a10:	492a      	ldr	r1, [pc, #168]	; (8abc <init+0x3ea>)
    8a12:	0013      	movs	r3, r2
    8a14:	00db      	lsls	r3, r3, #3
    8a16:	189b      	adds	r3, r3, r2
    8a18:	019b      	lsls	r3, r3, #6
    8a1a:	585b      	ldr	r3, [r3, r1]
    8a1c:	685a      	ldr	r2, [r3, #4]
    8a1e:	4935      	ldr	r1, [pc, #212]	; (8af4 <init+0x422>)
    8a20:	400a      	ands	r2, r1
    8a22:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.SFDE    =0x01;									// Bit  9     - SFDE: Start of Frame Detection Enable (1: Start-of-frame detection enabled.)
    8a24:	1dfb      	adds	r3, r7, #7
    8a26:	781a      	ldrb	r2, [r3, #0]
    8a28:	4924      	ldr	r1, [pc, #144]	; (8abc <init+0x3ea>)
    8a2a:	0013      	movs	r3, r2
    8a2c:	00db      	lsls	r3, r3, #3
    8a2e:	189b      	adds	r3, r3, r2
    8a30:	019b      	lsls	r3, r3, #6
    8a32:	585b      	ldr	r3, [r3, r1]
    8a34:	685a      	ldr	r2, [r3, #4]
    8a36:	2180      	movs	r1, #128	; 0x80
    8a38:	0089      	lsls	r1, r1, #2
    8a3a:	430a      	orrs	r2, r1
    8a3c:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.COLDEN  =0x00;									// Bit  8     - COLDEN: Collision Detection Enable (0: Collision detection is not enabled.)
    8a3e:	1dfb      	adds	r3, r7, #7
    8a40:	781a      	ldrb	r2, [r3, #0]
    8a42:	491e      	ldr	r1, [pc, #120]	; (8abc <init+0x3ea>)
    8a44:	0013      	movs	r3, r2
    8a46:	00db      	lsls	r3, r3, #3
    8a48:	189b      	adds	r3, r3, r2
    8a4a:	019b      	lsls	r3, r3, #6
    8a4c:	585b      	ldr	r3, [r3, r1]
    8a4e:	685a      	ldr	r2, [r3, #4]
    8a50:	4925      	ldr	r1, [pc, #148]	; (8ae8 <init+0x416>)
    8a52:	400a      	ands	r2, r1
    8a54:	605a      	str	r2, [r3, #4]
	

	//cfg settings
	//frame
	switch (cfg_1.sock_rs485[n_port].parity) 
    8a56:	1dfb      	adds	r3, r7, #7
    8a58:	781a      	ldrb	r2, [r3, #0]
    8a5a:	4927      	ldr	r1, [pc, #156]	; (8af8 <init+0x426>)
    8a5c:	2038      	movs	r0, #56	; 0x38
    8a5e:	0013      	movs	r3, r2
    8a60:	005b      	lsls	r3, r3, #1
    8a62:	189b      	adds	r3, r3, r2
    8a64:	009b      	lsls	r3, r3, #2
    8a66:	189b      	adds	r3, r3, r2
    8a68:	18cb      	adds	r3, r1, r3
    8a6a:	181b      	adds	r3, r3, r0
    8a6c:	795b      	ldrb	r3, [r3, #5]
    8a6e:	069b      	lsls	r3, r3, #26
    8a70:	0f9b      	lsrs	r3, r3, #30
    8a72:	b2db      	uxtb	r3, r3
    8a74:	2b01      	cmp	r3, #1
    8a76:	d045      	beq.n	8b04 <init+0x432>
    8a78:	2b02      	cmp	r3, #2
    8a7a:	d160      	bne.n	8b3e <init+0x46c>
	{
		case  PARITY_EVEN:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = EVEN; break;
    8a7c:	1dfb      	adds	r3, r7, #7
    8a7e:	781a      	ldrb	r2, [r3, #0]
    8a80:	490e      	ldr	r1, [pc, #56]	; (8abc <init+0x3ea>)
    8a82:	0013      	movs	r3, r2
    8a84:	00db      	lsls	r3, r3, #3
    8a86:	189b      	adds	r3, r3, r2
    8a88:	019b      	lsls	r3, r3, #6
    8a8a:	585b      	ldr	r3, [r3, r1]
    8a8c:	681a      	ldr	r2, [r3, #0]
    8a8e:	491b      	ldr	r1, [pc, #108]	; (8afc <init+0x42a>)
    8a90:	400a      	ands	r2, r1
    8a92:	2180      	movs	r1, #128	; 0x80
    8a94:	0449      	lsls	r1, r1, #17
    8a96:	430a      	orrs	r2, r1
    8a98:	601a      	str	r2, [r3, #0]
    8a9a:	1dfb      	adds	r3, r7, #7
    8a9c:	781a      	ldrb	r2, [r3, #0]
    8a9e:	4907      	ldr	r1, [pc, #28]	; (8abc <init+0x3ea>)
    8aa0:	0013      	movs	r3, r2
    8aa2:	00db      	lsls	r3, r3, #3
    8aa4:	189b      	adds	r3, r3, r2
    8aa6:	019b      	lsls	r3, r3, #6
    8aa8:	585b      	ldr	r3, [r3, r1]
    8aaa:	685a      	ldr	r2, [r3, #4]
    8aac:	4914      	ldr	r1, [pc, #80]	; (8b00 <init+0x42e>)
    8aae:	400a      	ands	r2, r1
    8ab0:	605a      	str	r2, [r3, #4]
    8ab2:	e051      	b.n	8b58 <init+0x486>
    8ab4:	40220000 	.word	0x40220000
    8ab8:	40000400 	.word	0x40000400
    8abc:	200031fc 	.word	0x200031fc
    8ac0:	42001400 	.word	0x42001400
    8ac4:	42001000 	.word	0x42001000
    8ac8:	42000800 	.word	0x42000800
    8acc:	42000c00 	.word	0x42000c00
    8ad0:	40000c00 	.word	0x40000c00
    8ad4:	fffff0ff 	.word	0xfffff0ff
    8ad8:	dfffffff 	.word	0xdfffffff
    8adc:	efffffff 	.word	0xefffffff
    8ae0:	ff3fffff 	.word	0xff3fffff
    8ae4:	ffff1fff 	.word	0xffff1fff
    8ae8:	fffffeff 	.word	0xfffffeff
    8aec:	fffcffff 	.word	0xfffcffff
    8af0:	ffcfffff 	.word	0xffcfffff
    8af4:	fffffbff 	.word	0xfffffbff
    8af8:	20003dc4 	.word	0x20003dc4
    8afc:	f0ffffff 	.word	0xf0ffffff
    8b00:	ffffdfff 	.word	0xffffdfff
		case  PARITY_ODD:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = ODD; break;
    8b04:	1dfb      	adds	r3, r7, #7
    8b06:	781a      	ldrb	r2, [r3, #0]
    8b08:	4938      	ldr	r1, [pc, #224]	; (8bec <init+0x51a>)
    8b0a:	0013      	movs	r3, r2
    8b0c:	00db      	lsls	r3, r3, #3
    8b0e:	189b      	adds	r3, r3, r2
    8b10:	019b      	lsls	r3, r3, #6
    8b12:	585b      	ldr	r3, [r3, r1]
    8b14:	681a      	ldr	r2, [r3, #0]
    8b16:	4936      	ldr	r1, [pc, #216]	; (8bf0 <init+0x51e>)
    8b18:	400a      	ands	r2, r1
    8b1a:	2180      	movs	r1, #128	; 0x80
    8b1c:	0449      	lsls	r1, r1, #17
    8b1e:	430a      	orrs	r2, r1
    8b20:	601a      	str	r2, [r3, #0]
    8b22:	1dfb      	adds	r3, r7, #7
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	4931      	ldr	r1, [pc, #196]	; (8bec <init+0x51a>)
    8b28:	0013      	movs	r3, r2
    8b2a:	00db      	lsls	r3, r3, #3
    8b2c:	189b      	adds	r3, r3, r2
    8b2e:	019b      	lsls	r3, r3, #6
    8b30:	585b      	ldr	r3, [r3, r1]
    8b32:	685a      	ldr	r2, [r3, #4]
    8b34:	2180      	movs	r1, #128	; 0x80
    8b36:	0189      	lsls	r1, r1, #6
    8b38:	430a      	orrs	r2, r1
    8b3a:	605a      	str	r2, [r3, #4]
    8b3c:	e00c      	b.n	8b58 <init+0x486>
		default:			port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_NO_PARITY; break;
    8b3e:	1dfb      	adds	r3, r7, #7
    8b40:	781a      	ldrb	r2, [r3, #0]
    8b42:	492a      	ldr	r1, [pc, #168]	; (8bec <init+0x51a>)
    8b44:	0013      	movs	r3, r2
    8b46:	00db      	lsls	r3, r3, #3
    8b48:	189b      	adds	r3, r3, r2
    8b4a:	019b      	lsls	r3, r3, #6
    8b4c:	585b      	ldr	r3, [r3, r1]
    8b4e:	681a      	ldr	r2, [r3, #0]
    8b50:	4927      	ldr	r1, [pc, #156]	; (8bf0 <init+0x51e>)
    8b52:	400a      	ands	r2, r1
    8b54:	601a      	str	r2, [r3, #0]
    8b56:	46c0      	nop			; (mov r8, r8)
	}
	//stop bit
	switch(cfg_1.sock_rs485[n_port].stop)	
    8b58:	1dfb      	adds	r3, r7, #7
    8b5a:	781a      	ldrb	r2, [r3, #0]
    8b5c:	4925      	ldr	r1, [pc, #148]	; (8bf4 <init+0x522>)
    8b5e:	2038      	movs	r0, #56	; 0x38
    8b60:	0013      	movs	r3, r2
    8b62:	005b      	lsls	r3, r3, #1
    8b64:	189b      	adds	r3, r3, r2
    8b66:	009b      	lsls	r3, r3, #2
    8b68:	189b      	adds	r3, r3, r2
    8b6a:	18cb      	adds	r3, r1, r3
    8b6c:	181b      	adds	r3, r3, r0
    8b6e:	795b      	ldrb	r3, [r3, #5]
    8b70:	061b      	lsls	r3, r3, #24
    8b72:	0f9b      	lsrs	r3, r3, #30
    8b74:	b2db      	uxtb	r3, r3
    8b76:	2b02      	cmp	r3, #2
    8b78:	d10c      	bne.n	8b94 <init+0x4c2>
	{
		case 2:		port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 1; break;//2 stop bits
    8b7a:	1dfb      	adds	r3, r7, #7
    8b7c:	781a      	ldrb	r2, [r3, #0]
    8b7e:	491b      	ldr	r1, [pc, #108]	; (8bec <init+0x51a>)
    8b80:	0013      	movs	r3, r2
    8b82:	00db      	lsls	r3, r3, #3
    8b84:	189b      	adds	r3, r3, r2
    8b86:	019b      	lsls	r3, r3, #6
    8b88:	585b      	ldr	r3, [r3, r1]
    8b8a:	685a      	ldr	r2, [r3, #4]
    8b8c:	2140      	movs	r1, #64	; 0x40
    8b8e:	430a      	orrs	r2, r1
    8b90:	605a      	str	r2, [r3, #4]
    8b92:	e00c      	b.n	8bae <init+0x4dc>
		default:	port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 0; break;//1 stop bits
    8b94:	1dfb      	adds	r3, r7, #7
    8b96:	781a      	ldrb	r2, [r3, #0]
    8b98:	4914      	ldr	r1, [pc, #80]	; (8bec <init+0x51a>)
    8b9a:	0013      	movs	r3, r2
    8b9c:	00db      	lsls	r3, r3, #3
    8b9e:	189b      	adds	r3, r3, r2
    8ba0:	019b      	lsls	r3, r3, #6
    8ba2:	585b      	ldr	r3, [r3, r1]
    8ba4:	685a      	ldr	r2, [r3, #4]
    8ba6:	2140      	movs	r1, #64	; 0x40
    8ba8:	438a      	bics	r2, r1
    8baa:	605a      	str	r2, [r3, #4]
    8bac:	46c0      	nop			; (mov r8, r8)
	}
	//char size
	switch (cfg_1.sock_rs485[n_port].bsize)
    8bae:	1dfb      	adds	r3, r7, #7
    8bb0:	781a      	ldrb	r2, [r3, #0]
    8bb2:	4910      	ldr	r1, [pc, #64]	; (8bf4 <init+0x522>)
    8bb4:	2038      	movs	r0, #56	; 0x38
    8bb6:	0013      	movs	r3, r2
    8bb8:	005b      	lsls	r3, r3, #1
    8bba:	189b      	adds	r3, r3, r2
    8bbc:	009b      	lsls	r3, r3, #2
    8bbe:	189b      	adds	r3, r3, r2
    8bc0:	18cb      	adds	r3, r1, r3
    8bc2:	181b      	adds	r3, r3, r0
    8bc4:	795b      	ldrb	r3, [r3, #5]
    8bc6:	071b      	lsls	r3, r3, #28
    8bc8:	0f1b      	lsrs	r3, r3, #28
    8bca:	b2db      	uxtb	r3, r3
    8bcc:	2b07      	cmp	r3, #7
    8bce:	d113      	bne.n	8bf8 <init+0x526>
	{
		case 7:	port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x07; break;
    8bd0:	1dfb      	adds	r3, r7, #7
    8bd2:	781a      	ldrb	r2, [r3, #0]
    8bd4:	4905      	ldr	r1, [pc, #20]	; (8bec <init+0x51a>)
    8bd6:	0013      	movs	r3, r2
    8bd8:	00db      	lsls	r3, r3, #3
    8bda:	189b      	adds	r3, r3, r2
    8bdc:	019b      	lsls	r3, r3, #6
    8bde:	585b      	ldr	r3, [r3, r1]
    8be0:	685a      	ldr	r2, [r3, #4]
    8be2:	2107      	movs	r1, #7
    8be4:	430a      	orrs	r2, r1
    8be6:	605a      	str	r2, [r3, #4]
    8be8:	e013      	b.n	8c12 <init+0x540>
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	200031fc 	.word	0x200031fc
    8bf0:	f0ffffff 	.word	0xf0ffffff
    8bf4:	20003dc4 	.word	0x20003dc4
		default:port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x00; break;
    8bf8:	1dfb      	adds	r3, r7, #7
    8bfa:	781a      	ldrb	r2, [r3, #0]
    8bfc:	49b8      	ldr	r1, [pc, #736]	; (8ee0 <init+0x80e>)
    8bfe:	0013      	movs	r3, r2
    8c00:	00db      	lsls	r3, r3, #3
    8c02:	189b      	adds	r3, r3, r2
    8c04:	019b      	lsls	r3, r3, #6
    8c06:	585b      	ldr	r3, [r3, r1]
    8c08:	685a      	ldr	r2, [r3, #4]
    8c0a:	2107      	movs	r1, #7
    8c0c:	438a      	bics	r2, r1
    8c0e:	605a      	str	r2, [r3, #4]
    8c10:	46c0      	nop			; (mov r8, r8)
	}
	//baud
	val = cfg_1.sock_rs485[n_port].baud;
    8c12:	1dfb      	adds	r3, r7, #7
    8c14:	781a      	ldrb	r2, [r3, #0]
    8c16:	49b3      	ldr	r1, [pc, #716]	; (8ee4 <init+0x812>)
    8c18:	0013      	movs	r3, r2
    8c1a:	005b      	lsls	r3, r3, #1
    8c1c:	189b      	adds	r3, r3, r2
    8c1e:	009b      	lsls	r3, r3, #2
    8c20:	189b      	adds	r3, r3, r2
    8c22:	18cb      	adds	r3, r1, r3
    8c24:	3330      	adds	r3, #48	; 0x30
    8c26:	7a5a      	ldrb	r2, [r3, #9]
    8c28:	7a99      	ldrb	r1, [r3, #10]
    8c2a:	0209      	lsls	r1, r1, #8
    8c2c:	430a      	orrs	r2, r1
    8c2e:	7ad9      	ldrb	r1, [r3, #11]
    8c30:	0409      	lsls	r1, r1, #16
    8c32:	430a      	orrs	r2, r1
    8c34:	7b1b      	ldrb	r3, [r3, #12]
    8c36:	061b      	lsls	r3, r3, #24
    8c38:	4313      	orrs	r3, r2
    8c3a:	61fb      	str	r3, [r7, #28]
	if ( !((val == 600) || (val == 1200) || (val == 2400) || (val == 4800) || (val == 9600) || (val == 19200) || (val == 38400) || (val == 57600) || (val == 115200) || (val == 128000) || (val == 256000)) ) {val = 38400;}
    8c3c:	69fa      	ldr	r2, [r7, #28]
    8c3e:	2396      	movs	r3, #150	; 0x96
    8c40:	009b      	lsls	r3, r3, #2
    8c42:	429a      	cmp	r2, r3
    8c44:	d034      	beq.n	8cb0 <init+0x5de>
    8c46:	69fa      	ldr	r2, [r7, #28]
    8c48:	2396      	movs	r3, #150	; 0x96
    8c4a:	00db      	lsls	r3, r3, #3
    8c4c:	429a      	cmp	r2, r3
    8c4e:	d02f      	beq.n	8cb0 <init+0x5de>
    8c50:	69fa      	ldr	r2, [r7, #28]
    8c52:	2396      	movs	r3, #150	; 0x96
    8c54:	011b      	lsls	r3, r3, #4
    8c56:	429a      	cmp	r2, r3
    8c58:	d02a      	beq.n	8cb0 <init+0x5de>
    8c5a:	69fa      	ldr	r2, [r7, #28]
    8c5c:	2396      	movs	r3, #150	; 0x96
    8c5e:	015b      	lsls	r3, r3, #5
    8c60:	429a      	cmp	r2, r3
    8c62:	d025      	beq.n	8cb0 <init+0x5de>
    8c64:	69fa      	ldr	r2, [r7, #28]
    8c66:	2396      	movs	r3, #150	; 0x96
    8c68:	019b      	lsls	r3, r3, #6
    8c6a:	429a      	cmp	r2, r3
    8c6c:	d020      	beq.n	8cb0 <init+0x5de>
    8c6e:	69fa      	ldr	r2, [r7, #28]
    8c70:	2396      	movs	r3, #150	; 0x96
    8c72:	01db      	lsls	r3, r3, #7
    8c74:	429a      	cmp	r2, r3
    8c76:	d01b      	beq.n	8cb0 <init+0x5de>
    8c78:	69fa      	ldr	r2, [r7, #28]
    8c7a:	2396      	movs	r3, #150	; 0x96
    8c7c:	021b      	lsls	r3, r3, #8
    8c7e:	429a      	cmp	r2, r3
    8c80:	d016      	beq.n	8cb0 <init+0x5de>
    8c82:	69fa      	ldr	r2, [r7, #28]
    8c84:	23e1      	movs	r3, #225	; 0xe1
    8c86:	021b      	lsls	r3, r3, #8
    8c88:	429a      	cmp	r2, r3
    8c8a:	d011      	beq.n	8cb0 <init+0x5de>
    8c8c:	69fa      	ldr	r2, [r7, #28]
    8c8e:	23e1      	movs	r3, #225	; 0xe1
    8c90:	025b      	lsls	r3, r3, #9
    8c92:	429a      	cmp	r2, r3
    8c94:	d00c      	beq.n	8cb0 <init+0x5de>
    8c96:	69fa      	ldr	r2, [r7, #28]
    8c98:	23fa      	movs	r3, #250	; 0xfa
    8c9a:	025b      	lsls	r3, r3, #9
    8c9c:	429a      	cmp	r2, r3
    8c9e:	d007      	beq.n	8cb0 <init+0x5de>
    8ca0:	69fa      	ldr	r2, [r7, #28]
    8ca2:	23fa      	movs	r3, #250	; 0xfa
    8ca4:	029b      	lsls	r3, r3, #10
    8ca6:	429a      	cmp	r2, r3
    8ca8:	d002      	beq.n	8cb0 <init+0x5de>
    8caa:	2396      	movs	r3, #150	; 0x96
    8cac:	021b      	lsls	r3, r3, #8
    8cae:	61fb      	str	r3, [r7, #28]
	port[n_port].sercom->USART.BAUD.bit.BAUD =	65536.0f*(1.0f-(16.0*(float)(val))/(float)(PROC_HERZ)); 
    8cb0:	1dfb      	adds	r3, r7, #7
    8cb2:	781a      	ldrb	r2, [r3, #0]
    8cb4:	498a      	ldr	r1, [pc, #552]	; (8ee0 <init+0x80e>)
    8cb6:	0013      	movs	r3, r2
    8cb8:	00db      	lsls	r3, r3, #3
    8cba:	189b      	adds	r3, r3, r2
    8cbc:	019b      	lsls	r3, r3, #6
    8cbe:	585c      	ldr	r4, [r3, r1]
    8cc0:	4b89      	ldr	r3, [pc, #548]	; (8ee8 <init+0x816>)
    8cc2:	69f8      	ldr	r0, [r7, #28]
    8cc4:	4798      	blx	r3
    8cc6:	1c02      	adds	r2, r0, #0
    8cc8:	4b88      	ldr	r3, [pc, #544]	; (8eec <init+0x81a>)
    8cca:	1c10      	adds	r0, r2, #0
    8ccc:	4798      	blx	r3
    8cce:	4d88      	ldr	r5, [pc, #544]	; (8ef0 <init+0x81e>)
    8cd0:	2200      	movs	r2, #0
    8cd2:	4b88      	ldr	r3, [pc, #544]	; (8ef4 <init+0x822>)
    8cd4:	47a8      	blx	r5
    8cd6:	0002      	movs	r2, r0
    8cd8:	000b      	movs	r3, r1
    8cda:	0010      	movs	r0, r2
    8cdc:	0019      	movs	r1, r3
    8cde:	4d86      	ldr	r5, [pc, #536]	; (8ef8 <init+0x826>)
    8ce0:	2200      	movs	r2, #0
    8ce2:	4b86      	ldr	r3, [pc, #536]	; (8efc <init+0x82a>)
    8ce4:	47a8      	blx	r5
    8ce6:	0002      	movs	r2, r0
    8ce8:	000b      	movs	r3, r1
    8cea:	4d85      	ldr	r5, [pc, #532]	; (8f00 <init+0x82e>)
    8cec:	2000      	movs	r0, #0
    8cee:	4985      	ldr	r1, [pc, #532]	; (8f04 <init+0x832>)
    8cf0:	47a8      	blx	r5
    8cf2:	0002      	movs	r2, r0
    8cf4:	000b      	movs	r3, r1
    8cf6:	0010      	movs	r0, r2
    8cf8:	0019      	movs	r1, r3
    8cfa:	4d7d      	ldr	r5, [pc, #500]	; (8ef0 <init+0x81e>)
    8cfc:	2200      	movs	r2, #0
    8cfe:	4b82      	ldr	r3, [pc, #520]	; (8f08 <init+0x836>)
    8d00:	47a8      	blx	r5
    8d02:	0002      	movs	r2, r0
    8d04:	000b      	movs	r3, r1
    8d06:	0011      	movs	r1, r2
    8d08:	001a      	movs	r2, r3
    8d0a:	4b80      	ldr	r3, [pc, #512]	; (8f0c <init+0x83a>)
    8d0c:	0008      	movs	r0, r1
    8d0e:	0011      	movs	r1, r2
    8d10:	4798      	blx	r3
    8d12:	0003      	movs	r3, r0
    8d14:	b29b      	uxth	r3, r3
    8d16:	81a3      	strh	r3, [r4, #12]
	//SERCOM1->USART.BAUD.bit.BAUD=				65536.0f*(1.0f-(8.0*(float)(38400))/(float)(8000000));
	//cfg settings end

	port[n_port].sercom->USART.INTENSET.bit.RXC  =0x01; // Bit 2 RXC: Receive Complete Interrupt Enable
    8d18:	1dfb      	adds	r3, r7, #7
    8d1a:	781a      	ldrb	r2, [r3, #0]
    8d1c:	4970      	ldr	r1, [pc, #448]	; (8ee0 <init+0x80e>)
    8d1e:	0013      	movs	r3, r2
    8d20:	00db      	lsls	r3, r3, #3
    8d22:	189b      	adds	r3, r3, r2
    8d24:	019b      	lsls	r3, r3, #6
    8d26:	585a      	ldr	r2, [r3, r1]
    8d28:	7d93      	ldrb	r3, [r2, #22]
    8d2a:	2104      	movs	r1, #4
    8d2c:	430b      	orrs	r3, r1
    8d2e:	7593      	strb	r3, [r2, #22]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d30:	46c0      	nop			; (mov r8, r8)
    8d32:	1dfb      	adds	r3, r7, #7
    8d34:	781a      	ldrb	r2, [r3, #0]
    8d36:	496a      	ldr	r1, [pc, #424]	; (8ee0 <init+0x80e>)
    8d38:	0013      	movs	r3, r2
    8d3a:	00db      	lsls	r3, r3, #3
    8d3c:	189b      	adds	r3, r3, r2
    8d3e:	019b      	lsls	r3, r3, #6
    8d40:	585b      	ldr	r3, [r3, r1]
    8d42:	69db      	ldr	r3, [r3, #28]
    8d44:	2207      	movs	r2, #7
    8d46:	4013      	ands	r3, r2
    8d48:	d1f3      	bne.n	8d32 <init+0x660>
	port[n_port].sercom->USART.CTRLB.bit.RXEN=0x01;     // Bit 17 - RXEN: Receiver Enable (11: The receiver is enabled or will be enabled when the USART is enabled)
    8d4a:	1dfb      	adds	r3, r7, #7
    8d4c:	781a      	ldrb	r2, [r3, #0]
    8d4e:	4964      	ldr	r1, [pc, #400]	; (8ee0 <init+0x80e>)
    8d50:	0013      	movs	r3, r2
    8d52:	00db      	lsls	r3, r3, #3
    8d54:	189b      	adds	r3, r3, r2
    8d56:	019b      	lsls	r3, r3, #6
    8d58:	585b      	ldr	r3, [r3, r1]
    8d5a:	685a      	ldr	r2, [r3, #4]
    8d5c:	2180      	movs	r1, #128	; 0x80
    8d5e:	0289      	lsls	r1, r1, #10
    8d60:	430a      	orrs	r2, r1
    8d62:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d64:	46c0      	nop			; (mov r8, r8)
    8d66:	1dfb      	adds	r3, r7, #7
    8d68:	781a      	ldrb	r2, [r3, #0]
    8d6a:	495d      	ldr	r1, [pc, #372]	; (8ee0 <init+0x80e>)
    8d6c:	0013      	movs	r3, r2
    8d6e:	00db      	lsls	r3, r3, #3
    8d70:	189b      	adds	r3, r3, r2
    8d72:	019b      	lsls	r3, r3, #6
    8d74:	585b      	ldr	r3, [r3, r1]
    8d76:	69db      	ldr	r3, [r3, #28]
    8d78:	2207      	movs	r2, #7
    8d7a:	4013      	ands	r3, r2
    8d7c:	d1f3      	bne.n	8d66 <init+0x694>
	port[n_port].sercom->USART.CTRLB.bit.TXEN=0x01;     // Bit 16 - TXEN: Transmitter Enable (1: The transmitter is enabled or will be enabled when the USART is enabled.)
    8d7e:	1dfb      	adds	r3, r7, #7
    8d80:	781a      	ldrb	r2, [r3, #0]
    8d82:	4957      	ldr	r1, [pc, #348]	; (8ee0 <init+0x80e>)
    8d84:	0013      	movs	r3, r2
    8d86:	00db      	lsls	r3, r3, #3
    8d88:	189b      	adds	r3, r3, r2
    8d8a:	019b      	lsls	r3, r3, #6
    8d8c:	585b      	ldr	r3, [r3, r1]
    8d8e:	685a      	ldr	r2, [r3, #4]
    8d90:	2180      	movs	r1, #128	; 0x80
    8d92:	0249      	lsls	r1, r1, #9
    8d94:	430a      	orrs	r2, r1
    8d96:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8d98:	46c0      	nop			; (mov r8, r8)
    8d9a:	1dfb      	adds	r3, r7, #7
    8d9c:	781a      	ldrb	r2, [r3, #0]
    8d9e:	4950      	ldr	r1, [pc, #320]	; (8ee0 <init+0x80e>)
    8da0:	0013      	movs	r3, r2
    8da2:	00db      	lsls	r3, r3, #3
    8da4:	189b      	adds	r3, r3, r2
    8da6:	019b      	lsls	r3, r3, #6
    8da8:	585b      	ldr	r3, [r3, r1]
    8daa:	69db      	ldr	r3, [r3, #28]
    8dac:	2207      	movs	r2, #7
    8dae:	4013      	ands	r3, r2
    8db0:	d1f3      	bne.n	8d9a <init+0x6c8>
	port[n_port].sercom->USART.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    8db2:	1dfb      	adds	r3, r7, #7
    8db4:	781a      	ldrb	r2, [r3, #0]
    8db6:	494a      	ldr	r1, [pc, #296]	; (8ee0 <init+0x80e>)
    8db8:	0013      	movs	r3, r2
    8dba:	00db      	lsls	r3, r3, #3
    8dbc:	189b      	adds	r3, r3, r2
    8dbe:	019b      	lsls	r3, r3, #6
    8dc0:	585b      	ldr	r3, [r3, r1]
    8dc2:	681a      	ldr	r2, [r3, #0]
    8dc4:	2102      	movs	r1, #2
    8dc6:	430a      	orrs	r2, r1
    8dc8:	601a      	str	r2, [r3, #0]

	tout = (double)1000000 / (double)cfg_1.sock_rs485[n_port].baud;
    8dca:	1dfb      	adds	r3, r7, #7
    8dcc:	781a      	ldrb	r2, [r3, #0]
    8dce:	4945      	ldr	r1, [pc, #276]	; (8ee4 <init+0x812>)
    8dd0:	0013      	movs	r3, r2
    8dd2:	005b      	lsls	r3, r3, #1
    8dd4:	189b      	adds	r3, r3, r2
    8dd6:	009b      	lsls	r3, r3, #2
    8dd8:	189b      	adds	r3, r3, r2
    8dda:	18cb      	adds	r3, r1, r3
    8ddc:	3330      	adds	r3, #48	; 0x30
    8dde:	7a5a      	ldrb	r2, [r3, #9]
    8de0:	7a99      	ldrb	r1, [r3, #10]
    8de2:	0209      	lsls	r1, r1, #8
    8de4:	430a      	orrs	r2, r1
    8de6:	7ad9      	ldrb	r1, [r3, #11]
    8de8:	0409      	lsls	r1, r1, #16
    8dea:	430a      	orrs	r2, r1
    8dec:	7b1b      	ldrb	r3, [r3, #12]
    8dee:	061b      	lsls	r3, r3, #24
    8df0:	4313      	orrs	r3, r2
    8df2:	001a      	movs	r2, r3
    8df4:	4b46      	ldr	r3, [pc, #280]	; (8f10 <init+0x83e>)
    8df6:	0010      	movs	r0, r2
    8df8:	4798      	blx	r3
    8dfa:	0002      	movs	r2, r0
    8dfc:	000b      	movs	r3, r1
    8dfe:	4c3e      	ldr	r4, [pc, #248]	; (8ef8 <init+0x826>)
    8e00:	2000      	movs	r0, #0
    8e02:	4944      	ldr	r1, [pc, #272]	; (8f14 <init+0x842>)
    8e04:	47a0      	blx	r4
    8e06:	0003      	movs	r3, r0
    8e08:	000c      	movs	r4, r1
    8e0a:	613b      	str	r3, [r7, #16]
    8e0c:	617c      	str	r4, [r7, #20]
	tout = tout * bsize;
    8e0e:	4c38      	ldr	r4, [pc, #224]	; (8ef0 <init+0x81e>)
    8e10:	68ba      	ldr	r2, [r7, #8]
    8e12:	68fb      	ldr	r3, [r7, #12]
    8e14:	6938      	ldr	r0, [r7, #16]
    8e16:	6979      	ldr	r1, [r7, #20]
    8e18:	47a0      	blx	r4
    8e1a:	0003      	movs	r3, r0
    8e1c:	000c      	movs	r4, r1
    8e1e:	613b      	str	r3, [r7, #16]
    8e20:	617c      	str	r4, [r7, #20]
	tout = tout * 4;
    8e22:	4c33      	ldr	r4, [pc, #204]	; (8ef0 <init+0x81e>)
    8e24:	2200      	movs	r2, #0
    8e26:	4b3c      	ldr	r3, [pc, #240]	; (8f18 <init+0x846>)
    8e28:	6938      	ldr	r0, [r7, #16]
    8e2a:	6979      	ldr	r1, [r7, #20]
    8e2c:	47a0      	blx	r4
    8e2e:	0003      	movs	r3, r0
    8e30:	000c      	movs	r4, r1
    8e32:	613b      	str	r3, [r7, #16]
    8e34:	617c      	str	r4, [r7, #20]
	tout = tout / 100;
    8e36:	4c30      	ldr	r4, [pc, #192]	; (8ef8 <init+0x826>)
    8e38:	2200      	movs	r2, #0
    8e3a:	4b38      	ldr	r3, [pc, #224]	; (8f1c <init+0x84a>)
    8e3c:	6938      	ldr	r0, [r7, #16]
    8e3e:	6979      	ldr	r1, [r7, #20]
    8e40:	47a0      	blx	r4
    8e42:	0003      	movs	r3, r0
    8e44:	000c      	movs	r4, r1
    8e46:	613b      	str	r3, [r7, #16]
    8e48:	617c      	str	r4, [r7, #20]
	port[n_port].rtout = tout;
    8e4a:	1dfb      	adds	r3, r7, #7
    8e4c:	781c      	ldrb	r4, [r3, #0]
    8e4e:	4b2f      	ldr	r3, [pc, #188]	; (8f0c <init+0x83a>)
    8e50:	6938      	ldr	r0, [r7, #16]
    8e52:	6979      	ldr	r1, [r7, #20]
    8e54:	4798      	blx	r3
    8e56:	0003      	movs	r3, r0
    8e58:	b298      	uxth	r0, r3
    8e5a:	4921      	ldr	r1, [pc, #132]	; (8ee0 <init+0x80e>)
    8e5c:	2384      	movs	r3, #132	; 0x84
    8e5e:	009a      	lsls	r2, r3, #2
    8e60:	0023      	movs	r3, r4
    8e62:	00db      	lsls	r3, r3, #3
    8e64:	191b      	adds	r3, r3, r4
    8e66:	019b      	lsls	r3, r3, #6
    8e68:	18cb      	adds	r3, r1, r3
    8e6a:	189b      	adds	r3, r3, r2
    8e6c:	1c02      	adds	r2, r0, #0
    8e6e:	801a      	strh	r2, [r3, #0]

	NVIC_DisableIRQ(port[n_port].irqn_sercom);
    8e70:	1dfb      	adds	r3, r7, #7
    8e72:	781a      	ldrb	r2, [r3, #0]
    8e74:	491a      	ldr	r1, [pc, #104]	; (8ee0 <init+0x80e>)
    8e76:	0013      	movs	r3, r2
    8e78:	00db      	lsls	r3, r3, #3
    8e7a:	189b      	adds	r3, r3, r2
    8e7c:	019b      	lsls	r3, r3, #6
    8e7e:	18cb      	adds	r3, r1, r3
    8e80:	3308      	adds	r3, #8
    8e82:	781b      	ldrb	r3, [r3, #0]
    8e84:	b2db      	uxtb	r3, r3
    8e86:	b25b      	sxtb	r3, r3
    8e88:	0018      	movs	r0, r3
    8e8a:	f7ff fb7b 	bl	8584 <__NVIC_DisableIRQ>
	NVIC_SetPriority(port[n_port].irqn_sercom, 1);
    8e8e:	1dfb      	adds	r3, r7, #7
    8e90:	781a      	ldrb	r2, [r3, #0]
    8e92:	4913      	ldr	r1, [pc, #76]	; (8ee0 <init+0x80e>)
    8e94:	0013      	movs	r3, r2
    8e96:	00db      	lsls	r3, r3, #3
    8e98:	189b      	adds	r3, r3, r2
    8e9a:	019b      	lsls	r3, r3, #6
    8e9c:	18cb      	adds	r3, r1, r3
    8e9e:	3308      	adds	r3, #8
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	b2db      	uxtb	r3, r3
    8ea4:	b25b      	sxtb	r3, r3
    8ea6:	2101      	movs	r1, #1
    8ea8:	0018      	movs	r0, r3
    8eaa:	f7ff fb8b 	bl	85c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(port[n_port].irqn_sercom);
    8eae:	1dfb      	adds	r3, r7, #7
    8eb0:	781a      	ldrb	r2, [r3, #0]
    8eb2:	490b      	ldr	r1, [pc, #44]	; (8ee0 <init+0x80e>)
    8eb4:	0013      	movs	r3, r2
    8eb6:	00db      	lsls	r3, r3, #3
    8eb8:	189b      	adds	r3, r3, r2
    8eba:	019b      	lsls	r3, r3, #6
    8ebc:	18cb      	adds	r3, r1, r3
    8ebe:	3308      	adds	r3, #8
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	b2db      	uxtb	r3, r3
    8ec4:	b25b      	sxtb	r3, r3
    8ec6:	0018      	movs	r0, r3
    8ec8:	f7ff fb42 	bl	8550 <__NVIC_EnableIRQ>
	pin_ctrl(RTS, n_port, CLR);
    8ecc:	1dfb      	adds	r3, r7, #7
    8ece:	781b      	ldrb	r3, [r3, #0]
    8ed0:	2202      	movs	r2, #2
    8ed2:	0019      	movs	r1, r3
    8ed4:	2000      	movs	r0, #0
    8ed6:	4b12      	ldr	r3, [pc, #72]	; (8f20 <init+0x84e>)
    8ed8:	4798      	blx	r3
}
    8eda:	46bd      	mov	sp, r7
    8edc:	b008      	add	sp, #32
    8ede:	bdb0      	pop	{r4, r5, r7, pc}
    8ee0:	200031fc 	.word	0x200031fc
    8ee4:	20003dc4 	.word	0x20003dc4
    8ee8:	0000b105 	.word	0x0000b105
    8eec:	0000c3fd 	.word	0x0000c3fd
    8ef0:	0000b7f9 	.word	0x0000b7f9
    8ef4:	40300000 	.word	0x40300000
    8ef8:	0000b191 	.word	0x0000b191
    8efc:	4186e360 	.word	0x4186e360
    8f00:	0000bcf9 	.word	0x0000bcf9
    8f04:	3ff00000 	.word	0x3ff00000
    8f08:	40f00000 	.word	0x40f00000
    8f0c:	0000b0c9 	.word	0x0000b0c9
    8f10:	0000c38d 	.word	0x0000c38d
    8f14:	412e8480 	.word	0x412e8480
    8f18:	40100000 	.word	0x40100000
    8f1c:	40590000 	.word	0x40590000
    8f20:	00006ddd 	.word	0x00006ddd

00008f24 <usart_write>:

WORD usart_write(BYTE n_port, BYTE* wbuf,WORD size)
{
    8f24:	b590      	push	{r4, r7, lr}
    8f26:	b083      	sub	sp, #12
    8f28:	af00      	add	r7, sp, #0
    8f2a:	6039      	str	r1, [r7, #0]
    8f2c:	0011      	movs	r1, r2
    8f2e:	1dfb      	adds	r3, r7, #7
    8f30:	1c02      	adds	r2, r0, #0
    8f32:	701a      	strb	r2, [r3, #0]
    8f34:	1d3b      	adds	r3, r7, #4
    8f36:	1c0a      	adds	r2, r1, #0
    8f38:	801a      	strh	r2, [r3, #0]
	if(size == 0) { return(0); }
    8f3a:	1d3b      	adds	r3, r7, #4
    8f3c:	881b      	ldrh	r3, [r3, #0]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d101      	bne.n	8f46 <usart_write+0x22>
    8f42:	2300      	movs	r3, #0
    8f44:	e06c      	b.n	9020 <usart_write+0xfc>
	pin_ctrl(RTS, n_port, SET);
    8f46:	1dfb      	adds	r3, r7, #7
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	2201      	movs	r2, #1
    8f4c:	0019      	movs	r1, r3
    8f4e:	2000      	movs	r0, #0
    8f50:	4b35      	ldr	r3, [pc, #212]	; (9028 <usart_write+0x104>)
    8f52:	4798      	blx	r3
	
	if(size > USART_BUF_SIZE) { size = USART_BUF_SIZE; }
    8f54:	1d3b      	adds	r3, r7, #4
    8f56:	881a      	ldrh	r2, [r3, #0]
    8f58:	2380      	movs	r3, #128	; 0x80
    8f5a:	005b      	lsls	r3, r3, #1
    8f5c:	429a      	cmp	r2, r3
    8f5e:	d903      	bls.n	8f68 <usart_write+0x44>
    8f60:	1d3b      	adds	r3, r7, #4
    8f62:	2280      	movs	r2, #128	; 0x80
    8f64:	0052      	lsls	r2, r2, #1
    8f66:	801a      	strh	r2, [r3, #0]
	memcpy(port[n_port].wbuf,wbuf,size);
    8f68:	1dfb      	adds	r3, r7, #7
    8f6a:	781a      	ldrb	r2, [r3, #0]
    8f6c:	0013      	movs	r3, r2
    8f6e:	00db      	lsls	r3, r3, #3
    8f70:	189b      	adds	r3, r3, r2
    8f72:	019b      	lsls	r3, r3, #6
    8f74:	3308      	adds	r3, #8
    8f76:	001a      	movs	r2, r3
    8f78:	4b2c      	ldr	r3, [pc, #176]	; (902c <usart_write+0x108>)
    8f7a:	18d3      	adds	r3, r2, r3
    8f7c:	1c58      	adds	r0, r3, #1
    8f7e:	1d3b      	adds	r3, r7, #4
    8f80:	881a      	ldrh	r2, [r3, #0]
    8f82:	683b      	ldr	r3, [r7, #0]
    8f84:	0019      	movs	r1, r3
    8f86:	4b2a      	ldr	r3, [pc, #168]	; (9030 <usart_write+0x10c>)
    8f88:	4798      	blx	r3
	port[n_port].wn = size;
    8f8a:	1dfb      	adds	r3, r7, #7
    8f8c:	781a      	ldrb	r2, [r3, #0]
    8f8e:	4927      	ldr	r1, [pc, #156]	; (902c <usart_write+0x108>)
    8f90:	4828      	ldr	r0, [pc, #160]	; (9034 <usart_write+0x110>)
    8f92:	0013      	movs	r3, r2
    8f94:	00db      	lsls	r3, r3, #3
    8f96:	189b      	adds	r3, r3, r2
    8f98:	019b      	lsls	r3, r3, #6
    8f9a:	18cb      	adds	r3, r1, r3
    8f9c:	181b      	adds	r3, r3, r0
    8f9e:	1d3a      	adds	r2, r7, #4
    8fa0:	8812      	ldrh	r2, [r2, #0]
    8fa2:	801a      	strh	r2, [r3, #0]
	port[n_port].wx = 0;
    8fa4:	1dfb      	adds	r3, r7, #7
    8fa6:	781a      	ldrb	r2, [r3, #0]
    8fa8:	4820      	ldr	r0, [pc, #128]	; (902c <usart_write+0x108>)
    8faa:	2383      	movs	r3, #131	; 0x83
    8fac:	0099      	lsls	r1, r3, #2
    8fae:	0013      	movs	r3, r2
    8fb0:	00db      	lsls	r3, r3, #3
    8fb2:	189b      	adds	r3, r3, r2
    8fb4:	019b      	lsls	r3, r3, #6
    8fb6:	18c3      	adds	r3, r0, r3
    8fb8:	185b      	adds	r3, r3, r1
    8fba:	2200      	movs	r2, #0
    8fbc:	801a      	strh	r2, [r3, #0]

	port[n_port].sercom->USART.INTENCLR.bit.RXC = 1;
    8fbe:	1dfb      	adds	r3, r7, #7
    8fc0:	781a      	ldrb	r2, [r3, #0]
    8fc2:	491a      	ldr	r1, [pc, #104]	; (902c <usart_write+0x108>)
    8fc4:	0013      	movs	r3, r2
    8fc6:	00db      	lsls	r3, r3, #3
    8fc8:	189b      	adds	r3, r3, r2
    8fca:	019b      	lsls	r3, r3, #6
    8fcc:	585a      	ldr	r2, [r3, r1]
    8fce:	7d13      	ldrb	r3, [r2, #20]
    8fd0:	2104      	movs	r1, #4
    8fd2:	430b      	orrs	r3, r1
    8fd4:	7513      	strb	r3, [r2, #20]
	port[n_port].sercom->USART.INTENSET.bit.DRE = 1;
    8fd6:	1dfb      	adds	r3, r7, #7
    8fd8:	781a      	ldrb	r2, [r3, #0]
    8fda:	4914      	ldr	r1, [pc, #80]	; (902c <usart_write+0x108>)
    8fdc:	0013      	movs	r3, r2
    8fde:	00db      	lsls	r3, r3, #3
    8fe0:	189b      	adds	r3, r3, r2
    8fe2:	019b      	lsls	r3, r3, #6
    8fe4:	585a      	ldr	r2, [r3, r1]
    8fe6:	7d93      	ldrb	r3, [r2, #22]
    8fe8:	2101      	movs	r1, #1
    8fea:	430b      	orrs	r3, r1
    8fec:	7593      	strb	r3, [r2, #22]
	port[n_port].counters.tx++;
    8fee:	1dfb      	adds	r3, r7, #7
    8ff0:	781a      	ldrb	r2, [r3, #0]
    8ff2:	480e      	ldr	r0, [pc, #56]	; (902c <usart_write+0x108>)
    8ff4:	238d      	movs	r3, #141	; 0x8d
    8ff6:	0099      	lsls	r1, r3, #2
    8ff8:	0013      	movs	r3, r2
    8ffa:	00db      	lsls	r3, r3, #3
    8ffc:	189b      	adds	r3, r3, r2
    8ffe:	019b      	lsls	r3, r3, #6
    9000:	18c3      	adds	r3, r0, r3
    9002:	185b      	adds	r3, r3, r1
    9004:	681b      	ldr	r3, [r3, #0]
    9006:	1c59      	adds	r1, r3, #1
    9008:	4c08      	ldr	r4, [pc, #32]	; (902c <usart_write+0x108>)
    900a:	238d      	movs	r3, #141	; 0x8d
    900c:	0098      	lsls	r0, r3, #2
    900e:	0013      	movs	r3, r2
    9010:	00db      	lsls	r3, r3, #3
    9012:	189b      	adds	r3, r3, r2
    9014:	019b      	lsls	r3, r3, #6
    9016:	18e3      	adds	r3, r4, r3
    9018:	181b      	adds	r3, r3, r0
    901a:	6019      	str	r1, [r3, #0]
	return(size);
    901c:	1d3b      	adds	r3, r7, #4
    901e:	881b      	ldrh	r3, [r3, #0]
}
    9020:	0018      	movs	r0, r3
    9022:	46bd      	mov	sp, r7
    9024:	b003      	add	sp, #12
    9026:	bd90      	pop	{r4, r7, pc}
    9028:	00006ddd 	.word	0x00006ddd
    902c:	200031fc 	.word	0x200031fc
    9030:	0000c8b9 	.word	0x0000c8b9
    9034:	0000020a 	.word	0x0000020a

00009038 <usart_read>:

WORD usart_read (BYTE n_port, BYTE* rbuf,WORD size)
{
    9038:	b590      	push	{r4, r7, lr}
    903a:	b085      	sub	sp, #20
    903c:	af00      	add	r7, sp, #0
    903e:	6039      	str	r1, [r7, #0]
    9040:	0011      	movs	r1, r2
    9042:	1dfb      	adds	r3, r7, #7
    9044:	1c02      	adds	r2, r0, #0
    9046:	701a      	strb	r2, [r3, #0]
    9048:	1d3b      	adds	r3, r7, #4
    904a:	1c0a      	adds	r2, r1, #0
    904c:	801a      	strh	r2, [r3, #0]
	WORD size_1 = 0;
    904e:	230e      	movs	r3, #14
    9050:	18fb      	adds	r3, r7, r3
    9052:	2200      	movs	r2, #0
    9054:	801a      	strh	r2, [r3, #0]
	
	if(port[n_port].rn     ==       0x00)			{ port[n_port].rtime=0; return(0); }
    9056:	1dfb      	adds	r3, r7, #7
    9058:	781a      	ldrb	r2, [r3, #0]
    905a:	4948      	ldr	r1, [pc, #288]	; (917c <usart_read+0x144>)
    905c:	4848      	ldr	r0, [pc, #288]	; (9180 <usart_read+0x148>)
    905e:	0013      	movs	r3, r2
    9060:	00db      	lsls	r3, r3, #3
    9062:	189b      	adds	r3, r3, r2
    9064:	019b      	lsls	r3, r3, #6
    9066:	18cb      	adds	r3, r1, r3
    9068:	181b      	adds	r3, r3, r0
    906a:	881b      	ldrh	r3, [r3, #0]
    906c:	b29b      	uxth	r3, r3
    906e:	2b00      	cmp	r3, #0
    9070:	d10e      	bne.n	9090 <usart_read+0x58>
    9072:	1dfb      	adds	r3, r7, #7
    9074:	781a      	ldrb	r2, [r3, #0]
    9076:	4841      	ldr	r0, [pc, #260]	; (917c <usart_read+0x144>)
    9078:	2385      	movs	r3, #133	; 0x85
    907a:	0099      	lsls	r1, r3, #2
    907c:	0013      	movs	r3, r2
    907e:	00db      	lsls	r3, r3, #3
    9080:	189b      	adds	r3, r3, r2
    9082:	019b      	lsls	r3, r3, #6
    9084:	18c3      	adds	r3, r0, r3
    9086:	185b      	adds	r3, r3, r1
    9088:	2200      	movs	r2, #0
    908a:	801a      	strh	r2, [r3, #0]
    908c:	2300      	movs	r3, #0
    908e:	e070      	b.n	9172 <usart_read+0x13a>
	if(port[n_port].rtout  >  port[n_port].rtime)	{ return(0); }
    9090:	1dfb      	adds	r3, r7, #7
    9092:	781a      	ldrb	r2, [r3, #0]
    9094:	4839      	ldr	r0, [pc, #228]	; (917c <usart_read+0x144>)
    9096:	2384      	movs	r3, #132	; 0x84
    9098:	0099      	lsls	r1, r3, #2
    909a:	0013      	movs	r3, r2
    909c:	00db      	lsls	r3, r3, #3
    909e:	189b      	adds	r3, r3, r2
    90a0:	019b      	lsls	r3, r3, #6
    90a2:	18c3      	adds	r3, r0, r3
    90a4:	185b      	adds	r3, r3, r1
    90a6:	881b      	ldrh	r3, [r3, #0]
    90a8:	b299      	uxth	r1, r3
    90aa:	1dfb      	adds	r3, r7, #7
    90ac:	781a      	ldrb	r2, [r3, #0]
    90ae:	4c33      	ldr	r4, [pc, #204]	; (917c <usart_read+0x144>)
    90b0:	2385      	movs	r3, #133	; 0x85
    90b2:	0098      	lsls	r0, r3, #2
    90b4:	0013      	movs	r3, r2
    90b6:	00db      	lsls	r3, r3, #3
    90b8:	189b      	adds	r3, r3, r2
    90ba:	019b      	lsls	r3, r3, #6
    90bc:	18e3      	adds	r3, r4, r3
    90be:	181b      	adds	r3, r3, r0
    90c0:	881b      	ldrh	r3, [r3, #0]
    90c2:	b29b      	uxth	r3, r3
    90c4:	4299      	cmp	r1, r3
    90c6:	d901      	bls.n	90cc <usart_read+0x94>
    90c8:	2300      	movs	r3, #0
    90ca:	e052      	b.n	9172 <usart_read+0x13a>
		
	size_1 = port[n_port].rn; 
    90cc:	1dfb      	adds	r3, r7, #7
    90ce:	781a      	ldrb	r2, [r3, #0]
    90d0:	230e      	movs	r3, #14
    90d2:	18f9      	adds	r1, r7, r3
    90d4:	4829      	ldr	r0, [pc, #164]	; (917c <usart_read+0x144>)
    90d6:	4c2a      	ldr	r4, [pc, #168]	; (9180 <usart_read+0x148>)
    90d8:	0013      	movs	r3, r2
    90da:	00db      	lsls	r3, r3, #3
    90dc:	189b      	adds	r3, r3, r2
    90de:	019b      	lsls	r3, r3, #6
    90e0:	18c3      	adds	r3, r0, r3
    90e2:	191b      	adds	r3, r3, r4
    90e4:	881b      	ldrh	r3, [r3, #0]
    90e6:	800b      	strh	r3, [r1, #0]

	if(size_1 > size) {size_1 = size;}
    90e8:	230e      	movs	r3, #14
    90ea:	18fa      	adds	r2, r7, r3
    90ec:	1d3b      	adds	r3, r7, #4
    90ee:	8812      	ldrh	r2, [r2, #0]
    90f0:	881b      	ldrh	r3, [r3, #0]
    90f2:	429a      	cmp	r2, r3
    90f4:	d904      	bls.n	9100 <usart_read+0xc8>
    90f6:	230e      	movs	r3, #14
    90f8:	18fb      	adds	r3, r7, r3
    90fa:	1d3a      	adds	r2, r7, #4
    90fc:	8812      	ldrh	r2, [r2, #0]
    90fe:	801a      	strh	r2, [r3, #0]
	
	memcpy(rbuf,port[n_port].rbuf,size_1);
    9100:	1dfb      	adds	r3, r7, #7
    9102:	781a      	ldrb	r2, [r3, #0]
    9104:	0013      	movs	r3, r2
    9106:	00db      	lsls	r3, r3, #3
    9108:	189b      	adds	r3, r3, r2
    910a:	019b      	lsls	r3, r3, #6
    910c:	3309      	adds	r3, #9
    910e:	33ff      	adds	r3, #255	; 0xff
    9110:	001a      	movs	r2, r3
    9112:	4b1a      	ldr	r3, [pc, #104]	; (917c <usart_read+0x144>)
    9114:	18d3      	adds	r3, r2, r3
    9116:	1c59      	adds	r1, r3, #1
    9118:	230e      	movs	r3, #14
    911a:	18fb      	adds	r3, r7, r3
    911c:	881a      	ldrh	r2, [r3, #0]
    911e:	683b      	ldr	r3, [r7, #0]
    9120:	0018      	movs	r0, r3
    9122:	4b18      	ldr	r3, [pc, #96]	; (9184 <usart_read+0x14c>)
    9124:	4798      	blx	r3
	port[n_port].rn = 0;
    9126:	1dfb      	adds	r3, r7, #7
    9128:	781a      	ldrb	r2, [r3, #0]
    912a:	4914      	ldr	r1, [pc, #80]	; (917c <usart_read+0x144>)
    912c:	4814      	ldr	r0, [pc, #80]	; (9180 <usart_read+0x148>)
    912e:	0013      	movs	r3, r2
    9130:	00db      	lsls	r3, r3, #3
    9132:	189b      	adds	r3, r3, r2
    9134:	019b      	lsls	r3, r3, #6
    9136:	18cb      	adds	r3, r1, r3
    9138:	181b      	adds	r3, r3, r0
    913a:	2200      	movs	r2, #0
    913c:	801a      	strh	r2, [r3, #0]
	port[n_port].counters.rx++;
    913e:	1dfb      	adds	r3, r7, #7
    9140:	781a      	ldrb	r2, [r3, #0]
    9142:	480e      	ldr	r0, [pc, #56]	; (917c <usart_read+0x144>)
    9144:	238e      	movs	r3, #142	; 0x8e
    9146:	0099      	lsls	r1, r3, #2
    9148:	0013      	movs	r3, r2
    914a:	00db      	lsls	r3, r3, #3
    914c:	189b      	adds	r3, r3, r2
    914e:	019b      	lsls	r3, r3, #6
    9150:	18c3      	adds	r3, r0, r3
    9152:	185b      	adds	r3, r3, r1
    9154:	681b      	ldr	r3, [r3, #0]
    9156:	1c59      	adds	r1, r3, #1
    9158:	4c08      	ldr	r4, [pc, #32]	; (917c <usart_read+0x144>)
    915a:	238e      	movs	r3, #142	; 0x8e
    915c:	0098      	lsls	r0, r3, #2
    915e:	0013      	movs	r3, r2
    9160:	00db      	lsls	r3, r3, #3
    9162:	189b      	adds	r3, r3, r2
    9164:	019b      	lsls	r3, r3, #6
    9166:	18e3      	adds	r3, r4, r3
    9168:	181b      	adds	r3, r3, r0
    916a:	6019      	str	r1, [r3, #0]
	return(size_1);
    916c:	230e      	movs	r3, #14
    916e:	18fb      	adds	r3, r7, r3
    9170:	881b      	ldrh	r3, [r3, #0]
}
    9172:	0018      	movs	r0, r3
    9174:	46bd      	mov	sp, r7
    9176:	b005      	add	sp, #20
    9178:	bd90      	pop	{r4, r7, pc}
    917a:	46c0      	nop			; (mov r8, r8)
    917c:	200031fc 	.word	0x200031fc
    9180:	0000020e 	.word	0x0000020e
    9184:	0000c8b9 	.word	0x0000c8b9

00009188 <sercom_proc>:

void sercom_proc(BYTE n_port)
{
    9188:	b5b0      	push	{r4, r5, r7, lr}
    918a:	b082      	sub	sp, #8
    918c:	af00      	add	r7, sp, #0
    918e:	0002      	movs	r2, r0
    9190:	1dfb      	adds	r3, r7, #7
    9192:	701a      	strb	r2, [r3, #0]
	if (port[n_port].sercom->USART.STATUS.bit.COLL)		{port[n_port].errors.collision++;		port[n_port].sercom->USART.STATUS.bit.COLL   = 1;}
    9194:	1dfb      	adds	r3, r7, #7
    9196:	781a      	ldrb	r2, [r3, #0]
    9198:	49c4      	ldr	r1, [pc, #784]	; (94ac <sercom_proc+0x324>)
    919a:	0013      	movs	r3, r2
    919c:	00db      	lsls	r3, r3, #3
    919e:	189b      	adds	r3, r3, r2
    91a0:	019b      	lsls	r3, r3, #6
    91a2:	585b      	ldr	r3, [r3, r1]
    91a4:	8b5b      	ldrh	r3, [r3, #26]
    91a6:	069b      	lsls	r3, r3, #26
    91a8:	0fdb      	lsrs	r3, r3, #31
    91aa:	b2db      	uxtb	r3, r3
    91ac:	2b00      	cmp	r3, #0
    91ae:	d023      	beq.n	91f8 <sercom_proc+0x70>
    91b0:	1dfb      	adds	r3, r7, #7
    91b2:	781a      	ldrb	r2, [r3, #0]
    91b4:	49bd      	ldr	r1, [pc, #756]	; (94ac <sercom_proc+0x324>)
    91b6:	48be      	ldr	r0, [pc, #760]	; (94b0 <sercom_proc+0x328>)
    91b8:	0013      	movs	r3, r2
    91ba:	00db      	lsls	r3, r3, #3
    91bc:	189b      	adds	r3, r3, r2
    91be:	019b      	lsls	r3, r3, #6
    91c0:	18cb      	adds	r3, r1, r3
    91c2:	181b      	adds	r3, r3, r0
    91c4:	881b      	ldrh	r3, [r3, #0]
    91c6:	b29b      	uxth	r3, r3
    91c8:	3301      	adds	r3, #1
    91ca:	b29c      	uxth	r4, r3
    91cc:	49b7      	ldr	r1, [pc, #732]	; (94ac <sercom_proc+0x324>)
    91ce:	48b8      	ldr	r0, [pc, #736]	; (94b0 <sercom_proc+0x328>)
    91d0:	0013      	movs	r3, r2
    91d2:	00db      	lsls	r3, r3, #3
    91d4:	189b      	adds	r3, r3, r2
    91d6:	019b      	lsls	r3, r3, #6
    91d8:	18cb      	adds	r3, r1, r3
    91da:	181b      	adds	r3, r3, r0
    91dc:	1c22      	adds	r2, r4, #0
    91de:	801a      	strh	r2, [r3, #0]
    91e0:	1dfb      	adds	r3, r7, #7
    91e2:	781a      	ldrb	r2, [r3, #0]
    91e4:	49b1      	ldr	r1, [pc, #708]	; (94ac <sercom_proc+0x324>)
    91e6:	0013      	movs	r3, r2
    91e8:	00db      	lsls	r3, r3, #3
    91ea:	189b      	adds	r3, r3, r2
    91ec:	019b      	lsls	r3, r3, #6
    91ee:	585a      	ldr	r2, [r3, r1]
    91f0:	8b53      	ldrh	r3, [r2, #26]
    91f2:	2120      	movs	r1, #32
    91f4:	430b      	orrs	r3, r1
    91f6:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.ISF)		{port[n_port].errors.synchr++;		    port[n_port].sercom->USART.STATUS.bit.ISF    = 1;}
    91f8:	1dfb      	adds	r3, r7, #7
    91fa:	781a      	ldrb	r2, [r3, #0]
    91fc:	49ab      	ldr	r1, [pc, #684]	; (94ac <sercom_proc+0x324>)
    91fe:	0013      	movs	r3, r2
    9200:	00db      	lsls	r3, r3, #3
    9202:	189b      	adds	r3, r3, r2
    9204:	019b      	lsls	r3, r3, #6
    9206:	585b      	ldr	r3, [r3, r1]
    9208:	8b5b      	ldrh	r3, [r3, #26]
    920a:	06db      	lsls	r3, r3, #27
    920c:	0fdb      	lsrs	r3, r3, #31
    920e:	b2db      	uxtb	r3, r3
    9210:	2b00      	cmp	r3, #0
    9212:	d025      	beq.n	9260 <sercom_proc+0xd8>
    9214:	1dfb      	adds	r3, r7, #7
    9216:	781a      	ldrb	r2, [r3, #0]
    9218:	48a4      	ldr	r0, [pc, #656]	; (94ac <sercom_proc+0x324>)
    921a:	238b      	movs	r3, #139	; 0x8b
    921c:	0099      	lsls	r1, r3, #2
    921e:	0013      	movs	r3, r2
    9220:	00db      	lsls	r3, r3, #3
    9222:	189b      	adds	r3, r3, r2
    9224:	019b      	lsls	r3, r3, #6
    9226:	18c3      	adds	r3, r0, r3
    9228:	185b      	adds	r3, r3, r1
    922a:	881b      	ldrh	r3, [r3, #0]
    922c:	b29b      	uxth	r3, r3
    922e:	3301      	adds	r3, #1
    9230:	b29c      	uxth	r4, r3
    9232:	489e      	ldr	r0, [pc, #632]	; (94ac <sercom_proc+0x324>)
    9234:	238b      	movs	r3, #139	; 0x8b
    9236:	0099      	lsls	r1, r3, #2
    9238:	0013      	movs	r3, r2
    923a:	00db      	lsls	r3, r3, #3
    923c:	189b      	adds	r3, r3, r2
    923e:	019b      	lsls	r3, r3, #6
    9240:	18c3      	adds	r3, r0, r3
    9242:	185b      	adds	r3, r3, r1
    9244:	1c22      	adds	r2, r4, #0
    9246:	801a      	strh	r2, [r3, #0]
    9248:	1dfb      	adds	r3, r7, #7
    924a:	781a      	ldrb	r2, [r3, #0]
    924c:	4997      	ldr	r1, [pc, #604]	; (94ac <sercom_proc+0x324>)
    924e:	0013      	movs	r3, r2
    9250:	00db      	lsls	r3, r3, #3
    9252:	189b      	adds	r3, r3, r2
    9254:	019b      	lsls	r3, r3, #6
    9256:	585a      	ldr	r2, [r3, r1]
    9258:	8b53      	ldrh	r3, [r2, #26]
    925a:	2110      	movs	r1, #16
    925c:	430b      	orrs	r3, r1
    925e:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.BUFOVF)	{port[n_port].errors.buf_ovf++;		    port[n_port].sercom->USART.STATUS.bit.BUFOVF = 1;}
    9260:	1dfb      	adds	r3, r7, #7
    9262:	781a      	ldrb	r2, [r3, #0]
    9264:	4991      	ldr	r1, [pc, #580]	; (94ac <sercom_proc+0x324>)
    9266:	0013      	movs	r3, r2
    9268:	00db      	lsls	r3, r3, #3
    926a:	189b      	adds	r3, r3, r2
    926c:	019b      	lsls	r3, r3, #6
    926e:	585b      	ldr	r3, [r3, r1]
    9270:	8b5b      	ldrh	r3, [r3, #26]
    9272:	075b      	lsls	r3, r3, #29
    9274:	0fdb      	lsrs	r3, r3, #31
    9276:	b2db      	uxtb	r3, r3
    9278:	2b00      	cmp	r3, #0
    927a:	d023      	beq.n	92c4 <sercom_proc+0x13c>
    927c:	1dfb      	adds	r3, r7, #7
    927e:	781a      	ldrb	r2, [r3, #0]
    9280:	498a      	ldr	r1, [pc, #552]	; (94ac <sercom_proc+0x324>)
    9282:	488c      	ldr	r0, [pc, #560]	; (94b4 <sercom_proc+0x32c>)
    9284:	0013      	movs	r3, r2
    9286:	00db      	lsls	r3, r3, #3
    9288:	189b      	adds	r3, r3, r2
    928a:	019b      	lsls	r3, r3, #6
    928c:	18cb      	adds	r3, r1, r3
    928e:	181b      	adds	r3, r3, r0
    9290:	881b      	ldrh	r3, [r3, #0]
    9292:	b29b      	uxth	r3, r3
    9294:	3301      	adds	r3, #1
    9296:	b29c      	uxth	r4, r3
    9298:	4984      	ldr	r1, [pc, #528]	; (94ac <sercom_proc+0x324>)
    929a:	4886      	ldr	r0, [pc, #536]	; (94b4 <sercom_proc+0x32c>)
    929c:	0013      	movs	r3, r2
    929e:	00db      	lsls	r3, r3, #3
    92a0:	189b      	adds	r3, r3, r2
    92a2:	019b      	lsls	r3, r3, #6
    92a4:	18cb      	adds	r3, r1, r3
    92a6:	181b      	adds	r3, r3, r0
    92a8:	1c22      	adds	r2, r4, #0
    92aa:	801a      	strh	r2, [r3, #0]
    92ac:	1dfb      	adds	r3, r7, #7
    92ae:	781a      	ldrb	r2, [r3, #0]
    92b0:	497e      	ldr	r1, [pc, #504]	; (94ac <sercom_proc+0x324>)
    92b2:	0013      	movs	r3, r2
    92b4:	00db      	lsls	r3, r3, #3
    92b6:	189b      	adds	r3, r3, r2
    92b8:	019b      	lsls	r3, r3, #6
    92ba:	585a      	ldr	r2, [r3, r1]
    92bc:	8b53      	ldrh	r3, [r2, #26]
    92be:	2104      	movs	r1, #4
    92c0:	430b      	orrs	r3, r1
    92c2:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.FERR)		{port[n_port].errors.st_bit++;		    port[n_port].sercom->USART.STATUS.bit.FERR   = 1;}
    92c4:	1dfb      	adds	r3, r7, #7
    92c6:	781a      	ldrb	r2, [r3, #0]
    92c8:	4978      	ldr	r1, [pc, #480]	; (94ac <sercom_proc+0x324>)
    92ca:	0013      	movs	r3, r2
    92cc:	00db      	lsls	r3, r3, #3
    92ce:	189b      	adds	r3, r3, r2
    92d0:	019b      	lsls	r3, r3, #6
    92d2:	585b      	ldr	r3, [r3, r1]
    92d4:	8b5b      	ldrh	r3, [r3, #26]
    92d6:	079b      	lsls	r3, r3, #30
    92d8:	0fdb      	lsrs	r3, r3, #31
    92da:	b2db      	uxtb	r3, r3
    92dc:	2b00      	cmp	r3, #0
    92de:	d025      	beq.n	932c <sercom_proc+0x1a4>
    92e0:	1dfb      	adds	r3, r7, #7
    92e2:	781a      	ldrb	r2, [r3, #0]
    92e4:	4871      	ldr	r0, [pc, #452]	; (94ac <sercom_proc+0x324>)
    92e6:	238c      	movs	r3, #140	; 0x8c
    92e8:	0099      	lsls	r1, r3, #2
    92ea:	0013      	movs	r3, r2
    92ec:	00db      	lsls	r3, r3, #3
    92ee:	189b      	adds	r3, r3, r2
    92f0:	019b      	lsls	r3, r3, #6
    92f2:	18c3      	adds	r3, r0, r3
    92f4:	185b      	adds	r3, r3, r1
    92f6:	881b      	ldrh	r3, [r3, #0]
    92f8:	b29b      	uxth	r3, r3
    92fa:	3301      	adds	r3, #1
    92fc:	b29c      	uxth	r4, r3
    92fe:	486b      	ldr	r0, [pc, #428]	; (94ac <sercom_proc+0x324>)
    9300:	238c      	movs	r3, #140	; 0x8c
    9302:	0099      	lsls	r1, r3, #2
    9304:	0013      	movs	r3, r2
    9306:	00db      	lsls	r3, r3, #3
    9308:	189b      	adds	r3, r3, r2
    930a:	019b      	lsls	r3, r3, #6
    930c:	18c3      	adds	r3, r0, r3
    930e:	185b      	adds	r3, r3, r1
    9310:	1c22      	adds	r2, r4, #0
    9312:	801a      	strh	r2, [r3, #0]
    9314:	1dfb      	adds	r3, r7, #7
    9316:	781a      	ldrb	r2, [r3, #0]
    9318:	4964      	ldr	r1, [pc, #400]	; (94ac <sercom_proc+0x324>)
    931a:	0013      	movs	r3, r2
    931c:	00db      	lsls	r3, r3, #3
    931e:	189b      	adds	r3, r3, r2
    9320:	019b      	lsls	r3, r3, #6
    9322:	585a      	ldr	r2, [r3, r1]
    9324:	8b53      	ldrh	r3, [r2, #26]
    9326:	2102      	movs	r1, #2
    9328:	430b      	orrs	r3, r1
    932a:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.PERR)		{port[n_port].errors.prty++;			port[n_port].sercom->USART.STATUS.bit.PERR   = 1;}
    932c:	1dfb      	adds	r3, r7, #7
    932e:	781a      	ldrb	r2, [r3, #0]
    9330:	495e      	ldr	r1, [pc, #376]	; (94ac <sercom_proc+0x324>)
    9332:	0013      	movs	r3, r2
    9334:	00db      	lsls	r3, r3, #3
    9336:	189b      	adds	r3, r3, r2
    9338:	019b      	lsls	r3, r3, #6
    933a:	585b      	ldr	r3, [r3, r1]
    933c:	8b5b      	ldrh	r3, [r3, #26]
    933e:	07db      	lsls	r3, r3, #31
    9340:	0fdb      	lsrs	r3, r3, #31
    9342:	b2db      	uxtb	r3, r3
    9344:	2b00      	cmp	r3, #0
    9346:	d023      	beq.n	9390 <sercom_proc+0x208>
    9348:	1dfb      	adds	r3, r7, #7
    934a:	781a      	ldrb	r2, [r3, #0]
    934c:	4957      	ldr	r1, [pc, #348]	; (94ac <sercom_proc+0x324>)
    934e:	485a      	ldr	r0, [pc, #360]	; (94b8 <sercom_proc+0x330>)
    9350:	0013      	movs	r3, r2
    9352:	00db      	lsls	r3, r3, #3
    9354:	189b      	adds	r3, r3, r2
    9356:	019b      	lsls	r3, r3, #6
    9358:	18cb      	adds	r3, r1, r3
    935a:	181b      	adds	r3, r3, r0
    935c:	881b      	ldrh	r3, [r3, #0]
    935e:	b29b      	uxth	r3, r3
    9360:	3301      	adds	r3, #1
    9362:	b29c      	uxth	r4, r3
    9364:	4951      	ldr	r1, [pc, #324]	; (94ac <sercom_proc+0x324>)
    9366:	4854      	ldr	r0, [pc, #336]	; (94b8 <sercom_proc+0x330>)
    9368:	0013      	movs	r3, r2
    936a:	00db      	lsls	r3, r3, #3
    936c:	189b      	adds	r3, r3, r2
    936e:	019b      	lsls	r3, r3, #6
    9370:	18cb      	adds	r3, r1, r3
    9372:	181b      	adds	r3, r3, r0
    9374:	1c22      	adds	r2, r4, #0
    9376:	801a      	strh	r2, [r3, #0]
    9378:	1dfb      	adds	r3, r7, #7
    937a:	781a      	ldrb	r2, [r3, #0]
    937c:	494b      	ldr	r1, [pc, #300]	; (94ac <sercom_proc+0x324>)
    937e:	0013      	movs	r3, r2
    9380:	00db      	lsls	r3, r3, #3
    9382:	189b      	adds	r3, r3, r2
    9384:	019b      	lsls	r3, r3, #6
    9386:	585a      	ldr	r2, [r3, r1]
    9388:	8b53      	ldrh	r3, [r2, #26]
    938a:	2101      	movs	r1, #1
    938c:	430b      	orrs	r3, r1
    938e:	8353      	strh	r3, [r2, #26]
		
	if (port[n_port].sercom->USART.INTFLAG.bit.RXC)
    9390:	1dfb      	adds	r3, r7, #7
    9392:	781a      	ldrb	r2, [r3, #0]
    9394:	4945      	ldr	r1, [pc, #276]	; (94ac <sercom_proc+0x324>)
    9396:	0013      	movs	r3, r2
    9398:	00db      	lsls	r3, r3, #3
    939a:	189b      	adds	r3, r3, r2
    939c:	019b      	lsls	r3, r3, #6
    939e:	585b      	ldr	r3, [r3, r1]
    93a0:	7e1b      	ldrb	r3, [r3, #24]
    93a2:	075b      	lsls	r3, r3, #29
    93a4:	0fdb      	lsrs	r3, r3, #31
    93a6:	b2db      	uxtb	r3, r3
    93a8:	2b00      	cmp	r3, #0
    93aa:	d100      	bne.n	93ae <sercom_proc+0x226>
    93ac:	e08a      	b.n	94c4 <sercom_proc+0x33c>
	{
		port[n_port].rxc++;
    93ae:	1dfb      	adds	r3, r7, #7
    93b0:	781a      	ldrb	r2, [r3, #0]
    93b2:	493e      	ldr	r1, [pc, #248]	; (94ac <sercom_proc+0x324>)
    93b4:	4841      	ldr	r0, [pc, #260]	; (94bc <sercom_proc+0x334>)
    93b6:	0013      	movs	r3, r2
    93b8:	00db      	lsls	r3, r3, #3
    93ba:	189b      	adds	r3, r3, r2
    93bc:	019b      	lsls	r3, r3, #6
    93be:	18cb      	adds	r3, r1, r3
    93c0:	181b      	adds	r3, r3, r0
    93c2:	881b      	ldrh	r3, [r3, #0]
    93c4:	b29b      	uxth	r3, r3
    93c6:	3301      	adds	r3, #1
    93c8:	b29c      	uxth	r4, r3
    93ca:	4938      	ldr	r1, [pc, #224]	; (94ac <sercom_proc+0x324>)
    93cc:	483b      	ldr	r0, [pc, #236]	; (94bc <sercom_proc+0x334>)
    93ce:	0013      	movs	r3, r2
    93d0:	00db      	lsls	r3, r3, #3
    93d2:	189b      	adds	r3, r3, r2
    93d4:	019b      	lsls	r3, r3, #6
    93d6:	18cb      	adds	r3, r1, r3
    93d8:	181b      	adds	r3, r3, r0
    93da:	1c22      	adds	r2, r4, #0
    93dc:	801a      	strh	r2, [r3, #0]
		if(port[n_port].rn >= USART_BUF_SIZE){port[n_port].rn = 0;}
    93de:	1dfb      	adds	r3, r7, #7
    93e0:	781a      	ldrb	r2, [r3, #0]
    93e2:	4932      	ldr	r1, [pc, #200]	; (94ac <sercom_proc+0x324>)
    93e4:	4836      	ldr	r0, [pc, #216]	; (94c0 <sercom_proc+0x338>)
    93e6:	0013      	movs	r3, r2
    93e8:	00db      	lsls	r3, r3, #3
    93ea:	189b      	adds	r3, r3, r2
    93ec:	019b      	lsls	r3, r3, #6
    93ee:	18cb      	adds	r3, r1, r3
    93f0:	181b      	adds	r3, r3, r0
    93f2:	881b      	ldrh	r3, [r3, #0]
    93f4:	b29b      	uxth	r3, r3
    93f6:	2bff      	cmp	r3, #255	; 0xff
    93f8:	d90b      	bls.n	9412 <sercom_proc+0x28a>
    93fa:	1dfb      	adds	r3, r7, #7
    93fc:	781a      	ldrb	r2, [r3, #0]
    93fe:	492b      	ldr	r1, [pc, #172]	; (94ac <sercom_proc+0x324>)
    9400:	482f      	ldr	r0, [pc, #188]	; (94c0 <sercom_proc+0x338>)
    9402:	0013      	movs	r3, r2
    9404:	00db      	lsls	r3, r3, #3
    9406:	189b      	adds	r3, r3, r2
    9408:	019b      	lsls	r3, r3, #6
    940a:	18cb      	adds	r3, r1, r3
    940c:	181b      	adds	r3, r3, r0
    940e:	2200      	movs	r2, #0
    9410:	801a      	strh	r2, [r3, #0]
		port[n_port].rbuf[port[n_port].rn] = port[n_port].sercom->USART.DATA.reg;
    9412:	1dfb      	adds	r3, r7, #7
    9414:	781a      	ldrb	r2, [r3, #0]
    9416:	1dfb      	adds	r3, r7, #7
    9418:	7819      	ldrb	r1, [r3, #0]
    941a:	4824      	ldr	r0, [pc, #144]	; (94ac <sercom_proc+0x324>)
    941c:	4c28      	ldr	r4, [pc, #160]	; (94c0 <sercom_proc+0x338>)
    941e:	000b      	movs	r3, r1
    9420:	00db      	lsls	r3, r3, #3
    9422:	185b      	adds	r3, r3, r1
    9424:	019b      	lsls	r3, r3, #6
    9426:	18c3      	adds	r3, r0, r3
    9428:	191b      	adds	r3, r3, r4
    942a:	881b      	ldrh	r3, [r3, #0]
    942c:	b29b      	uxth	r3, r3
    942e:	001d      	movs	r5, r3
    9430:	1dfb      	adds	r3, r7, #7
    9432:	7819      	ldrb	r1, [r3, #0]
    9434:	481d      	ldr	r0, [pc, #116]	; (94ac <sercom_proc+0x324>)
    9436:	000b      	movs	r3, r1
    9438:	00db      	lsls	r3, r3, #3
    943a:	185b      	adds	r3, r3, r1
    943c:	019b      	lsls	r3, r3, #6
    943e:	581b      	ldr	r3, [r3, r0]
    9440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9442:	b29b      	uxth	r3, r3
    9444:	b2dc      	uxtb	r4, r3
    9446:	4819      	ldr	r0, [pc, #100]	; (94ac <sercom_proc+0x324>)
    9448:	230a      	movs	r3, #10
    944a:	33ff      	adds	r3, #255	; 0xff
    944c:	0019      	movs	r1, r3
    944e:	0013      	movs	r3, r2
    9450:	00db      	lsls	r3, r3, #3
    9452:	189b      	adds	r3, r3, r2
    9454:	019b      	lsls	r3, r3, #6
    9456:	18c3      	adds	r3, r0, r3
    9458:	195b      	adds	r3, r3, r5
    945a:	185b      	adds	r3, r3, r1
    945c:	1c22      	adds	r2, r4, #0
    945e:	701a      	strb	r2, [r3, #0]
		port[n_port].rn++;
    9460:	1dfb      	adds	r3, r7, #7
    9462:	781a      	ldrb	r2, [r3, #0]
    9464:	4911      	ldr	r1, [pc, #68]	; (94ac <sercom_proc+0x324>)
    9466:	4816      	ldr	r0, [pc, #88]	; (94c0 <sercom_proc+0x338>)
    9468:	0013      	movs	r3, r2
    946a:	00db      	lsls	r3, r3, #3
    946c:	189b      	adds	r3, r3, r2
    946e:	019b      	lsls	r3, r3, #6
    9470:	18cb      	adds	r3, r1, r3
    9472:	181b      	adds	r3, r3, r0
    9474:	881b      	ldrh	r3, [r3, #0]
    9476:	b29b      	uxth	r3, r3
    9478:	3301      	adds	r3, #1
    947a:	b29c      	uxth	r4, r3
    947c:	490b      	ldr	r1, [pc, #44]	; (94ac <sercom_proc+0x324>)
    947e:	4810      	ldr	r0, [pc, #64]	; (94c0 <sercom_proc+0x338>)
    9480:	0013      	movs	r3, r2
    9482:	00db      	lsls	r3, r3, #3
    9484:	189b      	adds	r3, r3, r2
    9486:	019b      	lsls	r3, r3, #6
    9488:	18cb      	adds	r3, r1, r3
    948a:	181b      	adds	r3, r3, r0
    948c:	1c22      	adds	r2, r4, #0
    948e:	801a      	strh	r2, [r3, #0]
		port[n_port].rtime = 0;
    9490:	1dfb      	adds	r3, r7, #7
    9492:	781a      	ldrb	r2, [r3, #0]
    9494:	4805      	ldr	r0, [pc, #20]	; (94ac <sercom_proc+0x324>)
    9496:	2385      	movs	r3, #133	; 0x85
    9498:	0099      	lsls	r1, r3, #2
    949a:	0013      	movs	r3, r2
    949c:	00db      	lsls	r3, r3, #3
    949e:	189b      	adds	r3, r3, r2
    94a0:	019b      	lsls	r3, r3, #6
    94a2:	18c3      	adds	r3, r0, r3
    94a4:	185b      	adds	r3, r3, r1
    94a6:	2200      	movs	r2, #0
    94a8:	801a      	strh	r2, [r3, #0]
		return;
    94aa:	e0fb      	b.n	96a4 <sercom_proc+0x51c>
    94ac:	200031fc 	.word	0x200031fc
    94b0:	0000022a 	.word	0x0000022a
    94b4:	0000022e 	.word	0x0000022e
    94b8:	00000232 	.word	0x00000232
    94bc:	00000226 	.word	0x00000226
    94c0:	0000020e 	.word	0x0000020e
	}

	if(port[n_port].sercom->USART.INTFLAG.bit.TXC)
    94c4:	1dfb      	adds	r3, r7, #7
    94c6:	781a      	ldrb	r2, [r3, #0]
    94c8:	4978      	ldr	r1, [pc, #480]	; (96ac <sercom_proc+0x524>)
    94ca:	0013      	movs	r3, r2
    94cc:	00db      	lsls	r3, r3, #3
    94ce:	189b      	adds	r3, r3, r2
    94d0:	019b      	lsls	r3, r3, #6
    94d2:	585b      	ldr	r3, [r3, r1]
    94d4:	7e1b      	ldrb	r3, [r3, #24]
    94d6:	079b      	lsls	r3, r3, #30
    94d8:	0fdb      	lsrs	r3, r3, #31
    94da:	b2db      	uxtb	r3, r3
    94dc:	2b00      	cmp	r3, #0
    94de:	d045      	beq.n	956c <sercom_proc+0x3e4>
	{
		port[n_port].txc++;
    94e0:	1dfb      	adds	r3, r7, #7
    94e2:	781a      	ldrb	r2, [r3, #0]
    94e4:	4871      	ldr	r0, [pc, #452]	; (96ac <sercom_proc+0x524>)
    94e6:	238a      	movs	r3, #138	; 0x8a
    94e8:	0099      	lsls	r1, r3, #2
    94ea:	0013      	movs	r3, r2
    94ec:	00db      	lsls	r3, r3, #3
    94ee:	189b      	adds	r3, r3, r2
    94f0:	019b      	lsls	r3, r3, #6
    94f2:	18c3      	adds	r3, r0, r3
    94f4:	185b      	adds	r3, r3, r1
    94f6:	881b      	ldrh	r3, [r3, #0]
    94f8:	b29b      	uxth	r3, r3
    94fa:	3301      	adds	r3, #1
    94fc:	b29c      	uxth	r4, r3
    94fe:	486b      	ldr	r0, [pc, #428]	; (96ac <sercom_proc+0x524>)
    9500:	238a      	movs	r3, #138	; 0x8a
    9502:	0099      	lsls	r1, r3, #2
    9504:	0013      	movs	r3, r2
    9506:	00db      	lsls	r3, r3, #3
    9508:	189b      	adds	r3, r3, r2
    950a:	019b      	lsls	r3, r3, #6
    950c:	18c3      	adds	r3, r0, r3
    950e:	185b      	adds	r3, r3, r1
    9510:	1c22      	adds	r2, r4, #0
    9512:	801a      	strh	r2, [r3, #0]
		port[n_port].sercom->USART.INTFLAG.bit.TXC = 1;
    9514:	1dfb      	adds	r3, r7, #7
    9516:	781a      	ldrb	r2, [r3, #0]
    9518:	4964      	ldr	r1, [pc, #400]	; (96ac <sercom_proc+0x524>)
    951a:	0013      	movs	r3, r2
    951c:	00db      	lsls	r3, r3, #3
    951e:	189b      	adds	r3, r3, r2
    9520:	019b      	lsls	r3, r3, #6
    9522:	585a      	ldr	r2, [r3, r1]
    9524:	7e13      	ldrb	r3, [r2, #24]
    9526:	2102      	movs	r1, #2
    9528:	430b      	orrs	r3, r1
    952a:	7613      	strb	r3, [r2, #24]
		pin_ctrl(RTS, n_port, CLR);
    952c:	1dfb      	adds	r3, r7, #7
    952e:	781b      	ldrb	r3, [r3, #0]
    9530:	2202      	movs	r2, #2
    9532:	0019      	movs	r1, r3
    9534:	2000      	movs	r0, #0
    9536:	4b5e      	ldr	r3, [pc, #376]	; (96b0 <sercom_proc+0x528>)
    9538:	4798      	blx	r3
		port[n_port].sercom->USART.INTENCLR.bit.TXC = 1;
    953a:	1dfb      	adds	r3, r7, #7
    953c:	781a      	ldrb	r2, [r3, #0]
    953e:	495b      	ldr	r1, [pc, #364]	; (96ac <sercom_proc+0x524>)
    9540:	0013      	movs	r3, r2
    9542:	00db      	lsls	r3, r3, #3
    9544:	189b      	adds	r3, r3, r2
    9546:	019b      	lsls	r3, r3, #6
    9548:	585a      	ldr	r2, [r3, r1]
    954a:	7d13      	ldrb	r3, [r2, #20]
    954c:	2102      	movs	r1, #2
    954e:	430b      	orrs	r3, r1
    9550:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.RXC = 1;
    9552:	1dfb      	adds	r3, r7, #7
    9554:	781a      	ldrb	r2, [r3, #0]
    9556:	4955      	ldr	r1, [pc, #340]	; (96ac <sercom_proc+0x524>)
    9558:	0013      	movs	r3, r2
    955a:	00db      	lsls	r3, r3, #3
    955c:	189b      	adds	r3, r3, r2
    955e:	019b      	lsls	r3, r3, #6
    9560:	585a      	ldr	r2, [r3, r1]
    9562:	7d93      	ldrb	r3, [r2, #22]
    9564:	2104      	movs	r1, #4
    9566:	430b      	orrs	r3, r1
    9568:	7593      	strb	r3, [r2, #22]
		return;
    956a:	e09b      	b.n	96a4 <sercom_proc+0x51c>
	}
	
	if(port[n_port].sercom->USART.INTFLAG.bit.DRE)
    956c:	1dfb      	adds	r3, r7, #7
    956e:	781a      	ldrb	r2, [r3, #0]
    9570:	494e      	ldr	r1, [pc, #312]	; (96ac <sercom_proc+0x524>)
    9572:	0013      	movs	r3, r2
    9574:	00db      	lsls	r3, r3, #3
    9576:	189b      	adds	r3, r3, r2
    9578:	019b      	lsls	r3, r3, #6
    957a:	585b      	ldr	r3, [r3, r1]
    957c:	7e1b      	ldrb	r3, [r3, #24]
    957e:	07db      	lsls	r3, r3, #31
    9580:	0fdb      	lsrs	r3, r3, #31
    9582:	b2db      	uxtb	r3, r3
    9584:	2b00      	cmp	r3, #0
    9586:	d100      	bne.n	958a <sercom_proc+0x402>
    9588:	e08c      	b.n	96a4 <sercom_proc+0x51c>
	{
		port[n_port].dre++;
    958a:	1dfb      	adds	r3, r7, #7
    958c:	781a      	ldrb	r2, [r3, #0]
    958e:	4847      	ldr	r0, [pc, #284]	; (96ac <sercom_proc+0x524>)
    9590:	2389      	movs	r3, #137	; 0x89
    9592:	0099      	lsls	r1, r3, #2
    9594:	0013      	movs	r3, r2
    9596:	00db      	lsls	r3, r3, #3
    9598:	189b      	adds	r3, r3, r2
    959a:	019b      	lsls	r3, r3, #6
    959c:	18c3      	adds	r3, r0, r3
    959e:	185b      	adds	r3, r3, r1
    95a0:	881b      	ldrh	r3, [r3, #0]
    95a2:	b29b      	uxth	r3, r3
    95a4:	3301      	adds	r3, #1
    95a6:	b29c      	uxth	r4, r3
    95a8:	4840      	ldr	r0, [pc, #256]	; (96ac <sercom_proc+0x524>)
    95aa:	2389      	movs	r3, #137	; 0x89
    95ac:	0099      	lsls	r1, r3, #2
    95ae:	0013      	movs	r3, r2
    95b0:	00db      	lsls	r3, r3, #3
    95b2:	189b      	adds	r3, r3, r2
    95b4:	019b      	lsls	r3, r3, #6
    95b6:	18c3      	adds	r3, r0, r3
    95b8:	185b      	adds	r3, r3, r1
    95ba:	1c22      	adds	r2, r4, #0
    95bc:	801a      	strh	r2, [r3, #0]
		if(port[n_port].wx < port[n_port].wn)
    95be:	1dfb      	adds	r3, r7, #7
    95c0:	781a      	ldrb	r2, [r3, #0]
    95c2:	483a      	ldr	r0, [pc, #232]	; (96ac <sercom_proc+0x524>)
    95c4:	2383      	movs	r3, #131	; 0x83
    95c6:	0099      	lsls	r1, r3, #2
    95c8:	0013      	movs	r3, r2
    95ca:	00db      	lsls	r3, r3, #3
    95cc:	189b      	adds	r3, r3, r2
    95ce:	019b      	lsls	r3, r3, #6
    95d0:	18c3      	adds	r3, r0, r3
    95d2:	185b      	adds	r3, r3, r1
    95d4:	881b      	ldrh	r3, [r3, #0]
    95d6:	b299      	uxth	r1, r3
    95d8:	1dfb      	adds	r3, r7, #7
    95da:	781a      	ldrb	r2, [r3, #0]
    95dc:	4833      	ldr	r0, [pc, #204]	; (96ac <sercom_proc+0x524>)
    95de:	4c35      	ldr	r4, [pc, #212]	; (96b4 <sercom_proc+0x52c>)
    95e0:	0013      	movs	r3, r2
    95e2:	00db      	lsls	r3, r3, #3
    95e4:	189b      	adds	r3, r3, r2
    95e6:	019b      	lsls	r3, r3, #6
    95e8:	18c3      	adds	r3, r0, r3
    95ea:	191b      	adds	r3, r3, r4
    95ec:	881b      	ldrh	r3, [r3, #0]
    95ee:	b29b      	uxth	r3, r3
    95f0:	4299      	cmp	r1, r3
    95f2:	d23e      	bcs.n	9672 <sercom_proc+0x4ea>
		{
			port[n_port].sercom->USART.DATA.reg = port[n_port].wbuf[port[n_port].wx];
    95f4:	1dfb      	adds	r3, r7, #7
    95f6:	781a      	ldrb	r2, [r3, #0]
    95f8:	492c      	ldr	r1, [pc, #176]	; (96ac <sercom_proc+0x524>)
    95fa:	0013      	movs	r3, r2
    95fc:	00db      	lsls	r3, r3, #3
    95fe:	189b      	adds	r3, r3, r2
    9600:	019b      	lsls	r3, r3, #6
    9602:	5858      	ldr	r0, [r3, r1]
    9604:	1dfb      	adds	r3, r7, #7
    9606:	781a      	ldrb	r2, [r3, #0]
    9608:	1dfb      	adds	r3, r7, #7
    960a:	7819      	ldrb	r1, [r3, #0]
    960c:	4d27      	ldr	r5, [pc, #156]	; (96ac <sercom_proc+0x524>)
    960e:	2383      	movs	r3, #131	; 0x83
    9610:	009c      	lsls	r4, r3, #2
    9612:	000b      	movs	r3, r1
    9614:	00db      	lsls	r3, r3, #3
    9616:	185b      	adds	r3, r3, r1
    9618:	019b      	lsls	r3, r3, #6
    961a:	18eb      	adds	r3, r5, r3
    961c:	191b      	adds	r3, r3, r4
    961e:	881b      	ldrh	r3, [r3, #0]
    9620:	b29b      	uxth	r3, r3
    9622:	001c      	movs	r4, r3
    9624:	4921      	ldr	r1, [pc, #132]	; (96ac <sercom_proc+0x524>)
    9626:	0013      	movs	r3, r2
    9628:	00db      	lsls	r3, r3, #3
    962a:	189b      	adds	r3, r3, r2
    962c:	019b      	lsls	r3, r3, #6
    962e:	18cb      	adds	r3, r1, r3
    9630:	191b      	adds	r3, r3, r4
    9632:	3309      	adds	r3, #9
    9634:	781b      	ldrb	r3, [r3, #0]
    9636:	b2db      	uxtb	r3, r3
    9638:	b29b      	uxth	r3, r3
    963a:	8503      	strh	r3, [r0, #40]	; 0x28
			port[n_port].wx  ++;
    963c:	1dfb      	adds	r3, r7, #7
    963e:	781a      	ldrb	r2, [r3, #0]
    9640:	481a      	ldr	r0, [pc, #104]	; (96ac <sercom_proc+0x524>)
    9642:	2383      	movs	r3, #131	; 0x83
    9644:	0099      	lsls	r1, r3, #2
    9646:	0013      	movs	r3, r2
    9648:	00db      	lsls	r3, r3, #3
    964a:	189b      	adds	r3, r3, r2
    964c:	019b      	lsls	r3, r3, #6
    964e:	18c3      	adds	r3, r0, r3
    9650:	185b      	adds	r3, r3, r1
    9652:	881b      	ldrh	r3, [r3, #0]
    9654:	b29b      	uxth	r3, r3
    9656:	3301      	adds	r3, #1
    9658:	b29c      	uxth	r4, r3
    965a:	4814      	ldr	r0, [pc, #80]	; (96ac <sercom_proc+0x524>)
    965c:	2383      	movs	r3, #131	; 0x83
    965e:	0099      	lsls	r1, r3, #2
    9660:	0013      	movs	r3, r2
    9662:	00db      	lsls	r3, r3, #3
    9664:	189b      	adds	r3, r3, r2
    9666:	019b      	lsls	r3, r3, #6
    9668:	18c3      	adds	r3, r0, r3
    966a:	185b      	adds	r3, r3, r1
    966c:	1c22      	adds	r2, r4, #0
    966e:	801a      	strh	r2, [r3, #0]
			return;
    9670:	e018      	b.n	96a4 <sercom_proc+0x51c>
		}
		port[n_port].sercom->USART.INTENCLR.bit.DRE=1;
    9672:	1dfb      	adds	r3, r7, #7
    9674:	781a      	ldrb	r2, [r3, #0]
    9676:	490d      	ldr	r1, [pc, #52]	; (96ac <sercom_proc+0x524>)
    9678:	0013      	movs	r3, r2
    967a:	00db      	lsls	r3, r3, #3
    967c:	189b      	adds	r3, r3, r2
    967e:	019b      	lsls	r3, r3, #6
    9680:	585a      	ldr	r2, [r3, r1]
    9682:	7d13      	ldrb	r3, [r2, #20]
    9684:	2101      	movs	r1, #1
    9686:	430b      	orrs	r3, r1
    9688:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.TXC=1;
    968a:	1dfb      	adds	r3, r7, #7
    968c:	781a      	ldrb	r2, [r3, #0]
    968e:	4907      	ldr	r1, [pc, #28]	; (96ac <sercom_proc+0x524>)
    9690:	0013      	movs	r3, r2
    9692:	00db      	lsls	r3, r3, #3
    9694:	189b      	adds	r3, r3, r2
    9696:	019b      	lsls	r3, r3, #6
    9698:	585a      	ldr	r2, [r3, r1]
    969a:	7d93      	ldrb	r3, [r2, #22]
    969c:	2102      	movs	r1, #2
    969e:	430b      	orrs	r3, r1
    96a0:	7593      	strb	r3, [r2, #22]
		return;
    96a2:	46c0      	nop			; (mov r8, r8)
	}
};
    96a4:	46bd      	mov	sp, r7
    96a6:	b002      	add	sp, #8
    96a8:	bdb0      	pop	{r4, r5, r7, pc}
    96aa:	46c0      	nop			; (mov r8, r8)
    96ac:	200031fc 	.word	0x200031fc
    96b0:	00006ddd 	.word	0x00006ddd
    96b4:	0000020a 	.word	0x0000020a

000096b8 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	af00      	add	r7, sp, #0
	sercom_proc(0);
    96bc:	2000      	movs	r0, #0
    96be:	f7ff fd63 	bl	9188 <sercom_proc>
}
    96c2:	46c0      	nop			; (mov r8, r8)
    96c4:	46bd      	mov	sp, r7
    96c6:	bd80      	pop	{r7, pc}

000096c8 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	af00      	add	r7, sp, #0
	sercom_proc(1);
    96cc:	2001      	movs	r0, #1
    96ce:	f7ff fd5b 	bl	9188 <sercom_proc>
}
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	46bd      	mov	sp, r7
    96d6:	bd80      	pop	{r7, pc}

000096d8 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    96d8:	b580      	push	{r7, lr}
    96da:	af00      	add	r7, sp, #0
	sercom_proc(2);
    96dc:	2002      	movs	r0, #2
    96de:	f7ff fd53 	bl	9188 <sercom_proc>
}
    96e2:	46c0      	nop			; (mov r8, r8)
    96e4:	46bd      	mov	sp, r7
    96e6:	bd80      	pop	{r7, pc}

000096e8 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    96e8:	b580      	push	{r7, lr}
    96ea:	af00      	add	r7, sp, #0
	sercom_proc(3);
    96ec:	2003      	movs	r0, #3
    96ee:	f7ff fd4b 	bl	9188 <sercom_proc>
}
    96f2:	46c0      	nop			; (mov r8, r8)
    96f4:	46bd      	mov	sp, r7
    96f6:	bd80      	pop	{r7, pc}

000096f8 <w5500_init_reg>:
W5500_MODE w5500_mode;

volatile WORD sizert=0;

BYTE w5500_init_reg(void)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	af00      	add	r7, sp, #0
	pin_ctrl(W55,PWR,SET);
    96fc:	2201      	movs	r2, #1
    96fe:	2100      	movs	r1, #0
    9700:	2002      	movs	r0, #2
    9702:	4b19      	ldr	r3, [pc, #100]	; (9768 <w5500_init_reg+0x70>)
    9704:	4798      	blx	r3
	
	
		
	if(ip_init()	)	{err_dword.ip_init_er   = 1;	return ERROR;}
    9706:	f000 f893 	bl	9830 <ip_init>
    970a:	1e03      	subs	r3, r0, #0
    970c:	d007      	beq.n	971e <w5500_init_reg+0x26>
    970e:	4b17      	ldr	r3, [pc, #92]	; (976c <w5500_init_reg+0x74>)
    9710:	781a      	ldrb	r2, [r3, #0]
    9712:	2180      	movs	r1, #128	; 0x80
    9714:	4249      	negs	r1, r1
    9716:	430a      	orrs	r2, r1
    9718:	701a      	strb	r2, [r3, #0]
    971a:	2302      	movs	r3, #2
    971c:	e021      	b.n	9762 <w5500_init_reg+0x6a>
	if(mask_init()	)	{err_dword.mask_init_er = 1;	return ERROR;}
    971e:	f000 f867 	bl	97f0 <mask_init>
    9722:	1e03      	subs	r3, r0, #0
    9724:	d006      	beq.n	9734 <w5500_init_reg+0x3c>
    9726:	4b11      	ldr	r3, [pc, #68]	; (976c <w5500_init_reg+0x74>)
    9728:	785a      	ldrb	r2, [r3, #1]
    972a:	2101      	movs	r1, #1
    972c:	430a      	orrs	r2, r1
    972e:	705a      	strb	r2, [r3, #1]
    9730:	2302      	movs	r3, #2
    9732:	e016      	b.n	9762 <w5500_init_reg+0x6a>
	if(gw_init()	)	{err_dword.gw_init_er   = 1;	return ERROR;}		
    9734:	f000 f83c 	bl	97b0 <gw_init>
    9738:	1e03      	subs	r3, r0, #0
    973a:	d006      	beq.n	974a <w5500_init_reg+0x52>
    973c:	4b0b      	ldr	r3, [pc, #44]	; (976c <w5500_init_reg+0x74>)
    973e:	785a      	ldrb	r2, [r3, #1]
    9740:	2102      	movs	r1, #2
    9742:	430a      	orrs	r2, r1
    9744:	705a      	strb	r2, [r3, #1]
    9746:	2302      	movs	r3, #2
    9748:	e00b      	b.n	9762 <w5500_init_reg+0x6a>
	if(mac_init()	)	{err_dword.mac_init_er  = 1;	return ERROR;}
    974a:	f000 f811 	bl	9770 <mac_init>
    974e:	1e03      	subs	r3, r0, #0
    9750:	d006      	beq.n	9760 <w5500_init_reg+0x68>
    9752:	4b06      	ldr	r3, [pc, #24]	; (976c <w5500_init_reg+0x74>)
    9754:	785a      	ldrb	r2, [r3, #1]
    9756:	2104      	movs	r1, #4
    9758:	430a      	orrs	r2, r1
    975a:	705a      	strb	r2, [r3, #1]
    975c:	2302      	movs	r3, #2
    975e:	e000      	b.n	9762 <w5500_init_reg+0x6a>
		
	return SUCCESS;
    9760:	2300      	movs	r3, #0
}
    9762:	0018      	movs	r0, r3
    9764:	46bd      	mov	sp, r7
    9766:	bd80      	pop	{r7, pc}
    9768:	00006ddd 	.word	0x00006ddd
    976c:	20002550 	.word	0x20002550

00009770 <mac_init>:

BYTE mac_init(void)
{
    9770:	b5b0      	push	{r4, r5, r7, lr}
    9772:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MAC_ADDR_0,COMMON_REGISTER,cfg_2.mac_addr,sizeof(cfg_2.mac_addr),10);
    9774:	4b0b      	ldr	r3, [pc, #44]	; (97a4 <mac_init+0x34>)
    9776:	220a      	movs	r2, #10
    9778:	801a      	strh	r2, [r3, #0]
    977a:	e006      	b.n	978a <mac_init+0x1a>
    977c:	4b09      	ldr	r3, [pc, #36]	; (97a4 <mac_init+0x34>)
    977e:	881b      	ldrh	r3, [r3, #0]
    9780:	b29b      	uxth	r3, r3
    9782:	2b00      	cmp	r3, #0
    9784:	d101      	bne.n	978a <mac_init+0x1a>
    9786:	2301      	movs	r3, #1
    9788:	e008      	b.n	979c <mac_init+0x2c>
    978a:	4a07      	ldr	r2, [pc, #28]	; (97a8 <mac_init+0x38>)
    978c:	2306      	movs	r3, #6
    978e:	2100      	movs	r1, #0
    9790:	2009      	movs	r0, #9
    9792:	4c06      	ldr	r4, [pc, #24]	; (97ac <mac_init+0x3c>)
    9794:	47a0      	blx	r4
    9796:	1e03      	subs	r3, r0, #0
    9798:	d0f0      	beq.n	977c <mac_init+0xc>
	return SUCCESS;
    979a:	2300      	movs	r3, #0
}
    979c:	0018      	movs	r0, r3
    979e:	46bd      	mov	sp, r7
    97a0:	bdb0      	pop	{r4, r5, r7, pc}
    97a2:	46c0      	nop			; (mov r8, r8)
    97a4:	200031f4 	.word	0x200031f4
    97a8:	20003bc4 	.word	0x20003bc4
    97ac:	000079a9 	.word	0x000079a9

000097b0 <gw_init>:
BYTE gw_init(void)
{
    97b0:	b5b0      	push	{r4, r5, r7, lr}
    97b2:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_GATEWAY_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_gate,sizeof(cfg_1.com_network.ip_gate),10);
    97b4:	4b0b      	ldr	r3, [pc, #44]	; (97e4 <gw_init+0x34>)
    97b6:	220a      	movs	r2, #10
    97b8:	801a      	strh	r2, [r3, #0]
    97ba:	e006      	b.n	97ca <gw_init+0x1a>
    97bc:	4b09      	ldr	r3, [pc, #36]	; (97e4 <gw_init+0x34>)
    97be:	881b      	ldrh	r3, [r3, #0]
    97c0:	b29b      	uxth	r3, r3
    97c2:	2b00      	cmp	r3, #0
    97c4:	d101      	bne.n	97ca <gw_init+0x1a>
    97c6:	2301      	movs	r3, #1
    97c8:	e008      	b.n	97dc <gw_init+0x2c>
    97ca:	4a07      	ldr	r2, [pc, #28]	; (97e8 <gw_init+0x38>)
    97cc:	2304      	movs	r3, #4
    97ce:	2100      	movs	r1, #0
    97d0:	2001      	movs	r0, #1
    97d2:	4c06      	ldr	r4, [pc, #24]	; (97ec <gw_init+0x3c>)
    97d4:	47a0      	blx	r4
    97d6:	1e03      	subs	r3, r0, #0
    97d8:	d0f0      	beq.n	97bc <gw_init+0xc>
	return SUCCESS;
    97da:	2300      	movs	r3, #0
}
    97dc:	0018      	movs	r0, r3
    97de:	46bd      	mov	sp, r7
    97e0:	bdb0      	pop	{r4, r5, r7, pc}
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	200031f4 	.word	0x200031f4
    97e8:	20003df4 	.word	0x20003df4
    97ec:	000079a9 	.word	0x000079a9

000097f0 <mask_init>:
BYTE mask_init(void)
{
    97f0:	b5b0      	push	{r4, r5, r7, lr}
    97f2:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MASK_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_mask,sizeof(cfg_1.com_network.ip_mask),10);
    97f4:	4b0b      	ldr	r3, [pc, #44]	; (9824 <mask_init+0x34>)
    97f6:	220a      	movs	r2, #10
    97f8:	801a      	strh	r2, [r3, #0]
    97fa:	e006      	b.n	980a <mask_init+0x1a>
    97fc:	4b09      	ldr	r3, [pc, #36]	; (9824 <mask_init+0x34>)
    97fe:	881b      	ldrh	r3, [r3, #0]
    9800:	b29b      	uxth	r3, r3
    9802:	2b00      	cmp	r3, #0
    9804:	d101      	bne.n	980a <mask_init+0x1a>
    9806:	2301      	movs	r3, #1
    9808:	e008      	b.n	981c <mask_init+0x2c>
    980a:	4a07      	ldr	r2, [pc, #28]	; (9828 <mask_init+0x38>)
    980c:	2304      	movs	r3, #4
    980e:	2100      	movs	r1, #0
    9810:	2005      	movs	r0, #5
    9812:	4c06      	ldr	r4, [pc, #24]	; (982c <mask_init+0x3c>)
    9814:	47a0      	blx	r4
    9816:	1e03      	subs	r3, r0, #0
    9818:	d0f0      	beq.n	97fc <mask_init+0xc>
	return SUCCESS;
    981a:	2300      	movs	r3, #0
}
    981c:	0018      	movs	r0, r3
    981e:	46bd      	mov	sp, r7
    9820:	bdb0      	pop	{r4, r5, r7, pc}
    9822:	46c0      	nop			; (mov r8, r8)
    9824:	200031f4 	.word	0x200031f4
    9828:	20003df0 	.word	0x20003df0
    982c:	000079a9 	.word	0x000079a9

00009830 <ip_init>:
BYTE ip_init(void)
{
    9830:	b5b0      	push	{r4, r5, r7, lr}
    9832:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_SRC_IP_ADR_0,COMMON_REGISTER,cfg_1.com_network.ip_addr,sizeof(cfg_1.com_network.ip_addr),10);
    9834:	4b0b      	ldr	r3, [pc, #44]	; (9864 <ip_init+0x34>)
    9836:	220a      	movs	r2, #10
    9838:	801a      	strh	r2, [r3, #0]
    983a:	e006      	b.n	984a <ip_init+0x1a>
    983c:	4b09      	ldr	r3, [pc, #36]	; (9864 <ip_init+0x34>)
    983e:	881b      	ldrh	r3, [r3, #0]
    9840:	b29b      	uxth	r3, r3
    9842:	2b00      	cmp	r3, #0
    9844:	d101      	bne.n	984a <ip_init+0x1a>
    9846:	2301      	movs	r3, #1
    9848:	e008      	b.n	985c <ip_init+0x2c>
    984a:	4a07      	ldr	r2, [pc, #28]	; (9868 <ip_init+0x38>)
    984c:	2304      	movs	r3, #4
    984e:	2100      	movs	r1, #0
    9850:	200f      	movs	r0, #15
    9852:	4c06      	ldr	r4, [pc, #24]	; (986c <ip_init+0x3c>)
    9854:	47a0      	blx	r4
    9856:	1e03      	subs	r3, r0, #0
    9858:	d0f0      	beq.n	983c <ip_init+0xc>
	return SUCCESS;
    985a:	2300      	movs	r3, #0
}
    985c:	0018      	movs	r0, r3
    985e:	46bd      	mov	sp, r7
    9860:	bdb0      	pop	{r4, r5, r7, pc}
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	200031f4 	.word	0x200031f4
    9868:	20003dec 	.word	0x20003dec
    986c:	000079a9 	.word	0x000079a9

00009870 <w5500_process>:

WORD w5500_process (BYTE spi_mode, BYTE sock_numb)
{
    9870:	b590      	push	{r4, r7, lr}
    9872:	b087      	sub	sp, #28
    9874:	af02      	add	r7, sp, #8
    9876:	0002      	movs	r2, r0
    9878:	1dfb      	adds	r3, r7, #7
    987a:	701a      	strb	r2, [r3, #0]
    987c:	1dbb      	adds	r3, r7, #6
    987e:	1c0a      	adds	r2, r1, #0
    9880:	701a      	strb	r2, [r3, #0]
	static BYTE w5500_st=0;
	WORD rtrn=0;
    9882:	230e      	movs	r3, #14
    9884:	18fb      	adds	r3, r7, r3
    9886:	2200      	movs	r2, #0
    9888:	801a      	strh	r2, [r3, #0]
	if(!cmd_spi_wait){w5500_st=0;return 2;} //if 20 mS no answer, break process
    988a:	4b50      	ldr	r3, [pc, #320]	; (99cc <w5500_process+0x15c>)
    988c:	881b      	ldrh	r3, [r3, #0]
    988e:	b29b      	uxth	r3, r3
    9890:	2b00      	cmp	r3, #0
    9892:	d104      	bne.n	989e <w5500_process+0x2e>
    9894:	4b4e      	ldr	r3, [pc, #312]	; (99d0 <w5500_process+0x160>)
    9896:	2200      	movs	r2, #0
    9898:	701a      	strb	r2, [r3, #0]
    989a:	2302      	movs	r3, #2
    989c:	e091      	b.n	99c2 <w5500_process+0x152>
		
	switch (w5500_st)
    989e:	4b4c      	ldr	r3, [pc, #304]	; (99d0 <w5500_process+0x160>)
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	2b05      	cmp	r3, #5
    98a4:	d900      	bls.n	98a8 <w5500_process+0x38>
    98a6:	e085      	b.n	99b4 <w5500_process+0x144>
    98a8:	009a      	lsls	r2, r3, #2
    98aa:	4b4a      	ldr	r3, [pc, #296]	; (99d4 <w5500_process+0x164>)
    98ac:	18d3      	adds	r3, r2, r3
    98ae:	681b      	ldr	r3, [r3, #0]
    98b0:	469f      	mov	pc, r3
	{
		case NULLS:
								w5500_st=spi_mode;
    98b2:	4b47      	ldr	r3, [pc, #284]	; (99d0 <w5500_process+0x160>)
    98b4:	1dfa      	adds	r2, r7, #7
    98b6:	7812      	ldrb	r2, [r2, #0]
    98b8:	701a      	strb	r2, [r3, #0]
								cmd_spi_wait=time_20ms;
    98ba:	4b44      	ldr	r3, [pc, #272]	; (99cc <w5500_process+0x15c>)
    98bc:	4a46      	ldr	r2, [pc, #280]	; (99d8 <w5500_process+0x168>)
    98be:	801a      	strh	r2, [r3, #0]
								return PROC_WAIT;
    98c0:	2300      	movs	r3, #0
    98c2:	e07e      	b.n	99c2 <w5500_process+0x152>
		case SPI_PROCESS:
								if(spi_process(addr_w5500,cb_w5500,ptr_buf,len_buf,cmd)){w5500_st=spi_mode;cmd=0;}
    98c4:	4b45      	ldr	r3, [pc, #276]	; (99dc <w5500_process+0x16c>)
    98c6:	8818      	ldrh	r0, [r3, #0]
    98c8:	4b45      	ldr	r3, [pc, #276]	; (99e0 <w5500_process+0x170>)
    98ca:	881b      	ldrh	r3, [r3, #0]
    98cc:	b2d9      	uxtb	r1, r3
    98ce:	4b45      	ldr	r3, [pc, #276]	; (99e4 <w5500_process+0x174>)
    98d0:	681a      	ldr	r2, [r3, #0]
    98d2:	4b45      	ldr	r3, [pc, #276]	; (99e8 <w5500_process+0x178>)
    98d4:	881c      	ldrh	r4, [r3, #0]
    98d6:	4b45      	ldr	r3, [pc, #276]	; (99ec <w5500_process+0x17c>)
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	9300      	str	r3, [sp, #0]
    98dc:	0023      	movs	r3, r4
    98de:	4c44      	ldr	r4, [pc, #272]	; (99f0 <w5500_process+0x180>)
    98e0:	47a0      	blx	r4
    98e2:	1e03      	subs	r3, r0, #0
    98e4:	d100      	bne.n	98e8 <w5500_process+0x78>
    98e6:	e06a      	b.n	99be <w5500_process+0x14e>
    98e8:	4b39      	ldr	r3, [pc, #228]	; (99d0 <w5500_process+0x160>)
    98ea:	1dfa      	adds	r2, r7, #7
    98ec:	7812      	ldrb	r2, [r2, #0]
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	4b3e      	ldr	r3, [pc, #248]	; (99ec <w5500_process+0x17c>)
    98f2:	2200      	movs	r2, #0
    98f4:	701a      	strb	r2, [r3, #0]
		break;
    98f6:	e062      	b.n	99be <w5500_process+0x14e>
		case MODE_OP_READ_UDP:
								rtrn=w5500_cmd_read_socket_udp(sock_numb);
    98f8:	230e      	movs	r3, #14
    98fa:	18fc      	adds	r4, r7, r3
    98fc:	1dbb      	adds	r3, r7, #6
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	0018      	movs	r0, r3
    9902:	f000 f877 	bl	99f4 <w5500_cmd_read_socket_udp>
    9906:	0003      	movs	r3, r0
    9908:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    990a:	230e      	movs	r3, #14
    990c:	18fb      	adds	r3, r7, r3
    990e:	881b      	ldrh	r3, [r3, #0]
    9910:	2b00      	cmp	r3, #0
    9912:	d009      	beq.n	9928 <w5500_process+0xb8>
    9914:	4b2e      	ldr	r3, [pc, #184]	; (99d0 <w5500_process+0x160>)
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
    991a:	1dfb      	adds	r3, r7, #7
    991c:	2200      	movs	r2, #0
    991e:	701a      	strb	r2, [r3, #0]
    9920:	230e      	movs	r3, #14
    9922:	18fb      	adds	r3, r7, r3
    9924:	881b      	ldrh	r3, [r3, #0]
    9926:	e04c      	b.n	99c2 <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9928:	4b29      	ldr	r3, [pc, #164]	; (99d0 <w5500_process+0x160>)
    992a:	2201      	movs	r2, #1
    992c:	701a      	strb	r2, [r3, #0]
		break;
    992e:	e047      	b.n	99c0 <w5500_process+0x150>
		case MODE_OP_WRITE_UDP:
								if(w5500_write_socket_udp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    9930:	1dbb      	adds	r3, r7, #6
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	0018      	movs	r0, r3
    9936:	f000 f9f1 	bl	9d1c <w5500_write_socket_udp>
    993a:	1e03      	subs	r3, r0, #0
    993c:	d007      	beq.n	994e <w5500_process+0xde>
    993e:	4b24      	ldr	r3, [pc, #144]	; (99d0 <w5500_process+0x160>)
    9940:	2200      	movs	r2, #0
    9942:	701a      	strb	r2, [r3, #0]
    9944:	1dfb      	adds	r3, r7, #7
    9946:	2200      	movs	r2, #0
    9948:	701a      	strb	r2, [r3, #0]
    994a:	2301      	movs	r3, #1
    994c:	e039      	b.n	99c2 <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    994e:	4b20      	ldr	r3, [pc, #128]	; (99d0 <w5500_process+0x160>)
    9950:	2201      	movs	r2, #1
    9952:	701a      	strb	r2, [r3, #0]
		break;
    9954:	e034      	b.n	99c0 <w5500_process+0x150>
		case MODE_OP_READ_TCP:
								rtrn=w5500_cmd_read_socket_tcp(sock_numb);
    9956:	230e      	movs	r3, #14
    9958:	18fc      	adds	r4, r7, r3
    995a:	1dbb      	adds	r3, r7, #6
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	0018      	movs	r0, r3
    9960:	f000 fc2a 	bl	a1b8 <w5500_cmd_read_socket_tcp>
    9964:	0003      	movs	r3, r0
    9966:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    9968:	230e      	movs	r3, #14
    996a:	18fb      	adds	r3, r7, r3
    996c:	881b      	ldrh	r3, [r3, #0]
    996e:	2b00      	cmp	r3, #0
    9970:	d009      	beq.n	9986 <w5500_process+0x116>
    9972:	4b17      	ldr	r3, [pc, #92]	; (99d0 <w5500_process+0x160>)
    9974:	2200      	movs	r2, #0
    9976:	701a      	strb	r2, [r3, #0]
    9978:	1dfb      	adds	r3, r7, #7
    997a:	2200      	movs	r2, #0
    997c:	701a      	strb	r2, [r3, #0]
    997e:	230e      	movs	r3, #14
    9980:	18fb      	adds	r3, r7, r3
    9982:	881b      	ldrh	r3, [r3, #0]
    9984:	e01d      	b.n	99c2 <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9986:	4b12      	ldr	r3, [pc, #72]	; (99d0 <w5500_process+0x160>)
    9988:	2201      	movs	r2, #1
    998a:	701a      	strb	r2, [r3, #0]
		break;
    998c:	e018      	b.n	99c0 <w5500_process+0x150>
		case MODE_OP_WRITE_TCP:
								if(w5500_write_socket_tcp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    998e:	1dbb      	adds	r3, r7, #6
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	0018      	movs	r0, r3
    9994:	f000 feac 	bl	a6f0 <w5500_write_socket_tcp>
    9998:	1e03      	subs	r3, r0, #0
    999a:	d007      	beq.n	99ac <w5500_process+0x13c>
    999c:	4b0c      	ldr	r3, [pc, #48]	; (99d0 <w5500_process+0x160>)
    999e:	2200      	movs	r2, #0
    99a0:	701a      	strb	r2, [r3, #0]
    99a2:	1dfb      	adds	r3, r7, #7
    99a4:	2200      	movs	r2, #0
    99a6:	701a      	strb	r2, [r3, #0]
    99a8:	2301      	movs	r3, #1
    99aa:	e00a      	b.n	99c2 <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    99ac:	4b08      	ldr	r3, [pc, #32]	; (99d0 <w5500_process+0x160>)
    99ae:	2201      	movs	r2, #1
    99b0:	701a      	strb	r2, [r3, #0]
		break;
    99b2:	e005      	b.n	99c0 <w5500_process+0x150>
		default:
								w5500_st=0; return PROC_ER;
    99b4:	4b06      	ldr	r3, [pc, #24]	; (99d0 <w5500_process+0x160>)
    99b6:	2200      	movs	r2, #0
    99b8:	701a      	strb	r2, [r3, #0]
    99ba:	2302      	movs	r3, #2
    99bc:	e001      	b.n	99c2 <w5500_process+0x152>
		break;
    99be:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    99c0:	2300      	movs	r3, #0
}
    99c2:	0018      	movs	r0, r3
    99c4:	46bd      	mov	sp, r7
    99c6:	b005      	add	sp, #20
    99c8:	bd90      	pop	{r4, r7, pc}
    99ca:	46c0      	nop			; (mov r8, r8)
    99cc:	200031f6 	.word	0x200031f6
    99d0:	20000488 	.word	0x20000488
    99d4:	0000cbfc 	.word	0x0000cbfc
    99d8:	00003a98 	.word	0x00003a98
    99dc:	20000480 	.word	0x20000480
    99e0:	20000482 	.word	0x20000482
    99e4:	20003afc 	.word	0x20003afc
    99e8:	20000484 	.word	0x20000484
    99ec:	20003bb7 	.word	0x20003bb7
    99f0:	00007901 	.word	0x00007901

000099f4 <w5500_cmd_read_socket_udp>:

WORD w5500_cmd_read_socket_udp (BYTE sock_numb)
{
    99f4:	b590      	push	{r4, r7, lr}
    99f6:	b085      	sub	sp, #20
    99f8:	af00      	add	r7, sp, #0
    99fa:	0002      	movs	r2, r0
    99fc:	1dfb      	adds	r3, r7, #7
    99fe:	701a      	strb	r2, [r3, #0]
	static BYTE numb_static_r=0;
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	BYTE cnt=0;
    9a00:	230f      	movs	r3, #15
    9a02:	18fb      	adds	r3, r7, r3
    9a04:	2200      	movs	r2, #0
    9a06:	701a      	strb	r2, [r3, #0]
	
	if(numb_static_r!=sock_numb){numb_static_r=sock_numb;st_cmd_w5500=0;}
    9a08:	4bb6      	ldr	r3, [pc, #728]	; (9ce4 <w5500_cmd_read_socket_udp+0x2f0>)
    9a0a:	781b      	ldrb	r3, [r3, #0]
    9a0c:	1dfa      	adds	r2, r7, #7
    9a0e:	7812      	ldrb	r2, [r2, #0]
    9a10:	429a      	cmp	r2, r3
    9a12:	d006      	beq.n	9a22 <w5500_cmd_read_socket_udp+0x2e>
    9a14:	4bb3      	ldr	r3, [pc, #716]	; (9ce4 <w5500_cmd_read_socket_udp+0x2f0>)
    9a16:	1dfa      	adds	r2, r7, #7
    9a18:	7812      	ldrb	r2, [r2, #0]
    9a1a:	701a      	strb	r2, [r3, #0]
    9a1c:	4bb2      	ldr	r3, [pc, #712]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9a1e:	2200      	movs	r2, #0
    9a20:	701a      	strb	r2, [r3, #0]
	
	switch(st_cmd_w5500)
    9a22:	4bb1      	ldr	r3, [pc, #708]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9a24:	781b      	ldrb	r3, [r3, #0]
    9a26:	2b04      	cmp	r3, #4
    9a28:	d900      	bls.n	9a2c <w5500_cmd_read_socket_udp+0x38>
    9a2a:	e151      	b.n	9cd0 <w5500_cmd_read_socket_udp+0x2dc>
    9a2c:	009a      	lsls	r2, r3, #2
    9a2e:	4baf      	ldr	r3, [pc, #700]	; (9cec <w5500_cmd_read_socket_udp+0x2f8>)
    9a30:	18d3      	adds	r3, r2, r3
    9a32:	681b      	ldr	r3, [r3, #0]
    9a34:	469f      	mov	pc, r3
	{
		case UDP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr in w5500 1,2
    9a36:	4bae      	ldr	r3, [pc, #696]	; (9cf0 <w5500_cmd_read_socket_udp+0x2fc>)
    9a38:	2226      	movs	r2, #38	; 0x26
    9a3a:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//cb 3
    9a3c:	1dfb      	adds	r3, r7, #7
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	015b      	lsls	r3, r3, #5
    9a42:	b21b      	sxth	r3, r3
    9a44:	2208      	movs	r2, #8
    9a46:	4313      	orrs	r3, r2
    9a48:	b21b      	sxth	r3, r3
    9a4a:	b29a      	uxth	r2, r3
    9a4c:	4ba9      	ldr	r3, [pc, #676]	; (9cf4 <w5500_cmd_read_socket_udp+0x300>)
    9a4e:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//4 data (point write data aus w5500)
    9a50:	1dfb      	adds	r3, r7, #7
    9a52:	781b      	ldrb	r3, [r3, #0]
    9a54:	015b      	lsls	r3, r3, #5
    9a56:	3328      	adds	r3, #40	; 0x28
    9a58:	001a      	movs	r2, r3
    9a5a:	4ba7      	ldr	r3, [pc, #668]	; (9cf8 <w5500_cmd_read_socket_udp+0x304>)
    9a5c:	18d3      	adds	r3, r2, r3
    9a5e:	1d5a      	adds	r2, r3, #5
    9a60:	4ba6      	ldr	r3, [pc, #664]	; (9cfc <w5500_cmd_read_socket_udp+0x308>)
    9a62:	601a      	str	r2, [r3, #0]
			len_buf=2;//len
    9a64:	4ba6      	ldr	r3, [pc, #664]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9a66:	2202      	movs	r2, #2
    9a68:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    9a6a:	4ba6      	ldr	r3, [pc, #664]	; (9d04 <w5500_cmd_read_socket_udp+0x310>)
    9a6c:	2201      	movs	r2, #1
    9a6e:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = UDP_PART_RD;//"next"
    9a70:	4b9d      	ldr	r3, [pc, #628]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9a72:	2201      	movs	r2, #1
    9a74:	701a      	strb	r2, [r3, #0]
								
			size=0;
    9a76:	4ba4      	ldr	r3, [pc, #656]	; (9d08 <w5500_cmd_read_socket_udp+0x314>)
    9a78:	2200      	movs	r2, #0
    9a7a:	801a      	strh	r2, [r3, #0]
		break;	
    9a7c:	e12d      	b.n	9cda <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_PART_RD:					
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    9a7e:	1dfb      	adds	r3, r7, #7
    9a80:	781b      	ldrb	r3, [r3, #0]
    9a82:	4a9d      	ldr	r2, [pc, #628]	; (9cf8 <w5500_cmd_read_socket_udp+0x304>)
    9a84:	212d      	movs	r1, #45	; 0x2d
    9a86:	015b      	lsls	r3, r3, #5
    9a88:	18d3      	adds	r3, r2, r3
    9a8a:	185b      	adds	r3, r3, r1
    9a8c:	781b      	ldrb	r3, [r3, #0]
    9a8e:	021b      	lsls	r3, r3, #8
    9a90:	b21a      	sxth	r2, r3
    9a92:	1dfb      	adds	r3, r7, #7
    9a94:	781b      	ldrb	r3, [r3, #0]
    9a96:	4998      	ldr	r1, [pc, #608]	; (9cf8 <w5500_cmd_read_socket_udp+0x304>)
    9a98:	202e      	movs	r0, #46	; 0x2e
    9a9a:	015b      	lsls	r3, r3, #5
    9a9c:	18cb      	adds	r3, r1, r3
    9a9e:	181b      	adds	r3, r3, r0
    9aa0:	781b      	ldrb	r3, [r3, #0]
    9aa2:	b21b      	sxth	r3, r3
    9aa4:	4313      	orrs	r3, r2
    9aa6:	b21b      	sxth	r3, r3
    9aa8:	b29a      	uxth	r2, r3
    9aaa:	4b98      	ldr	r3, [pc, #608]	; (9d0c <w5500_cmd_read_socket_udp+0x318>)
    9aac:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return
    9aae:	4b97      	ldr	r3, [pc, #604]	; (9d0c <w5500_cmd_read_socket_udp+0x318>)
    9ab0:	881b      	ldrh	r3, [r3, #0]
    9ab2:	b29b      	uxth	r3, r3
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	d06c      	beq.n	9b92 <w5500_cmd_read_socket_udp+0x19e>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;
    9ab8:	1dfb      	adds	r3, r7, #7
    9aba:	781a      	ldrb	r2, [r3, #0]
    9abc:	4994      	ldr	r1, [pc, #592]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9abe:	23ba      	movs	r3, #186	; 0xba
    9ac0:	00db      	lsls	r3, r3, #3
    9ac2:	4894      	ldr	r0, [pc, #592]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9ac4:	4342      	muls	r2, r0
    9ac6:	188a      	adds	r2, r1, r2
    9ac8:	18d3      	adds	r3, r2, r3
    9aca:	78da      	ldrb	r2, [r3, #3]
    9acc:	791b      	ldrb	r3, [r3, #4]
    9ace:	021b      	lsls	r3, r3, #8
    9ad0:	4313      	orrs	r3, r2
    9ad2:	b29a      	uxth	r2, r3
    9ad4:	4b86      	ldr	r3, [pc, #536]	; (9cf0 <w5500_cmd_read_socket_udp+0x2fc>)
    9ad6:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);
    9ad8:	1dfb      	adds	r3, r7, #7
    9ada:	781b      	ldrb	r3, [r3, #0]
    9adc:	015b      	lsls	r3, r3, #5
    9ade:	b21b      	sxth	r3, r3
    9ae0:	2218      	movs	r2, #24
    9ae2:	4313      	orrs	r3, r2
    9ae4:	b21b      	sxth	r3, r3
    9ae6:	b29a      	uxth	r2, r3
    9ae8:	4b82      	ldr	r3, [pc, #520]	; (9cf4 <w5500_cmd_read_socket_udp+0x300>)
    9aea:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb];
    9aec:	1dfb      	adds	r3, r7, #7
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	4a88      	ldr	r2, [pc, #544]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9af2:	435a      	muls	r2, r3
    9af4:	4b86      	ldr	r3, [pc, #536]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9af6:	18d2      	adds	r2, r2, r3
    9af8:	4b80      	ldr	r3, [pc, #512]	; (9cfc <w5500_cmd_read_socket_udp+0x308>)
    9afa:	601a      	str	r2, [r3, #0]
				len_buf=sizert;
    9afc:	4b83      	ldr	r3, [pc, #524]	; (9d0c <w5500_cmd_read_socket_udp+0x318>)
    9afe:	881b      	ldrh	r3, [r3, #0]
    9b00:	b29a      	uxth	r2, r3
    9b02:	4b7f      	ldr	r3, [pc, #508]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9b04:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    9b06:	1dfb      	adds	r3, r7, #7
    9b08:	7819      	ldrb	r1, [r3, #0]
    9b0a:	1dfb      	adds	r3, r7, #7
    9b0c:	781a      	ldrb	r2, [r3, #0]
    9b0e:	4880      	ldr	r0, [pc, #512]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9b10:	23ba      	movs	r3, #186	; 0xba
    9b12:	00db      	lsls	r3, r3, #3
    9b14:	4c7f      	ldr	r4, [pc, #508]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9b16:	4362      	muls	r2, r4
    9b18:	1882      	adds	r2, r0, r2
    9b1a:	18d3      	adds	r3, r2, r3
    9b1c:	78da      	ldrb	r2, [r3, #3]
    9b1e:	791b      	ldrb	r3, [r3, #4]
    9b20:	021b      	lsls	r3, r3, #8
    9b22:	4313      	orrs	r3, r2
    9b24:	b29a      	uxth	r2, r3
    9b26:	4b76      	ldr	r3, [pc, #472]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9b28:	881b      	ldrh	r3, [r3, #0]
    9b2a:	18d3      	adds	r3, r2, r3
    9b2c:	b29a      	uxth	r2, r3
    9b2e:	4878      	ldr	r0, [pc, #480]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9b30:	23ba      	movs	r3, #186	; 0xba
    9b32:	00db      	lsls	r3, r3, #3
    9b34:	4c77      	ldr	r4, [pc, #476]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9b36:	4361      	muls	r1, r4
    9b38:	1841      	adds	r1, r0, r1
    9b3a:	18cb      	adds	r3, r1, r3
    9b3c:	3303      	adds	r3, #3
    9b3e:	21ff      	movs	r1, #255	; 0xff
    9b40:	4011      	ands	r1, r2
    9b42:	000c      	movs	r4, r1
    9b44:	7819      	ldrb	r1, [r3, #0]
    9b46:	2000      	movs	r0, #0
    9b48:	4001      	ands	r1, r0
    9b4a:	1c08      	adds	r0, r1, #0
    9b4c:	1c21      	adds	r1, r4, #0
    9b4e:	4301      	orrs	r1, r0
    9b50:	7019      	strb	r1, [r3, #0]
    9b52:	0a12      	lsrs	r2, r2, #8
    9b54:	b290      	uxth	r0, r2
    9b56:	785a      	ldrb	r2, [r3, #1]
    9b58:	2100      	movs	r1, #0
    9b5a:	400a      	ands	r2, r1
    9b5c:	1c11      	adds	r1, r2, #0
    9b5e:	1c02      	adds	r2, r0, #0
    9b60:	430a      	orrs	r2, r1
    9b62:	705a      	strb	r2, [r3, #1]
				size=len_buf;
    9b64:	4b66      	ldr	r3, [pc, #408]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9b66:	881a      	ldrh	r2, [r3, #0]
    9b68:	4b67      	ldr	r3, [pc, #412]	; (9d08 <w5500_cmd_read_socket_udp+0x314>)
    9b6a:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_UDP){size=PROC_ER;}							
    9b6c:	4b64      	ldr	r3, [pc, #400]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9b6e:	881a      	ldrh	r2, [r3, #0]
    9b70:	23b9      	movs	r3, #185	; 0xb9
    9b72:	00db      	lsls	r3, r3, #3
    9b74:	429a      	cmp	r2, r3
    9b76:	d902      	bls.n	9b7e <w5500_cmd_read_socket_udp+0x18a>
    9b78:	4b63      	ldr	r3, [pc, #396]	; (9d08 <w5500_cmd_read_socket_udp+0x314>)
    9b7a:	2202      	movs	r2, #2
    9b7c:	801a      	strh	r2, [r3, #0]
				cmd=READ_DATA;
    9b7e:	4b61      	ldr	r3, [pc, #388]	; (9d04 <w5500_cmd_read_socket_udp+0x310>)
    9b80:	2201      	movs	r2, #1
    9b82:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500++;
    9b84:	4b58      	ldr	r3, [pc, #352]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	3301      	adds	r3, #1
    9b8a:	b2da      	uxtb	r2, r3
    9b8c:	4b56      	ldr	r3, [pc, #344]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9b8e:	701a      	strb	r2, [r3, #0]
				break;
    9b90:	e0a3      	b.n	9cda <w5500_cmd_read_socket_udp+0x2e6>
			}
			st_cmd_w5500--;
    9b92:	4b55      	ldr	r3, [pc, #340]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	3b01      	subs	r3, #1
    9b98:	b2da      	uxtb	r2, r3
    9b9a:	4b53      	ldr	r3, [pc, #332]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9b9c:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    9b9e:	2302      	movs	r3, #2
    9ba0:	e09c      	b.n	9cdc <w5500_cmd_read_socket_udp+0x2e8>
		break;
		case UDP_PTR_MOVE:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    9ba2:	230f      	movs	r3, #15
    9ba4:	18fb      	adds	r3, r7, r3
    9ba6:	781a      	ldrb	r2, [r3, #0]
    9ba8:	1dfb      	adds	r3, r7, #7
    9baa:	7819      	ldrb	r1, [r3, #0]
    9bac:	4858      	ldr	r0, [pc, #352]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9bae:	23ba      	movs	r3, #186	; 0xba
    9bb0:	00db      	lsls	r3, r3, #3
    9bb2:	4c58      	ldr	r4, [pc, #352]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9bb4:	4361      	muls	r1, r4
    9bb6:	1841      	adds	r1, r0, r1
    9bb8:	18cb      	adds	r3, r1, r3
    9bba:	78d9      	ldrb	r1, [r3, #3]
    9bbc:	791b      	ldrb	r3, [r3, #4]
    9bbe:	021b      	lsls	r3, r3, #8
    9bc0:	430b      	orrs	r3, r1
    9bc2:	b29b      	uxth	r3, r3
    9bc4:	0a1b      	lsrs	r3, r3, #8
    9bc6:	b29b      	uxth	r3, r3
    9bc8:	b2d9      	uxtb	r1, r3
    9bca:	4b53      	ldr	r3, [pc, #332]	; (9d18 <w5500_cmd_read_socket_udp+0x324>)
    9bcc:	5499      	strb	r1, [r3, r2]
    9bce:	230f      	movs	r3, #15
    9bd0:	18fb      	adds	r3, r7, r3
    9bd2:	781a      	ldrb	r2, [r3, #0]
    9bd4:	230f      	movs	r3, #15
    9bd6:	18fb      	adds	r3, r7, r3
    9bd8:	3201      	adds	r2, #1
    9bda:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    9bdc:	230f      	movs	r3, #15
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	781a      	ldrb	r2, [r3, #0]
    9be2:	1dfb      	adds	r3, r7, #7
    9be4:	7819      	ldrb	r1, [r3, #0]
    9be6:	484a      	ldr	r0, [pc, #296]	; (9d10 <w5500_cmd_read_socket_udp+0x31c>)
    9be8:	23ba      	movs	r3, #186	; 0xba
    9bea:	00db      	lsls	r3, r3, #3
    9bec:	4c49      	ldr	r4, [pc, #292]	; (9d14 <w5500_cmd_read_socket_udp+0x320>)
    9bee:	4361      	muls	r1, r4
    9bf0:	1841      	adds	r1, r0, r1
    9bf2:	18cb      	adds	r3, r1, r3
    9bf4:	78d9      	ldrb	r1, [r3, #3]
    9bf6:	791b      	ldrb	r3, [r3, #4]
    9bf8:	021b      	lsls	r3, r3, #8
    9bfa:	430b      	orrs	r3, r1
    9bfc:	b29b      	uxth	r3, r3
    9bfe:	b2d9      	uxtb	r1, r3
    9c00:	4b45      	ldr	r3, [pc, #276]	; (9d18 <w5500_cmd_read_socket_udp+0x324>)
    9c02:	5499      	strb	r1, [r3, r2]
    9c04:	230f      	movs	r3, #15
    9c06:	18fb      	adds	r3, r7, r3
    9c08:	781a      	ldrb	r2, [r3, #0]
    9c0a:	230f      	movs	r3, #15
    9c0c:	18fb      	adds	r3, r7, r3
    9c0e:	3201      	adds	r2, #1
    9c10:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;//reg RX_RD(28)
    9c12:	4b37      	ldr	r3, [pc, #220]	; (9cf0 <w5500_cmd_read_socket_udp+0x2fc>)
    9c14:	2228      	movs	r2, #40	; 0x28
    9c16:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9c18:	1dfb      	adds	r3, r7, #7
    9c1a:	781b      	ldrb	r3, [r3, #0]
    9c1c:	015b      	lsls	r3, r3, #5
    9c1e:	b21b      	sxth	r3, r3
    9c20:	2208      	movs	r2, #8
    9c22:	4313      	orrs	r3, r2
    9c24:	b21b      	sxth	r3, r3
    9c26:	b29a      	uxth	r2, r3
    9c28:	4b32      	ldr	r3, [pc, #200]	; (9cf4 <w5500_cmd_read_socket_udp+0x300>)
    9c2a:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;/*(записать в него смещение)*/
    9c2c:	4b33      	ldr	r3, [pc, #204]	; (9cfc <w5500_cmd_read_socket_udp+0x308>)
    9c2e:	4a3a      	ldr	r2, [pc, #232]	; (9d18 <w5500_cmd_read_socket_udp+0x324>)
    9c30:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c32:	230f      	movs	r3, #15
    9c34:	18fb      	adds	r3, r7, r3
    9c36:	781b      	ldrb	r3, [r3, #0]
    9c38:	b29a      	uxth	r2, r3
    9c3a:	4b31      	ldr	r3, [pc, #196]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9c3c:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c3e:	4b31      	ldr	r3, [pc, #196]	; (9d04 <w5500_cmd_read_socket_udp+0x310>)
    9c40:	2202      	movs	r2, #2
    9c42:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9c44:	4b28      	ldr	r3, [pc, #160]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	3301      	adds	r3, #1
    9c4a:	b2da      	uxtb	r2, r3
    9c4c:	4b26      	ldr	r3, [pc, #152]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9c4e:	701a      	strb	r2, [r3, #0]
		break;
    9c50:	e043      	b.n	9cda <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_RCV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//перейти в режим приема(возобновить прием)
    9c52:	230f      	movs	r3, #15
    9c54:	18fb      	adds	r3, r7, r3
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	4a2f      	ldr	r2, [pc, #188]	; (9d18 <w5500_cmd_read_socket_udp+0x324>)
    9c5a:	2140      	movs	r1, #64	; 0x40
    9c5c:	54d1      	strb	r1, [r2, r3]
    9c5e:	230f      	movs	r3, #15
    9c60:	18fb      	adds	r3, r7, r3
    9c62:	781a      	ldrb	r2, [r3, #0]
    9c64:	230f      	movs	r3, #15
    9c66:	18fb      	adds	r3, r7, r3
    9c68:	3201      	adds	r2, #1
    9c6a:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    9c6c:	4b20      	ldr	r3, [pc, #128]	; (9cf0 <w5500_cmd_read_socket_udp+0x2fc>)
    9c6e:	2201      	movs	r2, #1
    9c70:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9c72:	1dfb      	adds	r3, r7, #7
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	015b      	lsls	r3, r3, #5
    9c78:	b21b      	sxth	r3, r3
    9c7a:	2208      	movs	r2, #8
    9c7c:	4313      	orrs	r3, r2
    9c7e:	b21b      	sxth	r3, r3
    9c80:	b29a      	uxth	r2, r3
    9c82:	4b1c      	ldr	r3, [pc, #112]	; (9cf4 <w5500_cmd_read_socket_udp+0x300>)
    9c84:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9c86:	4b1d      	ldr	r3, [pc, #116]	; (9cfc <w5500_cmd_read_socket_udp+0x308>)
    9c88:	4a23      	ldr	r2, [pc, #140]	; (9d18 <w5500_cmd_read_socket_udp+0x324>)
    9c8a:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c8c:	230f      	movs	r3, #15
    9c8e:	18fb      	adds	r3, r7, r3
    9c90:	781b      	ldrb	r3, [r3, #0]
    9c92:	b29a      	uxth	r2, r3
    9c94:	4b1a      	ldr	r3, [pc, #104]	; (9d00 <w5500_cmd_read_socket_udp+0x30c>)
    9c96:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c98:	4b1a      	ldr	r3, [pc, #104]	; (9d04 <w5500_cmd_read_socket_udp+0x310>)
    9c9a:	2202      	movs	r2, #2
    9c9c:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    9c9e:	4b12      	ldr	r3, [pc, #72]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	3301      	adds	r3, #1
    9ca4:	b2da      	uxtb	r2, r3
    9ca6:	4b10      	ldr	r3, [pc, #64]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9ca8:	701a      	strb	r2, [r3, #0]
		break;	
    9caa:	e016      	b.n	9cda <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_BK_START:
			st_cmd_w5500=0;//сброс параметров
    9cac:	4b0e      	ldr	r3, [pc, #56]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9cae:	2200      	movs	r2, #0
    9cb0:	701a      	strb	r2, [r3, #0]
			if((size > USART_BUF_SIZE) && (sock_numb))	 {return PROC_ER;}
    9cb2:	4b15      	ldr	r3, [pc, #84]	; (9d08 <w5500_cmd_read_socket_udp+0x314>)
    9cb4:	881a      	ldrh	r2, [r3, #0]
    9cb6:	2380      	movs	r3, #128	; 0x80
    9cb8:	005b      	lsls	r3, r3, #1
    9cba:	429a      	cmp	r2, r3
    9cbc:	d905      	bls.n	9cca <w5500_cmd_read_socket_udp+0x2d6>
    9cbe:	1dfb      	adds	r3, r7, #7
    9cc0:	781b      	ldrb	r3, [r3, #0]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d001      	beq.n	9cca <w5500_cmd_read_socket_udp+0x2d6>
    9cc6:	2302      	movs	r3, #2
    9cc8:	e008      	b.n	9cdc <w5500_cmd_read_socket_udp+0x2e8>
			return (size);
    9cca:	4b0f      	ldr	r3, [pc, #60]	; (9d08 <w5500_cmd_read_socket_udp+0x314>)
    9ccc:	881b      	ldrh	r3, [r3, #0]
    9cce:	e005      	b.n	9cdc <w5500_cmd_read_socket_udp+0x2e8>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    9cd0:	4b05      	ldr	r3, [pc, #20]	; (9ce8 <w5500_cmd_read_socket_udp+0x2f4>)
    9cd2:	2200      	movs	r2, #0
    9cd4:	701a      	strb	r2, [r3, #0]
    9cd6:	2302      	movs	r3, #2
    9cd8:	e000      	b.n	9cdc <w5500_cmd_read_socket_udp+0x2e8>
		break;
	}
	return PROC_WAIT;
    9cda:	2300      	movs	r3, #0
}
    9cdc:	0018      	movs	r0, r3
    9cde:	46bd      	mov	sp, r7
    9ce0:	b005      	add	sp, #20
    9ce2:	bd90      	pop	{r4, r7, pc}
    9ce4:	20000489 	.word	0x20000489
    9ce8:	2000048a 	.word	0x2000048a
    9cec:	0000cc14 	.word	0x0000cc14
    9cf0:	20000480 	.word	0x20000480
    9cf4:	20000482 	.word	0x20000482
    9cf8:	20003b04 	.word	0x20003b04
    9cfc:	20003afc 	.word	0x20003afc
    9d00:	20000484 	.word	0x20000484
    9d04:	20003bb7 	.word	0x20003bb7
    9d08:	2000048c 	.word	0x2000048c
    9d0c:	20000486 	.word	0x20000486
    9d10:	200005cc 	.word	0x200005cc
    9d14:	000005e5 	.word	0x000005e5
    9d18:	20003bb8 	.word	0x20003bb8

00009d1c <w5500_write_socket_udp>:

WORD w5500_write_socket_udp (BYTE sock_numb)
{
    9d1c:	b590      	push	{r4, r7, lr}
    9d1e:	b085      	sub	sp, #20
    9d20:	af00      	add	r7, sp, #0
    9d22:	0002      	movs	r2, r0
    9d24:	1dfb      	adds	r3, r7, #7
    9d26:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500 = 0;
	static BYTE numb_static = 0;
	WORD cnt = 0;
    9d28:	230e      	movs	r3, #14
    9d2a:	18fb      	adds	r3, r7, r3
    9d2c:	2200      	movs	r2, #0
    9d2e:	801a      	strh	r2, [r3, #0]
	
	if(numb_static != sock_numb) {numb_static = sock_numb; st_wr_w5500 = 0;}
    9d30:	4bd9      	ldr	r3, [pc, #868]	; (a098 <w5500_write_socket_udp+0x37c>)
    9d32:	781b      	ldrb	r3, [r3, #0]
    9d34:	1dfa      	adds	r2, r7, #7
    9d36:	7812      	ldrb	r2, [r2, #0]
    9d38:	429a      	cmp	r2, r3
    9d3a:	d006      	beq.n	9d4a <w5500_write_socket_udp+0x2e>
    9d3c:	4bd6      	ldr	r3, [pc, #856]	; (a098 <w5500_write_socket_udp+0x37c>)
    9d3e:	1dfa      	adds	r2, r7, #7
    9d40:	7812      	ldrb	r2, [r2, #0]
    9d42:	701a      	strb	r2, [r3, #0]
    9d44:	4bd5      	ldr	r3, [pc, #852]	; (a09c <w5500_write_socket_udp+0x380>)
    9d46:	2200      	movs	r2, #0
    9d48:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    9d4a:	4bd4      	ldr	r3, [pc, #848]	; (a09c <w5500_write_socket_udp+0x380>)
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	2b08      	cmp	r3, #8
    9d50:	d900      	bls.n	9d54 <w5500_write_socket_udp+0x38>
    9d52:	e212      	b.n	a17a <w5500_write_socket_udp+0x45e>
    9d54:	009a      	lsls	r2, r3, #2
    9d56:	4bd2      	ldr	r3, [pc, #840]	; (a0a0 <w5500_write_socket_udp+0x384>)
    9d58:	18d3      	adds	r3, r2, r3
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	469f      	mov	pc, r3
	{
		case UDP_RD_TX_STAT:																	//read reg tx status
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;						
    9d5e:	4bd1      	ldr	r3, [pc, #836]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9d60:	2220      	movs	r2, #32
    9d62:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d64:	1dfb      	adds	r3, r7, #7
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	015b      	lsls	r3, r3, #5
    9d6a:	b21b      	sxth	r3, r3
    9d6c:	2208      	movs	r2, #8
    9d6e:	4313      	orrs	r3, r2
    9d70:	b21b      	sxth	r3, r3
    9d72:	b29a      	uxth	r2, r3
    9d74:	4bcc      	ldr	r3, [pc, #816]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9d76:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    9d78:	1dfb      	adds	r3, r7, #7
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	3301      	adds	r3, #1
    9d7e:	015a      	lsls	r2, r3, #5
    9d80:	4bca      	ldr	r3, [pc, #808]	; (a0ac <w5500_write_socket_udp+0x390>)
    9d82:	18d3      	adds	r3, r2, r3
    9d84:	1dda      	adds	r2, r3, #7
    9d86:	4bca      	ldr	r3, [pc, #808]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9d88:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9d8a:	4bca      	ldr	r3, [pc, #808]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9d8c:	2206      	movs	r2, #6
    9d8e:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9d90:	4bc9      	ldr	r3, [pc, #804]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    9d92:	2201      	movs	r2, #1
    9d94:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d96:	4bc1      	ldr	r3, [pc, #772]	; (a09c <w5500_write_socket_udp+0x380>)
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	3301      	adds	r3, #1
    9d9c:	b2da      	uxtb	r2, r3
    9d9e:	4bbf      	ldr	r3, [pc, #764]	; (a09c <w5500_write_socket_udp+0x380>)
    9da0:	701a      	strb	r2, [r3, #0]
		break;
    9da2:	e1f0      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_WR_IP:																	//write ip
			addr_w5500=ADDR_SOC_D_IP_ADDR0;
    9da4:	4bbf      	ldr	r3, [pc, #764]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9da6:	220c      	movs	r2, #12
    9da8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9daa:	1dfb      	adds	r3, r7, #7
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	015b      	lsls	r3, r3, #5
    9db0:	b21b      	sxth	r3, r3
    9db2:	2208      	movs	r2, #8
    9db4:	4313      	orrs	r3, r2
    9db6:	b21b      	sxth	r3, r3
    9db8:	b29a      	uxth	r2, r3
    9dba:	4bbb      	ldr	r3, [pc, #748]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9dbc:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].ip_addr;
    9dbe:	1dfb      	adds	r3, r7, #7
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	4abe      	ldr	r2, [pc, #760]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9dc4:	435a      	muls	r2, r3
    9dc6:	4bbe      	ldr	r3, [pc, #760]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9dc8:	18d2      	adds	r2, r2, r3
    9dca:	4bb9      	ldr	r3, [pc, #740]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9dcc:	601a      	str	r2, [r3, #0]
			len_buf=4;
    9dce:	4bb9      	ldr	r3, [pc, #740]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9dd0:	2204      	movs	r2, #4
    9dd2:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9dd4:	4bb8      	ldr	r3, [pc, #736]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    9dd6:	2202      	movs	r2, #2
    9dd8:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9dda:	4bb0      	ldr	r3, [pc, #704]	; (a09c <w5500_write_socket_udp+0x380>)
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	3301      	adds	r3, #1
    9de0:	b2da      	uxtb	r2, r3
    9de2:	4bae      	ldr	r3, [pc, #696]	; (a09c <w5500_write_socket_udp+0x380>)
    9de4:	701a      	strb	r2, [r3, #0]
		break;
    9de6:	e1ce      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_WR_PORT:																	//write port
			addr_w5500=ADDR_SOC_D_PORT0;
    9de8:	4bae      	ldr	r3, [pc, #696]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9dea:	2210      	movs	r2, #16
    9dec:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9dee:	1dfb      	adds	r3, r7, #7
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	015b      	lsls	r3, r3, #5
    9df4:	b21b      	sxth	r3, r3
    9df6:	2208      	movs	r2, #8
    9df8:	4313      	orrs	r3, r2
    9dfa:	b21b      	sxth	r3, r3
    9dfc:	b29a      	uxth	r2, r3
    9dfe:	4baa      	ldr	r3, [pc, #680]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9e00:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].port;
    9e02:	1dfb      	adds	r3, r7, #7
    9e04:	781b      	ldrb	r3, [r3, #0]
    9e06:	4aad      	ldr	r2, [pc, #692]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9e08:	435a      	muls	r2, r3
    9e0a:	4bad      	ldr	r3, [pc, #692]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9e0c:	18d3      	adds	r3, r2, r3
    9e0e:	1d1a      	adds	r2, r3, #4
    9e10:	4ba7      	ldr	r3, [pc, #668]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9e12:	601a      	str	r2, [r3, #0]
			len_buf=2;
    9e14:	4ba7      	ldr	r3, [pc, #668]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9e16:	2202      	movs	r2, #2
    9e18:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9e1a:	4ba7      	ldr	r3, [pc, #668]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    9e1c:	2202      	movs	r2, #2
    9e1e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9e20:	4b9e      	ldr	r3, [pc, #632]	; (a09c <w5500_write_socket_udp+0x380>)
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	3301      	adds	r3, #1
    9e26:	b2da      	uxtb	r2, r3
    9e28:	4b9c      	ldr	r3, [pc, #624]	; (a09c <w5500_write_socket_udp+0x380>)
    9e2a:	701a      	strb	r2, [r3, #0]
		break;
    9e2c:	e1ab      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_WR_DATA:																	//write data
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    9e2e:	1dfb      	adds	r3, r7, #7
    9e30:	781a      	ldrb	r2, [r3, #0]
    9e32:	49a3      	ldr	r1, [pc, #652]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9e34:	23ba      	movs	r3, #186	; 0xba
    9e36:	00db      	lsls	r3, r3, #3
    9e38:	48a0      	ldr	r0, [pc, #640]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9e3a:	4342      	muls	r2, r0
    9e3c:	188a      	adds	r2, r1, r2
    9e3e:	18d3      	adds	r3, r2, r3
    9e40:	795a      	ldrb	r2, [r3, #5]
    9e42:	799b      	ldrb	r3, [r3, #6]
    9e44:	021b      	lsls	r3, r3, #8
    9e46:	4313      	orrs	r3, r2
    9e48:	b29a      	uxth	r2, r3
    9e4a:	4b96      	ldr	r3, [pc, #600]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9e4c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    9e4e:	1dfb      	adds	r3, r7, #7
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	015b      	lsls	r3, r3, #5
    9e54:	b21b      	sxth	r3, r3
    9e56:	2210      	movs	r2, #16
    9e58:	4313      	orrs	r3, r2
    9e5a:	b21b      	sxth	r3, r3
    9e5c:	b29a      	uxth	r2, r3
    9e5e:	4b92      	ldr	r3, [pc, #584]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9e60:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    9e62:	1dfb      	adds	r3, r7, #7
    9e64:	781b      	ldrb	r3, [r3, #0]
    9e66:	4a95      	ldr	r2, [pc, #596]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9e68:	4353      	muls	r3, r2
    9e6a:	3308      	adds	r3, #8
    9e6c:	001a      	movs	r2, r3
    9e6e:	4b94      	ldr	r3, [pc, #592]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9e70:	18d2      	adds	r2, r2, r3
    9e72:	4b8f      	ldr	r3, [pc, #572]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9e74:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    9e76:	1dfb      	adds	r3, r7, #7
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	4a91      	ldr	r2, [pc, #580]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9e7c:	498f      	ldr	r1, [pc, #572]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9e7e:	434b      	muls	r3, r1
    9e80:	18d3      	adds	r3, r2, r3
    9e82:	3306      	adds	r3, #6
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	021b      	lsls	r3, r3, #8
    9e88:	b21a      	sxth	r2, r3
    9e8a:	1dfb      	adds	r3, r7, #7
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	498c      	ldr	r1, [pc, #560]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9e90:	488a      	ldr	r0, [pc, #552]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9e92:	4343      	muls	r3, r0
    9e94:	18cb      	adds	r3, r1, r3
    9e96:	3307      	adds	r3, #7
    9e98:	781b      	ldrb	r3, [r3, #0]
    9e9a:	b21b      	sxth	r3, r3
    9e9c:	4313      	orrs	r3, r2
    9e9e:	b21b      	sxth	r3, r3
    9ea0:	b29a      	uxth	r2, r3
    9ea2:	4b84      	ldr	r3, [pc, #528]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9ea4:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    9ea6:	1dfb      	adds	r3, r7, #7
    9ea8:	7819      	ldrb	r1, [r3, #0]
    9eaa:	1dfb      	adds	r3, r7, #7
    9eac:	781a      	ldrb	r2, [r3, #0]
    9eae:	4884      	ldr	r0, [pc, #528]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9eb0:	23ba      	movs	r3, #186	; 0xba
    9eb2:	00db      	lsls	r3, r3, #3
    9eb4:	4c81      	ldr	r4, [pc, #516]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9eb6:	4362      	muls	r2, r4
    9eb8:	1882      	adds	r2, r0, r2
    9eba:	18d3      	adds	r3, r2, r3
    9ebc:	795a      	ldrb	r2, [r3, #5]
    9ebe:	799b      	ldrb	r3, [r3, #6]
    9ec0:	021b      	lsls	r3, r3, #8
    9ec2:	4313      	orrs	r3, r2
    9ec4:	b29a      	uxth	r2, r3
    9ec6:	4b7b      	ldr	r3, [pc, #492]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9ec8:	881b      	ldrh	r3, [r3, #0]
    9eca:	18d3      	adds	r3, r2, r3
    9ecc:	b29a      	uxth	r2, r3
    9ece:	487c      	ldr	r0, [pc, #496]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9ed0:	23ba      	movs	r3, #186	; 0xba
    9ed2:	00db      	lsls	r3, r3, #3
    9ed4:	4c79      	ldr	r4, [pc, #484]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9ed6:	4361      	muls	r1, r4
    9ed8:	1841      	adds	r1, r0, r1
    9eda:	18cb      	adds	r3, r1, r3
    9edc:	3305      	adds	r3, #5
    9ede:	21ff      	movs	r1, #255	; 0xff
    9ee0:	4011      	ands	r1, r2
    9ee2:	000c      	movs	r4, r1
    9ee4:	7819      	ldrb	r1, [r3, #0]
    9ee6:	2000      	movs	r0, #0
    9ee8:	4001      	ands	r1, r0
    9eea:	1c08      	adds	r0, r1, #0
    9eec:	1c21      	adds	r1, r4, #0
    9eee:	4301      	orrs	r1, r0
    9ef0:	7019      	strb	r1, [r3, #0]
    9ef2:	0a12      	lsrs	r2, r2, #8
    9ef4:	b290      	uxth	r0, r2
    9ef6:	785a      	ldrb	r2, [r3, #1]
    9ef8:	2100      	movs	r1, #0
    9efa:	400a      	ands	r2, r1
    9efc:	1c11      	adds	r1, r2, #0
    9efe:	1c02      	adds	r2, r0, #0
    9f00:	430a      	orrs	r2, r1
    9f02:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    9f04:	4b6c      	ldr	r3, [pc, #432]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    9f06:	2202      	movs	r2, #2
    9f08:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9f0a:	4b64      	ldr	r3, [pc, #400]	; (a09c <w5500_write_socket_udp+0x380>)
    9f0c:	781b      	ldrb	r3, [r3, #0]
    9f0e:	3301      	adds	r3, #1
    9f10:	b2da      	uxtb	r2, r3
    9f12:	4b62      	ldr	r3, [pc, #392]	; (a09c <w5500_write_socket_udp+0x380>)
    9f14:	701a      	strb	r2, [r3, #0]
		break;
    9f16:	e136      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_WR_PTR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    9f18:	230e      	movs	r3, #14
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	881a      	ldrh	r2, [r3, #0]
    9f1e:	1dfb      	adds	r3, r7, #7
    9f20:	7819      	ldrb	r1, [r3, #0]
    9f22:	4867      	ldr	r0, [pc, #412]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9f24:	23ba      	movs	r3, #186	; 0xba
    9f26:	00db      	lsls	r3, r3, #3
    9f28:	4c64      	ldr	r4, [pc, #400]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9f2a:	4361      	muls	r1, r4
    9f2c:	1841      	adds	r1, r0, r1
    9f2e:	18cb      	adds	r3, r1, r3
    9f30:	7959      	ldrb	r1, [r3, #5]
    9f32:	799b      	ldrb	r3, [r3, #6]
    9f34:	021b      	lsls	r3, r3, #8
    9f36:	430b      	orrs	r3, r1
    9f38:	b29b      	uxth	r3, r3
    9f3a:	0a1b      	lsrs	r3, r3, #8
    9f3c:	b29b      	uxth	r3, r3
    9f3e:	b2d9      	uxtb	r1, r3
    9f40:	4b60      	ldr	r3, [pc, #384]	; (a0c4 <w5500_write_socket_udp+0x3a8>)
    9f42:	5499      	strb	r1, [r3, r2]
    9f44:	230e      	movs	r3, #14
    9f46:	18fb      	adds	r3, r7, r3
    9f48:	881a      	ldrh	r2, [r3, #0]
    9f4a:	230e      	movs	r3, #14
    9f4c:	18fb      	adds	r3, r7, r3
    9f4e:	3201      	adds	r2, #1
    9f50:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    9f52:	230e      	movs	r3, #14
    9f54:	18fb      	adds	r3, r7, r3
    9f56:	881a      	ldrh	r2, [r3, #0]
    9f58:	1dfb      	adds	r3, r7, #7
    9f5a:	7819      	ldrb	r1, [r3, #0]
    9f5c:	4858      	ldr	r0, [pc, #352]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    9f5e:	23ba      	movs	r3, #186	; 0xba
    9f60:	00db      	lsls	r3, r3, #3
    9f62:	4c56      	ldr	r4, [pc, #344]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    9f64:	4361      	muls	r1, r4
    9f66:	1841      	adds	r1, r0, r1
    9f68:	18cb      	adds	r3, r1, r3
    9f6a:	7959      	ldrb	r1, [r3, #5]
    9f6c:	799b      	ldrb	r3, [r3, #6]
    9f6e:	021b      	lsls	r3, r3, #8
    9f70:	430b      	orrs	r3, r1
    9f72:	b29b      	uxth	r3, r3
    9f74:	b2d9      	uxtb	r1, r3
    9f76:	4b53      	ldr	r3, [pc, #332]	; (a0c4 <w5500_write_socket_udp+0x3a8>)
    9f78:	5499      	strb	r1, [r3, r2]
    9f7a:	230e      	movs	r3, #14
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	881a      	ldrh	r2, [r3, #0]
    9f80:	230e      	movs	r3, #14
    9f82:	18fb      	adds	r3, r7, r3
    9f84:	3201      	adds	r2, #1
    9f86:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    9f88:	4b46      	ldr	r3, [pc, #280]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9f8a:	2224      	movs	r2, #36	; 0x24
    9f8c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9f8e:	1dfb      	adds	r3, r7, #7
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	015b      	lsls	r3, r3, #5
    9f94:	b21b      	sxth	r3, r3
    9f96:	2208      	movs	r2, #8
    9f98:	4313      	orrs	r3, r2
    9f9a:	b21b      	sxth	r3, r3
    9f9c:	b29a      	uxth	r2, r3
    9f9e:	4b42      	ldr	r3, [pc, #264]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9fa0:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9fa2:	4b43      	ldr	r3, [pc, #268]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9fa4:	4a47      	ldr	r2, [pc, #284]	; (a0c4 <w5500_write_socket_udp+0x3a8>)
    9fa6:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9fa8:	4b42      	ldr	r3, [pc, #264]	; (a0b4 <w5500_write_socket_udp+0x398>)
    9faa:	220e      	movs	r2, #14
    9fac:	18ba      	adds	r2, r7, r2
    9fae:	8812      	ldrh	r2, [r2, #0]
    9fb0:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9fb2:	4b41      	ldr	r3, [pc, #260]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    9fb4:	2202      	movs	r2, #2
    9fb6:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9fb8:	4b38      	ldr	r3, [pc, #224]	; (a09c <w5500_write_socket_udp+0x380>)
    9fba:	781b      	ldrb	r3, [r3, #0]
    9fbc:	3301      	adds	r3, #1
    9fbe:	b2da      	uxtb	r2, r3
    9fc0:	4b36      	ldr	r3, [pc, #216]	; (a09c <w5500_write_socket_udp+0x380>)
    9fc2:	701a      	strb	r2, [r3, #0]
		break;
    9fc4:	e0df      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    9fc6:	230e      	movs	r3, #14
    9fc8:	18fb      	adds	r3, r7, r3
    9fca:	881b      	ldrh	r3, [r3, #0]
    9fcc:	4a3d      	ldr	r2, [pc, #244]	; (a0c4 <w5500_write_socket_udp+0x3a8>)
    9fce:	2120      	movs	r1, #32
    9fd0:	54d1      	strb	r1, [r2, r3]
    9fd2:	230e      	movs	r3, #14
    9fd4:	18fb      	adds	r3, r7, r3
    9fd6:	881a      	ldrh	r2, [r3, #0]
    9fd8:	230e      	movs	r3, #14
    9fda:	18fb      	adds	r3, r7, r3
    9fdc:	3201      	adds	r2, #1
    9fde:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_COMMAND;
    9fe0:	4b30      	ldr	r3, [pc, #192]	; (a0a4 <w5500_write_socket_udp+0x388>)
    9fe2:	2201      	movs	r2, #1
    9fe4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9fe6:	1dfb      	adds	r3, r7, #7
    9fe8:	781b      	ldrb	r3, [r3, #0]
    9fea:	015b      	lsls	r3, r3, #5
    9fec:	b21b      	sxth	r3, r3
    9fee:	2208      	movs	r2, #8
    9ff0:	4313      	orrs	r3, r2
    9ff2:	b21b      	sxth	r3, r3
    9ff4:	b29a      	uxth	r2, r3
    9ff6:	4b2c      	ldr	r3, [pc, #176]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    9ff8:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9ffa:	4b2d      	ldr	r3, [pc, #180]	; (a0b0 <w5500_write_socket_udp+0x394>)
    9ffc:	4a31      	ldr	r2, [pc, #196]	; (a0c4 <w5500_write_socket_udp+0x3a8>)
    9ffe:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a000:	4b2c      	ldr	r3, [pc, #176]	; (a0b4 <w5500_write_socket_udp+0x398>)
    a002:	220e      	movs	r2, #14
    a004:	18ba      	adds	r2, r7, r2
    a006:	8812      	ldrh	r2, [r2, #0]
    a008:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a00a:	4b2b      	ldr	r3, [pc, #172]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    a00c:	2202      	movs	r2, #2
    a00e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a010:	4b22      	ldr	r3, [pc, #136]	; (a09c <w5500_write_socket_udp+0x380>)
    a012:	781b      	ldrb	r3, [r3, #0]
    a014:	3301      	adds	r3, #1
    a016:	b2da      	uxtb	r2, r3
    a018:	4b20      	ldr	r3, [pc, #128]	; (a09c <w5500_write_socket_udp+0x380>)
    a01a:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a01c:	1dfb      	adds	r3, r7, #7
    a01e:	781a      	ldrb	r2, [r3, #0]
    a020:	4927      	ldr	r1, [pc, #156]	; (a0c0 <w5500_write_socket_udp+0x3a4>)
    a022:	23bc      	movs	r3, #188	; 0xbc
    a024:	00db      	lsls	r3, r3, #3
    a026:	4825      	ldr	r0, [pc, #148]	; (a0bc <w5500_write_socket_udp+0x3a0>)
    a028:	4342      	muls	r2, r0
    a02a:	188a      	adds	r2, r1, r2
    a02c:	18d3      	adds	r3, r2, r3
    a02e:	3303      	adds	r3, #3
    a030:	781a      	ldrb	r2, [r3, #0]
    a032:	2100      	movs	r1, #0
    a034:	400a      	ands	r2, r1
    a036:	1c11      	adds	r1, r2, #0
    a038:	224c      	movs	r2, #76	; 0x4c
    a03a:	430a      	orrs	r2, r1
    a03c:	701a      	strb	r2, [r3, #0]
    a03e:	785a      	ldrb	r2, [r3, #1]
    a040:	2100      	movs	r1, #0
    a042:	400a      	ands	r2, r1
    a044:	1c11      	adds	r1, r2, #0
    a046:	221d      	movs	r2, #29
    a048:	430a      	orrs	r2, r1
    a04a:	705a      	strb	r2, [r3, #1]
		break;
    a04c:	e09b      	b.n	a186 <w5500_write_socket_udp+0x46a>
		case UDP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    a04e:	4b15      	ldr	r3, [pc, #84]	; (a0a4 <w5500_write_socket_udp+0x388>)
    a050:	2202      	movs	r2, #2
    a052:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a054:	1dfb      	adds	r3, r7, #7
    a056:	781b      	ldrb	r3, [r3, #0]
    a058:	015b      	lsls	r3, r3, #5
    a05a:	b21b      	sxth	r3, r3
    a05c:	2208      	movs	r2, #8
    a05e:	4313      	orrs	r3, r2
    a060:	b21b      	sxth	r3, r3
    a062:	b29a      	uxth	r2, r3
    a064:	4b10      	ldr	r3, [pc, #64]	; (a0a8 <w5500_write_socket_udp+0x38c>)
    a066:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a068:	1dfb      	adds	r3, r7, #7
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	015b      	lsls	r3, r3, #5
    a06e:	3310      	adds	r3, #16
    a070:	001a      	movs	r2, r3
    a072:	4b0e      	ldr	r3, [pc, #56]	; (a0ac <w5500_write_socket_udp+0x390>)
    a074:	18d3      	adds	r3, r2, r3
    a076:	1d5a      	adds	r2, r3, #5
    a078:	4b0d      	ldr	r3, [pc, #52]	; (a0b0 <w5500_write_socket_udp+0x394>)
    a07a:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a07c:	4b0d      	ldr	r3, [pc, #52]	; (a0b4 <w5500_write_socket_udp+0x398>)
    a07e:	2201      	movs	r2, #1
    a080:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a082:	4b0d      	ldr	r3, [pc, #52]	; (a0b8 <w5500_write_socket_udp+0x39c>)
    a084:	2201      	movs	r2, #1
    a086:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a088:	4b04      	ldr	r3, [pc, #16]	; (a09c <w5500_write_socket_udp+0x380>)
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	3301      	adds	r3, #1
    a08e:	b2da      	uxtb	r2, r3
    a090:	4b02      	ldr	r3, [pc, #8]	; (a09c <w5500_write_socket_udp+0x380>)
    a092:	701a      	strb	r2, [r3, #0]
		break;
    a094:	e077      	b.n	a186 <w5500_write_socket_udp+0x46a>
    a096:	46c0      	nop			; (mov r8, r8)
    a098:	2000048e 	.word	0x2000048e
    a09c:	2000048f 	.word	0x2000048f
    a0a0:	0000cc28 	.word	0x0000cc28
    a0a4:	20000480 	.word	0x20000480
    a0a8:	20000482 	.word	0x20000482
    a0ac:	20003b04 	.word	0x20003b04
    a0b0:	20003afc 	.word	0x20003afc
    a0b4:	20000484 	.word	0x20000484
    a0b8:	20003bb7 	.word	0x20003bb7
    a0bc:	000005e5 	.word	0x000005e5
    a0c0:	200005cc 	.word	0x200005cc
    a0c4:	20003bb8 	.word	0x20003bb8
		case UDP_STATUS_CLR:															//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a0c8:	1dfb      	adds	r3, r7, #7
    a0ca:	781b      	ldrb	r3, [r3, #0]
    a0cc:	4a30      	ldr	r2, [pc, #192]	; (a190 <w5500_write_socket_udp+0x474>)
    a0ce:	2110      	movs	r1, #16
    a0d0:	015b      	lsls	r3, r3, #5
    a0d2:	18d3      	adds	r3, r2, r3
    a0d4:	185b      	adds	r3, r3, r1
    a0d6:	795b      	ldrb	r3, [r3, #5]
    a0d8:	06db      	lsls	r3, r3, #27
    a0da:	0fdb      	lsrs	r3, r3, #31
    a0dc:	b2db      	uxtb	r3, r3
    a0de:	2b01      	cmp	r3, #1
    a0e0:	d12b      	bne.n	a13a <w5500_write_socket_udp+0x41e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    a0e2:	230e      	movs	r3, #14
    a0e4:	18fb      	adds	r3, r7, r3
    a0e6:	881b      	ldrh	r3, [r3, #0]
    a0e8:	4a2a      	ldr	r2, [pc, #168]	; (a194 <w5500_write_socket_udp+0x478>)
    a0ea:	2110      	movs	r1, #16
    a0ec:	54d1      	strb	r1, [r2, r3]
    a0ee:	230e      	movs	r3, #14
    a0f0:	18fb      	adds	r3, r7, r3
    a0f2:	881a      	ldrh	r2, [r3, #0]
    a0f4:	230e      	movs	r3, #14
    a0f6:	18fb      	adds	r3, r7, r3
    a0f8:	3201      	adds	r2, #1
    a0fa:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    a0fc:	4b26      	ldr	r3, [pc, #152]	; (a198 <w5500_write_socket_udp+0x47c>)
    a0fe:	2202      	movs	r2, #2
    a100:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a102:	1dfb      	adds	r3, r7, #7
    a104:	781b      	ldrb	r3, [r3, #0]
    a106:	015b      	lsls	r3, r3, #5
    a108:	b21b      	sxth	r3, r3
    a10a:	2208      	movs	r2, #8
    a10c:	4313      	orrs	r3, r2
    a10e:	b21b      	sxth	r3, r3
    a110:	b29a      	uxth	r2, r3
    a112:	4b22      	ldr	r3, [pc, #136]	; (a19c <w5500_write_socket_udp+0x480>)
    a114:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    a116:	4b22      	ldr	r3, [pc, #136]	; (a1a0 <w5500_write_socket_udp+0x484>)
    a118:	4a1e      	ldr	r2, [pc, #120]	; (a194 <w5500_write_socket_udp+0x478>)
    a11a:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    a11c:	4b21      	ldr	r3, [pc, #132]	; (a1a4 <w5500_write_socket_udp+0x488>)
    a11e:	220e      	movs	r2, #14
    a120:	18ba      	adds	r2, r7, r2
    a122:	8812      	ldrh	r2, [r2, #0]
    a124:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    a126:	4b20      	ldr	r3, [pc, #128]	; (a1a8 <w5500_write_socket_udp+0x48c>)
    a128:	2202      	movs	r2, #2
    a12a:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    a12c:	4b1f      	ldr	r3, [pc, #124]	; (a1ac <w5500_write_socket_udp+0x490>)
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	3301      	adds	r3, #1
    a132:	b2da      	uxtb	r2, r3
    a134:	4b1d      	ldr	r3, [pc, #116]	; (a1ac <w5500_write_socket_udp+0x490>)
    a136:	701a      	strb	r2, [r3, #0]
				break;
    a138:	e025      	b.n	a186 <w5500_write_socket_udp+0x46a>
			}
			st_wr_w5500--;
    a13a:	4b1c      	ldr	r3, [pc, #112]	; (a1ac <w5500_write_socket_udp+0x490>)
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	3b01      	subs	r3, #1
    a140:	b2da      	uxtb	r2, r3
    a142:	4b1a      	ldr	r3, [pc, #104]	; (a1ac <w5500_write_socket_udp+0x490>)
    a144:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    a146:	1dfb      	adds	r3, r7, #7
    a148:	781a      	ldrb	r2, [r3, #0]
    a14a:	4919      	ldr	r1, [pc, #100]	; (a1b0 <w5500_write_socket_udp+0x494>)
    a14c:	23bc      	movs	r3, #188	; 0xbc
    a14e:	00db      	lsls	r3, r3, #3
    a150:	4818      	ldr	r0, [pc, #96]	; (a1b4 <w5500_write_socket_udp+0x498>)
    a152:	4342      	muls	r2, r0
    a154:	188a      	adds	r2, r1, r2
    a156:	18d3      	adds	r3, r2, r3
    a158:	78da      	ldrb	r2, [r3, #3]
    a15a:	791b      	ldrb	r3, [r3, #4]
    a15c:	021b      	lsls	r3, r3, #8
    a15e:	4313      	orrs	r3, r2
    a160:	b29b      	uxth	r3, r3
    a162:	2b00      	cmp	r3, #0
    a164:	d10e      	bne.n	a184 <w5500_write_socket_udp+0x468>
			{
				st_wr_w5500=0; 
    a166:	4b11      	ldr	r3, [pc, #68]	; (a1ac <w5500_write_socket_udp+0x490>)
    a168:	2200      	movs	r2, #0
    a16a:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a16c:	2302      	movs	r3, #2
    a16e:	e00b      	b.n	a188 <w5500_write_socket_udp+0x46c>
			}
		break;
		case 8:
				st_wr_w5500=0;
    a170:	4b0e      	ldr	r3, [pc, #56]	; (a1ac <w5500_write_socket_udp+0x490>)
    a172:	2200      	movs	r2, #0
    a174:	701a      	strb	r2, [r3, #0]
				return PROC_OK;
    a176:	2301      	movs	r3, #1
    a178:	e006      	b.n	a188 <w5500_write_socket_udp+0x46c>
		break;
		default:
				st_wr_w5500=0; 
    a17a:	4b0c      	ldr	r3, [pc, #48]	; (a1ac <w5500_write_socket_udp+0x490>)
    a17c:	2200      	movs	r2, #0
    a17e:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a180:	2302      	movs	r3, #2
    a182:	e001      	b.n	a188 <w5500_write_socket_udp+0x46c>
		break;
    a184:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a186:	2300      	movs	r3, #0
}
    a188:	0018      	movs	r0, r3
    a18a:	46bd      	mov	sp, r7
    a18c:	b005      	add	sp, #20
    a18e:	bd90      	pop	{r4, r7, pc}
    a190:	20003b04 	.word	0x20003b04
    a194:	20003bb8 	.word	0x20003bb8
    a198:	20000480 	.word	0x20000480
    a19c:	20000482 	.word	0x20000482
    a1a0:	20003afc 	.word	0x20003afc
    a1a4:	20000484 	.word	0x20000484
    a1a8:	20003bb7 	.word	0x20003bb7
    a1ac:	2000048f 	.word	0x2000048f
    a1b0:	200005cc 	.word	0x200005cc
    a1b4:	000005e5 	.word	0x000005e5

0000a1b8 <w5500_cmd_read_socket_tcp>:

WORD w5500_cmd_read_socket_tcp (BYTE sock_numb)
{
    a1b8:	b590      	push	{r4, r7, lr}
    a1ba:	b085      	sub	sp, #20
    a1bc:	af00      	add	r7, sp, #0
    a1be:	0002      	movs	r2, r0
    a1c0:	1dfb      	adds	r3, r7, #7
    a1c2:	701a      	strb	r2, [r3, #0]
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	static BYTE status_ded[MAX_SOCKETS_CNT];
	
	
	BYTE cnt=0;
    a1c4:	230f      	movs	r3, #15
    a1c6:	18fb      	adds	r3, r7, r3
    a1c8:	2200      	movs	r2, #0
    a1ca:	701a      	strb	r2, [r3, #0]

	switch(st_cmd_w5500)
    a1cc:	4bd2      	ldr	r3, [pc, #840]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a1ce:	781b      	ldrb	r3, [r3, #0]
    a1d0:	2b07      	cmp	r3, #7
    a1d2:	d900      	bls.n	a1d6 <w5500_cmd_read_socket_tcp+0x1e>
    a1d4:	e26d      	b.n	a6b2 <w5500_cmd_read_socket_tcp+0x4fa>
    a1d6:	009a      	lsls	r2, r3, #2
    a1d8:	4bd0      	ldr	r3, [pc, #832]	; (a51c <w5500_cmd_read_socket_tcp+0x364>)
    a1da:	18d3      	adds	r3, r2, r3
    a1dc:	681b      	ldr	r3, [r3, #0]
    a1de:	469f      	mov	pc, r3
	{
		case TCP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr
    a1e0:	4bcf      	ldr	r3, [pc, #828]	; (a520 <w5500_cmd_read_socket_tcp+0x368>)
    a1e2:	2226      	movs	r2, #38	; 0x26
    a1e4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a1e6:	1dfb      	adds	r3, r7, #7
    a1e8:	781b      	ldrb	r3, [r3, #0]
    a1ea:	015b      	lsls	r3, r3, #5
    a1ec:	b21b      	sxth	r3, r3
    a1ee:	2208      	movs	r2, #8
    a1f0:	4313      	orrs	r3, r2
    a1f2:	b21b      	sxth	r3, r3
    a1f4:	b29a      	uxth	r2, r3
    a1f6:	4bcb      	ldr	r3, [pc, #812]	; (a524 <w5500_cmd_read_socket_tcp+0x36c>)
    a1f8:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//data
    a1fa:	1dfb      	adds	r3, r7, #7
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	015b      	lsls	r3, r3, #5
    a200:	3328      	adds	r3, #40	; 0x28
    a202:	001a      	movs	r2, r3
    a204:	4bc8      	ldr	r3, [pc, #800]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a206:	18d3      	adds	r3, r2, r3
    a208:	1d5a      	adds	r2, r3, #5
    a20a:	4bc8      	ldr	r3, [pc, #800]	; (a52c <w5500_cmd_read_socket_tcp+0x374>)
    a20c:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a20e:	4bc8      	ldr	r3, [pc, #800]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a210:	2206      	movs	r2, #6
    a212:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a214:	4bc7      	ldr	r3, [pc, #796]	; (a534 <w5500_cmd_read_socket_tcp+0x37c>)
    a216:	2201      	movs	r2, #1
    a218:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_PART_RD; //"next"
    a21a:	4bbf      	ldr	r3, [pc, #764]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a21c:	2201      	movs	r2, #1
    a21e:	701a      	strb	r2, [r3, #0]
			size=0; 
    a220:	4bc5      	ldr	r3, [pc, #788]	; (a538 <w5500_cmd_read_socket_tcp+0x380>)
    a222:	2200      	movs	r2, #0
    a224:	801a      	strh	r2, [r3, #0]
			
			eth_sock[sock_numb].check_connect_cnt++;
    a226:	1dfb      	adds	r3, r7, #7
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	48c4      	ldr	r0, [pc, #784]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a22c:	22bc      	movs	r2, #188	; 0xbc
    a22e:	00d2      	lsls	r2, r2, #3
    a230:	49c3      	ldr	r1, [pc, #780]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a232:	4359      	muls	r1, r3
    a234:	1841      	adds	r1, r0, r1
    a236:	188a      	adds	r2, r1, r2
    a238:	7851      	ldrb	r1, [r2, #1]
    a23a:	7892      	ldrb	r2, [r2, #2]
    a23c:	0212      	lsls	r2, r2, #8
    a23e:	430a      	orrs	r2, r1
    a240:	b292      	uxth	r2, r2
    a242:	3201      	adds	r2, #1
    a244:	b292      	uxth	r2, r2
    a246:	48bd      	ldr	r0, [pc, #756]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a248:	21bc      	movs	r1, #188	; 0xbc
    a24a:	00c9      	lsls	r1, r1, #3
    a24c:	4cbc      	ldr	r4, [pc, #752]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a24e:	4363      	muls	r3, r4
    a250:	18c3      	adds	r3, r0, r3
    a252:	185b      	adds	r3, r3, r1
    a254:	3301      	adds	r3, #1
    a256:	21ff      	movs	r1, #255	; 0xff
    a258:	4011      	ands	r1, r2
    a25a:	000c      	movs	r4, r1
    a25c:	7819      	ldrb	r1, [r3, #0]
    a25e:	2000      	movs	r0, #0
    a260:	4001      	ands	r1, r0
    a262:	1c08      	adds	r0, r1, #0
    a264:	1c21      	adds	r1, r4, #0
    a266:	4301      	orrs	r1, r0
    a268:	7019      	strb	r1, [r3, #0]
    a26a:	0a12      	lsrs	r2, r2, #8
    a26c:	b290      	uxth	r0, r2
    a26e:	785a      	ldrb	r2, [r3, #1]
    a270:	2100      	movs	r1, #0
    a272:	400a      	ands	r2, r1
    a274:	1c11      	adds	r1, r2, #0
    a276:	1c02      	adds	r2, r0, #0
    a278:	430a      	orrs	r2, r1
    a27a:	705a      	strb	r2, [r3, #1]
			if(eth_sock[sock_numb].check_connect_cnt > 5) {st_cmd_w5500 = TCP_STATUS_RD; eth_sock[sock_numb].check_connect_cnt=0;}
    a27c:	1dfb      	adds	r3, r7, #7
    a27e:	781a      	ldrb	r2, [r3, #0]
    a280:	49ae      	ldr	r1, [pc, #696]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a282:	23bc      	movs	r3, #188	; 0xbc
    a284:	00db      	lsls	r3, r3, #3
    a286:	48ae      	ldr	r0, [pc, #696]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a288:	4342      	muls	r2, r0
    a28a:	188a      	adds	r2, r1, r2
    a28c:	18d3      	adds	r3, r2, r3
    a28e:	785a      	ldrb	r2, [r3, #1]
    a290:	789b      	ldrb	r3, [r3, #2]
    a292:	021b      	lsls	r3, r3, #8
    a294:	4313      	orrs	r3, r2
    a296:	b29b      	uxth	r3, r3
    a298:	2b05      	cmp	r3, #5
    a29a:	d800      	bhi.n	a29e <w5500_cmd_read_socket_tcp+0xe6>
    a29c:	e20e      	b.n	a6bc <w5500_cmd_read_socket_tcp+0x504>
    a29e:	4b9e      	ldr	r3, [pc, #632]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a2a0:	2205      	movs	r2, #5
    a2a2:	701a      	strb	r2, [r3, #0]
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	781a      	ldrb	r2, [r3, #0]
    a2a8:	49a4      	ldr	r1, [pc, #656]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a2aa:	23bc      	movs	r3, #188	; 0xbc
    a2ac:	00db      	lsls	r3, r3, #3
    a2ae:	48a4      	ldr	r0, [pc, #656]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a2b0:	4342      	muls	r2, r0
    a2b2:	188a      	adds	r2, r1, r2
    a2b4:	18d3      	adds	r3, r2, r3
    a2b6:	3301      	adds	r3, #1
    a2b8:	781a      	ldrb	r2, [r3, #0]
    a2ba:	2100      	movs	r1, #0
    a2bc:	400a      	ands	r2, r1
    a2be:	701a      	strb	r2, [r3, #0]
    a2c0:	785a      	ldrb	r2, [r3, #1]
    a2c2:	2100      	movs	r1, #0
    a2c4:	400a      	ands	r2, r1
    a2c6:	705a      	strb	r2, [r3, #1]
		break;	
    a2c8:	e1f8      	b.n	a6bc <w5500_cmd_read_socket_tcp+0x504>
		case TCP_STATUS_RD:
			addr_w5500=ADDR_SOC_STATUS;//addr in w5500 
    a2ca:	4b95      	ldr	r3, [pc, #596]	; (a520 <w5500_cmd_read_socket_tcp+0x368>)
    a2cc:	2203      	movs	r2, #3
    a2ce:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a2d0:	1dfb      	adds	r3, r7, #7
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	015b      	lsls	r3, r3, #5
    a2d6:	b21b      	sxth	r3, r3
    a2d8:	2208      	movs	r2, #8
    a2da:	4313      	orrs	r3, r2
    a2dc:	b21b      	sxth	r3, r3
    a2de:	b29a      	uxth	r2, r3
    a2e0:	4b90      	ldr	r3, [pc, #576]	; (a524 <w5500_cmd_read_socket_tcp+0x36c>)
    a2e2:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R04_Sn_SR_03.Status;//place for write result
    a2e4:	1dfb      	adds	r3, r7, #7
    a2e6:	781b      	ldrb	r3, [r3, #0]
    a2e8:	015b      	lsls	r3, r3, #5
    a2ea:	3310      	adds	r3, #16
    a2ec:	001a      	movs	r2, r3
    a2ee:	4b8e      	ldr	r3, [pc, #568]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a2f0:	18d3      	adds	r3, r2, r3
    a2f2:	1d9a      	adds	r2, r3, #6
    a2f4:	4b8d      	ldr	r3, [pc, #564]	; (a52c <w5500_cmd_read_socket_tcp+0x374>)
    a2f6:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a2f8:	4b8d      	ldr	r3, [pc, #564]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a2fa:	2201      	movs	r2, #1
    a2fc:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a2fe:	4b8d      	ldr	r3, [pc, #564]	; (a534 <w5500_cmd_read_socket_tcp+0x37c>)
    a300:	2201      	movs	r2, #1
    a302:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_FORK;//"next" 
    a304:	4b84      	ldr	r3, [pc, #528]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a306:	2206      	movs	r2, #6
    a308:	701a      	strb	r2, [r3, #0]
		break;
    a30a:	e1d8      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
		case TCP_FORK:
			if(status_ded[sock_numb]==chip.sockReg[sock_numb].R04_Sn_SR_03.Status){st_cmd_w5500 = TCP_PART_RD; return PROC_WAIT;}
    a30c:	1dfb      	adds	r3, r7, #7
    a30e:	781b      	ldrb	r3, [r3, #0]
    a310:	4a8c      	ldr	r2, [pc, #560]	; (a544 <w5500_cmd_read_socket_tcp+0x38c>)
    a312:	5cd2      	ldrb	r2, [r2, r3]
    a314:	1dfb      	adds	r3, r7, #7
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	4983      	ldr	r1, [pc, #524]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a31a:	015b      	lsls	r3, r3, #5
    a31c:	18cb      	adds	r3, r1, r3
    a31e:	3316      	adds	r3, #22
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	429a      	cmp	r2, r3
    a324:	d104      	bne.n	a330 <w5500_cmd_read_socket_tcp+0x178>
    a326:	4b7c      	ldr	r3, [pc, #496]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a328:	2201      	movs	r2, #1
    a32a:	701a      	strb	r2, [r3, #0]
    a32c:	2300      	movs	r3, #0
    a32e:	e1c7      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
			status_ded[sock_numb]=chip.sockReg[sock_numb].R04_Sn_SR_03.Status;
    a330:	1dfb      	adds	r3, r7, #7
    a332:	781b      	ldrb	r3, [r3, #0]
    a334:	1dfa      	adds	r2, r7, #7
    a336:	7812      	ldrb	r2, [r2, #0]
    a338:	497b      	ldr	r1, [pc, #492]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a33a:	0152      	lsls	r2, r2, #5
    a33c:	188a      	adds	r2, r1, r2
    a33e:	3216      	adds	r2, #22
    a340:	7811      	ldrb	r1, [r2, #0]
    a342:	4a80      	ldr	r2, [pc, #512]	; (a544 <w5500_cmd_read_socket_tcp+0x38c>)
    a344:	54d1      	strb	r1, [r2, r3]
			switch(chip.sockReg[sock_numb].R04_Sn_SR_03.Status)
    a346:	1dfb      	adds	r3, r7, #7
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	4a77      	ldr	r2, [pc, #476]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a34c:	015b      	lsls	r3, r3, #5
    a34e:	18d3      	adds	r3, r2, r3
    a350:	3316      	adds	r3, #22
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	2b13      	cmp	r3, #19
    a356:	d00a      	beq.n	a36e <w5500_cmd_read_socket_tcp+0x1b6>
    a358:	2b1c      	cmp	r3, #28
    a35a:	d00f      	beq.n	a37c <w5500_cmd_read_socket_tcp+0x1c4>
    a35c:	2b00      	cmp	r3, #0
    a35e:	d114      	bne.n	a38a <w5500_cmd_read_socket_tcp+0x1d2>
			{
				case ST_CLOSE:
					wbuf_w55[cnt]=CMD_OPEN;
    a360:	230f      	movs	r3, #15
    a362:	18fb      	adds	r3, r7, r3
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	4a78      	ldr	r2, [pc, #480]	; (a548 <w5500_cmd_read_socket_tcp+0x390>)
    a368:	2101      	movs	r1, #1
    a36a:	54d1      	strb	r1, [r2, r3]
				break;
    a36c:	e012      	b.n	a394 <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_INIT:
					wbuf_w55[cnt]=CMD_LISTEN;
    a36e:	230f      	movs	r3, #15
    a370:	18fb      	adds	r3, r7, r3
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	4a74      	ldr	r2, [pc, #464]	; (a548 <w5500_cmd_read_socket_tcp+0x390>)
    a376:	2102      	movs	r1, #2
    a378:	54d1      	strb	r1, [r2, r3]
				break;
    a37a:	e00b      	b.n	a394 <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_CLOSE_WAIT:
					wbuf_w55[cnt]=CMD_CLOSE;			
    a37c:	230f      	movs	r3, #15
    a37e:	18fb      	adds	r3, r7, r3
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	4a71      	ldr	r2, [pc, #452]	; (a548 <w5500_cmd_read_socket_tcp+0x390>)
    a384:	2110      	movs	r1, #16
    a386:	54d1      	strb	r1, [r2, r3]
				break;
    a388:	e004      	b.n	a394 <w5500_cmd_read_socket_tcp+0x1dc>
				default:
					st_cmd_w5500=TCP_PART_RD;
    a38a:	4b63      	ldr	r3, [pc, #396]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a38c:	2201      	movs	r2, #1
    a38e:	701a      	strb	r2, [r3, #0]
				return PROC_WAIT;
    a390:	2300      	movs	r3, #0
    a392:	e195      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
			}
			addr_w5500=ADDR_SOC_COMMAND;
    a394:	4b62      	ldr	r3, [pc, #392]	; (a520 <w5500_cmd_read_socket_tcp+0x368>)
    a396:	2201      	movs	r2, #1
    a398:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a39a:	1dfb      	adds	r3, r7, #7
    a39c:	781b      	ldrb	r3, [r3, #0]
    a39e:	015b      	lsls	r3, r3, #5
    a3a0:	b21b      	sxth	r3, r3
    a3a2:	2208      	movs	r2, #8
    a3a4:	4313      	orrs	r3, r2
    a3a6:	b21b      	sxth	r3, r3
    a3a8:	b29a      	uxth	r2, r3
    a3aa:	4b5e      	ldr	r3, [pc, #376]	; (a524 <w5500_cmd_read_socket_tcp+0x36c>)
    a3ac:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a3ae:	4b5f      	ldr	r3, [pc, #380]	; (a52c <w5500_cmd_read_socket_tcp+0x374>)
    a3b0:	4a65      	ldr	r2, [pc, #404]	; (a548 <w5500_cmd_read_socket_tcp+0x390>)
    a3b2:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a3b4:	4b5e      	ldr	r3, [pc, #376]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a3b6:	2201      	movs	r2, #1
    a3b8:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a3ba:	4b5e      	ldr	r3, [pc, #376]	; (a534 <w5500_cmd_read_socket_tcp+0x37c>)
    a3bc:	2202      	movs	r2, #2
    a3be:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500=TCP_STATUS_RD;
    a3c0:	4b55      	ldr	r3, [pc, #340]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a3c2:	2205      	movs	r2, #5
    a3c4:	701a      	strb	r2, [r3, #0]
		break;
    a3c6:	e17a      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
		case TCP_PART_RD:	
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    a3c8:	1dfb      	adds	r3, r7, #7
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	4a56      	ldr	r2, [pc, #344]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a3ce:	212d      	movs	r1, #45	; 0x2d
    a3d0:	015b      	lsls	r3, r3, #5
    a3d2:	18d3      	adds	r3, r2, r3
    a3d4:	185b      	adds	r3, r3, r1
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	021b      	lsls	r3, r3, #8
    a3da:	b21a      	sxth	r2, r3
    a3dc:	1dfb      	adds	r3, r7, #7
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	4951      	ldr	r1, [pc, #324]	; (a528 <w5500_cmd_read_socket_tcp+0x370>)
    a3e2:	202e      	movs	r0, #46	; 0x2e
    a3e4:	015b      	lsls	r3, r3, #5
    a3e6:	18cb      	adds	r3, r1, r3
    a3e8:	181b      	adds	r3, r3, r0
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	b21b      	sxth	r3, r3
    a3ee:	4313      	orrs	r3, r2
    a3f0:	b21b      	sxth	r3, r3
    a3f2:	b29a      	uxth	r2, r3
    a3f4:	4b55      	ldr	r3, [pc, #340]	; (a54c <w5500_cmd_read_socket_tcp+0x394>)
    a3f6:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return		
    a3f8:	4b54      	ldr	r3, [pc, #336]	; (a54c <w5500_cmd_read_socket_tcp+0x394>)
    a3fa:	881b      	ldrh	r3, [r3, #0]
    a3fc:	b29b      	uxth	r3, r3
    a3fe:	2b00      	cmp	r3, #0
    a400:	d100      	bne.n	a404 <w5500_cmd_read_socket_tcp+0x24c>
    a402:	e084      	b.n	a50e <w5500_cmd_read_socket_tcp+0x356>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;//addr start messege
    a404:	1dfb      	adds	r3, r7, #7
    a406:	781a      	ldrb	r2, [r3, #0]
    a408:	494c      	ldr	r1, [pc, #304]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a40a:	23ba      	movs	r3, #186	; 0xba
    a40c:	00db      	lsls	r3, r3, #3
    a40e:	484c      	ldr	r0, [pc, #304]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a410:	4342      	muls	r2, r0
    a412:	188a      	adds	r2, r1, r2
    a414:	18d3      	adds	r3, r2, r3
    a416:	78da      	ldrb	r2, [r3, #3]
    a418:	791b      	ldrb	r3, [r3, #4]
    a41a:	021b      	lsls	r3, r3, #8
    a41c:	4313      	orrs	r3, r2
    a41e:	b29a      	uxth	r2, r3
    a420:	4b3f      	ldr	r3, [pc, #252]	; (a520 <w5500_cmd_read_socket_tcp+0x368>)
    a422:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);//bsb sock RX
    a424:	1dfb      	adds	r3, r7, #7
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	015b      	lsls	r3, r3, #5
    a42a:	b21b      	sxth	r3, r3
    a42c:	2218      	movs	r2, #24
    a42e:	4313      	orrs	r3, r2
    a430:	b21b      	sxth	r3, r3
    a432:	b29a      	uxth	r2, r3
    a434:	4b3b      	ldr	r3, [pc, #236]	; (a524 <w5500_cmd_read_socket_tcp+0x36c>)
    a436:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb].data;
    a438:	1dfb      	adds	r3, r7, #7
    a43a:	781b      	ldrb	r3, [r3, #0]
    a43c:	4a40      	ldr	r2, [pc, #256]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a43e:	4353      	muls	r3, r2
    a440:	3308      	adds	r3, #8
    a442:	001a      	movs	r2, r3
    a444:	4b3d      	ldr	r3, [pc, #244]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a446:	18d2      	adds	r2, r2, r3
    a448:	4b38      	ldr	r3, [pc, #224]	; (a52c <w5500_cmd_read_socket_tcp+0x374>)
    a44a:	601a      	str	r2, [r3, #0]
				len_buf = sizert;
    a44c:	4b3f      	ldr	r3, [pc, #252]	; (a54c <w5500_cmd_read_socket_tcp+0x394>)
    a44e:	881b      	ldrh	r3, [r3, #0]
    a450:	b29a      	uxth	r2, r3
    a452:	4b37      	ldr	r3, [pc, #220]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a454:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    a456:	1dfb      	adds	r3, r7, #7
    a458:	7819      	ldrb	r1, [r3, #0]
    a45a:	1dfb      	adds	r3, r7, #7
    a45c:	781a      	ldrb	r2, [r3, #0]
    a45e:	4837      	ldr	r0, [pc, #220]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a460:	23ba      	movs	r3, #186	; 0xba
    a462:	00db      	lsls	r3, r3, #3
    a464:	4c36      	ldr	r4, [pc, #216]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a466:	4362      	muls	r2, r4
    a468:	1882      	adds	r2, r0, r2
    a46a:	18d3      	adds	r3, r2, r3
    a46c:	78da      	ldrb	r2, [r3, #3]
    a46e:	791b      	ldrb	r3, [r3, #4]
    a470:	021b      	lsls	r3, r3, #8
    a472:	4313      	orrs	r3, r2
    a474:	b29a      	uxth	r2, r3
    a476:	4b2e      	ldr	r3, [pc, #184]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a478:	881b      	ldrh	r3, [r3, #0]
    a47a:	18d3      	adds	r3, r2, r3
    a47c:	b29a      	uxth	r2, r3
    a47e:	482f      	ldr	r0, [pc, #188]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a480:	23ba      	movs	r3, #186	; 0xba
    a482:	00db      	lsls	r3, r3, #3
    a484:	4c2e      	ldr	r4, [pc, #184]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a486:	4361      	muls	r1, r4
    a488:	1841      	adds	r1, r0, r1
    a48a:	18cb      	adds	r3, r1, r3
    a48c:	3303      	adds	r3, #3
    a48e:	21ff      	movs	r1, #255	; 0xff
    a490:	4011      	ands	r1, r2
    a492:	000c      	movs	r4, r1
    a494:	7819      	ldrb	r1, [r3, #0]
    a496:	2000      	movs	r0, #0
    a498:	4001      	ands	r1, r0
    a49a:	1c08      	adds	r0, r1, #0
    a49c:	1c21      	adds	r1, r4, #0
    a49e:	4301      	orrs	r1, r0
    a4a0:	7019      	strb	r1, [r3, #0]
    a4a2:	0a12      	lsrs	r2, r2, #8
    a4a4:	b290      	uxth	r0, r2
    a4a6:	785a      	ldrb	r2, [r3, #1]
    a4a8:	2100      	movs	r1, #0
    a4aa:	400a      	ands	r2, r1
    a4ac:	1c11      	adds	r1, r2, #0
    a4ae:	1c02      	adds	r2, r0, #0
    a4b0:	430a      	orrs	r2, r1
    a4b2:	705a      	strb	r2, [r3, #1]
				
				size=len_buf;
    a4b4:	4b1e      	ldr	r3, [pc, #120]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a4b6:	881a      	ldrh	r2, [r3, #0]
    a4b8:	4b1f      	ldr	r3, [pc, #124]	; (a538 <w5500_cmd_read_socket_tcp+0x380>)
    a4ba:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_TCP){size=PROC_ER;}
    a4bc:	4b1c      	ldr	r3, [pc, #112]	; (a530 <w5500_cmd_read_socket_tcp+0x378>)
    a4be:	881b      	ldrh	r3, [r3, #0]
    a4c0:	4a23      	ldr	r2, [pc, #140]	; (a550 <w5500_cmd_read_socket_tcp+0x398>)
    a4c2:	4293      	cmp	r3, r2
    a4c4:	d902      	bls.n	a4cc <w5500_cmd_read_socket_tcp+0x314>
    a4c6:	4b1c      	ldr	r3, [pc, #112]	; (a538 <w5500_cmd_read_socket_tcp+0x380>)
    a4c8:	2202      	movs	r2, #2
    a4ca:	801a      	strh	r2, [r3, #0]
					
				eth_sock[sock_numb].len[0]=	(size & 0xFF00)>>8;
    a4cc:	1dfb      	adds	r3, r7, #7
    a4ce:	781b      	ldrb	r3, [r3, #0]
    a4d0:	4a19      	ldr	r2, [pc, #100]	; (a538 <w5500_cmd_read_socket_tcp+0x380>)
    a4d2:	8812      	ldrh	r2, [r2, #0]
    a4d4:	0a12      	lsrs	r2, r2, #8
    a4d6:	b292      	uxth	r2, r2
    a4d8:	b2d0      	uxtb	r0, r2
    a4da:	4a18      	ldr	r2, [pc, #96]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a4dc:	4918      	ldr	r1, [pc, #96]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a4de:	434b      	muls	r3, r1
    a4e0:	18d3      	adds	r3, r2, r3
    a4e2:	3306      	adds	r3, #6
    a4e4:	1c02      	adds	r2, r0, #0
    a4e6:	701a      	strb	r2, [r3, #0]
				eth_sock[sock_numb].len[1]=	(size & 0x00FF);							
    a4e8:	1dfb      	adds	r3, r7, #7
    a4ea:	781b      	ldrb	r3, [r3, #0]
    a4ec:	4a12      	ldr	r2, [pc, #72]	; (a538 <w5500_cmd_read_socket_tcp+0x380>)
    a4ee:	8812      	ldrh	r2, [r2, #0]
    a4f0:	b2d0      	uxtb	r0, r2
    a4f2:	4a12      	ldr	r2, [pc, #72]	; (a53c <w5500_cmd_read_socket_tcp+0x384>)
    a4f4:	4912      	ldr	r1, [pc, #72]	; (a540 <w5500_cmd_read_socket_tcp+0x388>)
    a4f6:	434b      	muls	r3, r1
    a4f8:	18d3      	adds	r3, r2, r3
    a4fa:	3307      	adds	r3, #7
    a4fc:	1c02      	adds	r2, r0, #0
    a4fe:	701a      	strb	r2, [r3, #0]
				cmd=READ_DATA;
    a500:	4b0c      	ldr	r3, [pc, #48]	; (a534 <w5500_cmd_read_socket_tcp+0x37c>)
    a502:	2201      	movs	r2, #1
    a504:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500 = TCP_DROP_PTR;
    a506:	4b04      	ldr	r3, [pc, #16]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a508:	2203      	movs	r2, #3
    a50a:	701a      	strb	r2, [r3, #0]
				break;
    a50c:	e0d7      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
			}
			st_cmd_w5500=TCP_GIVE_LEN;
    a50e:	4b02      	ldr	r3, [pc, #8]	; (a518 <w5500_cmd_read_socket_tcp+0x360>)
    a510:	2200      	movs	r2, #0
    a512:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    a514:	2302      	movs	r3, #2
    a516:	e0d3      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
    a518:	20000490 	.word	0x20000490
    a51c:	0000cc4c 	.word	0x0000cc4c
    a520:	20000480 	.word	0x20000480
    a524:	20000482 	.word	0x20000482
    a528:	20003b04 	.word	0x20003b04
    a52c:	20003afc 	.word	0x20003afc
    a530:	20000484 	.word	0x20000484
    a534:	20003bb7 	.word	0x20003bb7
    a538:	20000492 	.word	0x20000492
    a53c:	200005cc 	.word	0x200005cc
    a540:	000005e5 	.word	0x000005e5
    a544:	20000494 	.word	0x20000494
    a548:	20003bb8 	.word	0x20003bb8
    a54c:	20000486 	.word	0x20000486
    a550:	000005b4 	.word	0x000005b4
		break;
		case TCP_DROP_PTR:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    a554:	230f      	movs	r3, #15
    a556:	18fb      	adds	r3, r7, r3
    a558:	781a      	ldrb	r2, [r3, #0]
    a55a:	1dfb      	adds	r3, r7, #7
    a55c:	7819      	ldrb	r1, [r3, #0]
    a55e:	485a      	ldr	r0, [pc, #360]	; (a6c8 <w5500_cmd_read_socket_tcp+0x510>)
    a560:	23ba      	movs	r3, #186	; 0xba
    a562:	00db      	lsls	r3, r3, #3
    a564:	4c59      	ldr	r4, [pc, #356]	; (a6cc <w5500_cmd_read_socket_tcp+0x514>)
    a566:	4361      	muls	r1, r4
    a568:	1841      	adds	r1, r0, r1
    a56a:	18cb      	adds	r3, r1, r3
    a56c:	78d9      	ldrb	r1, [r3, #3]
    a56e:	791b      	ldrb	r3, [r3, #4]
    a570:	021b      	lsls	r3, r3, #8
    a572:	430b      	orrs	r3, r1
    a574:	b29b      	uxth	r3, r3
    a576:	0a1b      	lsrs	r3, r3, #8
    a578:	b29b      	uxth	r3, r3
    a57a:	b2d9      	uxtb	r1, r3
    a57c:	4b54      	ldr	r3, [pc, #336]	; (a6d0 <w5500_cmd_read_socket_tcp+0x518>)
    a57e:	5499      	strb	r1, [r3, r2]
    a580:	230f      	movs	r3, #15
    a582:	18fb      	adds	r3, r7, r3
    a584:	781a      	ldrb	r2, [r3, #0]
    a586:	230f      	movs	r3, #15
    a588:	18fb      	adds	r3, r7, r3
    a58a:	3201      	adds	r2, #1
    a58c:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    a58e:	230f      	movs	r3, #15
    a590:	18fb      	adds	r3, r7, r3
    a592:	781a      	ldrb	r2, [r3, #0]
    a594:	1dfb      	adds	r3, r7, #7
    a596:	7819      	ldrb	r1, [r3, #0]
    a598:	484b      	ldr	r0, [pc, #300]	; (a6c8 <w5500_cmd_read_socket_tcp+0x510>)
    a59a:	23ba      	movs	r3, #186	; 0xba
    a59c:	00db      	lsls	r3, r3, #3
    a59e:	4c4b      	ldr	r4, [pc, #300]	; (a6cc <w5500_cmd_read_socket_tcp+0x514>)
    a5a0:	4361      	muls	r1, r4
    a5a2:	1841      	adds	r1, r0, r1
    a5a4:	18cb      	adds	r3, r1, r3
    a5a6:	78d9      	ldrb	r1, [r3, #3]
    a5a8:	791b      	ldrb	r3, [r3, #4]
    a5aa:	021b      	lsls	r3, r3, #8
    a5ac:	430b      	orrs	r3, r1
    a5ae:	b29b      	uxth	r3, r3
    a5b0:	b2d9      	uxtb	r1, r3
    a5b2:	4b47      	ldr	r3, [pc, #284]	; (a6d0 <w5500_cmd_read_socket_tcp+0x518>)
    a5b4:	5499      	strb	r1, [r3, r2]
    a5b6:	230f      	movs	r3, #15
    a5b8:	18fb      	adds	r3, r7, r3
    a5ba:	781a      	ldrb	r2, [r3, #0]
    a5bc:	230f      	movs	r3, #15
    a5be:	18fb      	adds	r3, r7, r3
    a5c0:	3201      	adds	r2, #1
    a5c2:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;
    a5c4:	4b43      	ldr	r3, [pc, #268]	; (a6d4 <w5500_cmd_read_socket_tcp+0x51c>)
    a5c6:	2228      	movs	r2, #40	; 0x28
    a5c8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a5ca:	1dfb      	adds	r3, r7, #7
    a5cc:	781b      	ldrb	r3, [r3, #0]
    a5ce:	015b      	lsls	r3, r3, #5
    a5d0:	b21b      	sxth	r3, r3
    a5d2:	2208      	movs	r2, #8
    a5d4:	4313      	orrs	r3, r2
    a5d6:	b21b      	sxth	r3, r3
    a5d8:	b29a      	uxth	r2, r3
    a5da:	4b3f      	ldr	r3, [pc, #252]	; (a6d8 <w5500_cmd_read_socket_tcp+0x520>)
    a5dc:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a5de:	4b3f      	ldr	r3, [pc, #252]	; (a6dc <w5500_cmd_read_socket_tcp+0x524>)
    a5e0:	4a3b      	ldr	r2, [pc, #236]	; (a6d0 <w5500_cmd_read_socket_tcp+0x518>)
    a5e2:	601a      	str	r2, [r3, #0]
			len_buf=2;
    a5e4:	4b3e      	ldr	r3, [pc, #248]	; (a6e0 <w5500_cmd_read_socket_tcp+0x528>)
    a5e6:	2202      	movs	r2, #2
    a5e8:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a5ea:	4b3e      	ldr	r3, [pc, #248]	; (a6e4 <w5500_cmd_read_socket_tcp+0x52c>)
    a5ec:	2202      	movs	r2, #2
    a5ee:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_RSV_CMD;//"next" 
    a5f0:	4b3d      	ldr	r3, [pc, #244]	; (a6e8 <w5500_cmd_read_socket_tcp+0x530>)
    a5f2:	2202      	movs	r2, #2
    a5f4:	701a      	strb	r2, [r3, #0]
		break;
    a5f6:	e062      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
		case TCP_RSV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//go to reciv mode (and rewrite number)
    a5f8:	230f      	movs	r3, #15
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	4a34      	ldr	r2, [pc, #208]	; (a6d0 <w5500_cmd_read_socket_tcp+0x518>)
    a600:	2140      	movs	r1, #64	; 0x40
    a602:	54d1      	strb	r1, [r2, r3]
    a604:	230f      	movs	r3, #15
    a606:	18fb      	adds	r3, r7, r3
    a608:	781a      	ldrb	r2, [r3, #0]
    a60a:	230f      	movs	r3, #15
    a60c:	18fb      	adds	r3, r7, r3
    a60e:	3201      	adds	r2, #1
    a610:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a612:	4b30      	ldr	r3, [pc, #192]	; (a6d4 <w5500_cmd_read_socket_tcp+0x51c>)
    a614:	2201      	movs	r2, #1
    a616:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a618:	1dfb      	adds	r3, r7, #7
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	015b      	lsls	r3, r3, #5
    a61e:	b21b      	sxth	r3, r3
    a620:	2208      	movs	r2, #8
    a622:	4313      	orrs	r3, r2
    a624:	b21b      	sxth	r3, r3
    a626:	b29a      	uxth	r2, r3
    a628:	4b2b      	ldr	r3, [pc, #172]	; (a6d8 <w5500_cmd_read_socket_tcp+0x520>)
    a62a:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a62c:	4b2b      	ldr	r3, [pc, #172]	; (a6dc <w5500_cmd_read_socket_tcp+0x524>)
    a62e:	4a28      	ldr	r2, [pc, #160]	; (a6d0 <w5500_cmd_read_socket_tcp+0x518>)
    a630:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a632:	230f      	movs	r3, #15
    a634:	18fb      	adds	r3, r7, r3
    a636:	781b      	ldrb	r3, [r3, #0]
    a638:	b29a      	uxth	r2, r3
    a63a:	4b29      	ldr	r3, [pc, #164]	; (a6e0 <w5500_cmd_read_socket_tcp+0x528>)
    a63c:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a63e:	4b29      	ldr	r3, [pc, #164]	; (a6e4 <w5500_cmd_read_socket_tcp+0x52c>)
    a640:	2202      	movs	r2, #2
    a642:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_GIVE_IP;//"next" 
    a644:	4b28      	ldr	r3, [pc, #160]	; (a6e8 <w5500_cmd_read_socket_tcp+0x530>)
    a646:	2207      	movs	r2, #7
    a648:	701a      	strb	r2, [r3, #0]
		break;
    a64a:	e038      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
		case TCP_GIVE_IP:
			addr_w5500=ADDR_SOC_D_IP_ADDR0;//addr
    a64c:	4b21      	ldr	r3, [pc, #132]	; (a6d4 <w5500_cmd_read_socket_tcp+0x51c>)
    a64e:	220c      	movs	r2, #12
    a650:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    a652:	1dfb      	adds	r3, r7, #7
    a654:	781b      	ldrb	r3, [r3, #0]
    a656:	015b      	lsls	r3, r3, #5
    a658:	b21b      	sxth	r3, r3
    a65a:	2208      	movs	r2, #8
    a65c:	4313      	orrs	r3, r2
    a65e:	b21b      	sxth	r3, r3
    a660:	b29a      	uxth	r2, r3
    a662:	4b1d      	ldr	r3, [pc, #116]	; (a6d8 <w5500_cmd_read_socket_tcp+0x520>)
    a664:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*) & eth_sock[sock_numb].ip_addr;//data
    a666:	1dfb      	adds	r3, r7, #7
    a668:	781b      	ldrb	r3, [r3, #0]
    a66a:	4a18      	ldr	r2, [pc, #96]	; (a6cc <w5500_cmd_read_socket_tcp+0x514>)
    a66c:	435a      	muls	r2, r3
    a66e:	4b16      	ldr	r3, [pc, #88]	; (a6c8 <w5500_cmd_read_socket_tcp+0x510>)
    a670:	18d2      	adds	r2, r2, r3
    a672:	4b1a      	ldr	r3, [pc, #104]	; (a6dc <w5500_cmd_read_socket_tcp+0x524>)
    a674:	601a      	str	r2, [r3, #0]
			len_buf=4;
    a676:	4b1a      	ldr	r3, [pc, #104]	; (a6e0 <w5500_cmd_read_socket_tcp+0x528>)
    a678:	2204      	movs	r2, #4
    a67a:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    a67c:	4b19      	ldr	r3, [pc, #100]	; (a6e4 <w5500_cmd_read_socket_tcp+0x52c>)
    a67e:	2201      	movs	r2, #1
    a680:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_BK_START; //"next"
    a682:	4b19      	ldr	r3, [pc, #100]	; (a6e8 <w5500_cmd_read_socket_tcp+0x530>)
    a684:	2204      	movs	r2, #4
    a686:	701a      	strb	r2, [r3, #0]
		break;		
    a688:	e019      	b.n	a6be <w5500_cmd_read_socket_tcp+0x506>
		case TCP_BK_START:
			st_cmd_w5500=TCP_GIVE_LEN;//сброс параметров
    a68a:	4b17      	ldr	r3, [pc, #92]	; (a6e8 <w5500_cmd_read_socket_tcp+0x530>)
    a68c:	2200      	movs	r2, #0
    a68e:	701a      	strb	r2, [r3, #0]
			if(!size)					 {return PROC_ER;}
    a690:	4b16      	ldr	r3, [pc, #88]	; (a6ec <w5500_cmd_read_socket_tcp+0x534>)
    a692:	881b      	ldrh	r3, [r3, #0]
    a694:	2b00      	cmp	r3, #0
    a696:	d101      	bne.n	a69c <w5500_cmd_read_socket_tcp+0x4e4>
    a698:	2302      	movs	r3, #2
    a69a:	e011      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
			if(size > USART_BUF_SIZE)	 {return PROC_ER;}
    a69c:	4b13      	ldr	r3, [pc, #76]	; (a6ec <w5500_cmd_read_socket_tcp+0x534>)
    a69e:	881a      	ldrh	r2, [r3, #0]
    a6a0:	2380      	movs	r3, #128	; 0x80
    a6a2:	005b      	lsls	r3, r3, #1
    a6a4:	429a      	cmp	r2, r3
    a6a6:	d901      	bls.n	a6ac <w5500_cmd_read_socket_tcp+0x4f4>
    a6a8:	2302      	movs	r3, #2
    a6aa:	e009      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
			return (size);
    a6ac:	4b0f      	ldr	r3, [pc, #60]	; (a6ec <w5500_cmd_read_socket_tcp+0x534>)
    a6ae:	881b      	ldrh	r3, [r3, #0]
    a6b0:	e006      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    a6b2:	4b0d      	ldr	r3, [pc, #52]	; (a6e8 <w5500_cmd_read_socket_tcp+0x530>)
    a6b4:	2200      	movs	r2, #0
    a6b6:	701a      	strb	r2, [r3, #0]
    a6b8:	2302      	movs	r3, #2
    a6ba:	e001      	b.n	a6c0 <w5500_cmd_read_socket_tcp+0x508>
		break;	
    a6bc:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a6be:	2300      	movs	r3, #0
}
    a6c0:	0018      	movs	r0, r3
    a6c2:	46bd      	mov	sp, r7
    a6c4:	b005      	add	sp, #20
    a6c6:	bd90      	pop	{r4, r7, pc}
    a6c8:	200005cc 	.word	0x200005cc
    a6cc:	000005e5 	.word	0x000005e5
    a6d0:	20003bb8 	.word	0x20003bb8
    a6d4:	20000480 	.word	0x20000480
    a6d8:	20000482 	.word	0x20000482
    a6dc:	20003afc 	.word	0x20003afc
    a6e0:	20000484 	.word	0x20000484
    a6e4:	20003bb7 	.word	0x20003bb7
    a6e8:	20000490 	.word	0x20000490
    a6ec:	20000492 	.word	0x20000492

0000a6f0 <w5500_write_socket_tcp>:

WORD w5500_write_socket_tcp (BYTE sock_numb)
{
    a6f0:	b590      	push	{r4, r7, lr}
    a6f2:	b085      	sub	sp, #20
    a6f4:	af00      	add	r7, sp, #0
    a6f6:	0002      	movs	r2, r0
    a6f8:	1dfb      	adds	r3, r7, #7
    a6fa:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500=0;
	static BYTE numb_static=0;
	WORD cnt=0;
    a6fc:	230e      	movs	r3, #14
    a6fe:	18fb      	adds	r3, r7, r3
    a700:	2200      	movs	r2, #0
    a702:	801a      	strh	r2, [r3, #0]
	
	if(numb_static!=sock_numb){numb_static=sock_numb;st_wr_w5500=0;}
    a704:	4bdc      	ldr	r3, [pc, #880]	; (aa78 <w5500_write_socket_tcp+0x388>)
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	1dfa      	adds	r2, r7, #7
    a70a:	7812      	ldrb	r2, [r2, #0]
    a70c:	429a      	cmp	r2, r3
    a70e:	d006      	beq.n	a71e <w5500_write_socket_tcp+0x2e>
    a710:	4bd9      	ldr	r3, [pc, #868]	; (aa78 <w5500_write_socket_tcp+0x388>)
    a712:	1dfa      	adds	r2, r7, #7
    a714:	7812      	ldrb	r2, [r2, #0]
    a716:	701a      	strb	r2, [r3, #0]
    a718:	4bd8      	ldr	r3, [pc, #864]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a71a:	2200      	movs	r2, #0
    a71c:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    a71e:	4bd7      	ldr	r3, [pc, #860]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	2b06      	cmp	r3, #6
    a724:	d900      	bls.n	a728 <w5500_write_socket_tcp+0x38>
    a726:	e21a      	b.n	ab5e <w5500_write_socket_tcp+0x46e>
    a728:	009a      	lsls	r2, r3, #2
    a72a:	4bd5      	ldr	r3, [pc, #852]	; (aa80 <w5500_write_socket_tcp+0x390>)
    a72c:	18d3      	adds	r3, r2, r3
    a72e:	681b      	ldr	r3, [r3, #0]
    a730:	469f      	mov	pc, r3
	{
		case TCP_RD_FSR:																	//read reg tx status FSR
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;
    a732:	4bd4      	ldr	r3, [pc, #848]	; (aa84 <w5500_write_socket_tcp+0x394>)
    a734:	2220      	movs	r2, #32
    a736:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a738:	1dfb      	adds	r3, r7, #7
    a73a:	781b      	ldrb	r3, [r3, #0]
    a73c:	015b      	lsls	r3, r3, #5
    a73e:	b21b      	sxth	r3, r3
    a740:	2208      	movs	r2, #8
    a742:	4313      	orrs	r3, r2
    a744:	b21b      	sxth	r3, r3
    a746:	b29a      	uxth	r2, r3
    a748:	4bcf      	ldr	r3, [pc, #828]	; (aa88 <w5500_write_socket_tcp+0x398>)
    a74a:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    a74c:	1dfb      	adds	r3, r7, #7
    a74e:	781b      	ldrb	r3, [r3, #0]
    a750:	3301      	adds	r3, #1
    a752:	015a      	lsls	r2, r3, #5
    a754:	4bcd      	ldr	r3, [pc, #820]	; (aa8c <w5500_write_socket_tcp+0x39c>)
    a756:	18d3      	adds	r3, r2, r3
    a758:	1dda      	adds	r2, r3, #7
    a75a:	4bcd      	ldr	r3, [pc, #820]	; (aa90 <w5500_write_socket_tcp+0x3a0>)
    a75c:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a75e:	4bcd      	ldr	r3, [pc, #820]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    a760:	2206      	movs	r2, #6
    a762:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a764:	4bcc      	ldr	r3, [pc, #816]	; (aa98 <w5500_write_socket_tcp+0x3a8>)
    a766:	2201      	movs	r2, #1
    a768:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a76a:	4bc4      	ldr	r3, [pc, #784]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	3301      	adds	r3, #1
    a770:	b2da      	uxtb	r2, r3
    a772:	4bc2      	ldr	r3, [pc, #776]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a774:	701a      	strb	r2, [r3, #0]
		break;
    a776:	e1f8      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
		case TCP_WR_DATA:	
			sizert=	(*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case2);				
    a778:	1dfb      	adds	r3, r7, #7
    a77a:	781b      	ldrb	r3, [r3, #0]
    a77c:	4ac3      	ldr	r2, [pc, #780]	; (aa8c <w5500_write_socket_tcp+0x39c>)
    a77e:	212b      	movs	r1, #43	; 0x2b
    a780:	015b      	lsls	r3, r3, #5
    a782:	18d3      	adds	r3, r2, r3
    a784:	185b      	adds	r3, r3, r1
    a786:	781b      	ldrb	r3, [r3, #0]
    a788:	021b      	lsls	r3, r3, #8
    a78a:	b21a      	sxth	r2, r3
    a78c:	1dfb      	adds	r3, r7, #7
    a78e:	781b      	ldrb	r3, [r3, #0]
    a790:	49be      	ldr	r1, [pc, #760]	; (aa8c <w5500_write_socket_tcp+0x39c>)
    a792:	202c      	movs	r0, #44	; 0x2c
    a794:	015b      	lsls	r3, r3, #5
    a796:	18cb      	adds	r3, r1, r3
    a798:	181b      	adds	r3, r3, r0
    a79a:	781b      	ldrb	r3, [r3, #0]
    a79c:	b21b      	sxth	r3, r3
    a79e:	4313      	orrs	r3, r2
    a7a0:	b21b      	sxth	r3, r3
    a7a2:	b29a      	uxth	r2, r3
    a7a4:	4bbd      	ldr	r3, [pc, #756]	; (aa9c <w5500_write_socket_tcp+0x3ac>)
    a7a6:	801a      	strh	r2, [r3, #0]
			
			if(sizert!=eth_sock[sock_numb].ptr_tx_buf){ eth_sock[sock_numb].ptr_tx_buf=sizert; }
    a7a8:	1dfb      	adds	r3, r7, #7
    a7aa:	781a      	ldrb	r2, [r3, #0]
    a7ac:	49bc      	ldr	r1, [pc, #752]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a7ae:	23ba      	movs	r3, #186	; 0xba
    a7b0:	00db      	lsls	r3, r3, #3
    a7b2:	48bc      	ldr	r0, [pc, #752]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a7b4:	4342      	muls	r2, r0
    a7b6:	188a      	adds	r2, r1, r2
    a7b8:	18d3      	adds	r3, r2, r3
    a7ba:	795a      	ldrb	r2, [r3, #5]
    a7bc:	799b      	ldrb	r3, [r3, #6]
    a7be:	021b      	lsls	r3, r3, #8
    a7c0:	4313      	orrs	r3, r2
    a7c2:	b29a      	uxth	r2, r3
    a7c4:	4bb5      	ldr	r3, [pc, #724]	; (aa9c <w5500_write_socket_tcp+0x3ac>)
    a7c6:	881b      	ldrh	r3, [r3, #0]
    a7c8:	b29b      	uxth	r3, r3
    a7ca:	429a      	cmp	r2, r3
    a7cc:	d01f      	beq.n	a80e <w5500_write_socket_tcp+0x11e>
    a7ce:	1dfb      	adds	r3, r7, #7
    a7d0:	7819      	ldrb	r1, [r3, #0]
    a7d2:	4bb2      	ldr	r3, [pc, #712]	; (aa9c <w5500_write_socket_tcp+0x3ac>)
    a7d4:	881b      	ldrh	r3, [r3, #0]
    a7d6:	b29a      	uxth	r2, r3
    a7d8:	48b1      	ldr	r0, [pc, #708]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a7da:	23ba      	movs	r3, #186	; 0xba
    a7dc:	00db      	lsls	r3, r3, #3
    a7de:	4cb1      	ldr	r4, [pc, #708]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a7e0:	4361      	muls	r1, r4
    a7e2:	1841      	adds	r1, r0, r1
    a7e4:	18cb      	adds	r3, r1, r3
    a7e6:	3305      	adds	r3, #5
    a7e8:	21ff      	movs	r1, #255	; 0xff
    a7ea:	4011      	ands	r1, r2
    a7ec:	000c      	movs	r4, r1
    a7ee:	7819      	ldrb	r1, [r3, #0]
    a7f0:	2000      	movs	r0, #0
    a7f2:	4001      	ands	r1, r0
    a7f4:	1c08      	adds	r0, r1, #0
    a7f6:	1c21      	adds	r1, r4, #0
    a7f8:	4301      	orrs	r1, r0
    a7fa:	7019      	strb	r1, [r3, #0]
    a7fc:	0a12      	lsrs	r2, r2, #8
    a7fe:	b290      	uxth	r0, r2
    a800:	785a      	ldrb	r2, [r3, #1]
    a802:	2100      	movs	r1, #0
    a804:	400a      	ands	r2, r1
    a806:	1c11      	adds	r1, r2, #0
    a808:	1c02      	adds	r2, r0, #0
    a80a:	430a      	orrs	r2, r1
    a80c:	705a      	strb	r2, [r3, #1]
																			
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    a80e:	1dfb      	adds	r3, r7, #7
    a810:	781a      	ldrb	r2, [r3, #0]
    a812:	49a3      	ldr	r1, [pc, #652]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a814:	23ba      	movs	r3, #186	; 0xba
    a816:	00db      	lsls	r3, r3, #3
    a818:	48a2      	ldr	r0, [pc, #648]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a81a:	4342      	muls	r2, r0
    a81c:	188a      	adds	r2, r1, r2
    a81e:	18d3      	adds	r3, r2, r3
    a820:	795a      	ldrb	r2, [r3, #5]
    a822:	799b      	ldrb	r3, [r3, #6]
    a824:	021b      	lsls	r3, r3, #8
    a826:	4313      	orrs	r3, r2
    a828:	b29a      	uxth	r2, r3
    a82a:	4b96      	ldr	r3, [pc, #600]	; (aa84 <w5500_write_socket_tcp+0x394>)
    a82c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    a82e:	1dfb      	adds	r3, r7, #7
    a830:	781b      	ldrb	r3, [r3, #0]
    a832:	015b      	lsls	r3, r3, #5
    a834:	b21b      	sxth	r3, r3
    a836:	2210      	movs	r2, #16
    a838:	4313      	orrs	r3, r2
    a83a:	b21b      	sxth	r3, r3
    a83c:	b29a      	uxth	r2, r3
    a83e:	4b92      	ldr	r3, [pc, #584]	; (aa88 <w5500_write_socket_tcp+0x398>)
    a840:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    a842:	1dfb      	adds	r3, r7, #7
    a844:	781b      	ldrb	r3, [r3, #0]
    a846:	4a97      	ldr	r2, [pc, #604]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a848:	4353      	muls	r3, r2
    a84a:	3308      	adds	r3, #8
    a84c:	001a      	movs	r2, r3
    a84e:	4b94      	ldr	r3, [pc, #592]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a850:	18d2      	adds	r2, r2, r3
    a852:	4b8f      	ldr	r3, [pc, #572]	; (aa90 <w5500_write_socket_tcp+0x3a0>)
    a854:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    a856:	1dfb      	adds	r3, r7, #7
    a858:	781b      	ldrb	r3, [r3, #0]
    a85a:	4a91      	ldr	r2, [pc, #580]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a85c:	4991      	ldr	r1, [pc, #580]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a85e:	434b      	muls	r3, r1
    a860:	18d3      	adds	r3, r2, r3
    a862:	3306      	adds	r3, #6
    a864:	781b      	ldrb	r3, [r3, #0]
    a866:	021b      	lsls	r3, r3, #8
    a868:	b21a      	sxth	r2, r3
    a86a:	1dfb      	adds	r3, r7, #7
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	498c      	ldr	r1, [pc, #560]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a870:	488c      	ldr	r0, [pc, #560]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a872:	4343      	muls	r3, r0
    a874:	18cb      	adds	r3, r1, r3
    a876:	3307      	adds	r3, #7
    a878:	781b      	ldrb	r3, [r3, #0]
    a87a:	b21b      	sxth	r3, r3
    a87c:	4313      	orrs	r3, r2
    a87e:	b21b      	sxth	r3, r3
    a880:	b29a      	uxth	r2, r3
    a882:	4b84      	ldr	r3, [pc, #528]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    a884:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    a886:	1dfb      	adds	r3, r7, #7
    a888:	7819      	ldrb	r1, [r3, #0]
    a88a:	1dfb      	adds	r3, r7, #7
    a88c:	781a      	ldrb	r2, [r3, #0]
    a88e:	4884      	ldr	r0, [pc, #528]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a890:	23ba      	movs	r3, #186	; 0xba
    a892:	00db      	lsls	r3, r3, #3
    a894:	4c83      	ldr	r4, [pc, #524]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a896:	4362      	muls	r2, r4
    a898:	1882      	adds	r2, r0, r2
    a89a:	18d3      	adds	r3, r2, r3
    a89c:	795a      	ldrb	r2, [r3, #5]
    a89e:	799b      	ldrb	r3, [r3, #6]
    a8a0:	021b      	lsls	r3, r3, #8
    a8a2:	4313      	orrs	r3, r2
    a8a4:	b29a      	uxth	r2, r3
    a8a6:	4b7b      	ldr	r3, [pc, #492]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    a8a8:	881b      	ldrh	r3, [r3, #0]
    a8aa:	18d3      	adds	r3, r2, r3
    a8ac:	b29a      	uxth	r2, r3
    a8ae:	487c      	ldr	r0, [pc, #496]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a8b0:	23ba      	movs	r3, #186	; 0xba
    a8b2:	00db      	lsls	r3, r3, #3
    a8b4:	4c7b      	ldr	r4, [pc, #492]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a8b6:	4361      	muls	r1, r4
    a8b8:	1841      	adds	r1, r0, r1
    a8ba:	18cb      	adds	r3, r1, r3
    a8bc:	3305      	adds	r3, #5
    a8be:	21ff      	movs	r1, #255	; 0xff
    a8c0:	4011      	ands	r1, r2
    a8c2:	000c      	movs	r4, r1
    a8c4:	7819      	ldrb	r1, [r3, #0]
    a8c6:	2000      	movs	r0, #0
    a8c8:	4001      	ands	r1, r0
    a8ca:	1c08      	adds	r0, r1, #0
    a8cc:	1c21      	adds	r1, r4, #0
    a8ce:	4301      	orrs	r1, r0
    a8d0:	7019      	strb	r1, [r3, #0]
    a8d2:	0a12      	lsrs	r2, r2, #8
    a8d4:	b290      	uxth	r0, r2
    a8d6:	785a      	ldrb	r2, [r3, #1]
    a8d8:	2100      	movs	r1, #0
    a8da:	400a      	ands	r2, r1
    a8dc:	1c11      	adds	r1, r2, #0
    a8de:	1c02      	adds	r2, r0, #0
    a8e0:	430a      	orrs	r2, r1
    a8e2:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    a8e4:	4b6c      	ldr	r3, [pc, #432]	; (aa98 <w5500_write_socket_tcp+0x3a8>)
    a8e6:	2202      	movs	r2, #2
    a8e8:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a8ea:	4b64      	ldr	r3, [pc, #400]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a8ec:	781b      	ldrb	r3, [r3, #0]
    a8ee:	3301      	adds	r3, #1
    a8f0:	b2da      	uxtb	r2, r3
    a8f2:	4b62      	ldr	r3, [pc, #392]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a8f4:	701a      	strb	r2, [r3, #0]
		break;
    a8f6:	e138      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
		case TCP_PTR_WR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    a8f8:	230e      	movs	r3, #14
    a8fa:	18fb      	adds	r3, r7, r3
    a8fc:	881a      	ldrh	r2, [r3, #0]
    a8fe:	1dfb      	adds	r3, r7, #7
    a900:	7819      	ldrb	r1, [r3, #0]
    a902:	4867      	ldr	r0, [pc, #412]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a904:	23ba      	movs	r3, #186	; 0xba
    a906:	00db      	lsls	r3, r3, #3
    a908:	4c66      	ldr	r4, [pc, #408]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a90a:	4361      	muls	r1, r4
    a90c:	1841      	adds	r1, r0, r1
    a90e:	18cb      	adds	r3, r1, r3
    a910:	7959      	ldrb	r1, [r3, #5]
    a912:	799b      	ldrb	r3, [r3, #6]
    a914:	021b      	lsls	r3, r3, #8
    a916:	430b      	orrs	r3, r1
    a918:	b29b      	uxth	r3, r3
    a91a:	0a1b      	lsrs	r3, r3, #8
    a91c:	b29b      	uxth	r3, r3
    a91e:	b2d9      	uxtb	r1, r3
    a920:	4b61      	ldr	r3, [pc, #388]	; (aaa8 <w5500_write_socket_tcp+0x3b8>)
    a922:	5499      	strb	r1, [r3, r2]
    a924:	230e      	movs	r3, #14
    a926:	18fb      	adds	r3, r7, r3
    a928:	881a      	ldrh	r2, [r3, #0]
    a92a:	230e      	movs	r3, #14
    a92c:	18fb      	adds	r3, r7, r3
    a92e:	3201      	adds	r2, #1
    a930:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    a932:	230e      	movs	r3, #14
    a934:	18fb      	adds	r3, r7, r3
    a936:	881a      	ldrh	r2, [r3, #0]
    a938:	1dfb      	adds	r3, r7, #7
    a93a:	7819      	ldrb	r1, [r3, #0]
    a93c:	4858      	ldr	r0, [pc, #352]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    a93e:	23ba      	movs	r3, #186	; 0xba
    a940:	00db      	lsls	r3, r3, #3
    a942:	4c58      	ldr	r4, [pc, #352]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    a944:	4361      	muls	r1, r4
    a946:	1841      	adds	r1, r0, r1
    a948:	18cb      	adds	r3, r1, r3
    a94a:	7959      	ldrb	r1, [r3, #5]
    a94c:	799b      	ldrb	r3, [r3, #6]
    a94e:	021b      	lsls	r3, r3, #8
    a950:	430b      	orrs	r3, r1
    a952:	b29b      	uxth	r3, r3
    a954:	b2d9      	uxtb	r1, r3
    a956:	4b54      	ldr	r3, [pc, #336]	; (aaa8 <w5500_write_socket_tcp+0x3b8>)
    a958:	5499      	strb	r1, [r3, r2]
    a95a:	230e      	movs	r3, #14
    a95c:	18fb      	adds	r3, r7, r3
    a95e:	881a      	ldrh	r2, [r3, #0]
    a960:	230e      	movs	r3, #14
    a962:	18fb      	adds	r3, r7, r3
    a964:	3201      	adds	r2, #1
    a966:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    a968:	4b46      	ldr	r3, [pc, #280]	; (aa84 <w5500_write_socket_tcp+0x394>)
    a96a:	2224      	movs	r2, #36	; 0x24
    a96c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a96e:	1dfb      	adds	r3, r7, #7
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	015b      	lsls	r3, r3, #5
    a974:	b21b      	sxth	r3, r3
    a976:	2208      	movs	r2, #8
    a978:	4313      	orrs	r3, r2
    a97a:	b21b      	sxth	r3, r3
    a97c:	b29a      	uxth	r2, r3
    a97e:	4b42      	ldr	r3, [pc, #264]	; (aa88 <w5500_write_socket_tcp+0x398>)
    a980:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a982:	4b43      	ldr	r3, [pc, #268]	; (aa90 <w5500_write_socket_tcp+0x3a0>)
    a984:	4a48      	ldr	r2, [pc, #288]	; (aaa8 <w5500_write_socket_tcp+0x3b8>)
    a986:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a988:	4b42      	ldr	r3, [pc, #264]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    a98a:	220e      	movs	r2, #14
    a98c:	18ba      	adds	r2, r7, r2
    a98e:	8812      	ldrh	r2, [r2, #0]
    a990:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a992:	4b41      	ldr	r3, [pc, #260]	; (aa98 <w5500_write_socket_tcp+0x3a8>)
    a994:	2202      	movs	r2, #2
    a996:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a998:	4b38      	ldr	r3, [pc, #224]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	3301      	adds	r3, #1
    a99e:	b2da      	uxtb	r2, r3
    a9a0:	4b36      	ldr	r3, [pc, #216]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a9a2:	701a      	strb	r2, [r3, #0]
		break;
    a9a4:	e0e1      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
		case TCP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    a9a6:	230e      	movs	r3, #14
    a9a8:	18fb      	adds	r3, r7, r3
    a9aa:	881b      	ldrh	r3, [r3, #0]
    a9ac:	4a3e      	ldr	r2, [pc, #248]	; (aaa8 <w5500_write_socket_tcp+0x3b8>)
    a9ae:	2120      	movs	r1, #32
    a9b0:	54d1      	strb	r1, [r2, r3]
    a9b2:	230e      	movs	r3, #14
    a9b4:	18fb      	adds	r3, r7, r3
    a9b6:	881a      	ldrh	r2, [r3, #0]
    a9b8:	230e      	movs	r3, #14
    a9ba:	18fb      	adds	r3, r7, r3
    a9bc:	3201      	adds	r2, #1
    a9be:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a9c0:	4b30      	ldr	r3, [pc, #192]	; (aa84 <w5500_write_socket_tcp+0x394>)
    a9c2:	2201      	movs	r2, #1
    a9c4:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a9c6:	1dfb      	adds	r3, r7, #7
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	015b      	lsls	r3, r3, #5
    a9cc:	b21b      	sxth	r3, r3
    a9ce:	2208      	movs	r2, #8
    a9d0:	4313      	orrs	r3, r2
    a9d2:	b21b      	sxth	r3, r3
    a9d4:	b29a      	uxth	r2, r3
    a9d6:	4b2c      	ldr	r3, [pc, #176]	; (aa88 <w5500_write_socket_tcp+0x398>)
    a9d8:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a9da:	4b2d      	ldr	r3, [pc, #180]	; (aa90 <w5500_write_socket_tcp+0x3a0>)
    a9dc:	4a32      	ldr	r2, [pc, #200]	; (aaa8 <w5500_write_socket_tcp+0x3b8>)
    a9de:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a9e0:	4b2c      	ldr	r3, [pc, #176]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    a9e2:	220e      	movs	r2, #14
    a9e4:	18ba      	adds	r2, r7, r2
    a9e6:	8812      	ldrh	r2, [r2, #0]
    a9e8:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a9ea:	4b2b      	ldr	r3, [pc, #172]	; (aa98 <w5500_write_socket_tcp+0x3a8>)
    a9ec:	2202      	movs	r2, #2
    a9ee:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a9f0:	4b22      	ldr	r3, [pc, #136]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a9f2:	781b      	ldrb	r3, [r3, #0]
    a9f4:	3301      	adds	r3, #1
    a9f6:	b2da      	uxtb	r2, r3
    a9f8:	4b20      	ldr	r3, [pc, #128]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    a9fa:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a9fc:	1dfb      	adds	r3, r7, #7
    a9fe:	781a      	ldrb	r2, [r3, #0]
    aa00:	4927      	ldr	r1, [pc, #156]	; (aaa0 <w5500_write_socket_tcp+0x3b0>)
    aa02:	23bc      	movs	r3, #188	; 0xbc
    aa04:	00db      	lsls	r3, r3, #3
    aa06:	4827      	ldr	r0, [pc, #156]	; (aaa4 <w5500_write_socket_tcp+0x3b4>)
    aa08:	4342      	muls	r2, r0
    aa0a:	188a      	adds	r2, r1, r2
    aa0c:	18d3      	adds	r3, r2, r3
    aa0e:	3303      	adds	r3, #3
    aa10:	781a      	ldrb	r2, [r3, #0]
    aa12:	2100      	movs	r1, #0
    aa14:	400a      	ands	r2, r1
    aa16:	1c11      	adds	r1, r2, #0
    aa18:	224c      	movs	r2, #76	; 0x4c
    aa1a:	430a      	orrs	r2, r1
    aa1c:	701a      	strb	r2, [r3, #0]
    aa1e:	785a      	ldrb	r2, [r3, #1]
    aa20:	2100      	movs	r1, #0
    aa22:	400a      	ands	r2, r1
    aa24:	1c11      	adds	r1, r2, #0
    aa26:	221d      	movs	r2, #29
    aa28:	430a      	orrs	r2, r1
    aa2a:	705a      	strb	r2, [r3, #1]
		break;
    aa2c:	e09d      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
		case TCP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    aa2e:	4b15      	ldr	r3, [pc, #84]	; (aa84 <w5500_write_socket_tcp+0x394>)
    aa30:	2202      	movs	r2, #2
    aa32:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    aa34:	1dfb      	adds	r3, r7, #7
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	015b      	lsls	r3, r3, #5
    aa3a:	b21b      	sxth	r3, r3
    aa3c:	2208      	movs	r2, #8
    aa3e:	4313      	orrs	r3, r2
    aa40:	b21b      	sxth	r3, r3
    aa42:	b29a      	uxth	r2, r3
    aa44:	4b10      	ldr	r3, [pc, #64]	; (aa88 <w5500_write_socket_tcp+0x398>)
    aa46:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    aa48:	1dfb      	adds	r3, r7, #7
    aa4a:	781b      	ldrb	r3, [r3, #0]
    aa4c:	015b      	lsls	r3, r3, #5
    aa4e:	3310      	adds	r3, #16
    aa50:	001a      	movs	r2, r3
    aa52:	4b0e      	ldr	r3, [pc, #56]	; (aa8c <w5500_write_socket_tcp+0x39c>)
    aa54:	18d3      	adds	r3, r2, r3
    aa56:	1d5a      	adds	r2, r3, #5
    aa58:	4b0d      	ldr	r3, [pc, #52]	; (aa90 <w5500_write_socket_tcp+0x3a0>)
    aa5a:	601a      	str	r2, [r3, #0]
			len_buf=1;
    aa5c:	4b0d      	ldr	r3, [pc, #52]	; (aa94 <w5500_write_socket_tcp+0x3a4>)
    aa5e:	2201      	movs	r2, #1
    aa60:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    aa62:	4b0d      	ldr	r3, [pc, #52]	; (aa98 <w5500_write_socket_tcp+0x3a8>)
    aa64:	2201      	movs	r2, #1
    aa66:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    aa68:	4b04      	ldr	r3, [pc, #16]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    aa6a:	781b      	ldrb	r3, [r3, #0]
    aa6c:	3301      	adds	r3, #1
    aa6e:	b2da      	uxtb	r2, r3
    aa70:	4b02      	ldr	r3, [pc, #8]	; (aa7c <w5500_write_socket_tcp+0x38c>)
    aa72:	701a      	strb	r2, [r3, #0]
		break;
    aa74:	e079      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
    aa76:	46c0      	nop			; (mov r8, r8)
    aa78:	20000499 	.word	0x20000499
    aa7c:	2000049a 	.word	0x2000049a
    aa80:	0000cc6c 	.word	0x0000cc6c
    aa84:	20000480 	.word	0x20000480
    aa88:	20000482 	.word	0x20000482
    aa8c:	20003b04 	.word	0x20003b04
    aa90:	20003afc 	.word	0x20003afc
    aa94:	20000484 	.word	0x20000484
    aa98:	20003bb7 	.word	0x20003bb7
    aa9c:	20000486 	.word	0x20000486
    aaa0:	200005cc 	.word	0x200005cc
    aaa4:	000005e5 	.word	0x000005e5
    aaa8:	20003bb8 	.word	0x20003bb8
		case TCP_STATUS_CLR:																//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    aaac:	1dfb      	adds	r3, r7, #7
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	4a30      	ldr	r2, [pc, #192]	; (ab74 <w5500_write_socket_tcp+0x484>)
    aab2:	2110      	movs	r1, #16
    aab4:	015b      	lsls	r3, r3, #5
    aab6:	18d3      	adds	r3, r2, r3
    aab8:	185b      	adds	r3, r3, r1
    aaba:	795b      	ldrb	r3, [r3, #5]
    aabc:	06db      	lsls	r3, r3, #27
    aabe:	0fdb      	lsrs	r3, r3, #31
    aac0:	b2db      	uxtb	r3, r3
    aac2:	2b01      	cmp	r3, #1
    aac4:	d12b      	bne.n	ab1e <w5500_write_socket_tcp+0x42e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    aac6:	230e      	movs	r3, #14
    aac8:	18fb      	adds	r3, r7, r3
    aaca:	881b      	ldrh	r3, [r3, #0]
    aacc:	4a2a      	ldr	r2, [pc, #168]	; (ab78 <w5500_write_socket_tcp+0x488>)
    aace:	2110      	movs	r1, #16
    aad0:	54d1      	strb	r1, [r2, r3]
    aad2:	230e      	movs	r3, #14
    aad4:	18fb      	adds	r3, r7, r3
    aad6:	881a      	ldrh	r2, [r3, #0]
    aad8:	230e      	movs	r3, #14
    aada:	18fb      	adds	r3, r7, r3
    aadc:	3201      	adds	r2, #1
    aade:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    aae0:	4b26      	ldr	r3, [pc, #152]	; (ab7c <w5500_write_socket_tcp+0x48c>)
    aae2:	2202      	movs	r2, #2
    aae4:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    aae6:	1dfb      	adds	r3, r7, #7
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	015b      	lsls	r3, r3, #5
    aaec:	b21b      	sxth	r3, r3
    aaee:	2208      	movs	r2, #8
    aaf0:	4313      	orrs	r3, r2
    aaf2:	b21b      	sxth	r3, r3
    aaf4:	b29a      	uxth	r2, r3
    aaf6:	4b22      	ldr	r3, [pc, #136]	; (ab80 <w5500_write_socket_tcp+0x490>)
    aaf8:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    aafa:	4b22      	ldr	r3, [pc, #136]	; (ab84 <w5500_write_socket_tcp+0x494>)
    aafc:	4a1e      	ldr	r2, [pc, #120]	; (ab78 <w5500_write_socket_tcp+0x488>)
    aafe:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    ab00:	4b21      	ldr	r3, [pc, #132]	; (ab88 <w5500_write_socket_tcp+0x498>)
    ab02:	220e      	movs	r2, #14
    ab04:	18ba      	adds	r2, r7, r2
    ab06:	8812      	ldrh	r2, [r2, #0]
    ab08:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    ab0a:	4b20      	ldr	r3, [pc, #128]	; (ab8c <w5500_write_socket_tcp+0x49c>)
    ab0c:	2202      	movs	r2, #2
    ab0e:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    ab10:	4b1f      	ldr	r3, [pc, #124]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab12:	781b      	ldrb	r3, [r3, #0]
    ab14:	3301      	adds	r3, #1
    ab16:	b2da      	uxtb	r2, r3
    ab18:	4b1d      	ldr	r3, [pc, #116]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab1a:	701a      	strb	r2, [r3, #0]
				break;
    ab1c:	e025      	b.n	ab6a <w5500_write_socket_tcp+0x47a>
			}
			st_wr_w5500--;
    ab1e:	4b1c      	ldr	r3, [pc, #112]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	3b01      	subs	r3, #1
    ab24:	b2da      	uxtb	r2, r3
    ab26:	4b1a      	ldr	r3, [pc, #104]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab28:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    ab2a:	1dfb      	adds	r3, r7, #7
    ab2c:	781a      	ldrb	r2, [r3, #0]
    ab2e:	4919      	ldr	r1, [pc, #100]	; (ab94 <w5500_write_socket_tcp+0x4a4>)
    ab30:	23bc      	movs	r3, #188	; 0xbc
    ab32:	00db      	lsls	r3, r3, #3
    ab34:	4818      	ldr	r0, [pc, #96]	; (ab98 <w5500_write_socket_tcp+0x4a8>)
    ab36:	4342      	muls	r2, r0
    ab38:	188a      	adds	r2, r1, r2
    ab3a:	18d3      	adds	r3, r2, r3
    ab3c:	78da      	ldrb	r2, [r3, #3]
    ab3e:	791b      	ldrb	r3, [r3, #4]
    ab40:	021b      	lsls	r3, r3, #8
    ab42:	4313      	orrs	r3, r2
    ab44:	b29b      	uxth	r3, r3
    ab46:	2b00      	cmp	r3, #0
    ab48:	d10e      	bne.n	ab68 <w5500_write_socket_tcp+0x478>
			{
				st_wr_w5500=TCP_RD_FSR; 
    ab4a:	4b11      	ldr	r3, [pc, #68]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab4c:	2200      	movs	r2, #0
    ab4e:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    ab50:	2302      	movs	r3, #2
    ab52:	e00b      	b.n	ab6c <w5500_write_socket_tcp+0x47c>
			}
		break;
		case TCP_BK_TO_START:
			st_wr_w5500=TCP_RD_FSR;
    ab54:	4b0e      	ldr	r3, [pc, #56]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab56:	2200      	movs	r2, #0
    ab58:	701a      	strb	r2, [r3, #0]
			return PROC_OK;
    ab5a:	2301      	movs	r3, #1
    ab5c:	e006      	b.n	ab6c <w5500_write_socket_tcp+0x47c>
		break;
		default:
			st_wr_w5500=TCP_RD_FSR; return PROC_ER;
    ab5e:	4b0c      	ldr	r3, [pc, #48]	; (ab90 <w5500_write_socket_tcp+0x4a0>)
    ab60:	2200      	movs	r2, #0
    ab62:	701a      	strb	r2, [r3, #0]
    ab64:	2302      	movs	r3, #2
    ab66:	e001      	b.n	ab6c <w5500_write_socket_tcp+0x47c>
		break;
    ab68:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    ab6a:	2300      	movs	r3, #0
}
    ab6c:	0018      	movs	r0, r3
    ab6e:	46bd      	mov	sp, r7
    ab70:	b005      	add	sp, #20
    ab72:	bd90      	pop	{r4, r7, pc}
    ab74:	20003b04 	.word	0x20003b04
    ab78:	20003bb8 	.word	0x20003bb8
    ab7c:	20000480 	.word	0x20000480
    ab80:	20000482 	.word	0x20000482
    ab84:	20003afc 	.word	0x20003afc
    ab88:	20000484 	.word	0x20000484
    ab8c:	20003bb7 	.word	0x20003bb7
    ab90:	2000049a 	.word	0x2000049a
    ab94:	200005cc 	.word	0x200005cc
    ab98:	000005e5 	.word	0x000005e5

0000ab9c <cfg_init>:
CFG_1 cfg_1_tmp;
CFG_2 cfg_2;

void cfg_init(void)
//--------------------------------------------------------------------------
{
    ab9c:	b580      	push	{r7, lr}
    ab9e:	af00      	add	r7, sp, #0
	memset(&cfg_1    ,0x00,sizeof(CFG_1));
    aba0:	2380      	movs	r3, #128	; 0x80
    aba2:	005a      	lsls	r2, r3, #1
    aba4:	4b07      	ldr	r3, [pc, #28]	; (abc4 <cfg_init+0x28>)
    aba6:	2100      	movs	r1, #0
    aba8:	0018      	movs	r0, r3
    abaa:	4b07      	ldr	r3, [pc, #28]	; (abc8 <cfg_init+0x2c>)
    abac:	4798      	blx	r3
	memset(&cfg_1_tmp,0x00,sizeof(CFG_1));
    abae:	2380      	movs	r3, #128	; 0x80
    abb0:	005a      	lsls	r2, r3, #1
    abb2:	4b06      	ldr	r3, [pc, #24]	; (abcc <cfg_init+0x30>)
    abb4:	2100      	movs	r1, #0
    abb6:	0018      	movs	r0, r3
    abb8:	4b03      	ldr	r3, [pc, #12]	; (abc8 <cfg_init+0x2c>)
    abba:	4798      	blx	r3
}
    abbc:	46c0      	nop			; (mov r8, r8)
    abbe:	46bd      	mov	sp, r7
    abc0:	bd80      	pop	{r7, pc}
    abc2:	46c0      	nop			; (mov r8, r8)
    abc4:	20003dc4 	.word	0x20003dc4
    abc8:	0000c93d 	.word	0x0000c93d
    abcc:	20003cc4 	.word	0x20003cc4

0000abd0 <cfg_read>:

WORD cfg_read(void)
//--------------------------------------------------------------------------
{
    abd0:	b590      	push	{r4, r7, lr}
    abd2:	b083      	sub	sp, #12
    abd4:	af00      	add	r7, sp, #0
	WORD size = 0;
    abd6:	1dbb      	adds	r3, r7, #6
    abd8:	2200      	movs	r2, #0
    abda:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_1_ADDR,&cfg_1,sizeof(CFG_1));
    abdc:	1dbc      	adds	r4, r7, #6
    abde:	2380      	movs	r3, #128	; 0x80
    abe0:	005a      	lsls	r2, r3, #1
    abe2:	4910      	ldr	r1, [pc, #64]	; (ac24 <cfg_read+0x54>)
    abe4:	23fc      	movs	r3, #252	; 0xfc
    abe6:	029b      	lsls	r3, r3, #10
    abe8:	0018      	movs	r0, r3
    abea:	4b0f      	ldr	r3, [pc, #60]	; (ac28 <cfg_read+0x58>)
    abec:	4798      	blx	r3
    abee:	0003      	movs	r3, r0
    abf0:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_1)) {return(CFG_ERR);}
    abf2:	1dbb      	adds	r3, r7, #6
    abf4:	881a      	ldrh	r2, [r3, #0]
    abf6:	2380      	movs	r3, #128	; 0x80
    abf8:	005b      	lsls	r3, r3, #1
    abfa:	429a      	cmp	r2, r3
    abfc:	d001      	beq.n	ac02 <cfg_read+0x32>
    abfe:	2300      	movs	r3, #0
    ac00:	e00b      	b.n	ac1a <cfg_read+0x4a>

	if(crc16_ccit((BYTE*)&cfg_1,sizeof(CFG_1))!=0){return(CFG_ERR);}
    ac02:	2380      	movs	r3, #128	; 0x80
    ac04:	005a      	lsls	r2, r3, #1
    ac06:	4b07      	ldr	r3, [pc, #28]	; (ac24 <cfg_read+0x54>)
    ac08:	0011      	movs	r1, r2
    ac0a:	0018      	movs	r0, r3
    ac0c:	4b07      	ldr	r3, [pc, #28]	; (ac2c <cfg_read+0x5c>)
    ac0e:	4798      	blx	r3
    ac10:	1e03      	subs	r3, r0, #0
    ac12:	d001      	beq.n	ac18 <cfg_read+0x48>
    ac14:	2300      	movs	r3, #0
    ac16:	e000      	b.n	ac1a <cfg_read+0x4a>

	return(CFG_OK);
    ac18:	2301      	movs	r3, #1
}
    ac1a:	0018      	movs	r0, r3
    ac1c:	46bd      	mov	sp, r7
    ac1e:	b003      	add	sp, #12
    ac20:	bd90      	pop	{r4, r7, pc}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	20003dc4 	.word	0x20003dc4
    ac28:	00006995 	.word	0x00006995
    ac2c:	00005d45 	.word	0x00005d45

0000ac30 <cfg_2_read>:

WORD cfg_2_read(void)
//--------------------------------------------------------------------------
{
    ac30:	b590      	push	{r4, r7, lr}
    ac32:	b083      	sub	sp, #12
    ac34:	af00      	add	r7, sp, #0
	WORD size = 0;
    ac36:	1dbb      	adds	r3, r7, #6
    ac38:	2200      	movs	r2, #0
    ac3a:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_2_ADDR,&cfg_2,sizeof(CFG_2));
    ac3c:	1dbc      	adds	r4, r7, #6
    ac3e:	2380      	movs	r3, #128	; 0x80
    ac40:	005a      	lsls	r2, r3, #1
    ac42:	4b0f      	ldr	r3, [pc, #60]	; (ac80 <cfg_2_read+0x50>)
    ac44:	480f      	ldr	r0, [pc, #60]	; (ac84 <cfg_2_read+0x54>)
    ac46:	0019      	movs	r1, r3
    ac48:	4b0f      	ldr	r3, [pc, #60]	; (ac88 <cfg_2_read+0x58>)
    ac4a:	4798      	blx	r3
    ac4c:	0003      	movs	r3, r0
    ac4e:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_2)) {return(CFG_ERR);}
    ac50:	1dbb      	adds	r3, r7, #6
    ac52:	881a      	ldrh	r2, [r3, #0]
    ac54:	2380      	movs	r3, #128	; 0x80
    ac56:	005b      	lsls	r3, r3, #1
    ac58:	429a      	cmp	r2, r3
    ac5a:	d001      	beq.n	ac60 <cfg_2_read+0x30>
    ac5c:	2300      	movs	r3, #0
    ac5e:	e00b      	b.n	ac78 <cfg_2_read+0x48>

	if(crc16_ccit((BYTE*)&cfg_2,sizeof(CFG_2))!=0){return(CFG_ERR);}
    ac60:	2380      	movs	r3, #128	; 0x80
    ac62:	005a      	lsls	r2, r3, #1
    ac64:	4b06      	ldr	r3, [pc, #24]	; (ac80 <cfg_2_read+0x50>)
    ac66:	0011      	movs	r1, r2
    ac68:	0018      	movs	r0, r3
    ac6a:	4b08      	ldr	r3, [pc, #32]	; (ac8c <cfg_2_read+0x5c>)
    ac6c:	4798      	blx	r3
    ac6e:	1e03      	subs	r3, r0, #0
    ac70:	d001      	beq.n	ac76 <cfg_2_read+0x46>
    ac72:	2300      	movs	r3, #0
    ac74:	e000      	b.n	ac78 <cfg_2_read+0x48>

	return(CFG_OK);
    ac76:	2301      	movs	r3, #1
}
    ac78:	0018      	movs	r0, r3
    ac7a:	46bd      	mov	sp, r7
    ac7c:	b003      	add	sp, #12
    ac7e:	bd90      	pop	{r4, r7, pc}
    ac80:	20003bc4 	.word	0x20003bc4
    ac84:	0003f100 	.word	0x0003f100
    ac88:	00006995 	.word	0x00006995
    ac8c:	00005d45 	.word	0x00005d45

0000ac90 <cfg_default>:

void cfg_default(void)
//--------------------------------------------------------------------------
{
    ac90:	b5b0      	push	{r4, r5, r7, lr}
    ac92:	b082      	sub	sp, #8
    ac94:	af00      	add	r7, sp, #0
	WORD  i=0;
    ac96:	1dbb      	adds	r3, r7, #6
    ac98:	2200      	movs	r2, #0
    ac9a:	801a      	strh	r2, [r3, #0]

	cfg_1.guid = 0xFAC6097A;
    ac9c:	4bbc      	ldr	r3, [pc, #752]	; (af90 <cfg_default+0x300>)
    ac9e:	781a      	ldrb	r2, [r3, #0]
    aca0:	2100      	movs	r1, #0
    aca2:	400a      	ands	r2, r1
    aca4:	1c11      	adds	r1, r2, #0
    aca6:	227a      	movs	r2, #122	; 0x7a
    aca8:	430a      	orrs	r2, r1
    acaa:	701a      	strb	r2, [r3, #0]
    acac:	785a      	ldrb	r2, [r3, #1]
    acae:	2100      	movs	r1, #0
    acb0:	400a      	ands	r2, r1
    acb2:	1c11      	adds	r1, r2, #0
    acb4:	2209      	movs	r2, #9
    acb6:	430a      	orrs	r2, r1
    acb8:	705a      	strb	r2, [r3, #1]
    acba:	789a      	ldrb	r2, [r3, #2]
    acbc:	2100      	movs	r1, #0
    acbe:	400a      	ands	r2, r1
    acc0:	1c11      	adds	r1, r2, #0
    acc2:	223a      	movs	r2, #58	; 0x3a
    acc4:	4252      	negs	r2, r2
    acc6:	430a      	orrs	r2, r1
    acc8:	709a      	strb	r2, [r3, #2]
    acca:	78da      	ldrb	r2, [r3, #3]
    accc:	2100      	movs	r1, #0
    acce:	400a      	ands	r2, r1
    acd0:	1c11      	adds	r1, r2, #0
    acd2:	2206      	movs	r2, #6
    acd4:	4252      	negs	r2, r2
    acd6:	430a      	orrs	r2, r1
    acd8:	70da      	strb	r2, [r3, #3]
	
	cfg_1.in_numb=102;
    acda:	4bad      	ldr	r3, [pc, #692]	; (af90 <cfg_default+0x300>)
    acdc:	2268      	movs	r2, #104	; 0x68
    acde:	5c99      	ldrb	r1, [r3, r2]
    ace0:	2000      	movs	r0, #0
    ace2:	4001      	ands	r1, r0
    ace4:	1c08      	adds	r0, r1, #0
    ace6:	2166      	movs	r1, #102	; 0x66
    ace8:	4301      	orrs	r1, r0
    acea:	5499      	strb	r1, [r3, r2]
    acec:	189b      	adds	r3, r3, r2
    acee:	785a      	ldrb	r2, [r3, #1]
    acf0:	2100      	movs	r1, #0
    acf2:	400a      	ands	r2, r1
    acf4:	705a      	strb	r2, [r3, #1]
	
	//............................................................................

	cfg_1.com_network.src_port    = 4000;
    acf6:	4ba6      	ldr	r3, [pc, #664]	; (af90 <cfg_default+0x300>)
    acf8:	2226      	movs	r2, #38	; 0x26
    acfa:	5c99      	ldrb	r1, [r3, r2]
    acfc:	2000      	movs	r0, #0
    acfe:	4001      	ands	r1, r0
    ad00:	1c08      	adds	r0, r1, #0
    ad02:	2160      	movs	r1, #96	; 0x60
    ad04:	4249      	negs	r1, r1
    ad06:	4301      	orrs	r1, r0
    ad08:	5499      	strb	r1, [r3, r2]
    ad0a:	2227      	movs	r2, #39	; 0x27
    ad0c:	5c99      	ldrb	r1, [r3, r2]
    ad0e:	2000      	movs	r0, #0
    ad10:	4001      	ands	r1, r0
    ad12:	1c08      	adds	r0, r1, #0
    ad14:	210f      	movs	r1, #15
    ad16:	4301      	orrs	r1, r0
    ad18:	5499      	strb	r1, [r3, r2]
	
	//ip 192.168.1.102 /SIPR
	cfg_1.com_network.ip_addr[0]=0xC0;//192
    ad1a:	4b9d      	ldr	r3, [pc, #628]	; (af90 <cfg_default+0x300>)
    ad1c:	2228      	movs	r2, #40	; 0x28
    ad1e:	21c0      	movs	r1, #192	; 0xc0
    ad20:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[1]=0xA8;//168
    ad22:	4b9b      	ldr	r3, [pc, #620]	; (af90 <cfg_default+0x300>)
    ad24:	2229      	movs	r2, #41	; 0x29
    ad26:	21a8      	movs	r1, #168	; 0xa8
    ad28:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[2]=0x01;//1
    ad2a:	4b99      	ldr	r3, [pc, #612]	; (af90 <cfg_default+0x300>)
    ad2c:	222a      	movs	r2, #42	; 0x2a
    ad2e:	2101      	movs	r1, #1
    ad30:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[3]=0x65;//101
    ad32:	4b97      	ldr	r3, [pc, #604]	; (af90 <cfg_default+0x300>)
    ad34:	222b      	movs	r2, #43	; 0x2b
    ad36:	2165      	movs	r1, #101	; 0x65
    ad38:	5499      	strb	r1, [r3, r2]

	//mask 255.255.255.0 /SUBR
	cfg_1.com_network.ip_mask[0]=0xFF;
    ad3a:	4b95      	ldr	r3, [pc, #596]	; (af90 <cfg_default+0x300>)
    ad3c:	222c      	movs	r2, #44	; 0x2c
    ad3e:	21ff      	movs	r1, #255	; 0xff
    ad40:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[1]=0xFF;
    ad42:	4b93      	ldr	r3, [pc, #588]	; (af90 <cfg_default+0x300>)
    ad44:	222d      	movs	r2, #45	; 0x2d
    ad46:	21ff      	movs	r1, #255	; 0xff
    ad48:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[2]=0xFF;
    ad4a:	4b91      	ldr	r3, [pc, #580]	; (af90 <cfg_default+0x300>)
    ad4c:	222e      	movs	r2, #46	; 0x2e
    ad4e:	21ff      	movs	r1, #255	; 0xff
    ad50:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[3]=0x00;
    ad52:	4b8f      	ldr	r3, [pc, #572]	; (af90 <cfg_default+0x300>)
    ad54:	222f      	movs	r2, #47	; 0x2f
    ad56:	2100      	movs	r1, #0
    ad58:	5499      	strb	r1, [r3, r2]
	
	//gateway 192.168.1.1 /GAR
	cfg_1.com_network.ip_gate[0]=0xC0;
    ad5a:	4b8d      	ldr	r3, [pc, #564]	; (af90 <cfg_default+0x300>)
    ad5c:	2230      	movs	r2, #48	; 0x30
    ad5e:	21c0      	movs	r1, #192	; 0xc0
    ad60:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[1]=0xA8;
    ad62:	4b8b      	ldr	r3, [pc, #556]	; (af90 <cfg_default+0x300>)
    ad64:	2231      	movs	r2, #49	; 0x31
    ad66:	21a8      	movs	r1, #168	; 0xa8
    ad68:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[2]=0x01;
    ad6a:	4b89      	ldr	r3, [pc, #548]	; (af90 <cfg_default+0x300>)
    ad6c:	2232      	movs	r2, #50	; 0x32
    ad6e:	2101      	movs	r1, #1
    ad70:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[3]=0x01;
    ad72:	4b87      	ldr	r3, [pc, #540]	; (af90 <cfg_default+0x300>)
    ad74:	2233      	movs	r2, #51	; 0x33
    ad76:	2101      	movs	r1, #1
    ad78:	5499      	strb	r1, [r3, r2]
	
	memcpy(cfg_1.name, NAME, sizeof(NAME));
    ad7a:	4986      	ldr	r1, [pc, #536]	; (af94 <cfg_default+0x304>)
    ad7c:	4b86      	ldr	r3, [pc, #536]	; (af98 <cfg_default+0x308>)
    ad7e:	220c      	movs	r2, #12
    ad80:	0018      	movs	r0, r3
    ad82:	4b86      	ldr	r3, [pc, #536]	; (af9c <cfg_default+0x30c>)
    ad84:	4798      	blx	r3
	cfg_1.name[sizeof(NAME) + 1] = 0x00;
    ad86:	4b82      	ldr	r3, [pc, #520]	; (af90 <cfg_default+0x300>)
    ad88:	2200      	movs	r2, #0
    ad8a:	745a      	strb	r2, [r3, #17]
	
	//...........................................................................
	for(i=0;i<4;++i)
    ad8c:	1dbb      	adds	r3, r7, #6
    ad8e:	2200      	movs	r2, #0
    ad90:	801a      	strh	r2, [r3, #0]
    ad92:	e0d0      	b.n	af36 <cfg_default+0x2a6>
	{
		cfg_1.sock_rs485[i].mode		= UDP;
    ad94:	1dbb      	adds	r3, r7, #6
    ad96:	881a      	ldrh	r2, [r3, #0]
    ad98:	497d      	ldr	r1, [pc, #500]	; (af90 <cfg_default+0x300>)
    ad9a:	2035      	movs	r0, #53	; 0x35
    ad9c:	0013      	movs	r3, r2
    ad9e:	005b      	lsls	r3, r3, #1
    ada0:	189b      	adds	r3, r3, r2
    ada2:	009b      	lsls	r3, r3, #2
    ada4:	189b      	adds	r3, r3, r2
    ada6:	18cb      	adds	r3, r1, r3
    ada8:	181b      	adds	r3, r3, r0
    adaa:	2201      	movs	r2, #1
    adac:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].pl			= GATE;
    adae:	1dbb      	adds	r3, r7, #6
    adb0:	881a      	ldrh	r2, [r3, #0]
    adb2:	4977      	ldr	r1, [pc, #476]	; (af90 <cfg_default+0x300>)
    adb4:	2036      	movs	r0, #54	; 0x36
    adb6:	0013      	movs	r3, r2
    adb8:	005b      	lsls	r3, r3, #1
    adba:	189b      	adds	r3, r3, r2
    adbc:	009b      	lsls	r3, r3, #2
    adbe:	189b      	adds	r3, r3, r2
    adc0:	18cb      	adds	r3, r1, r3
    adc2:	181b      	adds	r3, r3, r0
    adc4:	2201      	movs	r2, #1
    adc6:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].en			= FALSE;
    adc8:	1dbb      	adds	r3, r7, #6
    adca:	881a      	ldrh	r2, [r3, #0]
    adcc:	4970      	ldr	r1, [pc, #448]	; (af90 <cfg_default+0x300>)
    adce:	2034      	movs	r0, #52	; 0x34
    add0:	0013      	movs	r3, r2
    add2:	005b      	lsls	r3, r3, #1
    add4:	189b      	adds	r3, r3, r2
    add6:	009b      	lsls	r3, r3, #2
    add8:	189b      	adds	r3, r3, r2
    adda:	18cb      	adds	r3, r1, r3
    addc:	181b      	adds	r3, r3, r0
    adde:	2200      	movs	r2, #0
    ade0:	701a      	strb	r2, [r3, #0]
		
		cfg_1.sock_rs485[i].src_port	=4001+i;
    ade2:	1dbb      	adds	r3, r7, #6
    ade4:	881a      	ldrh	r2, [r3, #0]
    ade6:	1dbb      	adds	r3, r7, #6
    ade8:	881b      	ldrh	r3, [r3, #0]
    adea:	496d      	ldr	r1, [pc, #436]	; (afa0 <cfg_default+0x310>)
    adec:	468c      	mov	ip, r1
    adee:	4463      	add	r3, ip
    adf0:	b299      	uxth	r1, r3
    adf2:	4867      	ldr	r0, [pc, #412]	; (af90 <cfg_default+0x300>)
    adf4:	0013      	movs	r3, r2
    adf6:	005b      	lsls	r3, r3, #1
    adf8:	189b      	adds	r3, r3, r2
    adfa:	009b      	lsls	r3, r3, #2
    adfc:	189b      	adds	r3, r3, r2
    adfe:	18c3      	adds	r3, r0, r3
    ae00:	3330      	adds	r3, #48	; 0x30
    ae02:	3307      	adds	r3, #7
    ae04:	22ff      	movs	r2, #255	; 0xff
    ae06:	400a      	ands	r2, r1
    ae08:	0014      	movs	r4, r2
    ae0a:	781a      	ldrb	r2, [r3, #0]
    ae0c:	2000      	movs	r0, #0
    ae0e:	4002      	ands	r2, r0
    ae10:	1c10      	adds	r0, r2, #0
    ae12:	1c22      	adds	r2, r4, #0
    ae14:	4302      	orrs	r2, r0
    ae16:	701a      	strb	r2, [r3, #0]
    ae18:	0a0a      	lsrs	r2, r1, #8
    ae1a:	b290      	uxth	r0, r2
    ae1c:	785a      	ldrb	r2, [r3, #1]
    ae1e:	2100      	movs	r1, #0
    ae20:	400a      	ands	r2, r1
    ae22:	1c11      	adds	r1, r2, #0
    ae24:	1c02      	adds	r2, r0, #0
    ae26:	430a      	orrs	r2, r1
    ae28:	705a      	strb	r2, [r3, #1]
		
		cfg_1.sock_rs485[i].baud		=38400;
    ae2a:	1dbb      	adds	r3, r7, #6
    ae2c:	881a      	ldrh	r2, [r3, #0]
    ae2e:	4958      	ldr	r1, [pc, #352]	; (af90 <cfg_default+0x300>)
    ae30:	0013      	movs	r3, r2
    ae32:	005b      	lsls	r3, r3, #1
    ae34:	189b      	adds	r3, r3, r2
    ae36:	009b      	lsls	r3, r3, #2
    ae38:	189b      	adds	r3, r3, r2
    ae3a:	18cb      	adds	r3, r1, r3
    ae3c:	3330      	adds	r3, #48	; 0x30
    ae3e:	3309      	adds	r3, #9
    ae40:	781a      	ldrb	r2, [r3, #0]
    ae42:	2100      	movs	r1, #0
    ae44:	400a      	ands	r2, r1
    ae46:	701a      	strb	r2, [r3, #0]
    ae48:	785a      	ldrb	r2, [r3, #1]
    ae4a:	2100      	movs	r1, #0
    ae4c:	400a      	ands	r2, r1
    ae4e:	1c11      	adds	r1, r2, #0
    ae50:	226a      	movs	r2, #106	; 0x6a
    ae52:	4252      	negs	r2, r2
    ae54:	430a      	orrs	r2, r1
    ae56:	705a      	strb	r2, [r3, #1]
    ae58:	789a      	ldrb	r2, [r3, #2]
    ae5a:	2100      	movs	r1, #0
    ae5c:	400a      	ands	r2, r1
    ae5e:	709a      	strb	r2, [r3, #2]
    ae60:	78da      	ldrb	r2, [r3, #3]
    ae62:	2100      	movs	r1, #0
    ae64:	400a      	ands	r2, r1
    ae66:	70da      	strb	r2, [r3, #3]
		cfg_1.sock_rs485[i].bsize		=8;
    ae68:	1dbb      	adds	r3, r7, #6
    ae6a:	881a      	ldrh	r2, [r3, #0]
    ae6c:	4948      	ldr	r1, [pc, #288]	; (af90 <cfg_default+0x300>)
    ae6e:	2038      	movs	r0, #56	; 0x38
    ae70:	0013      	movs	r3, r2
    ae72:	005b      	lsls	r3, r3, #1
    ae74:	189b      	adds	r3, r3, r2
    ae76:	009b      	lsls	r3, r3, #2
    ae78:	189b      	adds	r3, r3, r2
    ae7a:	18cb      	adds	r3, r1, r3
    ae7c:	181b      	adds	r3, r3, r0
    ae7e:	795a      	ldrb	r2, [r3, #5]
    ae80:	210f      	movs	r1, #15
    ae82:	438a      	bics	r2, r1
    ae84:	1c11      	adds	r1, r2, #0
    ae86:	2208      	movs	r2, #8
    ae88:	430a      	orrs	r2, r1
    ae8a:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].parity		=0;
    ae8c:	1dbb      	adds	r3, r7, #6
    ae8e:	881a      	ldrh	r2, [r3, #0]
    ae90:	493f      	ldr	r1, [pc, #252]	; (af90 <cfg_default+0x300>)
    ae92:	2038      	movs	r0, #56	; 0x38
    ae94:	0013      	movs	r3, r2
    ae96:	005b      	lsls	r3, r3, #1
    ae98:	189b      	adds	r3, r3, r2
    ae9a:	009b      	lsls	r3, r3, #2
    ae9c:	189b      	adds	r3, r3, r2
    ae9e:	18cb      	adds	r3, r1, r3
    aea0:	181b      	adds	r3, r3, r0
    aea2:	795a      	ldrb	r2, [r3, #5]
    aea4:	2130      	movs	r1, #48	; 0x30
    aea6:	438a      	bics	r2, r1
    aea8:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].stop		=0;
    aeaa:	1dbb      	adds	r3, r7, #6
    aeac:	881a      	ldrh	r2, [r3, #0]
    aeae:	4938      	ldr	r1, [pc, #224]	; (af90 <cfg_default+0x300>)
    aeb0:	2038      	movs	r0, #56	; 0x38
    aeb2:	0013      	movs	r3, r2
    aeb4:	005b      	lsls	r3, r3, #1
    aeb6:	189b      	adds	r3, r3, r2
    aeb8:	009b      	lsls	r3, r3, #2
    aeba:	189b      	adds	r3, r3, r2
    aebc:	18cb      	adds	r3, r1, r3
    aebe:	181b      	adds	r3, r3, r0
    aec0:	795a      	ldrb	r2, [r3, #5]
    aec2:	213f      	movs	r1, #63	; 0x3f
    aec4:	400a      	ands	r2, r1
    aec6:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].tout		=100;
    aec8:	1dbb      	adds	r3, r7, #6
    aeca:	881a      	ldrh	r2, [r3, #0]
    aecc:	4930      	ldr	r1, [pc, #192]	; (af90 <cfg_default+0x300>)
    aece:	0013      	movs	r3, r2
    aed0:	005b      	lsls	r3, r3, #1
    aed2:	189b      	adds	r3, r3, r2
    aed4:	009b      	lsls	r3, r3, #2
    aed6:	189b      	adds	r3, r3, r2
    aed8:	18cb      	adds	r3, r1, r3
    aeda:	3338      	adds	r3, #56	; 0x38
    aedc:	3307      	adds	r3, #7
    aede:	781a      	ldrb	r2, [r3, #0]
    aee0:	2100      	movs	r1, #0
    aee2:	400a      	ands	r2, r1
    aee4:	1c11      	adds	r1, r2, #0
    aee6:	2264      	movs	r2, #100	; 0x64
    aee8:	430a      	orrs	r2, r1
    aeea:	701a      	strb	r2, [r3, #0]
    aeec:	785a      	ldrb	r2, [r3, #1]
    aeee:	2100      	movs	r1, #0
    aef0:	400a      	ands	r2, r1
    aef2:	705a      	strb	r2, [r3, #1]
		
		memset(cfg_1.access[i].ip, 0, 4*4);
    aef4:	1dbb      	adds	r3, r7, #6
    aef6:	881a      	ldrh	r2, [r3, #0]
    aef8:	0013      	movs	r3, r2
    aefa:	00db      	lsls	r3, r3, #3
    aefc:	189b      	adds	r3, r3, r2
    aefe:	005b      	lsls	r3, r3, #1
    af00:	3368      	adds	r3, #104	; 0x68
    af02:	001a      	movs	r2, r3
    af04:	4b22      	ldr	r3, [pc, #136]	; (af90 <cfg_default+0x300>)
    af06:	18d3      	adds	r3, r2, r3
    af08:	3304      	adds	r3, #4
    af0a:	2210      	movs	r2, #16
    af0c:	2100      	movs	r1, #0
    af0e:	0018      	movs	r0, r3
    af10:	4b24      	ldr	r3, [pc, #144]	; (afa4 <cfg_default+0x314>)
    af12:	4798      	blx	r3
		cfg_1.access[i].en = 1;
    af14:	1dbb      	adds	r3, r7, #6
    af16:	881a      	ldrh	r2, [r3, #0]
    af18:	491d      	ldr	r1, [pc, #116]	; (af90 <cfg_default+0x300>)
    af1a:	206a      	movs	r0, #106	; 0x6a
    af1c:	0013      	movs	r3, r2
    af1e:	00db      	lsls	r3, r3, #3
    af20:	189b      	adds	r3, r3, r2
    af22:	005b      	lsls	r3, r3, #1
    af24:	18cb      	adds	r3, r1, r3
    af26:	181b      	adds	r3, r3, r0
    af28:	2201      	movs	r2, #1
    af2a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;++i)
    af2c:	1dbb      	adds	r3, r7, #6
    af2e:	1dba      	adds	r2, r7, #6
    af30:	8812      	ldrh	r2, [r2, #0]
    af32:	3201      	adds	r2, #1
    af34:	801a      	strh	r2, [r3, #0]
    af36:	1dbb      	adds	r3, r7, #6
    af38:	881b      	ldrh	r3, [r3, #0]
    af3a:	2b03      	cmp	r3, #3
    af3c:	d800      	bhi.n	af40 <cfg_default+0x2b0>
    af3e:	e729      	b.n	ad94 <cfg_default+0x104>

	}
	cfg_1.cs=crc16_ccit(((BYTE *)&cfg_1),sizeof(CFG_1)-2);
    af40:	4b13      	ldr	r3, [pc, #76]	; (af90 <cfg_default+0x300>)
    af42:	21fe      	movs	r1, #254	; 0xfe
    af44:	0018      	movs	r0, r3
    af46:	4b18      	ldr	r3, [pc, #96]	; (afa8 <cfg_default+0x318>)
    af48:	4798      	blx	r3
    af4a:	0003      	movs	r3, r0
    af4c:	0019      	movs	r1, r3
    af4e:	4b10      	ldr	r3, [pc, #64]	; (af90 <cfg_default+0x300>)
    af50:	22fe      	movs	r2, #254	; 0xfe
    af52:	20ff      	movs	r0, #255	; 0xff
    af54:	4008      	ands	r0, r1
    af56:	0005      	movs	r5, r0
    af58:	5c98      	ldrb	r0, [r3, r2]
    af5a:	2400      	movs	r4, #0
    af5c:	4020      	ands	r0, r4
    af5e:	1c04      	adds	r4, r0, #0
    af60:	1c28      	adds	r0, r5, #0
    af62:	4320      	orrs	r0, r4
    af64:	5498      	strb	r0, [r3, r2]
    af66:	0a09      	lsrs	r1, r1, #8
    af68:	b288      	uxth	r0, r1
    af6a:	189b      	adds	r3, r3, r2
    af6c:	785a      	ldrb	r2, [r3, #1]
    af6e:	2100      	movs	r1, #0
    af70:	400a      	ands	r2, r1
    af72:	1c11      	adds	r1, r2, #0
    af74:	1c02      	adds	r2, r0, #0
    af76:	430a      	orrs	r2, r1
    af78:	705a      	strb	r2, [r3, #1]
	//..............................................................................
	cfg_save();
    af7a:	f000 f87f 	bl	b07c <cfg_save>
	log_clear();
    af7e:	4b0b      	ldr	r3, [pc, #44]	; (afac <cfg_default+0x31c>)
    af80:	4798      	blx	r3
	acc(DROP);
    af82:	2002      	movs	r0, #2
    af84:	4b0a      	ldr	r3, [pc, #40]	; (afb0 <cfg_default+0x320>)
    af86:	4798      	blx	r3
}
    af88:	46c0      	nop			; (mov r8, r8)
    af8a:	46bd      	mov	sp, r7
    af8c:	b002      	add	sp, #8
    af8e:	bdb0      	pop	{r4, r5, r7, pc}
    af90:	20003dc4 	.word	0x20003dc4
    af94:	0000cc88 	.word	0x0000cc88
    af98:	20003dc8 	.word	0x20003dc8
    af9c:	0000c8b9 	.word	0x0000c8b9
    afa0:	00000fa1 	.word	0x00000fa1
    afa4:	0000c93d 	.word	0x0000c93d
    afa8:	00005d45 	.word	0x00005d45
    afac:	000046b9 	.word	0x000046b9
    afb0:	00004215 	.word	0x00004215

0000afb4 <cfg_check>:

void cfg_check()
//--------------------------------------------------------------------------
{
    afb4:	b590      	push	{r4, r7, lr}
    afb6:	b083      	sub	sp, #12
    afb8:	af00      	add	r7, sp, #0
	BYTE i = 0;
    afba:	1dfb      	adds	r3, r7, #7
    afbc:	2200      	movs	r2, #0
    afbe:	701a      	strb	r2, [r3, #0]
	
	for(i=0;i<4;i++)
    afc0:	1dfb      	adds	r3, r7, #7
    afc2:	2200      	movs	r2, #0
    afc4:	701a      	strb	r2, [r3, #0]
    afc6:	e04d      	b.n	b064 <cfg_check+0xb0>
	{
		port[i].tout_port=cfg_1.sock_rs485[i].tout;
    afc8:	1dfb      	adds	r3, r7, #7
    afca:	7819      	ldrb	r1, [r3, #0]
    afcc:	1dfb      	adds	r3, r7, #7
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	4828      	ldr	r0, [pc, #160]	; (b074 <cfg_check+0xc0>)
    afd2:	0013      	movs	r3, r2
    afd4:	005b      	lsls	r3, r3, #1
    afd6:	189b      	adds	r3, r3, r2
    afd8:	009b      	lsls	r3, r3, #2
    afda:	189b      	adds	r3, r3, r2
    afdc:	18c3      	adds	r3, r0, r3
    afde:	3338      	adds	r3, #56	; 0x38
    afe0:	79da      	ldrb	r2, [r3, #7]
    afe2:	7a1b      	ldrb	r3, [r3, #8]
    afe4:	021b      	lsls	r3, r3, #8
    afe6:	4313      	orrs	r3, r2
    afe8:	b29c      	uxth	r4, r3
    afea:	4823      	ldr	r0, [pc, #140]	; (b078 <cfg_check+0xc4>)
    afec:	2386      	movs	r3, #134	; 0x86
    afee:	009a      	lsls	r2, r3, #2
    aff0:	000b      	movs	r3, r1
    aff2:	00db      	lsls	r3, r3, #3
    aff4:	185b      	adds	r3, r3, r1
    aff6:	019b      	lsls	r3, r3, #6
    aff8:	18c3      	adds	r3, r0, r3
    affa:	189b      	adds	r3, r3, r2
    affc:	1c22      	adds	r2, r4, #0
    affe:	801a      	strh	r2, [r3, #0]
		if ((port[i].tout_port < 50) || (port[i].tout_port > 2000))  {port[i].tout_port= 100;}
    b000:	1dfb      	adds	r3, r7, #7
    b002:	781a      	ldrb	r2, [r3, #0]
    b004:	481c      	ldr	r0, [pc, #112]	; (b078 <cfg_check+0xc4>)
    b006:	2386      	movs	r3, #134	; 0x86
    b008:	0099      	lsls	r1, r3, #2
    b00a:	0013      	movs	r3, r2
    b00c:	00db      	lsls	r3, r3, #3
    b00e:	189b      	adds	r3, r3, r2
    b010:	019b      	lsls	r3, r3, #6
    b012:	18c3      	adds	r3, r0, r3
    b014:	185b      	adds	r3, r3, r1
    b016:	881b      	ldrh	r3, [r3, #0]
    b018:	b29b      	uxth	r3, r3
    b01a:	2b31      	cmp	r3, #49	; 0x31
    b01c:	d910      	bls.n	b040 <cfg_check+0x8c>
    b01e:	1dfb      	adds	r3, r7, #7
    b020:	781a      	ldrb	r2, [r3, #0]
    b022:	4815      	ldr	r0, [pc, #84]	; (b078 <cfg_check+0xc4>)
    b024:	2386      	movs	r3, #134	; 0x86
    b026:	0099      	lsls	r1, r3, #2
    b028:	0013      	movs	r3, r2
    b02a:	00db      	lsls	r3, r3, #3
    b02c:	189b      	adds	r3, r3, r2
    b02e:	019b      	lsls	r3, r3, #6
    b030:	18c3      	adds	r3, r0, r3
    b032:	185b      	adds	r3, r3, r1
    b034:	881b      	ldrh	r3, [r3, #0]
    b036:	b29a      	uxth	r2, r3
    b038:	23fa      	movs	r3, #250	; 0xfa
    b03a:	00db      	lsls	r3, r3, #3
    b03c:	429a      	cmp	r2, r3
    b03e:	d90c      	bls.n	b05a <cfg_check+0xa6>
    b040:	1dfb      	adds	r3, r7, #7
    b042:	781a      	ldrb	r2, [r3, #0]
    b044:	480c      	ldr	r0, [pc, #48]	; (b078 <cfg_check+0xc4>)
    b046:	2386      	movs	r3, #134	; 0x86
    b048:	0099      	lsls	r1, r3, #2
    b04a:	0013      	movs	r3, r2
    b04c:	00db      	lsls	r3, r3, #3
    b04e:	189b      	adds	r3, r3, r2
    b050:	019b      	lsls	r3, r3, #6
    b052:	18c3      	adds	r3, r0, r3
    b054:	185b      	adds	r3, r3, r1
    b056:	2264      	movs	r2, #100	; 0x64
    b058:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
    b05a:	1dfb      	adds	r3, r7, #7
    b05c:	781a      	ldrb	r2, [r3, #0]
    b05e:	1dfb      	adds	r3, r7, #7
    b060:	3201      	adds	r2, #1
    b062:	701a      	strb	r2, [r3, #0]
    b064:	1dfb      	adds	r3, r7, #7
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	2b03      	cmp	r3, #3
    b06a:	d9ad      	bls.n	afc8 <cfg_check+0x14>
	}
	
	return;
    b06c:	46c0      	nop			; (mov r8, r8)
}
    b06e:	46bd      	mov	sp, r7
    b070:	b003      	add	sp, #12
    b072:	bd90      	pop	{r4, r7, pc}
    b074:	20003dc4 	.word	0x20003dc4
    b078:	200031fc 	.word	0x200031fc

0000b07c <cfg_save>:

WORD cfg_save(void)
//--------------------------------------------------------------------------
{
    b07c:	b580      	push	{r7, lr}
    b07e:	af00      	add	r7, sp, #0
	if(!flash_empty(CFG_1_ADDR,256))
    b080:	2380      	movs	r3, #128	; 0x80
    b082:	005a      	lsls	r2, r3, #1
    b084:	23fc      	movs	r3, #252	; 0xfc
    b086:	029b      	lsls	r3, r3, #10
    b088:	0011      	movs	r1, r2
    b08a:	0018      	movs	r0, r3
    b08c:	4b0a      	ldr	r3, [pc, #40]	; (b0b8 <cfg_save+0x3c>)
    b08e:	4798      	blx	r3
    b090:	1e03      	subs	r3, r0, #0
    b092:	d104      	bne.n	b09e <cfg_save+0x22>
	{
		flash_erase_page(CFG_1_ADDR);
    b094:	23fc      	movs	r3, #252	; 0xfc
    b096:	029b      	lsls	r3, r3, #10
    b098:	0018      	movs	r0, r3
    b09a:	4b08      	ldr	r3, [pc, #32]	; (b0bc <cfg_save+0x40>)
    b09c:	4798      	blx	r3
	}
	
	flash_write(CFG_1_ADDR,(BYTE*)&cfg_1,sizeof(CFG_1));
    b09e:	2380      	movs	r3, #128	; 0x80
    b0a0:	005a      	lsls	r2, r3, #1
    b0a2:	4907      	ldr	r1, [pc, #28]	; (b0c0 <cfg_save+0x44>)
    b0a4:	23fc      	movs	r3, #252	; 0xfc
    b0a6:	029b      	lsls	r3, r3, #10
    b0a8:	0018      	movs	r0, r3
    b0aa:	4b06      	ldr	r3, [pc, #24]	; (b0c4 <cfg_save+0x48>)
    b0ac:	4798      	blx	r3
			
	return(CFG_OK);
    b0ae:	2301      	movs	r3, #1
}
    b0b0:	0018      	movs	r0, r3
    b0b2:	46bd      	mov	sp, r7
    b0b4:	bd80      	pop	{r7, pc}
    b0b6:	46c0      	nop			; (mov r8, r8)
    b0b8:	00006745 	.word	0x00006745
    b0bc:	0000678b 	.word	0x0000678b
    b0c0:	20003dc4 	.word	0x20003dc4
    b0c4:	000067d9 	.word	0x000067d9

0000b0c8 <__aeabi_d2uiz>:
    b0c8:	b570      	push	{r4, r5, r6, lr}
    b0ca:	2200      	movs	r2, #0
    b0cc:	4b0c      	ldr	r3, [pc, #48]	; (b100 <__aeabi_d2uiz+0x38>)
    b0ce:	0004      	movs	r4, r0
    b0d0:	000d      	movs	r5, r1
    b0d2:	f001 faa5 	bl	c620 <__aeabi_dcmpge>
    b0d6:	2800      	cmp	r0, #0
    b0d8:	d104      	bne.n	b0e4 <__aeabi_d2uiz+0x1c>
    b0da:	0020      	movs	r0, r4
    b0dc:	0029      	movs	r1, r5
    b0de:	f001 f921 	bl	c324 <__aeabi_d2iz>
    b0e2:	bd70      	pop	{r4, r5, r6, pc}
    b0e4:	4b06      	ldr	r3, [pc, #24]	; (b100 <__aeabi_d2uiz+0x38>)
    b0e6:	2200      	movs	r2, #0
    b0e8:	0020      	movs	r0, r4
    b0ea:	0029      	movs	r1, r5
    b0ec:	f000 fe04 	bl	bcf8 <__aeabi_dsub>
    b0f0:	f001 f918 	bl	c324 <__aeabi_d2iz>
    b0f4:	2380      	movs	r3, #128	; 0x80
    b0f6:	061b      	lsls	r3, r3, #24
    b0f8:	469c      	mov	ip, r3
    b0fa:	4460      	add	r0, ip
    b0fc:	e7f1      	b.n	b0e2 <__aeabi_d2uiz+0x1a>
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	41e00000 	.word	0x41e00000

0000b104 <__aeabi_ui2f>:
    b104:	b510      	push	{r4, lr}
    b106:	1e04      	subs	r4, r0, #0
    b108:	d027      	beq.n	b15a <__aeabi_ui2f+0x56>
    b10a:	f001 fa93 	bl	c634 <__clzsi2>
    b10e:	239e      	movs	r3, #158	; 0x9e
    b110:	1a1b      	subs	r3, r3, r0
    b112:	2b96      	cmp	r3, #150	; 0x96
    b114:	dc0a      	bgt.n	b12c <__aeabi_ui2f+0x28>
    b116:	2296      	movs	r2, #150	; 0x96
    b118:	1ad2      	subs	r2, r2, r3
    b11a:	4094      	lsls	r4, r2
    b11c:	0264      	lsls	r4, r4, #9
    b11e:	0a64      	lsrs	r4, r4, #9
    b120:	b2db      	uxtb	r3, r3
    b122:	0264      	lsls	r4, r4, #9
    b124:	05db      	lsls	r3, r3, #23
    b126:	0a60      	lsrs	r0, r4, #9
    b128:	4318      	orrs	r0, r3
    b12a:	bd10      	pop	{r4, pc}
    b12c:	2b99      	cmp	r3, #153	; 0x99
    b12e:	dc17      	bgt.n	b160 <__aeabi_ui2f+0x5c>
    b130:	2299      	movs	r2, #153	; 0x99
    b132:	1ad2      	subs	r2, r2, r3
    b134:	2a00      	cmp	r2, #0
    b136:	dd27      	ble.n	b188 <__aeabi_ui2f+0x84>
    b138:	4094      	lsls	r4, r2
    b13a:	0022      	movs	r2, r4
    b13c:	4c13      	ldr	r4, [pc, #76]	; (b18c <__aeabi_ui2f+0x88>)
    b13e:	4014      	ands	r4, r2
    b140:	0751      	lsls	r1, r2, #29
    b142:	d004      	beq.n	b14e <__aeabi_ui2f+0x4a>
    b144:	210f      	movs	r1, #15
    b146:	400a      	ands	r2, r1
    b148:	2a04      	cmp	r2, #4
    b14a:	d000      	beq.n	b14e <__aeabi_ui2f+0x4a>
    b14c:	3404      	adds	r4, #4
    b14e:	0162      	lsls	r2, r4, #5
    b150:	d412      	bmi.n	b178 <__aeabi_ui2f+0x74>
    b152:	01a4      	lsls	r4, r4, #6
    b154:	0a64      	lsrs	r4, r4, #9
    b156:	b2db      	uxtb	r3, r3
    b158:	e7e3      	b.n	b122 <__aeabi_ui2f+0x1e>
    b15a:	2300      	movs	r3, #0
    b15c:	2400      	movs	r4, #0
    b15e:	e7e0      	b.n	b122 <__aeabi_ui2f+0x1e>
    b160:	22b9      	movs	r2, #185	; 0xb9
    b162:	0021      	movs	r1, r4
    b164:	1ad2      	subs	r2, r2, r3
    b166:	4091      	lsls	r1, r2
    b168:	000a      	movs	r2, r1
    b16a:	1e51      	subs	r1, r2, #1
    b16c:	418a      	sbcs	r2, r1
    b16e:	2105      	movs	r1, #5
    b170:	1a09      	subs	r1, r1, r0
    b172:	40cc      	lsrs	r4, r1
    b174:	4314      	orrs	r4, r2
    b176:	e7db      	b.n	b130 <__aeabi_ui2f+0x2c>
    b178:	4b04      	ldr	r3, [pc, #16]	; (b18c <__aeabi_ui2f+0x88>)
    b17a:	401c      	ands	r4, r3
    b17c:	239f      	movs	r3, #159	; 0x9f
    b17e:	01a4      	lsls	r4, r4, #6
    b180:	1a1b      	subs	r3, r3, r0
    b182:	0a64      	lsrs	r4, r4, #9
    b184:	b2db      	uxtb	r3, r3
    b186:	e7cc      	b.n	b122 <__aeabi_ui2f+0x1e>
    b188:	0022      	movs	r2, r4
    b18a:	e7d7      	b.n	b13c <__aeabi_ui2f+0x38>
    b18c:	fbffffff 	.word	0xfbffffff

0000b190 <__aeabi_ddiv>:
    b190:	b5f0      	push	{r4, r5, r6, r7, lr}
    b192:	4657      	mov	r7, sl
    b194:	4645      	mov	r5, r8
    b196:	46de      	mov	lr, fp
    b198:	464e      	mov	r6, r9
    b19a:	b5e0      	push	{r5, r6, r7, lr}
    b19c:	004c      	lsls	r4, r1, #1
    b19e:	030e      	lsls	r6, r1, #12
    b1a0:	b087      	sub	sp, #28
    b1a2:	4683      	mov	fp, r0
    b1a4:	4692      	mov	sl, r2
    b1a6:	001d      	movs	r5, r3
    b1a8:	4680      	mov	r8, r0
    b1aa:	0b36      	lsrs	r6, r6, #12
    b1ac:	0d64      	lsrs	r4, r4, #21
    b1ae:	0fcf      	lsrs	r7, r1, #31
    b1b0:	2c00      	cmp	r4, #0
    b1b2:	d04f      	beq.n	b254 <__aeabi_ddiv+0xc4>
    b1b4:	4b6f      	ldr	r3, [pc, #444]	; (b374 <__aeabi_ddiv+0x1e4>)
    b1b6:	429c      	cmp	r4, r3
    b1b8:	d035      	beq.n	b226 <__aeabi_ddiv+0x96>
    b1ba:	2380      	movs	r3, #128	; 0x80
    b1bc:	0f42      	lsrs	r2, r0, #29
    b1be:	041b      	lsls	r3, r3, #16
    b1c0:	00f6      	lsls	r6, r6, #3
    b1c2:	4313      	orrs	r3, r2
    b1c4:	4333      	orrs	r3, r6
    b1c6:	4699      	mov	r9, r3
    b1c8:	00c3      	lsls	r3, r0, #3
    b1ca:	4698      	mov	r8, r3
    b1cc:	4b6a      	ldr	r3, [pc, #424]	; (b378 <__aeabi_ddiv+0x1e8>)
    b1ce:	2600      	movs	r6, #0
    b1d0:	469c      	mov	ip, r3
    b1d2:	2300      	movs	r3, #0
    b1d4:	4464      	add	r4, ip
    b1d6:	9303      	str	r3, [sp, #12]
    b1d8:	032b      	lsls	r3, r5, #12
    b1da:	0b1b      	lsrs	r3, r3, #12
    b1dc:	469b      	mov	fp, r3
    b1de:	006b      	lsls	r3, r5, #1
    b1e0:	0fed      	lsrs	r5, r5, #31
    b1e2:	4650      	mov	r0, sl
    b1e4:	0d5b      	lsrs	r3, r3, #21
    b1e6:	9501      	str	r5, [sp, #4]
    b1e8:	d05e      	beq.n	b2a8 <__aeabi_ddiv+0x118>
    b1ea:	4a62      	ldr	r2, [pc, #392]	; (b374 <__aeabi_ddiv+0x1e4>)
    b1ec:	4293      	cmp	r3, r2
    b1ee:	d053      	beq.n	b298 <__aeabi_ddiv+0x108>
    b1f0:	465a      	mov	r2, fp
    b1f2:	00d1      	lsls	r1, r2, #3
    b1f4:	2280      	movs	r2, #128	; 0x80
    b1f6:	0f40      	lsrs	r0, r0, #29
    b1f8:	0412      	lsls	r2, r2, #16
    b1fa:	4302      	orrs	r2, r0
    b1fc:	430a      	orrs	r2, r1
    b1fe:	4693      	mov	fp, r2
    b200:	4652      	mov	r2, sl
    b202:	00d1      	lsls	r1, r2, #3
    b204:	4a5c      	ldr	r2, [pc, #368]	; (b378 <__aeabi_ddiv+0x1e8>)
    b206:	4694      	mov	ip, r2
    b208:	2200      	movs	r2, #0
    b20a:	4463      	add	r3, ip
    b20c:	0038      	movs	r0, r7
    b20e:	4068      	eors	r0, r5
    b210:	4684      	mov	ip, r0
    b212:	9002      	str	r0, [sp, #8]
    b214:	1ae4      	subs	r4, r4, r3
    b216:	4316      	orrs	r6, r2
    b218:	2e0f      	cmp	r6, #15
    b21a:	d900      	bls.n	b21e <__aeabi_ddiv+0x8e>
    b21c:	e0b4      	b.n	b388 <__aeabi_ddiv+0x1f8>
    b21e:	4b57      	ldr	r3, [pc, #348]	; (b37c <__aeabi_ddiv+0x1ec>)
    b220:	00b6      	lsls	r6, r6, #2
    b222:	599b      	ldr	r3, [r3, r6]
    b224:	469f      	mov	pc, r3
    b226:	0003      	movs	r3, r0
    b228:	4333      	orrs	r3, r6
    b22a:	4699      	mov	r9, r3
    b22c:	d16c      	bne.n	b308 <__aeabi_ddiv+0x178>
    b22e:	2300      	movs	r3, #0
    b230:	4698      	mov	r8, r3
    b232:	3302      	adds	r3, #2
    b234:	2608      	movs	r6, #8
    b236:	9303      	str	r3, [sp, #12]
    b238:	e7ce      	b.n	b1d8 <__aeabi_ddiv+0x48>
    b23a:	46cb      	mov	fp, r9
    b23c:	4641      	mov	r1, r8
    b23e:	9a03      	ldr	r2, [sp, #12]
    b240:	9701      	str	r7, [sp, #4]
    b242:	2a02      	cmp	r2, #2
    b244:	d165      	bne.n	b312 <__aeabi_ddiv+0x182>
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	4c4a      	ldr	r4, [pc, #296]	; (b374 <__aeabi_ddiv+0x1e4>)
    b24a:	469c      	mov	ip, r3
    b24c:	2300      	movs	r3, #0
    b24e:	2200      	movs	r2, #0
    b250:	4698      	mov	r8, r3
    b252:	e06b      	b.n	b32c <__aeabi_ddiv+0x19c>
    b254:	0003      	movs	r3, r0
    b256:	4333      	orrs	r3, r6
    b258:	4699      	mov	r9, r3
    b25a:	d04e      	beq.n	b2fa <__aeabi_ddiv+0x16a>
    b25c:	2e00      	cmp	r6, #0
    b25e:	d100      	bne.n	b262 <__aeabi_ddiv+0xd2>
    b260:	e1bc      	b.n	b5dc <__aeabi_ddiv+0x44c>
    b262:	0030      	movs	r0, r6
    b264:	f001 f9e6 	bl	c634 <__clzsi2>
    b268:	0003      	movs	r3, r0
    b26a:	3b0b      	subs	r3, #11
    b26c:	2b1c      	cmp	r3, #28
    b26e:	dd00      	ble.n	b272 <__aeabi_ddiv+0xe2>
    b270:	e1ac      	b.n	b5cc <__aeabi_ddiv+0x43c>
    b272:	221d      	movs	r2, #29
    b274:	1ad3      	subs	r3, r2, r3
    b276:	465a      	mov	r2, fp
    b278:	0001      	movs	r1, r0
    b27a:	40da      	lsrs	r2, r3
    b27c:	3908      	subs	r1, #8
    b27e:	408e      	lsls	r6, r1
    b280:	0013      	movs	r3, r2
    b282:	4333      	orrs	r3, r6
    b284:	4699      	mov	r9, r3
    b286:	465b      	mov	r3, fp
    b288:	408b      	lsls	r3, r1
    b28a:	4698      	mov	r8, r3
    b28c:	2300      	movs	r3, #0
    b28e:	4c3c      	ldr	r4, [pc, #240]	; (b380 <__aeabi_ddiv+0x1f0>)
    b290:	2600      	movs	r6, #0
    b292:	1a24      	subs	r4, r4, r0
    b294:	9303      	str	r3, [sp, #12]
    b296:	e79f      	b.n	b1d8 <__aeabi_ddiv+0x48>
    b298:	4651      	mov	r1, sl
    b29a:	465a      	mov	r2, fp
    b29c:	4311      	orrs	r1, r2
    b29e:	d129      	bne.n	b2f4 <__aeabi_ddiv+0x164>
    b2a0:	2200      	movs	r2, #0
    b2a2:	4693      	mov	fp, r2
    b2a4:	3202      	adds	r2, #2
    b2a6:	e7b1      	b.n	b20c <__aeabi_ddiv+0x7c>
    b2a8:	4659      	mov	r1, fp
    b2aa:	4301      	orrs	r1, r0
    b2ac:	d01e      	beq.n	b2ec <__aeabi_ddiv+0x15c>
    b2ae:	465b      	mov	r3, fp
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d100      	bne.n	b2b6 <__aeabi_ddiv+0x126>
    b2b4:	e19e      	b.n	b5f4 <__aeabi_ddiv+0x464>
    b2b6:	4658      	mov	r0, fp
    b2b8:	f001 f9bc 	bl	c634 <__clzsi2>
    b2bc:	0003      	movs	r3, r0
    b2be:	3b0b      	subs	r3, #11
    b2c0:	2b1c      	cmp	r3, #28
    b2c2:	dd00      	ble.n	b2c6 <__aeabi_ddiv+0x136>
    b2c4:	e18f      	b.n	b5e6 <__aeabi_ddiv+0x456>
    b2c6:	0002      	movs	r2, r0
    b2c8:	4659      	mov	r1, fp
    b2ca:	3a08      	subs	r2, #8
    b2cc:	4091      	lsls	r1, r2
    b2ce:	468b      	mov	fp, r1
    b2d0:	211d      	movs	r1, #29
    b2d2:	1acb      	subs	r3, r1, r3
    b2d4:	4651      	mov	r1, sl
    b2d6:	40d9      	lsrs	r1, r3
    b2d8:	000b      	movs	r3, r1
    b2da:	4659      	mov	r1, fp
    b2dc:	430b      	orrs	r3, r1
    b2de:	4651      	mov	r1, sl
    b2e0:	469b      	mov	fp, r3
    b2e2:	4091      	lsls	r1, r2
    b2e4:	4b26      	ldr	r3, [pc, #152]	; (b380 <__aeabi_ddiv+0x1f0>)
    b2e6:	2200      	movs	r2, #0
    b2e8:	1a1b      	subs	r3, r3, r0
    b2ea:	e78f      	b.n	b20c <__aeabi_ddiv+0x7c>
    b2ec:	2300      	movs	r3, #0
    b2ee:	2201      	movs	r2, #1
    b2f0:	469b      	mov	fp, r3
    b2f2:	e78b      	b.n	b20c <__aeabi_ddiv+0x7c>
    b2f4:	4651      	mov	r1, sl
    b2f6:	2203      	movs	r2, #3
    b2f8:	e788      	b.n	b20c <__aeabi_ddiv+0x7c>
    b2fa:	2300      	movs	r3, #0
    b2fc:	4698      	mov	r8, r3
    b2fe:	3301      	adds	r3, #1
    b300:	2604      	movs	r6, #4
    b302:	2400      	movs	r4, #0
    b304:	9303      	str	r3, [sp, #12]
    b306:	e767      	b.n	b1d8 <__aeabi_ddiv+0x48>
    b308:	2303      	movs	r3, #3
    b30a:	46b1      	mov	r9, r6
    b30c:	9303      	str	r3, [sp, #12]
    b30e:	260c      	movs	r6, #12
    b310:	e762      	b.n	b1d8 <__aeabi_ddiv+0x48>
    b312:	2a03      	cmp	r2, #3
    b314:	d100      	bne.n	b318 <__aeabi_ddiv+0x188>
    b316:	e25c      	b.n	b7d2 <__aeabi_ddiv+0x642>
    b318:	9b01      	ldr	r3, [sp, #4]
    b31a:	2a01      	cmp	r2, #1
    b31c:	d000      	beq.n	b320 <__aeabi_ddiv+0x190>
    b31e:	e1e4      	b.n	b6ea <__aeabi_ddiv+0x55a>
    b320:	4013      	ands	r3, r2
    b322:	469c      	mov	ip, r3
    b324:	2300      	movs	r3, #0
    b326:	2400      	movs	r4, #0
    b328:	2200      	movs	r2, #0
    b32a:	4698      	mov	r8, r3
    b32c:	2100      	movs	r1, #0
    b32e:	0312      	lsls	r2, r2, #12
    b330:	0b13      	lsrs	r3, r2, #12
    b332:	0d0a      	lsrs	r2, r1, #20
    b334:	0512      	lsls	r2, r2, #20
    b336:	431a      	orrs	r2, r3
    b338:	0523      	lsls	r3, r4, #20
    b33a:	4c12      	ldr	r4, [pc, #72]	; (b384 <__aeabi_ddiv+0x1f4>)
    b33c:	4640      	mov	r0, r8
    b33e:	4022      	ands	r2, r4
    b340:	4313      	orrs	r3, r2
    b342:	4662      	mov	r2, ip
    b344:	005b      	lsls	r3, r3, #1
    b346:	07d2      	lsls	r2, r2, #31
    b348:	085b      	lsrs	r3, r3, #1
    b34a:	4313      	orrs	r3, r2
    b34c:	0019      	movs	r1, r3
    b34e:	b007      	add	sp, #28
    b350:	bc3c      	pop	{r2, r3, r4, r5}
    b352:	4690      	mov	r8, r2
    b354:	4699      	mov	r9, r3
    b356:	46a2      	mov	sl, r4
    b358:	46ab      	mov	fp, r5
    b35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b35c:	2300      	movs	r3, #0
    b35e:	2280      	movs	r2, #128	; 0x80
    b360:	469c      	mov	ip, r3
    b362:	0312      	lsls	r2, r2, #12
    b364:	4698      	mov	r8, r3
    b366:	4c03      	ldr	r4, [pc, #12]	; (b374 <__aeabi_ddiv+0x1e4>)
    b368:	e7e0      	b.n	b32c <__aeabi_ddiv+0x19c>
    b36a:	2300      	movs	r3, #0
    b36c:	4c01      	ldr	r4, [pc, #4]	; (b374 <__aeabi_ddiv+0x1e4>)
    b36e:	2200      	movs	r2, #0
    b370:	4698      	mov	r8, r3
    b372:	e7db      	b.n	b32c <__aeabi_ddiv+0x19c>
    b374:	000007ff 	.word	0x000007ff
    b378:	fffffc01 	.word	0xfffffc01
    b37c:	0000cc94 	.word	0x0000cc94
    b380:	fffffc0d 	.word	0xfffffc0d
    b384:	800fffff 	.word	0x800fffff
    b388:	45d9      	cmp	r9, fp
    b38a:	d900      	bls.n	b38e <__aeabi_ddiv+0x1fe>
    b38c:	e139      	b.n	b602 <__aeabi_ddiv+0x472>
    b38e:	d100      	bne.n	b392 <__aeabi_ddiv+0x202>
    b390:	e134      	b.n	b5fc <__aeabi_ddiv+0x46c>
    b392:	2300      	movs	r3, #0
    b394:	4646      	mov	r6, r8
    b396:	464d      	mov	r5, r9
    b398:	469a      	mov	sl, r3
    b39a:	3c01      	subs	r4, #1
    b39c:	465b      	mov	r3, fp
    b39e:	0e0a      	lsrs	r2, r1, #24
    b3a0:	021b      	lsls	r3, r3, #8
    b3a2:	431a      	orrs	r2, r3
    b3a4:	020b      	lsls	r3, r1, #8
    b3a6:	0c17      	lsrs	r7, r2, #16
    b3a8:	9303      	str	r3, [sp, #12]
    b3aa:	0413      	lsls	r3, r2, #16
    b3ac:	0c1b      	lsrs	r3, r3, #16
    b3ae:	0039      	movs	r1, r7
    b3b0:	0028      	movs	r0, r5
    b3b2:	4690      	mov	r8, r2
    b3b4:	9301      	str	r3, [sp, #4]
    b3b6:	f001 f873 	bl	c4a0 <__udivsi3>
    b3ba:	0002      	movs	r2, r0
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	4683      	mov	fp, r0
    b3c0:	435a      	muls	r2, r3
    b3c2:	0028      	movs	r0, r5
    b3c4:	0039      	movs	r1, r7
    b3c6:	4691      	mov	r9, r2
    b3c8:	f001 f8f0 	bl	c5ac <__aeabi_uidivmod>
    b3cc:	0c35      	lsrs	r5, r6, #16
    b3ce:	0409      	lsls	r1, r1, #16
    b3d0:	430d      	orrs	r5, r1
    b3d2:	45a9      	cmp	r9, r5
    b3d4:	d90d      	bls.n	b3f2 <__aeabi_ddiv+0x262>
    b3d6:	465b      	mov	r3, fp
    b3d8:	4445      	add	r5, r8
    b3da:	3b01      	subs	r3, #1
    b3dc:	45a8      	cmp	r8, r5
    b3de:	d900      	bls.n	b3e2 <__aeabi_ddiv+0x252>
    b3e0:	e13a      	b.n	b658 <__aeabi_ddiv+0x4c8>
    b3e2:	45a9      	cmp	r9, r5
    b3e4:	d800      	bhi.n	b3e8 <__aeabi_ddiv+0x258>
    b3e6:	e137      	b.n	b658 <__aeabi_ddiv+0x4c8>
    b3e8:	2302      	movs	r3, #2
    b3ea:	425b      	negs	r3, r3
    b3ec:	469c      	mov	ip, r3
    b3ee:	4445      	add	r5, r8
    b3f0:	44e3      	add	fp, ip
    b3f2:	464b      	mov	r3, r9
    b3f4:	1aeb      	subs	r3, r5, r3
    b3f6:	0039      	movs	r1, r7
    b3f8:	0018      	movs	r0, r3
    b3fa:	9304      	str	r3, [sp, #16]
    b3fc:	f001 f850 	bl	c4a0 <__udivsi3>
    b400:	9b01      	ldr	r3, [sp, #4]
    b402:	0005      	movs	r5, r0
    b404:	4343      	muls	r3, r0
    b406:	0039      	movs	r1, r7
    b408:	9804      	ldr	r0, [sp, #16]
    b40a:	4699      	mov	r9, r3
    b40c:	f001 f8ce 	bl	c5ac <__aeabi_uidivmod>
    b410:	0433      	lsls	r3, r6, #16
    b412:	0409      	lsls	r1, r1, #16
    b414:	0c1b      	lsrs	r3, r3, #16
    b416:	430b      	orrs	r3, r1
    b418:	4599      	cmp	r9, r3
    b41a:	d909      	bls.n	b430 <__aeabi_ddiv+0x2a0>
    b41c:	4443      	add	r3, r8
    b41e:	1e6a      	subs	r2, r5, #1
    b420:	4598      	cmp	r8, r3
    b422:	d900      	bls.n	b426 <__aeabi_ddiv+0x296>
    b424:	e11a      	b.n	b65c <__aeabi_ddiv+0x4cc>
    b426:	4599      	cmp	r9, r3
    b428:	d800      	bhi.n	b42c <__aeabi_ddiv+0x29c>
    b42a:	e117      	b.n	b65c <__aeabi_ddiv+0x4cc>
    b42c:	3d02      	subs	r5, #2
    b42e:	4443      	add	r3, r8
    b430:	464a      	mov	r2, r9
    b432:	1a9b      	subs	r3, r3, r2
    b434:	465a      	mov	r2, fp
    b436:	0412      	lsls	r2, r2, #16
    b438:	432a      	orrs	r2, r5
    b43a:	9903      	ldr	r1, [sp, #12]
    b43c:	4693      	mov	fp, r2
    b43e:	0c10      	lsrs	r0, r2, #16
    b440:	0c0a      	lsrs	r2, r1, #16
    b442:	4691      	mov	r9, r2
    b444:	0409      	lsls	r1, r1, #16
    b446:	465a      	mov	r2, fp
    b448:	0c09      	lsrs	r1, r1, #16
    b44a:	464e      	mov	r6, r9
    b44c:	000d      	movs	r5, r1
    b44e:	0412      	lsls	r2, r2, #16
    b450:	0c12      	lsrs	r2, r2, #16
    b452:	4345      	muls	r5, r0
    b454:	9105      	str	r1, [sp, #20]
    b456:	4351      	muls	r1, r2
    b458:	4372      	muls	r2, r6
    b45a:	4370      	muls	r0, r6
    b45c:	1952      	adds	r2, r2, r5
    b45e:	0c0e      	lsrs	r6, r1, #16
    b460:	18b2      	adds	r2, r6, r2
    b462:	4295      	cmp	r5, r2
    b464:	d903      	bls.n	b46e <__aeabi_ddiv+0x2de>
    b466:	2580      	movs	r5, #128	; 0x80
    b468:	026d      	lsls	r5, r5, #9
    b46a:	46ac      	mov	ip, r5
    b46c:	4460      	add	r0, ip
    b46e:	0c15      	lsrs	r5, r2, #16
    b470:	0409      	lsls	r1, r1, #16
    b472:	0412      	lsls	r2, r2, #16
    b474:	0c09      	lsrs	r1, r1, #16
    b476:	1828      	adds	r0, r5, r0
    b478:	1852      	adds	r2, r2, r1
    b47a:	4283      	cmp	r3, r0
    b47c:	d200      	bcs.n	b480 <__aeabi_ddiv+0x2f0>
    b47e:	e0ce      	b.n	b61e <__aeabi_ddiv+0x48e>
    b480:	d100      	bne.n	b484 <__aeabi_ddiv+0x2f4>
    b482:	e0c8      	b.n	b616 <__aeabi_ddiv+0x486>
    b484:	1a1d      	subs	r5, r3, r0
    b486:	4653      	mov	r3, sl
    b488:	1a9e      	subs	r6, r3, r2
    b48a:	45b2      	cmp	sl, r6
    b48c:	4192      	sbcs	r2, r2
    b48e:	4252      	negs	r2, r2
    b490:	1aab      	subs	r3, r5, r2
    b492:	469a      	mov	sl, r3
    b494:	4598      	cmp	r8, r3
    b496:	d100      	bne.n	b49a <__aeabi_ddiv+0x30a>
    b498:	e117      	b.n	b6ca <__aeabi_ddiv+0x53a>
    b49a:	0039      	movs	r1, r7
    b49c:	0018      	movs	r0, r3
    b49e:	f000 ffff 	bl	c4a0 <__udivsi3>
    b4a2:	9b01      	ldr	r3, [sp, #4]
    b4a4:	0005      	movs	r5, r0
    b4a6:	4343      	muls	r3, r0
    b4a8:	0039      	movs	r1, r7
    b4aa:	4650      	mov	r0, sl
    b4ac:	9304      	str	r3, [sp, #16]
    b4ae:	f001 f87d 	bl	c5ac <__aeabi_uidivmod>
    b4b2:	9804      	ldr	r0, [sp, #16]
    b4b4:	040b      	lsls	r3, r1, #16
    b4b6:	0c31      	lsrs	r1, r6, #16
    b4b8:	4319      	orrs	r1, r3
    b4ba:	4288      	cmp	r0, r1
    b4bc:	d909      	bls.n	b4d2 <__aeabi_ddiv+0x342>
    b4be:	4441      	add	r1, r8
    b4c0:	1e6b      	subs	r3, r5, #1
    b4c2:	4588      	cmp	r8, r1
    b4c4:	d900      	bls.n	b4c8 <__aeabi_ddiv+0x338>
    b4c6:	e107      	b.n	b6d8 <__aeabi_ddiv+0x548>
    b4c8:	4288      	cmp	r0, r1
    b4ca:	d800      	bhi.n	b4ce <__aeabi_ddiv+0x33e>
    b4cc:	e104      	b.n	b6d8 <__aeabi_ddiv+0x548>
    b4ce:	3d02      	subs	r5, #2
    b4d0:	4441      	add	r1, r8
    b4d2:	9b04      	ldr	r3, [sp, #16]
    b4d4:	1acb      	subs	r3, r1, r3
    b4d6:	0018      	movs	r0, r3
    b4d8:	0039      	movs	r1, r7
    b4da:	9304      	str	r3, [sp, #16]
    b4dc:	f000 ffe0 	bl	c4a0 <__udivsi3>
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	4682      	mov	sl, r0
    b4e4:	4343      	muls	r3, r0
    b4e6:	0039      	movs	r1, r7
    b4e8:	9804      	ldr	r0, [sp, #16]
    b4ea:	9301      	str	r3, [sp, #4]
    b4ec:	f001 f85e 	bl	c5ac <__aeabi_uidivmod>
    b4f0:	9801      	ldr	r0, [sp, #4]
    b4f2:	040b      	lsls	r3, r1, #16
    b4f4:	0431      	lsls	r1, r6, #16
    b4f6:	0c09      	lsrs	r1, r1, #16
    b4f8:	4319      	orrs	r1, r3
    b4fa:	4288      	cmp	r0, r1
    b4fc:	d90d      	bls.n	b51a <__aeabi_ddiv+0x38a>
    b4fe:	4653      	mov	r3, sl
    b500:	4441      	add	r1, r8
    b502:	3b01      	subs	r3, #1
    b504:	4588      	cmp	r8, r1
    b506:	d900      	bls.n	b50a <__aeabi_ddiv+0x37a>
    b508:	e0e8      	b.n	b6dc <__aeabi_ddiv+0x54c>
    b50a:	4288      	cmp	r0, r1
    b50c:	d800      	bhi.n	b510 <__aeabi_ddiv+0x380>
    b50e:	e0e5      	b.n	b6dc <__aeabi_ddiv+0x54c>
    b510:	2302      	movs	r3, #2
    b512:	425b      	negs	r3, r3
    b514:	469c      	mov	ip, r3
    b516:	4441      	add	r1, r8
    b518:	44e2      	add	sl, ip
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	042d      	lsls	r5, r5, #16
    b51e:	1ace      	subs	r6, r1, r3
    b520:	4651      	mov	r1, sl
    b522:	4329      	orrs	r1, r5
    b524:	9d05      	ldr	r5, [sp, #20]
    b526:	464f      	mov	r7, r9
    b528:	002a      	movs	r2, r5
    b52a:	040b      	lsls	r3, r1, #16
    b52c:	0c08      	lsrs	r0, r1, #16
    b52e:	0c1b      	lsrs	r3, r3, #16
    b530:	435a      	muls	r2, r3
    b532:	4345      	muls	r5, r0
    b534:	437b      	muls	r3, r7
    b536:	4378      	muls	r0, r7
    b538:	195b      	adds	r3, r3, r5
    b53a:	0c17      	lsrs	r7, r2, #16
    b53c:	18fb      	adds	r3, r7, r3
    b53e:	429d      	cmp	r5, r3
    b540:	d903      	bls.n	b54a <__aeabi_ddiv+0x3ba>
    b542:	2580      	movs	r5, #128	; 0x80
    b544:	026d      	lsls	r5, r5, #9
    b546:	46ac      	mov	ip, r5
    b548:	4460      	add	r0, ip
    b54a:	0c1d      	lsrs	r5, r3, #16
    b54c:	0412      	lsls	r2, r2, #16
    b54e:	041b      	lsls	r3, r3, #16
    b550:	0c12      	lsrs	r2, r2, #16
    b552:	1828      	adds	r0, r5, r0
    b554:	189b      	adds	r3, r3, r2
    b556:	4286      	cmp	r6, r0
    b558:	d200      	bcs.n	b55c <__aeabi_ddiv+0x3cc>
    b55a:	e093      	b.n	b684 <__aeabi_ddiv+0x4f4>
    b55c:	d100      	bne.n	b560 <__aeabi_ddiv+0x3d0>
    b55e:	e08e      	b.n	b67e <__aeabi_ddiv+0x4ee>
    b560:	2301      	movs	r3, #1
    b562:	4319      	orrs	r1, r3
    b564:	4ba0      	ldr	r3, [pc, #640]	; (b7e8 <__aeabi_ddiv+0x658>)
    b566:	18e3      	adds	r3, r4, r3
    b568:	2b00      	cmp	r3, #0
    b56a:	dc00      	bgt.n	b56e <__aeabi_ddiv+0x3de>
    b56c:	e099      	b.n	b6a2 <__aeabi_ddiv+0x512>
    b56e:	074a      	lsls	r2, r1, #29
    b570:	d000      	beq.n	b574 <__aeabi_ddiv+0x3e4>
    b572:	e09e      	b.n	b6b2 <__aeabi_ddiv+0x522>
    b574:	465a      	mov	r2, fp
    b576:	01d2      	lsls	r2, r2, #7
    b578:	d506      	bpl.n	b588 <__aeabi_ddiv+0x3f8>
    b57a:	465a      	mov	r2, fp
    b57c:	4b9b      	ldr	r3, [pc, #620]	; (b7ec <__aeabi_ddiv+0x65c>)
    b57e:	401a      	ands	r2, r3
    b580:	2380      	movs	r3, #128	; 0x80
    b582:	4693      	mov	fp, r2
    b584:	00db      	lsls	r3, r3, #3
    b586:	18e3      	adds	r3, r4, r3
    b588:	4a99      	ldr	r2, [pc, #612]	; (b7f0 <__aeabi_ddiv+0x660>)
    b58a:	4293      	cmp	r3, r2
    b58c:	dd68      	ble.n	b660 <__aeabi_ddiv+0x4d0>
    b58e:	2301      	movs	r3, #1
    b590:	9a02      	ldr	r2, [sp, #8]
    b592:	4c98      	ldr	r4, [pc, #608]	; (b7f4 <__aeabi_ddiv+0x664>)
    b594:	401a      	ands	r2, r3
    b596:	2300      	movs	r3, #0
    b598:	4694      	mov	ip, r2
    b59a:	4698      	mov	r8, r3
    b59c:	2200      	movs	r2, #0
    b59e:	e6c5      	b.n	b32c <__aeabi_ddiv+0x19c>
    b5a0:	2280      	movs	r2, #128	; 0x80
    b5a2:	464b      	mov	r3, r9
    b5a4:	0312      	lsls	r2, r2, #12
    b5a6:	4213      	tst	r3, r2
    b5a8:	d00a      	beq.n	b5c0 <__aeabi_ddiv+0x430>
    b5aa:	465b      	mov	r3, fp
    b5ac:	4213      	tst	r3, r2
    b5ae:	d106      	bne.n	b5be <__aeabi_ddiv+0x42e>
    b5b0:	431a      	orrs	r2, r3
    b5b2:	0312      	lsls	r2, r2, #12
    b5b4:	0b12      	lsrs	r2, r2, #12
    b5b6:	46ac      	mov	ip, r5
    b5b8:	4688      	mov	r8, r1
    b5ba:	4c8e      	ldr	r4, [pc, #568]	; (b7f4 <__aeabi_ddiv+0x664>)
    b5bc:	e6b6      	b.n	b32c <__aeabi_ddiv+0x19c>
    b5be:	464b      	mov	r3, r9
    b5c0:	431a      	orrs	r2, r3
    b5c2:	0312      	lsls	r2, r2, #12
    b5c4:	0b12      	lsrs	r2, r2, #12
    b5c6:	46bc      	mov	ip, r7
    b5c8:	4c8a      	ldr	r4, [pc, #552]	; (b7f4 <__aeabi_ddiv+0x664>)
    b5ca:	e6af      	b.n	b32c <__aeabi_ddiv+0x19c>
    b5cc:	0003      	movs	r3, r0
    b5ce:	465a      	mov	r2, fp
    b5d0:	3b28      	subs	r3, #40	; 0x28
    b5d2:	409a      	lsls	r2, r3
    b5d4:	2300      	movs	r3, #0
    b5d6:	4691      	mov	r9, r2
    b5d8:	4698      	mov	r8, r3
    b5da:	e657      	b.n	b28c <__aeabi_ddiv+0xfc>
    b5dc:	4658      	mov	r0, fp
    b5de:	f001 f829 	bl	c634 <__clzsi2>
    b5e2:	3020      	adds	r0, #32
    b5e4:	e640      	b.n	b268 <__aeabi_ddiv+0xd8>
    b5e6:	0003      	movs	r3, r0
    b5e8:	4652      	mov	r2, sl
    b5ea:	3b28      	subs	r3, #40	; 0x28
    b5ec:	409a      	lsls	r2, r3
    b5ee:	2100      	movs	r1, #0
    b5f0:	4693      	mov	fp, r2
    b5f2:	e677      	b.n	b2e4 <__aeabi_ddiv+0x154>
    b5f4:	f001 f81e 	bl	c634 <__clzsi2>
    b5f8:	3020      	adds	r0, #32
    b5fa:	e65f      	b.n	b2bc <__aeabi_ddiv+0x12c>
    b5fc:	4588      	cmp	r8, r1
    b5fe:	d200      	bcs.n	b602 <__aeabi_ddiv+0x472>
    b600:	e6c7      	b.n	b392 <__aeabi_ddiv+0x202>
    b602:	464b      	mov	r3, r9
    b604:	07de      	lsls	r6, r3, #31
    b606:	085d      	lsrs	r5, r3, #1
    b608:	4643      	mov	r3, r8
    b60a:	085b      	lsrs	r3, r3, #1
    b60c:	431e      	orrs	r6, r3
    b60e:	4643      	mov	r3, r8
    b610:	07db      	lsls	r3, r3, #31
    b612:	469a      	mov	sl, r3
    b614:	e6c2      	b.n	b39c <__aeabi_ddiv+0x20c>
    b616:	2500      	movs	r5, #0
    b618:	4592      	cmp	sl, r2
    b61a:	d300      	bcc.n	b61e <__aeabi_ddiv+0x48e>
    b61c:	e733      	b.n	b486 <__aeabi_ddiv+0x2f6>
    b61e:	9e03      	ldr	r6, [sp, #12]
    b620:	4659      	mov	r1, fp
    b622:	46b4      	mov	ip, r6
    b624:	44e2      	add	sl, ip
    b626:	45b2      	cmp	sl, r6
    b628:	41ad      	sbcs	r5, r5
    b62a:	426d      	negs	r5, r5
    b62c:	4445      	add	r5, r8
    b62e:	18eb      	adds	r3, r5, r3
    b630:	3901      	subs	r1, #1
    b632:	4598      	cmp	r8, r3
    b634:	d207      	bcs.n	b646 <__aeabi_ddiv+0x4b6>
    b636:	4298      	cmp	r0, r3
    b638:	d900      	bls.n	b63c <__aeabi_ddiv+0x4ac>
    b63a:	e07f      	b.n	b73c <__aeabi_ddiv+0x5ac>
    b63c:	d100      	bne.n	b640 <__aeabi_ddiv+0x4b0>
    b63e:	e0bc      	b.n	b7ba <__aeabi_ddiv+0x62a>
    b640:	1a1d      	subs	r5, r3, r0
    b642:	468b      	mov	fp, r1
    b644:	e71f      	b.n	b486 <__aeabi_ddiv+0x2f6>
    b646:	4598      	cmp	r8, r3
    b648:	d1fa      	bne.n	b640 <__aeabi_ddiv+0x4b0>
    b64a:	9d03      	ldr	r5, [sp, #12]
    b64c:	4555      	cmp	r5, sl
    b64e:	d9f2      	bls.n	b636 <__aeabi_ddiv+0x4a6>
    b650:	4643      	mov	r3, r8
    b652:	468b      	mov	fp, r1
    b654:	1a1d      	subs	r5, r3, r0
    b656:	e716      	b.n	b486 <__aeabi_ddiv+0x2f6>
    b658:	469b      	mov	fp, r3
    b65a:	e6ca      	b.n	b3f2 <__aeabi_ddiv+0x262>
    b65c:	0015      	movs	r5, r2
    b65e:	e6e7      	b.n	b430 <__aeabi_ddiv+0x2a0>
    b660:	465a      	mov	r2, fp
    b662:	08c9      	lsrs	r1, r1, #3
    b664:	0752      	lsls	r2, r2, #29
    b666:	430a      	orrs	r2, r1
    b668:	055b      	lsls	r3, r3, #21
    b66a:	4690      	mov	r8, r2
    b66c:	0d5c      	lsrs	r4, r3, #21
    b66e:	465a      	mov	r2, fp
    b670:	2301      	movs	r3, #1
    b672:	9902      	ldr	r1, [sp, #8]
    b674:	0252      	lsls	r2, r2, #9
    b676:	4019      	ands	r1, r3
    b678:	0b12      	lsrs	r2, r2, #12
    b67a:	468c      	mov	ip, r1
    b67c:	e656      	b.n	b32c <__aeabi_ddiv+0x19c>
    b67e:	2b00      	cmp	r3, #0
    b680:	d100      	bne.n	b684 <__aeabi_ddiv+0x4f4>
    b682:	e76f      	b.n	b564 <__aeabi_ddiv+0x3d4>
    b684:	4446      	add	r6, r8
    b686:	1e4a      	subs	r2, r1, #1
    b688:	45b0      	cmp	r8, r6
    b68a:	d929      	bls.n	b6e0 <__aeabi_ddiv+0x550>
    b68c:	0011      	movs	r1, r2
    b68e:	4286      	cmp	r6, r0
    b690:	d000      	beq.n	b694 <__aeabi_ddiv+0x504>
    b692:	e765      	b.n	b560 <__aeabi_ddiv+0x3d0>
    b694:	9a03      	ldr	r2, [sp, #12]
    b696:	4293      	cmp	r3, r2
    b698:	d000      	beq.n	b69c <__aeabi_ddiv+0x50c>
    b69a:	e761      	b.n	b560 <__aeabi_ddiv+0x3d0>
    b69c:	e762      	b.n	b564 <__aeabi_ddiv+0x3d4>
    b69e:	2101      	movs	r1, #1
    b6a0:	4249      	negs	r1, r1
    b6a2:	2001      	movs	r0, #1
    b6a4:	1ac2      	subs	r2, r0, r3
    b6a6:	2a38      	cmp	r2, #56	; 0x38
    b6a8:	dd21      	ble.n	b6ee <__aeabi_ddiv+0x55e>
    b6aa:	9b02      	ldr	r3, [sp, #8]
    b6ac:	4003      	ands	r3, r0
    b6ae:	469c      	mov	ip, r3
    b6b0:	e638      	b.n	b324 <__aeabi_ddiv+0x194>
    b6b2:	220f      	movs	r2, #15
    b6b4:	400a      	ands	r2, r1
    b6b6:	2a04      	cmp	r2, #4
    b6b8:	d100      	bne.n	b6bc <__aeabi_ddiv+0x52c>
    b6ba:	e75b      	b.n	b574 <__aeabi_ddiv+0x3e4>
    b6bc:	000a      	movs	r2, r1
    b6be:	1d11      	adds	r1, r2, #4
    b6c0:	4291      	cmp	r1, r2
    b6c2:	4192      	sbcs	r2, r2
    b6c4:	4252      	negs	r2, r2
    b6c6:	4493      	add	fp, r2
    b6c8:	e754      	b.n	b574 <__aeabi_ddiv+0x3e4>
    b6ca:	4b47      	ldr	r3, [pc, #284]	; (b7e8 <__aeabi_ddiv+0x658>)
    b6cc:	18e3      	adds	r3, r4, r3
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	dde5      	ble.n	b69e <__aeabi_ddiv+0x50e>
    b6d2:	2201      	movs	r2, #1
    b6d4:	4252      	negs	r2, r2
    b6d6:	e7f2      	b.n	b6be <__aeabi_ddiv+0x52e>
    b6d8:	001d      	movs	r5, r3
    b6da:	e6fa      	b.n	b4d2 <__aeabi_ddiv+0x342>
    b6dc:	469a      	mov	sl, r3
    b6de:	e71c      	b.n	b51a <__aeabi_ddiv+0x38a>
    b6e0:	42b0      	cmp	r0, r6
    b6e2:	d839      	bhi.n	b758 <__aeabi_ddiv+0x5c8>
    b6e4:	d06e      	beq.n	b7c4 <__aeabi_ddiv+0x634>
    b6e6:	0011      	movs	r1, r2
    b6e8:	e73a      	b.n	b560 <__aeabi_ddiv+0x3d0>
    b6ea:	9302      	str	r3, [sp, #8]
    b6ec:	e73a      	b.n	b564 <__aeabi_ddiv+0x3d4>
    b6ee:	2a1f      	cmp	r2, #31
    b6f0:	dc3c      	bgt.n	b76c <__aeabi_ddiv+0x5dc>
    b6f2:	2320      	movs	r3, #32
    b6f4:	1a9b      	subs	r3, r3, r2
    b6f6:	000c      	movs	r4, r1
    b6f8:	4658      	mov	r0, fp
    b6fa:	4099      	lsls	r1, r3
    b6fc:	4098      	lsls	r0, r3
    b6fe:	1e4b      	subs	r3, r1, #1
    b700:	4199      	sbcs	r1, r3
    b702:	465b      	mov	r3, fp
    b704:	40d4      	lsrs	r4, r2
    b706:	40d3      	lsrs	r3, r2
    b708:	4320      	orrs	r0, r4
    b70a:	4308      	orrs	r0, r1
    b70c:	001a      	movs	r2, r3
    b70e:	0743      	lsls	r3, r0, #29
    b710:	d009      	beq.n	b726 <__aeabi_ddiv+0x596>
    b712:	230f      	movs	r3, #15
    b714:	4003      	ands	r3, r0
    b716:	2b04      	cmp	r3, #4
    b718:	d005      	beq.n	b726 <__aeabi_ddiv+0x596>
    b71a:	0001      	movs	r1, r0
    b71c:	1d08      	adds	r0, r1, #4
    b71e:	4288      	cmp	r0, r1
    b720:	419b      	sbcs	r3, r3
    b722:	425b      	negs	r3, r3
    b724:	18d2      	adds	r2, r2, r3
    b726:	0213      	lsls	r3, r2, #8
    b728:	d53a      	bpl.n	b7a0 <__aeabi_ddiv+0x610>
    b72a:	2301      	movs	r3, #1
    b72c:	9a02      	ldr	r2, [sp, #8]
    b72e:	2401      	movs	r4, #1
    b730:	401a      	ands	r2, r3
    b732:	2300      	movs	r3, #0
    b734:	4694      	mov	ip, r2
    b736:	4698      	mov	r8, r3
    b738:	2200      	movs	r2, #0
    b73a:	e5f7      	b.n	b32c <__aeabi_ddiv+0x19c>
    b73c:	2102      	movs	r1, #2
    b73e:	4249      	negs	r1, r1
    b740:	468c      	mov	ip, r1
    b742:	9d03      	ldr	r5, [sp, #12]
    b744:	44e3      	add	fp, ip
    b746:	46ac      	mov	ip, r5
    b748:	44e2      	add	sl, ip
    b74a:	45aa      	cmp	sl, r5
    b74c:	41ad      	sbcs	r5, r5
    b74e:	426d      	negs	r5, r5
    b750:	4445      	add	r5, r8
    b752:	18ed      	adds	r5, r5, r3
    b754:	1a2d      	subs	r5, r5, r0
    b756:	e696      	b.n	b486 <__aeabi_ddiv+0x2f6>
    b758:	1e8a      	subs	r2, r1, #2
    b75a:	9903      	ldr	r1, [sp, #12]
    b75c:	004d      	lsls	r5, r1, #1
    b75e:	428d      	cmp	r5, r1
    b760:	4189      	sbcs	r1, r1
    b762:	4249      	negs	r1, r1
    b764:	4441      	add	r1, r8
    b766:	1876      	adds	r6, r6, r1
    b768:	9503      	str	r5, [sp, #12]
    b76a:	e78f      	b.n	b68c <__aeabi_ddiv+0x4fc>
    b76c:	201f      	movs	r0, #31
    b76e:	4240      	negs	r0, r0
    b770:	1ac3      	subs	r3, r0, r3
    b772:	4658      	mov	r0, fp
    b774:	40d8      	lsrs	r0, r3
    b776:	0003      	movs	r3, r0
    b778:	2a20      	cmp	r2, #32
    b77a:	d028      	beq.n	b7ce <__aeabi_ddiv+0x63e>
    b77c:	2040      	movs	r0, #64	; 0x40
    b77e:	465d      	mov	r5, fp
    b780:	1a82      	subs	r2, r0, r2
    b782:	4095      	lsls	r5, r2
    b784:	4329      	orrs	r1, r5
    b786:	1e4a      	subs	r2, r1, #1
    b788:	4191      	sbcs	r1, r2
    b78a:	4319      	orrs	r1, r3
    b78c:	2307      	movs	r3, #7
    b78e:	2200      	movs	r2, #0
    b790:	400b      	ands	r3, r1
    b792:	d009      	beq.n	b7a8 <__aeabi_ddiv+0x618>
    b794:	230f      	movs	r3, #15
    b796:	2200      	movs	r2, #0
    b798:	400b      	ands	r3, r1
    b79a:	0008      	movs	r0, r1
    b79c:	2b04      	cmp	r3, #4
    b79e:	d1bd      	bne.n	b71c <__aeabi_ddiv+0x58c>
    b7a0:	0001      	movs	r1, r0
    b7a2:	0753      	lsls	r3, r2, #29
    b7a4:	0252      	lsls	r2, r2, #9
    b7a6:	0b12      	lsrs	r2, r2, #12
    b7a8:	08c9      	lsrs	r1, r1, #3
    b7aa:	4319      	orrs	r1, r3
    b7ac:	2301      	movs	r3, #1
    b7ae:	4688      	mov	r8, r1
    b7b0:	9902      	ldr	r1, [sp, #8]
    b7b2:	2400      	movs	r4, #0
    b7b4:	4019      	ands	r1, r3
    b7b6:	468c      	mov	ip, r1
    b7b8:	e5b8      	b.n	b32c <__aeabi_ddiv+0x19c>
    b7ba:	4552      	cmp	r2, sl
    b7bc:	d8be      	bhi.n	b73c <__aeabi_ddiv+0x5ac>
    b7be:	468b      	mov	fp, r1
    b7c0:	2500      	movs	r5, #0
    b7c2:	e660      	b.n	b486 <__aeabi_ddiv+0x2f6>
    b7c4:	9d03      	ldr	r5, [sp, #12]
    b7c6:	429d      	cmp	r5, r3
    b7c8:	d3c6      	bcc.n	b758 <__aeabi_ddiv+0x5c8>
    b7ca:	0011      	movs	r1, r2
    b7cc:	e762      	b.n	b694 <__aeabi_ddiv+0x504>
    b7ce:	2500      	movs	r5, #0
    b7d0:	e7d8      	b.n	b784 <__aeabi_ddiv+0x5f4>
    b7d2:	2280      	movs	r2, #128	; 0x80
    b7d4:	465b      	mov	r3, fp
    b7d6:	0312      	lsls	r2, r2, #12
    b7d8:	431a      	orrs	r2, r3
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	0312      	lsls	r2, r2, #12
    b7de:	0b12      	lsrs	r2, r2, #12
    b7e0:	469c      	mov	ip, r3
    b7e2:	4688      	mov	r8, r1
    b7e4:	4c03      	ldr	r4, [pc, #12]	; (b7f4 <__aeabi_ddiv+0x664>)
    b7e6:	e5a1      	b.n	b32c <__aeabi_ddiv+0x19c>
    b7e8:	000003ff 	.word	0x000003ff
    b7ec:	feffffff 	.word	0xfeffffff
    b7f0:	000007fe 	.word	0x000007fe
    b7f4:	000007ff 	.word	0x000007ff

0000b7f8 <__aeabi_dmul>:
    b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7fa:	4657      	mov	r7, sl
    b7fc:	4645      	mov	r5, r8
    b7fe:	46de      	mov	lr, fp
    b800:	464e      	mov	r6, r9
    b802:	b5e0      	push	{r5, r6, r7, lr}
    b804:	030c      	lsls	r4, r1, #12
    b806:	4698      	mov	r8, r3
    b808:	004e      	lsls	r6, r1, #1
    b80a:	0b23      	lsrs	r3, r4, #12
    b80c:	b087      	sub	sp, #28
    b80e:	0007      	movs	r7, r0
    b810:	4692      	mov	sl, r2
    b812:	469b      	mov	fp, r3
    b814:	0d76      	lsrs	r6, r6, #21
    b816:	0fcd      	lsrs	r5, r1, #31
    b818:	2e00      	cmp	r6, #0
    b81a:	d06b      	beq.n	b8f4 <__aeabi_dmul+0xfc>
    b81c:	4b6d      	ldr	r3, [pc, #436]	; (b9d4 <__aeabi_dmul+0x1dc>)
    b81e:	429e      	cmp	r6, r3
    b820:	d035      	beq.n	b88e <__aeabi_dmul+0x96>
    b822:	2480      	movs	r4, #128	; 0x80
    b824:	465b      	mov	r3, fp
    b826:	0f42      	lsrs	r2, r0, #29
    b828:	0424      	lsls	r4, r4, #16
    b82a:	00db      	lsls	r3, r3, #3
    b82c:	4314      	orrs	r4, r2
    b82e:	431c      	orrs	r4, r3
    b830:	00c3      	lsls	r3, r0, #3
    b832:	4699      	mov	r9, r3
    b834:	4b68      	ldr	r3, [pc, #416]	; (b9d8 <__aeabi_dmul+0x1e0>)
    b836:	46a3      	mov	fp, r4
    b838:	469c      	mov	ip, r3
    b83a:	2300      	movs	r3, #0
    b83c:	2700      	movs	r7, #0
    b83e:	4466      	add	r6, ip
    b840:	9302      	str	r3, [sp, #8]
    b842:	4643      	mov	r3, r8
    b844:	031c      	lsls	r4, r3, #12
    b846:	005a      	lsls	r2, r3, #1
    b848:	0fdb      	lsrs	r3, r3, #31
    b84a:	4650      	mov	r0, sl
    b84c:	0b24      	lsrs	r4, r4, #12
    b84e:	0d52      	lsrs	r2, r2, #21
    b850:	4698      	mov	r8, r3
    b852:	d100      	bne.n	b856 <__aeabi_dmul+0x5e>
    b854:	e076      	b.n	b944 <__aeabi_dmul+0x14c>
    b856:	4b5f      	ldr	r3, [pc, #380]	; (b9d4 <__aeabi_dmul+0x1dc>)
    b858:	429a      	cmp	r2, r3
    b85a:	d06d      	beq.n	b938 <__aeabi_dmul+0x140>
    b85c:	2380      	movs	r3, #128	; 0x80
    b85e:	0f41      	lsrs	r1, r0, #29
    b860:	041b      	lsls	r3, r3, #16
    b862:	430b      	orrs	r3, r1
    b864:	495c      	ldr	r1, [pc, #368]	; (b9d8 <__aeabi_dmul+0x1e0>)
    b866:	00e4      	lsls	r4, r4, #3
    b868:	468c      	mov	ip, r1
    b86a:	431c      	orrs	r4, r3
    b86c:	00c3      	lsls	r3, r0, #3
    b86e:	2000      	movs	r0, #0
    b870:	4462      	add	r2, ip
    b872:	4641      	mov	r1, r8
    b874:	18b6      	adds	r6, r6, r2
    b876:	4069      	eors	r1, r5
    b878:	1c72      	adds	r2, r6, #1
    b87a:	9101      	str	r1, [sp, #4]
    b87c:	4694      	mov	ip, r2
    b87e:	4307      	orrs	r7, r0
    b880:	2f0f      	cmp	r7, #15
    b882:	d900      	bls.n	b886 <__aeabi_dmul+0x8e>
    b884:	e0b0      	b.n	b9e8 <__aeabi_dmul+0x1f0>
    b886:	4a55      	ldr	r2, [pc, #340]	; (b9dc <__aeabi_dmul+0x1e4>)
    b888:	00bf      	lsls	r7, r7, #2
    b88a:	59d2      	ldr	r2, [r2, r7]
    b88c:	4697      	mov	pc, r2
    b88e:	465b      	mov	r3, fp
    b890:	4303      	orrs	r3, r0
    b892:	4699      	mov	r9, r3
    b894:	d000      	beq.n	b898 <__aeabi_dmul+0xa0>
    b896:	e087      	b.n	b9a8 <__aeabi_dmul+0x1b0>
    b898:	2300      	movs	r3, #0
    b89a:	469b      	mov	fp, r3
    b89c:	3302      	adds	r3, #2
    b89e:	2708      	movs	r7, #8
    b8a0:	9302      	str	r3, [sp, #8]
    b8a2:	e7ce      	b.n	b842 <__aeabi_dmul+0x4a>
    b8a4:	4642      	mov	r2, r8
    b8a6:	9201      	str	r2, [sp, #4]
    b8a8:	2802      	cmp	r0, #2
    b8aa:	d067      	beq.n	b97c <__aeabi_dmul+0x184>
    b8ac:	2803      	cmp	r0, #3
    b8ae:	d100      	bne.n	b8b2 <__aeabi_dmul+0xba>
    b8b0:	e20e      	b.n	bcd0 <__aeabi_dmul+0x4d8>
    b8b2:	2801      	cmp	r0, #1
    b8b4:	d000      	beq.n	b8b8 <__aeabi_dmul+0xc0>
    b8b6:	e162      	b.n	bb7e <__aeabi_dmul+0x386>
    b8b8:	2300      	movs	r3, #0
    b8ba:	2400      	movs	r4, #0
    b8bc:	2200      	movs	r2, #0
    b8be:	4699      	mov	r9, r3
    b8c0:	9901      	ldr	r1, [sp, #4]
    b8c2:	4001      	ands	r1, r0
    b8c4:	b2cd      	uxtb	r5, r1
    b8c6:	2100      	movs	r1, #0
    b8c8:	0312      	lsls	r2, r2, #12
    b8ca:	0d0b      	lsrs	r3, r1, #20
    b8cc:	0b12      	lsrs	r2, r2, #12
    b8ce:	051b      	lsls	r3, r3, #20
    b8d0:	4313      	orrs	r3, r2
    b8d2:	4a43      	ldr	r2, [pc, #268]	; (b9e0 <__aeabi_dmul+0x1e8>)
    b8d4:	0524      	lsls	r4, r4, #20
    b8d6:	4013      	ands	r3, r2
    b8d8:	431c      	orrs	r4, r3
    b8da:	0064      	lsls	r4, r4, #1
    b8dc:	07ed      	lsls	r5, r5, #31
    b8de:	0864      	lsrs	r4, r4, #1
    b8e0:	432c      	orrs	r4, r5
    b8e2:	4648      	mov	r0, r9
    b8e4:	0021      	movs	r1, r4
    b8e6:	b007      	add	sp, #28
    b8e8:	bc3c      	pop	{r2, r3, r4, r5}
    b8ea:	4690      	mov	r8, r2
    b8ec:	4699      	mov	r9, r3
    b8ee:	46a2      	mov	sl, r4
    b8f0:	46ab      	mov	fp, r5
    b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8f4:	4303      	orrs	r3, r0
    b8f6:	4699      	mov	r9, r3
    b8f8:	d04f      	beq.n	b99a <__aeabi_dmul+0x1a2>
    b8fa:	465b      	mov	r3, fp
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d100      	bne.n	b902 <__aeabi_dmul+0x10a>
    b900:	e189      	b.n	bc16 <__aeabi_dmul+0x41e>
    b902:	4658      	mov	r0, fp
    b904:	f000 fe96 	bl	c634 <__clzsi2>
    b908:	0003      	movs	r3, r0
    b90a:	3b0b      	subs	r3, #11
    b90c:	2b1c      	cmp	r3, #28
    b90e:	dd00      	ble.n	b912 <__aeabi_dmul+0x11a>
    b910:	e17a      	b.n	bc08 <__aeabi_dmul+0x410>
    b912:	221d      	movs	r2, #29
    b914:	1ad3      	subs	r3, r2, r3
    b916:	003a      	movs	r2, r7
    b918:	0001      	movs	r1, r0
    b91a:	465c      	mov	r4, fp
    b91c:	40da      	lsrs	r2, r3
    b91e:	3908      	subs	r1, #8
    b920:	408c      	lsls	r4, r1
    b922:	0013      	movs	r3, r2
    b924:	408f      	lsls	r7, r1
    b926:	4323      	orrs	r3, r4
    b928:	469b      	mov	fp, r3
    b92a:	46b9      	mov	r9, r7
    b92c:	2300      	movs	r3, #0
    b92e:	4e2d      	ldr	r6, [pc, #180]	; (b9e4 <__aeabi_dmul+0x1ec>)
    b930:	2700      	movs	r7, #0
    b932:	1a36      	subs	r6, r6, r0
    b934:	9302      	str	r3, [sp, #8]
    b936:	e784      	b.n	b842 <__aeabi_dmul+0x4a>
    b938:	4653      	mov	r3, sl
    b93a:	4323      	orrs	r3, r4
    b93c:	d12a      	bne.n	b994 <__aeabi_dmul+0x19c>
    b93e:	2400      	movs	r4, #0
    b940:	2002      	movs	r0, #2
    b942:	e796      	b.n	b872 <__aeabi_dmul+0x7a>
    b944:	4653      	mov	r3, sl
    b946:	4323      	orrs	r3, r4
    b948:	d020      	beq.n	b98c <__aeabi_dmul+0x194>
    b94a:	2c00      	cmp	r4, #0
    b94c:	d100      	bne.n	b950 <__aeabi_dmul+0x158>
    b94e:	e157      	b.n	bc00 <__aeabi_dmul+0x408>
    b950:	0020      	movs	r0, r4
    b952:	f000 fe6f 	bl	c634 <__clzsi2>
    b956:	0003      	movs	r3, r0
    b958:	3b0b      	subs	r3, #11
    b95a:	2b1c      	cmp	r3, #28
    b95c:	dd00      	ble.n	b960 <__aeabi_dmul+0x168>
    b95e:	e149      	b.n	bbf4 <__aeabi_dmul+0x3fc>
    b960:	211d      	movs	r1, #29
    b962:	1acb      	subs	r3, r1, r3
    b964:	4651      	mov	r1, sl
    b966:	0002      	movs	r2, r0
    b968:	40d9      	lsrs	r1, r3
    b96a:	4653      	mov	r3, sl
    b96c:	3a08      	subs	r2, #8
    b96e:	4094      	lsls	r4, r2
    b970:	4093      	lsls	r3, r2
    b972:	430c      	orrs	r4, r1
    b974:	4a1b      	ldr	r2, [pc, #108]	; (b9e4 <__aeabi_dmul+0x1ec>)
    b976:	1a12      	subs	r2, r2, r0
    b978:	2000      	movs	r0, #0
    b97a:	e77a      	b.n	b872 <__aeabi_dmul+0x7a>
    b97c:	2501      	movs	r5, #1
    b97e:	9b01      	ldr	r3, [sp, #4]
    b980:	4c14      	ldr	r4, [pc, #80]	; (b9d4 <__aeabi_dmul+0x1dc>)
    b982:	401d      	ands	r5, r3
    b984:	2300      	movs	r3, #0
    b986:	2200      	movs	r2, #0
    b988:	4699      	mov	r9, r3
    b98a:	e79c      	b.n	b8c6 <__aeabi_dmul+0xce>
    b98c:	2400      	movs	r4, #0
    b98e:	2200      	movs	r2, #0
    b990:	2001      	movs	r0, #1
    b992:	e76e      	b.n	b872 <__aeabi_dmul+0x7a>
    b994:	4653      	mov	r3, sl
    b996:	2003      	movs	r0, #3
    b998:	e76b      	b.n	b872 <__aeabi_dmul+0x7a>
    b99a:	2300      	movs	r3, #0
    b99c:	469b      	mov	fp, r3
    b99e:	3301      	adds	r3, #1
    b9a0:	2704      	movs	r7, #4
    b9a2:	2600      	movs	r6, #0
    b9a4:	9302      	str	r3, [sp, #8]
    b9a6:	e74c      	b.n	b842 <__aeabi_dmul+0x4a>
    b9a8:	2303      	movs	r3, #3
    b9aa:	4681      	mov	r9, r0
    b9ac:	270c      	movs	r7, #12
    b9ae:	9302      	str	r3, [sp, #8]
    b9b0:	e747      	b.n	b842 <__aeabi_dmul+0x4a>
    b9b2:	2280      	movs	r2, #128	; 0x80
    b9b4:	2300      	movs	r3, #0
    b9b6:	2500      	movs	r5, #0
    b9b8:	0312      	lsls	r2, r2, #12
    b9ba:	4699      	mov	r9, r3
    b9bc:	4c05      	ldr	r4, [pc, #20]	; (b9d4 <__aeabi_dmul+0x1dc>)
    b9be:	e782      	b.n	b8c6 <__aeabi_dmul+0xce>
    b9c0:	465c      	mov	r4, fp
    b9c2:	464b      	mov	r3, r9
    b9c4:	9802      	ldr	r0, [sp, #8]
    b9c6:	e76f      	b.n	b8a8 <__aeabi_dmul+0xb0>
    b9c8:	465c      	mov	r4, fp
    b9ca:	464b      	mov	r3, r9
    b9cc:	9501      	str	r5, [sp, #4]
    b9ce:	9802      	ldr	r0, [sp, #8]
    b9d0:	e76a      	b.n	b8a8 <__aeabi_dmul+0xb0>
    b9d2:	46c0      	nop			; (mov r8, r8)
    b9d4:	000007ff 	.word	0x000007ff
    b9d8:	fffffc01 	.word	0xfffffc01
    b9dc:	0000ccd4 	.word	0x0000ccd4
    b9e0:	800fffff 	.word	0x800fffff
    b9e4:	fffffc0d 	.word	0xfffffc0d
    b9e8:	464a      	mov	r2, r9
    b9ea:	4649      	mov	r1, r9
    b9ec:	0c17      	lsrs	r7, r2, #16
    b9ee:	0c1a      	lsrs	r2, r3, #16
    b9f0:	041b      	lsls	r3, r3, #16
    b9f2:	0c1b      	lsrs	r3, r3, #16
    b9f4:	0408      	lsls	r0, r1, #16
    b9f6:	0019      	movs	r1, r3
    b9f8:	0c00      	lsrs	r0, r0, #16
    b9fa:	4341      	muls	r1, r0
    b9fc:	0015      	movs	r5, r2
    b9fe:	4688      	mov	r8, r1
    ba00:	0019      	movs	r1, r3
    ba02:	437d      	muls	r5, r7
    ba04:	4379      	muls	r1, r7
    ba06:	9503      	str	r5, [sp, #12]
    ba08:	4689      	mov	r9, r1
    ba0a:	0029      	movs	r1, r5
    ba0c:	0015      	movs	r5, r2
    ba0e:	4345      	muls	r5, r0
    ba10:	444d      	add	r5, r9
    ba12:	9502      	str	r5, [sp, #8]
    ba14:	4645      	mov	r5, r8
    ba16:	0c2d      	lsrs	r5, r5, #16
    ba18:	46aa      	mov	sl, r5
    ba1a:	9d02      	ldr	r5, [sp, #8]
    ba1c:	4455      	add	r5, sl
    ba1e:	45a9      	cmp	r9, r5
    ba20:	d906      	bls.n	ba30 <__aeabi_dmul+0x238>
    ba22:	468a      	mov	sl, r1
    ba24:	2180      	movs	r1, #128	; 0x80
    ba26:	0249      	lsls	r1, r1, #9
    ba28:	4689      	mov	r9, r1
    ba2a:	44ca      	add	sl, r9
    ba2c:	4651      	mov	r1, sl
    ba2e:	9103      	str	r1, [sp, #12]
    ba30:	0c29      	lsrs	r1, r5, #16
    ba32:	9104      	str	r1, [sp, #16]
    ba34:	4641      	mov	r1, r8
    ba36:	0409      	lsls	r1, r1, #16
    ba38:	042d      	lsls	r5, r5, #16
    ba3a:	0c09      	lsrs	r1, r1, #16
    ba3c:	4688      	mov	r8, r1
    ba3e:	0029      	movs	r1, r5
    ba40:	0c25      	lsrs	r5, r4, #16
    ba42:	0424      	lsls	r4, r4, #16
    ba44:	4441      	add	r1, r8
    ba46:	0c24      	lsrs	r4, r4, #16
    ba48:	9105      	str	r1, [sp, #20]
    ba4a:	0021      	movs	r1, r4
    ba4c:	4341      	muls	r1, r0
    ba4e:	4688      	mov	r8, r1
    ba50:	0021      	movs	r1, r4
    ba52:	4379      	muls	r1, r7
    ba54:	468a      	mov	sl, r1
    ba56:	4368      	muls	r0, r5
    ba58:	4641      	mov	r1, r8
    ba5a:	4450      	add	r0, sl
    ba5c:	4681      	mov	r9, r0
    ba5e:	0c08      	lsrs	r0, r1, #16
    ba60:	4448      	add	r0, r9
    ba62:	436f      	muls	r7, r5
    ba64:	4582      	cmp	sl, r0
    ba66:	d903      	bls.n	ba70 <__aeabi_dmul+0x278>
    ba68:	2180      	movs	r1, #128	; 0x80
    ba6a:	0249      	lsls	r1, r1, #9
    ba6c:	4689      	mov	r9, r1
    ba6e:	444f      	add	r7, r9
    ba70:	0c01      	lsrs	r1, r0, #16
    ba72:	4689      	mov	r9, r1
    ba74:	0039      	movs	r1, r7
    ba76:	4449      	add	r1, r9
    ba78:	9102      	str	r1, [sp, #8]
    ba7a:	4641      	mov	r1, r8
    ba7c:	040f      	lsls	r7, r1, #16
    ba7e:	9904      	ldr	r1, [sp, #16]
    ba80:	0c3f      	lsrs	r7, r7, #16
    ba82:	4688      	mov	r8, r1
    ba84:	0400      	lsls	r0, r0, #16
    ba86:	19c0      	adds	r0, r0, r7
    ba88:	4480      	add	r8, r0
    ba8a:	4641      	mov	r1, r8
    ba8c:	9104      	str	r1, [sp, #16]
    ba8e:	4659      	mov	r1, fp
    ba90:	0c0f      	lsrs	r7, r1, #16
    ba92:	0409      	lsls	r1, r1, #16
    ba94:	0c09      	lsrs	r1, r1, #16
    ba96:	4688      	mov	r8, r1
    ba98:	4359      	muls	r1, r3
    ba9a:	468a      	mov	sl, r1
    ba9c:	0039      	movs	r1, r7
    ba9e:	4351      	muls	r1, r2
    baa0:	4689      	mov	r9, r1
    baa2:	4641      	mov	r1, r8
    baa4:	434a      	muls	r2, r1
    baa6:	4651      	mov	r1, sl
    baa8:	0c09      	lsrs	r1, r1, #16
    baaa:	468b      	mov	fp, r1
    baac:	437b      	muls	r3, r7
    baae:	18d2      	adds	r2, r2, r3
    bab0:	445a      	add	r2, fp
    bab2:	4293      	cmp	r3, r2
    bab4:	d903      	bls.n	babe <__aeabi_dmul+0x2c6>
    bab6:	2380      	movs	r3, #128	; 0x80
    bab8:	025b      	lsls	r3, r3, #9
    baba:	469b      	mov	fp, r3
    babc:	44d9      	add	r9, fp
    babe:	4651      	mov	r1, sl
    bac0:	0409      	lsls	r1, r1, #16
    bac2:	0c09      	lsrs	r1, r1, #16
    bac4:	468a      	mov	sl, r1
    bac6:	4641      	mov	r1, r8
    bac8:	4361      	muls	r1, r4
    baca:	437c      	muls	r4, r7
    bacc:	0c13      	lsrs	r3, r2, #16
    bace:	0412      	lsls	r2, r2, #16
    bad0:	444b      	add	r3, r9
    bad2:	4452      	add	r2, sl
    bad4:	46a1      	mov	r9, r4
    bad6:	468a      	mov	sl, r1
    bad8:	003c      	movs	r4, r7
    bada:	4641      	mov	r1, r8
    badc:	436c      	muls	r4, r5
    bade:	434d      	muls	r5, r1
    bae0:	4651      	mov	r1, sl
    bae2:	444d      	add	r5, r9
    bae4:	0c0f      	lsrs	r7, r1, #16
    bae6:	197d      	adds	r5, r7, r5
    bae8:	45a9      	cmp	r9, r5
    baea:	d903      	bls.n	baf4 <__aeabi_dmul+0x2fc>
    baec:	2180      	movs	r1, #128	; 0x80
    baee:	0249      	lsls	r1, r1, #9
    baf0:	4688      	mov	r8, r1
    baf2:	4444      	add	r4, r8
    baf4:	9f04      	ldr	r7, [sp, #16]
    baf6:	9903      	ldr	r1, [sp, #12]
    baf8:	46b8      	mov	r8, r7
    bafa:	4441      	add	r1, r8
    bafc:	468b      	mov	fp, r1
    bafe:	4583      	cmp	fp, r0
    bb00:	4180      	sbcs	r0, r0
    bb02:	4241      	negs	r1, r0
    bb04:	4688      	mov	r8, r1
    bb06:	4651      	mov	r1, sl
    bb08:	0408      	lsls	r0, r1, #16
    bb0a:	042f      	lsls	r7, r5, #16
    bb0c:	0c00      	lsrs	r0, r0, #16
    bb0e:	183f      	adds	r7, r7, r0
    bb10:	4658      	mov	r0, fp
    bb12:	9902      	ldr	r1, [sp, #8]
    bb14:	1810      	adds	r0, r2, r0
    bb16:	4689      	mov	r9, r1
    bb18:	4290      	cmp	r0, r2
    bb1a:	4192      	sbcs	r2, r2
    bb1c:	444f      	add	r7, r9
    bb1e:	46ba      	mov	sl, r7
    bb20:	4252      	negs	r2, r2
    bb22:	4699      	mov	r9, r3
    bb24:	4693      	mov	fp, r2
    bb26:	44c2      	add	sl, r8
    bb28:	44d1      	add	r9, sl
    bb2a:	44cb      	add	fp, r9
    bb2c:	428f      	cmp	r7, r1
    bb2e:	41bf      	sbcs	r7, r7
    bb30:	45c2      	cmp	sl, r8
    bb32:	4189      	sbcs	r1, r1
    bb34:	4599      	cmp	r9, r3
    bb36:	419b      	sbcs	r3, r3
    bb38:	4593      	cmp	fp, r2
    bb3a:	4192      	sbcs	r2, r2
    bb3c:	427f      	negs	r7, r7
    bb3e:	4249      	negs	r1, r1
    bb40:	0c2d      	lsrs	r5, r5, #16
    bb42:	4252      	negs	r2, r2
    bb44:	430f      	orrs	r7, r1
    bb46:	425b      	negs	r3, r3
    bb48:	4313      	orrs	r3, r2
    bb4a:	197f      	adds	r7, r7, r5
    bb4c:	18ff      	adds	r7, r7, r3
    bb4e:	465b      	mov	r3, fp
    bb50:	193c      	adds	r4, r7, r4
    bb52:	0ddb      	lsrs	r3, r3, #23
    bb54:	9a05      	ldr	r2, [sp, #20]
    bb56:	0264      	lsls	r4, r4, #9
    bb58:	431c      	orrs	r4, r3
    bb5a:	0243      	lsls	r3, r0, #9
    bb5c:	4313      	orrs	r3, r2
    bb5e:	1e5d      	subs	r5, r3, #1
    bb60:	41ab      	sbcs	r3, r5
    bb62:	465a      	mov	r2, fp
    bb64:	0dc0      	lsrs	r0, r0, #23
    bb66:	4303      	orrs	r3, r0
    bb68:	0252      	lsls	r2, r2, #9
    bb6a:	4313      	orrs	r3, r2
    bb6c:	01e2      	lsls	r2, r4, #7
    bb6e:	d556      	bpl.n	bc1e <__aeabi_dmul+0x426>
    bb70:	2001      	movs	r0, #1
    bb72:	085a      	lsrs	r2, r3, #1
    bb74:	4003      	ands	r3, r0
    bb76:	4313      	orrs	r3, r2
    bb78:	07e2      	lsls	r2, r4, #31
    bb7a:	4313      	orrs	r3, r2
    bb7c:	0864      	lsrs	r4, r4, #1
    bb7e:	485a      	ldr	r0, [pc, #360]	; (bce8 <__aeabi_dmul+0x4f0>)
    bb80:	4460      	add	r0, ip
    bb82:	2800      	cmp	r0, #0
    bb84:	dd4d      	ble.n	bc22 <__aeabi_dmul+0x42a>
    bb86:	075a      	lsls	r2, r3, #29
    bb88:	d009      	beq.n	bb9e <__aeabi_dmul+0x3a6>
    bb8a:	220f      	movs	r2, #15
    bb8c:	401a      	ands	r2, r3
    bb8e:	2a04      	cmp	r2, #4
    bb90:	d005      	beq.n	bb9e <__aeabi_dmul+0x3a6>
    bb92:	1d1a      	adds	r2, r3, #4
    bb94:	429a      	cmp	r2, r3
    bb96:	419b      	sbcs	r3, r3
    bb98:	425b      	negs	r3, r3
    bb9a:	18e4      	adds	r4, r4, r3
    bb9c:	0013      	movs	r3, r2
    bb9e:	01e2      	lsls	r2, r4, #7
    bba0:	d504      	bpl.n	bbac <__aeabi_dmul+0x3b4>
    bba2:	2080      	movs	r0, #128	; 0x80
    bba4:	4a51      	ldr	r2, [pc, #324]	; (bcec <__aeabi_dmul+0x4f4>)
    bba6:	00c0      	lsls	r0, r0, #3
    bba8:	4014      	ands	r4, r2
    bbaa:	4460      	add	r0, ip
    bbac:	4a50      	ldr	r2, [pc, #320]	; (bcf0 <__aeabi_dmul+0x4f8>)
    bbae:	4290      	cmp	r0, r2
    bbb0:	dd00      	ble.n	bbb4 <__aeabi_dmul+0x3bc>
    bbb2:	e6e3      	b.n	b97c <__aeabi_dmul+0x184>
    bbb4:	2501      	movs	r5, #1
    bbb6:	08db      	lsrs	r3, r3, #3
    bbb8:	0762      	lsls	r2, r4, #29
    bbba:	431a      	orrs	r2, r3
    bbbc:	0264      	lsls	r4, r4, #9
    bbbe:	9b01      	ldr	r3, [sp, #4]
    bbc0:	4691      	mov	r9, r2
    bbc2:	0b22      	lsrs	r2, r4, #12
    bbc4:	0544      	lsls	r4, r0, #21
    bbc6:	0d64      	lsrs	r4, r4, #21
    bbc8:	401d      	ands	r5, r3
    bbca:	e67c      	b.n	b8c6 <__aeabi_dmul+0xce>
    bbcc:	2280      	movs	r2, #128	; 0x80
    bbce:	4659      	mov	r1, fp
    bbd0:	0312      	lsls	r2, r2, #12
    bbd2:	4211      	tst	r1, r2
    bbd4:	d008      	beq.n	bbe8 <__aeabi_dmul+0x3f0>
    bbd6:	4214      	tst	r4, r2
    bbd8:	d106      	bne.n	bbe8 <__aeabi_dmul+0x3f0>
    bbda:	4322      	orrs	r2, r4
    bbdc:	0312      	lsls	r2, r2, #12
    bbde:	0b12      	lsrs	r2, r2, #12
    bbe0:	4645      	mov	r5, r8
    bbe2:	4699      	mov	r9, r3
    bbe4:	4c43      	ldr	r4, [pc, #268]	; (bcf4 <__aeabi_dmul+0x4fc>)
    bbe6:	e66e      	b.n	b8c6 <__aeabi_dmul+0xce>
    bbe8:	465b      	mov	r3, fp
    bbea:	431a      	orrs	r2, r3
    bbec:	0312      	lsls	r2, r2, #12
    bbee:	0b12      	lsrs	r2, r2, #12
    bbf0:	4c40      	ldr	r4, [pc, #256]	; (bcf4 <__aeabi_dmul+0x4fc>)
    bbf2:	e668      	b.n	b8c6 <__aeabi_dmul+0xce>
    bbf4:	0003      	movs	r3, r0
    bbf6:	4654      	mov	r4, sl
    bbf8:	3b28      	subs	r3, #40	; 0x28
    bbfa:	409c      	lsls	r4, r3
    bbfc:	2300      	movs	r3, #0
    bbfe:	e6b9      	b.n	b974 <__aeabi_dmul+0x17c>
    bc00:	f000 fd18 	bl	c634 <__clzsi2>
    bc04:	3020      	adds	r0, #32
    bc06:	e6a6      	b.n	b956 <__aeabi_dmul+0x15e>
    bc08:	0003      	movs	r3, r0
    bc0a:	3b28      	subs	r3, #40	; 0x28
    bc0c:	409f      	lsls	r7, r3
    bc0e:	2300      	movs	r3, #0
    bc10:	46bb      	mov	fp, r7
    bc12:	4699      	mov	r9, r3
    bc14:	e68a      	b.n	b92c <__aeabi_dmul+0x134>
    bc16:	f000 fd0d 	bl	c634 <__clzsi2>
    bc1a:	3020      	adds	r0, #32
    bc1c:	e674      	b.n	b908 <__aeabi_dmul+0x110>
    bc1e:	46b4      	mov	ip, r6
    bc20:	e7ad      	b.n	bb7e <__aeabi_dmul+0x386>
    bc22:	2501      	movs	r5, #1
    bc24:	1a2a      	subs	r2, r5, r0
    bc26:	2a38      	cmp	r2, #56	; 0x38
    bc28:	dd06      	ble.n	bc38 <__aeabi_dmul+0x440>
    bc2a:	9b01      	ldr	r3, [sp, #4]
    bc2c:	2400      	movs	r4, #0
    bc2e:	401d      	ands	r5, r3
    bc30:	2300      	movs	r3, #0
    bc32:	2200      	movs	r2, #0
    bc34:	4699      	mov	r9, r3
    bc36:	e646      	b.n	b8c6 <__aeabi_dmul+0xce>
    bc38:	2a1f      	cmp	r2, #31
    bc3a:	dc21      	bgt.n	bc80 <__aeabi_dmul+0x488>
    bc3c:	2520      	movs	r5, #32
    bc3e:	0020      	movs	r0, r4
    bc40:	1aad      	subs	r5, r5, r2
    bc42:	001e      	movs	r6, r3
    bc44:	40ab      	lsls	r3, r5
    bc46:	40a8      	lsls	r0, r5
    bc48:	40d6      	lsrs	r6, r2
    bc4a:	1e5d      	subs	r5, r3, #1
    bc4c:	41ab      	sbcs	r3, r5
    bc4e:	4330      	orrs	r0, r6
    bc50:	4318      	orrs	r0, r3
    bc52:	40d4      	lsrs	r4, r2
    bc54:	0743      	lsls	r3, r0, #29
    bc56:	d009      	beq.n	bc6c <__aeabi_dmul+0x474>
    bc58:	230f      	movs	r3, #15
    bc5a:	4003      	ands	r3, r0
    bc5c:	2b04      	cmp	r3, #4
    bc5e:	d005      	beq.n	bc6c <__aeabi_dmul+0x474>
    bc60:	0003      	movs	r3, r0
    bc62:	1d18      	adds	r0, r3, #4
    bc64:	4298      	cmp	r0, r3
    bc66:	419b      	sbcs	r3, r3
    bc68:	425b      	negs	r3, r3
    bc6a:	18e4      	adds	r4, r4, r3
    bc6c:	0223      	lsls	r3, r4, #8
    bc6e:	d521      	bpl.n	bcb4 <__aeabi_dmul+0x4bc>
    bc70:	2501      	movs	r5, #1
    bc72:	9b01      	ldr	r3, [sp, #4]
    bc74:	2401      	movs	r4, #1
    bc76:	401d      	ands	r5, r3
    bc78:	2300      	movs	r3, #0
    bc7a:	2200      	movs	r2, #0
    bc7c:	4699      	mov	r9, r3
    bc7e:	e622      	b.n	b8c6 <__aeabi_dmul+0xce>
    bc80:	251f      	movs	r5, #31
    bc82:	0021      	movs	r1, r4
    bc84:	426d      	negs	r5, r5
    bc86:	1a28      	subs	r0, r5, r0
    bc88:	40c1      	lsrs	r1, r0
    bc8a:	0008      	movs	r0, r1
    bc8c:	2a20      	cmp	r2, #32
    bc8e:	d01d      	beq.n	bccc <__aeabi_dmul+0x4d4>
    bc90:	355f      	adds	r5, #95	; 0x5f
    bc92:	1aaa      	subs	r2, r5, r2
    bc94:	4094      	lsls	r4, r2
    bc96:	4323      	orrs	r3, r4
    bc98:	1e5c      	subs	r4, r3, #1
    bc9a:	41a3      	sbcs	r3, r4
    bc9c:	2507      	movs	r5, #7
    bc9e:	4303      	orrs	r3, r0
    bca0:	401d      	ands	r5, r3
    bca2:	2200      	movs	r2, #0
    bca4:	2d00      	cmp	r5, #0
    bca6:	d009      	beq.n	bcbc <__aeabi_dmul+0x4c4>
    bca8:	220f      	movs	r2, #15
    bcaa:	2400      	movs	r4, #0
    bcac:	401a      	ands	r2, r3
    bcae:	0018      	movs	r0, r3
    bcb0:	2a04      	cmp	r2, #4
    bcb2:	d1d6      	bne.n	bc62 <__aeabi_dmul+0x46a>
    bcb4:	0003      	movs	r3, r0
    bcb6:	0765      	lsls	r5, r4, #29
    bcb8:	0264      	lsls	r4, r4, #9
    bcba:	0b22      	lsrs	r2, r4, #12
    bcbc:	08db      	lsrs	r3, r3, #3
    bcbe:	432b      	orrs	r3, r5
    bcc0:	2501      	movs	r5, #1
    bcc2:	4699      	mov	r9, r3
    bcc4:	9b01      	ldr	r3, [sp, #4]
    bcc6:	2400      	movs	r4, #0
    bcc8:	401d      	ands	r5, r3
    bcca:	e5fc      	b.n	b8c6 <__aeabi_dmul+0xce>
    bccc:	2400      	movs	r4, #0
    bcce:	e7e2      	b.n	bc96 <__aeabi_dmul+0x49e>
    bcd0:	2280      	movs	r2, #128	; 0x80
    bcd2:	2501      	movs	r5, #1
    bcd4:	0312      	lsls	r2, r2, #12
    bcd6:	4322      	orrs	r2, r4
    bcd8:	9901      	ldr	r1, [sp, #4]
    bcda:	0312      	lsls	r2, r2, #12
    bcdc:	0b12      	lsrs	r2, r2, #12
    bcde:	400d      	ands	r5, r1
    bce0:	4699      	mov	r9, r3
    bce2:	4c04      	ldr	r4, [pc, #16]	; (bcf4 <__aeabi_dmul+0x4fc>)
    bce4:	e5ef      	b.n	b8c6 <__aeabi_dmul+0xce>
    bce6:	46c0      	nop			; (mov r8, r8)
    bce8:	000003ff 	.word	0x000003ff
    bcec:	feffffff 	.word	0xfeffffff
    bcf0:	000007fe 	.word	0x000007fe
    bcf4:	000007ff 	.word	0x000007ff

0000bcf8 <__aeabi_dsub>:
    bcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcfa:	4646      	mov	r6, r8
    bcfc:	46d6      	mov	lr, sl
    bcfe:	464f      	mov	r7, r9
    bd00:	030c      	lsls	r4, r1, #12
    bd02:	b5c0      	push	{r6, r7, lr}
    bd04:	0fcd      	lsrs	r5, r1, #31
    bd06:	004e      	lsls	r6, r1, #1
    bd08:	0a61      	lsrs	r1, r4, #9
    bd0a:	0f44      	lsrs	r4, r0, #29
    bd0c:	430c      	orrs	r4, r1
    bd0e:	00c1      	lsls	r1, r0, #3
    bd10:	0058      	lsls	r0, r3, #1
    bd12:	0d40      	lsrs	r0, r0, #21
    bd14:	4684      	mov	ip, r0
    bd16:	468a      	mov	sl, r1
    bd18:	000f      	movs	r7, r1
    bd1a:	0319      	lsls	r1, r3, #12
    bd1c:	0f50      	lsrs	r0, r2, #29
    bd1e:	0a49      	lsrs	r1, r1, #9
    bd20:	4301      	orrs	r1, r0
    bd22:	48c6      	ldr	r0, [pc, #792]	; (c03c <__aeabi_dsub+0x344>)
    bd24:	0d76      	lsrs	r6, r6, #21
    bd26:	46a8      	mov	r8, r5
    bd28:	0fdb      	lsrs	r3, r3, #31
    bd2a:	00d2      	lsls	r2, r2, #3
    bd2c:	4584      	cmp	ip, r0
    bd2e:	d100      	bne.n	bd32 <__aeabi_dsub+0x3a>
    bd30:	e0d8      	b.n	bee4 <__aeabi_dsub+0x1ec>
    bd32:	2001      	movs	r0, #1
    bd34:	4043      	eors	r3, r0
    bd36:	42ab      	cmp	r3, r5
    bd38:	d100      	bne.n	bd3c <__aeabi_dsub+0x44>
    bd3a:	e0a6      	b.n	be8a <__aeabi_dsub+0x192>
    bd3c:	4660      	mov	r0, ip
    bd3e:	1a35      	subs	r5, r6, r0
    bd40:	2d00      	cmp	r5, #0
    bd42:	dc00      	bgt.n	bd46 <__aeabi_dsub+0x4e>
    bd44:	e105      	b.n	bf52 <__aeabi_dsub+0x25a>
    bd46:	2800      	cmp	r0, #0
    bd48:	d110      	bne.n	bd6c <__aeabi_dsub+0x74>
    bd4a:	000b      	movs	r3, r1
    bd4c:	4313      	orrs	r3, r2
    bd4e:	d100      	bne.n	bd52 <__aeabi_dsub+0x5a>
    bd50:	e0d7      	b.n	bf02 <__aeabi_dsub+0x20a>
    bd52:	1e6b      	subs	r3, r5, #1
    bd54:	2b00      	cmp	r3, #0
    bd56:	d000      	beq.n	bd5a <__aeabi_dsub+0x62>
    bd58:	e14b      	b.n	bff2 <__aeabi_dsub+0x2fa>
    bd5a:	4653      	mov	r3, sl
    bd5c:	1a9f      	subs	r7, r3, r2
    bd5e:	45ba      	cmp	sl, r7
    bd60:	4180      	sbcs	r0, r0
    bd62:	1a64      	subs	r4, r4, r1
    bd64:	4240      	negs	r0, r0
    bd66:	1a24      	subs	r4, r4, r0
    bd68:	2601      	movs	r6, #1
    bd6a:	e01e      	b.n	bdaa <__aeabi_dsub+0xb2>
    bd6c:	4bb3      	ldr	r3, [pc, #716]	; (c03c <__aeabi_dsub+0x344>)
    bd6e:	429e      	cmp	r6, r3
    bd70:	d048      	beq.n	be04 <__aeabi_dsub+0x10c>
    bd72:	2380      	movs	r3, #128	; 0x80
    bd74:	041b      	lsls	r3, r3, #16
    bd76:	4319      	orrs	r1, r3
    bd78:	2d38      	cmp	r5, #56	; 0x38
    bd7a:	dd00      	ble.n	bd7e <__aeabi_dsub+0x86>
    bd7c:	e119      	b.n	bfb2 <__aeabi_dsub+0x2ba>
    bd7e:	2d1f      	cmp	r5, #31
    bd80:	dd00      	ble.n	bd84 <__aeabi_dsub+0x8c>
    bd82:	e14c      	b.n	c01e <__aeabi_dsub+0x326>
    bd84:	2320      	movs	r3, #32
    bd86:	000f      	movs	r7, r1
    bd88:	1b5b      	subs	r3, r3, r5
    bd8a:	0010      	movs	r0, r2
    bd8c:	409a      	lsls	r2, r3
    bd8e:	409f      	lsls	r7, r3
    bd90:	40e8      	lsrs	r0, r5
    bd92:	1e53      	subs	r3, r2, #1
    bd94:	419a      	sbcs	r2, r3
    bd96:	40e9      	lsrs	r1, r5
    bd98:	4307      	orrs	r7, r0
    bd9a:	4317      	orrs	r7, r2
    bd9c:	4653      	mov	r3, sl
    bd9e:	1bdf      	subs	r7, r3, r7
    bda0:	1a61      	subs	r1, r4, r1
    bda2:	45ba      	cmp	sl, r7
    bda4:	41a4      	sbcs	r4, r4
    bda6:	4264      	negs	r4, r4
    bda8:	1b0c      	subs	r4, r1, r4
    bdaa:	0223      	lsls	r3, r4, #8
    bdac:	d400      	bmi.n	bdb0 <__aeabi_dsub+0xb8>
    bdae:	e0c5      	b.n	bf3c <__aeabi_dsub+0x244>
    bdb0:	0264      	lsls	r4, r4, #9
    bdb2:	0a65      	lsrs	r5, r4, #9
    bdb4:	2d00      	cmp	r5, #0
    bdb6:	d100      	bne.n	bdba <__aeabi_dsub+0xc2>
    bdb8:	e0f6      	b.n	bfa8 <__aeabi_dsub+0x2b0>
    bdba:	0028      	movs	r0, r5
    bdbc:	f000 fc3a 	bl	c634 <__clzsi2>
    bdc0:	0003      	movs	r3, r0
    bdc2:	3b08      	subs	r3, #8
    bdc4:	2b1f      	cmp	r3, #31
    bdc6:	dd00      	ble.n	bdca <__aeabi_dsub+0xd2>
    bdc8:	e0e9      	b.n	bf9e <__aeabi_dsub+0x2a6>
    bdca:	2220      	movs	r2, #32
    bdcc:	003c      	movs	r4, r7
    bdce:	1ad2      	subs	r2, r2, r3
    bdd0:	409d      	lsls	r5, r3
    bdd2:	40d4      	lsrs	r4, r2
    bdd4:	409f      	lsls	r7, r3
    bdd6:	4325      	orrs	r5, r4
    bdd8:	429e      	cmp	r6, r3
    bdda:	dd00      	ble.n	bdde <__aeabi_dsub+0xe6>
    bddc:	e0db      	b.n	bf96 <__aeabi_dsub+0x29e>
    bdde:	1b9e      	subs	r6, r3, r6
    bde0:	1c73      	adds	r3, r6, #1
    bde2:	2b1f      	cmp	r3, #31
    bde4:	dd00      	ble.n	bde8 <__aeabi_dsub+0xf0>
    bde6:	e10a      	b.n	bffe <__aeabi_dsub+0x306>
    bde8:	2220      	movs	r2, #32
    bdea:	0038      	movs	r0, r7
    bdec:	1ad2      	subs	r2, r2, r3
    bdee:	0029      	movs	r1, r5
    bdf0:	4097      	lsls	r7, r2
    bdf2:	002c      	movs	r4, r5
    bdf4:	4091      	lsls	r1, r2
    bdf6:	40d8      	lsrs	r0, r3
    bdf8:	1e7a      	subs	r2, r7, #1
    bdfa:	4197      	sbcs	r7, r2
    bdfc:	40dc      	lsrs	r4, r3
    bdfe:	2600      	movs	r6, #0
    be00:	4301      	orrs	r1, r0
    be02:	430f      	orrs	r7, r1
    be04:	077b      	lsls	r3, r7, #29
    be06:	d009      	beq.n	be1c <__aeabi_dsub+0x124>
    be08:	230f      	movs	r3, #15
    be0a:	403b      	ands	r3, r7
    be0c:	2b04      	cmp	r3, #4
    be0e:	d005      	beq.n	be1c <__aeabi_dsub+0x124>
    be10:	1d3b      	adds	r3, r7, #4
    be12:	42bb      	cmp	r3, r7
    be14:	41bf      	sbcs	r7, r7
    be16:	427f      	negs	r7, r7
    be18:	19e4      	adds	r4, r4, r7
    be1a:	001f      	movs	r7, r3
    be1c:	0223      	lsls	r3, r4, #8
    be1e:	d525      	bpl.n	be6c <__aeabi_dsub+0x174>
    be20:	4b86      	ldr	r3, [pc, #536]	; (c03c <__aeabi_dsub+0x344>)
    be22:	3601      	adds	r6, #1
    be24:	429e      	cmp	r6, r3
    be26:	d100      	bne.n	be2a <__aeabi_dsub+0x132>
    be28:	e0af      	b.n	bf8a <__aeabi_dsub+0x292>
    be2a:	4b85      	ldr	r3, [pc, #532]	; (c040 <__aeabi_dsub+0x348>)
    be2c:	2501      	movs	r5, #1
    be2e:	401c      	ands	r4, r3
    be30:	4643      	mov	r3, r8
    be32:	0762      	lsls	r2, r4, #29
    be34:	08ff      	lsrs	r7, r7, #3
    be36:	0264      	lsls	r4, r4, #9
    be38:	0576      	lsls	r6, r6, #21
    be3a:	4317      	orrs	r7, r2
    be3c:	0b24      	lsrs	r4, r4, #12
    be3e:	0d76      	lsrs	r6, r6, #21
    be40:	401d      	ands	r5, r3
    be42:	2100      	movs	r1, #0
    be44:	0324      	lsls	r4, r4, #12
    be46:	0b23      	lsrs	r3, r4, #12
    be48:	0d0c      	lsrs	r4, r1, #20
    be4a:	4a7e      	ldr	r2, [pc, #504]	; (c044 <__aeabi_dsub+0x34c>)
    be4c:	0524      	lsls	r4, r4, #20
    be4e:	431c      	orrs	r4, r3
    be50:	4014      	ands	r4, r2
    be52:	0533      	lsls	r3, r6, #20
    be54:	4323      	orrs	r3, r4
    be56:	005b      	lsls	r3, r3, #1
    be58:	07ed      	lsls	r5, r5, #31
    be5a:	085b      	lsrs	r3, r3, #1
    be5c:	432b      	orrs	r3, r5
    be5e:	0038      	movs	r0, r7
    be60:	0019      	movs	r1, r3
    be62:	bc1c      	pop	{r2, r3, r4}
    be64:	4690      	mov	r8, r2
    be66:	4699      	mov	r9, r3
    be68:	46a2      	mov	sl, r4
    be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be6c:	2501      	movs	r5, #1
    be6e:	4643      	mov	r3, r8
    be70:	0762      	lsls	r2, r4, #29
    be72:	08ff      	lsrs	r7, r7, #3
    be74:	4317      	orrs	r7, r2
    be76:	08e4      	lsrs	r4, r4, #3
    be78:	401d      	ands	r5, r3
    be7a:	4b70      	ldr	r3, [pc, #448]	; (c03c <__aeabi_dsub+0x344>)
    be7c:	429e      	cmp	r6, r3
    be7e:	d036      	beq.n	beee <__aeabi_dsub+0x1f6>
    be80:	0324      	lsls	r4, r4, #12
    be82:	0576      	lsls	r6, r6, #21
    be84:	0b24      	lsrs	r4, r4, #12
    be86:	0d76      	lsrs	r6, r6, #21
    be88:	e7db      	b.n	be42 <__aeabi_dsub+0x14a>
    be8a:	4663      	mov	r3, ip
    be8c:	1af3      	subs	r3, r6, r3
    be8e:	2b00      	cmp	r3, #0
    be90:	dc00      	bgt.n	be94 <__aeabi_dsub+0x19c>
    be92:	e094      	b.n	bfbe <__aeabi_dsub+0x2c6>
    be94:	4660      	mov	r0, ip
    be96:	2800      	cmp	r0, #0
    be98:	d035      	beq.n	bf06 <__aeabi_dsub+0x20e>
    be9a:	4868      	ldr	r0, [pc, #416]	; (c03c <__aeabi_dsub+0x344>)
    be9c:	4286      	cmp	r6, r0
    be9e:	d0b1      	beq.n	be04 <__aeabi_dsub+0x10c>
    bea0:	2780      	movs	r7, #128	; 0x80
    bea2:	043f      	lsls	r7, r7, #16
    bea4:	4339      	orrs	r1, r7
    bea6:	2b38      	cmp	r3, #56	; 0x38
    bea8:	dc00      	bgt.n	beac <__aeabi_dsub+0x1b4>
    beaa:	e0fd      	b.n	c0a8 <__aeabi_dsub+0x3b0>
    beac:	430a      	orrs	r2, r1
    beae:	0017      	movs	r7, r2
    beb0:	2100      	movs	r1, #0
    beb2:	1e7a      	subs	r2, r7, #1
    beb4:	4197      	sbcs	r7, r2
    beb6:	4457      	add	r7, sl
    beb8:	4557      	cmp	r7, sl
    beba:	4180      	sbcs	r0, r0
    bebc:	1909      	adds	r1, r1, r4
    bebe:	4244      	negs	r4, r0
    bec0:	190c      	adds	r4, r1, r4
    bec2:	0223      	lsls	r3, r4, #8
    bec4:	d53a      	bpl.n	bf3c <__aeabi_dsub+0x244>
    bec6:	4b5d      	ldr	r3, [pc, #372]	; (c03c <__aeabi_dsub+0x344>)
    bec8:	3601      	adds	r6, #1
    beca:	429e      	cmp	r6, r3
    becc:	d100      	bne.n	bed0 <__aeabi_dsub+0x1d8>
    bece:	e14b      	b.n	c168 <__aeabi_dsub+0x470>
    bed0:	2201      	movs	r2, #1
    bed2:	4b5b      	ldr	r3, [pc, #364]	; (c040 <__aeabi_dsub+0x348>)
    bed4:	401c      	ands	r4, r3
    bed6:	087b      	lsrs	r3, r7, #1
    bed8:	4017      	ands	r7, r2
    beda:	431f      	orrs	r7, r3
    bedc:	07e2      	lsls	r2, r4, #31
    bede:	4317      	orrs	r7, r2
    bee0:	0864      	lsrs	r4, r4, #1
    bee2:	e78f      	b.n	be04 <__aeabi_dsub+0x10c>
    bee4:	0008      	movs	r0, r1
    bee6:	4310      	orrs	r0, r2
    bee8:	d000      	beq.n	beec <__aeabi_dsub+0x1f4>
    beea:	e724      	b.n	bd36 <__aeabi_dsub+0x3e>
    beec:	e721      	b.n	bd32 <__aeabi_dsub+0x3a>
    beee:	0023      	movs	r3, r4
    bef0:	433b      	orrs	r3, r7
    bef2:	d100      	bne.n	bef6 <__aeabi_dsub+0x1fe>
    bef4:	e1b9      	b.n	c26a <__aeabi_dsub+0x572>
    bef6:	2280      	movs	r2, #128	; 0x80
    bef8:	0312      	lsls	r2, r2, #12
    befa:	4314      	orrs	r4, r2
    befc:	0324      	lsls	r4, r4, #12
    befe:	0b24      	lsrs	r4, r4, #12
    bf00:	e79f      	b.n	be42 <__aeabi_dsub+0x14a>
    bf02:	002e      	movs	r6, r5
    bf04:	e77e      	b.n	be04 <__aeabi_dsub+0x10c>
    bf06:	0008      	movs	r0, r1
    bf08:	4310      	orrs	r0, r2
    bf0a:	d100      	bne.n	bf0e <__aeabi_dsub+0x216>
    bf0c:	e0ca      	b.n	c0a4 <__aeabi_dsub+0x3ac>
    bf0e:	1e58      	subs	r0, r3, #1
    bf10:	4684      	mov	ip, r0
    bf12:	2800      	cmp	r0, #0
    bf14:	d000      	beq.n	bf18 <__aeabi_dsub+0x220>
    bf16:	e0e7      	b.n	c0e8 <__aeabi_dsub+0x3f0>
    bf18:	4452      	add	r2, sl
    bf1a:	4552      	cmp	r2, sl
    bf1c:	4180      	sbcs	r0, r0
    bf1e:	1864      	adds	r4, r4, r1
    bf20:	4240      	negs	r0, r0
    bf22:	1824      	adds	r4, r4, r0
    bf24:	0017      	movs	r7, r2
    bf26:	2601      	movs	r6, #1
    bf28:	0223      	lsls	r3, r4, #8
    bf2a:	d507      	bpl.n	bf3c <__aeabi_dsub+0x244>
    bf2c:	2602      	movs	r6, #2
    bf2e:	e7cf      	b.n	bed0 <__aeabi_dsub+0x1d8>
    bf30:	4664      	mov	r4, ip
    bf32:	432c      	orrs	r4, r5
    bf34:	d100      	bne.n	bf38 <__aeabi_dsub+0x240>
    bf36:	e1b3      	b.n	c2a0 <__aeabi_dsub+0x5a8>
    bf38:	002c      	movs	r4, r5
    bf3a:	4667      	mov	r7, ip
    bf3c:	077b      	lsls	r3, r7, #29
    bf3e:	d000      	beq.n	bf42 <__aeabi_dsub+0x24a>
    bf40:	e762      	b.n	be08 <__aeabi_dsub+0x110>
    bf42:	0763      	lsls	r3, r4, #29
    bf44:	08ff      	lsrs	r7, r7, #3
    bf46:	431f      	orrs	r7, r3
    bf48:	2501      	movs	r5, #1
    bf4a:	4643      	mov	r3, r8
    bf4c:	08e4      	lsrs	r4, r4, #3
    bf4e:	401d      	ands	r5, r3
    bf50:	e793      	b.n	be7a <__aeabi_dsub+0x182>
    bf52:	2d00      	cmp	r5, #0
    bf54:	d178      	bne.n	c048 <__aeabi_dsub+0x350>
    bf56:	1c75      	adds	r5, r6, #1
    bf58:	056d      	lsls	r5, r5, #21
    bf5a:	0d6d      	lsrs	r5, r5, #21
    bf5c:	2d01      	cmp	r5, #1
    bf5e:	dc00      	bgt.n	bf62 <__aeabi_dsub+0x26a>
    bf60:	e0f2      	b.n	c148 <__aeabi_dsub+0x450>
    bf62:	4650      	mov	r0, sl
    bf64:	1a80      	subs	r0, r0, r2
    bf66:	4582      	cmp	sl, r0
    bf68:	41bf      	sbcs	r7, r7
    bf6a:	1a65      	subs	r5, r4, r1
    bf6c:	427f      	negs	r7, r7
    bf6e:	1bed      	subs	r5, r5, r7
    bf70:	4684      	mov	ip, r0
    bf72:	0228      	lsls	r0, r5, #8
    bf74:	d400      	bmi.n	bf78 <__aeabi_dsub+0x280>
    bf76:	e08c      	b.n	c092 <__aeabi_dsub+0x39a>
    bf78:	4650      	mov	r0, sl
    bf7a:	1a17      	subs	r7, r2, r0
    bf7c:	42ba      	cmp	r2, r7
    bf7e:	4192      	sbcs	r2, r2
    bf80:	1b0c      	subs	r4, r1, r4
    bf82:	4255      	negs	r5, r2
    bf84:	1b65      	subs	r5, r4, r5
    bf86:	4698      	mov	r8, r3
    bf88:	e714      	b.n	bdb4 <__aeabi_dsub+0xbc>
    bf8a:	2501      	movs	r5, #1
    bf8c:	4643      	mov	r3, r8
    bf8e:	2400      	movs	r4, #0
    bf90:	401d      	ands	r5, r3
    bf92:	2700      	movs	r7, #0
    bf94:	e755      	b.n	be42 <__aeabi_dsub+0x14a>
    bf96:	4c2a      	ldr	r4, [pc, #168]	; (c040 <__aeabi_dsub+0x348>)
    bf98:	1af6      	subs	r6, r6, r3
    bf9a:	402c      	ands	r4, r5
    bf9c:	e732      	b.n	be04 <__aeabi_dsub+0x10c>
    bf9e:	003d      	movs	r5, r7
    bfa0:	3828      	subs	r0, #40	; 0x28
    bfa2:	4085      	lsls	r5, r0
    bfa4:	2700      	movs	r7, #0
    bfa6:	e717      	b.n	bdd8 <__aeabi_dsub+0xe0>
    bfa8:	0038      	movs	r0, r7
    bfaa:	f000 fb43 	bl	c634 <__clzsi2>
    bfae:	3020      	adds	r0, #32
    bfb0:	e706      	b.n	bdc0 <__aeabi_dsub+0xc8>
    bfb2:	430a      	orrs	r2, r1
    bfb4:	0017      	movs	r7, r2
    bfb6:	2100      	movs	r1, #0
    bfb8:	1e7a      	subs	r2, r7, #1
    bfba:	4197      	sbcs	r7, r2
    bfbc:	e6ee      	b.n	bd9c <__aeabi_dsub+0xa4>
    bfbe:	2b00      	cmp	r3, #0
    bfc0:	d000      	beq.n	bfc4 <__aeabi_dsub+0x2cc>
    bfc2:	e0e5      	b.n	c190 <__aeabi_dsub+0x498>
    bfc4:	1c73      	adds	r3, r6, #1
    bfc6:	469c      	mov	ip, r3
    bfc8:	055b      	lsls	r3, r3, #21
    bfca:	0d5b      	lsrs	r3, r3, #21
    bfcc:	2b01      	cmp	r3, #1
    bfce:	dc00      	bgt.n	bfd2 <__aeabi_dsub+0x2da>
    bfd0:	e09f      	b.n	c112 <__aeabi_dsub+0x41a>
    bfd2:	4b1a      	ldr	r3, [pc, #104]	; (c03c <__aeabi_dsub+0x344>)
    bfd4:	459c      	cmp	ip, r3
    bfd6:	d100      	bne.n	bfda <__aeabi_dsub+0x2e2>
    bfd8:	e0c5      	b.n	c166 <__aeabi_dsub+0x46e>
    bfda:	4452      	add	r2, sl
    bfdc:	4552      	cmp	r2, sl
    bfde:	4180      	sbcs	r0, r0
    bfe0:	1864      	adds	r4, r4, r1
    bfe2:	4240      	negs	r0, r0
    bfe4:	1824      	adds	r4, r4, r0
    bfe6:	07e7      	lsls	r7, r4, #31
    bfe8:	0852      	lsrs	r2, r2, #1
    bfea:	4317      	orrs	r7, r2
    bfec:	0864      	lsrs	r4, r4, #1
    bfee:	4666      	mov	r6, ip
    bff0:	e708      	b.n	be04 <__aeabi_dsub+0x10c>
    bff2:	4812      	ldr	r0, [pc, #72]	; (c03c <__aeabi_dsub+0x344>)
    bff4:	4285      	cmp	r5, r0
    bff6:	d100      	bne.n	bffa <__aeabi_dsub+0x302>
    bff8:	e085      	b.n	c106 <__aeabi_dsub+0x40e>
    bffa:	001d      	movs	r5, r3
    bffc:	e6bc      	b.n	bd78 <__aeabi_dsub+0x80>
    bffe:	0029      	movs	r1, r5
    c000:	3e1f      	subs	r6, #31
    c002:	40f1      	lsrs	r1, r6
    c004:	2b20      	cmp	r3, #32
    c006:	d100      	bne.n	c00a <__aeabi_dsub+0x312>
    c008:	e07f      	b.n	c10a <__aeabi_dsub+0x412>
    c00a:	2240      	movs	r2, #64	; 0x40
    c00c:	1ad3      	subs	r3, r2, r3
    c00e:	409d      	lsls	r5, r3
    c010:	432f      	orrs	r7, r5
    c012:	1e7d      	subs	r5, r7, #1
    c014:	41af      	sbcs	r7, r5
    c016:	2400      	movs	r4, #0
    c018:	430f      	orrs	r7, r1
    c01a:	2600      	movs	r6, #0
    c01c:	e78e      	b.n	bf3c <__aeabi_dsub+0x244>
    c01e:	002b      	movs	r3, r5
    c020:	000f      	movs	r7, r1
    c022:	3b20      	subs	r3, #32
    c024:	40df      	lsrs	r7, r3
    c026:	2d20      	cmp	r5, #32
    c028:	d071      	beq.n	c10e <__aeabi_dsub+0x416>
    c02a:	2340      	movs	r3, #64	; 0x40
    c02c:	1b5d      	subs	r5, r3, r5
    c02e:	40a9      	lsls	r1, r5
    c030:	430a      	orrs	r2, r1
    c032:	1e51      	subs	r1, r2, #1
    c034:	418a      	sbcs	r2, r1
    c036:	2100      	movs	r1, #0
    c038:	4317      	orrs	r7, r2
    c03a:	e6af      	b.n	bd9c <__aeabi_dsub+0xa4>
    c03c:	000007ff 	.word	0x000007ff
    c040:	ff7fffff 	.word	0xff7fffff
    c044:	800fffff 	.word	0x800fffff
    c048:	2e00      	cmp	r6, #0
    c04a:	d03e      	beq.n	c0ca <__aeabi_dsub+0x3d2>
    c04c:	4eb3      	ldr	r6, [pc, #716]	; (c31c <__aeabi_dsub+0x624>)
    c04e:	45b4      	cmp	ip, r6
    c050:	d045      	beq.n	c0de <__aeabi_dsub+0x3e6>
    c052:	2680      	movs	r6, #128	; 0x80
    c054:	0436      	lsls	r6, r6, #16
    c056:	426d      	negs	r5, r5
    c058:	4334      	orrs	r4, r6
    c05a:	2d38      	cmp	r5, #56	; 0x38
    c05c:	dd00      	ble.n	c060 <__aeabi_dsub+0x368>
    c05e:	e0a8      	b.n	c1b2 <__aeabi_dsub+0x4ba>
    c060:	2d1f      	cmp	r5, #31
    c062:	dd00      	ble.n	c066 <__aeabi_dsub+0x36e>
    c064:	e11f      	b.n	c2a6 <__aeabi_dsub+0x5ae>
    c066:	2620      	movs	r6, #32
    c068:	0027      	movs	r7, r4
    c06a:	4650      	mov	r0, sl
    c06c:	1b76      	subs	r6, r6, r5
    c06e:	40b7      	lsls	r7, r6
    c070:	40e8      	lsrs	r0, r5
    c072:	4307      	orrs	r7, r0
    c074:	4650      	mov	r0, sl
    c076:	40b0      	lsls	r0, r6
    c078:	1e46      	subs	r6, r0, #1
    c07a:	41b0      	sbcs	r0, r6
    c07c:	40ec      	lsrs	r4, r5
    c07e:	4338      	orrs	r0, r7
    c080:	1a17      	subs	r7, r2, r0
    c082:	42ba      	cmp	r2, r7
    c084:	4192      	sbcs	r2, r2
    c086:	1b0c      	subs	r4, r1, r4
    c088:	4252      	negs	r2, r2
    c08a:	1aa4      	subs	r4, r4, r2
    c08c:	4666      	mov	r6, ip
    c08e:	4698      	mov	r8, r3
    c090:	e68b      	b.n	bdaa <__aeabi_dsub+0xb2>
    c092:	4664      	mov	r4, ip
    c094:	4667      	mov	r7, ip
    c096:	432c      	orrs	r4, r5
    c098:	d000      	beq.n	c09c <__aeabi_dsub+0x3a4>
    c09a:	e68b      	b.n	bdb4 <__aeabi_dsub+0xbc>
    c09c:	2500      	movs	r5, #0
    c09e:	2600      	movs	r6, #0
    c0a0:	2700      	movs	r7, #0
    c0a2:	e6ea      	b.n	be7a <__aeabi_dsub+0x182>
    c0a4:	001e      	movs	r6, r3
    c0a6:	e6ad      	b.n	be04 <__aeabi_dsub+0x10c>
    c0a8:	2b1f      	cmp	r3, #31
    c0aa:	dc60      	bgt.n	c16e <__aeabi_dsub+0x476>
    c0ac:	2720      	movs	r7, #32
    c0ae:	1af8      	subs	r0, r7, r3
    c0b0:	000f      	movs	r7, r1
    c0b2:	4684      	mov	ip, r0
    c0b4:	4087      	lsls	r7, r0
    c0b6:	0010      	movs	r0, r2
    c0b8:	40d8      	lsrs	r0, r3
    c0ba:	4307      	orrs	r7, r0
    c0bc:	4660      	mov	r0, ip
    c0be:	4082      	lsls	r2, r0
    c0c0:	1e50      	subs	r0, r2, #1
    c0c2:	4182      	sbcs	r2, r0
    c0c4:	40d9      	lsrs	r1, r3
    c0c6:	4317      	orrs	r7, r2
    c0c8:	e6f5      	b.n	beb6 <__aeabi_dsub+0x1be>
    c0ca:	0026      	movs	r6, r4
    c0cc:	4650      	mov	r0, sl
    c0ce:	4306      	orrs	r6, r0
    c0d0:	d005      	beq.n	c0de <__aeabi_dsub+0x3e6>
    c0d2:	43ed      	mvns	r5, r5
    c0d4:	2d00      	cmp	r5, #0
    c0d6:	d0d3      	beq.n	c080 <__aeabi_dsub+0x388>
    c0d8:	4e90      	ldr	r6, [pc, #576]	; (c31c <__aeabi_dsub+0x624>)
    c0da:	45b4      	cmp	ip, r6
    c0dc:	d1bd      	bne.n	c05a <__aeabi_dsub+0x362>
    c0de:	000c      	movs	r4, r1
    c0e0:	0017      	movs	r7, r2
    c0e2:	4666      	mov	r6, ip
    c0e4:	4698      	mov	r8, r3
    c0e6:	e68d      	b.n	be04 <__aeabi_dsub+0x10c>
    c0e8:	488c      	ldr	r0, [pc, #560]	; (c31c <__aeabi_dsub+0x624>)
    c0ea:	4283      	cmp	r3, r0
    c0ec:	d00b      	beq.n	c106 <__aeabi_dsub+0x40e>
    c0ee:	4663      	mov	r3, ip
    c0f0:	e6d9      	b.n	bea6 <__aeabi_dsub+0x1ae>
    c0f2:	2d00      	cmp	r5, #0
    c0f4:	d000      	beq.n	c0f8 <__aeabi_dsub+0x400>
    c0f6:	e096      	b.n	c226 <__aeabi_dsub+0x52e>
    c0f8:	0008      	movs	r0, r1
    c0fa:	4310      	orrs	r0, r2
    c0fc:	d100      	bne.n	c100 <__aeabi_dsub+0x408>
    c0fe:	e0e2      	b.n	c2c6 <__aeabi_dsub+0x5ce>
    c100:	000c      	movs	r4, r1
    c102:	0017      	movs	r7, r2
    c104:	4698      	mov	r8, r3
    c106:	4e85      	ldr	r6, [pc, #532]	; (c31c <__aeabi_dsub+0x624>)
    c108:	e67c      	b.n	be04 <__aeabi_dsub+0x10c>
    c10a:	2500      	movs	r5, #0
    c10c:	e780      	b.n	c010 <__aeabi_dsub+0x318>
    c10e:	2100      	movs	r1, #0
    c110:	e78e      	b.n	c030 <__aeabi_dsub+0x338>
    c112:	0023      	movs	r3, r4
    c114:	4650      	mov	r0, sl
    c116:	4303      	orrs	r3, r0
    c118:	2e00      	cmp	r6, #0
    c11a:	d000      	beq.n	c11e <__aeabi_dsub+0x426>
    c11c:	e0a8      	b.n	c270 <__aeabi_dsub+0x578>
    c11e:	2b00      	cmp	r3, #0
    c120:	d100      	bne.n	c124 <__aeabi_dsub+0x42c>
    c122:	e0de      	b.n	c2e2 <__aeabi_dsub+0x5ea>
    c124:	000b      	movs	r3, r1
    c126:	4313      	orrs	r3, r2
    c128:	d100      	bne.n	c12c <__aeabi_dsub+0x434>
    c12a:	e66b      	b.n	be04 <__aeabi_dsub+0x10c>
    c12c:	4452      	add	r2, sl
    c12e:	4552      	cmp	r2, sl
    c130:	4180      	sbcs	r0, r0
    c132:	1864      	adds	r4, r4, r1
    c134:	4240      	negs	r0, r0
    c136:	1824      	adds	r4, r4, r0
    c138:	0017      	movs	r7, r2
    c13a:	0223      	lsls	r3, r4, #8
    c13c:	d400      	bmi.n	c140 <__aeabi_dsub+0x448>
    c13e:	e6fd      	b.n	bf3c <__aeabi_dsub+0x244>
    c140:	4b77      	ldr	r3, [pc, #476]	; (c320 <__aeabi_dsub+0x628>)
    c142:	4666      	mov	r6, ip
    c144:	401c      	ands	r4, r3
    c146:	e65d      	b.n	be04 <__aeabi_dsub+0x10c>
    c148:	0025      	movs	r5, r4
    c14a:	4650      	mov	r0, sl
    c14c:	4305      	orrs	r5, r0
    c14e:	2e00      	cmp	r6, #0
    c150:	d1cf      	bne.n	c0f2 <__aeabi_dsub+0x3fa>
    c152:	2d00      	cmp	r5, #0
    c154:	d14f      	bne.n	c1f6 <__aeabi_dsub+0x4fe>
    c156:	000c      	movs	r4, r1
    c158:	4314      	orrs	r4, r2
    c15a:	d100      	bne.n	c15e <__aeabi_dsub+0x466>
    c15c:	e0a0      	b.n	c2a0 <__aeabi_dsub+0x5a8>
    c15e:	000c      	movs	r4, r1
    c160:	0017      	movs	r7, r2
    c162:	4698      	mov	r8, r3
    c164:	e64e      	b.n	be04 <__aeabi_dsub+0x10c>
    c166:	4666      	mov	r6, ip
    c168:	2400      	movs	r4, #0
    c16a:	2700      	movs	r7, #0
    c16c:	e685      	b.n	be7a <__aeabi_dsub+0x182>
    c16e:	001f      	movs	r7, r3
    c170:	0008      	movs	r0, r1
    c172:	3f20      	subs	r7, #32
    c174:	40f8      	lsrs	r0, r7
    c176:	0007      	movs	r7, r0
    c178:	2b20      	cmp	r3, #32
    c17a:	d100      	bne.n	c17e <__aeabi_dsub+0x486>
    c17c:	e08e      	b.n	c29c <__aeabi_dsub+0x5a4>
    c17e:	2040      	movs	r0, #64	; 0x40
    c180:	1ac3      	subs	r3, r0, r3
    c182:	4099      	lsls	r1, r3
    c184:	430a      	orrs	r2, r1
    c186:	1e51      	subs	r1, r2, #1
    c188:	418a      	sbcs	r2, r1
    c18a:	2100      	movs	r1, #0
    c18c:	4317      	orrs	r7, r2
    c18e:	e692      	b.n	beb6 <__aeabi_dsub+0x1be>
    c190:	2e00      	cmp	r6, #0
    c192:	d114      	bne.n	c1be <__aeabi_dsub+0x4c6>
    c194:	0026      	movs	r6, r4
    c196:	4650      	mov	r0, sl
    c198:	4306      	orrs	r6, r0
    c19a:	d062      	beq.n	c262 <__aeabi_dsub+0x56a>
    c19c:	43db      	mvns	r3, r3
    c19e:	2b00      	cmp	r3, #0
    c1a0:	d15c      	bne.n	c25c <__aeabi_dsub+0x564>
    c1a2:	1887      	adds	r7, r0, r2
    c1a4:	4297      	cmp	r7, r2
    c1a6:	4192      	sbcs	r2, r2
    c1a8:	1864      	adds	r4, r4, r1
    c1aa:	4252      	negs	r2, r2
    c1ac:	18a4      	adds	r4, r4, r2
    c1ae:	4666      	mov	r6, ip
    c1b0:	e687      	b.n	bec2 <__aeabi_dsub+0x1ca>
    c1b2:	4650      	mov	r0, sl
    c1b4:	4320      	orrs	r0, r4
    c1b6:	1e44      	subs	r4, r0, #1
    c1b8:	41a0      	sbcs	r0, r4
    c1ba:	2400      	movs	r4, #0
    c1bc:	e760      	b.n	c080 <__aeabi_dsub+0x388>
    c1be:	4e57      	ldr	r6, [pc, #348]	; (c31c <__aeabi_dsub+0x624>)
    c1c0:	45b4      	cmp	ip, r6
    c1c2:	d04e      	beq.n	c262 <__aeabi_dsub+0x56a>
    c1c4:	2680      	movs	r6, #128	; 0x80
    c1c6:	0436      	lsls	r6, r6, #16
    c1c8:	425b      	negs	r3, r3
    c1ca:	4334      	orrs	r4, r6
    c1cc:	2b38      	cmp	r3, #56	; 0x38
    c1ce:	dd00      	ble.n	c1d2 <__aeabi_dsub+0x4da>
    c1d0:	e07f      	b.n	c2d2 <__aeabi_dsub+0x5da>
    c1d2:	2b1f      	cmp	r3, #31
    c1d4:	dd00      	ble.n	c1d8 <__aeabi_dsub+0x4e0>
    c1d6:	e08b      	b.n	c2f0 <__aeabi_dsub+0x5f8>
    c1d8:	2620      	movs	r6, #32
    c1da:	0027      	movs	r7, r4
    c1dc:	4650      	mov	r0, sl
    c1de:	1af6      	subs	r6, r6, r3
    c1e0:	40b7      	lsls	r7, r6
    c1e2:	40d8      	lsrs	r0, r3
    c1e4:	4307      	orrs	r7, r0
    c1e6:	4650      	mov	r0, sl
    c1e8:	40b0      	lsls	r0, r6
    c1ea:	1e46      	subs	r6, r0, #1
    c1ec:	41b0      	sbcs	r0, r6
    c1ee:	4307      	orrs	r7, r0
    c1f0:	40dc      	lsrs	r4, r3
    c1f2:	18bf      	adds	r7, r7, r2
    c1f4:	e7d6      	b.n	c1a4 <__aeabi_dsub+0x4ac>
    c1f6:	000d      	movs	r5, r1
    c1f8:	4315      	orrs	r5, r2
    c1fa:	d100      	bne.n	c1fe <__aeabi_dsub+0x506>
    c1fc:	e602      	b.n	be04 <__aeabi_dsub+0x10c>
    c1fe:	4650      	mov	r0, sl
    c200:	1a80      	subs	r0, r0, r2
    c202:	4582      	cmp	sl, r0
    c204:	41bf      	sbcs	r7, r7
    c206:	1a65      	subs	r5, r4, r1
    c208:	427f      	negs	r7, r7
    c20a:	1bed      	subs	r5, r5, r7
    c20c:	4684      	mov	ip, r0
    c20e:	0228      	lsls	r0, r5, #8
    c210:	d400      	bmi.n	c214 <__aeabi_dsub+0x51c>
    c212:	e68d      	b.n	bf30 <__aeabi_dsub+0x238>
    c214:	4650      	mov	r0, sl
    c216:	1a17      	subs	r7, r2, r0
    c218:	42ba      	cmp	r2, r7
    c21a:	4192      	sbcs	r2, r2
    c21c:	1b0c      	subs	r4, r1, r4
    c21e:	4252      	negs	r2, r2
    c220:	1aa4      	subs	r4, r4, r2
    c222:	4698      	mov	r8, r3
    c224:	e5ee      	b.n	be04 <__aeabi_dsub+0x10c>
    c226:	000d      	movs	r5, r1
    c228:	4315      	orrs	r5, r2
    c22a:	d100      	bne.n	c22e <__aeabi_dsub+0x536>
    c22c:	e76b      	b.n	c106 <__aeabi_dsub+0x40e>
    c22e:	4650      	mov	r0, sl
    c230:	0767      	lsls	r7, r4, #29
    c232:	08c0      	lsrs	r0, r0, #3
    c234:	4307      	orrs	r7, r0
    c236:	2080      	movs	r0, #128	; 0x80
    c238:	08e4      	lsrs	r4, r4, #3
    c23a:	0300      	lsls	r0, r0, #12
    c23c:	4204      	tst	r4, r0
    c23e:	d007      	beq.n	c250 <__aeabi_dsub+0x558>
    c240:	08cd      	lsrs	r5, r1, #3
    c242:	4205      	tst	r5, r0
    c244:	d104      	bne.n	c250 <__aeabi_dsub+0x558>
    c246:	002c      	movs	r4, r5
    c248:	4698      	mov	r8, r3
    c24a:	08d7      	lsrs	r7, r2, #3
    c24c:	0749      	lsls	r1, r1, #29
    c24e:	430f      	orrs	r7, r1
    c250:	0f7b      	lsrs	r3, r7, #29
    c252:	00e4      	lsls	r4, r4, #3
    c254:	431c      	orrs	r4, r3
    c256:	00ff      	lsls	r7, r7, #3
    c258:	4e30      	ldr	r6, [pc, #192]	; (c31c <__aeabi_dsub+0x624>)
    c25a:	e5d3      	b.n	be04 <__aeabi_dsub+0x10c>
    c25c:	4e2f      	ldr	r6, [pc, #188]	; (c31c <__aeabi_dsub+0x624>)
    c25e:	45b4      	cmp	ip, r6
    c260:	d1b4      	bne.n	c1cc <__aeabi_dsub+0x4d4>
    c262:	000c      	movs	r4, r1
    c264:	0017      	movs	r7, r2
    c266:	4666      	mov	r6, ip
    c268:	e5cc      	b.n	be04 <__aeabi_dsub+0x10c>
    c26a:	2700      	movs	r7, #0
    c26c:	2400      	movs	r4, #0
    c26e:	e5e8      	b.n	be42 <__aeabi_dsub+0x14a>
    c270:	2b00      	cmp	r3, #0
    c272:	d039      	beq.n	c2e8 <__aeabi_dsub+0x5f0>
    c274:	000b      	movs	r3, r1
    c276:	4313      	orrs	r3, r2
    c278:	d100      	bne.n	c27c <__aeabi_dsub+0x584>
    c27a:	e744      	b.n	c106 <__aeabi_dsub+0x40e>
    c27c:	08c0      	lsrs	r0, r0, #3
    c27e:	0767      	lsls	r7, r4, #29
    c280:	4307      	orrs	r7, r0
    c282:	2080      	movs	r0, #128	; 0x80
    c284:	08e4      	lsrs	r4, r4, #3
    c286:	0300      	lsls	r0, r0, #12
    c288:	4204      	tst	r4, r0
    c28a:	d0e1      	beq.n	c250 <__aeabi_dsub+0x558>
    c28c:	08cb      	lsrs	r3, r1, #3
    c28e:	4203      	tst	r3, r0
    c290:	d1de      	bne.n	c250 <__aeabi_dsub+0x558>
    c292:	08d7      	lsrs	r7, r2, #3
    c294:	0749      	lsls	r1, r1, #29
    c296:	430f      	orrs	r7, r1
    c298:	001c      	movs	r4, r3
    c29a:	e7d9      	b.n	c250 <__aeabi_dsub+0x558>
    c29c:	2100      	movs	r1, #0
    c29e:	e771      	b.n	c184 <__aeabi_dsub+0x48c>
    c2a0:	2500      	movs	r5, #0
    c2a2:	2700      	movs	r7, #0
    c2a4:	e5e9      	b.n	be7a <__aeabi_dsub+0x182>
    c2a6:	002e      	movs	r6, r5
    c2a8:	0027      	movs	r7, r4
    c2aa:	3e20      	subs	r6, #32
    c2ac:	40f7      	lsrs	r7, r6
    c2ae:	2d20      	cmp	r5, #32
    c2b0:	d02f      	beq.n	c312 <__aeabi_dsub+0x61a>
    c2b2:	2640      	movs	r6, #64	; 0x40
    c2b4:	1b75      	subs	r5, r6, r5
    c2b6:	40ac      	lsls	r4, r5
    c2b8:	4650      	mov	r0, sl
    c2ba:	4320      	orrs	r0, r4
    c2bc:	1e44      	subs	r4, r0, #1
    c2be:	41a0      	sbcs	r0, r4
    c2c0:	2400      	movs	r4, #0
    c2c2:	4338      	orrs	r0, r7
    c2c4:	e6dc      	b.n	c080 <__aeabi_dsub+0x388>
    c2c6:	2480      	movs	r4, #128	; 0x80
    c2c8:	2500      	movs	r5, #0
    c2ca:	0324      	lsls	r4, r4, #12
    c2cc:	4e13      	ldr	r6, [pc, #76]	; (c31c <__aeabi_dsub+0x624>)
    c2ce:	2700      	movs	r7, #0
    c2d0:	e5d3      	b.n	be7a <__aeabi_dsub+0x182>
    c2d2:	4650      	mov	r0, sl
    c2d4:	4320      	orrs	r0, r4
    c2d6:	0007      	movs	r7, r0
    c2d8:	1e78      	subs	r0, r7, #1
    c2da:	4187      	sbcs	r7, r0
    c2dc:	2400      	movs	r4, #0
    c2de:	18bf      	adds	r7, r7, r2
    c2e0:	e760      	b.n	c1a4 <__aeabi_dsub+0x4ac>
    c2e2:	000c      	movs	r4, r1
    c2e4:	0017      	movs	r7, r2
    c2e6:	e58d      	b.n	be04 <__aeabi_dsub+0x10c>
    c2e8:	000c      	movs	r4, r1
    c2ea:	0017      	movs	r7, r2
    c2ec:	4e0b      	ldr	r6, [pc, #44]	; (c31c <__aeabi_dsub+0x624>)
    c2ee:	e589      	b.n	be04 <__aeabi_dsub+0x10c>
    c2f0:	001e      	movs	r6, r3
    c2f2:	0027      	movs	r7, r4
    c2f4:	3e20      	subs	r6, #32
    c2f6:	40f7      	lsrs	r7, r6
    c2f8:	2b20      	cmp	r3, #32
    c2fa:	d00c      	beq.n	c316 <__aeabi_dsub+0x61e>
    c2fc:	2640      	movs	r6, #64	; 0x40
    c2fe:	1af3      	subs	r3, r6, r3
    c300:	409c      	lsls	r4, r3
    c302:	4650      	mov	r0, sl
    c304:	4320      	orrs	r0, r4
    c306:	1e44      	subs	r4, r0, #1
    c308:	41a0      	sbcs	r0, r4
    c30a:	4307      	orrs	r7, r0
    c30c:	2400      	movs	r4, #0
    c30e:	18bf      	adds	r7, r7, r2
    c310:	e748      	b.n	c1a4 <__aeabi_dsub+0x4ac>
    c312:	2400      	movs	r4, #0
    c314:	e7d0      	b.n	c2b8 <__aeabi_dsub+0x5c0>
    c316:	2400      	movs	r4, #0
    c318:	e7f3      	b.n	c302 <__aeabi_dsub+0x60a>
    c31a:	46c0      	nop			; (mov r8, r8)
    c31c:	000007ff 	.word	0x000007ff
    c320:	ff7fffff 	.word	0xff7fffff

0000c324 <__aeabi_d2iz>:
    c324:	b530      	push	{r4, r5, lr}
    c326:	4d13      	ldr	r5, [pc, #76]	; (c374 <__aeabi_d2iz+0x50>)
    c328:	030a      	lsls	r2, r1, #12
    c32a:	004b      	lsls	r3, r1, #1
    c32c:	0b12      	lsrs	r2, r2, #12
    c32e:	0d5b      	lsrs	r3, r3, #21
    c330:	0fc9      	lsrs	r1, r1, #31
    c332:	2400      	movs	r4, #0
    c334:	42ab      	cmp	r3, r5
    c336:	dd10      	ble.n	c35a <__aeabi_d2iz+0x36>
    c338:	4c0f      	ldr	r4, [pc, #60]	; (c378 <__aeabi_d2iz+0x54>)
    c33a:	42a3      	cmp	r3, r4
    c33c:	dc0f      	bgt.n	c35e <__aeabi_d2iz+0x3a>
    c33e:	2480      	movs	r4, #128	; 0x80
    c340:	4d0e      	ldr	r5, [pc, #56]	; (c37c <__aeabi_d2iz+0x58>)
    c342:	0364      	lsls	r4, r4, #13
    c344:	4322      	orrs	r2, r4
    c346:	1aed      	subs	r5, r5, r3
    c348:	2d1f      	cmp	r5, #31
    c34a:	dd0b      	ble.n	c364 <__aeabi_d2iz+0x40>
    c34c:	480c      	ldr	r0, [pc, #48]	; (c380 <__aeabi_d2iz+0x5c>)
    c34e:	1ac3      	subs	r3, r0, r3
    c350:	40da      	lsrs	r2, r3
    c352:	4254      	negs	r4, r2
    c354:	2900      	cmp	r1, #0
    c356:	d100      	bne.n	c35a <__aeabi_d2iz+0x36>
    c358:	0014      	movs	r4, r2
    c35a:	0020      	movs	r0, r4
    c35c:	bd30      	pop	{r4, r5, pc}
    c35e:	4b09      	ldr	r3, [pc, #36]	; (c384 <__aeabi_d2iz+0x60>)
    c360:	18cc      	adds	r4, r1, r3
    c362:	e7fa      	b.n	c35a <__aeabi_d2iz+0x36>
    c364:	4c08      	ldr	r4, [pc, #32]	; (c388 <__aeabi_d2iz+0x64>)
    c366:	40e8      	lsrs	r0, r5
    c368:	46a4      	mov	ip, r4
    c36a:	4463      	add	r3, ip
    c36c:	409a      	lsls	r2, r3
    c36e:	4302      	orrs	r2, r0
    c370:	e7ef      	b.n	c352 <__aeabi_d2iz+0x2e>
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	000003fe 	.word	0x000003fe
    c378:	0000041d 	.word	0x0000041d
    c37c:	00000433 	.word	0x00000433
    c380:	00000413 	.word	0x00000413
    c384:	7fffffff 	.word	0x7fffffff
    c388:	fffffbed 	.word	0xfffffbed

0000c38c <__aeabi_ui2d>:
    c38c:	b510      	push	{r4, lr}
    c38e:	1e04      	subs	r4, r0, #0
    c390:	d028      	beq.n	c3e4 <__aeabi_ui2d+0x58>
    c392:	f000 f94f 	bl	c634 <__clzsi2>
    c396:	4b15      	ldr	r3, [pc, #84]	; (c3ec <__aeabi_ui2d+0x60>)
    c398:	4a15      	ldr	r2, [pc, #84]	; (c3f0 <__aeabi_ui2d+0x64>)
    c39a:	1a1b      	subs	r3, r3, r0
    c39c:	1ad2      	subs	r2, r2, r3
    c39e:	2a1f      	cmp	r2, #31
    c3a0:	dd15      	ble.n	c3ce <__aeabi_ui2d+0x42>
    c3a2:	4a14      	ldr	r2, [pc, #80]	; (c3f4 <__aeabi_ui2d+0x68>)
    c3a4:	1ad2      	subs	r2, r2, r3
    c3a6:	4094      	lsls	r4, r2
    c3a8:	2200      	movs	r2, #0
    c3aa:	0324      	lsls	r4, r4, #12
    c3ac:	055b      	lsls	r3, r3, #21
    c3ae:	0b24      	lsrs	r4, r4, #12
    c3b0:	0d5b      	lsrs	r3, r3, #21
    c3b2:	2100      	movs	r1, #0
    c3b4:	0010      	movs	r0, r2
    c3b6:	0324      	lsls	r4, r4, #12
    c3b8:	0d0a      	lsrs	r2, r1, #20
    c3ba:	0b24      	lsrs	r4, r4, #12
    c3bc:	0512      	lsls	r2, r2, #20
    c3be:	4322      	orrs	r2, r4
    c3c0:	4c0d      	ldr	r4, [pc, #52]	; (c3f8 <__aeabi_ui2d+0x6c>)
    c3c2:	051b      	lsls	r3, r3, #20
    c3c4:	4022      	ands	r2, r4
    c3c6:	4313      	orrs	r3, r2
    c3c8:	005b      	lsls	r3, r3, #1
    c3ca:	0859      	lsrs	r1, r3, #1
    c3cc:	bd10      	pop	{r4, pc}
    c3ce:	0021      	movs	r1, r4
    c3d0:	4091      	lsls	r1, r2
    c3d2:	000a      	movs	r2, r1
    c3d4:	210b      	movs	r1, #11
    c3d6:	1a08      	subs	r0, r1, r0
    c3d8:	40c4      	lsrs	r4, r0
    c3da:	055b      	lsls	r3, r3, #21
    c3dc:	0324      	lsls	r4, r4, #12
    c3de:	0b24      	lsrs	r4, r4, #12
    c3e0:	0d5b      	lsrs	r3, r3, #21
    c3e2:	e7e6      	b.n	c3b2 <__aeabi_ui2d+0x26>
    c3e4:	2300      	movs	r3, #0
    c3e6:	2400      	movs	r4, #0
    c3e8:	2200      	movs	r2, #0
    c3ea:	e7e2      	b.n	c3b2 <__aeabi_ui2d+0x26>
    c3ec:	0000041e 	.word	0x0000041e
    c3f0:	00000433 	.word	0x00000433
    c3f4:	00000413 	.word	0x00000413
    c3f8:	800fffff 	.word	0x800fffff

0000c3fc <__aeabi_f2d>:
    c3fc:	0041      	lsls	r1, r0, #1
    c3fe:	0e09      	lsrs	r1, r1, #24
    c400:	1c4b      	adds	r3, r1, #1
    c402:	b570      	push	{r4, r5, r6, lr}
    c404:	b2db      	uxtb	r3, r3
    c406:	0246      	lsls	r6, r0, #9
    c408:	0a75      	lsrs	r5, r6, #9
    c40a:	0fc4      	lsrs	r4, r0, #31
    c40c:	2b01      	cmp	r3, #1
    c40e:	dd14      	ble.n	c43a <__aeabi_f2d+0x3e>
    c410:	23e0      	movs	r3, #224	; 0xe0
    c412:	009b      	lsls	r3, r3, #2
    c414:	076d      	lsls	r5, r5, #29
    c416:	0b36      	lsrs	r6, r6, #12
    c418:	18cb      	adds	r3, r1, r3
    c41a:	2100      	movs	r1, #0
    c41c:	0d0a      	lsrs	r2, r1, #20
    c41e:	0028      	movs	r0, r5
    c420:	0512      	lsls	r2, r2, #20
    c422:	4d1c      	ldr	r5, [pc, #112]	; (c494 <__aeabi_f2d+0x98>)
    c424:	4332      	orrs	r2, r6
    c426:	055b      	lsls	r3, r3, #21
    c428:	402a      	ands	r2, r5
    c42a:	085b      	lsrs	r3, r3, #1
    c42c:	4313      	orrs	r3, r2
    c42e:	005b      	lsls	r3, r3, #1
    c430:	07e4      	lsls	r4, r4, #31
    c432:	085b      	lsrs	r3, r3, #1
    c434:	4323      	orrs	r3, r4
    c436:	0019      	movs	r1, r3
    c438:	bd70      	pop	{r4, r5, r6, pc}
    c43a:	2900      	cmp	r1, #0
    c43c:	d114      	bne.n	c468 <__aeabi_f2d+0x6c>
    c43e:	2d00      	cmp	r5, #0
    c440:	d01e      	beq.n	c480 <__aeabi_f2d+0x84>
    c442:	0028      	movs	r0, r5
    c444:	f000 f8f6 	bl	c634 <__clzsi2>
    c448:	280a      	cmp	r0, #10
    c44a:	dc1c      	bgt.n	c486 <__aeabi_f2d+0x8a>
    c44c:	230b      	movs	r3, #11
    c44e:	002a      	movs	r2, r5
    c450:	1a1b      	subs	r3, r3, r0
    c452:	40da      	lsrs	r2, r3
    c454:	0003      	movs	r3, r0
    c456:	3315      	adds	r3, #21
    c458:	409d      	lsls	r5, r3
    c45a:	4b0f      	ldr	r3, [pc, #60]	; (c498 <__aeabi_f2d+0x9c>)
    c45c:	0312      	lsls	r2, r2, #12
    c45e:	1a1b      	subs	r3, r3, r0
    c460:	055b      	lsls	r3, r3, #21
    c462:	0b16      	lsrs	r6, r2, #12
    c464:	0d5b      	lsrs	r3, r3, #21
    c466:	e7d8      	b.n	c41a <__aeabi_f2d+0x1e>
    c468:	2d00      	cmp	r5, #0
    c46a:	d006      	beq.n	c47a <__aeabi_f2d+0x7e>
    c46c:	0b32      	lsrs	r2, r6, #12
    c46e:	2680      	movs	r6, #128	; 0x80
    c470:	0336      	lsls	r6, r6, #12
    c472:	076d      	lsls	r5, r5, #29
    c474:	4316      	orrs	r6, r2
    c476:	4b09      	ldr	r3, [pc, #36]	; (c49c <__aeabi_f2d+0xa0>)
    c478:	e7cf      	b.n	c41a <__aeabi_f2d+0x1e>
    c47a:	4b08      	ldr	r3, [pc, #32]	; (c49c <__aeabi_f2d+0xa0>)
    c47c:	2600      	movs	r6, #0
    c47e:	e7cc      	b.n	c41a <__aeabi_f2d+0x1e>
    c480:	2300      	movs	r3, #0
    c482:	2600      	movs	r6, #0
    c484:	e7c9      	b.n	c41a <__aeabi_f2d+0x1e>
    c486:	0003      	movs	r3, r0
    c488:	002a      	movs	r2, r5
    c48a:	3b0b      	subs	r3, #11
    c48c:	409a      	lsls	r2, r3
    c48e:	2500      	movs	r5, #0
    c490:	e7e3      	b.n	c45a <__aeabi_f2d+0x5e>
    c492:	46c0      	nop			; (mov r8, r8)
    c494:	800fffff 	.word	0x800fffff
    c498:	00000389 	.word	0x00000389
    c49c:	000007ff 	.word	0x000007ff

0000c4a0 <__udivsi3>:
    c4a0:	2200      	movs	r2, #0
    c4a2:	0843      	lsrs	r3, r0, #1
    c4a4:	428b      	cmp	r3, r1
    c4a6:	d374      	bcc.n	c592 <__udivsi3+0xf2>
    c4a8:	0903      	lsrs	r3, r0, #4
    c4aa:	428b      	cmp	r3, r1
    c4ac:	d35f      	bcc.n	c56e <__udivsi3+0xce>
    c4ae:	0a03      	lsrs	r3, r0, #8
    c4b0:	428b      	cmp	r3, r1
    c4b2:	d344      	bcc.n	c53e <__udivsi3+0x9e>
    c4b4:	0b03      	lsrs	r3, r0, #12
    c4b6:	428b      	cmp	r3, r1
    c4b8:	d328      	bcc.n	c50c <__udivsi3+0x6c>
    c4ba:	0c03      	lsrs	r3, r0, #16
    c4bc:	428b      	cmp	r3, r1
    c4be:	d30d      	bcc.n	c4dc <__udivsi3+0x3c>
    c4c0:	22ff      	movs	r2, #255	; 0xff
    c4c2:	0209      	lsls	r1, r1, #8
    c4c4:	ba12      	rev	r2, r2
    c4c6:	0c03      	lsrs	r3, r0, #16
    c4c8:	428b      	cmp	r3, r1
    c4ca:	d302      	bcc.n	c4d2 <__udivsi3+0x32>
    c4cc:	1212      	asrs	r2, r2, #8
    c4ce:	0209      	lsls	r1, r1, #8
    c4d0:	d065      	beq.n	c59e <__udivsi3+0xfe>
    c4d2:	0b03      	lsrs	r3, r0, #12
    c4d4:	428b      	cmp	r3, r1
    c4d6:	d319      	bcc.n	c50c <__udivsi3+0x6c>
    c4d8:	e000      	b.n	c4dc <__udivsi3+0x3c>
    c4da:	0a09      	lsrs	r1, r1, #8
    c4dc:	0bc3      	lsrs	r3, r0, #15
    c4de:	428b      	cmp	r3, r1
    c4e0:	d301      	bcc.n	c4e6 <__udivsi3+0x46>
    c4e2:	03cb      	lsls	r3, r1, #15
    c4e4:	1ac0      	subs	r0, r0, r3
    c4e6:	4152      	adcs	r2, r2
    c4e8:	0b83      	lsrs	r3, r0, #14
    c4ea:	428b      	cmp	r3, r1
    c4ec:	d301      	bcc.n	c4f2 <__udivsi3+0x52>
    c4ee:	038b      	lsls	r3, r1, #14
    c4f0:	1ac0      	subs	r0, r0, r3
    c4f2:	4152      	adcs	r2, r2
    c4f4:	0b43      	lsrs	r3, r0, #13
    c4f6:	428b      	cmp	r3, r1
    c4f8:	d301      	bcc.n	c4fe <__udivsi3+0x5e>
    c4fa:	034b      	lsls	r3, r1, #13
    c4fc:	1ac0      	subs	r0, r0, r3
    c4fe:	4152      	adcs	r2, r2
    c500:	0b03      	lsrs	r3, r0, #12
    c502:	428b      	cmp	r3, r1
    c504:	d301      	bcc.n	c50a <__udivsi3+0x6a>
    c506:	030b      	lsls	r3, r1, #12
    c508:	1ac0      	subs	r0, r0, r3
    c50a:	4152      	adcs	r2, r2
    c50c:	0ac3      	lsrs	r3, r0, #11
    c50e:	428b      	cmp	r3, r1
    c510:	d301      	bcc.n	c516 <__udivsi3+0x76>
    c512:	02cb      	lsls	r3, r1, #11
    c514:	1ac0      	subs	r0, r0, r3
    c516:	4152      	adcs	r2, r2
    c518:	0a83      	lsrs	r3, r0, #10
    c51a:	428b      	cmp	r3, r1
    c51c:	d301      	bcc.n	c522 <__udivsi3+0x82>
    c51e:	028b      	lsls	r3, r1, #10
    c520:	1ac0      	subs	r0, r0, r3
    c522:	4152      	adcs	r2, r2
    c524:	0a43      	lsrs	r3, r0, #9
    c526:	428b      	cmp	r3, r1
    c528:	d301      	bcc.n	c52e <__udivsi3+0x8e>
    c52a:	024b      	lsls	r3, r1, #9
    c52c:	1ac0      	subs	r0, r0, r3
    c52e:	4152      	adcs	r2, r2
    c530:	0a03      	lsrs	r3, r0, #8
    c532:	428b      	cmp	r3, r1
    c534:	d301      	bcc.n	c53a <__udivsi3+0x9a>
    c536:	020b      	lsls	r3, r1, #8
    c538:	1ac0      	subs	r0, r0, r3
    c53a:	4152      	adcs	r2, r2
    c53c:	d2cd      	bcs.n	c4da <__udivsi3+0x3a>
    c53e:	09c3      	lsrs	r3, r0, #7
    c540:	428b      	cmp	r3, r1
    c542:	d301      	bcc.n	c548 <__udivsi3+0xa8>
    c544:	01cb      	lsls	r3, r1, #7
    c546:	1ac0      	subs	r0, r0, r3
    c548:	4152      	adcs	r2, r2
    c54a:	0983      	lsrs	r3, r0, #6
    c54c:	428b      	cmp	r3, r1
    c54e:	d301      	bcc.n	c554 <__udivsi3+0xb4>
    c550:	018b      	lsls	r3, r1, #6
    c552:	1ac0      	subs	r0, r0, r3
    c554:	4152      	adcs	r2, r2
    c556:	0943      	lsrs	r3, r0, #5
    c558:	428b      	cmp	r3, r1
    c55a:	d301      	bcc.n	c560 <__udivsi3+0xc0>
    c55c:	014b      	lsls	r3, r1, #5
    c55e:	1ac0      	subs	r0, r0, r3
    c560:	4152      	adcs	r2, r2
    c562:	0903      	lsrs	r3, r0, #4
    c564:	428b      	cmp	r3, r1
    c566:	d301      	bcc.n	c56c <__udivsi3+0xcc>
    c568:	010b      	lsls	r3, r1, #4
    c56a:	1ac0      	subs	r0, r0, r3
    c56c:	4152      	adcs	r2, r2
    c56e:	08c3      	lsrs	r3, r0, #3
    c570:	428b      	cmp	r3, r1
    c572:	d301      	bcc.n	c578 <__udivsi3+0xd8>
    c574:	00cb      	lsls	r3, r1, #3
    c576:	1ac0      	subs	r0, r0, r3
    c578:	4152      	adcs	r2, r2
    c57a:	0883      	lsrs	r3, r0, #2
    c57c:	428b      	cmp	r3, r1
    c57e:	d301      	bcc.n	c584 <__udivsi3+0xe4>
    c580:	008b      	lsls	r3, r1, #2
    c582:	1ac0      	subs	r0, r0, r3
    c584:	4152      	adcs	r2, r2
    c586:	0843      	lsrs	r3, r0, #1
    c588:	428b      	cmp	r3, r1
    c58a:	d301      	bcc.n	c590 <__udivsi3+0xf0>
    c58c:	004b      	lsls	r3, r1, #1
    c58e:	1ac0      	subs	r0, r0, r3
    c590:	4152      	adcs	r2, r2
    c592:	1a41      	subs	r1, r0, r1
    c594:	d200      	bcs.n	c598 <__udivsi3+0xf8>
    c596:	4601      	mov	r1, r0
    c598:	4152      	adcs	r2, r2
    c59a:	4610      	mov	r0, r2
    c59c:	4770      	bx	lr
    c59e:	e7ff      	b.n	c5a0 <__udivsi3+0x100>
    c5a0:	b501      	push	{r0, lr}
    c5a2:	2000      	movs	r0, #0
    c5a4:	f000 f806 	bl	c5b4 <__aeabi_idiv0>
    c5a8:	bd02      	pop	{r1, pc}
    c5aa:	46c0      	nop			; (mov r8, r8)

0000c5ac <__aeabi_uidivmod>:
    c5ac:	2900      	cmp	r1, #0
    c5ae:	d0f7      	beq.n	c5a0 <__udivsi3+0x100>
    c5b0:	e776      	b.n	c4a0 <__udivsi3>
    c5b2:	4770      	bx	lr

0000c5b4 <__aeabi_idiv0>:
    c5b4:	4770      	bx	lr
    c5b6:	46c0      	nop			; (mov r8, r8)

0000c5b8 <__aeabi_cdrcmple>:
    c5b8:	4684      	mov	ip, r0
    c5ba:	1c10      	adds	r0, r2, #0
    c5bc:	4662      	mov	r2, ip
    c5be:	468c      	mov	ip, r1
    c5c0:	1c19      	adds	r1, r3, #0
    c5c2:	4663      	mov	r3, ip
    c5c4:	e000      	b.n	c5c8 <__aeabi_cdcmpeq>
    c5c6:	46c0      	nop			; (mov r8, r8)

0000c5c8 <__aeabi_cdcmpeq>:
    c5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c5ca:	f000 f8ef 	bl	c7ac <__ledf2>
    c5ce:	2800      	cmp	r0, #0
    c5d0:	d401      	bmi.n	c5d6 <__aeabi_cdcmpeq+0xe>
    c5d2:	2100      	movs	r1, #0
    c5d4:	42c8      	cmn	r0, r1
    c5d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c5d8 <__aeabi_dcmpeq>:
    c5d8:	b510      	push	{r4, lr}
    c5da:	f000 f849 	bl	c670 <__eqdf2>
    c5de:	4240      	negs	r0, r0
    c5e0:	3001      	adds	r0, #1
    c5e2:	bd10      	pop	{r4, pc}

0000c5e4 <__aeabi_dcmplt>:
    c5e4:	b510      	push	{r4, lr}
    c5e6:	f000 f8e1 	bl	c7ac <__ledf2>
    c5ea:	2800      	cmp	r0, #0
    c5ec:	db01      	blt.n	c5f2 <__aeabi_dcmplt+0xe>
    c5ee:	2000      	movs	r0, #0
    c5f0:	bd10      	pop	{r4, pc}
    c5f2:	2001      	movs	r0, #1
    c5f4:	bd10      	pop	{r4, pc}
    c5f6:	46c0      	nop			; (mov r8, r8)

0000c5f8 <__aeabi_dcmple>:
    c5f8:	b510      	push	{r4, lr}
    c5fa:	f000 f8d7 	bl	c7ac <__ledf2>
    c5fe:	2800      	cmp	r0, #0
    c600:	dd01      	ble.n	c606 <__aeabi_dcmple+0xe>
    c602:	2000      	movs	r0, #0
    c604:	bd10      	pop	{r4, pc}
    c606:	2001      	movs	r0, #1
    c608:	bd10      	pop	{r4, pc}
    c60a:	46c0      	nop			; (mov r8, r8)

0000c60c <__aeabi_dcmpgt>:
    c60c:	b510      	push	{r4, lr}
    c60e:	f000 f869 	bl	c6e4 <__gedf2>
    c612:	2800      	cmp	r0, #0
    c614:	dc01      	bgt.n	c61a <__aeabi_dcmpgt+0xe>
    c616:	2000      	movs	r0, #0
    c618:	bd10      	pop	{r4, pc}
    c61a:	2001      	movs	r0, #1
    c61c:	bd10      	pop	{r4, pc}
    c61e:	46c0      	nop			; (mov r8, r8)

0000c620 <__aeabi_dcmpge>:
    c620:	b510      	push	{r4, lr}
    c622:	f000 f85f 	bl	c6e4 <__gedf2>
    c626:	2800      	cmp	r0, #0
    c628:	da01      	bge.n	c62e <__aeabi_dcmpge+0xe>
    c62a:	2000      	movs	r0, #0
    c62c:	bd10      	pop	{r4, pc}
    c62e:	2001      	movs	r0, #1
    c630:	bd10      	pop	{r4, pc}
    c632:	46c0      	nop			; (mov r8, r8)

0000c634 <__clzsi2>:
    c634:	211c      	movs	r1, #28
    c636:	2301      	movs	r3, #1
    c638:	041b      	lsls	r3, r3, #16
    c63a:	4298      	cmp	r0, r3
    c63c:	d301      	bcc.n	c642 <__clzsi2+0xe>
    c63e:	0c00      	lsrs	r0, r0, #16
    c640:	3910      	subs	r1, #16
    c642:	0a1b      	lsrs	r3, r3, #8
    c644:	4298      	cmp	r0, r3
    c646:	d301      	bcc.n	c64c <__clzsi2+0x18>
    c648:	0a00      	lsrs	r0, r0, #8
    c64a:	3908      	subs	r1, #8
    c64c:	091b      	lsrs	r3, r3, #4
    c64e:	4298      	cmp	r0, r3
    c650:	d301      	bcc.n	c656 <__clzsi2+0x22>
    c652:	0900      	lsrs	r0, r0, #4
    c654:	3904      	subs	r1, #4
    c656:	a202      	add	r2, pc, #8	; (adr r2, c660 <__clzsi2+0x2c>)
    c658:	5c10      	ldrb	r0, [r2, r0]
    c65a:	1840      	adds	r0, r0, r1
    c65c:	4770      	bx	lr
    c65e:	46c0      	nop			; (mov r8, r8)
    c660:	02020304 	.word	0x02020304
    c664:	01010101 	.word	0x01010101
	...

0000c670 <__eqdf2>:
    c670:	b5f0      	push	{r4, r5, r6, r7, lr}
    c672:	464f      	mov	r7, r9
    c674:	4646      	mov	r6, r8
    c676:	46d6      	mov	lr, sl
    c678:	005c      	lsls	r4, r3, #1
    c67a:	b5c0      	push	{r6, r7, lr}
    c67c:	031f      	lsls	r7, r3, #12
    c67e:	0fdb      	lsrs	r3, r3, #31
    c680:	469a      	mov	sl, r3
    c682:	4b17      	ldr	r3, [pc, #92]	; (c6e0 <__eqdf2+0x70>)
    c684:	030e      	lsls	r6, r1, #12
    c686:	004d      	lsls	r5, r1, #1
    c688:	4684      	mov	ip, r0
    c68a:	4680      	mov	r8, r0
    c68c:	0b36      	lsrs	r6, r6, #12
    c68e:	0d6d      	lsrs	r5, r5, #21
    c690:	0fc9      	lsrs	r1, r1, #31
    c692:	4691      	mov	r9, r2
    c694:	0b3f      	lsrs	r7, r7, #12
    c696:	0d64      	lsrs	r4, r4, #21
    c698:	2001      	movs	r0, #1
    c69a:	429d      	cmp	r5, r3
    c69c:	d008      	beq.n	c6b0 <__eqdf2+0x40>
    c69e:	429c      	cmp	r4, r3
    c6a0:	d001      	beq.n	c6a6 <__eqdf2+0x36>
    c6a2:	42a5      	cmp	r5, r4
    c6a4:	d00b      	beq.n	c6be <__eqdf2+0x4e>
    c6a6:	bc1c      	pop	{r2, r3, r4}
    c6a8:	4690      	mov	r8, r2
    c6aa:	4699      	mov	r9, r3
    c6ac:	46a2      	mov	sl, r4
    c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6b0:	4663      	mov	r3, ip
    c6b2:	4333      	orrs	r3, r6
    c6b4:	d1f7      	bne.n	c6a6 <__eqdf2+0x36>
    c6b6:	42ac      	cmp	r4, r5
    c6b8:	d1f5      	bne.n	c6a6 <__eqdf2+0x36>
    c6ba:	433a      	orrs	r2, r7
    c6bc:	d1f3      	bne.n	c6a6 <__eqdf2+0x36>
    c6be:	2001      	movs	r0, #1
    c6c0:	42be      	cmp	r6, r7
    c6c2:	d1f0      	bne.n	c6a6 <__eqdf2+0x36>
    c6c4:	45c8      	cmp	r8, r9
    c6c6:	d1ee      	bne.n	c6a6 <__eqdf2+0x36>
    c6c8:	4551      	cmp	r1, sl
    c6ca:	d007      	beq.n	c6dc <__eqdf2+0x6c>
    c6cc:	2d00      	cmp	r5, #0
    c6ce:	d1ea      	bne.n	c6a6 <__eqdf2+0x36>
    c6d0:	4663      	mov	r3, ip
    c6d2:	431e      	orrs	r6, r3
    c6d4:	0030      	movs	r0, r6
    c6d6:	1e46      	subs	r6, r0, #1
    c6d8:	41b0      	sbcs	r0, r6
    c6da:	e7e4      	b.n	c6a6 <__eqdf2+0x36>
    c6dc:	2000      	movs	r0, #0
    c6de:	e7e2      	b.n	c6a6 <__eqdf2+0x36>
    c6e0:	000007ff 	.word	0x000007ff

0000c6e4 <__gedf2>:
    c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6e6:	4645      	mov	r5, r8
    c6e8:	46de      	mov	lr, fp
    c6ea:	4657      	mov	r7, sl
    c6ec:	464e      	mov	r6, r9
    c6ee:	b5e0      	push	{r5, r6, r7, lr}
    c6f0:	031f      	lsls	r7, r3, #12
    c6f2:	0b3d      	lsrs	r5, r7, #12
    c6f4:	4f2c      	ldr	r7, [pc, #176]	; (c7a8 <__gedf2+0xc4>)
    c6f6:	030e      	lsls	r6, r1, #12
    c6f8:	004c      	lsls	r4, r1, #1
    c6fa:	46ab      	mov	fp, r5
    c6fc:	005d      	lsls	r5, r3, #1
    c6fe:	4684      	mov	ip, r0
    c700:	0b36      	lsrs	r6, r6, #12
    c702:	0d64      	lsrs	r4, r4, #21
    c704:	0fc9      	lsrs	r1, r1, #31
    c706:	4690      	mov	r8, r2
    c708:	0d6d      	lsrs	r5, r5, #21
    c70a:	0fdb      	lsrs	r3, r3, #31
    c70c:	42bc      	cmp	r4, r7
    c70e:	d02a      	beq.n	c766 <__gedf2+0x82>
    c710:	4f25      	ldr	r7, [pc, #148]	; (c7a8 <__gedf2+0xc4>)
    c712:	42bd      	cmp	r5, r7
    c714:	d02d      	beq.n	c772 <__gedf2+0x8e>
    c716:	2c00      	cmp	r4, #0
    c718:	d10f      	bne.n	c73a <__gedf2+0x56>
    c71a:	4330      	orrs	r0, r6
    c71c:	0007      	movs	r7, r0
    c71e:	4681      	mov	r9, r0
    c720:	4278      	negs	r0, r7
    c722:	4178      	adcs	r0, r7
    c724:	b2c0      	uxtb	r0, r0
    c726:	2d00      	cmp	r5, #0
    c728:	d117      	bne.n	c75a <__gedf2+0x76>
    c72a:	465f      	mov	r7, fp
    c72c:	433a      	orrs	r2, r7
    c72e:	d114      	bne.n	c75a <__gedf2+0x76>
    c730:	464b      	mov	r3, r9
    c732:	2000      	movs	r0, #0
    c734:	2b00      	cmp	r3, #0
    c736:	d00a      	beq.n	c74e <__gedf2+0x6a>
    c738:	e006      	b.n	c748 <__gedf2+0x64>
    c73a:	2d00      	cmp	r5, #0
    c73c:	d102      	bne.n	c744 <__gedf2+0x60>
    c73e:	4658      	mov	r0, fp
    c740:	4302      	orrs	r2, r0
    c742:	d001      	beq.n	c748 <__gedf2+0x64>
    c744:	4299      	cmp	r1, r3
    c746:	d018      	beq.n	c77a <__gedf2+0x96>
    c748:	4248      	negs	r0, r1
    c74a:	2101      	movs	r1, #1
    c74c:	4308      	orrs	r0, r1
    c74e:	bc3c      	pop	{r2, r3, r4, r5}
    c750:	4690      	mov	r8, r2
    c752:	4699      	mov	r9, r3
    c754:	46a2      	mov	sl, r4
    c756:	46ab      	mov	fp, r5
    c758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c75a:	2800      	cmp	r0, #0
    c75c:	d0f2      	beq.n	c744 <__gedf2+0x60>
    c75e:	2001      	movs	r0, #1
    c760:	3b01      	subs	r3, #1
    c762:	4318      	orrs	r0, r3
    c764:	e7f3      	b.n	c74e <__gedf2+0x6a>
    c766:	0037      	movs	r7, r6
    c768:	4307      	orrs	r7, r0
    c76a:	d0d1      	beq.n	c710 <__gedf2+0x2c>
    c76c:	2002      	movs	r0, #2
    c76e:	4240      	negs	r0, r0
    c770:	e7ed      	b.n	c74e <__gedf2+0x6a>
    c772:	465f      	mov	r7, fp
    c774:	4317      	orrs	r7, r2
    c776:	d0ce      	beq.n	c716 <__gedf2+0x32>
    c778:	e7f8      	b.n	c76c <__gedf2+0x88>
    c77a:	42ac      	cmp	r4, r5
    c77c:	dce4      	bgt.n	c748 <__gedf2+0x64>
    c77e:	da03      	bge.n	c788 <__gedf2+0xa4>
    c780:	1e48      	subs	r0, r1, #1
    c782:	2101      	movs	r1, #1
    c784:	4308      	orrs	r0, r1
    c786:	e7e2      	b.n	c74e <__gedf2+0x6a>
    c788:	455e      	cmp	r6, fp
    c78a:	d8dd      	bhi.n	c748 <__gedf2+0x64>
    c78c:	d006      	beq.n	c79c <__gedf2+0xb8>
    c78e:	2000      	movs	r0, #0
    c790:	455e      	cmp	r6, fp
    c792:	d2dc      	bcs.n	c74e <__gedf2+0x6a>
    c794:	2301      	movs	r3, #1
    c796:	1e48      	subs	r0, r1, #1
    c798:	4318      	orrs	r0, r3
    c79a:	e7d8      	b.n	c74e <__gedf2+0x6a>
    c79c:	45c4      	cmp	ip, r8
    c79e:	d8d3      	bhi.n	c748 <__gedf2+0x64>
    c7a0:	2000      	movs	r0, #0
    c7a2:	45c4      	cmp	ip, r8
    c7a4:	d3f6      	bcc.n	c794 <__gedf2+0xb0>
    c7a6:	e7d2      	b.n	c74e <__gedf2+0x6a>
    c7a8:	000007ff 	.word	0x000007ff

0000c7ac <__ledf2>:
    c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7ae:	464e      	mov	r6, r9
    c7b0:	4645      	mov	r5, r8
    c7b2:	46de      	mov	lr, fp
    c7b4:	4657      	mov	r7, sl
    c7b6:	005c      	lsls	r4, r3, #1
    c7b8:	b5e0      	push	{r5, r6, r7, lr}
    c7ba:	031f      	lsls	r7, r3, #12
    c7bc:	0fdb      	lsrs	r3, r3, #31
    c7be:	4699      	mov	r9, r3
    c7c0:	4b2a      	ldr	r3, [pc, #168]	; (c86c <__ledf2+0xc0>)
    c7c2:	030e      	lsls	r6, r1, #12
    c7c4:	004d      	lsls	r5, r1, #1
    c7c6:	0fc9      	lsrs	r1, r1, #31
    c7c8:	4684      	mov	ip, r0
    c7ca:	0b36      	lsrs	r6, r6, #12
    c7cc:	0d6d      	lsrs	r5, r5, #21
    c7ce:	468b      	mov	fp, r1
    c7d0:	4690      	mov	r8, r2
    c7d2:	0b3f      	lsrs	r7, r7, #12
    c7d4:	0d64      	lsrs	r4, r4, #21
    c7d6:	429d      	cmp	r5, r3
    c7d8:	d020      	beq.n	c81c <__ledf2+0x70>
    c7da:	4b24      	ldr	r3, [pc, #144]	; (c86c <__ledf2+0xc0>)
    c7dc:	429c      	cmp	r4, r3
    c7de:	d022      	beq.n	c826 <__ledf2+0x7a>
    c7e0:	2d00      	cmp	r5, #0
    c7e2:	d112      	bne.n	c80a <__ledf2+0x5e>
    c7e4:	4330      	orrs	r0, r6
    c7e6:	4243      	negs	r3, r0
    c7e8:	4143      	adcs	r3, r0
    c7ea:	b2db      	uxtb	r3, r3
    c7ec:	2c00      	cmp	r4, #0
    c7ee:	d01f      	beq.n	c830 <__ledf2+0x84>
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	d00c      	beq.n	c80e <__ledf2+0x62>
    c7f4:	464b      	mov	r3, r9
    c7f6:	2001      	movs	r0, #1
    c7f8:	3b01      	subs	r3, #1
    c7fa:	4303      	orrs	r3, r0
    c7fc:	0018      	movs	r0, r3
    c7fe:	bc3c      	pop	{r2, r3, r4, r5}
    c800:	4690      	mov	r8, r2
    c802:	4699      	mov	r9, r3
    c804:	46a2      	mov	sl, r4
    c806:	46ab      	mov	fp, r5
    c808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c80a:	2c00      	cmp	r4, #0
    c80c:	d016      	beq.n	c83c <__ledf2+0x90>
    c80e:	45cb      	cmp	fp, r9
    c810:	d017      	beq.n	c842 <__ledf2+0x96>
    c812:	465b      	mov	r3, fp
    c814:	4259      	negs	r1, r3
    c816:	2301      	movs	r3, #1
    c818:	430b      	orrs	r3, r1
    c81a:	e7ef      	b.n	c7fc <__ledf2+0x50>
    c81c:	0031      	movs	r1, r6
    c81e:	2302      	movs	r3, #2
    c820:	4301      	orrs	r1, r0
    c822:	d1eb      	bne.n	c7fc <__ledf2+0x50>
    c824:	e7d9      	b.n	c7da <__ledf2+0x2e>
    c826:	0039      	movs	r1, r7
    c828:	2302      	movs	r3, #2
    c82a:	4311      	orrs	r1, r2
    c82c:	d1e6      	bne.n	c7fc <__ledf2+0x50>
    c82e:	e7d7      	b.n	c7e0 <__ledf2+0x34>
    c830:	433a      	orrs	r2, r7
    c832:	d1dd      	bne.n	c7f0 <__ledf2+0x44>
    c834:	2300      	movs	r3, #0
    c836:	2800      	cmp	r0, #0
    c838:	d0e0      	beq.n	c7fc <__ledf2+0x50>
    c83a:	e7ea      	b.n	c812 <__ledf2+0x66>
    c83c:	433a      	orrs	r2, r7
    c83e:	d1e6      	bne.n	c80e <__ledf2+0x62>
    c840:	e7e7      	b.n	c812 <__ledf2+0x66>
    c842:	42a5      	cmp	r5, r4
    c844:	dce5      	bgt.n	c812 <__ledf2+0x66>
    c846:	db05      	blt.n	c854 <__ledf2+0xa8>
    c848:	42be      	cmp	r6, r7
    c84a:	d8e2      	bhi.n	c812 <__ledf2+0x66>
    c84c:	d007      	beq.n	c85e <__ledf2+0xb2>
    c84e:	2300      	movs	r3, #0
    c850:	42be      	cmp	r6, r7
    c852:	d2d3      	bcs.n	c7fc <__ledf2+0x50>
    c854:	4659      	mov	r1, fp
    c856:	2301      	movs	r3, #1
    c858:	3901      	subs	r1, #1
    c85a:	430b      	orrs	r3, r1
    c85c:	e7ce      	b.n	c7fc <__ledf2+0x50>
    c85e:	45c4      	cmp	ip, r8
    c860:	d8d7      	bhi.n	c812 <__ledf2+0x66>
    c862:	2300      	movs	r3, #0
    c864:	45c4      	cmp	ip, r8
    c866:	d3f5      	bcc.n	c854 <__ledf2+0xa8>
    c868:	e7c8      	b.n	c7fc <__ledf2+0x50>
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	000007ff 	.word	0x000007ff

0000c870 <__libc_init_array>:
    c870:	b570      	push	{r4, r5, r6, lr}
    c872:	4e0d      	ldr	r6, [pc, #52]	; (c8a8 <__libc_init_array+0x38>)
    c874:	4d0d      	ldr	r5, [pc, #52]	; (c8ac <__libc_init_array+0x3c>)
    c876:	2400      	movs	r4, #0
    c878:	1bad      	subs	r5, r5, r6
    c87a:	10ad      	asrs	r5, r5, #2
    c87c:	d005      	beq.n	c88a <__libc_init_array+0x1a>
    c87e:	00a3      	lsls	r3, r4, #2
    c880:	58f3      	ldr	r3, [r6, r3]
    c882:	3401      	adds	r4, #1
    c884:	4798      	blx	r3
    c886:	42a5      	cmp	r5, r4
    c888:	d1f9      	bne.n	c87e <__libc_init_array+0xe>
    c88a:	f000 fa45 	bl	cd18 <_init>
    c88e:	4e08      	ldr	r6, [pc, #32]	; (c8b0 <__libc_init_array+0x40>)
    c890:	4d08      	ldr	r5, [pc, #32]	; (c8b4 <__libc_init_array+0x44>)
    c892:	2400      	movs	r4, #0
    c894:	1bad      	subs	r5, r5, r6
    c896:	10ad      	asrs	r5, r5, #2
    c898:	d005      	beq.n	c8a6 <__libc_init_array+0x36>
    c89a:	00a3      	lsls	r3, r4, #2
    c89c:	58f3      	ldr	r3, [r6, r3]
    c89e:	3401      	adds	r4, #1
    c8a0:	4798      	blx	r3
    c8a2:	42a5      	cmp	r5, r4
    c8a4:	d1f9      	bne.n	c89a <__libc_init_array+0x2a>
    c8a6:	bd70      	pop	{r4, r5, r6, pc}
    c8a8:	0000cd24 	.word	0x0000cd24
    c8ac:	0000cd24 	.word	0x0000cd24
    c8b0:	0000cd24 	.word	0x0000cd24
    c8b4:	0000cd2c 	.word	0x0000cd2c

0000c8b8 <memcpy>:
    c8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8ba:	0005      	movs	r5, r0
    c8bc:	2a0f      	cmp	r2, #15
    c8be:	d92f      	bls.n	c920 <memcpy+0x68>
    c8c0:	000b      	movs	r3, r1
    c8c2:	4303      	orrs	r3, r0
    c8c4:	079b      	lsls	r3, r3, #30
    c8c6:	d134      	bne.n	c932 <memcpy+0x7a>
    c8c8:	0016      	movs	r6, r2
    c8ca:	000c      	movs	r4, r1
    c8cc:	0003      	movs	r3, r0
    c8ce:	3e10      	subs	r6, #16
    c8d0:	0935      	lsrs	r5, r6, #4
    c8d2:	3501      	adds	r5, #1
    c8d4:	012d      	lsls	r5, r5, #4
    c8d6:	1945      	adds	r5, r0, r5
    c8d8:	6827      	ldr	r7, [r4, #0]
    c8da:	601f      	str	r7, [r3, #0]
    c8dc:	6867      	ldr	r7, [r4, #4]
    c8de:	605f      	str	r7, [r3, #4]
    c8e0:	68a7      	ldr	r7, [r4, #8]
    c8e2:	609f      	str	r7, [r3, #8]
    c8e4:	68e7      	ldr	r7, [r4, #12]
    c8e6:	3410      	adds	r4, #16
    c8e8:	60df      	str	r7, [r3, #12]
    c8ea:	3310      	adds	r3, #16
    c8ec:	429d      	cmp	r5, r3
    c8ee:	d1f3      	bne.n	c8d8 <memcpy+0x20>
    c8f0:	230f      	movs	r3, #15
    c8f2:	439e      	bics	r6, r3
    c8f4:	3610      	adds	r6, #16
    c8f6:	1985      	adds	r5, r0, r6
    c8f8:	1989      	adds	r1, r1, r6
    c8fa:	4013      	ands	r3, r2
    c8fc:	2b03      	cmp	r3, #3
    c8fe:	d91a      	bls.n	c936 <memcpy+0x7e>
    c900:	1f1e      	subs	r6, r3, #4
    c902:	2300      	movs	r3, #0
    c904:	08b4      	lsrs	r4, r6, #2
    c906:	3401      	adds	r4, #1
    c908:	00a4      	lsls	r4, r4, #2
    c90a:	58cf      	ldr	r7, [r1, r3]
    c90c:	50ef      	str	r7, [r5, r3]
    c90e:	3304      	adds	r3, #4
    c910:	42a3      	cmp	r3, r4
    c912:	d1fa      	bne.n	c90a <memcpy+0x52>
    c914:	2403      	movs	r4, #3
    c916:	43a6      	bics	r6, r4
    c918:	1d33      	adds	r3, r6, #4
    c91a:	4022      	ands	r2, r4
    c91c:	18c9      	adds	r1, r1, r3
    c91e:	18ed      	adds	r5, r5, r3
    c920:	2a00      	cmp	r2, #0
    c922:	d005      	beq.n	c930 <memcpy+0x78>
    c924:	2300      	movs	r3, #0
    c926:	5ccc      	ldrb	r4, [r1, r3]
    c928:	54ec      	strb	r4, [r5, r3]
    c92a:	3301      	adds	r3, #1
    c92c:	4293      	cmp	r3, r2
    c92e:	d1fa      	bne.n	c926 <memcpy+0x6e>
    c930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c932:	0005      	movs	r5, r0
    c934:	e7f6      	b.n	c924 <memcpy+0x6c>
    c936:	001a      	movs	r2, r3
    c938:	e7f2      	b.n	c920 <memcpy+0x68>
    c93a:	46c0      	nop			; (mov r8, r8)

0000c93c <memset>:
    c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c93e:	0783      	lsls	r3, r0, #30
    c940:	d043      	beq.n	c9ca <memset+0x8e>
    c942:	1e54      	subs	r4, r2, #1
    c944:	2a00      	cmp	r2, #0
    c946:	d03f      	beq.n	c9c8 <memset+0x8c>
    c948:	b2ce      	uxtb	r6, r1
    c94a:	0002      	movs	r2, r0
    c94c:	2503      	movs	r5, #3
    c94e:	e002      	b.n	c956 <memset+0x1a>
    c950:	001a      	movs	r2, r3
    c952:	3c01      	subs	r4, #1
    c954:	d338      	bcc.n	c9c8 <memset+0x8c>
    c956:	1c53      	adds	r3, r2, #1
    c958:	7016      	strb	r6, [r2, #0]
    c95a:	422b      	tst	r3, r5
    c95c:	d1f8      	bne.n	c950 <memset+0x14>
    c95e:	2c03      	cmp	r4, #3
    c960:	d92a      	bls.n	c9b8 <memset+0x7c>
    c962:	22ff      	movs	r2, #255	; 0xff
    c964:	400a      	ands	r2, r1
    c966:	0215      	lsls	r5, r2, #8
    c968:	4315      	orrs	r5, r2
    c96a:	042a      	lsls	r2, r5, #16
    c96c:	4315      	orrs	r5, r2
    c96e:	2c0f      	cmp	r4, #15
    c970:	d914      	bls.n	c99c <memset+0x60>
    c972:	0027      	movs	r7, r4
    c974:	001a      	movs	r2, r3
    c976:	3f10      	subs	r7, #16
    c978:	093e      	lsrs	r6, r7, #4
    c97a:	3601      	adds	r6, #1
    c97c:	0136      	lsls	r6, r6, #4
    c97e:	199e      	adds	r6, r3, r6
    c980:	6015      	str	r5, [r2, #0]
    c982:	6055      	str	r5, [r2, #4]
    c984:	6095      	str	r5, [r2, #8]
    c986:	60d5      	str	r5, [r2, #12]
    c988:	3210      	adds	r2, #16
    c98a:	4296      	cmp	r6, r2
    c98c:	d1f8      	bne.n	c980 <memset+0x44>
    c98e:	220f      	movs	r2, #15
    c990:	4397      	bics	r7, r2
    c992:	3710      	adds	r7, #16
    c994:	19db      	adds	r3, r3, r7
    c996:	4014      	ands	r4, r2
    c998:	2c03      	cmp	r4, #3
    c99a:	d90d      	bls.n	c9b8 <memset+0x7c>
    c99c:	001a      	movs	r2, r3
    c99e:	1f27      	subs	r7, r4, #4
    c9a0:	08be      	lsrs	r6, r7, #2
    c9a2:	3601      	adds	r6, #1
    c9a4:	00b6      	lsls	r6, r6, #2
    c9a6:	199e      	adds	r6, r3, r6
    c9a8:	c220      	stmia	r2!, {r5}
    c9aa:	42b2      	cmp	r2, r6
    c9ac:	d1fc      	bne.n	c9a8 <memset+0x6c>
    c9ae:	2203      	movs	r2, #3
    c9b0:	4397      	bics	r7, r2
    c9b2:	3704      	adds	r7, #4
    c9b4:	19db      	adds	r3, r3, r7
    c9b6:	4014      	ands	r4, r2
    c9b8:	2c00      	cmp	r4, #0
    c9ba:	d005      	beq.n	c9c8 <memset+0x8c>
    c9bc:	b2c9      	uxtb	r1, r1
    c9be:	191c      	adds	r4, r3, r4
    c9c0:	7019      	strb	r1, [r3, #0]
    c9c2:	3301      	adds	r3, #1
    c9c4:	429c      	cmp	r4, r3
    c9c6:	d1fb      	bne.n	c9c0 <memset+0x84>
    c9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9ca:	0014      	movs	r4, r2
    c9cc:	0003      	movs	r3, r0
    c9ce:	e7c6      	b.n	c95e <memset+0x22>

0000c9d0 <register_fini>:
    c9d0:	4b03      	ldr	r3, [pc, #12]	; (c9e0 <register_fini+0x10>)
    c9d2:	b510      	push	{r4, lr}
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d002      	beq.n	c9de <register_fini+0xe>
    c9d8:	4802      	ldr	r0, [pc, #8]	; (c9e4 <register_fini+0x14>)
    c9da:	f000 f805 	bl	c9e8 <atexit>
    c9de:	bd10      	pop	{r4, pc}
    c9e0:	00000000 	.word	0x00000000
    c9e4:	0000c9f9 	.word	0x0000c9f9

0000c9e8 <atexit>:
    c9e8:	b510      	push	{r4, lr}
    c9ea:	0001      	movs	r1, r0
    c9ec:	2300      	movs	r3, #0
    c9ee:	2200      	movs	r2, #0
    c9f0:	2000      	movs	r0, #0
    c9f2:	f000 f81f 	bl	ca34 <__register_exitproc>
    c9f6:	bd10      	pop	{r4, pc}

0000c9f8 <__libc_fini_array>:
    c9f8:	b570      	push	{r4, r5, r6, lr}
    c9fa:	4b09      	ldr	r3, [pc, #36]	; (ca20 <__libc_fini_array+0x28>)
    c9fc:	4c09      	ldr	r4, [pc, #36]	; (ca24 <__libc_fini_array+0x2c>)
    c9fe:	1ae4      	subs	r4, r4, r3
    ca00:	10a4      	asrs	r4, r4, #2
    ca02:	d009      	beq.n	ca18 <__libc_fini_array+0x20>
    ca04:	4a08      	ldr	r2, [pc, #32]	; (ca28 <__libc_fini_array+0x30>)
    ca06:	18a5      	adds	r5, r4, r2
    ca08:	00ad      	lsls	r5, r5, #2
    ca0a:	18ed      	adds	r5, r5, r3
    ca0c:	682b      	ldr	r3, [r5, #0]
    ca0e:	3c01      	subs	r4, #1
    ca10:	4798      	blx	r3
    ca12:	3d04      	subs	r5, #4
    ca14:	2c00      	cmp	r4, #0
    ca16:	d1f9      	bne.n	ca0c <__libc_fini_array+0x14>
    ca18:	f000 f988 	bl	cd2c <_fini>
    ca1c:	bd70      	pop	{r4, r5, r6, pc}
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	0000cd38 	.word	0x0000cd38
    ca24:	0000cd3c 	.word	0x0000cd3c
    ca28:	3fffffff 	.word	0x3fffffff

0000ca2c <__retarget_lock_acquire_recursive>:
    ca2c:	4770      	bx	lr
    ca2e:	46c0      	nop			; (mov r8, r8)

0000ca30 <__retarget_lock_release_recursive>:
    ca30:	4770      	bx	lr
    ca32:	46c0      	nop			; (mov r8, r8)

0000ca34 <__register_exitproc>:
    ca34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca36:	464e      	mov	r6, r9
    ca38:	4645      	mov	r5, r8
    ca3a:	46de      	mov	lr, fp
    ca3c:	4657      	mov	r7, sl
    ca3e:	b5e0      	push	{r5, r6, r7, lr}
    ca40:	4d36      	ldr	r5, [pc, #216]	; (cb1c <__register_exitproc+0xe8>)
    ca42:	b083      	sub	sp, #12
    ca44:	0006      	movs	r6, r0
    ca46:	6828      	ldr	r0, [r5, #0]
    ca48:	4698      	mov	r8, r3
    ca4a:	000f      	movs	r7, r1
    ca4c:	4691      	mov	r9, r2
    ca4e:	f7ff ffed 	bl	ca2c <__retarget_lock_acquire_recursive>
    ca52:	4b33      	ldr	r3, [pc, #204]	; (cb20 <__register_exitproc+0xec>)
    ca54:	681c      	ldr	r4, [r3, #0]
    ca56:	23a4      	movs	r3, #164	; 0xa4
    ca58:	005b      	lsls	r3, r3, #1
    ca5a:	58e0      	ldr	r0, [r4, r3]
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d052      	beq.n	cb06 <__register_exitproc+0xd2>
    ca60:	6843      	ldr	r3, [r0, #4]
    ca62:	2b1f      	cmp	r3, #31
    ca64:	dc13      	bgt.n	ca8e <__register_exitproc+0x5a>
    ca66:	1c5a      	adds	r2, r3, #1
    ca68:	9201      	str	r2, [sp, #4]
    ca6a:	2e00      	cmp	r6, #0
    ca6c:	d128      	bne.n	cac0 <__register_exitproc+0x8c>
    ca6e:	9a01      	ldr	r2, [sp, #4]
    ca70:	3302      	adds	r3, #2
    ca72:	009b      	lsls	r3, r3, #2
    ca74:	6042      	str	r2, [r0, #4]
    ca76:	501f      	str	r7, [r3, r0]
    ca78:	6828      	ldr	r0, [r5, #0]
    ca7a:	f7ff ffd9 	bl	ca30 <__retarget_lock_release_recursive>
    ca7e:	2000      	movs	r0, #0
    ca80:	b003      	add	sp, #12
    ca82:	bc3c      	pop	{r2, r3, r4, r5}
    ca84:	4690      	mov	r8, r2
    ca86:	4699      	mov	r9, r3
    ca88:	46a2      	mov	sl, r4
    ca8a:	46ab      	mov	fp, r5
    ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca8e:	4b25      	ldr	r3, [pc, #148]	; (cb24 <__register_exitproc+0xf0>)
    ca90:	2b00      	cmp	r3, #0
    ca92:	d03d      	beq.n	cb10 <__register_exitproc+0xdc>
    ca94:	20c8      	movs	r0, #200	; 0xc8
    ca96:	0040      	lsls	r0, r0, #1
    ca98:	e000      	b.n	ca9c <__register_exitproc+0x68>
    ca9a:	bf00      	nop
    ca9c:	2800      	cmp	r0, #0
    ca9e:	d037      	beq.n	cb10 <__register_exitproc+0xdc>
    caa0:	22a4      	movs	r2, #164	; 0xa4
    caa2:	2300      	movs	r3, #0
    caa4:	0052      	lsls	r2, r2, #1
    caa6:	58a1      	ldr	r1, [r4, r2]
    caa8:	6043      	str	r3, [r0, #4]
    caaa:	6001      	str	r1, [r0, #0]
    caac:	50a0      	str	r0, [r4, r2]
    caae:	3240      	adds	r2, #64	; 0x40
    cab0:	5083      	str	r3, [r0, r2]
    cab2:	3204      	adds	r2, #4
    cab4:	5083      	str	r3, [r0, r2]
    cab6:	3301      	adds	r3, #1
    cab8:	9301      	str	r3, [sp, #4]
    caba:	2300      	movs	r3, #0
    cabc:	2e00      	cmp	r6, #0
    cabe:	d0d6      	beq.n	ca6e <__register_exitproc+0x3a>
    cac0:	009a      	lsls	r2, r3, #2
    cac2:	4692      	mov	sl, r2
    cac4:	4482      	add	sl, r0
    cac6:	464a      	mov	r2, r9
    cac8:	2188      	movs	r1, #136	; 0x88
    caca:	4654      	mov	r4, sl
    cacc:	5062      	str	r2, [r4, r1]
    cace:	22c4      	movs	r2, #196	; 0xc4
    cad0:	0052      	lsls	r2, r2, #1
    cad2:	4691      	mov	r9, r2
    cad4:	4481      	add	r9, r0
    cad6:	464a      	mov	r2, r9
    cad8:	3987      	subs	r1, #135	; 0x87
    cada:	4099      	lsls	r1, r3
    cadc:	6812      	ldr	r2, [r2, #0]
    cade:	468b      	mov	fp, r1
    cae0:	430a      	orrs	r2, r1
    cae2:	4694      	mov	ip, r2
    cae4:	464a      	mov	r2, r9
    cae6:	4661      	mov	r1, ip
    cae8:	6011      	str	r1, [r2, #0]
    caea:	2284      	movs	r2, #132	; 0x84
    caec:	4641      	mov	r1, r8
    caee:	0052      	lsls	r2, r2, #1
    caf0:	50a1      	str	r1, [r4, r2]
    caf2:	2e02      	cmp	r6, #2
    caf4:	d1bb      	bne.n	ca6e <__register_exitproc+0x3a>
    caf6:	0002      	movs	r2, r0
    caf8:	465c      	mov	r4, fp
    cafa:	328d      	adds	r2, #141	; 0x8d
    cafc:	32ff      	adds	r2, #255	; 0xff
    cafe:	6811      	ldr	r1, [r2, #0]
    cb00:	430c      	orrs	r4, r1
    cb02:	6014      	str	r4, [r2, #0]
    cb04:	e7b3      	b.n	ca6e <__register_exitproc+0x3a>
    cb06:	0020      	movs	r0, r4
    cb08:	304d      	adds	r0, #77	; 0x4d
    cb0a:	30ff      	adds	r0, #255	; 0xff
    cb0c:	50e0      	str	r0, [r4, r3]
    cb0e:	e7a7      	b.n	ca60 <__register_exitproc+0x2c>
    cb10:	6828      	ldr	r0, [r5, #0]
    cb12:	f7ff ff8d 	bl	ca30 <__retarget_lock_release_recursive>
    cb16:	2001      	movs	r0, #1
    cb18:	4240      	negs	r0, r0
    cb1a:	e7b1      	b.n	ca80 <__register_exitproc+0x4c>
    cb1c:	20000430 	.word	0x20000430
    cb20:	0000cd14 	.word	0x0000cd14
    cb24:	00000000 	.word	0x00000000
    cb28:	696d6461 	.word	0x696d6461
    cb2c:	0000006e 	.word	0x0000006e
    cb30:	72657375 	.word	0x72657375
    cb34:	00000000 	.word	0x00000000
    cb38:	53434d5f 	.word	0x53434d5f
    cb3c:	2d303031 	.word	0x2d303031
    cb40:	54315234 	.word	0x54315234
    cb44:	00000000 	.word	0x00000000
    cb48:	2e302e30 	.word	0x2e302e30
    cb4c:	34302e30 	.word	0x34302e30
    cb50:	00000000 	.word	0x00000000
    cb54:	00004a4c 	.word	0x00004a4c
    cb58:	00004a90 	.word	0x00004a90
    cb5c:	00005778 	.word	0x00005778
    cb60:	00005778 	.word	0x00005778
    cb64:	00005778 	.word	0x00005778
    cb68:	00005778 	.word	0x00005778
    cb6c:	00005778 	.word	0x00005778
    cb70:	00004d20 	.word	0x00004d20
    cb74:	00004e2a 	.word	0x00004e2a
    cb78:	00005778 	.word	0x00005778
    cb7c:	00005778 	.word	0x00005778
    cb80:	00005778 	.word	0x00005778
    cb84:	00005778 	.word	0x00005778
    cb88:	00005778 	.word	0x00005778
    cb8c:	00005778 	.word	0x00005778
    cb90:	00005778 	.word	0x00005778
    cb94:	00004f54 	.word	0x00004f54
    cb98:	00005778 	.word	0x00005778
    cb9c:	00005778 	.word	0x00005778
    cba0:	00005778 	.word	0x00005778
    cba4:	00005778 	.word	0x00005778
    cba8:	00005778 	.word	0x00005778
    cbac:	00005778 	.word	0x00005778
    cbb0:	00004f94 	.word	0x00004f94
    cbb4:	00005778 	.word	0x00005778
    cbb8:	00005778 	.word	0x00005778
    cbbc:	00005778 	.word	0x00005778
    cbc0:	00005778 	.word	0x00005778
    cbc4:	00005778 	.word	0x00005778
    cbc8:	00005778 	.word	0x00005778
    cbcc:	00005778 	.word	0x00005778
    cbd0:	00005778 	.word	0x00005778
    cbd4:	00005088 	.word	0x00005088
    cbd8:	0000530c 	.word	0x0000530c
    cbdc:	000053dc 	.word	0x000053dc
    cbe0:	000054a2 	.word	0x000054a2
    cbe4:	00005778 	.word	0x00005778
    cbe8:	00005778 	.word	0x00005778
    cbec:	00005778 	.word	0x00005778
    cbf0:	00005512 	.word	0x00005512
    cbf4:	00005778 	.word	0x00005778
    cbf8:	000055f2 	.word	0x000055f2
    cbfc:	000098b2 	.word	0x000098b2
    cc00:	000098c4 	.word	0x000098c4
    cc04:	000098f8 	.word	0x000098f8
    cc08:	00009930 	.word	0x00009930
    cc0c:	00009956 	.word	0x00009956
    cc10:	0000998e 	.word	0x0000998e
    cc14:	00009a36 	.word	0x00009a36
    cc18:	00009a7e 	.word	0x00009a7e
    cc1c:	00009ba2 	.word	0x00009ba2
    cc20:	00009c52 	.word	0x00009c52
    cc24:	00009cac 	.word	0x00009cac
    cc28:	00009d5e 	.word	0x00009d5e
    cc2c:	00009da4 	.word	0x00009da4
    cc30:	00009de8 	.word	0x00009de8
    cc34:	00009e2e 	.word	0x00009e2e
    cc38:	00009f18 	.word	0x00009f18
    cc3c:	00009fc6 	.word	0x00009fc6
    cc40:	0000a04e 	.word	0x0000a04e
    cc44:	0000a0c8 	.word	0x0000a0c8
    cc48:	0000a170 	.word	0x0000a170
    cc4c:	0000a1e0 	.word	0x0000a1e0
    cc50:	0000a3c8 	.word	0x0000a3c8
    cc54:	0000a5f8 	.word	0x0000a5f8
    cc58:	0000a554 	.word	0x0000a554
    cc5c:	0000a68a 	.word	0x0000a68a
    cc60:	0000a2ca 	.word	0x0000a2ca
    cc64:	0000a30c 	.word	0x0000a30c
    cc68:	0000a64c 	.word	0x0000a64c
    cc6c:	0000a732 	.word	0x0000a732
    cc70:	0000a778 	.word	0x0000a778
    cc74:	0000a8f8 	.word	0x0000a8f8
    cc78:	0000a9a6 	.word	0x0000a9a6
    cc7c:	0000aa2e 	.word	0x0000aa2e
    cc80:	0000aaac 	.word	0x0000aaac
    cc84:	0000ab54 	.word	0x0000ab54
    cc88:	3153434d 	.word	0x3153434d
    cc8c:	342d3030 	.word	0x342d3030
    cc90:	00543152 	.word	0x00543152
    cc94:	0000b388 	.word	0x0000b388
    cc98:	0000b36a 	.word	0x0000b36a
    cc9c:	0000b324 	.word	0x0000b324
    cca0:	0000b242 	.word	0x0000b242
    cca4:	0000b324 	.word	0x0000b324
    cca8:	0000b35c 	.word	0x0000b35c
    ccac:	0000b324 	.word	0x0000b324
    ccb0:	0000b242 	.word	0x0000b242
    ccb4:	0000b36a 	.word	0x0000b36a
    ccb8:	0000b36a 	.word	0x0000b36a
    ccbc:	0000b35c 	.word	0x0000b35c
    ccc0:	0000b242 	.word	0x0000b242
    ccc4:	0000b23a 	.word	0x0000b23a
    ccc8:	0000b23a 	.word	0x0000b23a
    cccc:	0000b23a 	.word	0x0000b23a
    ccd0:	0000b5a0 	.word	0x0000b5a0
    ccd4:	0000b9e8 	.word	0x0000b9e8
    ccd8:	0000b8a8 	.word	0x0000b8a8
    ccdc:	0000b8a8 	.word	0x0000b8a8
    cce0:	0000b8a4 	.word	0x0000b8a4
    cce4:	0000b9c0 	.word	0x0000b9c0
    cce8:	0000b9c0 	.word	0x0000b9c0
    ccec:	0000b9b2 	.word	0x0000b9b2
    ccf0:	0000b8a4 	.word	0x0000b8a4
    ccf4:	0000b9c0 	.word	0x0000b9c0
    ccf8:	0000b9b2 	.word	0x0000b9b2
    ccfc:	0000b9c0 	.word	0x0000b9c0
    cd00:	0000b8a4 	.word	0x0000b8a4
    cd04:	0000b9c8 	.word	0x0000b9c8
    cd08:	0000b9c8 	.word	0x0000b9c8
    cd0c:	0000b9c8 	.word	0x0000b9c8
    cd10:	0000bbcc 	.word	0x0000bbcc

0000cd14 <_global_impure_ptr>:
    cd14:	20000008                                ... 

0000cd18 <_init>:
    cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd1a:	46c0      	nop			; (mov r8, r8)
    cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd1e:	bc08      	pop	{r3}
    cd20:	469e      	mov	lr, r3
    cd22:	4770      	bx	lr

0000cd24 <__init_array_start>:
    cd24:	0000c9d1 	.word	0x0000c9d1

0000cd28 <__frame_dummy_init_array_entry>:
    cd28:	000040dd                                .@..

0000cd2c <_fini>:
    cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd2e:	46c0      	nop			; (mov r8, r8)
    cd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd32:	bc08      	pop	{r3}
    cd34:	469e      	mov	lr, r3
    cd36:	4770      	bx	lr

0000cd38 <__fini_array_start>:
    cd38:	000040b5 	.word	0x000040b5
