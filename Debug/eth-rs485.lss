
eth-rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008964  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000c964  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ab0  20000434  0000cd98  00010434  2**2
                  ALLOC
  3 .stack        00002004  20003ee4  00010848  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00046de0  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000348d  00000000  00000000  00057295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000115e  00000000  00000000  0005a722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0005b880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017009  00000000  00000000  0005bac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a682  00000000  00000000  00072ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007198e  00000000  00000000  0007d14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ff0  00000000  00000000  000eeadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000efacc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	e8 5e 00 20 15 41 00 00 0d 42 00 00 0d 42 00 00     .^. .A...B...B..
	...
    402c:	0d 42 00 00 00 00 00 00 00 00 00 00 0d 42 00 00     .B...........B..
    403c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    404c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    405c:	0d 42 00 00 0d 42 00 00 55 93 00 00 65 93 00 00     .B...B..U...e...
    406c:	45 93 00 00 35 93 00 00 0d 42 00 00 71 79 00 00     E...5....B..qy..
    407c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 01 7d 00 00     .B...B...B...}..
    408c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
    409c:	0d 42 00 00 0d 42 00 00 0d 42 00 00 0d 42 00 00     .B...B...B...B..
	...

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000434 	.word	0x20000434
    40d4:	00000000 	.word	0x00000000
    40d8:	0000c964 	.word	0x0000c964

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000438 	.word	0x20000438
    4108:	0000c964 	.word	0x0000c964
    410c:	0000c964 	.word	0x0000c964
    4110:	00000000 	.word	0x00000000

00004114 <Reset_Handler>:
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	4b2f      	ldr	r3, [pc, #188]	; (41d8 <Reset_Handler+0xc4>)
    411c:	607b      	str	r3, [r7, #4]
    411e:	4b2f      	ldr	r3, [pc, #188]	; (41dc <Reset_Handler+0xc8>)
    4120:	603b      	str	r3, [r7, #0]
    4122:	687a      	ldr	r2, [r7, #4]
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d00c      	beq.n	4144 <Reset_Handler+0x30>
    412a:	e007      	b.n	413c <Reset_Handler+0x28>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	1d1a      	adds	r2, r3, #4
    4130:	603a      	str	r2, [r7, #0]
    4132:	687a      	ldr	r2, [r7, #4]
    4134:	1d11      	adds	r1, r2, #4
    4136:	6079      	str	r1, [r7, #4]
    4138:	6812      	ldr	r2, [r2, #0]
    413a:	601a      	str	r2, [r3, #0]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	4b28      	ldr	r3, [pc, #160]	; (41e0 <Reset_Handler+0xcc>)
    4140:	429a      	cmp	r2, r3
    4142:	d3f3      	bcc.n	412c <Reset_Handler+0x18>
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <Reset_Handler+0xd0>)
    4146:	603b      	str	r3, [r7, #0]
    4148:	e004      	b.n	4154 <Reset_Handler+0x40>
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	1d1a      	adds	r2, r3, #4
    414e:	603a      	str	r2, [r7, #0]
    4150:	2200      	movs	r2, #0
    4152:	601a      	str	r2, [r3, #0]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	4b24      	ldr	r3, [pc, #144]	; (41e8 <Reset_Handler+0xd4>)
    4158:	429a      	cmp	r2, r3
    415a:	d3f6      	bcc.n	414a <Reset_Handler+0x36>
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <Reset_Handler+0xd8>)
    415e:	607b      	str	r3, [r7, #4]
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <Reset_Handler+0xdc>)
    4162:	687a      	ldr	r2, [r7, #4]
    4164:	21ff      	movs	r1, #255	; 0xff
    4166:	438a      	bics	r2, r1
    4168:	609a      	str	r2, [r3, #8]
    416a:	4a22      	ldr	r2, [pc, #136]	; (41f4 <Reset_Handler+0xe0>)
    416c:	2390      	movs	r3, #144	; 0x90
    416e:	005b      	lsls	r3, r3, #1
    4170:	2102      	movs	r1, #2
    4172:	50d1      	str	r1, [r2, r3]
    4174:	4a20      	ldr	r2, [pc, #128]	; (41f8 <Reset_Handler+0xe4>)
    4176:	78d3      	ldrb	r3, [r2, #3]
    4178:	2103      	movs	r1, #3
    417a:	438b      	bics	r3, r1
    417c:	1c19      	adds	r1, r3, #0
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	70d3      	strb	r3, [r2, #3]
    4184:	4a1c      	ldr	r2, [pc, #112]	; (41f8 <Reset_Handler+0xe4>)
    4186:	78d3      	ldrb	r3, [r2, #3]
    4188:	210c      	movs	r1, #12
    418a:	438b      	bics	r3, r1
    418c:	1c19      	adds	r1, r3, #0
    418e:	2308      	movs	r3, #8
    4190:	430b      	orrs	r3, r1
    4192:	70d3      	strb	r3, [r2, #3]
    4194:	4a19      	ldr	r2, [pc, #100]	; (41fc <Reset_Handler+0xe8>)
    4196:	7b93      	ldrb	r3, [r2, #14]
    4198:	2130      	movs	r1, #48	; 0x30
    419a:	438b      	bics	r3, r1
    419c:	1c19      	adds	r1, r3, #0
    419e:	2320      	movs	r3, #32
    41a0:	430b      	orrs	r3, r1
    41a2:	7393      	strb	r3, [r2, #14]
    41a4:	4a15      	ldr	r2, [pc, #84]	; (41fc <Reset_Handler+0xe8>)
    41a6:	7b93      	ldrb	r3, [r2, #14]
    41a8:	210c      	movs	r1, #12
    41aa:	438b      	bics	r3, r1
    41ac:	1c19      	adds	r1, r3, #0
    41ae:	2308      	movs	r3, #8
    41b0:	430b      	orrs	r3, r1
    41b2:	7393      	strb	r3, [r2, #14]
    41b4:	4a11      	ldr	r2, [pc, #68]	; (41fc <Reset_Handler+0xe8>)
    41b6:	7b93      	ldrb	r3, [r2, #14]
    41b8:	2103      	movs	r1, #3
    41ba:	438b      	bics	r3, r1
    41bc:	1c19      	adds	r1, r3, #0
    41be:	2302      	movs	r3, #2
    41c0:	430b      	orrs	r3, r1
    41c2:	7393      	strb	r3, [r2, #14]
    41c4:	4a0e      	ldr	r2, [pc, #56]	; (4200 <Reset_Handler+0xec>)
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	2180      	movs	r1, #128	; 0x80
    41ca:	430b      	orrs	r3, r1
    41cc:	6053      	str	r3, [r2, #4]
    41ce:	4b0d      	ldr	r3, [pc, #52]	; (4204 <Reset_Handler+0xf0>)
    41d0:	4798      	blx	r3
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <Reset_Handler+0xf4>)
    41d4:	4798      	blx	r3
    41d6:	e7fe      	b.n	41d6 <Reset_Handler+0xc2>
    41d8:	0000c964 	.word	0x0000c964
    41dc:	20000000 	.word	0x20000000
    41e0:	20000434 	.word	0x20000434
    41e4:	20000434 	.word	0x20000434
    41e8:	20003ee4 	.word	0x20003ee4
    41ec:	00004000 	.word	0x00004000
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	41007000 	.word	0x41007000
    41f8:	41005000 	.word	0x41005000
    41fc:	41004800 	.word	0x41004800
    4200:	41004000 	.word	0x41004000
    4204:	0000c49d 	.word	0x0000c49d
    4208:	00006f31 	.word	0x00006f31

0000420c <Dummy_Handler>:
    420c:	b580      	push	{r7, lr}
    420e:	af00      	add	r7, sp, #0
    4210:	e7fe      	b.n	4210 <Dummy_Handler+0x4>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <acc>:
#include "def.h"

void acc(BYTE cmd)//command(читать, записать, сбросить)
{
    4214:	b5b0      	push	{r4, r5, r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	0002      	movs	r2, r0
    421c:	1dfb      	adds	r3, r7, #7
    421e:	701a      	strb	r2, [r3, #0]
	if (sizeof(ACCOUNTS) != 256) {cmd = 109;}
	switch(cmd)
    4220:	1dfb      	adds	r3, r7, #7
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	2b01      	cmp	r3, #1
    4226:	d00b      	beq.n	4240 <acc+0x2c>
    4228:	2b02      	cmp	r3, #2
    422a:	d01e      	beq.n	426a <acc+0x56>
    422c:	2b00      	cmp	r3, #0
    422e:	d174      	bne.n	431a <acc+0x106>
	{
		case READ:
			memcpy(&accnts.accnt[0].login[0], ACCOUNT_PLACE, sizeof(ACCOUNTS));
    4230:	2380      	movs	r3, #128	; 0x80
    4232:	005a      	lsls	r2, r3, #1
    4234:	4948      	ldr	r1, [pc, #288]	; (4358 <acc+0x144>)
    4236:	4b49      	ldr	r3, [pc, #292]	; (435c <acc+0x148>)
    4238:	0018      	movs	r0, r3
    423a:	4b49      	ldr	r3, [pc, #292]	; (4360 <acc+0x14c>)
    423c:	4798      	blx	r3
		break;
    423e:	e087      	b.n	4350 <acc+0x13c>
		case WRITE:
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    4240:	2380      	movs	r3, #128	; 0x80
    4242:	005b      	lsls	r3, r3, #1
    4244:	4a44      	ldr	r2, [pc, #272]	; (4358 <acc+0x144>)
    4246:	0019      	movs	r1, r3
    4248:	0010      	movs	r0, r2
    424a:	4b46      	ldr	r3, [pc, #280]	; (4364 <acc+0x150>)
    424c:	4798      	blx	r3
    424e:	1e03      	subs	r3, r0, #0
    4250:	d103      	bne.n	425a <acc+0x46>
    4252:	4b41      	ldr	r3, [pc, #260]	; (4358 <acc+0x144>)
    4254:	0018      	movs	r0, r3
    4256:	4b44      	ldr	r3, [pc, #272]	; (4368 <acc+0x154>)
    4258:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0], sizeof(ACCOUNTS));
    425a:	2380      	movs	r3, #128	; 0x80
    425c:	005a      	lsls	r2, r3, #1
    425e:	4b3f      	ldr	r3, [pc, #252]	; (435c <acc+0x148>)
    4260:	483d      	ldr	r0, [pc, #244]	; (4358 <acc+0x144>)
    4262:	0019      	movs	r1, r3
    4264:	4b41      	ldr	r3, [pc, #260]	; (436c <acc+0x158>)
    4266:	4798      	blx	r3
		break;
    4268:	e072      	b.n	4350 <acc+0x13c>
		case DROP:

			memset(&accnts.accnt[0].login[0], 0, 64);
    426a:	4b3c      	ldr	r3, [pc, #240]	; (435c <acc+0x148>)
    426c:	2240      	movs	r2, #64	; 0x40
    426e:	2100      	movs	r1, #0
    4270:	0018      	movs	r0, r3
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <acc+0x15c>)
    4274:	4798      	blx	r3
			memcpy(&accnts.accnt[0].login[0], ADMIN, sizeof(ADMIN));
    4276:	493f      	ldr	r1, [pc, #252]	; (4374 <acc+0x160>)
    4278:	4b38      	ldr	r3, [pc, #224]	; (435c <acc+0x148>)
    427a:	2206      	movs	r2, #6
    427c:	0018      	movs	r0, r3
    427e:	4b38      	ldr	r3, [pc, #224]	; (4360 <acc+0x14c>)
    4280:	4798      	blx	r3
			memcpy(&accnts.accnt[0].password[0], ADMIN, sizeof(ADMIN));
    4282:	493c      	ldr	r1, [pc, #240]	; (4374 <acc+0x160>)
    4284:	4b3c      	ldr	r3, [pc, #240]	; (4378 <acc+0x164>)
    4286:	2206      	movs	r2, #6
    4288:	0018      	movs	r0, r3
    428a:	4b35      	ldr	r3, [pc, #212]	; (4360 <acc+0x14c>)
    428c:	4798      	blx	r3

			memset(&accnts.accnt[1].login[0], 0, 64);
    428e:	4b3b      	ldr	r3, [pc, #236]	; (437c <acc+0x168>)
    4290:	2240      	movs	r2, #64	; 0x40
    4292:	2100      	movs	r1, #0
    4294:	0018      	movs	r0, r3
    4296:	4b36      	ldr	r3, [pc, #216]	; (4370 <acc+0x15c>)
    4298:	4798      	blx	r3
			memcpy(&accnts.accnt[1].login[0], USER, sizeof(USER));
    429a:	4939      	ldr	r1, [pc, #228]	; (4380 <acc+0x16c>)
    429c:	4b37      	ldr	r3, [pc, #220]	; (437c <acc+0x168>)
    429e:	2205      	movs	r2, #5
    42a0:	0018      	movs	r0, r3
    42a2:	4b2f      	ldr	r3, [pc, #188]	; (4360 <acc+0x14c>)
    42a4:	4798      	blx	r3
			memcpy(&accnts.accnt[1].password[0], USER, sizeof(USER));
    42a6:	4936      	ldr	r1, [pc, #216]	; (4380 <acc+0x16c>)
    42a8:	4b36      	ldr	r3, [pc, #216]	; (4384 <acc+0x170>)
    42aa:	2205      	movs	r2, #5
    42ac:	0018      	movs	r0, r3
    42ae:	4b2c      	ldr	r3, [pc, #176]	; (4360 <acc+0x14c>)
    42b0:	4798      	blx	r3
			
			accnts.cs = crc16_ccit(&accnts.accnt[0].login, sizeof(ACCOUNTS));
    42b2:	2380      	movs	r3, #128	; 0x80
    42b4:	005a      	lsls	r2, r3, #1
    42b6:	4b29      	ldr	r3, [pc, #164]	; (435c <acc+0x148>)
    42b8:	0011      	movs	r1, r2
    42ba:	0018      	movs	r0, r3
    42bc:	4b32      	ldr	r3, [pc, #200]	; (4388 <acc+0x174>)
    42be:	4798      	blx	r3
    42c0:	0003      	movs	r3, r0
    42c2:	0019      	movs	r1, r3
    42c4:	4b25      	ldr	r3, [pc, #148]	; (435c <acc+0x148>)
    42c6:	22fe      	movs	r2, #254	; 0xfe
    42c8:	20ff      	movs	r0, #255	; 0xff
    42ca:	4008      	ands	r0, r1
    42cc:	0005      	movs	r5, r0
    42ce:	5c98      	ldrb	r0, [r3, r2]
    42d0:	2400      	movs	r4, #0
    42d2:	4020      	ands	r0, r4
    42d4:	1c04      	adds	r4, r0, #0
    42d6:	1c28      	adds	r0, r5, #0
    42d8:	4320      	orrs	r0, r4
    42da:	5498      	strb	r0, [r3, r2]
    42dc:	0a09      	lsrs	r1, r1, #8
    42de:	b288      	uxth	r0, r1
    42e0:	189b      	adds	r3, r3, r2
    42e2:	785a      	ldrb	r2, [r3, #1]
    42e4:	2100      	movs	r1, #0
    42e6:	400a      	ands	r2, r1
    42e8:	1c11      	adds	r1, r2, #0
    42ea:	1c02      	adds	r2, r0, #0
    42ec:	430a      	orrs	r2, r1
    42ee:	705a      	strb	r2, [r3, #1]
			
			if(!flash_empty(ACCOUNT_PLACE,256))	{flash_erase_page(ACCOUNT_PLACE);}
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	4a18      	ldr	r2, [pc, #96]	; (4358 <acc+0x144>)
    42f6:	0019      	movs	r1, r3
    42f8:	0010      	movs	r0, r2
    42fa:	4b1a      	ldr	r3, [pc, #104]	; (4364 <acc+0x150>)
    42fc:	4798      	blx	r3
    42fe:	1e03      	subs	r3, r0, #0
    4300:	d103      	bne.n	430a <acc+0xf6>
    4302:	4b15      	ldr	r3, [pc, #84]	; (4358 <acc+0x144>)
    4304:	0018      	movs	r0, r3
    4306:	4b18      	ldr	r3, [pc, #96]	; (4368 <acc+0x154>)
    4308:	4798      	blx	r3
			flash_write(ACCOUNT_PLACE, &accnts.accnt[0].login[0] , sizeof(ACCOUNTS));
    430a:	2380      	movs	r3, #128	; 0x80
    430c:	005a      	lsls	r2, r3, #1
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <acc+0x148>)
    4310:	4811      	ldr	r0, [pc, #68]	; (4358 <acc+0x144>)
    4312:	0019      	movs	r1, r3
    4314:	4b15      	ldr	r3, [pc, #84]	; (436c <acc+0x158>)
    4316:	4798      	blx	r3
		break;
    4318:	e01a      	b.n	4350 <acc+0x13c>
		default:
			warning_led(3);
    431a:	230f      	movs	r3, #15
    431c:	18fb      	adds	r3, r7, r3
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
    4322:	e00f      	b.n	4344 <acc+0x130>
    4324:	2202      	movs	r2, #2
    4326:	2100      	movs	r1, #0
    4328:	2001      	movs	r0, #1
    432a:	4b18      	ldr	r3, [pc, #96]	; (438c <acc+0x178>)
    432c:	4798      	blx	r3
    432e:	4b18      	ldr	r3, [pc, #96]	; (4390 <acc+0x17c>)
    4330:	0018      	movs	r0, r3
    4332:	4b18      	ldr	r3, [pc, #96]	; (4394 <acc+0x180>)
    4334:	4798      	blx	r3
    4336:	230f      	movs	r3, #15
    4338:	18fb      	adds	r3, r7, r3
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	230f      	movs	r3, #15
    433e:	18fb      	adds	r3, r7, r3
    4340:	3201      	adds	r2, #1
    4342:	701a      	strb	r2, [r3, #0]
    4344:	230f      	movs	r3, #15
    4346:	18fb      	adds	r3, r7, r3
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	2b05      	cmp	r3, #5
    434c:	d9ea      	bls.n	4324 <acc+0x110>
		break;
    434e:	46c0      	nop			; (mov r8, r8)
	}
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b004      	add	sp, #16
    4356:	bdb0      	pop	{r4, r5, r7, pc}
    4358:	0003fb00 	.word	0x0003fb00
    435c:	20002550 	.word	0x20002550
    4360:	0000c4e5 	.word	0x0000c4e5
    4364:	00006461 	.word	0x00006461
    4368:	000064a7 	.word	0x000064a7
    436c:	000064f5 	.word	0x000064f5
    4370:	0000c569 	.word	0x0000c569
    4374:	0000c754 	.word	0x0000c754
    4378:	20002570 	.word	0x20002570
    437c:	20002590 	.word	0x20002590
    4380:	0000c75c 	.word	0x0000c75c
    4384:	200025b0 	.word	0x200025b0
    4388:	00005bfd 	.word	0x00005bfd
    438c:	00006a71 	.word	0x00006a71
    4390:	00000dac 	.word	0x00000dac
    4394:	00007eb1 	.word	0x00007eb1

00004398 <acces_ip>:

BYTE acces_ip(BYTE n_port)//True-1,F-0;
{
    4398:	b580      	push	{r7, lr}
    439a:	b084      	sub	sp, #16
    439c:	af00      	add	r7, sp, #0
    439e:	0002      	movs	r2, r0
    43a0:	1dfb      	adds	r3, r7, #7
    43a2:	701a      	strb	r2, [r3, #0]
	BYTE ch = 0;
    43a4:	230f      	movs	r3, #15
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2200      	movs	r2, #0
    43aa:	701a      	strb	r2, [r3, #0]
	if		(SRAV(4, &cfg_1.access[n_port].ip[0], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	781a      	ldrb	r2, [r3, #0]
    43b0:	0013      	movs	r3, r2
    43b2:	00db      	lsls	r3, r3, #3
    43b4:	189b      	adds	r3, r3, r2
    43b6:	005b      	lsls	r3, r3, #1
    43b8:	3368      	adds	r3, #104	; 0x68
    43ba:	001a      	movs	r2, r3
    43bc:	4b3e      	ldr	r3, [pc, #248]	; (44b8 <acces_ip+0x120>)
    43be:	18d3      	adds	r3, r2, r3
    43c0:	1d19      	adds	r1, r3, #4
    43c2:	1dfb      	adds	r3, r7, #7
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	3301      	adds	r3, #1
    43c8:	4a3c      	ldr	r2, [pc, #240]	; (44bc <acces_ip+0x124>)
    43ca:	435a      	muls	r2, r3
    43cc:	4b3c      	ldr	r3, [pc, #240]	; (44c0 <acces_ip+0x128>)
    43ce:	18d3      	adds	r3, r2, r3
    43d0:	001a      	movs	r2, r3
    43d2:	2004      	movs	r0, #4
    43d4:	4b3b      	ldr	r3, [pc, #236]	; (44c4 <acces_ip+0x12c>)
    43d6:	4798      	blx	r3
    43d8:	1e03      	subs	r3, r0, #0
    43da:	d007      	beq.n	43ec <acces_ip+0x54>
    43dc:	230f      	movs	r3, #15
    43de:	18fb      	adds	r3, r7, r3
    43e0:	781a      	ldrb	r2, [r3, #0]
    43e2:	230f      	movs	r3, #15
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	3201      	adds	r2, #1
    43e8:	701a      	strb	r2, [r3, #0]
    43ea:	e05e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[1], eth_sock[n_port+1].ip_addr)) {ch++;}
    43ec:	1dfb      	adds	r3, r7, #7
    43ee:	781a      	ldrb	r2, [r3, #0]
    43f0:	0013      	movs	r3, r2
    43f2:	00db      	lsls	r3, r3, #3
    43f4:	189b      	adds	r3, r3, r2
    43f6:	005b      	lsls	r3, r3, #1
    43f8:	336c      	adds	r3, #108	; 0x6c
    43fa:	001a      	movs	r2, r3
    43fc:	4b2e      	ldr	r3, [pc, #184]	; (44b8 <acces_ip+0x120>)
    43fe:	18d3      	adds	r3, r2, r3
    4400:	1d19      	adds	r1, r3, #4
    4402:	1dfb      	adds	r3, r7, #7
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	3301      	adds	r3, #1
    4408:	4a2c      	ldr	r2, [pc, #176]	; (44bc <acces_ip+0x124>)
    440a:	435a      	muls	r2, r3
    440c:	4b2c      	ldr	r3, [pc, #176]	; (44c0 <acces_ip+0x128>)
    440e:	18d3      	adds	r3, r2, r3
    4410:	001a      	movs	r2, r3
    4412:	2004      	movs	r0, #4
    4414:	4b2b      	ldr	r3, [pc, #172]	; (44c4 <acces_ip+0x12c>)
    4416:	4798      	blx	r3
    4418:	1e03      	subs	r3, r0, #0
    441a:	d007      	beq.n	442c <acces_ip+0x94>
    441c:	230f      	movs	r3, #15
    441e:	18fb      	adds	r3, r7, r3
    4420:	781a      	ldrb	r2, [r3, #0]
    4422:	230f      	movs	r3, #15
    4424:	18fb      	adds	r3, r7, r3
    4426:	3201      	adds	r2, #1
    4428:	701a      	strb	r2, [r3, #0]
    442a:	e03e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[2], eth_sock[n_port+1].ip_addr)) {ch++;}
    442c:	1dfb      	adds	r3, r7, #7
    442e:	781a      	ldrb	r2, [r3, #0]
    4430:	0013      	movs	r3, r2
    4432:	00db      	lsls	r3, r3, #3
    4434:	189b      	adds	r3, r3, r2
    4436:	005b      	lsls	r3, r3, #1
    4438:	3370      	adds	r3, #112	; 0x70
    443a:	001a      	movs	r2, r3
    443c:	4b1e      	ldr	r3, [pc, #120]	; (44b8 <acces_ip+0x120>)
    443e:	18d3      	adds	r3, r2, r3
    4440:	1d19      	adds	r1, r3, #4
    4442:	1dfb      	adds	r3, r7, #7
    4444:	781b      	ldrb	r3, [r3, #0]
    4446:	3301      	adds	r3, #1
    4448:	4a1c      	ldr	r2, [pc, #112]	; (44bc <acces_ip+0x124>)
    444a:	435a      	muls	r2, r3
    444c:	4b1c      	ldr	r3, [pc, #112]	; (44c0 <acces_ip+0x128>)
    444e:	18d3      	adds	r3, r2, r3
    4450:	001a      	movs	r2, r3
    4452:	2004      	movs	r0, #4
    4454:	4b1b      	ldr	r3, [pc, #108]	; (44c4 <acces_ip+0x12c>)
    4456:	4798      	blx	r3
    4458:	1e03      	subs	r3, r0, #0
    445a:	d007      	beq.n	446c <acces_ip+0xd4>
    445c:	230f      	movs	r3, #15
    445e:	18fb      	adds	r3, r7, r3
    4460:	781a      	ldrb	r2, [r3, #0]
    4462:	230f      	movs	r3, #15
    4464:	18fb      	adds	r3, r7, r3
    4466:	3201      	adds	r2, #1
    4468:	701a      	strb	r2, [r3, #0]
    446a:	e01e      	b.n	44aa <acces_ip+0x112>
	else if (SRAV(4, &cfg_1.access[n_port].ip[3], eth_sock[n_port+1].ip_addr)) {ch++;}
    446c:	1dfb      	adds	r3, r7, #7
    446e:	781a      	ldrb	r2, [r3, #0]
    4470:	0013      	movs	r3, r2
    4472:	00db      	lsls	r3, r3, #3
    4474:	189b      	adds	r3, r3, r2
    4476:	005b      	lsls	r3, r3, #1
    4478:	3374      	adds	r3, #116	; 0x74
    447a:	001a      	movs	r2, r3
    447c:	4b0e      	ldr	r3, [pc, #56]	; (44b8 <acces_ip+0x120>)
    447e:	18d3      	adds	r3, r2, r3
    4480:	1d19      	adds	r1, r3, #4
    4482:	1dfb      	adds	r3, r7, #7
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	3301      	adds	r3, #1
    4488:	4a0c      	ldr	r2, [pc, #48]	; (44bc <acces_ip+0x124>)
    448a:	435a      	muls	r2, r3
    448c:	4b0c      	ldr	r3, [pc, #48]	; (44c0 <acces_ip+0x128>)
    448e:	18d3      	adds	r3, r2, r3
    4490:	001a      	movs	r2, r3
    4492:	2004      	movs	r0, #4
    4494:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <acces_ip+0x12c>)
    4496:	4798      	blx	r3
    4498:	1e03      	subs	r3, r0, #0
    449a:	d006      	beq.n	44aa <acces_ip+0x112>
    449c:	230f      	movs	r3, #15
    449e:	18fb      	adds	r3, r7, r3
    44a0:	781a      	ldrb	r2, [r3, #0]
    44a2:	230f      	movs	r3, #15
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	3201      	adds	r2, #1
    44a8:	701a      	strb	r2, [r3, #0]
	return ch;
    44aa:	230f      	movs	r3, #15
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
}
    44b0:	0018      	movs	r0, r3
    44b2:	46bd      	mov	sp, r7
    44b4:	b004      	add	sp, #16
    44b6:	bd80      	pop	{r7, pc}
    44b8:	20003dc0 	.word	0x20003dc0
    44bc:	000005e5 	.word	0x000005e5
    44c0:	200005cc 	.word	0x200005cc
    44c4:	0000493b 	.word	0x0000493b

000044c8 <log_ch>:

void log_ch( )
{
    44c8:	b580      	push	{r7, lr}
    44ca:	4f25      	ldr	r7, [pc, #148]	; (4560 <log_ch+0x98>)
    44cc:	44bd      	add	sp, r7
    44ce:	af00      	add	r7, sp, #0
	WORD ch;
	flash_read(LOGS_ADDR, &ch, 2);
    44d0:	4b24      	ldr	r3, [pc, #144]	; (4564 <log_ch+0x9c>)
    44d2:	18fb      	adds	r3, r7, r3
    44d4:	4824      	ldr	r0, [pc, #144]	; (4568 <log_ch+0xa0>)
    44d6:	2202      	movs	r2, #2
    44d8:	0019      	movs	r1, r3
    44da:	4b24      	ldr	r3, [pc, #144]	; (456c <log_ch+0xa4>)
    44dc:	4798      	blx	r3
	if(ch != 0xFF) {return;}
    44de:	4b21      	ldr	r3, [pc, #132]	; (4564 <log_ch+0x9c>)
    44e0:	18fb      	adds	r3, r7, r3
    44e2:	881b      	ldrh	r3, [r3, #0]
    44e4:	2bff      	cmp	r3, #255	; 0xff
    44e6:	d135      	bne.n	4554 <log_ch+0x8c>
	
	LOG_DATA data;
	data.ptr = 0;
    44e8:	4b21      	ldr	r3, [pc, #132]	; (4570 <log_ch+0xa8>)
    44ea:	4a22      	ldr	r2, [pc, #136]	; (4574 <log_ch+0xac>)
    44ec:	4694      	mov	ip, r2
    44ee:	44bc      	add	ip, r7
    44f0:	4463      	add	r3, ip
    44f2:	2200      	movs	r2, #0
    44f4:	701a      	strb	r2, [r3, #0]
	data.cell[0].inform.indx = 0;
    44f6:	4b1e      	ldr	r3, [pc, #120]	; (4570 <log_ch+0xa8>)
    44f8:	4a1e      	ldr	r2, [pc, #120]	; (4574 <log_ch+0xac>)
    44fa:	4694      	mov	ip, r2
    44fc:	44bc      	add	ip, r7
    44fe:	4463      	add	r3, ip
    4500:	2200      	movs	r2, #0
    4502:	741a      	strb	r2, [r3, #16]
	data.cell[0].times = 0x00000109;
    4504:	4b1a      	ldr	r3, [pc, #104]	; (4570 <log_ch+0xa8>)
    4506:	4a1b      	ldr	r2, [pc, #108]	; (4574 <log_ch+0xac>)
    4508:	4694      	mov	ip, r2
    450a:	44bc      	add	ip, r7
    450c:	4463      	add	r3, ip
    450e:	220a      	movs	r2, #10
    4510:	32ff      	adds	r2, #255	; 0xff
    4512:	60da      	str	r2, [r3, #12]
	data.cell[0].ip = 0x00010009;
    4514:	4b16      	ldr	r3, [pc, #88]	; (4570 <log_ch+0xa8>)
    4516:	4a17      	ldr	r2, [pc, #92]	; (4574 <log_ch+0xac>)
    4518:	4694      	mov	ip, r2
    451a:	44bc      	add	ip, r7
    451c:	4463      	add	r3, ip
    451e:	4a16      	ldr	r2, [pc, #88]	; (4578 <log_ch+0xb0>)
    4520:	609a      	str	r2, [r3, #8]
	data.cell[0].inform.operat_code = 109;
    4522:	4b13      	ldr	r3, [pc, #76]	; (4570 <log_ch+0xa8>)
    4524:	4a13      	ldr	r2, [pc, #76]	; (4574 <log_ch+0xac>)
    4526:	4694      	mov	ip, r2
    4528:	44bc      	add	ip, r7
    452a:	4463      	add	r3, ip
    452c:	226d      	movs	r2, #109	; 0x6d
    452e:	745a      	strb	r2, [r3, #17]
	memset(&data.rsv[0] , 1, 7);
    4530:	1d3b      	adds	r3, r7, #4
    4532:	3301      	adds	r3, #1
    4534:	2207      	movs	r2, #7
    4536:	2101      	movs	r1, #1
    4538:	0018      	movs	r0, r3
    453a:	4b10      	ldr	r3, [pc, #64]	; (457c <log_ch+0xb4>)
    453c:	4798      	blx	r3
	
	log_clear();
    453e:	f000 f8e7 	bl	4710 <log_clear>
	flash_write(LOGS_ADDR,(BYTE*)&data.ptr, 256);
    4542:	2380      	movs	r3, #128	; 0x80
    4544:	005a      	lsls	r2, r3, #1
    4546:	1d3b      	adds	r3, r7, #4
    4548:	4807      	ldr	r0, [pc, #28]	; (4568 <log_ch+0xa0>)
    454a:	0019      	movs	r1, r3
    454c:	4b0c      	ldr	r3, [pc, #48]	; (4580 <log_ch+0xb8>)
    454e:	4798      	blx	r3
	
	return(CFG_OK);
    4550:	46c0      	nop			; (mov r8, r8)
    4552:	e000      	b.n	4556 <log_ch+0x8e>
	if(ch != 0xFF) {return;}
    4554:	46c0      	nop			; (mov r8, r8)
}
    4556:	46bd      	mov	sp, r7
    4558:	4b06      	ldr	r3, [pc, #24]	; (4574 <log_ch+0xac>)
    455a:	449d      	add	sp, r3
    455c:	bd80      	pop	{r7, pc}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	fffff7f8 	.word	0xfffff7f8
    4564:	00000806 	.word	0x00000806
    4568:	0003f300 	.word	0x0003f300
    456c:	000066d5 	.word	0x000066d5
    4570:	fffff7fc 	.word	0xfffff7fc
    4574:	00000808 	.word	0x00000808
    4578:	00010009 	.word	0x00010009
    457c:	0000c569 	.word	0x0000c569
    4580:	000064f5 	.word	0x000064f5

00004584 <log_safe>:

void log_safe(BYTE actv_user_id, DWORD ip, DWORD times, BYTE operat_code)
{
    4584:	b580      	push	{r7, lr}
    4586:	4f59      	ldr	r7, [pc, #356]	; (46ec <log_safe+0x168>)
    4588:	44bd      	add	sp, r7
    458a:	af00      	add	r7, sp, #0
    458c:	60b9      	str	r1, [r7, #8]
    458e:	607a      	str	r2, [r7, #4]
    4590:	0019      	movs	r1, r3
    4592:	4b57      	ldr	r3, [pc, #348]	; (46f0 <log_safe+0x16c>)
    4594:	4a57      	ldr	r2, [pc, #348]	; (46f4 <log_safe+0x170>)
    4596:	4694      	mov	ip, r2
    4598:	44bc      	add	ip, r7
    459a:	4463      	add	r3, ip
    459c:	1c02      	adds	r2, r0, #0
    459e:	701a      	strb	r2, [r3, #0]
    45a0:	4b55      	ldr	r3, [pc, #340]	; (46f8 <log_safe+0x174>)
    45a2:	4a54      	ldr	r2, [pc, #336]	; (46f4 <log_safe+0x170>)
    45a4:	4694      	mov	ip, r2
    45a6:	44bc      	add	ip, r7
    45a8:	4463      	add	r3, ip
    45aa:	1c0a      	adds	r2, r1, #0
    45ac:	701a      	strb	r2, [r3, #0]
	LOG_DATA data;
	BYTE indx;
	flash_read(LOGS_ADDR, &data.ptr, 2048);
    45ae:	2380      	movs	r3, #128	; 0x80
    45b0:	011a      	lsls	r2, r3, #4
    45b2:	2314      	movs	r3, #20
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	4851      	ldr	r0, [pc, #324]	; (46fc <log_safe+0x178>)
    45b8:	0019      	movs	r1, r3
    45ba:	4b51      	ldr	r3, [pc, #324]	; (4700 <log_safe+0x17c>)
    45bc:	4798      	blx	r3
	indx = data.cell[data.ptr].inform.indx;
    45be:	4b51      	ldr	r3, [pc, #324]	; (4704 <log_safe+0x180>)
    45c0:	4a4c      	ldr	r2, [pc, #304]	; (46f4 <log_safe+0x170>)
    45c2:	4694      	mov	ip, r2
    45c4:	44bc      	add	ip, r7
    45c6:	4463      	add	r3, ip
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	0018      	movs	r0, r3
    45cc:	4b4e      	ldr	r3, [pc, #312]	; (4708 <log_safe+0x184>)
    45ce:	18fa      	adds	r2, r7, r3
    45d0:	4b4c      	ldr	r3, [pc, #304]	; (4704 <log_safe+0x180>)
    45d2:	4948      	ldr	r1, [pc, #288]	; (46f4 <log_safe+0x170>)
    45d4:	1879      	adds	r1, r7, r1
    45d6:	18c9      	adds	r1, r1, r3
    45d8:	0003      	movs	r3, r0
    45da:	005b      	lsls	r3, r3, #1
    45dc:	181b      	adds	r3, r3, r0
    45de:	009b      	lsls	r3, r3, #2
    45e0:	18cb      	adds	r3, r1, r3
    45e2:	3310      	adds	r3, #16
    45e4:	781b      	ldrb	r3, [r3, #0]
    45e6:	7013      	strb	r3, [r2, #0]
	data.ptr++;
    45e8:	4b46      	ldr	r3, [pc, #280]	; (4704 <log_safe+0x180>)
    45ea:	4a42      	ldr	r2, [pc, #264]	; (46f4 <log_safe+0x170>)
    45ec:	4694      	mov	ip, r2
    45ee:	44bc      	add	ip, r7
    45f0:	4463      	add	r3, ip
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	3301      	adds	r3, #1
    45f6:	b2da      	uxtb	r2, r3
    45f8:	4b42      	ldr	r3, [pc, #264]	; (4704 <log_safe+0x180>)
    45fa:	493e      	ldr	r1, [pc, #248]	; (46f4 <log_safe+0x170>)
    45fc:	468c      	mov	ip, r1
    45fe:	44bc      	add	ip, r7
    4600:	4463      	add	r3, ip
    4602:	701a      	strb	r2, [r3, #0]
	if (data.ptr > 170)	{data.ptr = 1;}
    4604:	4b3f      	ldr	r3, [pc, #252]	; (4704 <log_safe+0x180>)
    4606:	4a3b      	ldr	r2, [pc, #236]	; (46f4 <log_safe+0x170>)
    4608:	4694      	mov	ip, r2
    460a:	44bc      	add	ip, r7
    460c:	4463      	add	r3, ip
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	2baa      	cmp	r3, #170	; 0xaa
    4612:	d906      	bls.n	4622 <log_safe+0x9e>
    4614:	4b3b      	ldr	r3, [pc, #236]	; (4704 <log_safe+0x180>)
    4616:	4a37      	ldr	r2, [pc, #220]	; (46f4 <log_safe+0x170>)
    4618:	4694      	mov	ip, r2
    461a:	44bc      	add	ip, r7
    461c:	4463      	add	r3, ip
    461e:	2201      	movs	r2, #1
    4620:	701a      	strb	r2, [r3, #0]
	data.cell[data.ptr].ip = ip;
    4622:	4b38      	ldr	r3, [pc, #224]	; (4704 <log_safe+0x180>)
    4624:	4a33      	ldr	r2, [pc, #204]	; (46f4 <log_safe+0x170>)
    4626:	4694      	mov	ip, r2
    4628:	44bc      	add	ip, r7
    462a:	4463      	add	r3, ip
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	0019      	movs	r1, r3
    4630:	4b34      	ldr	r3, [pc, #208]	; (4704 <log_safe+0x180>)
    4632:	4a30      	ldr	r2, [pc, #192]	; (46f4 <log_safe+0x170>)
    4634:	18ba      	adds	r2, r7, r2
    4636:	18d2      	adds	r2, r2, r3
    4638:	000b      	movs	r3, r1
    463a:	005b      	lsls	r3, r3, #1
    463c:	185b      	adds	r3, r3, r1
    463e:	009b      	lsls	r3, r3, #2
    4640:	18d3      	adds	r3, r2, r3
    4642:	3308      	adds	r3, #8
    4644:	68ba      	ldr	r2, [r7, #8]
    4646:	601a      	str	r2, [r3, #0]
	data.cell[data.ptr].times = times;
    4648:	4b2e      	ldr	r3, [pc, #184]	; (4704 <log_safe+0x180>)
    464a:	4a2a      	ldr	r2, [pc, #168]	; (46f4 <log_safe+0x170>)
    464c:	4694      	mov	ip, r2
    464e:	44bc      	add	ip, r7
    4650:	4463      	add	r3, ip
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	0019      	movs	r1, r3
    4656:	4b2b      	ldr	r3, [pc, #172]	; (4704 <log_safe+0x180>)
    4658:	4a26      	ldr	r2, [pc, #152]	; (46f4 <log_safe+0x170>)
    465a:	18ba      	adds	r2, r7, r2
    465c:	18d2      	adds	r2, r2, r3
    465e:	000b      	movs	r3, r1
    4660:	005b      	lsls	r3, r3, #1
    4662:	185b      	adds	r3, r3, r1
    4664:	009b      	lsls	r3, r3, #2
    4666:	18d3      	adds	r3, r2, r3
    4668:	330c      	adds	r3, #12
    466a:	687a      	ldr	r2, [r7, #4]
    466c:	601a      	str	r2, [r3, #0]
	data.cell[data.ptr].inform.indx = indx + 1;
    466e:	4b25      	ldr	r3, [pc, #148]	; (4704 <log_safe+0x180>)
    4670:	4a20      	ldr	r2, [pc, #128]	; (46f4 <log_safe+0x170>)
    4672:	4694      	mov	ip, r2
    4674:	44bc      	add	ip, r7
    4676:	4463      	add	r3, ip
    4678:	781b      	ldrb	r3, [r3, #0]
    467a:	0019      	movs	r1, r3
    467c:	4b22      	ldr	r3, [pc, #136]	; (4708 <log_safe+0x184>)
    467e:	18fb      	adds	r3, r7, r3
    4680:	781b      	ldrb	r3, [r3, #0]
    4682:	3301      	adds	r3, #1
    4684:	b2d8      	uxtb	r0, r3
    4686:	4b1f      	ldr	r3, [pc, #124]	; (4704 <log_safe+0x180>)
    4688:	4a1a      	ldr	r2, [pc, #104]	; (46f4 <log_safe+0x170>)
    468a:	18ba      	adds	r2, r7, r2
    468c:	18d2      	adds	r2, r2, r3
    468e:	000b      	movs	r3, r1
    4690:	005b      	lsls	r3, r3, #1
    4692:	185b      	adds	r3, r3, r1
    4694:	009b      	lsls	r3, r3, #2
    4696:	18d3      	adds	r3, r2, r3
    4698:	3310      	adds	r3, #16
    469a:	1c02      	adds	r2, r0, #0
    469c:	701a      	strb	r2, [r3, #0]
	data.cell[data.ptr].inform.operat_code = operat_code;
    469e:	4b19      	ldr	r3, [pc, #100]	; (4704 <log_safe+0x180>)
    46a0:	4a14      	ldr	r2, [pc, #80]	; (46f4 <log_safe+0x170>)
    46a2:	4694      	mov	ip, r2
    46a4:	44bc      	add	ip, r7
    46a6:	4463      	add	r3, ip
    46a8:	781b      	ldrb	r3, [r3, #0]
    46aa:	0019      	movs	r1, r3
    46ac:	4b15      	ldr	r3, [pc, #84]	; (4704 <log_safe+0x180>)
    46ae:	4a11      	ldr	r2, [pc, #68]	; (46f4 <log_safe+0x170>)
    46b0:	18ba      	adds	r2, r7, r2
    46b2:	18d2      	adds	r2, r2, r3
    46b4:	000b      	movs	r3, r1
    46b6:	005b      	lsls	r3, r3, #1
    46b8:	185b      	adds	r3, r3, r1
    46ba:	009b      	lsls	r3, r3, #2
    46bc:	18d3      	adds	r3, r2, r3
    46be:	3311      	adds	r3, #17
    46c0:	4a0d      	ldr	r2, [pc, #52]	; (46f8 <log_safe+0x174>)
    46c2:	490c      	ldr	r1, [pc, #48]	; (46f4 <log_safe+0x170>)
    46c4:	468c      	mov	ip, r1
    46c6:	44bc      	add	ip, r7
    46c8:	4462      	add	r2, ip
    46ca:	7812      	ldrb	r2, [r2, #0]
    46cc:	701a      	strb	r2, [r3, #0]
	
	log_clear();
    46ce:	f000 f81f 	bl	4710 <log_clear>
	flash_write(LOGS_ADDR, (BYTE*)&data, sizeof(LOG_DATA));
    46d2:	2380      	movs	r3, #128	; 0x80
    46d4:	011a      	lsls	r2, r3, #4
    46d6:	2314      	movs	r3, #20
    46d8:	18fb      	adds	r3, r7, r3
    46da:	4808      	ldr	r0, [pc, #32]	; (46fc <log_safe+0x178>)
    46dc:	0019      	movs	r1, r3
    46de:	4b0b      	ldr	r3, [pc, #44]	; (470c <log_safe+0x188>)
    46e0:	4798      	blx	r3
	
	return(CFG_OK);
    46e2:	46c0      	nop			; (mov r8, r8)
}
    46e4:	46bd      	mov	sp, r7
    46e6:	4b03      	ldr	r3, [pc, #12]	; (46f4 <log_safe+0x170>)
    46e8:	449d      	add	sp, r3
    46ea:	bd80      	pop	{r7, pc}
    46ec:	fffff7e8 	.word	0xfffff7e8
    46f0:	fffff7f7 	.word	0xfffff7f7
    46f4:	00000818 	.word	0x00000818
    46f8:	fffff7f6 	.word	0xfffff7f6
    46fc:	0003f300 	.word	0x0003f300
    4700:	000066d5 	.word	0x000066d5
    4704:	fffff7fc 	.word	0xfffff7fc
    4708:	00000817 	.word	0x00000817
    470c:	000064f5 	.word	0x000064f5

00004710 <log_clear>:

void log_clear()
{
    4710:	b580      	push	{r7, lr}
    4712:	b082      	sub	sp, #8
    4714:	af00      	add	r7, sp, #0
	for (BYTE i = 0; i < 8; i++)	
    4716:	1dfb      	adds	r3, r7, #7
    4718:	2200      	movs	r2, #0
    471a:	701a      	strb	r2, [r3, #0]
    471c:	e01a      	b.n	4754 <log_clear+0x44>
	{
		if(!flash_empty(LOGS_ADDR + (i * 256), 256))	
    471e:	1dfb      	adds	r3, r7, #7
    4720:	781b      	ldrb	r3, [r3, #0]
    4722:	021b      	lsls	r3, r3, #8
    4724:	4a0f      	ldr	r2, [pc, #60]	; (4764 <log_clear+0x54>)
    4726:	189a      	adds	r2, r3, r2
    4728:	2380      	movs	r3, #128	; 0x80
    472a:	005b      	lsls	r3, r3, #1
    472c:	0019      	movs	r1, r3
    472e:	0010      	movs	r0, r2
    4730:	4b0d      	ldr	r3, [pc, #52]	; (4768 <log_clear+0x58>)
    4732:	4798      	blx	r3
    4734:	1e03      	subs	r3, r0, #0
    4736:	d108      	bne.n	474a <log_clear+0x3a>
		{flash_erase_page(LOGS_ADDR + (i * 256));}	
    4738:	1dfb      	adds	r3, r7, #7
    473a:	781b      	ldrb	r3, [r3, #0]
    473c:	021b      	lsls	r3, r3, #8
    473e:	4a09      	ldr	r2, [pc, #36]	; (4764 <log_clear+0x54>)
    4740:	4694      	mov	ip, r2
    4742:	4463      	add	r3, ip
    4744:	0018      	movs	r0, r3
    4746:	4b09      	ldr	r3, [pc, #36]	; (476c <log_clear+0x5c>)
    4748:	4798      	blx	r3
	for (BYTE i = 0; i < 8; i++)	
    474a:	1dfb      	adds	r3, r7, #7
    474c:	781a      	ldrb	r2, [r3, #0]
    474e:	1dfb      	adds	r3, r7, #7
    4750:	3201      	adds	r2, #1
    4752:	701a      	strb	r2, [r3, #0]
    4754:	1dfb      	adds	r3, r7, #7
    4756:	781b      	ldrb	r3, [r3, #0]
    4758:	2b07      	cmp	r3, #7
    475a:	d9e0      	bls.n	471e <log_clear+0xe>
	}
}
    475c:	46c0      	nop			; (mov r8, r8)
    475e:	46bd      	mov	sp, r7
    4760:	b002      	add	sp, #8
    4762:	bd80      	pop	{r7, pc}
    4764:	0003f300 	.word	0x0003f300
    4768:	00006461 	.word	0x00006461
    476c:	000064a7 	.word	0x000064a7

00004770 <random_gen>:
#include "def.h"

void random_gen(BYTE size,BYTE* ptr)//size, place for write
{
    4770:	b590      	push	{r4, r7, lr}
    4772:	b085      	sub	sp, #20
    4774:	af00      	add	r7, sp, #0
    4776:	0002      	movs	r2, r0
    4778:	6039      	str	r1, [r7, #0]
    477a:	1dfb      	adds	r3, r7, #7
    477c:	701a      	strb	r2, [r3, #0]
	BYTE tc3 = 0;
    477e:	230e      	movs	r3, #14
    4780:	18fb      	adds	r3, r7, r3
    4782:	2200      	movs	r2, #0
    4784:	701a      	strb	r2, [r3, #0]
	for (BYTE i = 0; i < size; i++) 	{*ptr++ = ((tc3_cnt + 3) ^ (i + 1)) % 0xFF;}
    4786:	230f      	movs	r3, #15
    4788:	18fb      	adds	r3, r7, r3
    478a:	2200      	movs	r2, #0
    478c:	701a      	strb	r2, [r3, #0]
    478e:	e018      	b.n	47c2 <random_gen+0x52>
    4790:	683c      	ldr	r4, [r7, #0]
    4792:	1c63      	adds	r3, r4, #1
    4794:	603b      	str	r3, [r7, #0]
    4796:	4b10      	ldr	r3, [pc, #64]	; (47d8 <random_gen+0x68>)
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	3303      	adds	r3, #3
    479c:	220f      	movs	r2, #15
    479e:	18ba      	adds	r2, r7, r2
    47a0:	7812      	ldrb	r2, [r2, #0]
    47a2:	3201      	adds	r2, #1
    47a4:	405a      	eors	r2, r3
    47a6:	4b0d      	ldr	r3, [pc, #52]	; (47dc <random_gen+0x6c>)
    47a8:	21ff      	movs	r1, #255	; 0xff
    47aa:	0010      	movs	r0, r2
    47ac:	4798      	blx	r3
    47ae:	000b      	movs	r3, r1
    47b0:	b2db      	uxtb	r3, r3
    47b2:	7023      	strb	r3, [r4, #0]
    47b4:	230f      	movs	r3, #15
    47b6:	18fb      	adds	r3, r7, r3
    47b8:	781a      	ldrb	r2, [r3, #0]
    47ba:	230f      	movs	r3, #15
    47bc:	18fb      	adds	r3, r7, r3
    47be:	3201      	adds	r2, #1
    47c0:	701a      	strb	r2, [r3, #0]
    47c2:	230f      	movs	r3, #15
    47c4:	18fa      	adds	r2, r7, r3
    47c6:	1dfb      	adds	r3, r7, #7
    47c8:	7812      	ldrb	r2, [r2, #0]
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	429a      	cmp	r2, r3
    47ce:	d3df      	bcc.n	4790 <random_gen+0x20>
}
    47d0:	46c0      	nop			; (mov r8, r8)
    47d2:	46bd      	mov	sp, r7
    47d4:	b005      	add	sp, #20
    47d6:	bd90      	pop	{r4, r7, pc}
    47d8:	20000470 	.word	0x20000470
    47dc:	0000ae01 	.word	0x0000ae01

000047e0 <num_to_byte>:
BYTE num_to_byte(DWORD num, BYTE len, BYTE* dst, BYTE side)//write number as bite line
{
    47e0:	b580      	push	{r7, lr}
    47e2:	b086      	sub	sp, #24
    47e4:	af00      	add	r7, sp, #0
    47e6:	60f8      	str	r0, [r7, #12]
    47e8:	0008      	movs	r0, r1
    47ea:	607a      	str	r2, [r7, #4]
    47ec:	0019      	movs	r1, r3
    47ee:	230b      	movs	r3, #11
    47f0:	18fb      	adds	r3, r7, r3
    47f2:	1c02      	adds	r2, r0, #0
    47f4:	701a      	strb	r2, [r3, #0]
    47f6:	230a      	movs	r3, #10
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	1c0a      	adds	r2, r1, #0
    47fc:	701a      	strb	r2, [r3, #0]
	if((len != W_LEN)    &&  (len != DW_LEN))         {return LEN_ERR;}
    47fe:	230b      	movs	r3, #11
    4800:	18fb      	adds	r3, r7, r3
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	2b02      	cmp	r3, #2
    4806:	d006      	beq.n	4816 <num_to_byte+0x36>
    4808:	230b      	movs	r3, #11
    480a:	18fb      	adds	r3, r7, r3
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	2b04      	cmp	r3, #4
    4810:	d001      	beq.n	4816 <num_to_byte+0x36>
    4812:	2365      	movs	r3, #101	; 0x65
    4814:	e042      	b.n	489c <num_to_byte+0xbc>
	if((side != L_SIDE)  &&  (side != R_SIDE))     {return SIDE_ERR;}
    4816:	230a      	movs	r3, #10
    4818:	18fb      	adds	r3, r7, r3
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	2b01      	cmp	r3, #1
    481e:	d006      	beq.n	482e <num_to_byte+0x4e>
    4820:	230a      	movs	r3, #10
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	2b00      	cmp	r3, #0
    4828:	d001      	beq.n	482e <num_to_byte+0x4e>
    482a:	2366      	movs	r3, #102	; 0x66
    482c:	e036      	b.n	489c <num_to_byte+0xbc>

	for (BYTE i = 0; i < len; i++)
    482e:	2317      	movs	r3, #23
    4830:	18fb      	adds	r3, r7, r3
    4832:	2200      	movs	r2, #0
    4834:	701a      	strb	r2, [r3, #0]
    4836:	e028      	b.n	488a <num_to_byte+0xaa>
	{
		if(side)    {*dst = num >> (( 8 * (len - 1 ) ) - ( i * 8 ));}
    4838:	230a      	movs	r3, #10
    483a:	18fb      	adds	r3, r7, r3
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d00f      	beq.n	4862 <num_to_byte+0x82>
    4842:	230b      	movs	r3, #11
    4844:	18fb      	adds	r3, r7, r3
    4846:	781b      	ldrb	r3, [r3, #0]
    4848:	1e5a      	subs	r2, r3, #1
    484a:	2317      	movs	r3, #23
    484c:	18fb      	adds	r3, r7, r3
    484e:	781b      	ldrb	r3, [r3, #0]
    4850:	1ad3      	subs	r3, r2, r3
    4852:	00db      	lsls	r3, r3, #3
    4854:	68fa      	ldr	r2, [r7, #12]
    4856:	40da      	lsrs	r2, r3
    4858:	0013      	movs	r3, r2
    485a:	b2da      	uxtb	r2, r3
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	701a      	strb	r2, [r3, #0]
    4860:	e009      	b.n	4876 <num_to_byte+0x96>
		else        {*dst = num >> ( i * 8 );}
    4862:	2317      	movs	r3, #23
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
    4868:	00db      	lsls	r3, r3, #3
    486a:	68fa      	ldr	r2, [r7, #12]
    486c:	40da      	lsrs	r2, r3
    486e:	0013      	movs	r3, r2
    4870:	b2da      	uxtb	r2, r3
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	701a      	strb	r2, [r3, #0]
		dst++;
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	3301      	adds	r3, #1
    487a:	607b      	str	r3, [r7, #4]
	for (BYTE i = 0; i < len; i++)
    487c:	2317      	movs	r3, #23
    487e:	18fb      	adds	r3, r7, r3
    4880:	781a      	ldrb	r2, [r3, #0]
    4882:	2317      	movs	r3, #23
    4884:	18fb      	adds	r3, r7, r3
    4886:	3201      	adds	r2, #1
    4888:	701a      	strb	r2, [r3, #0]
    488a:	2317      	movs	r3, #23
    488c:	18fa      	adds	r2, r7, r3
    488e:	230b      	movs	r3, #11
    4890:	18fb      	adds	r3, r7, r3
    4892:	7812      	ldrb	r2, [r2, #0]
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	429a      	cmp	r2, r3
    4898:	d3ce      	bcc.n	4838 <num_to_byte+0x58>
	}
	return SUCCESS;
    489a:	2300      	movs	r3, #0
}
    489c:	0018      	movs	r0, r3
    489e:	46bd      	mov	sp, r7
    48a0:	b006      	add	sp, #24
    48a2:	bd80      	pop	{r7, pc}

000048a4 <num_aus_byte>:
DWORD num_aus_byte(BYTE len, BYTE* src, BYTE side)//read bite line as number
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b084      	sub	sp, #16
    48a8:	af00      	add	r7, sp, #0
    48aa:	6039      	str	r1, [r7, #0]
    48ac:	0011      	movs	r1, r2
    48ae:	1dfb      	adds	r3, r7, #7
    48b0:	1c02      	adds	r2, r0, #0
    48b2:	701a      	strb	r2, [r3, #0]
    48b4:	1dbb      	adds	r3, r7, #6
    48b6:	1c0a      	adds	r2, r1, #0
    48b8:	701a      	strb	r2, [r3, #0]
	DWORD num = 0;
    48ba:	2300      	movs	r3, #0
    48bc:	60fb      	str	r3, [r7, #12]
	for (BYTE i = 0; i < len;i++)
    48be:	230b      	movs	r3, #11
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	2200      	movs	r2, #0
    48c4:	701a      	strb	r2, [r3, #0]
    48c6:	e02c      	b.n	4922 <num_aus_byte+0x7e>
	{
		if(side)    {num += *src << (((len - 1) * 8) - (i * 8));}
    48c8:	1dbb      	adds	r3, r7, #6
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d011      	beq.n	48f4 <num_aus_byte+0x50>
    48d0:	683b      	ldr	r3, [r7, #0]
    48d2:	781b      	ldrb	r3, [r3, #0]
    48d4:	0019      	movs	r1, r3
    48d6:	1dfb      	adds	r3, r7, #7
    48d8:	781b      	ldrb	r3, [r3, #0]
    48da:	1e5a      	subs	r2, r3, #1
    48dc:	230b      	movs	r3, #11
    48de:	18fb      	adds	r3, r7, r3
    48e0:	781b      	ldrb	r3, [r3, #0]
    48e2:	1ad3      	subs	r3, r2, r3
    48e4:	00db      	lsls	r3, r3, #3
    48e6:	4099      	lsls	r1, r3
    48e8:	000b      	movs	r3, r1
    48ea:	001a      	movs	r2, r3
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	189b      	adds	r3, r3, r2
    48f0:	60fb      	str	r3, [r7, #12]
    48f2:	e00c      	b.n	490e <num_aus_byte+0x6a>
		else        {num += *src << ( i * 8 );}
    48f4:	683b      	ldr	r3, [r7, #0]
    48f6:	781b      	ldrb	r3, [r3, #0]
    48f8:	001a      	movs	r2, r3
    48fa:	230b      	movs	r3, #11
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	781b      	ldrb	r3, [r3, #0]
    4900:	00db      	lsls	r3, r3, #3
    4902:	409a      	lsls	r2, r3
    4904:	0013      	movs	r3, r2
    4906:	001a      	movs	r2, r3
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	189b      	adds	r3, r3, r2
    490c:	60fb      	str	r3, [r7, #12]
		src++;
    490e:	683b      	ldr	r3, [r7, #0]
    4910:	3301      	adds	r3, #1
    4912:	603b      	str	r3, [r7, #0]
	for (BYTE i = 0; i < len;i++)
    4914:	230b      	movs	r3, #11
    4916:	18fb      	adds	r3, r7, r3
    4918:	781a      	ldrb	r2, [r3, #0]
    491a:	230b      	movs	r3, #11
    491c:	18fb      	adds	r3, r7, r3
    491e:	3201      	adds	r2, #1
    4920:	701a      	strb	r2, [r3, #0]
    4922:	230b      	movs	r3, #11
    4924:	18fa      	adds	r2, r7, r3
    4926:	1dfb      	adds	r3, r7, #7
    4928:	7812      	ldrb	r2, [r2, #0]
    492a:	781b      	ldrb	r3, [r3, #0]
    492c:	429a      	cmp	r2, r3
    492e:	d3cb      	bcc.n	48c8 <num_aus_byte+0x24>
	}
	return num;
    4930:	68fb      	ldr	r3, [r7, #12]
}
    4932:	0018      	movs	r0, r3
    4934:	46bd      	mov	sp, r7
    4936:	b004      	add	sp, #16
    4938:	bd80      	pop	{r7, pc}

0000493a <SRAV>:

BYTE SRAV(BYTE len, BYTE* buf1, BYTE* buf2)//True-1,F-0;
{	for(BYTE i = 0; i < len; i++)	
    493a:	b580      	push	{r7, lr}
    493c:	b086      	sub	sp, #24
    493e:	af00      	add	r7, sp, #0
    4940:	60b9      	str	r1, [r7, #8]
    4942:	607a      	str	r2, [r7, #4]
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	1c02      	adds	r2, r0, #0
    494a:	701a      	strb	r2, [r3, #0]
    494c:	2317      	movs	r3, #23
    494e:	18fb      	adds	r3, r7, r3
    4950:	2200      	movs	r2, #0
    4952:	701a      	strb	r2, [r3, #0]
    4954:	e012      	b.n	497c <SRAV+0x42>
	{	
		if(*buf1++ != *buf2++) 
    4956:	68bb      	ldr	r3, [r7, #8]
    4958:	1c5a      	adds	r2, r3, #1
    495a:	60ba      	str	r2, [r7, #8]
    495c:	781a      	ldrb	r2, [r3, #0]
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	1c59      	adds	r1, r3, #1
    4962:	6079      	str	r1, [r7, #4]
    4964:	781b      	ldrb	r3, [r3, #0]
    4966:	429a      	cmp	r2, r3
    4968:	d001      	beq.n	496e <SRAV+0x34>
		{return FALSE;}	
    496a:	2300      	movs	r3, #0
    496c:	e00f      	b.n	498e <SRAV+0x54>
{	for(BYTE i = 0; i < len; i++)	
    496e:	2317      	movs	r3, #23
    4970:	18fb      	adds	r3, r7, r3
    4972:	781a      	ldrb	r2, [r3, #0]
    4974:	2317      	movs	r3, #23
    4976:	18fb      	adds	r3, r7, r3
    4978:	3201      	adds	r2, #1
    497a:	701a      	strb	r2, [r3, #0]
    497c:	2317      	movs	r3, #23
    497e:	18fa      	adds	r2, r7, r3
    4980:	230f      	movs	r3, #15
    4982:	18fb      	adds	r3, r7, r3
    4984:	7812      	ldrb	r2, [r2, #0]
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	429a      	cmp	r2, r3
    498a:	d3e4      	bcc.n	4956 <SRAV+0x1c>
	}
	return TRUE;	
    498c:	2301      	movs	r3, #1
    498e:	0018      	movs	r0, r3
    4990:	46bd      	mov	sp, r7
    4992:	b006      	add	sp, #24
    4994:	bd80      	pop	{r7, pc}
    4996:	46c0      	nop			; (mov r8, r8)

00004998 <cmd_process>:

#define CM2_STATUS_PACK 0x02
#define UID_STATUS_PACK 0x8002

void cmd_process(void)
{
    4998:	b580      	push	{r7, lr}
    499a:	af00      	add	r7, sp, #0
	cmd_common_process ();
    499c:	f000 f805 	bl	49aa <cmd_common_process>
	cmd_usart_process ();
    49a0:	f000 fe84 	bl	56ac <cmd_usart_process>
}
    49a4:	46c0      	nop			; (mov r8, r8)
    49a6:	46bd      	mov	sp, r7
    49a8:	bd80      	pop	{r7, pc}

000049aa <cmd_common_process>:


void cmd_common_process (void)
{
    49aa:	b590      	push	{r4, r7, lr}
    49ac:	b085      	sub	sp, #20
    49ae:	af00      	add	r7, sp, #0
	WORD	size	= 0;
    49b0:	230e      	movs	r3, #14
    49b2:	18fb      	adds	r3, r7, r3
    49b4:	2200      	movs	r2, #0
    49b6:	801a      	strh	r2, [r3, #0]
	WORD	addr	= 0;
    49b8:	1d3b      	adds	r3, r7, #4
    49ba:	2200      	movs	r2, #0
    49bc:	801a      	strh	r2, [r3, #0]
	WORD	cnt		= 0;
    49be:	230c      	movs	r3, #12
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	2200      	movs	r2, #0
    49c4:	801a      	strh	r2, [r3, #0]
	WORD	wn		= 0;
    49c6:	230a      	movs	r3, #10
    49c8:	18fb      	adds	r3, r7, r3
    49ca:	2200      	movs	r2, #0
    49cc:	801a      	strh	r2, [r3, #0]
	WORD	cs		= 0;
    49ce:	1cbb      	adds	r3, r7, #2
    49d0:	2200      	movs	r2, #0
    49d2:	801a      	strh	r2, [r3, #0]
	BYTE	i		= 0;
    49d4:	2309      	movs	r3, #9
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	2200      	movs	r2, #0
    49da:	701a      	strb	r2, [r3, #0]
	WORD	ixo		= 0;
    49dc:	003b      	movs	r3, r7
    49de:	2200      	movs	r2, #0
    49e0:	801a      	strh	r2, [r3, #0]
	
	if (log_stat == 1)	
    49e2:	4b98      	ldr	r3, [pc, #608]	; (4c44 <cmd_common_process+0x29a>)
    49e4:	781b      	ldrb	r3, [r3, #0]
    49e6:	b2db      	uxtb	r3, r3
    49e8:	2b01      	cmp	r3, #1
    49ea:	d10c      	bne.n	4a06 <cmd_common_process+0x5c>
	{
		logout_timer++;
    49ec:	4b96      	ldr	r3, [pc, #600]	; (4c48 <cmd_common_process+0x29e>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	1c5a      	adds	r2, r3, #1
    49f2:	4b95      	ldr	r3, [pc, #596]	; (4c48 <cmd_common_process+0x29e>)
    49f4:	601a      	str	r2, [r3, #0]
		if (logout_timer == 0xE2F0)	
    49f6:	4b94      	ldr	r3, [pc, #592]	; (4c48 <cmd_common_process+0x29e>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	4a94      	ldr	r2, [pc, #592]	; (4c4c <cmd_common_process+0x2a2>)
    49fc:	4293      	cmp	r3, r2
    49fe:	d102      	bne.n	4a06 <cmd_common_process+0x5c>
		{log_stat = 0;}
    4a00:	4b90      	ldr	r3, [pc, #576]	; (4c44 <cmd_common_process+0x29a>)
    4a02:	2200      	movs	r2, #0
    4a04:	701a      	strb	r2, [r3, #0]
	}
			
	if(eth_sock[0].r_status==FALSE) {return;}
    4a06:	4b92      	ldr	r3, [pc, #584]	; (4c50 <cmd_common_process+0x2a6>)
    4a08:	4a92      	ldr	r2, [pc, #584]	; (4c54 <cmd_common_process+0x2aa>)
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d101      	bne.n	4a14 <cmd_common_process+0x6a>
    4a10:	f000 fdf9 	bl	5606 <cmd_common_process+0xc5c>
	eth_sock[0].r_status=FALSE;
    4a14:	4b8e      	ldr	r3, [pc, #568]	; (4c50 <cmd_common_process+0x2a6>)
    4a16:	4a8f      	ldr	r2, [pc, #572]	; (4c54 <cmd_common_process+0x2aa>)
    4a18:	2100      	movs	r1, #0
    4a1a:	5499      	strb	r1, [r3, r2]

	size=((eth_sock[0].len[0]<<8) | (eth_sock[0].len[1]));
    4a1c:	4b8c      	ldr	r3, [pc, #560]	; (4c50 <cmd_common_process+0x2a6>)
    4a1e:	799b      	ldrb	r3, [r3, #6]
    4a20:	021b      	lsls	r3, r3, #8
    4a22:	b21a      	sxth	r2, r3
    4a24:	4b8a      	ldr	r3, [pc, #552]	; (4c50 <cmd_common_process+0x2a6>)
    4a26:	79db      	ldrb	r3, [r3, #7]
    4a28:	b21b      	sxth	r3, r3
    4a2a:	4313      	orrs	r3, r2
    4a2c:	b21a      	sxth	r2, r3
    4a2e:	230e      	movs	r3, #14
    4a30:	18fb      	adds	r3, r7, r3
    4a32:	801a      	strh	r2, [r3, #0]
	
	if(size  >    sizeof(cbuf))	{size=sizeof(cbuf);}
    4a34:	230e      	movs	r3, #14
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	881a      	ldrh	r2, [r3, #0]
    4a3a:	2396      	movs	r3, #150	; 0x96
    4a3c:	005b      	lsls	r3, r3, #1
    4a3e:	429a      	cmp	r2, r3
    4a40:	d904      	bls.n	4a4c <cmd_common_process+0xa2>
    4a42:	230e      	movs	r3, #14
    4a44:	18fb      	adds	r3, r7, r3
    4a46:	2296      	movs	r2, #150	; 0x96
    4a48:	0052      	lsls	r2, r2, #1
    4a4a:	801a      	strh	r2, [r3, #0]
	if(size	 <    5			  )	{ return; }
    4a4c:	230e      	movs	r3, #14
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	881b      	ldrh	r3, [r3, #0]
    4a52:	2b04      	cmp	r3, #4
    4a54:	d801      	bhi.n	4a5a <cmd_common_process+0xb0>
    4a56:	f000 fdd8 	bl	560a <cmd_common_process+0xc60>
	
	memcpy(cbuf,(BYTE*)&eth_sock[0].data,size);
    4a5a:	230e      	movs	r3, #14
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	881a      	ldrh	r2, [r3, #0]
    4a60:	497d      	ldr	r1, [pc, #500]	; (4c58 <cmd_common_process+0x2ae>)
    4a62:	4b7e      	ldr	r3, [pc, #504]	; (4c5c <cmd_common_process+0x2b2>)
    4a64:	0018      	movs	r0, r3
    4a66:	4b7e      	ldr	r3, [pc, #504]	; (4c60 <cmd_common_process+0x2b6>)
    4a68:	4798      	blx	r3

	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    4a6a:	230e      	movs	r3, #14
    4a6c:	18fb      	adds	r3, r7, r3
    4a6e:	881a      	ldrh	r2, [r3, #0]
    4a70:	4b7a      	ldr	r3, [pc, #488]	; (4c5c <cmd_common_process+0x2b2>)
    4a72:	0011      	movs	r1, r2
    4a74:	0018      	movs	r0, r3
    4a76:	4b7b      	ldr	r3, [pc, #492]	; (4c64 <cmd_common_process+0x2ba>)
    4a78:	4798      	blx	r3
    4a7a:	1e03      	subs	r3, r0, #0
    4a7c:	d001      	beq.n	4a82 <cmd_common_process+0xd8>
    4a7e:	f000 fdc6 	bl	560e <cmd_common_process+0xc64>
	
	addr  = *(__packed WORD*)(cbuf+0);      wn=+sizeof(WORD);
    4a82:	4a76      	ldr	r2, [pc, #472]	; (4c5c <cmd_common_process+0x2b2>)
    4a84:	1d3b      	adds	r3, r7, #4
    4a86:	8812      	ldrh	r2, [r2, #0]
    4a88:	801a      	strh	r2, [r3, #0]
    4a8a:	230a      	movs	r3, #10
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	2202      	movs	r2, #2
    4a90:	801a      	strh	r2, [r3, #0]

	if(addr !=  0){return;}
    4a92:	1d3b      	adds	r3, r7, #4
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d001      	beq.n	4a9e <cmd_common_process+0xf4>
    4a9a:	f000 fdba 	bl	5612 <cmd_common_process+0xc68>
	wn++;//cmd
    4a9e:	230a      	movs	r3, #10
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	881a      	ldrh	r2, [r3, #0]
    4aa4:	230a      	movs	r3, #10
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	3201      	adds	r2, #1
    4aaa:	801a      	strh	r2, [r3, #0]
//logging
	if (!SRAV(4, &eth_sock[0].ip_addr[0], &ip_addrs)) {log_stat = 0;}
    4aac:	4a6e      	ldr	r2, [pc, #440]	; (4c68 <cmd_common_process+0x2be>)
    4aae:	4b68      	ldr	r3, [pc, #416]	; (4c50 <cmd_common_process+0x2a6>)
    4ab0:	0019      	movs	r1, r3
    4ab2:	2004      	movs	r0, #4
    4ab4:	4b6d      	ldr	r3, [pc, #436]	; (4c6c <cmd_common_process+0x2c2>)
    4ab6:	4798      	blx	r3
    4ab8:	1e03      	subs	r3, r0, #0
    4aba:	d102      	bne.n	4ac2 <cmd_common_process+0x118>
    4abc:	4b61      	ldr	r3, [pc, #388]	; (4c44 <cmd_common_process+0x29a>)
    4abe:	2200      	movs	r2, #0
    4ac0:	701a      	strb	r2, [r3, #0]
	if ((cbuf[2] != 0x20) && (!log_stat)) {return 0;}
    4ac2:	4b66      	ldr	r3, [pc, #408]	; (4c5c <cmd_common_process+0x2b2>)
    4ac4:	789b      	ldrb	r3, [r3, #2]
    4ac6:	2b20      	cmp	r3, #32
    4ac8:	d006      	beq.n	4ad8 <cmd_common_process+0x12e>
    4aca:	4b5e      	ldr	r3, [pc, #376]	; (4c44 <cmd_common_process+0x29a>)
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d101      	bne.n	4ad8 <cmd_common_process+0x12e>
    4ad4:	f000 fd9f 	bl	5616 <cmd_common_process+0xc6c>
	
	
	
	
	switch(cbuf[2])
    4ad8:	4b60      	ldr	r3, [pc, #384]	; (4c5c <cmd_common_process+0x2b2>)
    4ada:	789b      	ldrb	r3, [r3, #2]
    4adc:	2b29      	cmp	r3, #41	; 0x29
    4ade:	d901      	bls.n	4ae4 <cmd_common_process+0x13a>
    4ae0:	f000 fd9b 	bl	561a <cmd_common_process+0xc70>
    4ae4:	009a      	lsls	r2, r3, #2
    4ae6:	4b62      	ldr	r3, [pc, #392]	; (4c70 <cmd_common_process+0x2c6>)
    4ae8:	18d3      	adds	r3, r2, r3
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	469f      	mov	pc, r3
	{
		case 0x00:	if(size  !=  9) { return; }
    4aee:	230e      	movs	r3, #14
    4af0:	18fb      	adds	r3, r7, r3
    4af2:	881b      	ldrh	r3, [r3, #0]
    4af4:	2b09      	cmp	r3, #9
    4af6:	d001      	beq.n	4afc <cmd_common_process+0x152>
    4af8:	f000 fd91 	bl	561e <cmd_common_process+0xc74>
					rsv_time = num_aus_byte(DW_LEN, &cbuf[3], L_SIDE);
    4afc:	4b5d      	ldr	r3, [pc, #372]	; (4c74 <cmd_common_process+0x2ca>)
    4afe:	2201      	movs	r2, #1
    4b00:	0019      	movs	r1, r3
    4b02:	2004      	movs	r0, #4
    4b04:	4b5c      	ldr	r3, [pc, #368]	; (4c78 <cmd_common_process+0x2ce>)
    4b06:	4798      	blx	r3
    4b08:	0002      	movs	r2, r0
    4b0a:	4b5c      	ldr	r3, [pc, #368]	; (4c7c <cmd_common_process+0x2d2>)
    4b0c:	601a      	str	r2, [r3, #0]
					logout_timer = 0;
    4b0e:	4b4e      	ldr	r3, [pc, #312]	; (4c48 <cmd_common_process+0x29e>)
    4b10:	2200      	movs	r2, #0
    4b12:	601a      	str	r2, [r3, #0]
					send_admin();
    4b14:	230a      	movs	r3, #10
    4b16:	18fb      	adds	r3, r7, r3
    4b18:	881b      	ldrh	r3, [r3, #0]
    4b1a:	4a50      	ldr	r2, [pc, #320]	; (4c5c <cmd_common_process+0x2b2>)
    4b1c:	2101      	movs	r1, #1
    4b1e:	54d1      	strb	r1, [r2, r3]
    4b20:	230a      	movs	r3, #10
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	881a      	ldrh	r2, [r3, #0]
    4b26:	230a      	movs	r3, #10
    4b28:	18fb      	adds	r3, r7, r3
    4b2a:	3201      	adds	r2, #1
    4b2c:	801a      	strh	r2, [r3, #0]
		break;
    4b2e:	f000 fd1c 	bl	556a <cmd_common_process+0xbc0>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG		
    4b32:	230e      	movs	r3, #14
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	881b      	ldrh	r3, [r3, #0]
    4b38:	2b06      	cmp	r3, #6
    4b3a:	d001      	beq.n	4b40 <cmd_common_process+0x196>
    4b3c:	f000 fd71 	bl	5622 <cmd_common_process+0xc78>
					logout_timer = 0;
    4b40:	4b41      	ldr	r3, [pc, #260]	; (4c48 <cmd_common_process+0x29e>)
    4b42:	2200      	movs	r2, #0
    4b44:	601a      	str	r2, [r3, #0]
					if(cbuf[wn]==0x01)
    4b46:	230a      	movs	r3, #10
    4b48:	18fb      	adds	r3, r7, r3
    4b4a:	881b      	ldrh	r3, [r3, #0]
    4b4c:	4a43      	ldr	r2, [pc, #268]	; (4c5c <cmd_common_process+0x2b2>)
    4b4e:	5cd3      	ldrb	r3, [r2, r3]
    4b50:	2b01      	cmp	r3, #1
    4b52:	d13d      	bne.n	4bd0 <cmd_common_process+0x226>
					{
						cbuf[wn]  = (BYTE)UID_WHO_ARE_YOU;								wn += sizeof(BYTE);
    4b54:	230a      	movs	r3, #10
    4b56:	18fb      	adds	r3, r7, r3
    4b58:	881b      	ldrh	r3, [r3, #0]
    4b5a:	4a40      	ldr	r2, [pc, #256]	; (4c5c <cmd_common_process+0x2b2>)
    4b5c:	2101      	movs	r1, #1
    4b5e:	54d1      	strb	r1, [r2, r3]
    4b60:	230a      	movs	r3, #10
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	220a      	movs	r2, #10
    4b66:	18ba      	adds	r2, r7, r2
    4b68:	8812      	ldrh	r2, [r2, #0]
    4b6a:	3201      	adds	r2, #1
    4b6c:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_WHO_ARE_YOU>>8);							wn += sizeof(BYTE);
    4b6e:	230a      	movs	r3, #10
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	881b      	ldrh	r3, [r3, #0]
    4b74:	4a39      	ldr	r2, [pc, #228]	; (4c5c <cmd_common_process+0x2b2>)
    4b76:	2180      	movs	r1, #128	; 0x80
    4b78:	54d1      	strb	r1, [r2, r3]
    4b7a:	230a      	movs	r3, #10
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	220a      	movs	r2, #10
    4b80:	18ba      	adds	r2, r7, r2
    4b82:	8812      	ldrh	r2, [r2, #0]
    4b84:	3201      	adds	r2, #1
    4b86:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],MODEL,sizeof(MODEL));							wn +=sizeof(MODEL);
    4b88:	230a      	movs	r3, #10
    4b8a:	18fb      	adds	r3, r7, r3
    4b8c:	881a      	ldrh	r2, [r3, #0]
    4b8e:	4b33      	ldr	r3, [pc, #204]	; (4c5c <cmd_common_process+0x2b2>)
    4b90:	18d3      	adds	r3, r2, r3
    4b92:	493b      	ldr	r1, [pc, #236]	; (4c80 <cmd_common_process+0x2d6>)
    4b94:	220d      	movs	r2, #13
    4b96:	0018      	movs	r0, r3
    4b98:	4b31      	ldr	r3, [pc, #196]	; (4c60 <cmd_common_process+0x2b6>)
    4b9a:	4798      	blx	r3
    4b9c:	230a      	movs	r3, #10
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	220a      	movs	r2, #10
    4ba2:	18ba      	adds	r2, r7, r2
    4ba4:	8812      	ldrh	r2, [r2, #0]
    4ba6:	320d      	adds	r2, #13
    4ba8:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],VERSION,sizeof(VERSION));						wn +=sizeof(VERSION);
    4baa:	230a      	movs	r3, #10
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	881a      	ldrh	r2, [r3, #0]
    4bb0:	4b2a      	ldr	r3, [pc, #168]	; (4c5c <cmd_common_process+0x2b2>)
    4bb2:	18d3      	adds	r3, r2, r3
    4bb4:	4933      	ldr	r1, [pc, #204]	; (4c84 <cmd_common_process+0x2da>)
    4bb6:	2209      	movs	r2, #9
    4bb8:	0018      	movs	r0, r3
    4bba:	4b29      	ldr	r3, [pc, #164]	; (4c60 <cmd_common_process+0x2b6>)
    4bbc:	4798      	blx	r3
    4bbe:	230a      	movs	r3, #10
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	220a      	movs	r2, #10
    4bc4:	18ba      	adds	r2, r7, r2
    4bc6:	8812      	ldrh	r2, [r2, #0]
    4bc8:	3209      	adds	r2, #9
    4bca:	801a      	strh	r2, [r3, #0]
						break;
    4bcc:	f000 fccd 	bl	556a <cmd_common_process+0xbc0>
					}
		
					if(cbuf[wn]==0x02)
    4bd0:	230a      	movs	r3, #10
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	881b      	ldrh	r3, [r3, #0]
    4bd6:	4a21      	ldr	r2, [pc, #132]	; (4c5c <cmd_common_process+0x2b2>)
    4bd8:	5cd3      	ldrb	r3, [r2, r3]
    4bda:	2b02      	cmp	r3, #2
    4bdc:	d001      	beq.n	4be2 <cmd_common_process+0x238>
    4bde:	f000 fcb7 	bl	5550 <cmd_common_process+0xba6>
					{
						cbuf[wn]  = (BYTE)UID_STATUS_PACK;								wn += sizeof(BYTE);
    4be2:	230a      	movs	r3, #10
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	881b      	ldrh	r3, [r3, #0]
    4be8:	4a1c      	ldr	r2, [pc, #112]	; (4c5c <cmd_common_process+0x2b2>)
    4bea:	2102      	movs	r1, #2
    4bec:	54d1      	strb	r1, [r2, r3]
    4bee:	230a      	movs	r3, #10
    4bf0:	18fb      	adds	r3, r7, r3
    4bf2:	220a      	movs	r2, #10
    4bf4:	18ba      	adds	r2, r7, r2
    4bf6:	8812      	ldrh	r2, [r2, #0]
    4bf8:	3201      	adds	r2, #1
    4bfa:	801a      	strh	r2, [r3, #0]
						cbuf[wn]  = (BYTE)(UID_STATUS_PACK>>8);							wn += sizeof(BYTE); //uid device
    4bfc:	230a      	movs	r3, #10
    4bfe:	18fb      	adds	r3, r7, r3
    4c00:	881b      	ldrh	r3, [r3, #0]
    4c02:	4a16      	ldr	r2, [pc, #88]	; (4c5c <cmd_common_process+0x2b2>)
    4c04:	2180      	movs	r1, #128	; 0x80
    4c06:	54d1      	strb	r1, [r2, r3]
    4c08:	230a      	movs	r3, #10
    4c0a:	18fb      	adds	r3, r7, r3
    4c0c:	220a      	movs	r2, #10
    4c0e:	18ba      	adds	r2, r7, r2
    4c10:	8812      	ldrh	r2, [r2, #0]
    4c12:	3201      	adds	r2, #1
    4c14:	801a      	strh	r2, [r3, #0]
						memcpy(&cbuf[wn],(BYTE*)&TTL,4);								wn += sizeof(DWORD);//TTL
    4c16:	230a      	movs	r3, #10
    4c18:	18fb      	adds	r3, r7, r3
    4c1a:	881a      	ldrh	r2, [r3, #0]
    4c1c:	4b0f      	ldr	r3, [pc, #60]	; (4c5c <cmd_common_process+0x2b2>)
    4c1e:	18d3      	adds	r3, r2, r3
    4c20:	4919      	ldr	r1, [pc, #100]	; (4c88 <cmd_common_process+0x2de>)
    4c22:	2204      	movs	r2, #4
    4c24:	0018      	movs	r0, r3
    4c26:	4b0e      	ldr	r3, [pc, #56]	; (4c60 <cmd_common_process+0x2b6>)
    4c28:	4798      	blx	r3
    4c2a:	230a      	movs	r3, #10
    4c2c:	18fb      	adds	r3, r7, r3
    4c2e:	220a      	movs	r2, #10
    4c30:	18ba      	adds	r2, r7, r2
    4c32:	8812      	ldrh	r2, [r2, #0]
    4c34:	3204      	adds	r2, #4
    4c36:	801a      	strh	r2, [r3, #0]
			
						for (i = 0; i < 4; i++)
    4c38:	2309      	movs	r3, #9
    4c3a:	18fb      	adds	r3, r7, r3
    4c3c:	2200      	movs	r2, #0
    4c3e:	701a      	strb	r2, [r3, #0]
    4c40:	e0ba      	b.n	4db8 <cmd_common_process+0x40e>
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	20000450 	.word	0x20000450
    4c48:	20000458 	.word	0x20000458
    4c4c:	0000e2f0 	.word	0x0000e2f0
    4c50:	200005cc 	.word	0x200005cc
    4c54:	000005d1 	.word	0x000005d1
    4c58:	200005d4 	.word	0x200005d4
    4c5c:	200004a0 	.word	0x200004a0
    4c60:	0000c4e5 	.word	0x0000c4e5
    4c64:	00005bfd 	.word	0x00005bfd
    4c68:	2000049c 	.word	0x2000049c
    4c6c:	0000493b 	.word	0x0000493b
    4c70:	0000c780 	.word	0x0000c780
    4c74:	200004a3 	.word	0x200004a3
    4c78:	000048a5 	.word	0x000048a5
    4c7c:	20000454 	.word	0x20000454
    4c80:	0000c764 	.word	0x0000c764
    4c84:	0000c774 	.word	0x0000c774
    4c88:	2000047c 	.word	0x2000047c
							{
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.rx,4);		wn += sizeof(DWORD);
    4c8c:	230a      	movs	r3, #10
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	881a      	ldrh	r2, [r3, #0]
    4c92:	4bcd      	ldr	r3, [pc, #820]	; (4fc8 <cmd_common_process+0x61e>)
    4c94:	18d0      	adds	r0, r2, r3
    4c96:	2309      	movs	r3, #9
    4c98:	18fb      	adds	r3, r7, r3
    4c9a:	781b      	ldrb	r3, [r3, #0]
    4c9c:	3301      	adds	r3, #1
    4c9e:	4acb      	ldr	r2, [pc, #812]	; (4fcc <cmd_common_process+0x622>)
    4ca0:	4353      	muls	r3, r2
    4ca2:	22ba      	movs	r2, #186	; 0xba
    4ca4:	00d2      	lsls	r2, r2, #3
    4ca6:	189a      	adds	r2, r3, r2
    4ca8:	4bc9      	ldr	r3, [pc, #804]	; (4fd0 <cmd_common_process+0x626>)
    4caa:	18d3      	adds	r3, r2, r3
    4cac:	330b      	adds	r3, #11
    4cae:	2204      	movs	r2, #4
    4cb0:	0019      	movs	r1, r3
    4cb2:	4bc8      	ldr	r3, [pc, #800]	; (4fd4 <cmd_common_process+0x62a>)
    4cb4:	4798      	blx	r3
    4cb6:	230a      	movs	r3, #10
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	220a      	movs	r2, #10
    4cbc:	18ba      	adds	r2, r7, r2
    4cbe:	8812      	ldrh	r2, [r2, #0]
    4cc0:	3204      	adds	r2, #4
    4cc2:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&eth_sock[i+1].counters.tx,4);		wn += sizeof(DWORD);
    4cc4:	230a      	movs	r3, #10
    4cc6:	18fb      	adds	r3, r7, r3
    4cc8:	881a      	ldrh	r2, [r3, #0]
    4cca:	4bbf      	ldr	r3, [pc, #764]	; (4fc8 <cmd_common_process+0x61e>)
    4ccc:	18d0      	adds	r0, r2, r3
    4cce:	2309      	movs	r3, #9
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	781b      	ldrb	r3, [r3, #0]
    4cd4:	3301      	adds	r3, #1
    4cd6:	4abd      	ldr	r2, [pc, #756]	; (4fcc <cmd_common_process+0x622>)
    4cd8:	4353      	muls	r3, r2
    4cda:	22ba      	movs	r2, #186	; 0xba
    4cdc:	00d2      	lsls	r2, r2, #3
    4cde:	189a      	adds	r2, r3, r2
    4ce0:	4bbb      	ldr	r3, [pc, #748]	; (4fd0 <cmd_common_process+0x626>)
    4ce2:	18d3      	adds	r3, r2, r3
    4ce4:	3307      	adds	r3, #7
    4ce6:	2204      	movs	r2, #4
    4ce8:	0019      	movs	r1, r3
    4cea:	4bba      	ldr	r3, [pc, #744]	; (4fd4 <cmd_common_process+0x62a>)
    4cec:	4798      	blx	r3
    4cee:	230a      	movs	r3, #10
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	220a      	movs	r2, #10
    4cf4:	18ba      	adds	r2, r7, r2
    4cf6:	8812      	ldrh	r2, [r2, #0]
    4cf8:	3204      	adds	r2, #4
    4cfa:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.rx,4);			wn += sizeof(DWORD);
    4cfc:	230a      	movs	r3, #10
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	881a      	ldrh	r2, [r3, #0]
    4d02:	4bb1      	ldr	r3, [pc, #708]	; (4fc8 <cmd_common_process+0x61e>)
    4d04:	18d0      	adds	r0, r2, r3
    4d06:	2309      	movs	r3, #9
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	781a      	ldrb	r2, [r3, #0]
    4d0c:	0013      	movs	r3, r2
    4d0e:	00db      	lsls	r3, r3, #3
    4d10:	189b      	adds	r3, r3, r2
    4d12:	019b      	lsls	r3, r3, #6
    4d14:	228c      	movs	r2, #140	; 0x8c
    4d16:	0092      	lsls	r2, r2, #2
    4d18:	189a      	adds	r2, r3, r2
    4d1a:	4baf      	ldr	r3, [pc, #700]	; (4fd8 <cmd_common_process+0x62e>)
    4d1c:	18d3      	adds	r3, r2, r3
    4d1e:	3308      	adds	r3, #8
    4d20:	2204      	movs	r2, #4
    4d22:	0019      	movs	r1, r3
    4d24:	4bab      	ldr	r3, [pc, #684]	; (4fd4 <cmd_common_process+0x62a>)
    4d26:	4798      	blx	r3
    4d28:	230a      	movs	r3, #10
    4d2a:	18fb      	adds	r3, r7, r3
    4d2c:	220a      	movs	r2, #10
    4d2e:	18ba      	adds	r2, r7, r2
    4d30:	8812      	ldrh	r2, [r2, #0]
    4d32:	3204      	adds	r2, #4
    4d34:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].counters.tx,4);			wn += sizeof(DWORD);
    4d36:	230a      	movs	r3, #10
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	881a      	ldrh	r2, [r3, #0]
    4d3c:	4ba2      	ldr	r3, [pc, #648]	; (4fc8 <cmd_common_process+0x61e>)
    4d3e:	18d0      	adds	r0, r2, r3
    4d40:	2309      	movs	r3, #9
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	781a      	ldrb	r2, [r3, #0]
    4d46:	0013      	movs	r3, r2
    4d48:	00db      	lsls	r3, r3, #3
    4d4a:	189b      	adds	r3, r3, r2
    4d4c:	019b      	lsls	r3, r3, #6
    4d4e:	228c      	movs	r2, #140	; 0x8c
    4d50:	0092      	lsls	r2, r2, #2
    4d52:	189a      	adds	r2, r3, r2
    4d54:	4ba0      	ldr	r3, [pc, #640]	; (4fd8 <cmd_common_process+0x62e>)
    4d56:	18d3      	adds	r3, r2, r3
    4d58:	3304      	adds	r3, #4
    4d5a:	2204      	movs	r2, #4
    4d5c:	0019      	movs	r1, r3
    4d5e:	4b9d      	ldr	r3, [pc, #628]	; (4fd4 <cmd_common_process+0x62a>)
    4d60:	4798      	blx	r3
    4d62:	230a      	movs	r3, #10
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	220a      	movs	r2, #10
    4d68:	18ba      	adds	r2, r7, r2
    4d6a:	8812      	ldrh	r2, [r2, #0]
    4d6c:	3204      	adds	r2, #4
    4d6e:	801a      	strh	r2, [r3, #0]
							memcpy(&cbuf[wn],(BYTE*)&port[i].dt,2);						wn += sizeof(WORD);//dt port0
    4d70:	230a      	movs	r3, #10
    4d72:	18fb      	adds	r3, r7, r3
    4d74:	881a      	ldrh	r2, [r3, #0]
    4d76:	4b94      	ldr	r3, [pc, #592]	; (4fc8 <cmd_common_process+0x61e>)
    4d78:	18d0      	adds	r0, r2, r3
    4d7a:	2309      	movs	r3, #9
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	781a      	ldrb	r2, [r3, #0]
    4d80:	0013      	movs	r3, r2
    4d82:	00db      	lsls	r3, r3, #3
    4d84:	189b      	adds	r3, r3, r2
    4d86:	019b      	lsls	r3, r3, #6
    4d88:	2286      	movs	r2, #134	; 0x86
    4d8a:	0092      	lsls	r2, r2, #2
    4d8c:	189a      	adds	r2, r3, r2
    4d8e:	4b92      	ldr	r3, [pc, #584]	; (4fd8 <cmd_common_process+0x62e>)
    4d90:	18d3      	adds	r3, r2, r3
    4d92:	3302      	adds	r3, #2
    4d94:	2202      	movs	r2, #2
    4d96:	0019      	movs	r1, r3
    4d98:	4b8e      	ldr	r3, [pc, #568]	; (4fd4 <cmd_common_process+0x62a>)
    4d9a:	4798      	blx	r3
    4d9c:	230a      	movs	r3, #10
    4d9e:	18fb      	adds	r3, r7, r3
    4da0:	220a      	movs	r2, #10
    4da2:	18ba      	adds	r2, r7, r2
    4da4:	8812      	ldrh	r2, [r2, #0]
    4da6:	3202      	adds	r2, #2
    4da8:	801a      	strh	r2, [r3, #0]
						for (i = 0; i < 4; i++)
    4daa:	2309      	movs	r3, #9
    4dac:	18fb      	adds	r3, r7, r3
    4dae:	781a      	ldrb	r2, [r3, #0]
    4db0:	2309      	movs	r3, #9
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	3201      	adds	r2, #1
    4db6:	701a      	strb	r2, [r3, #0]
    4db8:	2309      	movs	r3, #9
    4dba:	18fb      	adds	r3, r7, r3
    4dbc:	781b      	ldrb	r3, [r3, #0]
    4dbe:	2b03      	cmp	r3, #3
    4dc0:	d800      	bhi.n	4dc4 <cmd_common_process+0x41a>
    4dc2:	e763      	b.n	4c8c <cmd_common_process+0x2e2>
							}			
					}
		break;
    4dc4:	f000 fbc4 	bl	5550 <cmd_common_process+0xba6>
		//......................................................................
		//......................................................................
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    4dc8:	230e      	movs	r3, #14
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	2b07      	cmp	r3, #7
    4dd0:	d001      	beq.n	4dd6 <cmd_common_process+0x42c>
    4dd2:	f000 fc28 	bl	5626 <cmd_common_process+0xc7c>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4dd6:	4b7c      	ldr	r3, [pc, #496]	; (4fc8 <cmd_common_process+0x61e>)
    4dd8:	78db      	ldrb	r3, [r3, #3]
    4dda:	b21a      	sxth	r2, r3
    4ddc:	4b7a      	ldr	r3, [pc, #488]	; (4fc8 <cmd_common_process+0x61e>)
    4dde:	791b      	ldrb	r3, [r3, #4]
    4de0:	021b      	lsls	r3, r3, #8
    4de2:	b21b      	sxth	r3, r3
    4de4:	4313      	orrs	r3, r2
    4de6:	b21a      	sxth	r2, r3
    4de8:	003b      	movs	r3, r7
    4dea:	801a      	strh	r2, [r3, #0]
    4dec:	230a      	movs	r3, #10
    4dee:	18fb      	adds	r3, r7, r3
    4df0:	220a      	movs	r2, #10
    4df2:	18ba      	adds	r2, r7, r2
    4df4:	8812      	ldrh	r2, [r2, #0]
    4df6:	3202      	adds	r2, #2
    4df8:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_1) - ixo;
    4dfa:	230c      	movs	r3, #12
    4dfc:	18fb      	adds	r3, r7, r3
    4dfe:	003a      	movs	r2, r7
    4e00:	8812      	ldrh	r2, [r2, #0]
    4e02:	2180      	movs	r1, #128	; 0x80
    4e04:	0049      	lsls	r1, r1, #1
    4e06:	1a8a      	subs	r2, r1, r2
    4e08:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_1)	) { break;  }
    4e0a:	003b      	movs	r3, r7
    4e0c:	881a      	ldrh	r2, [r3, #0]
    4e0e:	2380      	movs	r3, #128	; 0x80
    4e10:	005b      	lsls	r3, r3, #1
    4e12:	429a      	cmp	r2, r3
    4e14:	d901      	bls.n	4e1a <cmd_common_process+0x470>
    4e16:	f000 fb9d 	bl	5554 <cmd_common_process+0xbaa>
					if(cnt > 256			) { cnt=256;  }
    4e1a:	230c      	movs	r3, #12
    4e1c:	18fb      	adds	r3, r7, r3
    4e1e:	881a      	ldrh	r2, [r3, #0]
    4e20:	2380      	movs	r3, #128	; 0x80
    4e22:	005b      	lsls	r3, r3, #1
    4e24:	429a      	cmp	r2, r3
    4e26:	d904      	bls.n	4e32 <cmd_common_process+0x488>
    4e28:	230c      	movs	r3, #12
    4e2a:	18fb      	adds	r3, r7, r3
    4e2c:	2280      	movs	r2, #128	; 0x80
    4e2e:	0052      	lsls	r2, r2, #1
    4e30:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4e32:	230a      	movs	r3, #10
    4e34:	18fb      	adds	r3, r7, r3
    4e36:	881b      	ldrh	r3, [r3, #0]
    4e38:	220c      	movs	r2, #12
    4e3a:	18ba      	adds	r2, r7, r2
    4e3c:	8812      	ldrh	r2, [r2, #0]
    4e3e:	b2d1      	uxtb	r1, r2
    4e40:	4a61      	ldr	r2, [pc, #388]	; (4fc8 <cmd_common_process+0x61e>)
    4e42:	54d1      	strb	r1, [r2, r3]
    4e44:	230a      	movs	r3, #10
    4e46:	18fb      	adds	r3, r7, r3
    4e48:	220a      	movs	r2, #10
    4e4a:	18ba      	adds	r2, r7, r2
    4e4c:	8812      	ldrh	r2, [r2, #0]
    4e4e:	3201      	adds	r2, #1
    4e50:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4e52:	230a      	movs	r3, #10
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	881b      	ldrh	r3, [r3, #0]
    4e58:	220c      	movs	r2, #12
    4e5a:	18ba      	adds	r2, r7, r2
    4e5c:	8812      	ldrh	r2, [r2, #0]
    4e5e:	0a12      	lsrs	r2, r2, #8
    4e60:	b292      	uxth	r2, r2
    4e62:	b2d1      	uxtb	r1, r2
    4e64:	4a58      	ldr	r2, [pc, #352]	; (4fc8 <cmd_common_process+0x61e>)
    4e66:	54d1      	strb	r1, [r2, r3]
    4e68:	230a      	movs	r3, #10
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	220a      	movs	r2, #10
    4e6e:	18ba      	adds	r2, r7, r2
    4e70:	8812      	ldrh	r2, [r2, #0]
    4e72:	3201      	adds	r2, #1
    4e74:	801a      	strh	r2, [r3, #0]

					memcpy(&cbuf[wn],((BYTE*)&cfg_1)+ixo,cnt);				wn+=cnt;
    4e76:	230a      	movs	r3, #10
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	881a      	ldrh	r2, [r3, #0]
    4e7c:	4b52      	ldr	r3, [pc, #328]	; (4fc8 <cmd_common_process+0x61e>)
    4e7e:	18d0      	adds	r0, r2, r3
    4e80:	003b      	movs	r3, r7
    4e82:	881a      	ldrh	r2, [r3, #0]
    4e84:	4b55      	ldr	r3, [pc, #340]	; (4fdc <cmd_common_process+0x632>)
    4e86:	18d1      	adds	r1, r2, r3
    4e88:	230c      	movs	r3, #12
    4e8a:	18fb      	adds	r3, r7, r3
    4e8c:	881b      	ldrh	r3, [r3, #0]
    4e8e:	001a      	movs	r2, r3
    4e90:	4b50      	ldr	r3, [pc, #320]	; (4fd4 <cmd_common_process+0x62a>)
    4e92:	4798      	blx	r3
    4e94:	230a      	movs	r3, #10
    4e96:	18fb      	adds	r3, r7, r3
    4e98:	220a      	movs	r2, #10
    4e9a:	18b9      	adds	r1, r7, r2
    4e9c:	220c      	movs	r2, #12
    4e9e:	18ba      	adds	r2, r7, r2
    4ea0:	8809      	ldrh	r1, [r1, #0]
    4ea2:	8812      	ldrh	r2, [r2, #0]
    4ea4:	188a      	adds	r2, r1, r2
    4ea6:	801a      	strh	r2, [r3, #0]
		break;
    4ea8:	e35f      	b.n	556a <cmd_common_process+0xbc0>

		//......................................................................
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    4eaa:	230e      	movs	r3, #14
    4eac:	18fb      	adds	r3, r7, r3
    4eae:	881b      	ldrh	r3, [r3, #0]
    4eb0:	2b07      	cmp	r3, #7
    4eb2:	d001      	beq.n	4eb8 <cmd_common_process+0x50e>
    4eb4:	f000 fbb9 	bl	562a <cmd_common_process+0xc80>
		
					ixo=cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4eb8:	4b43      	ldr	r3, [pc, #268]	; (4fc8 <cmd_common_process+0x61e>)
    4eba:	78db      	ldrb	r3, [r3, #3]
    4ebc:	b21a      	sxth	r2, r3
    4ebe:	4b42      	ldr	r3, [pc, #264]	; (4fc8 <cmd_common_process+0x61e>)
    4ec0:	791b      	ldrb	r3, [r3, #4]
    4ec2:	021b      	lsls	r3, r3, #8
    4ec4:	b21b      	sxth	r3, r3
    4ec6:	4313      	orrs	r3, r2
    4ec8:	b21a      	sxth	r2, r3
    4eca:	003b      	movs	r3, r7
    4ecc:	801a      	strh	r2, [r3, #0]
    4ece:	230a      	movs	r3, #10
    4ed0:	18fb      	adds	r3, r7, r3
    4ed2:	220a      	movs	r2, #10
    4ed4:	18ba      	adds	r2, r7, r2
    4ed6:	8812      	ldrh	r2, [r2, #0]
    4ed8:	3202      	adds	r2, #2
    4eda:	801a      	strh	r2, [r3, #0]
					cnt= sizeof(CFG_2) - ixo;
    4edc:	230c      	movs	r3, #12
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	003a      	movs	r2, r7
    4ee2:	8812      	ldrh	r2, [r2, #0]
    4ee4:	2180      	movs	r1, #128	; 0x80
    4ee6:	0049      	lsls	r1, r1, #1
    4ee8:	1a8a      	subs	r2, r1, r2
    4eea:	801a      	strh	r2, [r3, #0]
					if(ixo > sizeof(CFG_2)	) { break;  }
    4eec:	003b      	movs	r3, r7
    4eee:	881a      	ldrh	r2, [r3, #0]
    4ef0:	2380      	movs	r3, #128	; 0x80
    4ef2:	005b      	lsls	r3, r3, #1
    4ef4:	429a      	cmp	r2, r3
    4ef6:	d900      	bls.n	4efa <cmd_common_process+0x550>
    4ef8:	e32e      	b.n	5558 <cmd_common_process+0xbae>
					if(cnt > 256			) { cnt=256;  }
    4efa:	230c      	movs	r3, #12
    4efc:	18fb      	adds	r3, r7, r3
    4efe:	881a      	ldrh	r2, [r3, #0]
    4f00:	2380      	movs	r3, #128	; 0x80
    4f02:	005b      	lsls	r3, r3, #1
    4f04:	429a      	cmp	r2, r3
    4f06:	d904      	bls.n	4f12 <cmd_common_process+0x568>
    4f08:	230c      	movs	r3, #12
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	2280      	movs	r2, #128	; 0x80
    4f0e:	0052      	lsls	r2, r2, #1
    4f10:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0x00FF);							wn+=sizeof(BYTE);
    4f12:	230a      	movs	r3, #10
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	881b      	ldrh	r3, [r3, #0]
    4f18:	220c      	movs	r2, #12
    4f1a:	18ba      	adds	r2, r7, r2
    4f1c:	8812      	ldrh	r2, [r2, #0]
    4f1e:	b2d1      	uxtb	r1, r2
    4f20:	4a29      	ldr	r2, [pc, #164]	; (4fc8 <cmd_common_process+0x61e>)
    4f22:	54d1      	strb	r1, [r2, r3]
    4f24:	230a      	movs	r3, #10
    4f26:	18fb      	adds	r3, r7, r3
    4f28:	220a      	movs	r2, #10
    4f2a:	18ba      	adds	r2, r7, r2
    4f2c:	8812      	ldrh	r2, [r2, #0]
    4f2e:	3201      	adds	r2, #1
    4f30:	801a      	strh	r2, [r3, #0]
					cbuf[wn]=(cnt & 0xFF00)>>8;							wn+=sizeof(BYTE);
    4f32:	230a      	movs	r3, #10
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	881b      	ldrh	r3, [r3, #0]
    4f38:	220c      	movs	r2, #12
    4f3a:	18ba      	adds	r2, r7, r2
    4f3c:	8812      	ldrh	r2, [r2, #0]
    4f3e:	0a12      	lsrs	r2, r2, #8
    4f40:	b292      	uxth	r2, r2
    4f42:	b2d1      	uxtb	r1, r2
    4f44:	4a20      	ldr	r2, [pc, #128]	; (4fc8 <cmd_common_process+0x61e>)
    4f46:	54d1      	strb	r1, [r2, r3]
    4f48:	230a      	movs	r3, #10
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	220a      	movs	r2, #10
    4f4e:	18ba      	adds	r2, r7, r2
    4f50:	8812      	ldrh	r2, [r2, #0]
    4f52:	3201      	adds	r2, #1
    4f54:	801a      	strh	r2, [r3, #0]

					
					memcpy(&cbuf[wn],((BYTE*)&cfg_2)+ixo,cnt);				wn+=cnt;
    4f56:	230a      	movs	r3, #10
    4f58:	18fb      	adds	r3, r7, r3
    4f5a:	881a      	ldrh	r2, [r3, #0]
    4f5c:	4b1a      	ldr	r3, [pc, #104]	; (4fc8 <cmd_common_process+0x61e>)
    4f5e:	18d0      	adds	r0, r2, r3
    4f60:	003b      	movs	r3, r7
    4f62:	881a      	ldrh	r2, [r3, #0]
    4f64:	4b1e      	ldr	r3, [pc, #120]	; (4fe0 <cmd_common_process+0x636>)
    4f66:	18d1      	adds	r1, r2, r3
    4f68:	230c      	movs	r3, #12
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	881b      	ldrh	r3, [r3, #0]
    4f6e:	001a      	movs	r2, r3
    4f70:	4b18      	ldr	r3, [pc, #96]	; (4fd4 <cmd_common_process+0x62a>)
    4f72:	4798      	blx	r3
    4f74:	230a      	movs	r3, #10
    4f76:	18fb      	adds	r3, r7, r3
    4f78:	220a      	movs	r2, #10
    4f7a:	18b9      	adds	r1, r7, r2
    4f7c:	220c      	movs	r2, #12
    4f7e:	18ba      	adds	r2, r7, r2
    4f80:	8809      	ldrh	r1, [r1, #0]
    4f82:	8812      	ldrh	r2, [r2, #0]
    4f84:	188a      	adds	r2, r1, r2
    4f86:	801a      	strh	r2, [r3, #0]
		break;
    4f88:	e2ef      	b.n	556a <cmd_common_process+0xbc0>

		//......................................................................

		case 0x10:	if(size <  6) { return; }
    4f8a:	230e      	movs	r3, #14
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	881b      	ldrh	r3, [r3, #0]
    4f90:	2b05      	cmp	r3, #5
    4f92:	d800      	bhi.n	4f96 <cmd_common_process+0x5ec>
    4f94:	e34b      	b.n	562e <cmd_common_process+0xc84>
					wn+=iap_process(&cbuf[wn],size-5);
    4f96:	230a      	movs	r3, #10
    4f98:	18fb      	adds	r3, r7, r3
    4f9a:	881a      	ldrh	r2, [r3, #0]
    4f9c:	4b0a      	ldr	r3, [pc, #40]	; (4fc8 <cmd_common_process+0x61e>)
    4f9e:	18d2      	adds	r2, r2, r3
    4fa0:	230e      	movs	r3, #14
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	881b      	ldrh	r3, [r3, #0]
    4fa6:	3b05      	subs	r3, #5
    4fa8:	b29b      	uxth	r3, r3
    4faa:	0019      	movs	r1, r3
    4fac:	0010      	movs	r0, r2
    4fae:	4b0d      	ldr	r3, [pc, #52]	; (4fe4 <cmd_common_process+0x63a>)
    4fb0:	4798      	blx	r3
    4fb2:	0003      	movs	r3, r0
    4fb4:	0019      	movs	r1, r3
    4fb6:	230a      	movs	r3, #10
    4fb8:	18fb      	adds	r3, r7, r3
    4fba:	220a      	movs	r2, #10
    4fbc:	18ba      	adds	r2, r7, r2
    4fbe:	8812      	ldrh	r2, [r2, #0]
    4fc0:	188a      	adds	r2, r1, r2
    4fc2:	801a      	strh	r2, [r3, #0]
		break;
    4fc4:	e2d1      	b.n	556a <cmd_common_process+0xbc0>
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	200004a0 	.word	0x200004a0
    4fcc:	000005e5 	.word	0x000005e5
    4fd0:	200005cc 	.word	0x200005cc
    4fd4:	0000c4e5 	.word	0x0000c4e5
    4fd8:	200031f8 	.word	0x200031f8
    4fdc:	20003dc0 	.word	0x20003dc0
    4fe0:	20003bc0 	.word	0x20003bc0
    4fe4:	00006ca1 	.word	0x00006ca1

		//......................................................................
		case 0x17:	if(size  <  7) { return; }
    4fe8:	230e      	movs	r3, #14
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	881b      	ldrh	r3, [r3, #0]
    4fee:	2b06      	cmp	r3, #6
    4ff0:	d800      	bhi.n	4ff4 <cmd_common_process+0x64a>
    4ff2:	e31e      	b.n	5632 <cmd_common_process+0xc88>
		
					ixo = cbuf[3] | (cbuf[4]<<8);							wn+=sizeof(WORD);
    4ff4:	4bd4      	ldr	r3, [pc, #848]	; (5348 <cmd_common_process+0x99e>)
    4ff6:	78db      	ldrb	r3, [r3, #3]
    4ff8:	b21a      	sxth	r2, r3
    4ffa:	4bd3      	ldr	r3, [pc, #844]	; (5348 <cmd_common_process+0x99e>)
    4ffc:	791b      	ldrb	r3, [r3, #4]
    4ffe:	021b      	lsls	r3, r3, #8
    5000:	b21b      	sxth	r3, r3
    5002:	4313      	orrs	r3, r2
    5004:	b21a      	sxth	r2, r3
    5006:	003b      	movs	r3, r7
    5008:	801a      	strh	r2, [r3, #0]
    500a:	230a      	movs	r3, #10
    500c:	18fb      	adds	r3, r7, r3
    500e:	220a      	movs	r2, #10
    5010:	18ba      	adds	r2, r7, r2
    5012:	8812      	ldrh	r2, [r2, #0]
    5014:	3202      	adds	r2, #2
    5016:	801a      	strh	r2, [r3, #0]
					cnt = cbuf[5] | (cbuf[6]<<8);							wn+=sizeof(WORD);
    5018:	4bcb      	ldr	r3, [pc, #812]	; (5348 <cmd_common_process+0x99e>)
    501a:	795b      	ldrb	r3, [r3, #5]
    501c:	b21a      	sxth	r2, r3
    501e:	4bca      	ldr	r3, [pc, #808]	; (5348 <cmd_common_process+0x99e>)
    5020:	799b      	ldrb	r3, [r3, #6]
    5022:	021b      	lsls	r3, r3, #8
    5024:	b21b      	sxth	r3, r3
    5026:	4313      	orrs	r3, r2
    5028:	b21a      	sxth	r2, r3
    502a:	230c      	movs	r3, #12
    502c:	18fb      	adds	r3, r7, r3
    502e:	801a      	strh	r2, [r3, #0]
    5030:	230a      	movs	r3, #10
    5032:	18fb      	adds	r3, r7, r3
    5034:	220a      	movs	r2, #10
    5036:	18ba      	adds	r2, r7, r2
    5038:	8812      	ldrh	r2, [r2, #0]
    503a:	3202      	adds	r2, #2
    503c:	801a      	strh	r2, [r3, #0]
					
					if(cnt  ==  0) { break; }
    503e:	230c      	movs	r3, #12
    5040:	18fb      	adds	r3, r7, r3
    5042:	881b      	ldrh	r3, [r3, #0]
    5044:	2b00      	cmp	r3, #0
    5046:	d100      	bne.n	504a <cmd_common_process+0x6a0>
    5048:	e288      	b.n	555c <cmd_common_process+0xbb2>
					if(ixo  ==  0) {memset(&cfg_1_tmp,0x00,sizeof(CFG_1));}
    504a:	003b      	movs	r3, r7
    504c:	881b      	ldrh	r3, [r3, #0]
    504e:	2b00      	cmp	r3, #0
    5050:	d106      	bne.n	5060 <cmd_common_process+0x6b6>
    5052:	2380      	movs	r3, #128	; 0x80
    5054:	005a      	lsls	r2, r3, #1
    5056:	4bbd      	ldr	r3, [pc, #756]	; (534c <cmd_common_process+0x9a2>)
    5058:	2100      	movs	r1, #0
    505a:	0018      	movs	r0, r3
    505c:	4bbc      	ldr	r3, [pc, #752]	; (5350 <cmd_common_process+0x9a6>)
    505e:	4798      	blx	r3
					
					if(ixo       >= sizeof(CFG_1)) { break; }
    5060:	003b      	movs	r3, r7
    5062:	881b      	ldrh	r3, [r3, #0]
    5064:	2bff      	cmp	r3, #255	; 0xff
    5066:	d900      	bls.n	506a <cmd_common_process+0x6c0>
    5068:	e27a      	b.n	5560 <cmd_common_process+0xbb6>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    506a:	230c      	movs	r3, #12
    506c:	18fb      	adds	r3, r7, r3
    506e:	881a      	ldrh	r2, [r3, #0]
    5070:	003b      	movs	r3, r7
    5072:	881b      	ldrh	r3, [r3, #0]
    5074:	18d3      	adds	r3, r2, r3
    5076:	001a      	movs	r2, r3
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	005b      	lsls	r3, r3, #1
    507c:	429a      	cmp	r2, r3
    507e:	d900      	bls.n	5082 <cmd_common_process+0x6d8>
    5080:	e270      	b.n	5564 <cmd_common_process+0xbba>
					
					memcpy(((BYTE*)&cfg_1_tmp)+ixo,cbuf+wn                  ,cnt);
    5082:	003b      	movs	r3, r7
    5084:	881a      	ldrh	r2, [r3, #0]
    5086:	4bb1      	ldr	r3, [pc, #708]	; (534c <cmd_common_process+0x9a2>)
    5088:	18d0      	adds	r0, r2, r3
    508a:	230a      	movs	r3, #10
    508c:	18fb      	adds	r3, r7, r3
    508e:	881a      	ldrh	r2, [r3, #0]
    5090:	4bad      	ldr	r3, [pc, #692]	; (5348 <cmd_common_process+0x99e>)
    5092:	18d1      	adds	r1, r2, r3
    5094:	230c      	movs	r3, #12
    5096:	18fb      	adds	r3, r7, r3
    5098:	881b      	ldrh	r3, [r3, #0]
    509a:	001a      	movs	r2, r3
    509c:	4bad      	ldr	r3, [pc, #692]	; (5354 <cmd_common_process+0x9aa>)
    509e:	4798      	blx	r3
					memcpy(cbuf+wn                  ,((BYTE*)&cfg_1_tmp)+ixo,cnt);
    50a0:	230a      	movs	r3, #10
    50a2:	18fb      	adds	r3, r7, r3
    50a4:	881a      	ldrh	r2, [r3, #0]
    50a6:	4ba8      	ldr	r3, [pc, #672]	; (5348 <cmd_common_process+0x99e>)
    50a8:	18d0      	adds	r0, r2, r3
    50aa:	003b      	movs	r3, r7
    50ac:	881a      	ldrh	r2, [r3, #0]
    50ae:	4ba7      	ldr	r3, [pc, #668]	; (534c <cmd_common_process+0x9a2>)
    50b0:	18d1      	adds	r1, r2, r3
    50b2:	230c      	movs	r3, #12
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	881b      	ldrh	r3, [r3, #0]
    50b8:	001a      	movs	r2, r3
    50ba:	4ba6      	ldr	r3, [pc, #664]	; (5354 <cmd_common_process+0x9aa>)
    50bc:	4798      	blx	r3
					wn+=cnt;
    50be:	230a      	movs	r3, #10
    50c0:	18fb      	adds	r3, r7, r3
    50c2:	220a      	movs	r2, #10
    50c4:	18b9      	adds	r1, r7, r2
    50c6:	220c      	movs	r2, #12
    50c8:	18ba      	adds	r2, r7, r2
    50ca:	8809      	ldrh	r1, [r1, #0]
    50cc:	8812      	ldrh	r2, [r2, #0]
    50ce:	188a      	adds	r2, r1, r2
    50d0:	801a      	strh	r2, [r3, #0]
		break;
    50d2:	e24a      	b.n	556a <cmd_common_process+0xbc0>
		//......................................................................
		case 0x20:	if(size <  7)		{ return; }								//login
    50d4:	230e      	movs	r3, #14
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	881b      	ldrh	r3, [r3, #0]
    50da:	2b06      	cmp	r3, #6
    50dc:	d800      	bhi.n	50e0 <cmd_common_process+0x736>
    50de:	e2aa      	b.n	5636 <cmd_common_process+0xc8c>
					
					BYTE ch = 0;
    50e0:	2308      	movs	r3, #8
    50e2:	18fb      	adds	r3, r7, r3
    50e4:	2200      	movs	r2, #0
    50e6:	701a      	strb	r2, [r3, #0]
					cnt = 3;
    50e8:	230c      	movs	r3, #12
    50ea:	18fb      	adds	r3, r7, r3
    50ec:	2203      	movs	r2, #3
    50ee:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);
    50f0:	230c      	movs	r3, #12
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	881a      	ldrh	r2, [r3, #0]
    50f6:	4b94      	ldr	r3, [pc, #592]	; (5348 <cmd_common_process+0x99e>)
    50f8:	18d3      	adds	r3, r2, r3
    50fa:	0018      	movs	r0, r3
    50fc:	4b96      	ldr	r3, [pc, #600]	; (5358 <cmd_common_process+0x9ae>)
    50fe:	4798      	blx	r3
					
					for (BYTE i = 0; i < 64; i++) {if (cbuf[cnt + i] != 0) {ch++; break;}}									//zero message protect
    5100:	1dfb      	adds	r3, r7, #7
    5102:	2200      	movs	r2, #0
    5104:	701a      	strb	r2, [r3, #0]
    5106:	e016      	b.n	5136 <cmd_common_process+0x78c>
    5108:	230c      	movs	r3, #12
    510a:	18fb      	adds	r3, r7, r3
    510c:	881a      	ldrh	r2, [r3, #0]
    510e:	1dfb      	adds	r3, r7, #7
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	18d3      	adds	r3, r2, r3
    5114:	4a8c      	ldr	r2, [pc, #560]	; (5348 <cmd_common_process+0x99e>)
    5116:	5cd3      	ldrb	r3, [r2, r3]
    5118:	2b00      	cmp	r3, #0
    511a:	d007      	beq.n	512c <cmd_common_process+0x782>
    511c:	2308      	movs	r3, #8
    511e:	18fb      	adds	r3, r7, r3
    5120:	781a      	ldrb	r2, [r3, #0]
    5122:	2308      	movs	r3, #8
    5124:	18fb      	adds	r3, r7, r3
    5126:	3201      	adds	r2, #1
    5128:	701a      	strb	r2, [r3, #0]
    512a:	e008      	b.n	513e <cmd_common_process+0x794>
    512c:	1dfb      	adds	r3, r7, #7
    512e:	781a      	ldrb	r2, [r3, #0]
    5130:	1dfb      	adds	r3, r7, #7
    5132:	3201      	adds	r2, #1
    5134:	701a      	strb	r2, [r3, #0]
    5136:	1dfb      	adds	r3, r7, #7
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	2b3f      	cmp	r3, #63	; 0x3f
    513c:	d9e4      	bls.n	5108 <cmd_common_process+0x75e>
					if (!ch) {send_error();}																				//if reciv zero message
    513e:	2308      	movs	r3, #8
    5140:	18fb      	adds	r3, r7, r3
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2b00      	cmp	r3, #0
    5146:	d10d      	bne.n	5164 <cmd_common_process+0x7ba>
    5148:	230a      	movs	r3, #10
    514a:	18fb      	adds	r3, r7, r3
    514c:	881b      	ldrh	r3, [r3, #0]
    514e:	4a7e      	ldr	r2, [pc, #504]	; (5348 <cmd_common_process+0x99e>)
    5150:	2100      	movs	r1, #0
    5152:	54d1      	strb	r1, [r2, r3]
    5154:	230a      	movs	r3, #10
    5156:	18fb      	adds	r3, r7, r3
    5158:	881a      	ldrh	r2, [r3, #0]
    515a:	230a      	movs	r3, #10
    515c:	18fb      	adds	r3, r7, r3
    515e:	3201      	adds	r2, #1
    5160:	801a      	strh	r2, [r3, #0]
    5162:	e202      	b.n	556a <cmd_common_process+0xbc0>
					
					ch = 0;
    5164:	2308      	movs	r3, #8
    5166:	18fb      	adds	r3, r7, r3
    5168:	2200      	movs	r2, #0
    516a:	701a      	strb	r2, [r3, #0]
					
					for (BYTE i = 0; i < 2; i++ ) { if (SRAV(32, &cbuf[3], &accnts.accnt[i].login[0])) 	{ch = i + 1; break;	} } //compare login
    516c:	1dbb      	adds	r3, r7, #6
    516e:	2200      	movs	r2, #0
    5170:	701a      	strb	r2, [r3, #0]
    5172:	e017      	b.n	51a4 <cmd_common_process+0x7fa>
    5174:	1dbb      	adds	r3, r7, #6
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	019a      	lsls	r2, r3, #6
    517a:	4b78      	ldr	r3, [pc, #480]	; (535c <cmd_common_process+0x9b2>)
    517c:	18d2      	adds	r2, r2, r3
    517e:	4b78      	ldr	r3, [pc, #480]	; (5360 <cmd_common_process+0x9b6>)
    5180:	0019      	movs	r1, r3
    5182:	2020      	movs	r0, #32
    5184:	4b77      	ldr	r3, [pc, #476]	; (5364 <cmd_common_process+0x9ba>)
    5186:	4798      	blx	r3
    5188:	1e03      	subs	r3, r0, #0
    518a:	d006      	beq.n	519a <cmd_common_process+0x7f0>
    518c:	2308      	movs	r3, #8
    518e:	18fb      	adds	r3, r7, r3
    5190:	1dba      	adds	r2, r7, #6
    5192:	7812      	ldrb	r2, [r2, #0]
    5194:	3201      	adds	r2, #1
    5196:	701a      	strb	r2, [r3, #0]
    5198:	e008      	b.n	51ac <cmd_common_process+0x802>
    519a:	1dbb      	adds	r3, r7, #6
    519c:	781a      	ldrb	r2, [r3, #0]
    519e:	1dbb      	adds	r3, r7, #6
    51a0:	3201      	adds	r2, #1
    51a2:	701a      	strb	r2, [r3, #0]
    51a4:	1dbb      	adds	r3, r7, #6
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	2b01      	cmp	r3, #1
    51aa:	d9e3      	bls.n	5174 <cmd_common_process+0x7ca>
					if (!ch) {send_error();}																				//if login not searched
    51ac:	2308      	movs	r3, #8
    51ae:	18fb      	adds	r3, r7, r3
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	2b00      	cmp	r3, #0
    51b4:	d10d      	bne.n	51d2 <cmd_common_process+0x828>
    51b6:	230a      	movs	r3, #10
    51b8:	18fb      	adds	r3, r7, r3
    51ba:	881b      	ldrh	r3, [r3, #0]
    51bc:	4a62      	ldr	r2, [pc, #392]	; (5348 <cmd_common_process+0x99e>)
    51be:	2100      	movs	r1, #0
    51c0:	54d1      	strb	r1, [r2, r3]
    51c2:	230a      	movs	r3, #10
    51c4:	18fb      	adds	r3, r7, r3
    51c6:	881a      	ldrh	r2, [r3, #0]
    51c8:	230a      	movs	r3, #10
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	3201      	adds	r2, #1
    51ce:	801a      	strh	r2, [r3, #0]
    51d0:	e1cb      	b.n	556a <cmd_common_process+0xbc0>

					cnt += 32;
    51d2:	230c      	movs	r3, #12
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	220c      	movs	r2, #12
    51d8:	18ba      	adds	r2, r7, r2
    51da:	8812      	ldrh	r2, [r2, #0]
    51dc:	3220      	adds	r2, #32
    51de:	801a      	strh	r2, [r3, #0]
					if (!SRAV(32, &cbuf[cnt], &accnts.accnt[ch-1].password[0])) {send_error();}									//if password no match
    51e0:	230c      	movs	r3, #12
    51e2:	18fb      	adds	r3, r7, r3
    51e4:	881a      	ldrh	r2, [r3, #0]
    51e6:	4b58      	ldr	r3, [pc, #352]	; (5348 <cmd_common_process+0x99e>)
    51e8:	18d1      	adds	r1, r2, r3
    51ea:	2308      	movs	r3, #8
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	3b01      	subs	r3, #1
    51f2:	019b      	lsls	r3, r3, #6
    51f4:	3320      	adds	r3, #32
    51f6:	001a      	movs	r2, r3
    51f8:	4b58      	ldr	r3, [pc, #352]	; (535c <cmd_common_process+0x9b2>)
    51fa:	18d3      	adds	r3, r2, r3
    51fc:	001a      	movs	r2, r3
    51fe:	2020      	movs	r0, #32
    5200:	4b58      	ldr	r3, [pc, #352]	; (5364 <cmd_common_process+0x9ba>)
    5202:	4798      	blx	r3
    5204:	1e03      	subs	r3, r0, #0
    5206:	d10d      	bne.n	5224 <cmd_common_process+0x87a>
    5208:	230a      	movs	r3, #10
    520a:	18fb      	adds	r3, r7, r3
    520c:	881b      	ldrh	r3, [r3, #0]
    520e:	4a4e      	ldr	r2, [pc, #312]	; (5348 <cmd_common_process+0x99e>)
    5210:	2100      	movs	r1, #0
    5212:	54d1      	strb	r1, [r2, r3]
    5214:	230a      	movs	r3, #10
    5216:	18fb      	adds	r3, r7, r3
    5218:	881a      	ldrh	r2, [r3, #0]
    521a:	230a      	movs	r3, #10
    521c:	18fb      	adds	r3, r7, r3
    521e:	3201      	adds	r2, #1
    5220:	801a      	strh	r2, [r3, #0]
    5222:	e1a2      	b.n	556a <cmd_common_process+0xbc0>
																
					actv_user_id = ch-1;																						//write user ID
    5224:	2308      	movs	r3, #8
    5226:	18fb      	adds	r3, r7, r3
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	3b01      	subs	r3, #1
    522c:	b2da      	uxtb	r2, r3
    522e:	4b4e      	ldr	r3, [pc, #312]	; (5368 <cmd_common_process+0x9be>)
    5230:	701a      	strb	r2, [r3, #0]
					if (ch == 1) {send_admin();} else {send_user()};
    5232:	2308      	movs	r3, #8
    5234:	18fb      	adds	r3, r7, r3
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	2b01      	cmp	r3, #1
    523a:	d10d      	bne.n	5258 <cmd_common_process+0x8ae>
    523c:	230a      	movs	r3, #10
    523e:	18fb      	adds	r3, r7, r3
    5240:	881b      	ldrh	r3, [r3, #0]
    5242:	4a41      	ldr	r2, [pc, #260]	; (5348 <cmd_common_process+0x99e>)
    5244:	2101      	movs	r1, #1
    5246:	54d1      	strb	r1, [r2, r3]
    5248:	230a      	movs	r3, #10
    524a:	18fb      	adds	r3, r7, r3
    524c:	881a      	ldrh	r2, [r3, #0]
    524e:	230a      	movs	r3, #10
    5250:	18fb      	adds	r3, r7, r3
    5252:	3201      	adds	r2, #1
    5254:	801a      	strh	r2, [r3, #0]
    5256:	e00c      	b.n	5272 <cmd_common_process+0x8c8>
    5258:	230a      	movs	r3, #10
    525a:	18fb      	adds	r3, r7, r3
    525c:	881b      	ldrh	r3, [r3, #0]
    525e:	4a3a      	ldr	r2, [pc, #232]	; (5348 <cmd_common_process+0x99e>)
    5260:	2102      	movs	r1, #2
    5262:	54d1      	strb	r1, [r2, r3]
    5264:	230a      	movs	r3, #10
    5266:	18fb      	adds	r3, r7, r3
    5268:	881a      	ldrh	r2, [r3, #0]
    526a:	230a      	movs	r3, #10
    526c:	18fb      	adds	r3, r7, r3
    526e:	3201      	adds	r2, #1
    5270:	801a      	strh	r2, [r3, #0]
					log_stat = 1;																							//login status up
    5272:	4b3e      	ldr	r3, [pc, #248]	; (536c <cmd_common_process+0x9c2>)
    5274:	2201      	movs	r2, #1
    5276:	701a      	strb	r2, [r3, #0]
					memcpy(&ip_addrs, &eth_sock[0].ip_addr[0], DW_LEN);														//write access ip addr
    5278:	493d      	ldr	r1, [pc, #244]	; (5370 <cmd_common_process+0x9c6>)
    527a:	4b3e      	ldr	r3, [pc, #248]	; (5374 <cmd_common_process+0x9ca>)
    527c:	2204      	movs	r2, #4
    527e:	0018      	movs	r0, r3
    5280:	4b34      	ldr	r3, [pc, #208]	; (5354 <cmd_common_process+0x9aa>)
    5282:	4798      	blx	r3
		break;
    5284:	e171      	b.n	556a <cmd_common_process+0xbc0>
		//......................................................................
		case 0x21:	if(size < 5)		{ return; }								//login send
    5286:	230e      	movs	r3, #14
    5288:	18fb      	adds	r3, r7, r3
    528a:	881b      	ldrh	r3, [r3, #0]
    528c:	2b04      	cmp	r3, #4
    528e:	d800      	bhi.n	5292 <cmd_common_process+0x8e8>
    5290:	e1d3      	b.n	563a <cmd_common_process+0xc90>
// 					check_permission();
 					save_log();
    5292:	4b35      	ldr	r3, [pc, #212]	; (5368 <cmd_common_process+0x9be>)
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	0018      	movs	r0, r3
    5298:	4b36      	ldr	r3, [pc, #216]	; (5374 <cmd_common_process+0x9ca>)
    529a:	6819      	ldr	r1, [r3, #0]
    529c:	4b36      	ldr	r3, [pc, #216]	; (5378 <cmd_common_process+0x9ce>)
    529e:	681a      	ldr	r2, [r3, #0]
    52a0:	4b29      	ldr	r3, [pc, #164]	; (5348 <cmd_common_process+0x99e>)
    52a2:	789b      	ldrb	r3, [r3, #2]
    52a4:	4c35      	ldr	r4, [pc, #212]	; (537c <cmd_common_process+0x9d2>)
    52a6:	47a0      	blx	r4
					cnt = 3;
    52a8:	230c      	movs	r3, #12
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	2203      	movs	r2, #3
    52ae:	801a      	strh	r2, [r3, #0]
					
					memcpy(&cbuf[3], &accnts.accnt[0].login[0], 256);
    52b0:	2380      	movs	r3, #128	; 0x80
    52b2:	005a      	lsls	r2, r3, #1
    52b4:	4929      	ldr	r1, [pc, #164]	; (535c <cmd_common_process+0x9b2>)
    52b6:	4b2a      	ldr	r3, [pc, #168]	; (5360 <cmd_common_process+0x9b6>)
    52b8:	0018      	movs	r0, r3
    52ba:	4b26      	ldr	r3, [pc, #152]	; (5354 <cmd_common_process+0x9aa>)
    52bc:	4798      	blx	r3
					crypted(&cbuf[cnt]);		cnt += 64;
    52be:	230c      	movs	r3, #12
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	881a      	ldrh	r2, [r3, #0]
    52c4:	4b20      	ldr	r3, [pc, #128]	; (5348 <cmd_common_process+0x99e>)
    52c6:	18d3      	adds	r3, r2, r3
    52c8:	0018      	movs	r0, r3
    52ca:	4b2d      	ldr	r3, [pc, #180]	; (5380 <cmd_common_process+0x9d6>)
    52cc:	4798      	blx	r3
    52ce:	230c      	movs	r3, #12
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	220c      	movs	r2, #12
    52d4:	18ba      	adds	r2, r7, r2
    52d6:	8812      	ldrh	r2, [r2, #0]
    52d8:	3240      	adds	r2, #64	; 0x40
    52da:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    52dc:	230c      	movs	r3, #12
    52de:	18fb      	adds	r3, r7, r3
    52e0:	881a      	ldrh	r2, [r3, #0]
    52e2:	4b19      	ldr	r3, [pc, #100]	; (5348 <cmd_common_process+0x99e>)
    52e4:	18d3      	adds	r3, r2, r3
    52e6:	0018      	movs	r0, r3
    52e8:	4b25      	ldr	r3, [pc, #148]	; (5380 <cmd_common_process+0x9d6>)
    52ea:	4798      	blx	r3
    52ec:	230c      	movs	r3, #12
    52ee:	18fb      	adds	r3, r7, r3
    52f0:	220c      	movs	r2, #12
    52f2:	18ba      	adds	r2, r7, r2
    52f4:	8812      	ldrh	r2, [r2, #0]
    52f6:	3240      	adds	r2, #64	; 0x40
    52f8:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    52fa:	230c      	movs	r3, #12
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	881a      	ldrh	r2, [r3, #0]
    5300:	4b11      	ldr	r3, [pc, #68]	; (5348 <cmd_common_process+0x99e>)
    5302:	18d3      	adds	r3, r2, r3
    5304:	0018      	movs	r0, r3
    5306:	4b1e      	ldr	r3, [pc, #120]	; (5380 <cmd_common_process+0x9d6>)
    5308:	4798      	blx	r3
    530a:	230c      	movs	r3, #12
    530c:	18fb      	adds	r3, r7, r3
    530e:	220c      	movs	r2, #12
    5310:	18ba      	adds	r2, r7, r2
    5312:	8812      	ldrh	r2, [r2, #0]
    5314:	3240      	adds	r2, #64	; 0x40
    5316:	801a      	strh	r2, [r3, #0]
					crypted(&cbuf[cnt]);		cnt += 64;
    5318:	230c      	movs	r3, #12
    531a:	18fb      	adds	r3, r7, r3
    531c:	881a      	ldrh	r2, [r3, #0]
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <cmd_common_process+0x99e>)
    5320:	18d3      	adds	r3, r2, r3
    5322:	0018      	movs	r0, r3
    5324:	4b16      	ldr	r3, [pc, #88]	; (5380 <cmd_common_process+0x9d6>)
    5326:	4798      	blx	r3
    5328:	230c      	movs	r3, #12
    532a:	18fb      	adds	r3, r7, r3
    532c:	220c      	movs	r2, #12
    532e:	18ba      	adds	r2, r7, r2
    5330:	8812      	ldrh	r2, [r2, #0]
    5332:	3240      	adds	r2, #64	; 0x40
    5334:	801a      	strh	r2, [r3, #0]
					wn += 256;
    5336:	230a      	movs	r3, #10
    5338:	18fb      	adds	r3, r7, r3
    533a:	220a      	movs	r2, #10
    533c:	18ba      	adds	r2, r7, r2
    533e:	8812      	ldrh	r2, [r2, #0]
    5340:	3201      	adds	r2, #1
    5342:	32ff      	adds	r2, #255	; 0xff
    5344:	801a      	strh	r2, [r3, #0]
		break;
    5346:	e110      	b.n	556a <cmd_common_process+0xbc0>
    5348:	200004a0 	.word	0x200004a0
    534c:	20003cc0 	.word	0x20003cc0
    5350:	0000c569 	.word	0x0000c569
    5354:	0000c4e5 	.word	0x0000c4e5
    5358:	00005db3 	.word	0x00005db3
    535c:	20002550 	.word	0x20002550
    5360:	200004a3 	.word	0x200004a3
    5364:	0000493b 	.word	0x0000493b
    5368:	20000451 	.word	0x20000451
    536c:	20000450 	.word	0x20000450
    5370:	200005cc 	.word	0x200005cc
    5374:	2000049c 	.word	0x2000049c
    5378:	20000454 	.word	0x20000454
    537c:	00004585 	.word	0x00004585
    5380:	00005d85 	.word	0x00005d85
		//......................................................................
		case 0x22:	if(size <  5)		{ return; }								//login change
    5384:	230e      	movs	r3, #14
    5386:	18fb      	adds	r3, r7, r3
    5388:	881b      	ldrh	r3, [r3, #0]
    538a:	2b04      	cmp	r3, #4
    538c:	d800      	bhi.n	5390 <cmd_common_process+0x9e6>
    538e:	e156      	b.n	563e <cmd_common_process+0xc94>
					//check_permission();
					save_log();
    5390:	4bb1      	ldr	r3, [pc, #708]	; (5658 <cmd_common_process+0xcae>)
    5392:	781b      	ldrb	r3, [r3, #0]
    5394:	0018      	movs	r0, r3
    5396:	4bb1      	ldr	r3, [pc, #708]	; (565c <cmd_common_process+0xcb2>)
    5398:	6819      	ldr	r1, [r3, #0]
    539a:	4bb1      	ldr	r3, [pc, #708]	; (5660 <cmd_common_process+0xcb6>)
    539c:	681a      	ldr	r2, [r3, #0]
    539e:	4bb1      	ldr	r3, [pc, #708]	; (5664 <cmd_common_process+0xcba>)
    53a0:	789b      	ldrb	r3, [r3, #2]
    53a2:	4cb1      	ldr	r4, [pc, #708]	; (5668 <cmd_common_process+0xcbe>)
    53a4:	47a0      	blx	r4
					cnt = 3;
    53a6:	230c      	movs	r3, #12
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	2203      	movs	r2, #3
    53ac:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    53ae:	230c      	movs	r3, #12
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	881a      	ldrh	r2, [r3, #0]
    53b4:	4bab      	ldr	r3, [pc, #684]	; (5664 <cmd_common_process+0xcba>)
    53b6:	18d3      	adds	r3, r2, r3
    53b8:	0018      	movs	r0, r3
    53ba:	4bac      	ldr	r3, [pc, #688]	; (566c <cmd_common_process+0xcc2>)
    53bc:	4798      	blx	r3
    53be:	230c      	movs	r3, #12
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	220c      	movs	r2, #12
    53c4:	18ba      	adds	r2, r7, r2
    53c6:	8812      	ldrh	r2, [r2, #0]
    53c8:	3240      	adds	r2, #64	; 0x40
    53ca:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    53cc:	230c      	movs	r3, #12
    53ce:	18fb      	adds	r3, r7, r3
    53d0:	881a      	ldrh	r2, [r3, #0]
    53d2:	4ba4      	ldr	r3, [pc, #656]	; (5664 <cmd_common_process+0xcba>)
    53d4:	18d3      	adds	r3, r2, r3
    53d6:	0018      	movs	r0, r3
    53d8:	4ba4      	ldr	r3, [pc, #656]	; (566c <cmd_common_process+0xcc2>)
    53da:	4798      	blx	r3
    53dc:	230c      	movs	r3, #12
    53de:	18fb      	adds	r3, r7, r3
    53e0:	220c      	movs	r2, #12
    53e2:	18ba      	adds	r2, r7, r2
    53e4:	8812      	ldrh	r2, [r2, #0]
    53e6:	3240      	adds	r2, #64	; 0x40
    53e8:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;	
    53ea:	230c      	movs	r3, #12
    53ec:	18fb      	adds	r3, r7, r3
    53ee:	881a      	ldrh	r2, [r3, #0]
    53f0:	4b9c      	ldr	r3, [pc, #624]	; (5664 <cmd_common_process+0xcba>)
    53f2:	18d3      	adds	r3, r2, r3
    53f4:	0018      	movs	r0, r3
    53f6:	4b9d      	ldr	r3, [pc, #628]	; (566c <cmd_common_process+0xcc2>)
    53f8:	4798      	blx	r3
    53fa:	230c      	movs	r3, #12
    53fc:	18fb      	adds	r3, r7, r3
    53fe:	220c      	movs	r2, #12
    5400:	18ba      	adds	r2, r7, r2
    5402:	8812      	ldrh	r2, [r2, #0]
    5404:	3240      	adds	r2, #64	; 0x40
    5406:	801a      	strh	r2, [r3, #0]
					decrypted(&cbuf[cnt]);		cnt += 64;
    5408:	230c      	movs	r3, #12
    540a:	18fb      	adds	r3, r7, r3
    540c:	881a      	ldrh	r2, [r3, #0]
    540e:	4b95      	ldr	r3, [pc, #596]	; (5664 <cmd_common_process+0xcba>)
    5410:	18d3      	adds	r3, r2, r3
    5412:	0018      	movs	r0, r3
    5414:	4b95      	ldr	r3, [pc, #596]	; (566c <cmd_common_process+0xcc2>)
    5416:	4798      	blx	r3
    5418:	230c      	movs	r3, #12
    541a:	18fb      	adds	r3, r7, r3
    541c:	220c      	movs	r2, #12
    541e:	18ba      	adds	r2, r7, r2
    5420:	8812      	ldrh	r2, [r2, #0]
    5422:	3240      	adds	r2, #64	; 0x40
    5424:	801a      	strh	r2, [r3, #0]
					
					//if (num_aus_byte(2, cbuf[256], L_SIDE) != crc16_ccit(&cbuf[3]), 256)	{}
					
					memcpy(&accnts.accnt[0].login[0], &cbuf[3], 256);
    5426:	2380      	movs	r3, #128	; 0x80
    5428:	005a      	lsls	r2, r3, #1
    542a:	4991      	ldr	r1, [pc, #580]	; (5670 <cmd_common_process+0xcc6>)
    542c:	4b91      	ldr	r3, [pc, #580]	; (5674 <cmd_common_process+0xcca>)
    542e:	0018      	movs	r0, r3
    5430:	4b91      	ldr	r3, [pc, #580]	; (5678 <cmd_common_process+0xcce>)
    5432:	4798      	blx	r3

		break;
    5434:	e099      	b.n	556a <cmd_common_process+0xbc0>
		
		//......................................................................
		case 0x23:	if(size <  5)		{ return; }								//read logs
    5436:	230e      	movs	r3, #14
    5438:	18fb      	adds	r3, r7, r3
    543a:	881b      	ldrh	r3, [r3, #0]
    543c:	2b04      	cmp	r3, #4
    543e:	d800      	bhi.n	5442 <cmd_common_process+0xa98>
    5440:	e0ff      	b.n	5642 <cmd_common_process+0xc98>
// 					check_permission();
  					save_log();
    5442:	4b85      	ldr	r3, [pc, #532]	; (5658 <cmd_common_process+0xcae>)
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	0018      	movs	r0, r3
    5448:	4b84      	ldr	r3, [pc, #528]	; (565c <cmd_common_process+0xcb2>)
    544a:	6819      	ldr	r1, [r3, #0]
    544c:	4b84      	ldr	r3, [pc, #528]	; (5660 <cmd_common_process+0xcb6>)
    544e:	681a      	ldr	r2, [r3, #0]
    5450:	4b84      	ldr	r3, [pc, #528]	; (5664 <cmd_common_process+0xcba>)
    5452:	789b      	ldrb	r3, [r3, #2]
    5454:	4c84      	ldr	r4, [pc, #528]	; (5668 <cmd_common_process+0xcbe>)
    5456:	47a0      	blx	r4
					cnt = 3; wn++;
    5458:	230c      	movs	r3, #12
    545a:	18fb      	adds	r3, r7, r3
    545c:	2203      	movs	r2, #3
    545e:	801a      	strh	r2, [r3, #0]
    5460:	230a      	movs	r3, #10
    5462:	18fb      	adds	r3, r7, r3
    5464:	881a      	ldrh	r2, [r3, #0]
    5466:	230a      	movs	r3, #10
    5468:	18fb      	adds	r3, r7, r3
    546a:	3201      	adds	r2, #1
    546c:	801a      	strh	r2, [r3, #0]
					flash_read(LOGS_ADDR + (256 * cbuf[3]), &cbuf[4], 256);		wn +=256;
    546e:	4b7d      	ldr	r3, [pc, #500]	; (5664 <cmd_common_process+0xcba>)
    5470:	78db      	ldrb	r3, [r3, #3]
    5472:	021b      	lsls	r3, r3, #8
    5474:	4a81      	ldr	r2, [pc, #516]	; (567c <cmd_common_process+0xcd2>)
    5476:	1898      	adds	r0, r3, r2
    5478:	2380      	movs	r3, #128	; 0x80
    547a:	005a      	lsls	r2, r3, #1
    547c:	4b80      	ldr	r3, [pc, #512]	; (5680 <cmd_common_process+0xcd6>)
    547e:	0019      	movs	r1, r3
    5480:	4b80      	ldr	r3, [pc, #512]	; (5684 <cmd_common_process+0xcda>)
    5482:	4798      	blx	r3
    5484:	230a      	movs	r3, #10
    5486:	18fb      	adds	r3, r7, r3
    5488:	220a      	movs	r2, #10
    548a:	18ba      	adds	r2, r7, r2
    548c:	8812      	ldrh	r2, [r2, #0]
    548e:	3201      	adds	r2, #1
    5490:	32ff      	adds	r2, #255	; 0xff
    5492:	801a      	strh	r2, [r3, #0]
		break;
    5494:	e069      	b.n	556a <cmd_common_process+0xbc0>
		//......................................................................
		case 0x27:	if(size  !=  5) { return; }									//change config
    5496:	230e      	movs	r3, #14
    5498:	18fb      	adds	r3, r7, r3
    549a:	881b      	ldrh	r3, [r3, #0]
    549c:	2b05      	cmp	r3, #5
    549e:	d000      	beq.n	54a2 <cmd_common_process+0xaf8>
    54a0:	e0d1      	b.n	5646 <cmd_common_process+0xc9c>
					//check_permission();	
					if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    54a2:	2380      	movs	r3, #128	; 0x80
    54a4:	005a      	lsls	r2, r3, #1
    54a6:	4b78      	ldr	r3, [pc, #480]	; (5688 <cmd_common_process+0xcde>)
    54a8:	0011      	movs	r1, r2
    54aa:	0018      	movs	r0, r3
    54ac:	4b77      	ldr	r3, [pc, #476]	; (568c <cmd_common_process+0xce2>)
    54ae:	4798      	blx	r3
    54b0:	1e03      	subs	r3, r0, #0
    54b2:	d159      	bne.n	5568 <cmd_common_process+0xbbe>
					memcpy(&cfg_1,&cfg_1_tmp,sizeof(CFG_1));
    54b4:	4a76      	ldr	r2, [pc, #472]	; (5690 <cmd_common_process+0xce6>)
    54b6:	4b74      	ldr	r3, [pc, #464]	; (5688 <cmd_common_process+0xcde>)
    54b8:	0010      	movs	r0, r2
    54ba:	0019      	movs	r1, r3
    54bc:	2380      	movs	r3, #128	; 0x80
    54be:	005b      	lsls	r3, r3, #1
    54c0:	001a      	movs	r2, r3
    54c2:	4b6d      	ldr	r3, [pc, #436]	; (5678 <cmd_common_process+0xcce>)
    54c4:	4798      	blx	r3
					save_log();
    54c6:	4b64      	ldr	r3, [pc, #400]	; (5658 <cmd_common_process+0xcae>)
    54c8:	781b      	ldrb	r3, [r3, #0]
    54ca:	0018      	movs	r0, r3
    54cc:	4b63      	ldr	r3, [pc, #396]	; (565c <cmd_common_process+0xcb2>)
    54ce:	6819      	ldr	r1, [r3, #0]
    54d0:	4b63      	ldr	r3, [pc, #396]	; (5660 <cmd_common_process+0xcb6>)
    54d2:	681a      	ldr	r2, [r3, #0]
    54d4:	4b63      	ldr	r3, [pc, #396]	; (5664 <cmd_common_process+0xcba>)
    54d6:	789b      	ldrb	r3, [r3, #2]
    54d8:	4c63      	ldr	r4, [pc, #396]	; (5668 <cmd_common_process+0xcbe>)
    54da:	47a0      	blx	r4
					wn |=+cfg_save();
    54dc:	4b6d      	ldr	r3, [pc, #436]	; (5694 <cmd_common_process+0xcea>)
    54de:	4798      	blx	r3
    54e0:	0003      	movs	r3, r0
    54e2:	b21a      	sxth	r2, r3
    54e4:	230a      	movs	r3, #10
    54e6:	18fb      	adds	r3, r7, r3
    54e8:	2100      	movs	r1, #0
    54ea:	5e5b      	ldrsh	r3, [r3, r1]
    54ec:	4313      	orrs	r3, r2
    54ee:	b21a      	sxth	r2, r3
    54f0:	230a      	movs	r3, #10
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	801a      	strh	r2, [r3, #0]
					
					reset=1;
    54f6:	4b68      	ldr	r3, [pc, #416]	; (5698 <cmd_common_process+0xcee>)
    54f8:	2201      	movs	r2, #1
    54fa:	801a      	strh	r2, [r3, #0]
		break;
    54fc:	e035      	b.n	556a <cmd_common_process+0xbc0>
		//......................................................................
		case 0x28:	if(size  !=  5) { return; }									//change config
    54fe:	230e      	movs	r3, #14
    5500:	18fb      	adds	r3, r7, r3
    5502:	881b      	ldrh	r3, [r3, #0]
    5504:	2b05      	cmp	r3, #5
    5506:	d000      	beq.n	550a <cmd_common_process+0xb60>
    5508:	e09f      	b.n	564a <cmd_common_process+0xca0>
					acc(WRITE);
    550a:	2001      	movs	r0, #1
    550c:	4b63      	ldr	r3, [pc, #396]	; (569c <cmd_common_process+0xcf2>)
    550e:	4798      	blx	r3
					reset=1;
    5510:	4b61      	ldr	r3, [pc, #388]	; (5698 <cmd_common_process+0xcee>)
    5512:	2201      	movs	r2, #1
    5514:	801a      	strh	r2, [r3, #0]
		break;
    5516:	e028      	b.n	556a <cmd_common_process+0xbc0>
		//......................................................................
		case 0x29:	if(size  !=  5) { return; }									//reboot
    5518:	230e      	movs	r3, #14
    551a:	18fb      	adds	r3, r7, r3
    551c:	881b      	ldrh	r3, [r3, #0]
    551e:	2b05      	cmp	r3, #5
    5520:	d000      	beq.n	5524 <cmd_common_process+0xb7a>
    5522:	e094      	b.n	564e <cmd_common_process+0xca4>
					//check_permission();
					save_log();
    5524:	4b4c      	ldr	r3, [pc, #304]	; (5658 <cmd_common_process+0xcae>)
    5526:	781b      	ldrb	r3, [r3, #0]
    5528:	0018      	movs	r0, r3
    552a:	4b4c      	ldr	r3, [pc, #304]	; (565c <cmd_common_process+0xcb2>)
    552c:	6819      	ldr	r1, [r3, #0]
    552e:	4b4c      	ldr	r3, [pc, #304]	; (5660 <cmd_common_process+0xcb6>)
    5530:	681a      	ldr	r2, [r3, #0]
    5532:	4b4c      	ldr	r3, [pc, #304]	; (5664 <cmd_common_process+0xcba>)
    5534:	789b      	ldrb	r3, [r3, #2]
    5536:	4c4c      	ldr	r4, [pc, #304]	; (5668 <cmd_common_process+0xcbe>)
    5538:	47a0      	blx	r4
					reset=1; wn++;
    553a:	4b57      	ldr	r3, [pc, #348]	; (5698 <cmd_common_process+0xcee>)
    553c:	2201      	movs	r2, #1
    553e:	801a      	strh	r2, [r3, #0]
    5540:	230a      	movs	r3, #10
    5542:	18fb      	adds	r3, r7, r3
    5544:	881a      	ldrh	r2, [r3, #0]
    5546:	230a      	movs	r3, #10
    5548:	18fb      	adds	r3, r7, r3
    554a:	3201      	adds	r2, #1
    554c:	801a      	strh	r2, [r3, #0]
		break;
    554e:	e00c      	b.n	556a <cmd_common_process+0xbc0>
		break;
    5550:	46c0      	nop			; (mov r8, r8)
    5552:	e00a      	b.n	556a <cmd_common_process+0xbc0>
					if(ixo > sizeof(CFG_1)	) { break;  }
    5554:	46c0      	nop			; (mov r8, r8)
    5556:	e008      	b.n	556a <cmd_common_process+0xbc0>
					if(ixo > sizeof(CFG_2)	) { break;  }
    5558:	46c0      	nop			; (mov r8, r8)
    555a:	e006      	b.n	556a <cmd_common_process+0xbc0>
					if(cnt  ==  0) { break; }
    555c:	46c0      	nop			; (mov r8, r8)
    555e:	e004      	b.n	556a <cmd_common_process+0xbc0>
					if(ixo       >= sizeof(CFG_1)) { break; }
    5560:	46c0      	nop			; (mov r8, r8)
    5562:	e002      	b.n	556a <cmd_common_process+0xbc0>
					if((cnt+ixo) >  sizeof(CFG_1)) { break; }
    5564:	46c0      	nop			; (mov r8, r8)
    5566:	e000      	b.n	556a <cmd_common_process+0xbc0>
					if((crc16_ccit((BYTE*)&cfg_1_tmp,sizeof(CFG_1)) != 0))		{break;}		
    5568:	46c0      	nop			; (mov r8, r8)
		//......................................................................
		
		default :	   return;
	}
	
	cbuf[2]|=0x80;
    556a:	4b3e      	ldr	r3, [pc, #248]	; (5664 <cmd_common_process+0xcba>)
    556c:	789b      	ldrb	r3, [r3, #2]
    556e:	2280      	movs	r2, #128	; 0x80
    5570:	4252      	negs	r2, r2
    5572:	4313      	orrs	r3, r2
    5574:	b2da      	uxtb	r2, r3
    5576:	4b3b      	ldr	r3, [pc, #236]	; (5664 <cmd_common_process+0xcba>)
    5578:	709a      	strb	r2, [r3, #2]

	cs= crc16_ccit(cbuf,wn);
    557a:	1cbc      	adds	r4, r7, #2
    557c:	230a      	movs	r3, #10
    557e:	18fb      	adds	r3, r7, r3
    5580:	881a      	ldrh	r2, [r3, #0]
    5582:	4b38      	ldr	r3, [pc, #224]	; (5664 <cmd_common_process+0xcba>)
    5584:	0011      	movs	r1, r2
    5586:	0018      	movs	r0, r3
    5588:	4b40      	ldr	r3, [pc, #256]	; (568c <cmd_common_process+0xce2>)
    558a:	4798      	blx	r3
    558c:	0003      	movs	r3, r0
    558e:	8023      	strh	r3, [r4, #0]
	
	cbuf[wn] = (BYTE)(cs & 0x00ff);         wn++;
    5590:	230a      	movs	r3, #10
    5592:	18fb      	adds	r3, r7, r3
    5594:	881b      	ldrh	r3, [r3, #0]
    5596:	1cba      	adds	r2, r7, #2
    5598:	8812      	ldrh	r2, [r2, #0]
    559a:	b2d1      	uxtb	r1, r2
    559c:	4a31      	ldr	r2, [pc, #196]	; (5664 <cmd_common_process+0xcba>)
    559e:	54d1      	strb	r1, [r2, r3]
    55a0:	230a      	movs	r3, #10
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	881a      	ldrh	r2, [r3, #0]
    55a6:	230a      	movs	r3, #10
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	3201      	adds	r2, #1
    55ac:	801a      	strh	r2, [r3, #0]
	cbuf[wn] = (BYTE)((cs & 0xff00) >> 8);  wn++;
    55ae:	230a      	movs	r3, #10
    55b0:	18fb      	adds	r3, r7, r3
    55b2:	881b      	ldrh	r3, [r3, #0]
    55b4:	1cba      	adds	r2, r7, #2
    55b6:	8812      	ldrh	r2, [r2, #0]
    55b8:	0a12      	lsrs	r2, r2, #8
    55ba:	b292      	uxth	r2, r2
    55bc:	b2d1      	uxtb	r1, r2
    55be:	4a29      	ldr	r2, [pc, #164]	; (5664 <cmd_common_process+0xcba>)
    55c0:	54d1      	strb	r1, [r2, r3]
    55c2:	230a      	movs	r3, #10
    55c4:	18fb      	adds	r3, r7, r3
    55c6:	881a      	ldrh	r2, [r3, #0]
    55c8:	230a      	movs	r3, #10
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	3201      	adds	r2, #1
    55ce:	801a      	strh	r2, [r3, #0]
	
	memcpy((BYTE*)&eth_sock[0].data,cbuf,wn);
    55d0:	230a      	movs	r3, #10
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	881a      	ldrh	r2, [r3, #0]
    55d6:	4923      	ldr	r1, [pc, #140]	; (5664 <cmd_common_process+0xcba>)
    55d8:	4b31      	ldr	r3, [pc, #196]	; (56a0 <cmd_common_process+0xcf6>)
    55da:	0018      	movs	r0, r3
    55dc:	4b26      	ldr	r3, [pc, #152]	; (5678 <cmd_common_process+0xcce>)
    55de:	4798      	blx	r3
	
	eth_sock[0].len[0]=((wn & 0xFF00)>>8);
    55e0:	230a      	movs	r3, #10
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	881b      	ldrh	r3, [r3, #0]
    55e6:	0a1b      	lsrs	r3, r3, #8
    55e8:	b29b      	uxth	r3, r3
    55ea:	b2da      	uxtb	r2, r3
    55ec:	4b2d      	ldr	r3, [pc, #180]	; (56a4 <cmd_common_process+0xcfa>)
    55ee:	719a      	strb	r2, [r3, #6]
	eth_sock[0].len[1]=(wn & 0x00FF);
    55f0:	230a      	movs	r3, #10
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	881b      	ldrh	r3, [r3, #0]
    55f6:	b2da      	uxtb	r2, r3
    55f8:	4b2a      	ldr	r3, [pc, #168]	; (56a4 <cmd_common_process+0xcfa>)
    55fa:	71da      	strb	r2, [r3, #7]
	eth_sock[0].w_status=1;
    55fc:	4b29      	ldr	r3, [pc, #164]	; (56a4 <cmd_common_process+0xcfa>)
    55fe:	4a2a      	ldr	r2, [pc, #168]	; (56a8 <cmd_common_process+0xcfe>)
    5600:	2101      	movs	r1, #1
    5602:	5499      	strb	r1, [r3, r2]
    5604:	e024      	b.n	5650 <cmd_common_process+0xca6>
	if(eth_sock[0].r_status==FALSE) {return;}
    5606:	46c0      	nop			; (mov r8, r8)
    5608:	e022      	b.n	5650 <cmd_common_process+0xca6>
	if(size	 <    5			  )	{ return; }
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	e020      	b.n	5650 <cmd_common_process+0xca6>
	if(crc16_ccit(cbuf,size)   !=   0)		{ return; }
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	e01e      	b.n	5650 <cmd_common_process+0xca6>
	if(addr !=  0){return;}
    5612:	46c0      	nop			; (mov r8, r8)
    5614:	e01c      	b.n	5650 <cmd_common_process+0xca6>
	if ((cbuf[2] != 0x20) && (!log_stat)) {return 0;}
    5616:	46c0      	nop			; (mov r8, r8)
    5618:	e01a      	b.n	5650 <cmd_common_process+0xca6>
		default :	   return;
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	e018      	b.n	5650 <cmd_common_process+0xca6>
		case 0x00:	if(size  !=  9) { return; }
    561e:	46c0      	nop			; (mov r8, r8)
    5620:	e016      	b.n	5650 <cmd_common_process+0xca6>
		case 0x01:	if(size != 6) { return; }             // CMD=0x07 Read CFG		
    5622:	46c0      	nop			; (mov r8, r8)
    5624:	e014      	b.n	5650 <cmd_common_process+0xca6>
		case 0x07:	if(size != 7)			{ return; }										// CMD=0x07 Read CFG_1	
    5626:	46c0      	nop			; (mov r8, r8)
    5628:	e012      	b.n	5650 <cmd_common_process+0xca6>
		case 0x08:	if(size != 7) { return; }												// CMD=0x08 Read CFG 2
    562a:	46c0      	nop			; (mov r8, r8)
    562c:	e010      	b.n	5650 <cmd_common_process+0xca6>
		case 0x10:	if(size <  6) { return; }
    562e:	46c0      	nop			; (mov r8, r8)
    5630:	e00e      	b.n	5650 <cmd_common_process+0xca6>
		case 0x17:	if(size  <  7) { return; }
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	e00c      	b.n	5650 <cmd_common_process+0xca6>
		case 0x20:	if(size <  7)		{ return; }								//login
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	e00a      	b.n	5650 <cmd_common_process+0xca6>
		case 0x21:	if(size < 5)		{ return; }								//login send
    563a:	46c0      	nop			; (mov r8, r8)
    563c:	e008      	b.n	5650 <cmd_common_process+0xca6>
		case 0x22:	if(size <  5)		{ return; }								//login change
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	e006      	b.n	5650 <cmd_common_process+0xca6>
		case 0x23:	if(size <  5)		{ return; }								//read logs
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	e004      	b.n	5650 <cmd_common_process+0xca6>
		case 0x27:	if(size  !=  5) { return; }									//change config
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	e002      	b.n	5650 <cmd_common_process+0xca6>
		case 0x28:	if(size  !=  5) { return; }									//change config
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	e000      	b.n	5650 <cmd_common_process+0xca6>
		case 0x29:	if(size  !=  5) { return; }									//reboot
    564e:	46c0      	nop			; (mov r8, r8)
}
    5650:	46bd      	mov	sp, r7
    5652:	b005      	add	sp, #20
    5654:	bd90      	pop	{r4, r7, pc}
    5656:	46c0      	nop			; (mov r8, r8)
    5658:	20000451 	.word	0x20000451
    565c:	2000049c 	.word	0x2000049c
    5660:	20000454 	.word	0x20000454
    5664:	200004a0 	.word	0x200004a0
    5668:	00004585 	.word	0x00004585
    566c:	00005db3 	.word	0x00005db3
    5670:	200004a3 	.word	0x200004a3
    5674:	20002550 	.word	0x20002550
    5678:	0000c4e5 	.word	0x0000c4e5
    567c:	0003f300 	.word	0x0003f300
    5680:	200004a4 	.word	0x200004a4
    5684:	000066d5 	.word	0x000066d5
    5688:	20003cc0 	.word	0x20003cc0
    568c:	00005bfd 	.word	0x00005bfd
    5690:	20003dc0 	.word	0x20003dc0
    5694:	0000aca9 	.word	0x0000aca9
    5698:	20002548 	.word	0x20002548
    569c:	00004215 	.word	0x00004215
    56a0:	200005d4 	.word	0x200005d4
    56a4:	200005cc 	.word	0x200005cc
    56a8:	000005d2 	.word	0x000005d2

000056ac <cmd_usart_process>:

void cmd_usart_process (void)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	af00      	add	r7, sp, #0
	static BYTE n_port=1;
	
	for(n_port=1;n_port<5;n_port++)
    56b0:	4b13      	ldr	r3, [pc, #76]	; (5700 <cmd_usart_process+0x54>)
    56b2:	2201      	movs	r2, #1
    56b4:	701a      	strb	r2, [r3, #0]
    56b6:	e01b      	b.n	56f0 <cmd_usart_process+0x44>
	{
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <cmd_usart_process+0x54>)
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	1e5a      	subs	r2, r3, #1
    56be:	4911      	ldr	r1, [pc, #68]	; (5704 <cmd_usart_process+0x58>)
    56c0:	2034      	movs	r0, #52	; 0x34
    56c2:	0013      	movs	r3, r2
    56c4:	005b      	lsls	r3, r3, #1
    56c6:	189b      	adds	r3, r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	189b      	adds	r3, r3, r2
    56cc:	18cb      	adds	r3, r1, r3
    56ce:	181b      	adds	r3, r3, r0
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d005      	beq.n	56e2 <cmd_usart_process+0x36>
		usart_process(n_port);
    56d6:	4b0a      	ldr	r3, [pc, #40]	; (5700 <cmd_usart_process+0x54>)
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	0018      	movs	r0, r3
    56dc:	f000 f814 	bl	5708 <usart_process>
    56e0:	e000      	b.n	56e4 <cmd_usart_process+0x38>
		if(cfg_1.sock_rs485[n_port-1].en==FALSE) {continue;}
    56e2:	46c0      	nop			; (mov r8, r8)
	for(n_port=1;n_port<5;n_port++)
    56e4:	4b06      	ldr	r3, [pc, #24]	; (5700 <cmd_usart_process+0x54>)
    56e6:	781b      	ldrb	r3, [r3, #0]
    56e8:	3301      	adds	r3, #1
    56ea:	b2da      	uxtb	r2, r3
    56ec:	4b04      	ldr	r3, [pc, #16]	; (5700 <cmd_usart_process+0x54>)
    56ee:	701a      	strb	r2, [r3, #0]
    56f0:	4b03      	ldr	r3, [pc, #12]	; (5700 <cmd_usart_process+0x54>)
    56f2:	781b      	ldrb	r3, [r3, #0]
    56f4:	2b04      	cmp	r3, #4
    56f6:	d9df      	bls.n	56b8 <cmd_usart_process+0xc>
	}
}
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	46bd      	mov	sp, r7
    56fc:	bd80      	pop	{r7, pc}
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	20000000 	.word	0x20000000
    5704:	20003dc0 	.word	0x20003dc0

00005708 <usart_process>:

void usart_process (BYTE n_port)
{
    5708:	b5b0      	push	{r4, r5, r7, lr}
    570a:	b084      	sub	sp, #16
    570c:	af00      	add	r7, sp, #0
    570e:	0002      	movs	r2, r0
    5710:	1dfb      	adds	r3, r7, #7
    5712:	701a      	strb	r2, [r3, #0]
	WORD size=0;
    5714:	230e      	movs	r3, #14
    5716:	18fb      	adds	r3, r7, r3
    5718:	2200      	movs	r2, #0
    571a:	801a      	strh	r2, [r3, #0]
	WORD crc;
	
	switch(port[n_port-1].stage)
    571c:	1dfb      	adds	r3, r7, #7
    571e:	781b      	ldrb	r3, [r3, #0]
    5720:	1e5a      	subs	r2, r3, #1
    5722:	48b8      	ldr	r0, [pc, #736]	; (5a04 <usart_process+0x2fc>)
    5724:	2387      	movs	r3, #135	; 0x87
    5726:	0099      	lsls	r1, r3, #2
    5728:	0013      	movs	r3, r2
    572a:	00db      	lsls	r3, r3, #3
    572c:	189b      	adds	r3, r3, r2
    572e:	019b      	lsls	r3, r3, #6
    5730:	18c3      	adds	r3, r0, r3
    5732:	185b      	adds	r3, r3, r1
    5734:	781b      	ldrb	r3, [r3, #0]
    5736:	b2db      	uxtb	r3, r3
    5738:	2b00      	cmp	r3, #0
    573a:	d003      	beq.n	5744 <usart_process+0x3c>
    573c:	2b01      	cmp	r3, #1
    573e:	d100      	bne.n	5742 <usart_process+0x3a>
    5740:	e0fd      	b.n	593e <usart_process+0x236>
    5742:	e235      	b.n	5bb0 <usart_process+0x4a8>
	{
		case RS485_WRITE:
			//ETH message check
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5744:	1dfb      	adds	r3, r7, #7
    5746:	781b      	ldrb	r3, [r3, #0]
    5748:	4aaf      	ldr	r2, [pc, #700]	; (5a08 <usart_process+0x300>)
    574a:	49b0      	ldr	r1, [pc, #704]	; (5a0c <usart_process+0x304>)
    574c:	48b0      	ldr	r0, [pc, #704]	; (5a10 <usart_process+0x308>)
    574e:	4343      	muls	r3, r0
    5750:	18d3      	adds	r3, r2, r3
    5752:	185b      	adds	r3, r3, r1
    5754:	781b      	ldrb	r3, [r3, #0]
    5756:	2b00      	cmp	r3, #0
    5758:	d100      	bne.n	575c <usart_process+0x54>
    575a:	e239      	b.n	5bd0 <usart_process+0x4c8>
			
			if(cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    575c:	1dfb      	adds	r3, r7, #7
    575e:	781b      	ldrb	r3, [r3, #0]
    5760:	1e5a      	subs	r2, r3, #1
    5762:	49ac      	ldr	r1, [pc, #688]	; (5a14 <usart_process+0x30c>)
    5764:	206a      	movs	r0, #106	; 0x6a
    5766:	0013      	movs	r3, r2
    5768:	00db      	lsls	r3, r3, #3
    576a:	189b      	adds	r3, r3, r2
    576c:	005b      	lsls	r3, r3, #1
    576e:	18cb      	adds	r3, r1, r3
    5770:	181b      	adds	r3, r3, r0
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b00      	cmp	r3, #0
    5776:	d008      	beq.n	578a <usart_process+0x82>
    5778:	1dfb      	adds	r3, r7, #7
    577a:	781b      	ldrb	r3, [r3, #0]
    577c:	3b01      	subs	r3, #1
    577e:	0018      	movs	r0, r3
    5780:	4ba5      	ldr	r3, [pc, #660]	; (5a18 <usart_process+0x310>)
    5782:	4798      	blx	r3
    5784:	1e03      	subs	r3, r0, #0
    5786:	d100      	bne.n	578a <usart_process+0x82>
    5788:	e224      	b.n	5bd4 <usart_process+0x4cc>
			
			port[n_port-1].time_port = port[n_port-1].tout_port*10;							//check timeout
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	1e5a      	subs	r2, r3, #1
    5790:	1dfb      	adds	r3, r7, #7
    5792:	781b      	ldrb	r3, [r3, #0]
    5794:	1e59      	subs	r1, r3, #1
    5796:	4c9b      	ldr	r4, [pc, #620]	; (5a04 <usart_process+0x2fc>)
    5798:	2386      	movs	r3, #134	; 0x86
    579a:	0098      	lsls	r0, r3, #2
    579c:	000b      	movs	r3, r1
    579e:	00db      	lsls	r3, r3, #3
    57a0:	185b      	adds	r3, r3, r1
    57a2:	019b      	lsls	r3, r3, #6
    57a4:	18e3      	adds	r3, r4, r3
    57a6:	181b      	adds	r3, r3, r0
    57a8:	881b      	ldrh	r3, [r3, #0]
    57aa:	b29b      	uxth	r3, r3
    57ac:	0019      	movs	r1, r3
    57ae:	000b      	movs	r3, r1
    57b0:	009b      	lsls	r3, r3, #2
    57b2:	185b      	adds	r3, r3, r1
    57b4:	005b      	lsls	r3, r3, #1
    57b6:	001c      	movs	r4, r3
    57b8:	4892      	ldr	r0, [pc, #584]	; (5a04 <usart_process+0x2fc>)
    57ba:	2388      	movs	r3, #136	; 0x88
    57bc:	0099      	lsls	r1, r3, #2
    57be:	0013      	movs	r3, r2
    57c0:	00db      	lsls	r3, r3, #3
    57c2:	189b      	adds	r3, r3, r2
    57c4:	019b      	lsls	r3, r3, #6
    57c6:	18c3      	adds	r3, r0, r3
    57c8:	185b      	adds	r3, r3, r1
    57ca:	601c      	str	r4, [r3, #0]
		
			size = eth_sock[n_port].len[0] << 8 | eth_sock[n_port].len[1];				//give size
    57cc:	1dfb      	adds	r3, r7, #7
    57ce:	781b      	ldrb	r3, [r3, #0]
    57d0:	4a8d      	ldr	r2, [pc, #564]	; (5a08 <usart_process+0x300>)
    57d2:	498f      	ldr	r1, [pc, #572]	; (5a10 <usart_process+0x308>)
    57d4:	434b      	muls	r3, r1
    57d6:	18d3      	adds	r3, r2, r3
    57d8:	3306      	adds	r3, #6
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	021b      	lsls	r3, r3, #8
    57de:	b21a      	sxth	r2, r3
    57e0:	1dfb      	adds	r3, r7, #7
    57e2:	781b      	ldrb	r3, [r3, #0]
    57e4:	4988      	ldr	r1, [pc, #544]	; (5a08 <usart_process+0x300>)
    57e6:	488a      	ldr	r0, [pc, #552]	; (5a10 <usart_process+0x308>)
    57e8:	4343      	muls	r3, r0
    57ea:	18cb      	adds	r3, r1, r3
    57ec:	3307      	adds	r3, #7
    57ee:	781b      	ldrb	r3, [r3, #0]
    57f0:	b21b      	sxth	r3, r3
    57f2:	4313      	orrs	r3, r2
    57f4:	b21a      	sxth	r2, r3
    57f6:	230e      	movs	r3, #14
    57f8:	18fb      	adds	r3, r7, r3
    57fa:	801a      	strh	r2, [r3, #0]
		
			if(size>USART_BUF_SIZE)	{eth_sock[n_port].r_status = 0; return;}			//check overload
    57fc:	230e      	movs	r3, #14
    57fe:	18fb      	adds	r3, r7, r3
    5800:	881a      	ldrh	r2, [r3, #0]
    5802:	2380      	movs	r3, #128	; 0x80
    5804:	005b      	lsls	r3, r3, #1
    5806:	429a      	cmp	r2, r3
    5808:	d90a      	bls.n	5820 <usart_process+0x118>
    580a:	1dfb      	adds	r3, r7, #7
    580c:	781b      	ldrb	r3, [r3, #0]
    580e:	4a7e      	ldr	r2, [pc, #504]	; (5a08 <usart_process+0x300>)
    5810:	497e      	ldr	r1, [pc, #504]	; (5a0c <usart_process+0x304>)
    5812:	487f      	ldr	r0, [pc, #508]	; (5a10 <usart_process+0x308>)
    5814:	4343      	muls	r3, r0
    5816:	18d3      	adds	r3, r2, r3
    5818:	185b      	adds	r3, r3, r1
    581a:	2200      	movs	r2, #0
    581c:	701a      	strb	r2, [r3, #0]
    581e:	e1dc      	b.n	5bda <usart_process+0x4d2>
				
			switch(cfg_1.sock_rs485[n_port - 1].pl)
    5820:	1dfb      	adds	r3, r7, #7
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	1e5a      	subs	r2, r3, #1
    5826:	497b      	ldr	r1, [pc, #492]	; (5a14 <usart_process+0x30c>)
    5828:	2036      	movs	r0, #54	; 0x36
    582a:	0013      	movs	r3, r2
    582c:	005b      	lsls	r3, r3, #1
    582e:	189b      	adds	r3, r3, r2
    5830:	009b      	lsls	r3, r3, #2
    5832:	189b      	adds	r3, r3, r2
    5834:	18cb      	adds	r3, r1, r3
    5836:	181b      	adds	r3, r3, r0
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	2b02      	cmp	r3, #2
    583c:	d150      	bne.n	58e0 <usart_process+0x1d8>
			{
				case MBUS:		
					crc = crc16_mbus(eth_sock[n_port].data+MBAP_HDR_LEN, size - MBAP_HDR_LEN);
    583e:	1dfb      	adds	r3, r7, #7
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	4a73      	ldr	r2, [pc, #460]	; (5a10 <usart_process+0x308>)
    5844:	4353      	muls	r3, r2
    5846:	3308      	adds	r3, #8
    5848:	001a      	movs	r2, r3
    584a:	4b6f      	ldr	r3, [pc, #444]	; (5a08 <usart_process+0x300>)
    584c:	18d3      	adds	r3, r2, r3
    584e:	1d9a      	adds	r2, r3, #6
    5850:	230e      	movs	r3, #14
    5852:	18fb      	adds	r3, r7, r3
    5854:	881b      	ldrh	r3, [r3, #0]
    5856:	3b06      	subs	r3, #6
    5858:	b29b      	uxth	r3, r3
    585a:	210c      	movs	r1, #12
    585c:	187c      	adds	r4, r7, r1
    585e:	0019      	movs	r1, r3
    5860:	0010      	movs	r0, r2
    5862:	4b6e      	ldr	r3, [pc, #440]	; (5a1c <usart_process+0x314>)
    5864:	4798      	blx	r3
    5866:	0003      	movs	r3, r0
    5868:	8023      	strh	r3, [r4, #0]
					eth_sock[n_port].data[size] = crc; 
    586a:	1dfb      	adds	r3, r7, #7
    586c:	781a      	ldrb	r2, [r3, #0]
    586e:	230e      	movs	r3, #14
    5870:	18fb      	adds	r3, r7, r3
    5872:	881b      	ldrh	r3, [r3, #0]
    5874:	210c      	movs	r1, #12
    5876:	1879      	adds	r1, r7, r1
    5878:	8809      	ldrh	r1, [r1, #0]
    587a:	b2cc      	uxtb	r4, r1
    587c:	4962      	ldr	r1, [pc, #392]	; (5a08 <usart_process+0x300>)
    587e:	4864      	ldr	r0, [pc, #400]	; (5a10 <usart_process+0x308>)
    5880:	4342      	muls	r2, r0
    5882:	188a      	adds	r2, r1, r2
    5884:	18d3      	adds	r3, r2, r3
    5886:	3308      	adds	r3, #8
    5888:	1c22      	adds	r2, r4, #0
    588a:	701a      	strb	r2, [r3, #0]
					eth_sock[n_port].data[size + 1] = crc >> 8;
    588c:	1dfb      	adds	r3, r7, #7
    588e:	781a      	ldrb	r2, [r3, #0]
    5890:	230e      	movs	r3, #14
    5892:	18fb      	adds	r3, r7, r3
    5894:	881b      	ldrh	r3, [r3, #0]
    5896:	3301      	adds	r3, #1
    5898:	210c      	movs	r1, #12
    589a:	1879      	adds	r1, r7, r1
    589c:	8809      	ldrh	r1, [r1, #0]
    589e:	0a09      	lsrs	r1, r1, #8
    58a0:	b289      	uxth	r1, r1
    58a2:	b2cc      	uxtb	r4, r1
    58a4:	4958      	ldr	r1, [pc, #352]	; (5a08 <usart_process+0x300>)
    58a6:	485a      	ldr	r0, [pc, #360]	; (5a10 <usart_process+0x308>)
    58a8:	4342      	muls	r2, r0
    58aa:	188a      	adds	r2, r1, r2
    58ac:	18d3      	adds	r3, r2, r3
    58ae:	3308      	adds	r3, #8
    58b0:	1c22      	adds	r2, r4, #0
    58b2:	701a      	strb	r2, [r3, #0]
					usart_write(n_port - 1, eth_sock[n_port].data + MBAP_HDR_LEN, size - MBAP_HDR_LEN + 2);
    58b4:	1dfb      	adds	r3, r7, #7
    58b6:	781b      	ldrb	r3, [r3, #0]
    58b8:	3b01      	subs	r3, #1
    58ba:	b2d8      	uxtb	r0, r3
    58bc:	1dfb      	adds	r3, r7, #7
    58be:	781b      	ldrb	r3, [r3, #0]
    58c0:	4a53      	ldr	r2, [pc, #332]	; (5a10 <usart_process+0x308>)
    58c2:	4353      	muls	r3, r2
    58c4:	3308      	adds	r3, #8
    58c6:	001a      	movs	r2, r3
    58c8:	4b4f      	ldr	r3, [pc, #316]	; (5a08 <usart_process+0x300>)
    58ca:	18d3      	adds	r3, r2, r3
    58cc:	1d99      	adds	r1, r3, #6
    58ce:	230e      	movs	r3, #14
    58d0:	18fb      	adds	r3, r7, r3
    58d2:	881b      	ldrh	r3, [r3, #0]
    58d4:	3b04      	subs	r3, #4
    58d6:	b29b      	uxth	r3, r3
    58d8:	001a      	movs	r2, r3
    58da:	4b51      	ldr	r3, [pc, #324]	; (5a20 <usart_process+0x318>)
    58dc:	4798      	blx	r3
				break;
    58de:	e012      	b.n	5906 <usart_process+0x1fe>
				default://GATE
					usart_write(n_port - 1, eth_sock[n_port].data, size);
    58e0:	1dfb      	adds	r3, r7, #7
    58e2:	781b      	ldrb	r3, [r3, #0]
    58e4:	3b01      	subs	r3, #1
    58e6:	b2d8      	uxtb	r0, r3
    58e8:	1dfb      	adds	r3, r7, #7
    58ea:	781b      	ldrb	r3, [r3, #0]
    58ec:	4a48      	ldr	r2, [pc, #288]	; (5a10 <usart_process+0x308>)
    58ee:	4353      	muls	r3, r2
    58f0:	3308      	adds	r3, #8
    58f2:	001a      	movs	r2, r3
    58f4:	4b44      	ldr	r3, [pc, #272]	; (5a08 <usart_process+0x300>)
    58f6:	18d1      	adds	r1, r2, r3
    58f8:	230e      	movs	r3, #14
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	881b      	ldrh	r3, [r3, #0]
    58fe:	001a      	movs	r2, r3
    5900:	4b47      	ldr	r3, [pc, #284]	; (5a20 <usart_process+0x318>)
    5902:	4798      	blx	r3
				break;
    5904:	46c0      	nop			; (mov r8, r8)
			}
			port[n_port-1].stage = RS485_READ;
    5906:	1dfb      	adds	r3, r7, #7
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	1e5a      	subs	r2, r3, #1
    590c:	483d      	ldr	r0, [pc, #244]	; (5a04 <usart_process+0x2fc>)
    590e:	2387      	movs	r3, #135	; 0x87
    5910:	0099      	lsls	r1, r3, #2
    5912:	0013      	movs	r3, r2
    5914:	00db      	lsls	r3, r3, #3
    5916:	189b      	adds	r3, r3, r2
    5918:	019b      	lsls	r3, r3, #6
    591a:	18c3      	adds	r3, r0, r3
    591c:	185b      	adds	r3, r3, r1
    591e:	2201      	movs	r2, #1
    5920:	701a      	strb	r2, [r3, #0]
			port[n_port-1].rn = 0;
    5922:	1dfb      	adds	r3, r7, #7
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	1e5a      	subs	r2, r3, #1
    5928:	4936      	ldr	r1, [pc, #216]	; (5a04 <usart_process+0x2fc>)
    592a:	483e      	ldr	r0, [pc, #248]	; (5a24 <usart_process+0x31c>)
    592c:	0013      	movs	r3, r2
    592e:	00db      	lsls	r3, r3, #3
    5930:	189b      	adds	r3, r3, r2
    5932:	019b      	lsls	r3, r3, #6
    5934:	18cb      	adds	r3, r1, r3
    5936:	181b      	adds	r3, r3, r0
    5938:	2200      	movs	r2, #0
    593a:	801a      	strh	r2, [r3, #0]

		return;
    593c:	e14d      	b.n	5bda <usart_process+0x4d2>
		case RS485_READ://UP
			size = usart_read(n_port - 1, port[n_port-1].rbuf, USART_BUF_SIZE);   //give mess size
    593e:	1dfb      	adds	r3, r7, #7
    5940:	781b      	ldrb	r3, [r3, #0]
    5942:	3b01      	subs	r3, #1
    5944:	b2d8      	uxtb	r0, r3
    5946:	1dfb      	adds	r3, r7, #7
    5948:	781b      	ldrb	r3, [r3, #0]
    594a:	1e5a      	subs	r2, r3, #1
    594c:	0013      	movs	r3, r2
    594e:	00db      	lsls	r3, r3, #3
    5950:	189b      	adds	r3, r3, r2
    5952:	019b      	lsls	r3, r3, #6
    5954:	3309      	adds	r3, #9
    5956:	33ff      	adds	r3, #255	; 0xff
    5958:	001a      	movs	r2, r3
    595a:	4b2a      	ldr	r3, [pc, #168]	; (5a04 <usart_process+0x2fc>)
    595c:	18d3      	adds	r3, r2, r3
    595e:	1c59      	adds	r1, r3, #1
    5960:	230e      	movs	r3, #14
    5962:	18fc      	adds	r4, r7, r3
    5964:	2380      	movs	r3, #128	; 0x80
    5966:	005b      	lsls	r3, r3, #1
    5968:	001a      	movs	r2, r3
    596a:	4b2f      	ldr	r3, [pc, #188]	; (5a28 <usart_process+0x320>)
    596c:	4798      	blx	r3
    596e:	0003      	movs	r3, r0
    5970:	8023      	strh	r3, [r4, #0]
			if (size != 0)
    5972:	230e      	movs	r3, #14
    5974:	18fb      	adds	r3, r7, r3
    5976:	881b      	ldrh	r3, [r3, #0]
    5978:	2b00      	cmp	r3, #0
    597a:	d100      	bne.n	597e <usart_process+0x276>
    597c:	e0e3      	b.n	5b46 <usart_process+0x43e>
			{
				switch (cfg_1.sock_rs485[n_port - 1].pl)
    597e:	1dfb      	adds	r3, r7, #7
    5980:	781b      	ldrb	r3, [r3, #0]
    5982:	1e5a      	subs	r2, r3, #1
    5984:	4923      	ldr	r1, [pc, #140]	; (5a14 <usart_process+0x30c>)
    5986:	2036      	movs	r0, #54	; 0x36
    5988:	0013      	movs	r3, r2
    598a:	005b      	lsls	r3, r3, #1
    598c:	189b      	adds	r3, r3, r2
    598e:	009b      	lsls	r3, r3, #2
    5990:	189b      	adds	r3, r3, r2
    5992:	18cb      	adds	r3, r1, r3
    5994:	181b      	adds	r3, r3, r0
    5996:	781b      	ldrb	r3, [r3, #0]
    5998:	2b02      	cmp	r3, #2
    599a:	d149      	bne.n	5a30 <usart_process+0x328>
				{
					case MBUS:
					
						memcpy(eth_sock[n_port].data + MBAP_HDR_LEN, port[n_port-1].rbuf, size);
    599c:	1dfb      	adds	r3, r7, #7
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	4a1b      	ldr	r2, [pc, #108]	; (5a10 <usart_process+0x308>)
    59a2:	4353      	muls	r3, r2
    59a4:	3308      	adds	r3, #8
    59a6:	001a      	movs	r2, r3
    59a8:	4b17      	ldr	r3, [pc, #92]	; (5a08 <usart_process+0x300>)
    59aa:	18d3      	adds	r3, r2, r3
    59ac:	1d98      	adds	r0, r3, #6
    59ae:	1dfb      	adds	r3, r7, #7
    59b0:	781b      	ldrb	r3, [r3, #0]
    59b2:	1e5a      	subs	r2, r3, #1
    59b4:	0013      	movs	r3, r2
    59b6:	00db      	lsls	r3, r3, #3
    59b8:	189b      	adds	r3, r3, r2
    59ba:	019b      	lsls	r3, r3, #6
    59bc:	3309      	adds	r3, #9
    59be:	33ff      	adds	r3, #255	; 0xff
    59c0:	001a      	movs	r2, r3
    59c2:	4b10      	ldr	r3, [pc, #64]	; (5a04 <usart_process+0x2fc>)
    59c4:	18d3      	adds	r3, r2, r3
    59c6:	1c59      	adds	r1, r3, #1
    59c8:	230e      	movs	r3, #14
    59ca:	18fb      	adds	r3, r7, r3
    59cc:	881b      	ldrh	r3, [r3, #0]
    59ce:	001a      	movs	r2, r3
    59d0:	4b16      	ldr	r3, [pc, #88]	; (5a2c <usart_process+0x324>)
    59d2:	4798      	blx	r3
						size += MBAP_HDR_LEN - 2;
    59d4:	230e      	movs	r3, #14
    59d6:	18fb      	adds	r3, r7, r3
    59d8:	220e      	movs	r2, #14
    59da:	18ba      	adds	r2, r7, r2
    59dc:	8812      	ldrh	r2, [r2, #0]
    59de:	3204      	adds	r2, #4
    59e0:	801a      	strh	r2, [r3, #0]
						eth_sock[n_port].data[5]=size-MBAP_HDR_LEN;
    59e2:	1dfb      	adds	r3, r7, #7
    59e4:	781b      	ldrb	r3, [r3, #0]
    59e6:	220e      	movs	r2, #14
    59e8:	18ba      	adds	r2, r7, r2
    59ea:	8812      	ldrh	r2, [r2, #0]
    59ec:	b2d2      	uxtb	r2, r2
    59ee:	3a06      	subs	r2, #6
    59f0:	b2d0      	uxtb	r0, r2
    59f2:	4a05      	ldr	r2, [pc, #20]	; (5a08 <usart_process+0x300>)
    59f4:	4906      	ldr	r1, [pc, #24]	; (5a10 <usart_process+0x308>)
    59f6:	434b      	muls	r3, r1
    59f8:	18d3      	adds	r3, r2, r3
    59fa:	330d      	adds	r3, #13
    59fc:	1c02      	adds	r2, r0, #0
    59fe:	701a      	strb	r2, [r3, #0]
					break;
    5a00:	e032      	b.n	5a68 <usart_process+0x360>
    5a02:	46c0      	nop			; (mov r8, r8)
    5a04:	200031f8 	.word	0x200031f8
    5a08:	200005cc 	.word	0x200005cc
    5a0c:	000005d1 	.word	0x000005d1
    5a10:	000005e5 	.word	0x000005e5
    5a14:	20003dc0 	.word	0x20003dc0
    5a18:	00004399 	.word	0x00004399
    5a1c:	00005cbd 	.word	0x00005cbd
    5a20:	00008ba1 	.word	0x00008ba1
    5a24:	0000020e 	.word	0x0000020e
    5a28:	00008cb5 	.word	0x00008cb5
    5a2c:	0000c4e5 	.word	0x0000c4e5
					default://GATE
						memcpy(eth_sock[n_port].data, port[n_port-1].rbuf, size); 
    5a30:	1dfb      	adds	r3, r7, #7
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	4a6a      	ldr	r2, [pc, #424]	; (5be0 <usart_process+0x4d8>)
    5a36:	4353      	muls	r3, r2
    5a38:	3308      	adds	r3, #8
    5a3a:	001a      	movs	r2, r3
    5a3c:	4b69      	ldr	r3, [pc, #420]	; (5be4 <usart_process+0x4dc>)
    5a3e:	18d0      	adds	r0, r2, r3
    5a40:	1dfb      	adds	r3, r7, #7
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	1e5a      	subs	r2, r3, #1
    5a46:	0013      	movs	r3, r2
    5a48:	00db      	lsls	r3, r3, #3
    5a4a:	189b      	adds	r3, r3, r2
    5a4c:	019b      	lsls	r3, r3, #6
    5a4e:	3309      	adds	r3, #9
    5a50:	33ff      	adds	r3, #255	; 0xff
    5a52:	001a      	movs	r2, r3
    5a54:	4b64      	ldr	r3, [pc, #400]	; (5be8 <usart_process+0x4e0>)
    5a56:	18d3      	adds	r3, r2, r3
    5a58:	1c59      	adds	r1, r3, #1
    5a5a:	230e      	movs	r3, #14
    5a5c:	18fb      	adds	r3, r7, r3
    5a5e:	881b      	ldrh	r3, [r3, #0]
    5a60:	001a      	movs	r2, r3
    5a62:	4b62      	ldr	r3, [pc, #392]	; (5bec <usart_process+0x4e4>)
    5a64:	4798      	blx	r3
					break;
    5a66:	46c0      	nop			; (mov r8, r8)
				}
			
				eth_sock[n_port].len[0]		= (size & 0xFF00) >> 8;
    5a68:	1dfb      	adds	r3, r7, #7
    5a6a:	781b      	ldrb	r3, [r3, #0]
    5a6c:	220e      	movs	r2, #14
    5a6e:	18ba      	adds	r2, r7, r2
    5a70:	8812      	ldrh	r2, [r2, #0]
    5a72:	0a12      	lsrs	r2, r2, #8
    5a74:	b292      	uxth	r2, r2
    5a76:	b2d0      	uxtb	r0, r2
    5a78:	4a5a      	ldr	r2, [pc, #360]	; (5be4 <usart_process+0x4dc>)
    5a7a:	4959      	ldr	r1, [pc, #356]	; (5be0 <usart_process+0x4d8>)
    5a7c:	434b      	muls	r3, r1
    5a7e:	18d3      	adds	r3, r2, r3
    5a80:	3306      	adds	r3, #6
    5a82:	1c02      	adds	r2, r0, #0
    5a84:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].len[1]		=  size & 0x00FF;
    5a86:	1dfb      	adds	r3, r7, #7
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	220e      	movs	r2, #14
    5a8c:	18ba      	adds	r2, r7, r2
    5a8e:	8812      	ldrh	r2, [r2, #0]
    5a90:	b2d0      	uxtb	r0, r2
    5a92:	4a54      	ldr	r2, [pc, #336]	; (5be4 <usart_process+0x4dc>)
    5a94:	4952      	ldr	r1, [pc, #328]	; (5be0 <usart_process+0x4d8>)
    5a96:	434b      	muls	r3, r1
    5a98:	18d3      	adds	r3, r2, r3
    5a9a:	3307      	adds	r3, #7
    5a9c:	1c02      	adds	r2, r0, #0
    5a9e:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].w_status	= 1;
    5aa0:	1dfb      	adds	r3, r7, #7
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	4a4f      	ldr	r2, [pc, #316]	; (5be4 <usart_process+0x4dc>)
    5aa6:	4952      	ldr	r1, [pc, #328]	; (5bf0 <usart_process+0x4e8>)
    5aa8:	484d      	ldr	r0, [pc, #308]	; (5be0 <usart_process+0x4d8>)
    5aaa:	4343      	muls	r3, r0
    5aac:	18d3      	adds	r3, r2, r3
    5aae:	185b      	adds	r3, r3, r1
    5ab0:	2201      	movs	r2, #1
    5ab2:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt			= (port[n_port-1].tout_port*10)-port[n_port-1].time_port;
    5ab4:	1dfb      	adds	r3, r7, #7
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	1e5a      	subs	r2, r3, #1
    5aba:	1dfb      	adds	r3, r7, #7
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	1e59      	subs	r1, r3, #1
    5ac0:	4c49      	ldr	r4, [pc, #292]	; (5be8 <usart_process+0x4e0>)
    5ac2:	2386      	movs	r3, #134	; 0x86
    5ac4:	0098      	lsls	r0, r3, #2
    5ac6:	000b      	movs	r3, r1
    5ac8:	00db      	lsls	r3, r3, #3
    5aca:	185b      	adds	r3, r3, r1
    5acc:	019b      	lsls	r3, r3, #6
    5ace:	18e3      	adds	r3, r4, r3
    5ad0:	181b      	adds	r3, r3, r0
    5ad2:	881b      	ldrh	r3, [r3, #0]
    5ad4:	b29b      	uxth	r3, r3
    5ad6:	1c19      	adds	r1, r3, #0
    5ad8:	0089      	lsls	r1, r1, #2
    5ada:	18cb      	adds	r3, r1, r3
    5adc:	18db      	adds	r3, r3, r3
    5ade:	b298      	uxth	r0, r3
    5ae0:	1dfb      	adds	r3, r7, #7
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	1e59      	subs	r1, r3, #1
    5ae6:	4d40      	ldr	r5, [pc, #256]	; (5be8 <usart_process+0x4e0>)
    5ae8:	2388      	movs	r3, #136	; 0x88
    5aea:	009c      	lsls	r4, r3, #2
    5aec:	000b      	movs	r3, r1
    5aee:	00db      	lsls	r3, r3, #3
    5af0:	185b      	adds	r3, r3, r1
    5af2:	019b      	lsls	r3, r3, #6
    5af4:	18eb      	adds	r3, r5, r3
    5af6:	191b      	adds	r3, r3, r4
    5af8:	681b      	ldr	r3, [r3, #0]
    5afa:	b29b      	uxth	r3, r3
    5afc:	1ac3      	subs	r3, r0, r3
    5afe:	b29c      	uxth	r4, r3
    5b00:	4939      	ldr	r1, [pc, #228]	; (5be8 <usart_process+0x4e0>)
    5b02:	483c      	ldr	r0, [pc, #240]	; (5bf4 <usart_process+0x4ec>)
    5b04:	0013      	movs	r3, r2
    5b06:	00db      	lsls	r3, r3, #3
    5b08:	189b      	adds	r3, r3, r2
    5b0a:	019b      	lsls	r3, r3, #6
    5b0c:	18cb      	adds	r3, r1, r3
    5b0e:	181b      	adds	r3, r3, r0
    5b10:	1c22      	adds	r2, r4, #0
    5b12:	801a      	strh	r2, [r3, #0]
				port[n_port-1].stage		= RS485_WRITE;
    5b14:	1dfb      	adds	r3, r7, #7
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	1e5a      	subs	r2, r3, #1
    5b1a:	4833      	ldr	r0, [pc, #204]	; (5be8 <usart_process+0x4e0>)
    5b1c:	2387      	movs	r3, #135	; 0x87
    5b1e:	0099      	lsls	r1, r3, #2
    5b20:	0013      	movs	r3, r2
    5b22:	00db      	lsls	r3, r3, #3
    5b24:	189b      	adds	r3, r3, r2
    5b26:	019b      	lsls	r3, r3, #6
    5b28:	18c3      	adds	r3, r0, r3
    5b2a:	185b      	adds	r3, r3, r1
    5b2c:	2200      	movs	r2, #0
    5b2e:	701a      	strb	r2, [r3, #0]
				eth_sock[n_port].r_status	= 0;
    5b30:	1dfb      	adds	r3, r7, #7
    5b32:	781b      	ldrb	r3, [r3, #0]
    5b34:	4a2b      	ldr	r2, [pc, #172]	; (5be4 <usart_process+0x4dc>)
    5b36:	4930      	ldr	r1, [pc, #192]	; (5bf8 <usart_process+0x4f0>)
    5b38:	4829      	ldr	r0, [pc, #164]	; (5be0 <usart_process+0x4d8>)
    5b3a:	4343      	muls	r3, r0
    5b3c:	18d3      	adds	r3, r2, r3
    5b3e:	185b      	adds	r3, r3, r1
    5b40:	2200      	movs	r2, #0
    5b42:	701a      	strb	r2, [r3, #0]
				return;
    5b44:	e049      	b.n	5bda <usart_process+0x4d2>
			}
			if (port[n_port-1].time_port==0)
    5b46:	1dfb      	adds	r3, r7, #7
    5b48:	781b      	ldrb	r3, [r3, #0]
    5b4a:	1e5a      	subs	r2, r3, #1
    5b4c:	4826      	ldr	r0, [pc, #152]	; (5be8 <usart_process+0x4e0>)
    5b4e:	2388      	movs	r3, #136	; 0x88
    5b50:	0099      	lsls	r1, r3, #2
    5b52:	0013      	movs	r3, r2
    5b54:	00db      	lsls	r3, r3, #3
    5b56:	189b      	adds	r3, r3, r2
    5b58:	019b      	lsls	r3, r3, #6
    5b5a:	18c3      	adds	r3, r0, r3
    5b5c:	185b      	adds	r3, r3, r1
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	2b00      	cmp	r3, #0
    5b62:	d139      	bne.n	5bd8 <usart_process+0x4d0>
			{
				port[n_port-1].stage = RS485_WRITE;
    5b64:	1dfb      	adds	r3, r7, #7
    5b66:	781b      	ldrb	r3, [r3, #0]
    5b68:	1e5a      	subs	r2, r3, #1
    5b6a:	481f      	ldr	r0, [pc, #124]	; (5be8 <usart_process+0x4e0>)
    5b6c:	2387      	movs	r3, #135	; 0x87
    5b6e:	0099      	lsls	r1, r3, #2
    5b70:	0013      	movs	r3, r2
    5b72:	00db      	lsls	r3, r3, #3
    5b74:	189b      	adds	r3, r3, r2
    5b76:	019b      	lsls	r3, r3, #6
    5b78:	18c3      	adds	r3, r0, r3
    5b7a:	185b      	adds	r3, r3, r1
    5b7c:	2200      	movs	r2, #0
    5b7e:	701a      	strb	r2, [r3, #0]
				port[n_port-1].dt 	 = 0;
    5b80:	1dfb      	adds	r3, r7, #7
    5b82:	781b      	ldrb	r3, [r3, #0]
    5b84:	1e5a      	subs	r2, r3, #1
    5b86:	4918      	ldr	r1, [pc, #96]	; (5be8 <usart_process+0x4e0>)
    5b88:	481a      	ldr	r0, [pc, #104]	; (5bf4 <usart_process+0x4ec>)
    5b8a:	0013      	movs	r3, r2
    5b8c:	00db      	lsls	r3, r3, #3
    5b8e:	189b      	adds	r3, r3, r2
    5b90:	019b      	lsls	r3, r3, #6
    5b92:	18cb      	adds	r3, r1, r3
    5b94:	181b      	adds	r3, r3, r0
    5b96:	2200      	movs	r2, #0
    5b98:	801a      	strh	r2, [r3, #0]
				eth_sock[n_port].r_status = 0;
    5b9a:	1dfb      	adds	r3, r7, #7
    5b9c:	781b      	ldrb	r3, [r3, #0]
    5b9e:	4a11      	ldr	r2, [pc, #68]	; (5be4 <usart_process+0x4dc>)
    5ba0:	4915      	ldr	r1, [pc, #84]	; (5bf8 <usart_process+0x4f0>)
    5ba2:	480f      	ldr	r0, [pc, #60]	; (5be0 <usart_process+0x4d8>)
    5ba4:	4343      	muls	r3, r0
    5ba6:	18d3      	adds	r3, r2, r3
    5ba8:	185b      	adds	r3, r3, r1
    5baa:	2200      	movs	r2, #0
    5bac:	701a      	strb	r2, [r3, #0]
			}
		return;
    5bae:	e013      	b.n	5bd8 <usart_process+0x4d0>
		default:
			port[n_port-1].stage = RS485_WRITE;
    5bb0:	1dfb      	adds	r3, r7, #7
    5bb2:	781b      	ldrb	r3, [r3, #0]
    5bb4:	1e5a      	subs	r2, r3, #1
    5bb6:	480c      	ldr	r0, [pc, #48]	; (5be8 <usart_process+0x4e0>)
    5bb8:	2387      	movs	r3, #135	; 0x87
    5bba:	0099      	lsls	r1, r3, #2
    5bbc:	0013      	movs	r3, r2
    5bbe:	00db      	lsls	r3, r3, #3
    5bc0:	189b      	adds	r3, r3, r2
    5bc2:	019b      	lsls	r3, r3, #6
    5bc4:	18c3      	adds	r3, r0, r3
    5bc6:	185b      	adds	r3, r3, r1
    5bc8:	2200      	movs	r2, #0
    5bca:	701a      	strb	r2, [r3, #0]
		break;
    5bcc:	46c0      	nop			; (mov r8, r8)
    5bce:	e004      	b.n	5bda <usart_process+0x4d2>
			if (!eth_sock[n_port].r_status){return;}										//check read stat
    5bd0:	46c0      	nop			; (mov r8, r8)
    5bd2:	e002      	b.n	5bda <usart_process+0x4d2>
			if(cfg_1.access[n_port - 1].en) {	if (!acces_ip(n_port - 1)) {return;} 	}	//check access ip
    5bd4:	46c0      	nop			; (mov r8, r8)
    5bd6:	e000      	b.n	5bda <usart_process+0x4d2>
		return;
    5bd8:	46c0      	nop			; (mov r8, r8)
	}
    5bda:	46bd      	mov	sp, r7
    5bdc:	b004      	add	sp, #16
    5bde:	bdb0      	pop	{r4, r5, r7, pc}
    5be0:	000005e5 	.word	0x000005e5
    5be4:	200005cc 	.word	0x200005cc
    5be8:	200031f8 	.word	0x200031f8
    5bec:	0000c4e5 	.word	0x0000c4e5
    5bf0:	000005d2 	.word	0x000005d2
    5bf4:	0000021a 	.word	0x0000021a
    5bf8:	000005d1 	.word	0x000005d1

00005bfc <crc16_ccit>:
#include "def.h"

WORD crc16_ccit(BYTE *buf,WORD size)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b084      	sub	sp, #16
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	000a      	movs	r2, r1
    5c06:	1cbb      	adds	r3, r7, #2
    5c08:	801a      	strh	r2, [r3, #0]
	WORD crc = 0xFFFF;
    5c0a:	230e      	movs	r3, #14
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	2201      	movs	r2, #1
    5c10:	4252      	negs	r2, r2
    5c12:	801a      	strh	r2, [r3, #0]
	BYTE i;

	while (size--)
    5c14:	e037      	b.n	5c86 <crc16_ccit+0x8a>
	{
		crc ^= *buf++ << 8;
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	1c5a      	adds	r2, r3, #1
    5c1a:	607a      	str	r2, [r7, #4]
    5c1c:	781b      	ldrb	r3, [r3, #0]
    5c1e:	021b      	lsls	r3, r3, #8
    5c20:	b21a      	sxth	r2, r3
    5c22:	230e      	movs	r3, #14
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	2100      	movs	r1, #0
    5c28:	5e5b      	ldrsh	r3, [r3, r1]
    5c2a:	4053      	eors	r3, r2
    5c2c:	b21a      	sxth	r2, r3
    5c2e:	230e      	movs	r3, #14
    5c30:	18fb      	adds	r3, r7, r3
    5c32:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++)
    5c34:	230d      	movs	r3, #13
    5c36:	18fb      	adds	r3, r7, r3
    5c38:	2200      	movs	r2, #0
    5c3a:	701a      	strb	r2, [r3, #0]
    5c3c:	e01e      	b.n	5c7c <crc16_ccit+0x80>
		crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
    5c3e:	230e      	movs	r3, #14
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	2200      	movs	r2, #0
    5c44:	5e9b      	ldrsh	r3, [r3, r2]
    5c46:	2b00      	cmp	r3, #0
    5c48:	da09      	bge.n	5c5e <crc16_ccit+0x62>
    5c4a:	230e      	movs	r3, #14
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	881b      	ldrh	r3, [r3, #0]
    5c50:	005b      	lsls	r3, r3, #1
    5c52:	b21b      	sxth	r3, r3
    5c54:	4a18      	ldr	r2, [pc, #96]	; (5cb8 <crc16_ccit+0xbc>)
    5c56:	4053      	eors	r3, r2
    5c58:	b21b      	sxth	r3, r3
    5c5a:	b29b      	uxth	r3, r3
    5c5c:	e004      	b.n	5c68 <crc16_ccit+0x6c>
    5c5e:	230e      	movs	r3, #14
    5c60:	18fb      	adds	r3, r7, r3
    5c62:	881b      	ldrh	r3, [r3, #0]
    5c64:	18db      	adds	r3, r3, r3
    5c66:	b29b      	uxth	r3, r3
    5c68:	220e      	movs	r2, #14
    5c6a:	18ba      	adds	r2, r7, r2
    5c6c:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++)
    5c6e:	230d      	movs	r3, #13
    5c70:	18fb      	adds	r3, r7, r3
    5c72:	781a      	ldrb	r2, [r3, #0]
    5c74:	230d      	movs	r3, #13
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	3201      	adds	r2, #1
    5c7a:	701a      	strb	r2, [r3, #0]
    5c7c:	230d      	movs	r3, #13
    5c7e:	18fb      	adds	r3, r7, r3
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	2b07      	cmp	r3, #7
    5c84:	d9db      	bls.n	5c3e <crc16_ccit+0x42>
	while (size--)
    5c86:	1cbb      	adds	r3, r7, #2
    5c88:	881b      	ldrh	r3, [r3, #0]
    5c8a:	1cba      	adds	r2, r7, #2
    5c8c:	1e59      	subs	r1, r3, #1
    5c8e:	8011      	strh	r1, [r2, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d1c0      	bne.n	5c16 <crc16_ccit+0x1a>
	}
	return ((crc>>8) | (crc<<8));
    5c94:	230e      	movs	r3, #14
    5c96:	18fb      	adds	r3, r7, r3
    5c98:	881b      	ldrh	r3, [r3, #0]
    5c9a:	0a1b      	lsrs	r3, r3, #8
    5c9c:	b29b      	uxth	r3, r3
    5c9e:	b21a      	sxth	r2, r3
    5ca0:	230e      	movs	r3, #14
    5ca2:	18fb      	adds	r3, r7, r3
    5ca4:	881b      	ldrh	r3, [r3, #0]
    5ca6:	021b      	lsls	r3, r3, #8
    5ca8:	b21b      	sxth	r3, r3
    5caa:	4313      	orrs	r3, r2
    5cac:	b21b      	sxth	r3, r3
    5cae:	b29b      	uxth	r3, r3
}
    5cb0:	0018      	movs	r0, r3
    5cb2:	46bd      	mov	sp, r7
    5cb4:	b004      	add	sp, #16
    5cb6:	bd80      	pop	{r7, pc}
    5cb8:	00001021 	.word	0x00001021

00005cbc <crc16_mbus>:

WORD crc16_mbus( BYTE *buf, WORD size )
{
    5cbc:	b580      	push	{r7, lr}
    5cbe:	b084      	sub	sp, #16
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	6078      	str	r0, [r7, #4]
    5cc4:	000a      	movs	r2, r1
    5cc6:	1cbb      	adds	r3, r7, #2
    5cc8:	801a      	strh	r2, [r3, #0]
	 WORD n;
	 uint8_t i;
	 WORD crc = 0xFFFF;
    5cca:	230a      	movs	r3, #10
    5ccc:	18fb      	adds	r3, r7, r3
    5cce:	2201      	movs	r2, #1
    5cd0:	4252      	negs	r2, r2
    5cd2:	801a      	strh	r2, [r3, #0]
	 for ( n = 0; n < size; n++ )
    5cd4:	230e      	movs	r3, #14
    5cd6:	18fb      	adds	r3, r7, r3
    5cd8:	2200      	movs	r2, #0
    5cda:	801a      	strh	r2, [r3, #0]
    5cdc:	e042      	b.n	5d64 <crc16_mbus+0xa8>
	 {
		 crc ^= buf[n];
    5cde:	230e      	movs	r3, #14
    5ce0:	18fb      	adds	r3, r7, r3
    5ce2:	881b      	ldrh	r3, [r3, #0]
    5ce4:	687a      	ldr	r2, [r7, #4]
    5ce6:	18d3      	adds	r3, r2, r3
    5ce8:	781b      	ldrb	r3, [r3, #0]
    5cea:	b299      	uxth	r1, r3
    5cec:	230a      	movs	r3, #10
    5cee:	18fb      	adds	r3, r7, r3
    5cf0:	220a      	movs	r2, #10
    5cf2:	18ba      	adds	r2, r7, r2
    5cf4:	8812      	ldrh	r2, [r2, #0]
    5cf6:	404a      	eors	r2, r1
    5cf8:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5cfa:	230d      	movs	r3, #13
    5cfc:	18fb      	adds	r3, r7, r3
    5cfe:	2208      	movs	r2, #8
    5d00:	701a      	strb	r2, [r3, #0]
    5d02:	e023      	b.n	5d4c <crc16_mbus+0x90>
		 {
			 if ( crc & 0x0001 )
    5d04:	230a      	movs	r3, #10
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	881b      	ldrh	r3, [r3, #0]
    5d0a:	2201      	movs	r2, #1
    5d0c:	4013      	ands	r3, r2
    5d0e:	d00f      	beq.n	5d30 <crc16_mbus+0x74>
			 {
				 crc >>= 1;
    5d10:	230a      	movs	r3, #10
    5d12:	18fb      	adds	r3, r7, r3
    5d14:	220a      	movs	r2, #10
    5d16:	18ba      	adds	r2, r7, r2
    5d18:	8812      	ldrh	r2, [r2, #0]
    5d1a:	0852      	lsrs	r2, r2, #1
    5d1c:	801a      	strh	r2, [r3, #0]
				 crc ^= 0xA001;
    5d1e:	230a      	movs	r3, #10
    5d20:	18fb      	adds	r3, r7, r3
    5d22:	220a      	movs	r2, #10
    5d24:	18ba      	adds	r2, r7, r2
    5d26:	8812      	ldrh	r2, [r2, #0]
    5d28:	4915      	ldr	r1, [pc, #84]	; (5d80 <crc16_mbus+0xc4>)
    5d2a:	404a      	eors	r2, r1
    5d2c:	801a      	strh	r2, [r3, #0]
    5d2e:	e006      	b.n	5d3e <crc16_mbus+0x82>
			 }
			 else
			 {
				 crc >>= 1;
    5d30:	230a      	movs	r3, #10
    5d32:	18fb      	adds	r3, r7, r3
    5d34:	220a      	movs	r2, #10
    5d36:	18ba      	adds	r2, r7, r2
    5d38:	8812      	ldrh	r2, [r2, #0]
    5d3a:	0852      	lsrs	r2, r2, #1
    5d3c:	801a      	strh	r2, [r3, #0]
		 for ( i = 8; i != 0; i-- )
    5d3e:	230d      	movs	r3, #13
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	781a      	ldrb	r2, [r3, #0]
    5d44:	230d      	movs	r3, #13
    5d46:	18fb      	adds	r3, r7, r3
    5d48:	3a01      	subs	r2, #1
    5d4a:	701a      	strb	r2, [r3, #0]
    5d4c:	230d      	movs	r3, #13
    5d4e:	18fb      	adds	r3, r7, r3
    5d50:	781b      	ldrb	r3, [r3, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d1d6      	bne.n	5d04 <crc16_mbus+0x48>
	 for ( n = 0; n < size; n++ )
    5d56:	230e      	movs	r3, #14
    5d58:	18fb      	adds	r3, r7, r3
    5d5a:	881a      	ldrh	r2, [r3, #0]
    5d5c:	230e      	movs	r3, #14
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	3201      	adds	r2, #1
    5d62:	801a      	strh	r2, [r3, #0]
    5d64:	230e      	movs	r3, #14
    5d66:	18fa      	adds	r2, r7, r3
    5d68:	1cbb      	adds	r3, r7, #2
    5d6a:	8812      	ldrh	r2, [r2, #0]
    5d6c:	881b      	ldrh	r3, [r3, #0]
    5d6e:	429a      	cmp	r2, r3
    5d70:	d3b5      	bcc.n	5cde <crc16_mbus+0x22>
			 }
		 }
	 }
	 return crc;
    5d72:	230a      	movs	r3, #10
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	881b      	ldrh	r3, [r3, #0]
    5d78:	0018      	movs	r0, r3
    5d7a:	46bd      	mov	sp, r7
    5d7c:	b004      	add	sp, #16
    5d7e:	bd80      	pop	{r7, pc}
    5d80:	ffffa001 	.word	0xffffa001

00005d84 <crypted>:
//#define admin 		"admin"
#define CRYPTED 	1
#define DECRYPTED 	0

void crypted(char* str)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b082      	sub	sp, #8
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
	move(str, CRYPTED);
    5d8c:	687b      	ldr	r3, [r7, #4]
    5d8e:	2101      	movs	r1, #1
    5d90:	0018      	movs	r0, r3
    5d92:	f000 f8f7 	bl	5f84 <move>
	wave(str, CRYPTED);
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2101      	movs	r1, #1
    5d9a:	0018      	movs	r0, r3
    5d9c:	f000 f820 	bl	5de0 <wave>
	shell_game(str,CRYPTED);
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	2101      	movs	r1, #1
    5da4:	0018      	movs	r0, r3
    5da6:	f000 f876 	bl	5e96 <shell_game>
}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	46bd      	mov	sp, r7
    5dae:	b002      	add	sp, #8
    5db0:	bd80      	pop	{r7, pc}

00005db2 <decrypted>:

void decrypted(char* str)
{
    5db2:	b580      	push	{r7, lr}
    5db4:	b082      	sub	sp, #8
    5db6:	af00      	add	r7, sp, #0
    5db8:	6078      	str	r0, [r7, #4]
	shell_game(str,DECRYPTED);
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	2100      	movs	r1, #0
    5dbe:	0018      	movs	r0, r3
    5dc0:	f000 f869 	bl	5e96 <shell_game>
	wave(str, DECRYPTED);
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	2100      	movs	r1, #0
    5dc8:	0018      	movs	r0, r3
    5dca:	f000 f809 	bl	5de0 <wave>
	move(str, DECRYPTED);
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	2100      	movs	r1, #0
    5dd2:	0018      	movs	r0, r3
    5dd4:	f000 f8d6 	bl	5f84 <move>
}
    5dd8:	46c0      	nop			; (mov r8, r8)
    5dda:	46bd      	mov	sp, r7
    5ddc:	b002      	add	sp, #8
    5dde:	bd80      	pop	{r7, pc}

00005de0 <wave>:

void wave(char* ptr, char mode)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
    5de8:	000a      	movs	r2, r1
    5dea:	1cfb      	adds	r3, r7, #3
    5dec:	701a      	strb	r2, [r3, #0]
	char plus;
	char sign = -1;
    5dee:	230f      	movs	r3, #15
    5df0:	18fb      	adds	r3, r7, r3
    5df2:	22ff      	movs	r2, #255	; 0xff
    5df4:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED) {sign = 1;}
    5df6:	1cfb      	adds	r3, r7, #3
    5df8:	781b      	ldrb	r3, [r3, #0]
    5dfa:	2b01      	cmp	r3, #1
    5dfc:	d103      	bne.n	5e06 <wave+0x26>
    5dfe:	230f      	movs	r3, #15
    5e00:	18fb      	adds	r3, r7, r3
    5e02:	2201      	movs	r2, #1
    5e04:	701a      	strb	r2, [r3, #0]
	for (char i = 0; i < 64; i++)
    5e06:	230e      	movs	r3, #14
    5e08:	18fb      	adds	r3, r7, r3
    5e0a:	2200      	movs	r2, #0
    5e0c:	701a      	strb	r2, [r3, #0]
    5e0e:	e039      	b.n	5e84 <wave+0xa4>
	{
		char step = i % 2;
    5e10:	230d      	movs	r3, #13
    5e12:	18fb      	adds	r3, r7, r3
    5e14:	220e      	movs	r2, #14
    5e16:	18ba      	adds	r2, r7, r2
    5e18:	7812      	ldrb	r2, [r2, #0]
    5e1a:	2101      	movs	r1, #1
    5e1c:	400a      	ands	r2, r1
    5e1e:	701a      	strb	r2, [r3, #0]
		plus = ((63 - i) / 2) * sign;
    5e20:	230e      	movs	r3, #14
    5e22:	18fb      	adds	r3, r7, r3
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	223f      	movs	r2, #63	; 0x3f
    5e28:	1ad3      	subs	r3, r2, r3
    5e2a:	d500      	bpl.n	5e2e <wave+0x4e>
    5e2c:	3301      	adds	r3, #1
    5e2e:	105b      	asrs	r3, r3, #1
    5e30:	b2da      	uxtb	r2, r3
    5e32:	230c      	movs	r3, #12
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	210f      	movs	r1, #15
    5e38:	1879      	adds	r1, r7, r1
    5e3a:	7809      	ldrb	r1, [r1, #0]
    5e3c:	434a      	muls	r2, r1
    5e3e:	701a      	strb	r2, [r3, #0]
		if (step) { *ptr -= plus; } else {*ptr += plus;}
    5e40:	230d      	movs	r3, #13
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	781b      	ldrb	r3, [r3, #0]
    5e46:	2b00      	cmp	r3, #0
    5e48:	d009      	beq.n	5e5e <wave+0x7e>
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	781a      	ldrb	r2, [r3, #0]
    5e4e:	230c      	movs	r3, #12
    5e50:	18fb      	adds	r3, r7, r3
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	1ad3      	subs	r3, r2, r3
    5e56:	b2da      	uxtb	r2, r3
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	701a      	strb	r2, [r3, #0]
    5e5c:	e008      	b.n	5e70 <wave+0x90>
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	781a      	ldrb	r2, [r3, #0]
    5e62:	230c      	movs	r3, #12
    5e64:	18fb      	adds	r3, r7, r3
    5e66:	781b      	ldrb	r3, [r3, #0]
    5e68:	18d3      	adds	r3, r2, r3
    5e6a:	b2da      	uxtb	r2, r3
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	701a      	strb	r2, [r3, #0]
		ptr++;
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	3301      	adds	r3, #1
    5e74:	607b      	str	r3, [r7, #4]
	for (char i = 0; i < 64; i++)
    5e76:	230e      	movs	r3, #14
    5e78:	18fb      	adds	r3, r7, r3
    5e7a:	781a      	ldrb	r2, [r3, #0]
    5e7c:	230e      	movs	r3, #14
    5e7e:	18fb      	adds	r3, r7, r3
    5e80:	3201      	adds	r2, #1
    5e82:	701a      	strb	r2, [r3, #0]
    5e84:	230e      	movs	r3, #14
    5e86:	18fb      	adds	r3, r7, r3
    5e88:	781b      	ldrb	r3, [r3, #0]
    5e8a:	2b3f      	cmp	r3, #63	; 0x3f
    5e8c:	d9c0      	bls.n	5e10 <wave+0x30>
	}
}
    5e8e:	46c0      	nop			; (mov r8, r8)
    5e90:	46bd      	mov	sp, r7
    5e92:	b004      	add	sp, #16
    5e94:	bd80      	pop	{r7, pc}

00005e96 <shell_game>:

void shell_game(char* ptr, char mode)
{
    5e96:	b580      	push	{r7, lr}
    5e98:	b098      	sub	sp, #96	; 0x60
    5e9a:	af00      	add	r7, sp, #0
    5e9c:	6078      	str	r0, [r7, #4]
    5e9e:	000a      	movs	r2, r1
    5ea0:	1cfb      	adds	r3, r7, #3
    5ea2:	701a      	strb	r2, [r3, #0]
	char buf[64];
	char region[8];
	char lap = 0;
    5ea4:	235f      	movs	r3, #95	; 0x5f
    5ea6:	18fb      	adds	r3, r7, r3
    5ea8:	2200      	movs	r2, #0
    5eaa:	701a      	strb	r2, [r3, #0]
	char cursour = 0;
    5eac:	235e      	movs	r3, #94	; 0x5e
    5eae:	18fb      	adds	r3, r7, r3
    5eb0:	2200      	movs	r2, #0
    5eb2:	701a      	strb	r2, [r3, #0]
	char* debug = ptr;
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	653b      	str	r3, [r7, #80]	; 0x50
	memcpy(buf, ptr, 64);
    5eb8:	2310      	movs	r3, #16
    5eba:	18fa      	adds	r2, r7, r3
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	0010      	movs	r0, r2
    5ec0:	0019      	movs	r1, r3
    5ec2:	2340      	movs	r3, #64	; 0x40
    5ec4:	001a      	movs	r2, r3
    5ec6:	4b2e      	ldr	r3, [pc, #184]	; (5f80 <shell_game+0xea>)
    5ec8:	4798      	blx	r3
	if (mode == CRYPTED) {mode = 3;} else {mode = 1;}
    5eca:	1cfb      	adds	r3, r7, #3
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	2b01      	cmp	r3, #1
    5ed0:	d103      	bne.n	5eda <shell_game+0x44>
    5ed2:	1cfb      	adds	r3, r7, #3
    5ed4:	2203      	movs	r2, #3
    5ed6:	701a      	strb	r2, [r3, #0]
    5ed8:	e002      	b.n	5ee0 <shell_game+0x4a>
    5eda:	1cfb      	adds	r3, r7, #3
    5edc:	2201      	movs	r2, #1
    5ede:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < mode; j++)
    5ee0:	2300      	movs	r3, #0
    5ee2:	65bb      	str	r3, [r7, #88]	; 0x58
    5ee4:	e042      	b.n	5f6c <shell_game+0xd6>
	{
		for (int i = 0; i < 63 ; i++)
    5ee6:	2300      	movs	r3, #0
    5ee8:	657b      	str	r3, [r7, #84]	; 0x54
    5eea:	e026      	b.n	5f3a <shell_game+0xa4>
		{
			if (cursour > 63)	{lap++; cursour = lap;}
    5eec:	235e      	movs	r3, #94	; 0x5e
    5eee:	18fb      	adds	r3, r7, r3
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	2b3f      	cmp	r3, #63	; 0x3f
    5ef4:	d90c      	bls.n	5f10 <shell_game+0x7a>
    5ef6:	235f      	movs	r3, #95	; 0x5f
    5ef8:	18fb      	adds	r3, r7, r3
    5efa:	781a      	ldrb	r2, [r3, #0]
    5efc:	235f      	movs	r3, #95	; 0x5f
    5efe:	18fb      	adds	r3, r7, r3
    5f00:	3201      	adds	r2, #1
    5f02:	701a      	strb	r2, [r3, #0]
    5f04:	235e      	movs	r3, #94	; 0x5e
    5f06:	18fb      	adds	r3, r7, r3
    5f08:	225f      	movs	r2, #95	; 0x5f
    5f0a:	18ba      	adds	r2, r7, r2
    5f0c:	7812      	ldrb	r2, [r2, #0]
    5f0e:	701a      	strb	r2, [r3, #0]
			*ptr = buf[cursour];
    5f10:	235e      	movs	r3, #94	; 0x5e
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	2210      	movs	r2, #16
    5f18:	18ba      	adds	r2, r7, r2
    5f1a:	5cd2      	ldrb	r2, [r2, r3]
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	701a      	strb	r2, [r3, #0]
			ptr++;
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	3301      	adds	r3, #1
    5f24:	607b      	str	r3, [r7, #4]
			cursour += 8;
    5f26:	235e      	movs	r3, #94	; 0x5e
    5f28:	18fb      	adds	r3, r7, r3
    5f2a:	225e      	movs	r2, #94	; 0x5e
    5f2c:	18ba      	adds	r2, r7, r2
    5f2e:	7812      	ldrb	r2, [r2, #0]
    5f30:	3208      	adds	r2, #8
    5f32:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 63 ; i++)
    5f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f36:	3301      	adds	r3, #1
    5f38:	657b      	str	r3, [r7, #84]	; 0x54
    5f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f3c:	2b3e      	cmp	r3, #62	; 0x3e
    5f3e:	ddd5      	ble.n	5eec <shell_game+0x56>
		}
		lap = 0;
    5f40:	235f      	movs	r3, #95	; 0x5f
    5f42:	18fb      	adds	r3, r7, r3
    5f44:	2200      	movs	r2, #0
    5f46:	701a      	strb	r2, [r3, #0]
		cursour = 0;
    5f48:	235e      	movs	r3, #94	; 0x5e
    5f4a:	18fb      	adds	r3, r7, r3
    5f4c:	2200      	movs	r2, #0
    5f4e:	701a      	strb	r2, [r3, #0]
		ptr = debug;
    5f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5f52:	607b      	str	r3, [r7, #4]
		memcpy(buf, ptr, 64);
    5f54:	2310      	movs	r3, #16
    5f56:	18fa      	adds	r2, r7, r3
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	0010      	movs	r0, r2
    5f5c:	0019      	movs	r1, r3
    5f5e:	2340      	movs	r3, #64	; 0x40
    5f60:	001a      	movs	r2, r3
    5f62:	4b07      	ldr	r3, [pc, #28]	; (5f80 <shell_game+0xea>)
    5f64:	4798      	blx	r3
	for (int j = 0; j < mode; j++)
    5f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5f68:	3301      	adds	r3, #1
    5f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    5f6c:	1cfb      	adds	r3, r7, #3
    5f6e:	781a      	ldrb	r2, [r3, #0]
    5f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5f72:	429a      	cmp	r2, r3
    5f74:	dcb7      	bgt.n	5ee6 <shell_game+0x50>
	}
}
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	46bd      	mov	sp, r7
    5f7a:	b018      	add	sp, #96	; 0x60
    5f7c:	bd80      	pop	{r7, pc}
    5f7e:	46c0      	nop			; (mov r8, r8)
    5f80:	0000c4e5 	.word	0x0000c4e5

00005f84 <move>:

void move(char* ptr, char mode)
{
    5f84:	b580      	push	{r7, lr}
    5f86:	b084      	sub	sp, #16
    5f88:	af00      	add	r7, sp, #0
    5f8a:	6078      	str	r0, [r7, #4]
    5f8c:	000a      	movs	r2, r1
    5f8e:	1cfb      	adds	r3, r7, #3
    5f90:	701a      	strb	r2, [r3, #0]
	char sign = - 1;
    5f92:	230f      	movs	r3, #15
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	22ff      	movs	r2, #255	; 0xff
    5f98:	701a      	strb	r2, [r3, #0]
	if (mode == CRYPTED){sign = 1;}
    5f9a:	1cfb      	adds	r3, r7, #3
    5f9c:	781b      	ldrb	r3, [r3, #0]
    5f9e:	2b01      	cmp	r3, #1
    5fa0:	d103      	bne.n	5faa <move+0x26>
    5fa2:	230f      	movs	r3, #15
    5fa4:	18fb      	adds	r3, r7, r3
    5fa6:	2201      	movs	r2, #1
    5fa8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    5faa:	2300      	movs	r3, #0
    5fac:	60bb      	str	r3, [r7, #8]
    5fae:	e00e      	b.n	5fce <move+0x4a>
	{
		*ptr += 68 * sign;
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	781a      	ldrb	r2, [r3, #0]
    5fb4:	230f      	movs	r3, #15
    5fb6:	18fb      	adds	r3, r7, r3
    5fb8:	781b      	ldrb	r3, [r3, #0]
    5fba:	2144      	movs	r1, #68	; 0x44
    5fbc:	434b      	muls	r3, r1
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	18d3      	adds	r3, r2, r3
    5fc2:	b2da      	uxtb	r2, r3
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 63; i++)
    5fc8:	68bb      	ldr	r3, [r7, #8]
    5fca:	3301      	adds	r3, #1
    5fcc:	60bb      	str	r3, [r7, #8]
    5fce:	68bb      	ldr	r3, [r7, #8]
    5fd0:	2b3e      	cmp	r3, #62	; 0x3e
    5fd2:	dded      	ble.n	5fb0 <move+0x2c>
	}	
    5fd4:	46c0      	nop			; (mov r8, r8)
    5fd6:	46bd      	mov	sp, r7
    5fd8:	b004      	add	sp, #16
    5fda:	bd80      	pop	{r7, pc}

00005fdc <eth_init>:
#include "def.h"

ETH_HDR eth_sock[MAX_SOCKETS_CNT];

void eth_init(void)
{
    5fdc:	b5b0      	push	{r4, r5, r7, lr}
    5fde:	b082      	sub	sp, #8
    5fe0:	af00      	add	r7, sp, #0
	w5500_init_reg();
    5fe2:	4b3f      	ldr	r3, [pc, #252]	; (60e0 <eth_init+0x104>)
    5fe4:	4798      	blx	r3
	
	//common socket for settings
	if(socket_init(SOCKET_0,cfg_1.com_network.src_port,UDP)) {err_dword.common_sock = 1;}
    5fe6:	4b3f      	ldr	r3, [pc, #252]	; (60e4 <eth_init+0x108>)
    5fe8:	2226      	movs	r2, #38	; 0x26
    5fea:	5c9a      	ldrb	r2, [r3, r2]
    5fec:	2127      	movs	r1, #39	; 0x27
    5fee:	5c5b      	ldrb	r3, [r3, r1]
    5ff0:	021b      	lsls	r3, r3, #8
    5ff2:	4313      	orrs	r3, r2
    5ff4:	b29b      	uxth	r3, r3
    5ff6:	2201      	movs	r2, #1
    5ff8:	0019      	movs	r1, r3
    5ffa:	2000      	movs	r0, #0
    5ffc:	4b3a      	ldr	r3, [pc, #232]	; (60e8 <eth_init+0x10c>)
    5ffe:	4798      	blx	r3
    6000:	1e03      	subs	r3, r0, #0
    6002:	d004      	beq.n	600e <eth_init+0x32>
    6004:	4b39      	ldr	r3, [pc, #228]	; (60ec <eth_init+0x110>)
    6006:	781a      	ldrb	r2, [r3, #0]
    6008:	2104      	movs	r1, #4
    600a:	430a      	orrs	r2, r1
    600c:	701a      	strb	r2, [r3, #0]

	//port socket
	for(BYTE i=0; i<4; i++)
    600e:	1dfb      	adds	r3, r7, #7
    6010:	2200      	movs	r2, #0
    6012:	701a      	strb	r2, [r3, #0]
    6014:	e05b      	b.n	60ce <eth_init+0xf2>
	{
		if(cfg_1.sock_rs485[i].en==FALSE) {i++; continue;} 
    6016:	1dfb      	adds	r3, r7, #7
    6018:	781a      	ldrb	r2, [r3, #0]
    601a:	4932      	ldr	r1, [pc, #200]	; (60e4 <eth_init+0x108>)
    601c:	2034      	movs	r0, #52	; 0x34
    601e:	0013      	movs	r3, r2
    6020:	005b      	lsls	r3, r3, #1
    6022:	189b      	adds	r3, r3, r2
    6024:	009b      	lsls	r3, r3, #2
    6026:	189b      	adds	r3, r3, r2
    6028:	18cb      	adds	r3, r1, r3
    602a:	181b      	adds	r3, r3, r0
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	2b00      	cmp	r3, #0
    6030:	d105      	bne.n	603e <eth_init+0x62>
    6032:	1dfb      	adds	r3, r7, #7
    6034:	781a      	ldrb	r2, [r3, #0]
    6036:	1dfb      	adds	r3, r7, #7
    6038:	3201      	adds	r2, #1
    603a:	701a      	strb	r2, [r3, #0]
    603c:	e042      	b.n	60c4 <eth_init+0xe8>
		if(socket_init(i+1,cfg_1.sock_rs485[i].src_port,cfg_1.sock_rs485[i].mode)) {err_dword.socket += (1 << i);}
    603e:	1dfb      	adds	r3, r7, #7
    6040:	781b      	ldrb	r3, [r3, #0]
    6042:	3301      	adds	r3, #1
    6044:	b2dc      	uxtb	r4, r3
    6046:	1dfb      	adds	r3, r7, #7
    6048:	781a      	ldrb	r2, [r3, #0]
    604a:	4926      	ldr	r1, [pc, #152]	; (60e4 <eth_init+0x108>)
    604c:	0013      	movs	r3, r2
    604e:	005b      	lsls	r3, r3, #1
    6050:	189b      	adds	r3, r3, r2
    6052:	009b      	lsls	r3, r3, #2
    6054:	189b      	adds	r3, r3, r2
    6056:	18cb      	adds	r3, r1, r3
    6058:	3330      	adds	r3, #48	; 0x30
    605a:	79da      	ldrb	r2, [r3, #7]
    605c:	7a1b      	ldrb	r3, [r3, #8]
    605e:	021b      	lsls	r3, r3, #8
    6060:	4313      	orrs	r3, r2
    6062:	b29d      	uxth	r5, r3
    6064:	1dfb      	adds	r3, r7, #7
    6066:	781a      	ldrb	r2, [r3, #0]
    6068:	491e      	ldr	r1, [pc, #120]	; (60e4 <eth_init+0x108>)
    606a:	2035      	movs	r0, #53	; 0x35
    606c:	0013      	movs	r3, r2
    606e:	005b      	lsls	r3, r3, #1
    6070:	189b      	adds	r3, r3, r2
    6072:	009b      	lsls	r3, r3, #2
    6074:	189b      	adds	r3, r3, r2
    6076:	18cb      	adds	r3, r1, r3
    6078:	181b      	adds	r3, r3, r0
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	001a      	movs	r2, r3
    607e:	0029      	movs	r1, r5
    6080:	0020      	movs	r0, r4
    6082:	4b19      	ldr	r3, [pc, #100]	; (60e8 <eth_init+0x10c>)
    6084:	4798      	blx	r3
    6086:	1e03      	subs	r3, r0, #0
    6088:	d01c      	beq.n	60c4 <eth_init+0xe8>
    608a:	4b18      	ldr	r3, [pc, #96]	; (60ec <eth_init+0x110>)
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	065b      	lsls	r3, r3, #25
    6090:	0f1b      	lsrs	r3, r3, #28
    6092:	b2db      	uxtb	r3, r3
    6094:	0019      	movs	r1, r3
    6096:	1dfb      	adds	r3, r7, #7
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	2201      	movs	r2, #1
    609c:	409a      	lsls	r2, r3
    609e:	0013      	movs	r3, r2
    60a0:	b2db      	uxtb	r3, r3
    60a2:	18cb      	adds	r3, r1, r3
    60a4:	b2db      	uxtb	r3, r3
    60a6:	1c1a      	adds	r2, r3, #0
    60a8:	230f      	movs	r3, #15
    60aa:	4013      	ands	r3, r2
    60ac:	b2da      	uxtb	r2, r3
    60ae:	4b0f      	ldr	r3, [pc, #60]	; (60ec <eth_init+0x110>)
    60b0:	210f      	movs	r1, #15
    60b2:	400a      	ands	r2, r1
    60b4:	00d0      	lsls	r0, r2, #3
    60b6:	781a      	ldrb	r2, [r3, #0]
    60b8:	2178      	movs	r1, #120	; 0x78
    60ba:	438a      	bics	r2, r1
    60bc:	1c11      	adds	r1, r2, #0
    60be:	1c02      	adds	r2, r0, #0
    60c0:	430a      	orrs	r2, r1
    60c2:	701a      	strb	r2, [r3, #0]
	for(BYTE i=0; i<4; i++)
    60c4:	1dfb      	adds	r3, r7, #7
    60c6:	781a      	ldrb	r2, [r3, #0]
    60c8:	1dfb      	adds	r3, r7, #7
    60ca:	3201      	adds	r2, #1
    60cc:	701a      	strb	r2, [r3, #0]
    60ce:	1dfb      	adds	r3, r7, #7
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	2b03      	cmp	r3, #3
    60d4:	d99f      	bls.n	6016 <eth_init+0x3a>
	}
}
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	46bd      	mov	sp, r7
    60da:	b002      	add	sp, #8
    60dc:	bdb0      	pop	{r4, r5, r7, pc}
    60de:	46c0      	nop			; (mov r8, r8)
    60e0:	00009375 	.word	0x00009375
    60e4:	20003dc0 	.word	0x20003dc0
    60e8:	0000709d 	.word	0x0000709d
    60ec:	2000254c 	.word	0x2000254c

000060f0 <eth_process>:

void eth_process(void)
{
    60f0:	b590      	push	{r4, r7, lr}
    60f2:	b083      	sub	sp, #12
    60f4:	af00      	add	r7, sp, #0
	static BYTE eth_st=0;
	WORD rtrn = 0;
    60f6:	1dbb      	adds	r3, r7, #6
    60f8:	2200      	movs	r2, #0
    60fa:	801a      	strh	r2, [r3, #0]
	
	switch(eth_st)
    60fc:	4b40      	ldr	r3, [pc, #256]	; (6200 <eth_process+0x110>)
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	2b01      	cmp	r3, #1
    6102:	d038      	beq.n	6176 <eth_process+0x86>
    6104:	2b02      	cmp	r3, #2
    6106:	d059      	beq.n	61bc <eth_process+0xcc>
    6108:	2b00      	cmp	r3, #0
    610a:	d000      	beq.n	610e <eth_process+0x1e>
    610c:	e069      	b.n	61e2 <eth_process+0xf2>
	{
		case CHECK:				
			rtrn = check_data_wr_process();	
    610e:	f000 f92d 	bl	636c <check_data_wr_process>
    6112:	0003      	movs	r3, r0
    6114:	001a      	movs	r2, r3
    6116:	1dbb      	adds	r3, r7, #6
    6118:	801a      	strh	r2, [r3, #0]
			if(rtrn != NO_SOKET)								
    611a:	1dbb      	adds	r3, r7, #6
    611c:	881b      	ldrh	r3, [r3, #0]
    611e:	2b6d      	cmp	r3, #109	; 0x6d
    6120:	d021      	beq.n	6166 <eth_process+0x76>
			{
				eth_st					= WRITE_PROCESS;
    6122:	4b37      	ldr	r3, [pc, #220]	; (6200 <eth_process+0x110>)
    6124:	2202      	movs	r2, #2
    6126:	701a      	strb	r2, [r3, #0]
				w5500_mode.mode_op		= MODE_OP_WRITE_UDP;
    6128:	4b36      	ldr	r3, [pc, #216]	; (6204 <eth_process+0x114>)
    612a:	2203      	movs	r2, #3
    612c:	701a      	strb	r2, [r3, #0]
				w5500_mode.numb_socket	= rtrn;
    612e:	1dbb      	adds	r3, r7, #6
    6130:	881b      	ldrh	r3, [r3, #0]
    6132:	b2da      	uxtb	r2, r3
    6134:	4b33      	ldr	r3, [pc, #204]	; (6204 <eth_process+0x114>)
    6136:	705a      	strb	r2, [r3, #1]
				switch(rtrn)
    6138:	1dbb      	adds	r3, r7, #6
    613a:	881b      	ldrh	r3, [r3, #0]
    613c:	2b00      	cmp	r3, #0
    613e:	d055      	beq.n	61ec <eth_process+0xfc>
				{
					case COMMON_SOCK_VAL:																						return;
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    6140:	1dbb      	adds	r3, r7, #6
    6142:	881b      	ldrh	r3, [r3, #0]
    6144:	1e5a      	subs	r2, r3, #1
    6146:	4930      	ldr	r1, [pc, #192]	; (6208 <eth_process+0x118>)
    6148:	2035      	movs	r0, #53	; 0x35
    614a:	0013      	movs	r3, r2
    614c:	005b      	lsls	r3, r3, #1
    614e:	189b      	adds	r3, r3, r2
    6150:	009b      	lsls	r3, r3, #2
    6152:	189b      	adds	r3, r3, r2
    6154:	18cb      	adds	r3, r1, r3
    6156:	181b      	adds	r3, r3, r0
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	2b02      	cmp	r3, #2
    615c:	d148      	bne.n	61f0 <eth_process+0x100>
    615e:	4b29      	ldr	r3, [pc, #164]	; (6204 <eth_process+0x114>)
    6160:	2205      	movs	r2, #5
    6162:	701a      	strb	r2, [r3, #0]
    6164:	e044      	b.n	61f0 <eth_process+0x100>
				} 
			}

			check_sockets_process((BYTE*)&w5500_mode);//select sockets for read			
    6166:	4b27      	ldr	r3, [pc, #156]	; (6204 <eth_process+0x114>)
    6168:	0018      	movs	r0, r3
    616a:	f000 f851 	bl	6210 <check_sockets_process>
			eth_st = READ_PROCESS;
    616e:	4b24      	ldr	r3, [pc, #144]	; (6200 <eth_process+0x110>)
    6170:	2201      	movs	r2, #1
    6172:	701a      	strb	r2, [r3, #0]
		break;
    6174:	e041      	b.n	61fa <eth_process+0x10a>
		case READ_PROCESS:
			rtrn = w5500_process (w5500_mode.mode_op,w5500_mode.numb_socket);
    6176:	4b23      	ldr	r3, [pc, #140]	; (6204 <eth_process+0x114>)
    6178:	781a      	ldrb	r2, [r3, #0]
    617a:	4b22      	ldr	r3, [pc, #136]	; (6204 <eth_process+0x114>)
    617c:	785b      	ldrb	r3, [r3, #1]
    617e:	1dbc      	adds	r4, r7, #6
    6180:	0019      	movs	r1, r3
    6182:	0010      	movs	r0, r2
    6184:	4b21      	ldr	r3, [pc, #132]	; (620c <eth_process+0x11c>)
    6186:	4798      	blx	r3
    6188:	0003      	movs	r3, r0
    618a:	8023      	strh	r3, [r4, #0]
			if(rtrn == 2)	{eth_st=0;break;}
    618c:	1dbb      	adds	r3, r7, #6
    618e:	881b      	ldrh	r3, [r3, #0]
    6190:	2b02      	cmp	r3, #2
    6192:	d103      	bne.n	619c <eth_process+0xac>
    6194:	4b1a      	ldr	r3, [pc, #104]	; (6200 <eth_process+0x110>)
    6196:	2200      	movs	r2, #0
    6198:	701a      	strb	r2, [r3, #0]
    619a:	e02e      	b.n	61fa <eth_process+0x10a>
			if(rtrn)		{eth_parse(w5500_mode.numb_socket,rtrn); eth_st=0;}
    619c:	1dbb      	adds	r3, r7, #6
    619e:	881b      	ldrh	r3, [r3, #0]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d027      	beq.n	61f4 <eth_process+0x104>
    61a4:	4b17      	ldr	r3, [pc, #92]	; (6204 <eth_process+0x114>)
    61a6:	785a      	ldrb	r2, [r3, #1]
    61a8:	1dbb      	adds	r3, r7, #6
    61aa:	881b      	ldrh	r3, [r3, #0]
    61ac:	0019      	movs	r1, r3
    61ae:	0010      	movs	r0, r2
    61b0:	f000 f86e 	bl	6290 <eth_parse>
    61b4:	4b12      	ldr	r3, [pc, #72]	; (6200 <eth_process+0x110>)
    61b6:	2200      	movs	r2, #0
    61b8:	701a      	strb	r2, [r3, #0]
		break;
    61ba:	e01b      	b.n	61f4 <eth_process+0x104>
		case WRITE_PROCESS:
			rtrn = w5500_process(w5500_mode.mode_op,w5500_mode.numb_socket);
    61bc:	4b11      	ldr	r3, [pc, #68]	; (6204 <eth_process+0x114>)
    61be:	781a      	ldrb	r2, [r3, #0]
    61c0:	4b10      	ldr	r3, [pc, #64]	; (6204 <eth_process+0x114>)
    61c2:	785b      	ldrb	r3, [r3, #1]
    61c4:	1dbc      	adds	r4, r7, #6
    61c6:	0019      	movs	r1, r3
    61c8:	0010      	movs	r0, r2
    61ca:	4b10      	ldr	r3, [pc, #64]	; (620c <eth_process+0x11c>)
    61cc:	4798      	blx	r3
    61ce:	0003      	movs	r3, r0
    61d0:	8023      	strh	r3, [r4, #0]
			if(rtrn)		{eth_st=0;}
    61d2:	1dbb      	adds	r3, r7, #6
    61d4:	881b      	ldrh	r3, [r3, #0]
    61d6:	2b00      	cmp	r3, #0
    61d8:	d00e      	beq.n	61f8 <eth_process+0x108>
    61da:	4b09      	ldr	r3, [pc, #36]	; (6200 <eth_process+0x110>)
    61dc:	2200      	movs	r2, #0
    61de:	701a      	strb	r2, [r3, #0]
		break;
    61e0:	e00a      	b.n	61f8 <eth_process+0x108>
		default:
			eth_st = CHECK;
    61e2:	4b07      	ldr	r3, [pc, #28]	; (6200 <eth_process+0x110>)
    61e4:	2200      	movs	r2, #0
    61e6:	701a      	strb	r2, [r3, #0]
		break;
    61e8:	46c0      	nop			; (mov r8, r8)
    61ea:	e006      	b.n	61fa <eth_process+0x10a>
					case COMMON_SOCK_VAL:																						return;
    61ec:	46c0      	nop			; (mov r8, r8)
    61ee:	e004      	b.n	61fa <eth_process+0x10a>
					default:				if(cfg_1.sock_rs485[rtrn-1].mode == TCP) {w5500_mode.mode_op=MODE_OP_WRITE_TCP;}	return;
    61f0:	46c0      	nop			; (mov r8, r8)
    61f2:	e002      	b.n	61fa <eth_process+0x10a>
		break;
    61f4:	46c0      	nop			; (mov r8, r8)
    61f6:	e000      	b.n	61fa <eth_process+0x10a>
		break;
    61f8:	46c0      	nop			; (mov r8, r8)

	}
}
    61fa:	46bd      	mov	sp, r7
    61fc:	b003      	add	sp, #12
    61fe:	bd90      	pop	{r4, r7, pc}
    6200:	2000045c 	.word	0x2000045c
    6204:	20003afc 	.word	0x20003afc
    6208:	20003dc0 	.word	0x20003dc0
    620c:	000094ed 	.word	0x000094ed

00006210 <check_sockets_process>:

void check_sockets_process (BYTE *buf)
{
    6210:	b580      	push	{r7, lr}
    6212:	b082      	sub	sp, #8
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	static BYTE index = MAX_SOCKETS_VAL;
	
	index++;
    6218:	4b1a      	ldr	r3, [pc, #104]	; (6284 <check_sockets_process+0x74>)
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	3301      	adds	r3, #1
    621e:	b2da      	uxtb	r2, r3
    6220:	4b18      	ldr	r3, [pc, #96]	; (6284 <check_sockets_process+0x74>)
    6222:	701a      	strb	r2, [r3, #0]
	if(index >= MAX_SOCKETS_VAL){index=0;}
    6224:	4b17      	ldr	r3, [pc, #92]	; (6284 <check_sockets_process+0x74>)
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	2b03      	cmp	r3, #3
    622a:	d902      	bls.n	6232 <check_sockets_process+0x22>
    622c:	4b15      	ldr	r3, [pc, #84]	; (6284 <check_sockets_process+0x74>)
    622e:	2200      	movs	r2, #0
    6230:	701a      	strb	r2, [r3, #0]
	
	switch (index)
    6232:	4b14      	ldr	r3, [pc, #80]	; (6284 <check_sockets_process+0x74>)
    6234:	781b      	ldrb	r3, [r3, #0]
    6236:	2b00      	cmp	r3, #0
    6238:	d106      	bne.n	6248 <check_sockets_process+0x38>
	{
		case COMMON_SOCK_VAL:
			w5500_mode.numb_socket	= SOCKET_0;
    623a:	4b13      	ldr	r3, [pc, #76]	; (6288 <check_sockets_process+0x78>)
    623c:	2200      	movs	r2, #0
    623e:	705a      	strb	r2, [r3, #1]
			w5500_mode.mode_op		= MODE_OP_READ_UDP;
    6240:	4b11      	ldr	r3, [pc, #68]	; (6288 <check_sockets_process+0x78>)
    6242:	2202      	movs	r2, #2
    6244:	701a      	strb	r2, [r3, #0]
		return;
    6246:	e01a      	b.n	627e <check_sockets_process+0x6e>
		default:
			w5500_mode.numb_socket = index;
    6248:	4b0e      	ldr	r3, [pc, #56]	; (6284 <check_sockets_process+0x74>)
    624a:	781a      	ldrb	r2, [r3, #0]
    624c:	4b0e      	ldr	r3, [pc, #56]	; (6288 <check_sockets_process+0x78>)
    624e:	705a      	strb	r2, [r3, #1]
			if (cfg_1.sock_rs485[index-1].mode == TCP)	{w5500_mode.mode_op = MODE_OP_READ_TCP;}
    6250:	4b0c      	ldr	r3, [pc, #48]	; (6284 <check_sockets_process+0x74>)
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	1e5a      	subs	r2, r3, #1
    6256:	490d      	ldr	r1, [pc, #52]	; (628c <check_sockets_process+0x7c>)
    6258:	2035      	movs	r0, #53	; 0x35
    625a:	0013      	movs	r3, r2
    625c:	005b      	lsls	r3, r3, #1
    625e:	189b      	adds	r3, r3, r2
    6260:	009b      	lsls	r3, r3, #2
    6262:	189b      	adds	r3, r3, r2
    6264:	18cb      	adds	r3, r1, r3
    6266:	181b      	adds	r3, r3, r0
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	2b02      	cmp	r3, #2
    626c:	d103      	bne.n	6276 <check_sockets_process+0x66>
    626e:	4b06      	ldr	r3, [pc, #24]	; (6288 <check_sockets_process+0x78>)
    6270:	2204      	movs	r2, #4
    6272:	701a      	strb	r2, [r3, #0]
			else										{w5500_mode.mode_op = MODE_OP_READ_UDP;}
		return;
    6274:	e003      	b.n	627e <check_sockets_process+0x6e>
			else										{w5500_mode.mode_op = MODE_OP_READ_UDP;}
    6276:	4b04      	ldr	r3, [pc, #16]	; (6288 <check_sockets_process+0x78>)
    6278:	2202      	movs	r2, #2
    627a:	701a      	strb	r2, [r3, #0]
		return;
    627c:	46c0      	nop			; (mov r8, r8)
	}									{w5500_mode.mode_op=MODE_OP_READ_UDP;}
	return;
}
    627e:	46bd      	mov	sp, r7
    6280:	b002      	add	sp, #8
    6282:	bd80      	pop	{r7, pc}
    6284:	20000001 	.word	0x20000001
    6288:	20003afc 	.word	0x20003afc
    628c:	20003dc0 	.word	0x20003dc0

00006290 <eth_parse>:

void eth_parse (BYTE numb_sock,WORD size)
{	
    6290:	b590      	push	{r4, r7, lr}
    6292:	b083      	sub	sp, #12
    6294:	af00      	add	r7, sp, #0
    6296:	0002      	movs	r2, r0
    6298:	1dfb      	adds	r3, r7, #7
    629a:	701a      	strb	r2, [r3, #0]
    629c:	1d3b      	adds	r3, r7, #4
    629e:	1c0a      	adds	r2, r1, #0
    62a0:	801a      	strh	r2, [r3, #0]
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    62a2:	1dfb      	adds	r3, r7, #7
    62a4:	781b      	ldrb	r3, [r3, #0]
    62a6:	4a2e      	ldr	r2, [pc, #184]	; (6360 <eth_parse+0xd0>)
    62a8:	492e      	ldr	r1, [pc, #184]	; (6364 <eth_parse+0xd4>)
    62aa:	482f      	ldr	r0, [pc, #188]	; (6368 <eth_parse+0xd8>)
    62ac:	4343      	muls	r3, r0
    62ae:	18d3      	adds	r3, r2, r3
    62b0:	185b      	adds	r3, r3, r1
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	2b01      	cmp	r3, #1
    62b6:	d04e      	beq.n	6356 <eth_parse+0xc6>
		
	eth_sock[numb_sock].counters.rx++;
    62b8:	1dfb      	adds	r3, r7, #7
    62ba:	7819      	ldrb	r1, [r3, #0]
    62bc:	4828      	ldr	r0, [pc, #160]	; (6360 <eth_parse+0xd0>)
    62be:	23ba      	movs	r3, #186	; 0xba
    62c0:	00db      	lsls	r3, r3, #3
    62c2:	4a29      	ldr	r2, [pc, #164]	; (6368 <eth_parse+0xd8>)
    62c4:	434a      	muls	r2, r1
    62c6:	1882      	adds	r2, r0, r2
    62c8:	18d3      	adds	r3, r2, r3
    62ca:	7ada      	ldrb	r2, [r3, #11]
    62cc:	7b18      	ldrb	r0, [r3, #12]
    62ce:	0200      	lsls	r0, r0, #8
    62d0:	4302      	orrs	r2, r0
    62d2:	7b58      	ldrb	r0, [r3, #13]
    62d4:	0400      	lsls	r0, r0, #16
    62d6:	4302      	orrs	r2, r0
    62d8:	7b9b      	ldrb	r3, [r3, #14]
    62da:	061b      	lsls	r3, r3, #24
    62dc:	4313      	orrs	r3, r2
    62de:	1c5a      	adds	r2, r3, #1
    62e0:	481f      	ldr	r0, [pc, #124]	; (6360 <eth_parse+0xd0>)
    62e2:	23ba      	movs	r3, #186	; 0xba
    62e4:	00db      	lsls	r3, r3, #3
    62e6:	4c20      	ldr	r4, [pc, #128]	; (6368 <eth_parse+0xd8>)
    62e8:	4361      	muls	r1, r4
    62ea:	1841      	adds	r1, r0, r1
    62ec:	18cb      	adds	r3, r1, r3
    62ee:	330b      	adds	r3, #11
    62f0:	21ff      	movs	r1, #255	; 0xff
    62f2:	4011      	ands	r1, r2
    62f4:	000c      	movs	r4, r1
    62f6:	7819      	ldrb	r1, [r3, #0]
    62f8:	2000      	movs	r0, #0
    62fa:	4001      	ands	r1, r0
    62fc:	1c08      	adds	r0, r1, #0
    62fe:	1c21      	adds	r1, r4, #0
    6300:	4301      	orrs	r1, r0
    6302:	7019      	strb	r1, [r3, #0]
    6304:	0a11      	lsrs	r1, r2, #8
    6306:	20ff      	movs	r0, #255	; 0xff
    6308:	4001      	ands	r1, r0
    630a:	000c      	movs	r4, r1
    630c:	7859      	ldrb	r1, [r3, #1]
    630e:	2000      	movs	r0, #0
    6310:	4001      	ands	r1, r0
    6312:	1c08      	adds	r0, r1, #0
    6314:	1c21      	adds	r1, r4, #0
    6316:	4301      	orrs	r1, r0
    6318:	7059      	strb	r1, [r3, #1]
    631a:	0c11      	lsrs	r1, r2, #16
    631c:	20ff      	movs	r0, #255	; 0xff
    631e:	4001      	ands	r1, r0
    6320:	000c      	movs	r4, r1
    6322:	7899      	ldrb	r1, [r3, #2]
    6324:	2000      	movs	r0, #0
    6326:	4001      	ands	r1, r0
    6328:	1c08      	adds	r0, r1, #0
    632a:	1c21      	adds	r1, r4, #0
    632c:	4301      	orrs	r1, r0
    632e:	7099      	strb	r1, [r3, #2]
    6330:	0e10      	lsrs	r0, r2, #24
    6332:	78da      	ldrb	r2, [r3, #3]
    6334:	2100      	movs	r1, #0
    6336:	400a      	ands	r2, r1
    6338:	1c11      	adds	r1, r2, #0
    633a:	1c02      	adds	r2, r0, #0
    633c:	430a      	orrs	r2, r1
    633e:	70da      	strb	r2, [r3, #3]
	eth_sock[numb_sock].r_status = 1;
    6340:	1dfb      	adds	r3, r7, #7
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	4a06      	ldr	r2, [pc, #24]	; (6360 <eth_parse+0xd0>)
    6346:	4907      	ldr	r1, [pc, #28]	; (6364 <eth_parse+0xd4>)
    6348:	4807      	ldr	r0, [pc, #28]	; (6368 <eth_parse+0xd8>)
    634a:	4343      	muls	r3, r0
    634c:	18d3      	adds	r3, r2, r3
    634e:	185b      	adds	r3, r3, r1
    6350:	2201      	movs	r2, #1
    6352:	701a      	strb	r2, [r3, #0]
    6354:	e000      	b.n	6358 <eth_parse+0xc8>
	if(eth_sock[numb_sock].r_status == 1)	{ return;}
    6356:	46c0      	nop			; (mov r8, r8)
}
    6358:	46bd      	mov	sp, r7
    635a:	b003      	add	sp, #12
    635c:	bd90      	pop	{r4, r7, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	200005cc 	.word	0x200005cc
    6364:	000005d1 	.word	0x000005d1
    6368:	000005e5 	.word	0x000005e5

0000636c <check_data_wr_process>:

BYTE check_data_wr_process (void)
{
    636c:	b590      	push	{r4, r7, lr}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
	BYTE numb_sock=0;
    6372:	1dfb      	adds	r3, r7, #7
    6374:	2200      	movs	r2, #0
    6376:	701a      	strb	r2, [r3, #0]

	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    6378:	1dfb      	adds	r3, r7, #7
    637a:	2200      	movs	r2, #0
    637c:	701a      	strb	r2, [r3, #0]
    637e:	e060      	b.n	6442 <check_data_wr_process+0xd6>
	{
		if( eth_sock[numb_sock].w_status == 1 )
    6380:	1dfb      	adds	r3, r7, #7
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	4a33      	ldr	r2, [pc, #204]	; (6454 <check_data_wr_process+0xe8>)
    6386:	4934      	ldr	r1, [pc, #208]	; (6458 <check_data_wr_process+0xec>)
    6388:	4834      	ldr	r0, [pc, #208]	; (645c <check_data_wr_process+0xf0>)
    638a:	4343      	muls	r3, r0
    638c:	18d3      	adds	r3, r2, r3
    638e:	185b      	adds	r3, r3, r1
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	2b01      	cmp	r3, #1
    6394:	d150      	bne.n	6438 <check_data_wr_process+0xcc>
		{
			eth_sock[numb_sock].w_status = 0;
    6396:	1dfb      	adds	r3, r7, #7
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	4a2e      	ldr	r2, [pc, #184]	; (6454 <check_data_wr_process+0xe8>)
    639c:	492e      	ldr	r1, [pc, #184]	; (6458 <check_data_wr_process+0xec>)
    639e:	482f      	ldr	r0, [pc, #188]	; (645c <check_data_wr_process+0xf0>)
    63a0:	4343      	muls	r3, r0
    63a2:	18d3      	adds	r3, r2, r3
    63a4:	185b      	adds	r3, r3, r1
    63a6:	2200      	movs	r2, #0
    63a8:	701a      	strb	r2, [r3, #0]
			eth_sock[numb_sock].counters.tx++;
    63aa:	1dfb      	adds	r3, r7, #7
    63ac:	7819      	ldrb	r1, [r3, #0]
    63ae:	4829      	ldr	r0, [pc, #164]	; (6454 <check_data_wr_process+0xe8>)
    63b0:	23ba      	movs	r3, #186	; 0xba
    63b2:	00db      	lsls	r3, r3, #3
    63b4:	4a29      	ldr	r2, [pc, #164]	; (645c <check_data_wr_process+0xf0>)
    63b6:	434a      	muls	r2, r1
    63b8:	1882      	adds	r2, r0, r2
    63ba:	18d3      	adds	r3, r2, r3
    63bc:	79da      	ldrb	r2, [r3, #7]
    63be:	7a18      	ldrb	r0, [r3, #8]
    63c0:	0200      	lsls	r0, r0, #8
    63c2:	4302      	orrs	r2, r0
    63c4:	7a58      	ldrb	r0, [r3, #9]
    63c6:	0400      	lsls	r0, r0, #16
    63c8:	4302      	orrs	r2, r0
    63ca:	7a9b      	ldrb	r3, [r3, #10]
    63cc:	061b      	lsls	r3, r3, #24
    63ce:	4313      	orrs	r3, r2
    63d0:	1c5a      	adds	r2, r3, #1
    63d2:	4820      	ldr	r0, [pc, #128]	; (6454 <check_data_wr_process+0xe8>)
    63d4:	23ba      	movs	r3, #186	; 0xba
    63d6:	00db      	lsls	r3, r3, #3
    63d8:	4c20      	ldr	r4, [pc, #128]	; (645c <check_data_wr_process+0xf0>)
    63da:	4361      	muls	r1, r4
    63dc:	1841      	adds	r1, r0, r1
    63de:	18cb      	adds	r3, r1, r3
    63e0:	3307      	adds	r3, #7
    63e2:	21ff      	movs	r1, #255	; 0xff
    63e4:	4011      	ands	r1, r2
    63e6:	000c      	movs	r4, r1
    63e8:	7819      	ldrb	r1, [r3, #0]
    63ea:	2000      	movs	r0, #0
    63ec:	4001      	ands	r1, r0
    63ee:	1c08      	adds	r0, r1, #0
    63f0:	1c21      	adds	r1, r4, #0
    63f2:	4301      	orrs	r1, r0
    63f4:	7019      	strb	r1, [r3, #0]
    63f6:	0a11      	lsrs	r1, r2, #8
    63f8:	20ff      	movs	r0, #255	; 0xff
    63fa:	4001      	ands	r1, r0
    63fc:	000c      	movs	r4, r1
    63fe:	7859      	ldrb	r1, [r3, #1]
    6400:	2000      	movs	r0, #0
    6402:	4001      	ands	r1, r0
    6404:	1c08      	adds	r0, r1, #0
    6406:	1c21      	adds	r1, r4, #0
    6408:	4301      	orrs	r1, r0
    640a:	7059      	strb	r1, [r3, #1]
    640c:	0c11      	lsrs	r1, r2, #16
    640e:	20ff      	movs	r0, #255	; 0xff
    6410:	4001      	ands	r1, r0
    6412:	000c      	movs	r4, r1
    6414:	7899      	ldrb	r1, [r3, #2]
    6416:	2000      	movs	r0, #0
    6418:	4001      	ands	r1, r0
    641a:	1c08      	adds	r0, r1, #0
    641c:	1c21      	adds	r1, r4, #0
    641e:	4301      	orrs	r1, r0
    6420:	7099      	strb	r1, [r3, #2]
    6422:	0e10      	lsrs	r0, r2, #24
    6424:	78da      	ldrb	r2, [r3, #3]
    6426:	2100      	movs	r1, #0
    6428:	400a      	ands	r2, r1
    642a:	1c11      	adds	r1, r2, #0
    642c:	1c02      	adds	r2, r0, #0
    642e:	430a      	orrs	r2, r1
    6430:	70da      	strb	r2, [r3, #3]
			return (numb_sock);
    6432:	1dfb      	adds	r3, r7, #7
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	e009      	b.n	644c <check_data_wr_process+0xe0>
	for( numb_sock = 0; numb_sock < MAX_SOCKETS_CNT; numb_sock++ )
    6438:	1dfb      	adds	r3, r7, #7
    643a:	781a      	ldrb	r2, [r3, #0]
    643c:	1dfb      	adds	r3, r7, #7
    643e:	3201      	adds	r2, #1
    6440:	701a      	strb	r2, [r3, #0]
    6442:	1dfb      	adds	r3, r7, #7
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	2b04      	cmp	r3, #4
    6448:	d99a      	bls.n	6380 <check_data_wr_process+0x14>
		}
	}
	return (NO_SOKET);	
    644a:	236d      	movs	r3, #109	; 0x6d
}
    644c:	0018      	movs	r0, r3
    644e:	46bd      	mov	sp, r7
    6450:	b003      	add	sp, #12
    6452:	bd90      	pop	{r4, r7, pc}
    6454:	200005cc 	.word	0x200005cc
    6458:	000005d2 	.word	0x000005d2
    645c:	000005e5 	.word	0x000005e5

00006460 <flash_empty>:
#include "def.h"



WORD flash_empty(DWORD addr,WORD size)
{
    6460:	b580      	push	{r7, lr}
    6462:	b084      	sub	sp, #16
    6464:	af00      	add	r7, sp, #0
    6466:	6078      	str	r0, [r7, #4]
    6468:	000a      	movs	r2, r1
    646a:	1cbb      	adds	r3, r7, #2
    646c:	801a      	strh	r2, [r3, #0]
	DWORD  v    = 0;
    646e:	2300      	movs	r3, #0
    6470:	60fb      	str	r3, [r7, #12]
	for(;size;addr+=4,size-=4)
    6472:	e00f      	b.n	6494 <flash_empty+0x34>
	{
		v = *(__IO DWORD*)(addr);
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	60fb      	str	r3, [r7, #12]
		if(v != 0xFFFFFFFF)
    647a:	68fb      	ldr	r3, [r7, #12]
    647c:	3301      	adds	r3, #1
    647e:	d001      	beq.n	6484 <flash_empty+0x24>
		{
			return(0);
    6480:	2300      	movs	r3, #0
    6482:	e00c      	b.n	649e <flash_empty+0x3e>
	for(;size;addr+=4,size-=4)
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	3304      	adds	r3, #4
    6488:	607b      	str	r3, [r7, #4]
    648a:	1cbb      	adds	r3, r7, #2
    648c:	1cba      	adds	r2, r7, #2
    648e:	8812      	ldrh	r2, [r2, #0]
    6490:	3a04      	subs	r2, #4
    6492:	801a      	strh	r2, [r3, #0]
    6494:	1cbb      	adds	r3, r7, #2
    6496:	881b      	ldrh	r3, [r3, #0]
    6498:	2b00      	cmp	r3, #0
    649a:	d1eb      	bne.n	6474 <flash_empty+0x14>
		}
	}


	return(1);
    649c:	2301      	movs	r3, #1
}
    649e:	0018      	movs	r0, r3
    64a0:	46bd      	mov	sp, r7
    64a2:	b004      	add	sp, #16
    64a4:	bd80      	pop	{r7, pc}

000064a6 <flash_erase_page>:



void flash_erase_page(DWORD addr)
//-----------------------------------------------------------------------------
{
    64a6:	b580      	push	{r7, lr}
    64a8:	b082      	sub	sp, #8
    64aa:	af00      	add	r7, sp, #0
    64ac:	6078      	str	r0, [r7, #4]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	4b0e      	ldr	r3, [pc, #56]	; (64ec <flash_erase_page+0x46>)
    64b2:	7d1b      	ldrb	r3, [r3, #20]
    64b4:	07db      	lsls	r3, r3, #31
    64b6:	0fdb      	lsrs	r3, r3, #31
    64b8:	b2db      	uxtb	r3, r3
    64ba:	2b00      	cmp	r3, #0
    64bc:	d0f8      	beq.n	64b0 <flash_erase_page+0xa>
	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    64be:	4b0b      	ldr	r3, [pc, #44]	; (64ec <flash_erase_page+0x46>)
    64c0:	2220      	movs	r2, #32
    64c2:	32ff      	adds	r2, #255	; 0xff
    64c4:	831a      	strh	r2, [r3, #24]
	*(__IO DWORD *)(addr)=0xFFFFFFFF;//dummy data to automatically set ADDR register
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	2201      	movs	r2, #1
    64ca:	4252      	negs	r2, r2
    64cc:	601a      	str	r2, [r3, #0]
	//NVMCTRL->ADDR.reg = (uint32_t)dst>>2;
	NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY|NVMCTRL_CTRLA_CMD_ER;
    64ce:	4b07      	ldr	r3, [pc, #28]	; (64ec <flash_erase_page+0x46>)
    64d0:	4a07      	ldr	r2, [pc, #28]	; (64f0 <flash_erase_page+0x4a>)
    64d2:	801a      	strh	r2, [r3, #0]
	while (NVMCTRL->INTFLAG.bit.READY == 0);//wait
    64d4:	46c0      	nop			; (mov r8, r8)
    64d6:	4b05      	ldr	r3, [pc, #20]	; (64ec <flash_erase_page+0x46>)
    64d8:	7d1b      	ldrb	r3, [r3, #20]
    64da:	07db      	lsls	r3, r3, #31
    64dc:	0fdb      	lsrs	r3, r3, #31
    64de:	b2db      	uxtb	r3, r3
    64e0:	2b00      	cmp	r3, #0
    64e2:	d0f8      	beq.n	64d6 <flash_erase_page+0x30>
}
    64e4:	46c0      	nop			; (mov r8, r8)
    64e6:	46bd      	mov	sp, r7
    64e8:	b002      	add	sp, #8
    64ea:	bd80      	pop	{r7, pc}
    64ec:	41004000 	.word	0x41004000
    64f0:	ffffa502 	.word	0xffffa502

000064f4 <flash_write>:



void flash_write(DWORD addr,BYTE *buf,WORD size)
//-----------------------------------------------------------------------------
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b088      	sub	sp, #32
    64f8:	af00      	add	r7, sp, #0
    64fa:	60f8      	str	r0, [r7, #12]
    64fc:	60b9      	str	r1, [r7, #8]
    64fe:	1dbb      	adds	r3, r7, #6
    6500:	801a      	strh	r2, [r3, #0]
	WORD wn   = 0;
    6502:	231e      	movs	r3, #30
    6504:	18fb      	adds	r3, r7, r3
    6506:	2200      	movs	r2, #0
    6508:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    650a:	2300      	movs	r3, #0
    650c:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    650e:	2300      	movs	r3, #0
    6510:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    6512:	4a33      	ldr	r2, [pc, #204]	; (65e0 <flash_write+0xec>)
    6514:	6853      	ldr	r3, [r2, #4]
    6516:	2180      	movs	r1, #128	; 0x80
    6518:	438b      	bics	r3, r1
    651a:	6053      	str	r3, [r2, #4]

	while(size > 0)
    651c:	e057      	b.n	65ce <flash_write+0xda>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    651e:	1dbb      	adds	r3, r7, #6
    6520:	881b      	ldrh	r3, [r3, #0]
    6522:	2b10      	cmp	r3, #16
    6524:	d802      	bhi.n	652c <flash_write+0x38>
    6526:	1dbb      	adds	r3, r7, #6
    6528:	881b      	ldrh	r3, [r3, #0]
    652a:	e000      	b.n	652e <flash_write+0x3a>
    652c:	2310      	movs	r3, #16
    652e:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6530:	697b      	ldr	r3, [r7, #20]
    6532:	b29a      	uxth	r2, r3
    6534:	1dbb      	adds	r3, r7, #6
    6536:	1db9      	adds	r1, r7, #6
    6538:	8809      	ldrh	r1, [r1, #0]
    653a:	1a8a      	subs	r2, r1, r2
    653c:	801a      	strh	r2, [r3, #0]
		
		wdt_reset();
    653e:	4b29      	ldr	r3, [pc, #164]	; (65e4 <flash_write+0xf0>)
    6540:	799b      	ldrb	r3, [r3, #6]
    6542:	07db      	lsls	r3, r3, #31
    6544:	0fdb      	lsrs	r3, r3, #31
    6546:	b2db      	uxtb	r3, r3
    6548:	2b01      	cmp	r3, #1
    654a:	d107      	bne.n	655c <flash_write+0x68>
    654c:	4a25      	ldr	r2, [pc, #148]	; (65e4 <flash_write+0xf0>)
    654e:	7993      	ldrb	r3, [r2, #6]
    6550:	2101      	movs	r1, #1
    6552:	430b      	orrs	r3, r1
    6554:	7193      	strb	r3, [r2, #6]
    6556:	4b23      	ldr	r3, [pc, #140]	; (65e4 <flash_write+0xf0>)
    6558:	22a5      	movs	r2, #165	; 0xa5
    655a:	721a      	strb	r2, [r3, #8]
		
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    655c:	4b20      	ldr	r3, [pc, #128]	; (65e0 <flash_write+0xec>)
    655e:	4a22      	ldr	r2, [pc, #136]	; (65e8 <flash_write+0xf4>)
    6560:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	4b1e      	ldr	r3, [pc, #120]	; (65e0 <flash_write+0xec>)
    6566:	7d1b      	ldrb	r3, [r3, #20]
    6568:	07db      	lsls	r3, r3, #31
    656a:	0fdb      	lsrs	r3, r3, #31
    656c:	b2db      	uxtb	r3, r3
    656e:	2b00      	cmp	r3, #0
    6570:	d0f8      	beq.n	6564 <flash_write+0x70>

		for(wn=0;wn<len;wn+=4,addr+=4)
    6572:	231e      	movs	r3, #30
    6574:	18fb      	adds	r3, r7, r3
    6576:	2200      	movs	r2, #0
    6578:	801a      	strh	r2, [r3, #0]
    657a:	e013      	b.n	65a4 <flash_write+0xb0>
		{
			*(__IO DWORD*)(addr) = *(DWORD*)&buf[wn+cnt];
    657c:	68fb      	ldr	r3, [r7, #12]
    657e:	221e      	movs	r2, #30
    6580:	18ba      	adds	r2, r7, r2
    6582:	8811      	ldrh	r1, [r2, #0]
    6584:	69ba      	ldr	r2, [r7, #24]
    6586:	188a      	adds	r2, r1, r2
    6588:	68b9      	ldr	r1, [r7, #8]
    658a:	188a      	adds	r2, r1, r2
    658c:	6812      	ldr	r2, [r2, #0]
    658e:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,addr+=4)
    6590:	231e      	movs	r3, #30
    6592:	18fb      	adds	r3, r7, r3
    6594:	221e      	movs	r2, #30
    6596:	18ba      	adds	r2, r7, r2
    6598:	8812      	ldrh	r2, [r2, #0]
    659a:	3204      	adds	r2, #4
    659c:	801a      	strh	r2, [r3, #0]
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	3304      	adds	r3, #4
    65a2:	60fb      	str	r3, [r7, #12]
    65a4:	231e      	movs	r3, #30
    65a6:	18fb      	adds	r3, r7, r3
    65a8:	881a      	ldrh	r2, [r3, #0]
    65aa:	697b      	ldr	r3, [r7, #20]
    65ac:	429a      	cmp	r2, r3
    65ae:	d3e5      	bcc.n	657c <flash_write+0x88>
		}
		
		cnt=cnt+len;
    65b0:	69ba      	ldr	r2, [r7, #24]
    65b2:	697b      	ldr	r3, [r7, #20]
    65b4:	18d3      	adds	r3, r2, r3
    65b6:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    65b8:	4b09      	ldr	r3, [pc, #36]	; (65e0 <flash_write+0xec>)
    65ba:	4a0c      	ldr	r2, [pc, #48]	; (65ec <flash_write+0xf8>)
    65bc:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    65be:	46c0      	nop			; (mov r8, r8)
    65c0:	4b07      	ldr	r3, [pc, #28]	; (65e0 <flash_write+0xec>)
    65c2:	7d1b      	ldrb	r3, [r3, #20]
    65c4:	07db      	lsls	r3, r3, #31
    65c6:	0fdb      	lsrs	r3, r3, #31
    65c8:	b2db      	uxtb	r3, r3
    65ca:	2b00      	cmp	r3, #0
    65cc:	d0f8      	beq.n	65c0 <flash_write+0xcc>
	while(size > 0)
    65ce:	1dbb      	adds	r3, r7, #6
    65d0:	881b      	ldrh	r3, [r3, #0]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d1a3      	bne.n	651e <flash_write+0x2a>
	}
}
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	46bd      	mov	sp, r7
    65da:	b008      	add	sp, #32
    65dc:	bd80      	pop	{r7, pc}
    65de:	46c0      	nop			; (mov r8, r8)
    65e0:	41004000 	.word	0x41004000
    65e4:	40001000 	.word	0x40001000
    65e8:	ffffa544 	.word	0xffffa544
    65ec:	ffffa504 	.word	0xffffa504

000065f0 <flash_copy>:



WORD flash_copy(DWORD dst,DWORD src,DWORD size)
//--------------------------------------------------------------------------
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b088      	sub	sp, #32
    65f4:	af00      	add	r7, sp, #0
    65f6:	60f8      	str	r0, [r7, #12]
    65f8:	60b9      	str	r1, [r7, #8]
    65fa:	607a      	str	r2, [r7, #4]
	WORD wn   = 0;
    65fc:	231e      	movs	r3, #30
    65fe:	18fb      	adds	r3, r7, r3
    6600:	2200      	movs	r2, #0
    6602:	801a      	strh	r2, [r3, #0]
	DWORD len =0;
    6604:	2300      	movs	r3, #0
    6606:	617b      	str	r3, [r7, #20]
	DWORD cnt =0;
    6608:	2300      	movs	r3, #0
    660a:	61bb      	str	r3, [r7, #24]
	
	NVMCTRL->CTRLB.bit.MANW=0;
    660c:	4a2d      	ldr	r2, [pc, #180]	; (66c4 <flash_copy+0xd4>)
    660e:	6853      	ldr	r3, [r2, #4]
    6610:	2180      	movs	r1, #128	; 0x80
    6612:	438b      	bics	r3, r1
    6614:	6053      	str	r3, [r2, #4]

	while(size > 0)
    6616:	e04d      	b.n	66b4 <flash_copy+0xc4>
	{
		len=(64 >> 2) < size ? (64 >> 2) : size;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	2b10      	cmp	r3, #16
    661c:	d900      	bls.n	6620 <flash_copy+0x30>
    661e:	2310      	movs	r3, #16
    6620:	617b      	str	r3, [r7, #20]
		
		size-=len;
    6622:	687a      	ldr	r2, [r7, #4]
    6624:	697b      	ldr	r3, [r7, #20]
    6626:	1ad3      	subs	r3, r2, r3
    6628:	607b      	str	r3, [r7, #4]
		wdt_reset();
    662a:	4b27      	ldr	r3, [pc, #156]	; (66c8 <flash_copy+0xd8>)
    662c:	799b      	ldrb	r3, [r3, #6]
    662e:	07db      	lsls	r3, r3, #31
    6630:	0fdb      	lsrs	r3, r3, #31
    6632:	b2db      	uxtb	r3, r3
    6634:	2b01      	cmp	r3, #1
    6636:	d107      	bne.n	6648 <flash_copy+0x58>
    6638:	4a23      	ldr	r2, [pc, #140]	; (66c8 <flash_copy+0xd8>)
    663a:	7993      	ldrb	r3, [r2, #6]
    663c:	2101      	movs	r1, #1
    663e:	430b      	orrs	r3, r1
    6640:	7193      	strb	r3, [r2, #6]
    6642:	4b21      	ldr	r3, [pc, #132]	; (66c8 <flash_copy+0xd8>)
    6644:	22a5      	movs	r2, #165	; 0xa5
    6646:	721a      	strb	r2, [r3, #8]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    6648:	4b1e      	ldr	r3, [pc, #120]	; (66c4 <flash_copy+0xd4>)
    664a:	4a20      	ldr	r2, [pc, #128]	; (66cc <flash_copy+0xdc>)
    664c:	801a      	strh	r2, [r3, #0]
		while(NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	4b1c      	ldr	r3, [pc, #112]	; (66c4 <flash_copy+0xd4>)
    6652:	7d1b      	ldrb	r3, [r3, #20]
    6654:	07db      	lsls	r3, r3, #31
    6656:	0fdb      	lsrs	r3, r3, #31
    6658:	b2db      	uxtb	r3, r3
    665a:	2b00      	cmp	r3, #0
    665c:	d0f8      	beq.n	6650 <flash_copy+0x60>

		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    665e:	231e      	movs	r3, #30
    6660:	18fb      	adds	r3, r7, r3
    6662:	2200      	movs	r2, #0
    6664:	801a      	strh	r2, [r3, #0]
    6666:	e010      	b.n	668a <flash_copy+0x9a>
		{
			
			*(__IO DWORD*)(dst) = *(__IO DWORD*)(src);
    6668:	68fb      	ldr	r3, [r7, #12]
    666a:	68ba      	ldr	r2, [r7, #8]
    666c:	6812      	ldr	r2, [r2, #0]
    666e:	601a      	str	r2, [r3, #0]
		for(wn=0;wn<len;wn+=4,dst+=4,src+=4)
    6670:	231e      	movs	r3, #30
    6672:	18fb      	adds	r3, r7, r3
    6674:	221e      	movs	r2, #30
    6676:	18ba      	adds	r2, r7, r2
    6678:	8812      	ldrh	r2, [r2, #0]
    667a:	3204      	adds	r2, #4
    667c:	801a      	strh	r2, [r3, #0]
    667e:	68fb      	ldr	r3, [r7, #12]
    6680:	3304      	adds	r3, #4
    6682:	60fb      	str	r3, [r7, #12]
    6684:	68bb      	ldr	r3, [r7, #8]
    6686:	3304      	adds	r3, #4
    6688:	60bb      	str	r3, [r7, #8]
    668a:	231e      	movs	r3, #30
    668c:	18fb      	adds	r3, r7, r3
    668e:	881a      	ldrh	r2, [r3, #0]
    6690:	697b      	ldr	r3, [r7, #20]
    6692:	429a      	cmp	r2, r3
    6694:	d3e8      	bcc.n	6668 <flash_copy+0x78>
		}
		
		cnt=cnt+len;
    6696:	69ba      	ldr	r2, [r7, #24]
    6698:	697b      	ldr	r3, [r7, #20]
    669a:	18d3      	adds	r3, r2, r3
    669c:	61bb      	str	r3, [r7, #24]
		NVMCTRL->CTRLA.reg=NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    669e:	4b09      	ldr	r3, [pc, #36]	; (66c4 <flash_copy+0xd4>)
    66a0:	4a0b      	ldr	r2, [pc, #44]	; (66d0 <flash_copy+0xe0>)
    66a2:	801a      	strh	r2, [r3, #0]
		while (NVMCTRL->INTFLAG.bit.READY == 0) { ; }
    66a4:	46c0      	nop			; (mov r8, r8)
    66a6:	4b07      	ldr	r3, [pc, #28]	; (66c4 <flash_copy+0xd4>)
    66a8:	7d1b      	ldrb	r3, [r3, #20]
    66aa:	07db      	lsls	r3, r3, #31
    66ac:	0fdb      	lsrs	r3, r3, #31
    66ae:	b2db      	uxtb	r3, r3
    66b0:	2b00      	cmp	r3, #0
    66b2:	d0f8      	beq.n	66a6 <flash_copy+0xb6>
	while(size > 0)
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	2b00      	cmp	r3, #0
    66b8:	d1ae      	bne.n	6618 <flash_copy+0x28>
	}
	return 0;
    66ba:	2300      	movs	r3, #0
}
    66bc:	0018      	movs	r0, r3
    66be:	46bd      	mov	sp, r7
    66c0:	b008      	add	sp, #32
    66c2:	bd80      	pop	{r7, pc}
    66c4:	41004000 	.word	0x41004000
    66c8:	40001000 	.word	0x40001000
    66cc:	ffffa544 	.word	0xffffa544
    66d0:	ffffa504 	.word	0xffffa504

000066d4 <flash_read>:


WORD flash_read(DWORD addr,void* buf,WORD size)
//--------------------------------------------------------------------------
{
    66d4:	b580      	push	{r7, lr}
    66d6:	b086      	sub	sp, #24
    66d8:	af00      	add	r7, sp, #0
    66da:	60f8      	str	r0, [r7, #12]
    66dc:	60b9      	str	r1, [r7, #8]
    66de:	1dbb      	adds	r3, r7, #6
    66e0:	801a      	strh	r2, [r3, #0]
	WORD  cnt  = 0;
    66e2:	2316      	movs	r3, #22
    66e4:	18fb      	adds	r3, r7, r3
    66e6:	2200      	movs	r2, #0
    66e8:	801a      	strh	r2, [r3, #0]
	WORD* ptr = (WORD*)buf;
    66ea:	68bb      	ldr	r3, [r7, #8]
    66ec:	613b      	str	r3, [r7, #16]
	
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    66ee:	2316      	movs	r3, #22
    66f0:	18fb      	adds	r3, r7, r3
    66f2:	2200      	movs	r2, #0
    66f4:	801a      	strh	r2, [r3, #0]
    66f6:	e020      	b.n	673a <flash_read+0x66>
	{
		*ptr = *(__IO uint16_t*)(addr);
    66f8:	68fb      	ldr	r3, [r7, #12]
    66fa:	881b      	ldrh	r3, [r3, #0]
    66fc:	b29a      	uxth	r2, r3
    66fe:	693b      	ldr	r3, [r7, #16]
    6700:	801a      	strh	r2, [r3, #0]
		ptr++;
    6702:	693b      	ldr	r3, [r7, #16]
    6704:	3302      	adds	r3, #2
    6706:	613b      	str	r3, [r7, #16]
		wdt_reset();
    6708:	4b13      	ldr	r3, [pc, #76]	; (6758 <flash_read+0x84>)
    670a:	799b      	ldrb	r3, [r3, #6]
    670c:	07db      	lsls	r3, r3, #31
    670e:	0fdb      	lsrs	r3, r3, #31
    6710:	b2db      	uxtb	r3, r3
    6712:	2b01      	cmp	r3, #1
    6714:	d107      	bne.n	6726 <flash_read+0x52>
    6716:	4a10      	ldr	r2, [pc, #64]	; (6758 <flash_read+0x84>)
    6718:	7993      	ldrb	r3, [r2, #6]
    671a:	2101      	movs	r1, #1
    671c:	430b      	orrs	r3, r1
    671e:	7193      	strb	r3, [r2, #6]
    6720:	4b0d      	ldr	r3, [pc, #52]	; (6758 <flash_read+0x84>)
    6722:	22a5      	movs	r2, #165	; 0xa5
    6724:	721a      	strb	r2, [r3, #8]
	for(cnt=0;cnt<size;addr+=2,cnt+=2)
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	3302      	adds	r3, #2
    672a:	60fb      	str	r3, [r7, #12]
    672c:	2316      	movs	r3, #22
    672e:	18fb      	adds	r3, r7, r3
    6730:	2216      	movs	r2, #22
    6732:	18ba      	adds	r2, r7, r2
    6734:	8812      	ldrh	r2, [r2, #0]
    6736:	3202      	adds	r2, #2
    6738:	801a      	strh	r2, [r3, #0]
    673a:	2316      	movs	r3, #22
    673c:	18fa      	adds	r2, r7, r3
    673e:	1dbb      	adds	r3, r7, #6
    6740:	8812      	ldrh	r2, [r2, #0]
    6742:	881b      	ldrh	r3, [r3, #0]
    6744:	429a      	cmp	r2, r3
    6746:	d3d7      	bcc.n	66f8 <flash_read+0x24>
	}
	return(cnt);
    6748:	2316      	movs	r3, #22
    674a:	18fb      	adds	r3, r7, r3
    674c:	881b      	ldrh	r3, [r3, #0]
}
    674e:	0018      	movs	r0, r3
    6750:	46bd      	mov	sp, r7
    6752:	b006      	add	sp, #24
    6754:	bd80      	pop	{r7, pc}
    6756:	46c0      	nop			; (mov r8, r8)
    6758:	40001000 	.word	0x40001000

0000675c <gpio_init>:
#include "def.h"

void gpio_init (void)
{
    675c:	b580      	push	{r7, lr}
    675e:	af00      	add	r7, sp, #0
	//.............................................................................
	// LED ........................................................................
	//.............................................................................

	PORT->Group[1].OUTSET.reg=PORT_PB03;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6760:	4ac2      	ldr	r2, [pc, #776]	; (6a6c <gpio_init+0x310>)
    6762:	2398      	movs	r3, #152	; 0x98
    6764:	2108      	movs	r1, #8
    6766:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIRSET.reg=PORT_PB03;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6768:	4ac0      	ldr	r2, [pc, #768]	; (6a6c <gpio_init+0x310>)
    676a:	2388      	movs	r3, #136	; 0x88
    676c:	2108      	movs	r1, #8
    676e:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6770:	49be      	ldr	r1, [pc, #760]	; (6a6c <gpio_init+0x310>)
    6772:	22c3      	movs	r2, #195	; 0xc3
    6774:	5c8b      	ldrb	r3, [r1, r2]
    6776:	2001      	movs	r0, #1
    6778:	4383      	bics	r3, r0
    677a:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART1 SERCOM1_ALT ............................................................
	//.............................................................................
 
	// PA12 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA12;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    677c:	4bbb      	ldr	r3, [pc, #748]	; (6a6c <gpio_init+0x310>)
    677e:	2280      	movs	r2, #128	; 0x80
    6780:	0152      	lsls	r2, r2, #5
    6782:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA12;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6784:	4bb9      	ldr	r3, [pc, #740]	; (6a6c <gpio_init+0x310>)
    6786:	2280      	movs	r2, #128	; 0x80
    6788:	0152      	lsls	r2, r2, #5
    678a:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[12].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    678c:	49b7      	ldr	r1, [pc, #732]	; (6a6c <gpio_init+0x310>)
    678e:	224c      	movs	r2, #76	; 0x4c
    6790:	5c8b      	ldrb	r3, [r1, r2]
    6792:	2001      	movs	r0, #1
    6794:	4383      	bics	r3, r0
    6796:	548b      	strb	r3, [r1, r2]

	// PA00 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA00;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6798:	4bb4      	ldr	r3, [pc, #720]	; (6a6c <gpio_init+0x310>)
    679a:	2201      	movs	r2, #1
    679c:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA00;      // Bits 31:0 - DIRSET: Port Data Direction Set
    679e:	4bb3      	ldr	r3, [pc, #716]	; (6a6c <gpio_init+0x310>)
    67a0:	2201      	movs	r2, #1
    67a2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[0].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    67a4:	49b1      	ldr	r1, [pc, #708]	; (6a6c <gpio_init+0x310>)
    67a6:	2240      	movs	r2, #64	; 0x40
    67a8:	5c8b      	ldrb	r3, [r1, r2]
    67aa:	2001      	movs	r0, #1
    67ac:	4303      	orrs	r3, r0
    67ae:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    67b0:	49ae      	ldr	r1, [pc, #696]	; (6a6c <gpio_init+0x310>)
    67b2:	2230      	movs	r2, #48	; 0x30
    67b4:	5c8b      	ldrb	r3, [r1, r2]
    67b6:	200f      	movs	r0, #15
    67b8:	4383      	bics	r3, r0
    67ba:	1c18      	adds	r0, r3, #0
    67bc:	2303      	movs	r3, #3
    67be:	4303      	orrs	r3, r0
    67c0:	548b      	strb	r3, [r1, r2]

	// PA01 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA01;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    67c2:	4baa      	ldr	r3, [pc, #680]	; (6a6c <gpio_init+0x310>)
    67c4:	2202      	movs	r2, #2
    67c6:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[1].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    67c8:	49a8      	ldr	r1, [pc, #672]	; (6a6c <gpio_init+0x310>)
    67ca:	2241      	movs	r2, #65	; 0x41
    67cc:	5c8b      	ldrb	r3, [r1, r2]
    67ce:	2002      	movs	r0, #2
    67d0:	4303      	orrs	r3, r0
    67d2:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[1].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    67d4:	49a5      	ldr	r1, [pc, #660]	; (6a6c <gpio_init+0x310>)
    67d6:	2241      	movs	r2, #65	; 0x41
    67d8:	5c8b      	ldrb	r3, [r1, r2]
    67da:	2001      	movs	r0, #1
    67dc:	4303      	orrs	r3, r0
    67de:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [0].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    67e0:	49a2      	ldr	r1, [pc, #648]	; (6a6c <gpio_init+0x310>)
    67e2:	2230      	movs	r2, #48	; 0x30
    67e4:	5c8b      	ldrb	r3, [r1, r2]
    67e6:	200f      	movs	r0, #15
    67e8:	4003      	ands	r3, r0
    67ea:	1c18      	adds	r0, r3, #0
    67ec:	2330      	movs	r3, #48	; 0x30
    67ee:	4303      	orrs	r3, r0
    67f0:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART2 SERCOM0_ALT ............................................................
	//.............................................................................
	
	// PA13 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA13;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    67f2:	4b9e      	ldr	r3, [pc, #632]	; (6a6c <gpio_init+0x310>)
    67f4:	2280      	movs	r2, #128	; 0x80
    67f6:	0192      	lsls	r2, r2, #6
    67f8:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA13;      // Bits 31:0 - DIRSET: Port Data Direction Set
    67fa:	4b9c      	ldr	r3, [pc, #624]	; (6a6c <gpio_init+0x310>)
    67fc:	2280      	movs	r2, #128	; 0x80
    67fe:	0192      	lsls	r2, r2, #6
    6800:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[13].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6802:	499a      	ldr	r1, [pc, #616]	; (6a6c <gpio_init+0x310>)
    6804:	224d      	movs	r2, #77	; 0x4d
    6806:	5c8b      	ldrb	r3, [r1, r2]
    6808:	2001      	movs	r0, #1
    680a:	4383      	bics	r3, r0
    680c:	548b      	strb	r3, [r1, r2]

	// PA04 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA04;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    680e:	4b97      	ldr	r3, [pc, #604]	; (6a6c <gpio_init+0x310>)
    6810:	2210      	movs	r2, #16
    6812:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA04;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6814:	4b95      	ldr	r3, [pc, #596]	; (6a6c <gpio_init+0x310>)
    6816:	2210      	movs	r2, #16
    6818:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[4].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    681a:	4994      	ldr	r1, [pc, #592]	; (6a6c <gpio_init+0x310>)
    681c:	2244      	movs	r2, #68	; 0x44
    681e:	5c8b      	ldrb	r3, [r1, r2]
    6820:	2001      	movs	r0, #1
    6822:	4303      	orrs	r3, r0
    6824:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    6826:	4991      	ldr	r1, [pc, #580]	; (6a6c <gpio_init+0x310>)
    6828:	2232      	movs	r2, #50	; 0x32
    682a:	5c8b      	ldrb	r3, [r1, r2]
    682c:	200f      	movs	r0, #15
    682e:	4383      	bics	r3, r0
    6830:	1c18      	adds	r0, r3, #0
    6832:	2303      	movs	r3, #3
    6834:	4303      	orrs	r3, r0
    6836:	548b      	strb	r3, [r1, r2]

	// PA05 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA05;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6838:	4b8c      	ldr	r3, [pc, #560]	; (6a6c <gpio_init+0x310>)
    683a:	2220      	movs	r2, #32
    683c:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[5].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    683e:	498b      	ldr	r1, [pc, #556]	; (6a6c <gpio_init+0x310>)
    6840:	2245      	movs	r2, #69	; 0x45
    6842:	5c8b      	ldrb	r3, [r1, r2]
    6844:	2002      	movs	r0, #2
    6846:	4303      	orrs	r3, r0
    6848:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[5].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    684a:	4988      	ldr	r1, [pc, #544]	; (6a6c <gpio_init+0x310>)
    684c:	2245      	movs	r2, #69	; 0x45
    684e:	5c8b      	ldrb	r3, [r1, r2]
    6850:	2001      	movs	r0, #1
    6852:	4303      	orrs	r3, r0
    6854:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [2].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    6856:	4985      	ldr	r1, [pc, #532]	; (6a6c <gpio_init+0x310>)
    6858:	2232      	movs	r2, #50	; 0x32
    685a:	5c8b      	ldrb	r3, [r1, r2]
    685c:	200f      	movs	r0, #15
    685e:	4003      	ands	r3, r0
    6860:	1c18      	adds	r0, r3, #0
    6862:	2330      	movs	r3, #48	; 0x30
    6864:	4303      	orrs	r3, r0
    6866:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART3 SERCOM2_ALT ............................................................
	//.............................................................................
		
	// PA14 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA14;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6868:	4b80      	ldr	r3, [pc, #512]	; (6a6c <gpio_init+0x310>)
    686a:	2280      	movs	r2, #128	; 0x80
    686c:	01d2      	lsls	r2, r2, #7
    686e:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA14;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6870:	4b7e      	ldr	r3, [pc, #504]	; (6a6c <gpio_init+0x310>)
    6872:	2280      	movs	r2, #128	; 0x80
    6874:	01d2      	lsls	r2, r2, #7
    6876:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[14].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    6878:	497c      	ldr	r1, [pc, #496]	; (6a6c <gpio_init+0x310>)
    687a:	224e      	movs	r2, #78	; 0x4e
    687c:	5c8b      	ldrb	r3, [r1, r2]
    687e:	2001      	movs	r0, #1
    6880:	4383      	bics	r3, r0
    6882:	548b      	strb	r3, [r1, r2]

	// PA08 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA08;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6884:	4b79      	ldr	r3, [pc, #484]	; (6a6c <gpio_init+0x310>)
    6886:	2280      	movs	r2, #128	; 0x80
    6888:	0052      	lsls	r2, r2, #1
    688a:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA08;      // Bits 31:0 - DIRSET: Port Data Direction Set
    688c:	4b77      	ldr	r3, [pc, #476]	; (6a6c <gpio_init+0x310>)
    688e:	2280      	movs	r2, #128	; 0x80
    6890:	0052      	lsls	r2, r2, #1
    6892:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[8].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6894:	4975      	ldr	r1, [pc, #468]	; (6a6c <gpio_init+0x310>)
    6896:	2248      	movs	r2, #72	; 0x48
    6898:	5c8b      	ldrb	r3, [r1, r2]
    689a:	2001      	movs	r0, #1
    689c:	4303      	orrs	r3, r0
    689e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    68a0:	4972      	ldr	r1, [pc, #456]	; (6a6c <gpio_init+0x310>)
    68a2:	2234      	movs	r2, #52	; 0x34
    68a4:	5c8b      	ldrb	r3, [r1, r2]
    68a6:	200f      	movs	r0, #15
    68a8:	4383      	bics	r3, r0
    68aa:	1c18      	adds	r0, r3, #0
    68ac:	2303      	movs	r3, #3
    68ae:	4303      	orrs	r3, r0
    68b0:	548b      	strb	r3, [r1, r2]

	// PA09 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA09;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    68b2:	4b6e      	ldr	r3, [pc, #440]	; (6a6c <gpio_init+0x310>)
    68b4:	2280      	movs	r2, #128	; 0x80
    68b6:	0092      	lsls	r2, r2, #2
    68b8:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[9].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    68ba:	496c      	ldr	r1, [pc, #432]	; (6a6c <gpio_init+0x310>)
    68bc:	2249      	movs	r2, #73	; 0x49
    68be:	5c8b      	ldrb	r3, [r1, r2]
    68c0:	2002      	movs	r0, #2
    68c2:	4303      	orrs	r3, r0
    68c4:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[9].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    68c6:	4969      	ldr	r1, [pc, #420]	; (6a6c <gpio_init+0x310>)
    68c8:	2249      	movs	r2, #73	; 0x49
    68ca:	5c8b      	ldrb	r3, [r1, r2]
    68cc:	2001      	movs	r0, #1
    68ce:	4303      	orrs	r3, r0
    68d0:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [4].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    68d2:	4966      	ldr	r1, [pc, #408]	; (6a6c <gpio_init+0x310>)
    68d4:	2234      	movs	r2, #52	; 0x34
    68d6:	5c8b      	ldrb	r3, [r1, r2]
    68d8:	200f      	movs	r0, #15
    68da:	4003      	ands	r3, r0
    68dc:	1c18      	adds	r0, r3, #0
    68de:	2330      	movs	r3, #48	; 0x30
    68e0:	4303      	orrs	r3, r0
    68e2:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// USART4 SERCOM3_ALT ............................................................
	//.............................................................................
		
	// PA15 - USART_RTS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA15;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    68e4:	4b61      	ldr	r3, [pc, #388]	; (6a6c <gpio_init+0x310>)
    68e6:	2280      	movs	r2, #128	; 0x80
    68e8:	0212      	lsls	r2, r2, #8
    68ea:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA15;      // Bits 31:0 - DIRSET: Port Data Direction Set
    68ec:	4b5f      	ldr	r3, [pc, #380]	; (6a6c <gpio_init+0x310>)
    68ee:	2280      	movs	r2, #128	; 0x80
    68f0:	0212      	lsls	r2, r2, #8
    68f2:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[15].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    68f4:	495d      	ldr	r1, [pc, #372]	; (6a6c <gpio_init+0x310>)
    68f6:	224f      	movs	r2, #79	; 0x4f
    68f8:	5c8b      	ldrb	r3, [r1, r2]
    68fa:	2001      	movs	r0, #1
    68fc:	4383      	bics	r3, r0
    68fe:	548b      	strb	r3, [r1, r2]

	// PA16 - USART_TX (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA16;      // Bits 31:0 - OUTSET: Port Data Output Value Set
    6900:	4b5a      	ldr	r3, [pc, #360]	; (6a6c <gpio_init+0x310>)
    6902:	2280      	movs	r2, #128	; 0x80
    6904:	0252      	lsls	r2, r2, #9
    6906:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA16;      // Bits 31:0 - DIRSET: Port Data Direction Set
    6908:	4b58      	ldr	r3, [pc, #352]	; (6a6c <gpio_init+0x310>)
    690a:	2280      	movs	r2, #128	; 0x80
    690c:	0252      	lsls	r2, r2, #9
    690e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[16].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6910:	4956      	ldr	r1, [pc, #344]	; (6a6c <gpio_init+0x310>)
    6912:	2250      	movs	r2, #80	; 0x50
    6914:	5c8b      	ldrb	r3, [r1, r2]
    6916:	2001      	movs	r0, #1
    6918:	4303      	orrs	r3, r0
    691a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXE=0x03;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (2: Peripheral function C selected)
    691c:	4953      	ldr	r1, [pc, #332]	; (6a6c <gpio_init+0x310>)
    691e:	2238      	movs	r2, #56	; 0x38
    6920:	5c8b      	ldrb	r3, [r1, r2]
    6922:	200f      	movs	r0, #15
    6924:	4383      	bics	r3, r0
    6926:	1c18      	adds	r0, r3, #0
    6928:	2303      	movs	r3, #3
    692a:	4303      	orrs	r3, r0
    692c:	548b      	strb	r3, [r1, r2]

	// PA17 - USART_RX (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA17;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    692e:	4b4f      	ldr	r3, [pc, #316]	; (6a6c <gpio_init+0x310>)
    6930:	2280      	movs	r2, #128	; 0x80
    6932:	0292      	lsls	r2, r2, #10
    6934:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[17].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6936:	494d      	ldr	r1, [pc, #308]	; (6a6c <gpio_init+0x310>)
    6938:	2251      	movs	r2, #81	; 0x51
    693a:	5c8b      	ldrb	r3, [r1, r2]
    693c:	2002      	movs	r0, #2
    693e:	4303      	orrs	r3, r0
    6940:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[17].bit.PMUXEN=0x01;	// Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6942:	494a      	ldr	r1, [pc, #296]	; (6a6c <gpio_init+0x310>)
    6944:	2251      	movs	r2, #81	; 0x51
    6946:	5c8b      	ldrb	r3, [r1, r2]
    6948:	2001      	movs	r0, #1
    694a:	4303      	orrs	r3, r0
    694c:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [8].bit.PMUXO =3;  	// Bits 3:0  - PMUXE: Peripheral Multiplexing Odd (2: Peripheral function C selected)	
    694e:	4947      	ldr	r1, [pc, #284]	; (6a6c <gpio_init+0x310>)
    6950:	2238      	movs	r2, #56	; 0x38
    6952:	5c8b      	ldrb	r3, [r1, r2]
    6954:	200f      	movs	r0, #15
    6956:	4003      	ands	r3, r0
    6958:	1c18      	adds	r0, r3, #0
    695a:	2330      	movs	r3, #48	; 0x30
    695c:	4303      	orrs	r3, r0
    695e:	548b      	strb	r3, [r1, r2]
	//.............................................................................
	// SPI SERCOM5_ALT ....................................................................
	//.............................................................................*/

	// PA23 - SPI_MOSI (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA23;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6960:	4b42      	ldr	r3, [pc, #264]	; (6a6c <gpio_init+0x310>)
    6962:	2280      	movs	r2, #128	; 0x80
    6964:	0412      	lsls	r2, r2, #16
    6966:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA23;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6968:	4b40      	ldr	r3, [pc, #256]	; (6a6c <gpio_init+0x310>)
    696a:	2280      	movs	r2, #128	; 0x80
    696c:	0412      	lsls	r2, r2, #16
    696e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[23].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6970:	493e      	ldr	r1, [pc, #248]	; (6a6c <gpio_init+0x310>)
    6972:	2257      	movs	r2, #87	; 0x57
    6974:	5c8b      	ldrb	r3, [r1, r2]
    6976:	2001      	movs	r0, #1
    6978:	4303      	orrs	r3, r0
    697a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXO=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    697c:	493b      	ldr	r1, [pc, #236]	; (6a6c <gpio_init+0x310>)
    697e:	223b      	movs	r2, #59	; 0x3b
    6980:	5c8b      	ldrb	r3, [r1, r2]
    6982:	200f      	movs	r0, #15
    6984:	4003      	ands	r3, r0
    6986:	1c18      	adds	r0, r3, #0
    6988:	2330      	movs	r3, #48	; 0x30
    698a:	4303      	orrs	r3, r0
    698c:	548b      	strb	r3, [r1, r2]

	// PA22 - SPI_MISO (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA22;       // Bits 31:0 - DIRSET: Port Data Direction Set
    698e:	4b37      	ldr	r3, [pc, #220]	; (6a6c <gpio_init+0x310>)
    6990:	2280      	movs	r2, #128	; 0x80
    6992:	03d2      	lsls	r2, r2, #15
    6994:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[22].bit.INEN  =0x01; // Bit  17   - INEN:   Input Enable
    6996:	4935      	ldr	r1, [pc, #212]	; (6a6c <gpio_init+0x310>)
    6998:	2256      	movs	r2, #86	; 0x56
    699a:	5c8b      	ldrb	r3, [r1, r2]
    699c:	2002      	movs	r0, #2
    699e:	4303      	orrs	r3, r0
    69a0:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN=1;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    69a2:	4932      	ldr	r1, [pc, #200]	; (6a6c <gpio_init+0x310>)
    69a4:	2256      	movs	r2, #86	; 0x56
    69a6:	5c8b      	ldrb	r3, [r1, r2]
    69a8:	2001      	movs	r0, #1
    69aa:	4303      	orrs	r3, r0
    69ac:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [11].bit.PMUXE=3;  // Bits 3:0  - PMUXE: Peripheral Multiplexing Even (5: Peripheral function F selected)
    69ae:	492f      	ldr	r1, [pc, #188]	; (6a6c <gpio_init+0x310>)
    69b0:	223b      	movs	r2, #59	; 0x3b
    69b2:	5c8b      	ldrb	r3, [r1, r2]
    69b4:	200f      	movs	r0, #15
    69b6:	4383      	bics	r3, r0
    69b8:	1c18      	adds	r0, r3, #0
    69ba:	2303      	movs	r3, #3
    69bc:	4303      	orrs	r3, r0
    69be:	548b      	strb	r3, [r1, r2]

	// PA24 - SPI_SCK (Output)
	PORT->Group[0].OUTCLR.reg=PORT_PA25;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    69c0:	4b2a      	ldr	r3, [pc, #168]	; (6a6c <gpio_init+0x310>)
    69c2:	2280      	movs	r2, #128	; 0x80
    69c4:	0492      	lsls	r2, r2, #18
    69c6:	615a      	str	r2, [r3, #20]
	PORT->Group[0].DIRSET.reg=PORT_PA25;       // Bits 31:0 - DIRSET: Port Data Direction Set
    69c8:	4b28      	ldr	r3, [pc, #160]	; (6a6c <gpio_init+0x310>)
    69ca:	2280      	movs	r2, #128	; 0x80
    69cc:	0492      	lsls	r2, r2, #18
    69ce:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[25].bit.PMUXEN=0x01; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    69d0:	4926      	ldr	r1, [pc, #152]	; (6a6c <gpio_init+0x310>)
    69d2:	2259      	movs	r2, #89	; 0x59
    69d4:	5c8b      	ldrb	r3, [r1, r2]
    69d6:	2001      	movs	r0, #1
    69d8:	4303      	orrs	r3, r0
    69da:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX  [12].bit.PMUXO=3;  // Bits 3:0  - PMUXO: Peripheral Multiplexing Odd (5: Peripheral function F selected)
    69dc:	4923      	ldr	r1, [pc, #140]	; (6a6c <gpio_init+0x310>)
    69de:	223c      	movs	r2, #60	; 0x3c
    69e0:	5c8b      	ldrb	r3, [r1, r2]
    69e2:	200f      	movs	r0, #15
    69e4:	4003      	ands	r3, r0
    69e6:	1c18      	adds	r0, r3, #0
    69e8:	2330      	movs	r3, #48	; 0x30
    69ea:	4303      	orrs	r3, r0
    69ec:	548b      	strb	r3, [r1, r2]

	// PA25 - SPI_CS (Output)
	PORT->Group[0].OUTSET.reg=PORT_PA24;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    69ee:	4b1f      	ldr	r3, [pc, #124]	; (6a6c <gpio_init+0x310>)
    69f0:	2280      	movs	r2, #128	; 0x80
    69f2:	0452      	lsls	r2, r2, #17
    69f4:	619a      	str	r2, [r3, #24]
	PORT->Group[0].DIRSET.reg=PORT_PA24;       // Bits 31:0 - DIRSET: Port Data Direction Set
    69f6:	4b1d      	ldr	r3, [pc, #116]	; (6a6c <gpio_init+0x310>)
    69f8:	2280      	movs	r2, #128	; 0x80
    69fa:	0452      	lsls	r2, r2, #17
    69fc:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[24].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)
    69fe:	491b      	ldr	r1, [pc, #108]	; (6a6c <gpio_init+0x310>)
    6a00:	2258      	movs	r2, #88	; 0x58
    6a02:	5c8b      	ldrb	r3, [r1, r2]
    6a04:	2001      	movs	r0, #1
    6a06:	4383      	bics	r3, r0
    6a08:	548b      	strb	r3, [r1, r2]
	
	// PA19 - SPI_INT (Input)
	PORT->Group[0].DIRCLR.reg=PORT_PA19;       // Bits 31:0 - DIRCLR: Port Data Direction Clear
    6a0a:	4b18      	ldr	r3, [pc, #96]	; (6a6c <gpio_init+0x310>)
    6a0c:	2280      	movs	r2, #128	; 0x80
    6a0e:	0312      	lsls	r2, r2, #12
    6a10:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[19].bit.PMUXEN=0x00; // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (1: The peripheral multiplexer selection is enabled)
    6a12:	4916      	ldr	r1, [pc, #88]	; (6a6c <gpio_init+0x310>)
    6a14:	2253      	movs	r2, #83	; 0x53
    6a16:	5c8b      	ldrb	r3, [r1, r2]
    6a18:	2001      	movs	r0, #1
    6a1a:	4383      	bics	r3, r0
    6a1c:	548b      	strb	r3, [r1, r2]

    // PA18 - SPI_RESET (Output)
    PORT->Group[0].OUTSET.reg=PORT_PA18;       // Bits 31:0 - OUTSET: Port Data Output Value Set
    6a1e:	4b13      	ldr	r3, [pc, #76]	; (6a6c <gpio_init+0x310>)
    6a20:	2280      	movs	r2, #128	; 0x80
    6a22:	02d2      	lsls	r2, r2, #11
    6a24:	619a      	str	r2, [r3, #24]
    PORT->Group[0].DIRSET.reg=PORT_PA18;       // Bits 31:0 - DIRSET: Port Data Direction Set
    6a26:	4b11      	ldr	r3, [pc, #68]	; (6a6c <gpio_init+0x310>)
    6a28:	2280      	movs	r2, #128	; 0x80
    6a2a:	02d2      	lsls	r2, r2, #11
    6a2c:	609a      	str	r2, [r3, #8]
    PORT->Group[0].PINCFG[18].bit.PMUXEN=0;    // Bit  0    - PMUXEN: Peripheral Multiplexer Enable (0: The peripheral multiplexer selection is disabled)*/  
    6a2e:	490f      	ldr	r1, [pc, #60]	; (6a6c <gpio_init+0x310>)
    6a30:	2252      	movs	r2, #82	; 0x52
    6a32:	5c8b      	ldrb	r3, [r1, r2]
    6a34:	2001      	movs	r0, #1
    6a36:	4383      	bics	r3, r0
    6a38:	548b      	strb	r3, [r1, r2]
	PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;  
    6a3a:	23c0      	movs	r3, #192	; 0xc0
    6a3c:	05db      	lsls	r3, r3, #23
    6a3e:	2280      	movs	r2, #128	; 0x80
    6a40:	02d2      	lsls	r2, r2, #11
    6a42:	619a      	str	r2, [r3, #24]
	/*
	//.............................................................................
	// Gerkon ....................................................................
	//.............................................................................*/
	
	PORT->Group[1].DIRCLR.reg=PORT_PB23;	  	// Bits 31:0 - DIRCLR: Port Data Direction Clear
    6a44:	4909      	ldr	r1, [pc, #36]	; (6a6c <gpio_init+0x310>)
    6a46:	2284      	movs	r2, #132	; 0x84
    6a48:	2380      	movs	r3, #128	; 0x80
    6a4a:	041b      	lsls	r3, r3, #16
    6a4c:	508b      	str	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.INEN  =0x01;	// Bit  17   - INEN:   Input Enable
    6a4e:	4907      	ldr	r1, [pc, #28]	; (6a6c <gpio_init+0x310>)
    6a50:	22d7      	movs	r2, #215	; 0xd7
    6a52:	5c8b      	ldrb	r3, [r1, r2]
    6a54:	2002      	movs	r0, #2
    6a56:	4303      	orrs	r3, r0
    6a58:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[23].bit.PMUXEN=0x00;
    6a5a:	4904      	ldr	r1, [pc, #16]	; (6a6c <gpio_init+0x310>)
    6a5c:	22d7      	movs	r2, #215	; 0xd7
    6a5e:	5c8b      	ldrb	r3, [r1, r2]
    6a60:	2001      	movs	r0, #1
    6a62:	4383      	bics	r3, r0
    6a64:	548b      	strb	r3, [r1, r2]
}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	46bd      	mov	sp, r7
    6a6a:	bd80      	pop	{r7, pc}
    6a6c:	41004400 	.word	0x41004400

00006a70 <pin_ctrl>:

DWORD pin_ctrl(BYTE device, BYTE  numb, BYTE mod)
{
    6a70:	b590      	push	{r4, r7, lr}
    6a72:	b083      	sub	sp, #12
    6a74:	af00      	add	r7, sp, #0
    6a76:	0004      	movs	r4, r0
    6a78:	0008      	movs	r0, r1
    6a7a:	0011      	movs	r1, r2
    6a7c:	1dfb      	adds	r3, r7, #7
    6a7e:	1c22      	adds	r2, r4, #0
    6a80:	701a      	strb	r2, [r3, #0]
    6a82:	1dbb      	adds	r3, r7, #6
    6a84:	1c02      	adds	r2, r0, #0
    6a86:	701a      	strb	r2, [r3, #0]
    6a88:	1d7b      	adds	r3, r7, #5
    6a8a:	1c0a      	adds	r2, r1, #0
    6a8c:	701a      	strb	r2, [r3, #0]
	switch(device << 8 | numb << 4 | mod)
    6a8e:	1dfb      	adds	r3, r7, #7
    6a90:	781b      	ldrb	r3, [r3, #0]
    6a92:	021a      	lsls	r2, r3, #8
    6a94:	1dbb      	adds	r3, r7, #6
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	011b      	lsls	r3, r3, #4
    6a9a:	431a      	orrs	r2, r3
    6a9c:	1d7b      	adds	r3, r7, #5
    6a9e:	781b      	ldrb	r3, [r3, #0]
    6aa0:	4313      	orrs	r3, r2
    6aa2:	2b22      	cmp	r3, #34	; 0x22
    6aa4:	d100      	bne.n	6aa8 <pin_ctrl+0x38>
    6aa6:	e067      	b.n	6b78 <pin_ctrl+0x108>
    6aa8:	dc11      	bgt.n	6ace <pin_ctrl+0x5e>
    6aaa:	2b10      	cmp	r3, #16
    6aac:	d043      	beq.n	6b36 <pin_ctrl+0xc6>
    6aae:	dc06      	bgt.n	6abe <pin_ctrl+0x4e>
    6ab0:	2b01      	cmp	r3, #1
    6ab2:	d032      	beq.n	6b1a <pin_ctrl+0xaa>
    6ab4:	2b02      	cmp	r3, #2
    6ab6:	d037      	beq.n	6b28 <pin_ctrl+0xb8>
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d028      	beq.n	6b0e <pin_ctrl+0x9e>
    6abc:	e09a      	b.n	6bf4 <pin_ctrl+0x184>
    6abe:	2b12      	cmp	r3, #18
    6ac0:	d046      	beq.n	6b50 <pin_ctrl+0xe0>
    6ac2:	db3e      	blt.n	6b42 <pin_ctrl+0xd2>
    6ac4:	2b20      	cmp	r3, #32
    6ac6:	d04a      	beq.n	6b5e <pin_ctrl+0xee>
    6ac8:	2b21      	cmp	r3, #33	; 0x21
    6aca:	d04e      	beq.n	6b6a <pin_ctrl+0xfa>
    6acc:	e092      	b.n	6bf4 <pin_ctrl+0x184>
    6ace:	2280      	movs	r2, #128	; 0x80
    6ad0:	0052      	lsls	r2, r2, #1
    6ad2:	4293      	cmp	r3, r2
    6ad4:	d100      	bne.n	6ad8 <pin_ctrl+0x68>
    6ad6:	e071      	b.n	6bbc <pin_ctrl+0x14c>
    6ad8:	2280      	movs	r2, #128	; 0x80
    6ada:	0052      	lsls	r2, r2, #1
    6adc:	4293      	cmp	r3, r2
    6ade:	dc06      	bgt.n	6aee <pin_ctrl+0x7e>
    6ae0:	2b31      	cmp	r3, #49	; 0x31
    6ae2:	d056      	beq.n	6b92 <pin_ctrl+0x122>
    6ae4:	2b32      	cmp	r3, #50	; 0x32
    6ae6:	d05b      	beq.n	6ba0 <pin_ctrl+0x130>
    6ae8:	2b30      	cmp	r3, #48	; 0x30
    6aea:	d04c      	beq.n	6b86 <pin_ctrl+0x116>
    6aec:	e082      	b.n	6bf4 <pin_ctrl+0x184>
    6aee:	2281      	movs	r2, #129	; 0x81
    6af0:	0052      	lsls	r2, r2, #1
    6af2:	4293      	cmp	r3, r2
    6af4:	d069      	beq.n	6bca <pin_ctrl+0x15a>
    6af6:	2281      	movs	r2, #129	; 0x81
    6af8:	0052      	lsls	r2, r2, #1
    6afa:	4293      	cmp	r3, r2
    6afc:	db57      	blt.n	6bae <pin_ctrl+0x13e>
    6afe:	4a3f      	ldr	r2, [pc, #252]	; (6bfc <pin_ctrl+0x18c>)
    6b00:	4293      	cmp	r3, r2
    6b02:	d100      	bne.n	6b06 <pin_ctrl+0x96>
    6b04:	e06f      	b.n	6be6 <pin_ctrl+0x176>
    6b06:	4a3e      	ldr	r2, [pc, #248]	; (6c00 <pin_ctrl+0x190>)
    6b08:	4293      	cmp	r3, r2
    6b0a:	d065      	beq.n	6bd8 <pin_ctrl+0x168>
    6b0c:	e072      	b.n	6bf4 <pin_ctrl+0x184>
	{
		//RTS
		case (RTS << 8| PORT485_0 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA15);
    6b0e:	4b3d      	ldr	r3, [pc, #244]	; (6c04 <pin_ctrl+0x194>)
    6b10:	6a1a      	ldr	r2, [r3, #32]
    6b12:	2380      	movs	r3, #128	; 0x80
    6b14:	021b      	lsls	r3, r3, #8
    6b16:	4013      	ands	r3, r2
    6b18:	e06c      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA15;return 0;
    6b1a:	23c0      	movs	r3, #192	; 0xc0
    6b1c:	05db      	lsls	r3, r3, #23
    6b1e:	2280      	movs	r2, #128	; 0x80
    6b20:	0212      	lsls	r2, r2, #8
    6b22:	619a      	str	r2, [r3, #24]
    6b24:	2300      	movs	r3, #0
    6b26:	e065      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_0 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA15;return 0;
    6b28:	23c0      	movs	r3, #192	; 0xc0
    6b2a:	05db      	lsls	r3, r3, #23
    6b2c:	2280      	movs	r2, #128	; 0x80
    6b2e:	0212      	lsls	r2, r2, #8
    6b30:	615a      	str	r2, [r3, #20]
    6b32:	2300      	movs	r3, #0
    6b34:	e05e      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA14);
    6b36:	4b33      	ldr	r3, [pc, #204]	; (6c04 <pin_ctrl+0x194>)
    6b38:	6a1a      	ldr	r2, [r3, #32]
    6b3a:	2380      	movs	r3, #128	; 0x80
    6b3c:	01db      	lsls	r3, r3, #7
    6b3e:	4013      	ands	r3, r2
    6b40:	e058      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA14;return 0;
    6b42:	23c0      	movs	r3, #192	; 0xc0
    6b44:	05db      	lsls	r3, r3, #23
    6b46:	2280      	movs	r2, #128	; 0x80
    6b48:	01d2      	lsls	r2, r2, #7
    6b4a:	619a      	str	r2, [r3, #24]
    6b4c:	2300      	movs	r3, #0
    6b4e:	e051      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_1 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA14;return 0;		
    6b50:	23c0      	movs	r3, #192	; 0xc0
    6b52:	05db      	lsls	r3, r3, #23
    6b54:	2280      	movs	r2, #128	; 0x80
    6b56:	01d2      	lsls	r2, r2, #7
    6b58:	615a      	str	r2, [r3, #20]
    6b5a:	2300      	movs	r3, #0
    6b5c:	e04a      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA13);
    6b5e:	4b29      	ldr	r3, [pc, #164]	; (6c04 <pin_ctrl+0x194>)
    6b60:	6a1a      	ldr	r2, [r3, #32]
    6b62:	2380      	movs	r3, #128	; 0x80
    6b64:	019b      	lsls	r3, r3, #6
    6b66:	4013      	ands	r3, r2
    6b68:	e044      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA13;return 0;
    6b6a:	23c0      	movs	r3, #192	; 0xc0
    6b6c:	05db      	lsls	r3, r3, #23
    6b6e:	2280      	movs	r2, #128	; 0x80
    6b70:	0192      	lsls	r2, r2, #6
    6b72:	619a      	str	r2, [r3, #24]
    6b74:	2300      	movs	r3, #0
    6b76:	e03d      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_2 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA13;return 0;				
    6b78:	23c0      	movs	r3, #192	; 0xc0
    6b7a:	05db      	lsls	r3, r3, #23
    6b7c:	2280      	movs	r2, #128	; 0x80
    6b7e:	0192      	lsls	r2, r2, #6
    6b80:	615a      	str	r2, [r3, #20]
    6b82:	2300      	movs	r3, #0
    6b84:	e036      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| STAT):		return(PORT->Group[0].IN.reg & PORT_PA12);
    6b86:	4b1f      	ldr	r3, [pc, #124]	; (6c04 <pin_ctrl+0x194>)
    6b88:	6a1a      	ldr	r2, [r3, #32]
    6b8a:	2380      	movs	r3, #128	; 0x80
    6b8c:	015b      	lsls	r3, r3, #5
    6b8e:	4013      	ands	r3, r2
    6b90:	e030      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| SET):		PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA12;return 0;
    6b92:	23c0      	movs	r3, #192	; 0xc0
    6b94:	05db      	lsls	r3, r3, #23
    6b96:	2280      	movs	r2, #128	; 0x80
    6b98:	0152      	lsls	r2, r2, #5
    6b9a:	619a      	str	r2, [r3, #24]
    6b9c:	2300      	movs	r3, #0
    6b9e:	e029      	b.n	6bf4 <pin_ctrl+0x184>
		case (RTS << 8| PORT485_3 << 4| CLR):		PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA12;return 0;
    6ba0:	23c0      	movs	r3, #192	; 0xc0
    6ba2:	05db      	lsls	r3, r3, #23
    6ba4:	2280      	movs	r2, #128	; 0x80
    6ba6:	0152      	lsls	r2, r2, #5
    6ba8:	615a      	str	r2, [r3, #20]
    6baa:	2300      	movs	r3, #0
    6bac:	e022      	b.n	6bf4 <pin_ctrl+0x184>

		//LED TX
		case (LED << 8| PWR << 4| ON):		PORT_IOBUS->Group[1].OUTCLR.reg=PORT_PB03;return 0; 
    6bae:	23c0      	movs	r3, #192	; 0xc0
    6bb0:	05db      	lsls	r3, r3, #23
    6bb2:	2294      	movs	r2, #148	; 0x94
    6bb4:	2108      	movs	r1, #8
    6bb6:	5099      	str	r1, [r3, r2]
    6bb8:	2300      	movs	r3, #0
    6bba:	e01b      	b.n	6bf4 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| OFF):		PORT_IOBUS->Group[1].OUTSET.reg=PORT_PB03;return 0;
    6bbc:	23c0      	movs	r3, #192	; 0xc0
    6bbe:	05db      	lsls	r3, r3, #23
    6bc0:	2298      	movs	r2, #152	; 0x98
    6bc2:	2108      	movs	r1, #8
    6bc4:	5099      	str	r1, [r3, r2]
    6bc6:	2300      	movs	r3, #0
    6bc8:	e014      	b.n	6bf4 <pin_ctrl+0x184>
		case (LED << 8| PWR << 4| TGL):		PORT_IOBUS->Group[1].OUTTGL.reg=PORT_PB03;return 0;
    6bca:	23c0      	movs	r3, #192	; 0xc0
    6bcc:	05db      	lsls	r3, r3, #23
    6bce:	229c      	movs	r2, #156	; 0x9c
    6bd0:	2108      	movs	r1, #8
    6bd2:	5099      	str	r1, [r3, r2]
    6bd4:	2300      	movs	r3, #0
    6bd6:	e00d      	b.n	6bf4 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| CLR):     PORT_IOBUS->Group[0].OUTCLR.reg=PORT_PA18;return 0;
    6bd8:	23c0      	movs	r3, #192	; 0xc0
    6bda:	05db      	lsls	r3, r3, #23
    6bdc:	2280      	movs	r2, #128	; 0x80
    6bde:	02d2      	lsls	r2, r2, #11
    6be0:	615a      	str	r2, [r3, #20]
    6be2:	2300      	movs	r3, #0
    6be4:	e006      	b.n	6bf4 <pin_ctrl+0x184>
		case (W55 << 8| PWR << 4| SET):     PORT_IOBUS->Group[0].OUTSET.reg=PORT_PA18;return 0;
    6be6:	23c0      	movs	r3, #192	; 0xc0
    6be8:	05db      	lsls	r3, r3, #23
    6bea:	2280      	movs	r2, #128	; 0x80
    6bec:	02d2      	lsls	r2, r2, #11
    6bee:	619a      	str	r2, [r3, #24]
    6bf0:	2300      	movs	r3, #0
    6bf2:	e7ff      	b.n	6bf4 <pin_ctrl+0x184>
		
	}
}
    6bf4:	0018      	movs	r0, r3
    6bf6:	46bd      	mov	sp, r7
    6bf8:	b003      	add	sp, #12
    6bfa:	bd90      	pop	{r4, r7, pc}
    6bfc:	00000201 	.word	0x00000201
    6c00:	00000202 	.word	0x00000202
    6c04:	41004400 	.word	0x41004400

00006c08 <check_gerkon>:

void check_gerkon(void)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	af00      	add	r7, sp, #0
	static BYTE gerkon_st = 0;
	
	if (PORT->Group[1].IN.reg & PORT_PB23)	{if(PORT->Group[1].OUTSET.reg & PORT_PB03){pin_ctrl(LED,PWR,ON);} gerkon_st = 0; return;}
    6c0c:	4a1d      	ldr	r2, [pc, #116]	; (6c84 <check_gerkon+0x7c>)
    6c0e:	23a0      	movs	r3, #160	; 0xa0
    6c10:	58d2      	ldr	r2, [r2, r3]
    6c12:	2380      	movs	r3, #128	; 0x80
    6c14:	041b      	lsls	r3, r3, #16
    6c16:	4013      	ands	r3, r2
    6c18:	d00e      	beq.n	6c38 <check_gerkon+0x30>
    6c1a:	4a1a      	ldr	r2, [pc, #104]	; (6c84 <check_gerkon+0x7c>)
    6c1c:	2398      	movs	r3, #152	; 0x98
    6c1e:	58d3      	ldr	r3, [r2, r3]
    6c20:	2208      	movs	r2, #8
    6c22:	4013      	ands	r3, r2
    6c24:	d004      	beq.n	6c30 <check_gerkon+0x28>
    6c26:	2201      	movs	r2, #1
    6c28:	2100      	movs	r1, #0
    6c2a:	2001      	movs	r0, #1
    6c2c:	f7ff ff20 	bl	6a70 <pin_ctrl>
    6c30:	4b15      	ldr	r3, [pc, #84]	; (6c88 <check_gerkon+0x80>)
    6c32:	2200      	movs	r2, #0
    6c34:	701a      	strb	r2, [r3, #0]
    6c36:	e023      	b.n	6c80 <check_gerkon+0x78>
	
	switch (gerkon_st)
    6c38:	4b13      	ldr	r3, [pc, #76]	; (6c88 <check_gerkon+0x80>)
    6c3a:	781b      	ldrb	r3, [r3, #0]
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d002      	beq.n	6c46 <check_gerkon+0x3e>
    6c40:	2b01      	cmp	r3, #1
    6c42:	d00c      	beq.n	6c5e <check_gerkon+0x56>
    6c44:	e01c      	b.n	6c80 <check_gerkon+0x78>
	{
		case 0:
			pin_ctrl(LED,PWR,OFF);
    6c46:	2200      	movs	r2, #0
    6c48:	2100      	movs	r1, #0
    6c4a:	2001      	movs	r0, #1
    6c4c:	f7ff ff10 	bl	6a70 <pin_ctrl>
			ger_wait = 10;
    6c50:	4b0e      	ldr	r3, [pc, #56]	; (6c8c <check_gerkon+0x84>)
    6c52:	220a      	movs	r2, #10
    6c54:	601a      	str	r2, [r3, #0]
			gerkon_st = 1;
    6c56:	4b0c      	ldr	r3, [pc, #48]	; (6c88 <check_gerkon+0x80>)
    6c58:	2201      	movs	r2, #1
    6c5a:	701a      	strb	r2, [r3, #0]
		break;
    6c5c:	e010      	b.n	6c80 <check_gerkon+0x78>
		case 1:
			if (ger_wait)	{return;}
    6c5e:	4b0b      	ldr	r3, [pc, #44]	; (6c8c <check_gerkon+0x84>)
    6c60:	681b      	ldr	r3, [r3, #0]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d10b      	bne.n	6c7e <check_gerkon+0x76>
			reset = 1; 
    6c66:	4b0a      	ldr	r3, [pc, #40]	; (6c90 <check_gerkon+0x88>)
    6c68:	2201      	movs	r2, #1
    6c6a:	801a      	strh	r2, [r3, #0]
			cfg_default(); 
    6c6c:	4b09      	ldr	r3, [pc, #36]	; (6c94 <check_gerkon+0x8c>)
    6c6e:	4798      	blx	r3
			cfg_save();
    6c70:	4b09      	ldr	r3, [pc, #36]	; (6c98 <check_gerkon+0x90>)
    6c72:	4798      	blx	r3
			acc(DROP);
    6c74:	2002      	movs	r0, #2
    6c76:	4b09      	ldr	r3, [pc, #36]	; (6c9c <check_gerkon+0x94>)
    6c78:	4798      	blx	r3
		break;
    6c7a:	46c0      	nop			; (mov r8, r8)
    6c7c:	e000      	b.n	6c80 <check_gerkon+0x78>
			if (ger_wait)	{return;}
    6c7e:	46c0      	nop			; (mov r8, r8)
	}
    6c80:	46bd      	mov	sp, r7
    6c82:	bd80      	pop	{r7, pc}
    6c84:	41004400 	.word	0x41004400
    6c88:	2000045d 	.word	0x2000045d
    6c8c:	20000474 	.word	0x20000474
    6c90:	20002548 	.word	0x20002548
    6c94:	0000a8d1 	.word	0x0000a8d1
    6c98:	0000aca9 	.word	0x0000aca9
    6c9c:	00004215 	.word	0x00004215

00006ca0 <iap_process>:

DWORD iap_key=0;

WORD iap_process(BYTE *buf, WORD size)
//--------------------------------------------------------------------------
{
    6ca0:	b580      	push	{r7, lr}
    6ca2:	b084      	sub	sp, #16
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	6078      	str	r0, [r7, #4]
    6ca8:	000a      	movs	r2, r1
    6caa:	1cbb      	adds	r3, r7, #2
    6cac:	801a      	strh	r2, [r3, #0]
	DWORD page;
	WORD  wn = 0;
    6cae:	230a      	movs	r3, #10
    6cb0:	18fb      	adds	r3, r7, r3
    6cb2:	2200      	movs	r2, #0
    6cb4:	801a      	strh	r2, [r3, #0]
	memcpy(iap_buf,buf,size);
    6cb6:	1cbb      	adds	r3, r7, #2
    6cb8:	881a      	ldrh	r2, [r3, #0]
    6cba:	6879      	ldr	r1, [r7, #4]
    6cbc:	4b8c      	ldr	r3, [pc, #560]	; (6ef0 <iap_process+0x250>)
    6cbe:	0018      	movs	r0, r3
    6cc0:	4b8c      	ldr	r3, [pc, #560]	; (6ef4 <iap_process+0x254>)
    6cc2:	4798      	blx	r3
	static BYTE flwr=0;
	
	switch(iap_buf[wn])
    6cc4:	230a      	movs	r3, #10
    6cc6:	18fb      	adds	r3, r7, r3
    6cc8:	881b      	ldrh	r3, [r3, #0]
    6cca:	4a89      	ldr	r2, [pc, #548]	; (6ef0 <iap_process+0x250>)
    6ccc:	5cd3      	ldrb	r3, [r2, r3]
    6cce:	2b03      	cmp	r3, #3
    6cd0:	d040      	beq.n	6d54 <iap_process+0xb4>
    6cd2:	dc02      	bgt.n	6cda <iap_process+0x3a>
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d007      	beq.n	6ce8 <iap_process+0x48>
    6cd8:	e0f7      	b.n	6eca <iap_process+0x22a>
    6cda:	2b05      	cmp	r3, #5
    6cdc:	d100      	bne.n	6ce0 <iap_process+0x40>
    6cde:	e0a2      	b.n	6e26 <iap_process+0x186>
    6ce0:	2b07      	cmp	r3, #7
    6ce2:	d100      	bne.n	6ce6 <iap_process+0x46>
    6ce4:	e0ca      	b.n	6e7c <iap_process+0x1dc>
    6ce6:	e0f0      	b.n	6eca <iap_process+0x22a>
	{
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6ce8:	23c0      	movs	r3, #192	; 0xc0
    6cea:	025b      	lsls	r3, r3, #9
    6cec:	60fb      	str	r3, [r7, #12]
    6cee:	e01f      	b.n	6d30 <iap_process+0x90>
											{
												wdt_reset();
    6cf0:	4b81      	ldr	r3, [pc, #516]	; (6ef8 <iap_process+0x258>)
    6cf2:	799b      	ldrb	r3, [r3, #6]
    6cf4:	07db      	lsls	r3, r3, #31
    6cf6:	0fdb      	lsrs	r3, r3, #31
    6cf8:	b2db      	uxtb	r3, r3
    6cfa:	2b01      	cmp	r3, #1
    6cfc:	d107      	bne.n	6d0e <iap_process+0x6e>
    6cfe:	4a7e      	ldr	r2, [pc, #504]	; (6ef8 <iap_process+0x258>)
    6d00:	7993      	ldrb	r3, [r2, #6]
    6d02:	2101      	movs	r1, #1
    6d04:	430b      	orrs	r3, r1
    6d06:	7193      	strb	r3, [r2, #6]
    6d08:	4b7b      	ldr	r3, [pc, #492]	; (6ef8 <iap_process+0x258>)
    6d0a:	22a5      	movs	r2, #165	; 0xa5
    6d0c:	721a      	strb	r2, [r3, #8]
												if(!flash_empty(page,256)){flash_erase_page(page);}
    6d0e:	2380      	movs	r3, #128	; 0x80
    6d10:	005a      	lsls	r2, r3, #1
    6d12:	68fb      	ldr	r3, [r7, #12]
    6d14:	0011      	movs	r1, r2
    6d16:	0018      	movs	r0, r3
    6d18:	4b78      	ldr	r3, [pc, #480]	; (6efc <iap_process+0x25c>)
    6d1a:	4798      	blx	r3
    6d1c:	1e03      	subs	r3, r0, #0
    6d1e:	d103      	bne.n	6d28 <iap_process+0x88>
    6d20:	68fb      	ldr	r3, [r7, #12]
    6d22:	0018      	movs	r0, r3
    6d24:	4b76      	ldr	r3, [pc, #472]	; (6f00 <iap_process+0x260>)
    6d26:	4798      	blx	r3
	case CM2_R_START_BOOTLOADER :			for(page = IAP_COPY;page<(IAP_COPY+IAP_SIZE);page+=256)
    6d28:	68fb      	ldr	r3, [r7, #12]
    6d2a:	3301      	adds	r3, #1
    6d2c:	33ff      	adds	r3, #255	; 0xff
    6d2e:	60fb      	str	r3, [r7, #12]
    6d30:	68fb      	ldr	r3, [r7, #12]
    6d32:	4a74      	ldr	r2, [pc, #464]	; (6f04 <iap_process+0x264>)
    6d34:	4293      	cmp	r3, r2
    6d36:	d9db      	bls.n	6cf0 <iap_process+0x50>
											}
											iap_buf[wn] = CM2_A_BOOTLOADER_READY;		wn += sizeof(BYTE );
    6d38:	230a      	movs	r3, #10
    6d3a:	18fb      	adds	r3, r7, r3
    6d3c:	881b      	ldrh	r3, [r3, #0]
    6d3e:	4a6c      	ldr	r2, [pc, #432]	; (6ef0 <iap_process+0x250>)
    6d40:	2102      	movs	r1, #2
    6d42:	54d1      	strb	r1, [r2, r3]
    6d44:	230a      	movs	r3, #10
    6d46:	18fb      	adds	r3, r7, r3
    6d48:	220a      	movs	r2, #10
    6d4a:	18ba      	adds	r2, r7, r2
    6d4c:	8812      	ldrh	r2, [r2, #0]
    6d4e:	3201      	adds	r2, #1
    6d50:	801a      	strh	r2, [r3, #0]
		
	break;
    6d52:	e0ba      	b.n	6eca <iap_process+0x22a>
	case CM2_R_LOAD_DATA_PAGE   :			iap_buf[wn] = CM2_A_DATA_PAGE_LOAD;			wn += sizeof(BYTE );
    6d54:	230a      	movs	r3, #10
    6d56:	18fb      	adds	r3, r7, r3
    6d58:	881b      	ldrh	r3, [r3, #0]
    6d5a:	4a65      	ldr	r2, [pc, #404]	; (6ef0 <iap_process+0x250>)
    6d5c:	2104      	movs	r1, #4
    6d5e:	54d1      	strb	r1, [r2, r3]
    6d60:	230a      	movs	r3, #10
    6d62:	18fb      	adds	r3, r7, r3
    6d64:	220a      	movs	r2, #10
    6d66:	18ba      	adds	r2, r7, r2
    6d68:	8812      	ldrh	r2, [r2, #0]
    6d6a:	3201      	adds	r2, #1
    6d6c:	801a      	strh	r2, [r3, #0]
											iap_size  =iap_buf[wn] | (iap_buf[wn+1]<<8);		wn += sizeof(WORD );
    6d6e:	230a      	movs	r3, #10
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	881b      	ldrh	r3, [r3, #0]
    6d74:	4a5e      	ldr	r2, [pc, #376]	; (6ef0 <iap_process+0x250>)
    6d76:	5cd3      	ldrb	r3, [r2, r3]
    6d78:	b21a      	sxth	r2, r3
    6d7a:	230a      	movs	r3, #10
    6d7c:	18fb      	adds	r3, r7, r3
    6d7e:	881b      	ldrh	r3, [r3, #0]
    6d80:	3301      	adds	r3, #1
    6d82:	495b      	ldr	r1, [pc, #364]	; (6ef0 <iap_process+0x250>)
    6d84:	5ccb      	ldrb	r3, [r1, r3]
    6d86:	021b      	lsls	r3, r3, #8
    6d88:	b21b      	sxth	r3, r3
    6d8a:	4313      	orrs	r3, r2
    6d8c:	b21b      	sxth	r3, r3
    6d8e:	b29a      	uxth	r2, r3
    6d90:	4b5d      	ldr	r3, [pc, #372]	; (6f08 <iap_process+0x268>)
    6d92:	801a      	strh	r2, [r3, #0]
    6d94:	230a      	movs	r3, #10
    6d96:	18fb      	adds	r3, r7, r3
    6d98:	220a      	movs	r2, #10
    6d9a:	18ba      	adds	r2, r7, r2
    6d9c:	8812      	ldrh	r2, [r2, #0]
    6d9e:	3202      	adds	r2, #2
    6da0:	801a      	strh	r2, [r3, #0]
											iap_addr  =iap_buf[wn] | (iap_buf[wn+1]<<8) | (iap_buf[wn+2]<<16) | (iap_buf[wn+3]<<24);
    6da2:	230a      	movs	r3, #10
    6da4:	18fb      	adds	r3, r7, r3
    6da6:	881b      	ldrh	r3, [r3, #0]
    6da8:	4a51      	ldr	r2, [pc, #324]	; (6ef0 <iap_process+0x250>)
    6daa:	5cd3      	ldrb	r3, [r2, r3]
    6dac:	0019      	movs	r1, r3
    6dae:	230a      	movs	r3, #10
    6db0:	18fb      	adds	r3, r7, r3
    6db2:	881b      	ldrh	r3, [r3, #0]
    6db4:	3301      	adds	r3, #1
    6db6:	4a4e      	ldr	r2, [pc, #312]	; (6ef0 <iap_process+0x250>)
    6db8:	5cd3      	ldrb	r3, [r2, r3]
    6dba:	021b      	lsls	r3, r3, #8
    6dbc:	000a      	movs	r2, r1
    6dbe:	431a      	orrs	r2, r3
    6dc0:	230a      	movs	r3, #10
    6dc2:	18fb      	adds	r3, r7, r3
    6dc4:	881b      	ldrh	r3, [r3, #0]
    6dc6:	3302      	adds	r3, #2
    6dc8:	4949      	ldr	r1, [pc, #292]	; (6ef0 <iap_process+0x250>)
    6dca:	5ccb      	ldrb	r3, [r1, r3]
    6dcc:	041b      	lsls	r3, r3, #16
    6dce:	431a      	orrs	r2, r3
    6dd0:	230a      	movs	r3, #10
    6dd2:	18fb      	adds	r3, r7, r3
    6dd4:	881b      	ldrh	r3, [r3, #0]
    6dd6:	3303      	adds	r3, #3
    6dd8:	4945      	ldr	r1, [pc, #276]	; (6ef0 <iap_process+0x250>)
    6dda:	5ccb      	ldrb	r3, [r1, r3]
    6ddc:	061b      	lsls	r3, r3, #24
    6dde:	4313      	orrs	r3, r2
    6de0:	001a      	movs	r2, r3
    6de2:	4b4a      	ldr	r3, [pc, #296]	; (6f0c <iap_process+0x26c>)
    6de4:	601a      	str	r2, [r3, #0]
											wn += sizeof(DWORD);
    6de6:	230a      	movs	r3, #10
    6de8:	18fb      	adds	r3, r7, r3
    6dea:	220a      	movs	r2, #10
    6dec:	18ba      	adds	r2, r7, r2
    6dee:	8812      	ldrh	r2, [r2, #0]
    6df0:	3204      	adds	r2, #4
    6df2:	801a      	strh	r2, [r3, #0]
											
											memcpy(iap_page,iap_buf+wn,iap_size);		wn += iap_size;
    6df4:	230a      	movs	r3, #10
    6df6:	18fb      	adds	r3, r7, r3
    6df8:	881a      	ldrh	r2, [r3, #0]
    6dfa:	4b3d      	ldr	r3, [pc, #244]	; (6ef0 <iap_process+0x250>)
    6dfc:	18d1      	adds	r1, r2, r3
    6dfe:	4b42      	ldr	r3, [pc, #264]	; (6f08 <iap_process+0x268>)
    6e00:	881b      	ldrh	r3, [r3, #0]
    6e02:	001a      	movs	r2, r3
    6e04:	4b42      	ldr	r3, [pc, #264]	; (6f10 <iap_process+0x270>)
    6e06:	0018      	movs	r0, r3
    6e08:	4b3a      	ldr	r3, [pc, #232]	; (6ef4 <iap_process+0x254>)
    6e0a:	4798      	blx	r3
    6e0c:	4b3e      	ldr	r3, [pc, #248]	; (6f08 <iap_process+0x268>)
    6e0e:	8819      	ldrh	r1, [r3, #0]
    6e10:	230a      	movs	r3, #10
    6e12:	18fb      	adds	r3, r7, r3
    6e14:	220a      	movs	r2, #10
    6e16:	18ba      	adds	r2, r7, r2
    6e18:	8812      	ldrh	r2, [r2, #0]
    6e1a:	188a      	adds	r2, r1, r2
    6e1c:	801a      	strh	r2, [r3, #0]
											
											flwr=1;
    6e1e:	4b3d      	ldr	r3, [pc, #244]	; (6f14 <iap_process+0x274>)
    6e20:	2201      	movs	r2, #1
    6e22:	701a      	strb	r2, [r3, #0]
	
	break;
    6e24:	e051      	b.n	6eca <iap_process+0x22a>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    6e26:	4b39      	ldr	r3, [pc, #228]	; (6f0c <iap_process+0x26c>)
    6e28:	681b      	ldr	r3, [r3, #0]
    6e2a:	4a3b      	ldr	r2, [pc, #236]	; (6f18 <iap_process+0x278>)
    6e2c:	4293      	cmp	r3, r2
    6e2e:	d958      	bls.n	6ee2 <iap_process+0x242>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    6e30:	4b36      	ldr	r3, [pc, #216]	; (6f0c <iap_process+0x26c>)
    6e32:	681a      	ldr	r2, [r3, #0]
    6e34:	23c0      	movs	r3, #192	; 0xc0
    6e36:	025b      	lsls	r3, r3, #9
    6e38:	429a      	cmp	r2, r3
    6e3a:	d854      	bhi.n	6ee6 <iap_process+0x246>
											
											if(flwr)
    6e3c:	4b35      	ldr	r3, [pc, #212]	; (6f14 <iap_process+0x274>)
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d00d      	beq.n	6e60 <iap_process+0x1c0>
											{
												flash_write(iap_addr+IAP_SIZE,iap_page,iap_size);
    6e44:	4b31      	ldr	r3, [pc, #196]	; (6f0c <iap_process+0x26c>)
    6e46:	681b      	ldr	r3, [r3, #0]
    6e48:	22a0      	movs	r2, #160	; 0xa0
    6e4a:	0252      	lsls	r2, r2, #9
    6e4c:	1898      	adds	r0, r3, r2
    6e4e:	4b2e      	ldr	r3, [pc, #184]	; (6f08 <iap_process+0x268>)
    6e50:	881a      	ldrh	r2, [r3, #0]
    6e52:	4b2f      	ldr	r3, [pc, #188]	; (6f10 <iap_process+0x270>)
    6e54:	0019      	movs	r1, r3
    6e56:	4b31      	ldr	r3, [pc, #196]	; (6f1c <iap_process+0x27c>)
    6e58:	4798      	blx	r3
												flwr=0;
    6e5a:	4b2e      	ldr	r3, [pc, #184]	; (6f14 <iap_process+0x274>)
    6e5c:	2200      	movs	r2, #0
    6e5e:	701a      	strb	r2, [r3, #0]
											}
											iap_buf[wn] = CM2_A_DATA_PAGE_UPDATE;		wn += sizeof(BYTE );
    6e60:	230a      	movs	r3, #10
    6e62:	18fb      	adds	r3, r7, r3
    6e64:	881b      	ldrh	r3, [r3, #0]
    6e66:	4a22      	ldr	r2, [pc, #136]	; (6ef0 <iap_process+0x250>)
    6e68:	2106      	movs	r1, #6
    6e6a:	54d1      	strb	r1, [r2, r3]
    6e6c:	230a      	movs	r3, #10
    6e6e:	18fb      	adds	r3, r7, r3
    6e70:	220a      	movs	r2, #10
    6e72:	18ba      	adds	r2, r7, r2
    6e74:	8812      	ldrh	r2, [r2, #0]
    6e76:	3201      	adds	r2, #1
    6e78:	801a      	strh	r2, [r3, #0]
	break;
    6e7a:	e026      	b.n	6eca <iap_process+0x22a>
	case CM2_R_STOP_BOOTLOADER  :  			iap_key = IAP_VAL;
    6e7c:	4b28      	ldr	r3, [pc, #160]	; (6f20 <iap_process+0x280>)
    6e7e:	4a29      	ldr	r2, [pc, #164]	; (6f24 <iap_process+0x284>)
    6e80:	601a      	str	r2, [r3, #0]
											if(!flash_empty(IAP_KEY,256)){flash_erase_page(IAP_KEY);}
    6e82:	2380      	movs	r3, #128	; 0x80
    6e84:	005b      	lsls	r3, r3, #1
    6e86:	4a28      	ldr	r2, [pc, #160]	; (6f28 <iap_process+0x288>)
    6e88:	0019      	movs	r1, r3
    6e8a:	0010      	movs	r0, r2
    6e8c:	4b1b      	ldr	r3, [pc, #108]	; (6efc <iap_process+0x25c>)
    6e8e:	4798      	blx	r3
    6e90:	1e03      	subs	r3, r0, #0
    6e92:	d103      	bne.n	6e9c <iap_process+0x1fc>
    6e94:	4b24      	ldr	r3, [pc, #144]	; (6f28 <iap_process+0x288>)
    6e96:	0018      	movs	r0, r3
    6e98:	4b19      	ldr	r3, [pc, #100]	; (6f00 <iap_process+0x260>)
    6e9a:	4798      	blx	r3
											flash_write(IAP_KEY,&iap_key,4);
    6e9c:	4b20      	ldr	r3, [pc, #128]	; (6f20 <iap_process+0x280>)
    6e9e:	4822      	ldr	r0, [pc, #136]	; (6f28 <iap_process+0x288>)
    6ea0:	2204      	movs	r2, #4
    6ea2:	0019      	movs	r1, r3
    6ea4:	4b1d      	ldr	r3, [pc, #116]	; (6f1c <iap_process+0x27c>)
    6ea6:	4798      	blx	r3
											
											iap_buf[wn] = CM2_A_BOOTLOADER_STOP;		wn += sizeof(BYTE );
    6ea8:	230a      	movs	r3, #10
    6eaa:	18fb      	adds	r3, r7, r3
    6eac:	881b      	ldrh	r3, [r3, #0]
    6eae:	4a10      	ldr	r2, [pc, #64]	; (6ef0 <iap_process+0x250>)
    6eb0:	2108      	movs	r1, #8
    6eb2:	54d1      	strb	r1, [r2, r3]
    6eb4:	230a      	movs	r3, #10
    6eb6:	18fb      	adds	r3, r7, r3
    6eb8:	220a      	movs	r2, #10
    6eba:	18ba      	adds	r2, r7, r2
    6ebc:	8812      	ldrh	r2, [r2, #0]
    6ebe:	3201      	adds	r2, #1
    6ec0:	801a      	strh	r2, [r3, #0]
											reset = TRUE;
    6ec2:	4b1a      	ldr	r3, [pc, #104]	; (6f2c <iap_process+0x28c>)
    6ec4:	2201      	movs	r2, #1
    6ec6:	801a      	strh	r2, [r3, #0]
	break;
    6ec8:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(buf,iap_buf,wn);
    6eca:	230a      	movs	r3, #10
    6ecc:	18fb      	adds	r3, r7, r3
    6ece:	881a      	ldrh	r2, [r3, #0]
    6ed0:	4907      	ldr	r1, [pc, #28]	; (6ef0 <iap_process+0x250>)
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	0018      	movs	r0, r3
    6ed6:	4b07      	ldr	r3, [pc, #28]	; (6ef4 <iap_process+0x254>)
    6ed8:	4798      	blx	r3
	return	(wn);
    6eda:	230a      	movs	r3, #10
    6edc:	18fb      	adds	r3, r7, r3
    6ede:	881b      	ldrh	r3, [r3, #0]
    6ee0:	e002      	b.n	6ee8 <iap_process+0x248>
	case CM2_R_UPDATE_DATA_PAGE :  			if(iap_addr < IAP_ADDR			 )	{return;}
    6ee2:	46c0      	nop			; (mov r8, r8)
    6ee4:	e000      	b.n	6ee8 <iap_process+0x248>
											if(iap_addr > (IAP_ADDR+IAP_SIZE))	{return;}
    6ee6:	46c0      	nop			; (mov r8, r8)
}
    6ee8:	0018      	movs	r0, r3
    6eea:	46bd      	mov	sp, r7
    6eec:	b004      	add	sp, #16
    6eee:	bd80      	pop	{r7, pc}
    6ef0:	20002448 	.word	0x20002448
    6ef4:	0000c4e5 	.word	0x0000c4e5
    6ef8:	40001000 	.word	0x40001000
    6efc:	00006461 	.word	0x00006461
    6f00:	000064a7 	.word	0x000064a7
    6f04:	0002bfff 	.word	0x0002bfff
    6f08:	20000464 	.word	0x20000464
    6f0c:	20000460 	.word	0x20000460
    6f10:	20002348 	.word	0x20002348
    6f14:	2000046c 	.word	0x2000046c
    6f18:	00003fff 	.word	0x00003fff
    6f1c:	000064f5 	.word	0x000064f5
    6f20:	20000468 	.word	0x20000468
    6f24:	43ff56ac 	.word	0x43ff56ac
    6f28:	0003f200 	.word	0x0003f200
    6f2c:	20002548 	.word	0x20002548

00006f30 <main>:
ERRORS err_dword;
WORD reset;
ACCOUNTS accnts;

int main(void)
{
    6f30:	b580      	push	{r7, lr}
    6f32:	af00      	add	r7, sp, #0
	SCB->VTOR=0x00004000;
    6f34:	4b42      	ldr	r3, [pc, #264]	; (7040 <main+0x110>)
    6f36:	2280      	movs	r2, #128	; 0x80
    6f38:	01d2      	lsls	r2, r2, #7
    6f3a:	609a      	str	r2, [r3, #8]
	
	if (PROC_HERZ == (8 * 1000000))	{sys_clock_init_USE_OSC8M();}   //8MHz
    6f3c:	4b41      	ldr	r3, [pc, #260]	; (7044 <main+0x114>)
    6f3e:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6f40:	b662      	cpsie	i
	else							{sys_clock_init_USE_DFLL48M();}	//48MHz
		
	__enable_irq();
	wdt_reset();
    6f42:	4b41      	ldr	r3, [pc, #260]	; (7048 <main+0x118>)
    6f44:	799b      	ldrb	r3, [r3, #6]
    6f46:	07db      	lsls	r3, r3, #31
    6f48:	0fdb      	lsrs	r3, r3, #31
    6f4a:	b2db      	uxtb	r3, r3
    6f4c:	2b01      	cmp	r3, #1
    6f4e:	d107      	bne.n	6f60 <main+0x30>
    6f50:	4a3d      	ldr	r2, [pc, #244]	; (7048 <main+0x118>)
    6f52:	7993      	ldrb	r3, [r2, #6]
    6f54:	2101      	movs	r1, #1
    6f56:	430b      	orrs	r3, r1
    6f58:	7193      	strb	r3, [r2, #6]
    6f5a:	4b3b      	ldr	r3, [pc, #236]	; (7048 <main+0x118>)
    6f5c:	22a5      	movs	r2, #165	; 0xa5
    6f5e:	721a      	strb	r2, [r3, #8]
	wdt_start();	
    6f60:	4b39      	ldr	r3, [pc, #228]	; (7048 <main+0x118>)
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	079b      	lsls	r3, r3, #30
    6f66:	0fdb      	lsrs	r3, r3, #31
    6f68:	b2db      	uxtb	r3, r3
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d119      	bne.n	6fa2 <main+0x72>
    6f6e:	4a36      	ldr	r2, [pc, #216]	; (7048 <main+0x118>)
    6f70:	7853      	ldrb	r3, [r2, #1]
    6f72:	210f      	movs	r1, #15
    6f74:	438b      	bics	r3, r1
    6f76:	1c19      	adds	r1, r3, #0
    6f78:	230b      	movs	r3, #11
    6f7a:	430b      	orrs	r3, r1
    6f7c:	7053      	strb	r3, [r2, #1]
    6f7e:	4a32      	ldr	r2, [pc, #200]	; (7048 <main+0x118>)
    6f80:	7893      	ldrb	r3, [r2, #2]
    6f82:	210f      	movs	r1, #15
    6f84:	438b      	bics	r3, r1
    6f86:	1c19      	adds	r1, r3, #0
    6f88:	230a      	movs	r3, #10
    6f8a:	430b      	orrs	r3, r1
    6f8c:	7093      	strb	r3, [r2, #2]
    6f8e:	4a2e      	ldr	r2, [pc, #184]	; (7048 <main+0x118>)
    6f90:	7953      	ldrb	r3, [r2, #5]
    6f92:	2101      	movs	r1, #1
    6f94:	430b      	orrs	r3, r1
    6f96:	7153      	strb	r3, [r2, #5]
    6f98:	4a2b      	ldr	r2, [pc, #172]	; (7048 <main+0x118>)
    6f9a:	7813      	ldrb	r3, [r2, #0]
    6f9c:	2102      	movs	r1, #2
    6f9e:	430b      	orrs	r3, r1
    6fa0:	7013      	strb	r3, [r2, #0]
			
	cfg_init  ();
    6fa2:	4b2a      	ldr	r3, [pc, #168]	; (704c <main+0x11c>)
    6fa4:	4798      	blx	r3
	if(cfg_2_read() == CFG_ERR) {cfg_2_err = CFG_ERR; err_dword.cfg_2_init = 1; }
    6fa6:	4b2a      	ldr	r3, [pc, #168]	; (7050 <main+0x120>)
    6fa8:	4798      	blx	r3
    6faa:	1e03      	subs	r3, r0, #0
    6fac:	d107      	bne.n	6fbe <main+0x8e>
    6fae:	4b29      	ldr	r3, [pc, #164]	; (7054 <main+0x124>)
    6fb0:	2200      	movs	r2, #0
    6fb2:	701a      	strb	r2, [r3, #0]
    6fb4:	4b28      	ldr	r3, [pc, #160]	; (7058 <main+0x128>)
    6fb6:	781a      	ldrb	r2, [r3, #0]
    6fb8:	2102      	movs	r1, #2
    6fba:	430a      	orrs	r2, r1
    6fbc:	701a      	strb	r2, [r3, #0]
	if(cfg_read()   == CFG_ERR)	{err_dword.cfg_2_init = 1; cfg_default(); acc(DROP);}
    6fbe:	4b27      	ldr	r3, [pc, #156]	; (705c <main+0x12c>)
    6fc0:	4798      	blx	r3
    6fc2:	1e03      	subs	r3, r0, #0
    6fc4:	d109      	bne.n	6fda <main+0xaa>
    6fc6:	4b24      	ldr	r3, [pc, #144]	; (7058 <main+0x128>)
    6fc8:	781a      	ldrb	r2, [r3, #0]
    6fca:	2102      	movs	r1, #2
    6fcc:	430a      	orrs	r2, r1
    6fce:	701a      	strb	r2, [r3, #0]
    6fd0:	4b23      	ldr	r3, [pc, #140]	; (7060 <main+0x130>)
    6fd2:	4798      	blx	r3
    6fd4:	2002      	movs	r0, #2
    6fd6:	4b23      	ldr	r3, [pc, #140]	; (7064 <main+0x134>)
    6fd8:	4798      	blx	r3
	cfg_check();
    6fda:	4b23      	ldr	r3, [pc, #140]	; (7068 <main+0x138>)
    6fdc:	4798      	blx	r3

	gpio_init();
    6fde:	4b23      	ldr	r3, [pc, #140]	; (706c <main+0x13c>)
    6fe0:	4798      	blx	r3
	TC3_init();
    6fe2:	4b23      	ldr	r3, [pc, #140]	; (7070 <main+0x140>)
    6fe4:	4798      	blx	r3
	spi_init();
    6fe6:	4b23      	ldr	r3, [pc, #140]	; (7074 <main+0x144>)
    6fe8:	4798      	blx	r3
	usart_init();
    6fea:	4b23      	ldr	r3, [pc, #140]	; (7078 <main+0x148>)
    6fec:	4798      	blx	r3
	eth_init();
    6fee:	4b23      	ldr	r3, [pc, #140]	; (707c <main+0x14c>)
    6ff0:	4798      	blx	r3
	
	acc(READ);
    6ff2:	2000      	movs	r0, #0
    6ff4:	4b1b      	ldr	r3, [pc, #108]	; (7064 <main+0x134>)
    6ff6:	4798      	blx	r3
	led_init();
    6ff8:	2201      	movs	r2, #1
    6ffa:	2100      	movs	r1, #0
    6ffc:	2001      	movs	r0, #1
    6ffe:	4b20      	ldr	r3, [pc, #128]	; (7080 <main+0x150>)
    7000:	4798      	blx	r3
		
	log_ch();
    7002:	4b20      	ldr	r3, [pc, #128]	; (7084 <main+0x154>)
    7004:	4798      	blx	r3
/*DEBUG*/
	log_clear();
    7006:	4b20      	ldr	r3, [pc, #128]	; (7088 <main+0x158>)
    7008:	4798      	blx	r3
	if (sizeof(CFG_1) != 0x100 ) { warning_led(1); DWORD ERR1 = sizeof(CFG_1);}
	if (sizeof(CFG_2) != 0x100 ) { warning_led(2); DWORD ERR2 = sizeof(CFG_2);}
/*DEBUG*/				
	while (1)
	{
	    if(reset == NULL) {wdt_reset();}//wdt-drop timer
    700a:	4b20      	ldr	r3, [pc, #128]	; (708c <main+0x15c>)
    700c:	881b      	ldrh	r3, [r3, #0]
    700e:	2b00      	cmp	r3, #0
    7010:	d10e      	bne.n	7030 <main+0x100>
    7012:	4b0d      	ldr	r3, [pc, #52]	; (7048 <main+0x118>)
    7014:	799b      	ldrb	r3, [r3, #6]
    7016:	07db      	lsls	r3, r3, #31
    7018:	0fdb      	lsrs	r3, r3, #31
    701a:	b2db      	uxtb	r3, r3
    701c:	2b01      	cmp	r3, #1
    701e:	d107      	bne.n	7030 <main+0x100>
    7020:	4a09      	ldr	r2, [pc, #36]	; (7048 <main+0x118>)
    7022:	7993      	ldrb	r3, [r2, #6]
    7024:	2101      	movs	r1, #1
    7026:	430b      	orrs	r3, r1
    7028:	7193      	strb	r3, [r2, #6]
    702a:	4b07      	ldr	r3, [pc, #28]	; (7048 <main+0x118>)
    702c:	22a5      	movs	r2, #165	; 0xa5
    702e:	721a      	strb	r2, [r3, #8]
		eth_process();
    7030:	4b17      	ldr	r3, [pc, #92]	; (7090 <main+0x160>)
    7032:	4798      	blx	r3
		cmd_process();
    7034:	4b17      	ldr	r3, [pc, #92]	; (7094 <main+0x164>)
    7036:	4798      	blx	r3
		tc3_process();
    7038:	4b17      	ldr	r3, [pc, #92]	; (7098 <main+0x168>)
    703a:	4798      	blx	r3
	    if(reset == NULL) {wdt_reset();}//wdt-drop timer
    703c:	e7e5      	b.n	700a <main+0xda>
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	e000ed00 	.word	0xe000ed00
    7044:	00007a6d 	.word	0x00007a6d
    7048:	40001000 	.word	0x40001000
    704c:	0000a7dd 	.word	0x0000a7dd
    7050:	0000a871 	.word	0x0000a871
    7054:	20000002 	.word	0x20000002
    7058:	2000254c 	.word	0x2000254c
    705c:	0000a811 	.word	0x0000a811
    7060:	0000a8d1 	.word	0x0000a8d1
    7064:	00004215 	.word	0x00004215
    7068:	0000abe1 	.word	0x0000abe1
    706c:	0000675d 	.word	0x0000675d
    7070:	00007db5 	.word	0x00007db5
    7074:	000073b1 	.word	0x000073b1
    7078:	00008319 	.word	0x00008319
    707c:	00005fdd 	.word	0x00005fdd
    7080:	00006a71 	.word	0x00006a71
    7084:	000044c9 	.word	0x000044c9
    7088:	00004711 	.word	0x00004711
    708c:	20002548 	.word	0x20002548
    7090:	000060f1 	.word	0x000060f1
    7094:	00004999 	.word	0x00004999
    7098:	00007f09 	.word	0x00007f09

0000709c <socket_init>:




BYTE socket_init (BYTE numb, WORD src_port, BYTE mode)
{
    709c:	b590      	push	{r4, r7, lr}
    709e:	b085      	sub	sp, #20
    70a0:	af00      	add	r7, sp, #0
    70a2:	0004      	movs	r4, r0
    70a4:	0008      	movs	r0, r1
    70a6:	0011      	movs	r1, r2
    70a8:	1dfb      	adds	r3, r7, #7
    70aa:	1c22      	adds	r2, r4, #0
    70ac:	701a      	strb	r2, [r3, #0]
    70ae:	1d3b      	adds	r3, r7, #4
    70b0:	1c02      	adds	r2, r0, #0
    70b2:	801a      	strh	r2, [r3, #0]
    70b4:	1dbb      	adds	r3, r7, #6
    70b6:	1c0a      	adds	r2, r1, #0
    70b8:	701a      	strb	r2, [r3, #0]
	BYTE buf[2];
	
	//mode
	if(mode==UDP){buf[0]=SR_00_P2;}
    70ba:	1dbb      	adds	r3, r7, #6
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	2b01      	cmp	r3, #1
    70c0:	d103      	bne.n	70ca <socket_init+0x2e>
    70c2:	230c      	movs	r3, #12
    70c4:	18fb      	adds	r3, r7, r3
    70c6:	2202      	movs	r2, #2
    70c8:	701a      	strb	r2, [r3, #0]
	if(mode==TCP){buf[0]=SR_00_P1;}	
    70ca:	1dbb      	adds	r3, r7, #6
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	2b02      	cmp	r3, #2
    70d0:	d103      	bne.n	70da <socket_init+0x3e>
    70d2:	230c      	movs	r3, #12
    70d4:	18fb      	adds	r3, r7, r3
    70d6:	2201      	movs	r2, #1
    70d8:	701a      	strb	r2, [r3, #0]
		
	spi_write_timeout(ADDR_SOC_MODE,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    70da:	4b5f      	ldr	r3, [pc, #380]	; (7258 <socket_init+0x1bc>)
    70dc:	220a      	movs	r2, #10
    70de:	801a      	strh	r2, [r3, #0]
    70e0:	e006      	b.n	70f0 <socket_init+0x54>
    70e2:	4b5d      	ldr	r3, [pc, #372]	; (7258 <socket_init+0x1bc>)
    70e4:	881b      	ldrh	r3, [r3, #0]
    70e6:	b29b      	uxth	r3, r3
    70e8:	2b00      	cmp	r3, #0
    70ea:	d101      	bne.n	70f0 <socket_init+0x54>
    70ec:	2301      	movs	r3, #1
    70ee:	e0af      	b.n	7250 <socket_init+0x1b4>
    70f0:	1dfb      	adds	r3, r7, #7
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	015b      	lsls	r3, r3, #5
    70f6:	b25b      	sxtb	r3, r3
    70f8:	2208      	movs	r2, #8
    70fa:	4313      	orrs	r3, r2
    70fc:	b25b      	sxtb	r3, r3
    70fe:	b2d9      	uxtb	r1, r3
    7100:	230c      	movs	r3, #12
    7102:	18fa      	adds	r2, r7, r3
    7104:	2301      	movs	r3, #1
    7106:	2000      	movs	r0, #0
    7108:	4c54      	ldr	r4, [pc, #336]	; (725c <socket_init+0x1c0>)
    710a:	47a0      	blx	r4
    710c:	1e03      	subs	r3, r0, #0
    710e:	d0e8      	beq.n	70e2 <socket_init+0x46>
	
	//src_port
	buf[0]=((src_port & 0xFF00)>>8);
    7110:	1d3b      	adds	r3, r7, #4
    7112:	881b      	ldrh	r3, [r3, #0]
    7114:	0a1b      	lsrs	r3, r3, #8
    7116:	b29b      	uxth	r3, r3
    7118:	b2da      	uxtb	r2, r3
    711a:	230c      	movs	r3, #12
    711c:	18fb      	adds	r3, r7, r3
    711e:	701a      	strb	r2, [r3, #0]
	buf[1]=( src_port & 0x00FF);
    7120:	1d3b      	adds	r3, r7, #4
    7122:	881b      	ldrh	r3, [r3, #0]
    7124:	b2da      	uxtb	r2, r3
    7126:	230c      	movs	r3, #12
    7128:	18fb      	adds	r3, r7, r3
    712a:	705a      	strb	r2, [r3, #1]
	spi_write_timeout(ADDR_SOC_SRC_PORT0,(SOCKET_REGISTER | SOCKET(numb)),buf,2,10);
    712c:	4b4a      	ldr	r3, [pc, #296]	; (7258 <socket_init+0x1bc>)
    712e:	220a      	movs	r2, #10
    7130:	801a      	strh	r2, [r3, #0]
    7132:	e006      	b.n	7142 <socket_init+0xa6>
    7134:	4b48      	ldr	r3, [pc, #288]	; (7258 <socket_init+0x1bc>)
    7136:	881b      	ldrh	r3, [r3, #0]
    7138:	b29b      	uxth	r3, r3
    713a:	2b00      	cmp	r3, #0
    713c:	d101      	bne.n	7142 <socket_init+0xa6>
    713e:	2301      	movs	r3, #1
    7140:	e086      	b.n	7250 <socket_init+0x1b4>
    7142:	1dfb      	adds	r3, r7, #7
    7144:	781b      	ldrb	r3, [r3, #0]
    7146:	015b      	lsls	r3, r3, #5
    7148:	b25b      	sxtb	r3, r3
    714a:	2208      	movs	r2, #8
    714c:	4313      	orrs	r3, r2
    714e:	b25b      	sxtb	r3, r3
    7150:	b2d9      	uxtb	r1, r3
    7152:	230c      	movs	r3, #12
    7154:	18fa      	adds	r2, r7, r3
    7156:	2302      	movs	r3, #2
    7158:	2004      	movs	r0, #4
    715a:	4c40      	ldr	r4, [pc, #256]	; (725c <socket_init+0x1c0>)
    715c:	47a0      	blx	r4
    715e:	1e03      	subs	r3, r0, #0
    7160:	d0e8      	beq.n	7134 <socket_init+0x98>
	
	
	//socket_cmd_open
	buf[0]=CMD_OPEN;
    7162:	230c      	movs	r3, #12
    7164:	18fb      	adds	r3, r7, r3
    7166:	2201      	movs	r2, #1
    7168:	701a      	strb	r2, [r3, #0]
	spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    716a:	4b3b      	ldr	r3, [pc, #236]	; (7258 <socket_init+0x1bc>)
    716c:	220a      	movs	r2, #10
    716e:	801a      	strh	r2, [r3, #0]
    7170:	e006      	b.n	7180 <socket_init+0xe4>
    7172:	4b39      	ldr	r3, [pc, #228]	; (7258 <socket_init+0x1bc>)
    7174:	881b      	ldrh	r3, [r3, #0]
    7176:	b29b      	uxth	r3, r3
    7178:	2b00      	cmp	r3, #0
    717a:	d101      	bne.n	7180 <socket_init+0xe4>
    717c:	2301      	movs	r3, #1
    717e:	e067      	b.n	7250 <socket_init+0x1b4>
    7180:	1dfb      	adds	r3, r7, #7
    7182:	781b      	ldrb	r3, [r3, #0]
    7184:	015b      	lsls	r3, r3, #5
    7186:	b25b      	sxtb	r3, r3
    7188:	2208      	movs	r2, #8
    718a:	4313      	orrs	r3, r2
    718c:	b25b      	sxtb	r3, r3
    718e:	b2d9      	uxtb	r1, r3
    7190:	230c      	movs	r3, #12
    7192:	18fa      	adds	r2, r7, r3
    7194:	2301      	movs	r3, #1
    7196:	2001      	movs	r0, #1
    7198:	4c30      	ldr	r4, [pc, #192]	; (725c <socket_init+0x1c0>)
    719a:	47a0      	blx	r4
    719c:	1e03      	subs	r3, r0, #0
    719e:	d0e8      	beq.n	7172 <socket_init+0xd6>
	
	if (mode == TCP)
    71a0:	1dbb      	adds	r3, r7, #6
    71a2:	781b      	ldrb	r3, [r3, #0]
    71a4:	2b02      	cmp	r3, #2
    71a6:	d152      	bne.n	724e <socket_init+0x1b2>
	{
		//socket_set_RTR
		buf[0]=0x0F;
    71a8:	230c      	movs	r3, #12
    71aa:	18fb      	adds	r3, r7, r3
    71ac:	220f      	movs	r2, #15
    71ae:	701a      	strb	r2, [r3, #0]
		buf[1]=0xA0;
    71b0:	230c      	movs	r3, #12
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	22a0      	movs	r2, #160	; 0xa0
    71b6:	705a      	strb	r2, [r3, #1]
		spi_write_timeout(ADDR_COM_RETRY_TIME_0,COMMON_REGISTER,buf,2,10);
    71b8:	4b27      	ldr	r3, [pc, #156]	; (7258 <socket_init+0x1bc>)
    71ba:	220a      	movs	r2, #10
    71bc:	801a      	strh	r2, [r3, #0]
    71be:	e006      	b.n	71ce <socket_init+0x132>
    71c0:	4b25      	ldr	r3, [pc, #148]	; (7258 <socket_init+0x1bc>)
    71c2:	881b      	ldrh	r3, [r3, #0]
    71c4:	b29b      	uxth	r3, r3
    71c6:	2b00      	cmp	r3, #0
    71c8:	d101      	bne.n	71ce <socket_init+0x132>
    71ca:	2301      	movs	r3, #1
    71cc:	e040      	b.n	7250 <socket_init+0x1b4>
    71ce:	230c      	movs	r3, #12
    71d0:	18fa      	adds	r2, r7, r3
    71d2:	2302      	movs	r3, #2
    71d4:	2100      	movs	r1, #0
    71d6:	2019      	movs	r0, #25
    71d8:	4c20      	ldr	r4, [pc, #128]	; (725c <socket_init+0x1c0>)
    71da:	47a0      	blx	r4
    71dc:	1e03      	subs	r3, r0, #0
    71de:	d0ef      	beq.n	71c0 <socket_init+0x124>
		//socket_set_RCR
		buf[0]=0x04;
    71e0:	230c      	movs	r3, #12
    71e2:	18fb      	adds	r3, r7, r3
    71e4:	2204      	movs	r2, #4
    71e6:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_COM_RETRY_COUNT,COMMON_REGISTER,buf,1,10);
    71e8:	4b1b      	ldr	r3, [pc, #108]	; (7258 <socket_init+0x1bc>)
    71ea:	220a      	movs	r2, #10
    71ec:	801a      	strh	r2, [r3, #0]
    71ee:	e006      	b.n	71fe <socket_init+0x162>
    71f0:	4b19      	ldr	r3, [pc, #100]	; (7258 <socket_init+0x1bc>)
    71f2:	881b      	ldrh	r3, [r3, #0]
    71f4:	b29b      	uxth	r3, r3
    71f6:	2b00      	cmp	r3, #0
    71f8:	d101      	bne.n	71fe <socket_init+0x162>
    71fa:	2301      	movs	r3, #1
    71fc:	e028      	b.n	7250 <socket_init+0x1b4>
    71fe:	230c      	movs	r3, #12
    7200:	18fa      	adds	r2, r7, r3
    7202:	2301      	movs	r3, #1
    7204:	2100      	movs	r1, #0
    7206:	201b      	movs	r0, #27
    7208:	4c14      	ldr	r4, [pc, #80]	; (725c <socket_init+0x1c0>)
    720a:	47a0      	blx	r4
    720c:	1e03      	subs	r3, r0, #0
    720e:	d0ef      	beq.n	71f0 <socket_init+0x154>
		//socket_cmd_listen
		buf[0]=CMD_LISTEN;
    7210:	230c      	movs	r3, #12
    7212:	18fb      	adds	r3, r7, r3
    7214:	2202      	movs	r2, #2
    7216:	701a      	strb	r2, [r3, #0]
		spi_write_timeout(ADDR_SOC_COMMAND,(SOCKET_REGISTER | SOCKET(numb)),buf,1,10);
    7218:	4b0f      	ldr	r3, [pc, #60]	; (7258 <socket_init+0x1bc>)
    721a:	220a      	movs	r2, #10
    721c:	801a      	strh	r2, [r3, #0]
    721e:	e006      	b.n	722e <socket_init+0x192>
    7220:	4b0d      	ldr	r3, [pc, #52]	; (7258 <socket_init+0x1bc>)
    7222:	881b      	ldrh	r3, [r3, #0]
    7224:	b29b      	uxth	r3, r3
    7226:	2b00      	cmp	r3, #0
    7228:	d101      	bne.n	722e <socket_init+0x192>
    722a:	2301      	movs	r3, #1
    722c:	e010      	b.n	7250 <socket_init+0x1b4>
    722e:	1dfb      	adds	r3, r7, #7
    7230:	781b      	ldrb	r3, [r3, #0]
    7232:	015b      	lsls	r3, r3, #5
    7234:	b25b      	sxtb	r3, r3
    7236:	2208      	movs	r2, #8
    7238:	4313      	orrs	r3, r2
    723a:	b25b      	sxtb	r3, r3
    723c:	b2d9      	uxtb	r1, r3
    723e:	230c      	movs	r3, #12
    7240:	18fa      	adds	r2, r7, r3
    7242:	2301      	movs	r3, #1
    7244:	2001      	movs	r0, #1
    7246:	4c05      	ldr	r4, [pc, #20]	; (725c <socket_init+0x1c0>)
    7248:	47a0      	blx	r4
    724a:	1e03      	subs	r3, r0, #0
    724c:	d0e8      	beq.n	7220 <socket_init+0x184>
	}
		
	return SUCCESS;
    724e:	2300      	movs	r3, #0
	
    7250:	0018      	movs	r0, r3
    7252:	46bd      	mov	sp, r7
    7254:	b005      	add	sp, #20
    7256:	bd90      	pop	{r4, r7, pc}
    7258:	200031f0 	.word	0x200031f0
    725c:	00007635 	.word	0x00007635

00007260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7260:	b580      	push	{r7, lr}
    7262:	b082      	sub	sp, #8
    7264:	af00      	add	r7, sp, #0
    7266:	0002      	movs	r2, r0
    7268:	1dfb      	adds	r3, r7, #7
    726a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    726c:	1dfb      	adds	r3, r7, #7
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	2b7f      	cmp	r3, #127	; 0x7f
    7272:	d809      	bhi.n	7288 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7274:	4b06      	ldr	r3, [pc, #24]	; (7290 <__NVIC_EnableIRQ+0x30>)
    7276:	1dfa      	adds	r2, r7, #7
    7278:	7812      	ldrb	r2, [r2, #0]
    727a:	0011      	movs	r1, r2
    727c:	221f      	movs	r2, #31
    727e:	400a      	ands	r2, r1
    7280:	2101      	movs	r1, #1
    7282:	4091      	lsls	r1, r2
    7284:	000a      	movs	r2, r1
    7286:	601a      	str	r2, [r3, #0]
  }
}
    7288:	46c0      	nop			; (mov r8, r8)
    728a:	46bd      	mov	sp, r7
    728c:	b002      	add	sp, #8
    728e:	bd80      	pop	{r7, pc}
    7290:	e000e100 	.word	0xe000e100

00007294 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7294:	b580      	push	{r7, lr}
    7296:	b082      	sub	sp, #8
    7298:	af00      	add	r7, sp, #0
    729a:	0002      	movs	r2, r0
    729c:	1dfb      	adds	r3, r7, #7
    729e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    72a0:	1dfb      	adds	r3, r7, #7
    72a2:	781b      	ldrb	r3, [r3, #0]
    72a4:	2b7f      	cmp	r3, #127	; 0x7f
    72a6:	d80e      	bhi.n	72c6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    72a8:	4909      	ldr	r1, [pc, #36]	; (72d0 <__NVIC_DisableIRQ+0x3c>)
    72aa:	1dfb      	adds	r3, r7, #7
    72ac:	781b      	ldrb	r3, [r3, #0]
    72ae:	001a      	movs	r2, r3
    72b0:	231f      	movs	r3, #31
    72b2:	4013      	ands	r3, r2
    72b4:	2201      	movs	r2, #1
    72b6:	409a      	lsls	r2, r3
    72b8:	0013      	movs	r3, r2
    72ba:	2280      	movs	r2, #128	; 0x80
    72bc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    72be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72c2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    72c6:	46c0      	nop			; (mov r8, r8)
    72c8:	46bd      	mov	sp, r7
    72ca:	b002      	add	sp, #8
    72cc:	bd80      	pop	{r7, pc}
    72ce:	46c0      	nop			; (mov r8, r8)
    72d0:	e000e100 	.word	0xe000e100

000072d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    72d4:	b5b0      	push	{r4, r5, r7, lr}
    72d6:	b082      	sub	sp, #8
    72d8:	af00      	add	r7, sp, #0
    72da:	0002      	movs	r2, r0
    72dc:	6039      	str	r1, [r7, #0]
    72de:	1dfb      	adds	r3, r7, #7
    72e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    72e2:	1dfb      	adds	r3, r7, #7
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	2b7f      	cmp	r3, #127	; 0x7f
    72e8:	d828      	bhi.n	733c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    72ea:	4c2f      	ldr	r4, [pc, #188]	; (73a8 <__NVIC_SetPriority+0xd4>)
    72ec:	1dfb      	adds	r3, r7, #7
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	b25b      	sxtb	r3, r3
    72f2:	089b      	lsrs	r3, r3, #2
    72f4:	492c      	ldr	r1, [pc, #176]	; (73a8 <__NVIC_SetPriority+0xd4>)
    72f6:	1dfa      	adds	r2, r7, #7
    72f8:	7812      	ldrb	r2, [r2, #0]
    72fa:	b252      	sxtb	r2, r2
    72fc:	0892      	lsrs	r2, r2, #2
    72fe:	32c0      	adds	r2, #192	; 0xc0
    7300:	0092      	lsls	r2, r2, #2
    7302:	5852      	ldr	r2, [r2, r1]
    7304:	1df9      	adds	r1, r7, #7
    7306:	7809      	ldrb	r1, [r1, #0]
    7308:	0008      	movs	r0, r1
    730a:	2103      	movs	r1, #3
    730c:	4001      	ands	r1, r0
    730e:	00c9      	lsls	r1, r1, #3
    7310:	20ff      	movs	r0, #255	; 0xff
    7312:	4088      	lsls	r0, r1
    7314:	0001      	movs	r1, r0
    7316:	43c9      	mvns	r1, r1
    7318:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    731a:	683a      	ldr	r2, [r7, #0]
    731c:	0192      	lsls	r2, r2, #6
    731e:	20ff      	movs	r0, #255	; 0xff
    7320:	4010      	ands	r0, r2
    7322:	1dfa      	adds	r2, r7, #7
    7324:	7812      	ldrb	r2, [r2, #0]
    7326:	0015      	movs	r5, r2
    7328:	2203      	movs	r2, #3
    732a:	402a      	ands	r2, r5
    732c:	00d2      	lsls	r2, r2, #3
    732e:	4090      	lsls	r0, r2
    7330:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7332:	430a      	orrs	r2, r1
    7334:	33c0      	adds	r3, #192	; 0xc0
    7336:	009b      	lsls	r3, r3, #2
    7338:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    733a:	e031      	b.n	73a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    733c:	4c1b      	ldr	r4, [pc, #108]	; (73ac <__NVIC_SetPriority+0xd8>)
    733e:	1dfb      	adds	r3, r7, #7
    7340:	781b      	ldrb	r3, [r3, #0]
    7342:	001a      	movs	r2, r3
    7344:	230f      	movs	r3, #15
    7346:	4013      	ands	r3, r2
    7348:	3b08      	subs	r3, #8
    734a:	0899      	lsrs	r1, r3, #2
    734c:	4a17      	ldr	r2, [pc, #92]	; (73ac <__NVIC_SetPriority+0xd8>)
    734e:	1dfb      	adds	r3, r7, #7
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	0018      	movs	r0, r3
    7354:	230f      	movs	r3, #15
    7356:	4003      	ands	r3, r0
    7358:	3b08      	subs	r3, #8
    735a:	089b      	lsrs	r3, r3, #2
    735c:	3306      	adds	r3, #6
    735e:	009b      	lsls	r3, r3, #2
    7360:	18d3      	adds	r3, r2, r3
    7362:	3304      	adds	r3, #4
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	1dfa      	adds	r2, r7, #7
    7368:	7812      	ldrb	r2, [r2, #0]
    736a:	0010      	movs	r0, r2
    736c:	2203      	movs	r2, #3
    736e:	4002      	ands	r2, r0
    7370:	00d2      	lsls	r2, r2, #3
    7372:	20ff      	movs	r0, #255	; 0xff
    7374:	4090      	lsls	r0, r2
    7376:	0002      	movs	r2, r0
    7378:	43d2      	mvns	r2, r2
    737a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	019b      	lsls	r3, r3, #6
    7380:	20ff      	movs	r0, #255	; 0xff
    7382:	4018      	ands	r0, r3
    7384:	1dfb      	adds	r3, r7, #7
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	001d      	movs	r5, r3
    738a:	2303      	movs	r3, #3
    738c:	402b      	ands	r3, r5
    738e:	00db      	lsls	r3, r3, #3
    7390:	4098      	lsls	r0, r3
    7392:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7394:	431a      	orrs	r2, r3
    7396:	1d8b      	adds	r3, r1, #6
    7398:	009b      	lsls	r3, r3, #2
    739a:	18e3      	adds	r3, r4, r3
    739c:	3304      	adds	r3, #4
    739e:	601a      	str	r2, [r3, #0]
}
    73a0:	46c0      	nop			; (mov r8, r8)
    73a2:	46bd      	mov	sp, r7
    73a4:	b002      	add	sp, #8
    73a6:	bdb0      	pop	{r4, r5, r7, pc}
    73a8:	e000e100 	.word	0xe000e100
    73ac:	e000ed00 	.word	0xe000ed00

000073b0 <spi_init>:
SPI spi;


void spi_init(void)
//-----------------------------------------------------------------------------
{
    73b0:	b580      	push	{r7, lr}
    73b2:	af00      	add	r7, sp, #0
	PM->APBCMASK.bit.SERCOM5_ =1; // Bit  2    - SERCOM4: SERCOM4 APB Clock Enable (1 - enabled)
    73b4:	4a67      	ldr	r2, [pc, #412]	; (7554 <spi_init+0x1a4>)
    73b6:	6a13      	ldr	r3, [r2, #32]
    73b8:	2180      	movs	r1, #128	; 0x80
    73ba:	430b      	orrs	r3, r1
    73bc:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.bit.ID   =GCLK_CLKCTRL_ID_SERCOM5_CORE; // Bits 5:0  - ID: Generic Clock Selection ID (0x18 - SERCOM4_CORE)
    73be:	4a66      	ldr	r2, [pc, #408]	; (7558 <spi_init+0x1a8>)
    73c0:	8853      	ldrh	r3, [r2, #2]
    73c2:	213f      	movs	r1, #63	; 0x3f
    73c4:	438b      	bics	r3, r1
    73c6:	1c19      	adds	r1, r3, #0
    73c8:	2319      	movs	r3, #25
    73ca:	430b      	orrs	r3, r1
    73cc:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    73ce:	4a62      	ldr	r2, [pc, #392]	; (7558 <spi_init+0x1a8>)
    73d0:	8853      	ldrh	r3, [r2, #2]
    73d2:	4962      	ldr	r1, [pc, #392]	; (755c <spi_init+0x1ac>)
    73d4:	400b      	ands	r3, r1
    73d6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    73d8:	4a5f      	ldr	r2, [pc, #380]	; (7558 <spi_init+0x1a8>)
    73da:	8853      	ldrh	r3, [r2, #2]
    73dc:	2180      	movs	r1, #128	; 0x80
    73de:	01c9      	lsls	r1, r1, #7
    73e0:	430b      	orrs	r3, r1
    73e2:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	if(SERCOM5->SPI.SYNCBUSY.bit.SWRST)   // Bit 0 - SWRST: Software Reset Synchronization Busy
    73e4:	4b5e      	ldr	r3, [pc, #376]	; (7560 <spi_init+0x1b0>)
    73e6:	69db      	ldr	r3, [r3, #28]
    73e8:	07db      	lsls	r3, r3, #31
    73ea:	0fdb      	lsrs	r3, r3, #31
    73ec:	b2db      	uxtb	r3, r3
    73ee:	2b00      	cmp	r3, #0
    73f0:	d01b      	beq.n	742a <spi_init+0x7a>
	{
		if(SERCOM5->SPI.CTRLA.bit.ENABLE)   // Bit 1 - ENABLE: Enable
    73f2:	4b5b      	ldr	r3, [pc, #364]	; (7560 <spi_init+0x1b0>)
    73f4:	681b      	ldr	r3, [r3, #0]
    73f6:	079b      	lsls	r3, r3, #30
    73f8:	0fdb      	lsrs	r3, r3, #31
    73fa:	b2db      	uxtb	r3, r3
    73fc:	2b00      	cmp	r3, #0
    73fe:	d014      	beq.n	742a <spi_init+0x7a>
		{
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    7400:	46c0      	nop			; (mov r8, r8)
    7402:	4b57      	ldr	r3, [pc, #348]	; (7560 <spi_init+0x1b0>)
    7404:	69db      	ldr	r3, [r3, #28]
    7406:	079b      	lsls	r3, r3, #30
    7408:	0fdb      	lsrs	r3, r3, #31
    740a:	b2db      	uxtb	r3, r3
    740c:	2b00      	cmp	r3, #0
    740e:	d1f8      	bne.n	7402 <spi_init+0x52>
			SERCOM5->SPI.CTRLA.bit.ENABLE=0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    7410:	4a53      	ldr	r2, [pc, #332]	; (7560 <spi_init+0x1b0>)
    7412:	6813      	ldr	r3, [r2, #0]
    7414:	2102      	movs	r1, #2
    7416:	438b      	bics	r3, r1
    7418:	6013      	str	r3, [r2, #0]
			while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE) { ; }
    741a:	46c0      	nop			; (mov r8, r8)
    741c:	4b50      	ldr	r3, [pc, #320]	; (7560 <spi_init+0x1b0>)
    741e:	69db      	ldr	r3, [r3, #28]
    7420:	079b      	lsls	r3, r3, #30
    7422:	0fdb      	lsrs	r3, r3, #31
    7424:	b2db      	uxtb	r3, r3
    7426:	2b00      	cmp	r3, #0
    7428:	d1f8      	bne.n	741c <spi_init+0x6c>
		}
	}

	//.............................................................................

	SERCOM5->SPI.CTRLA.bit.SWRST   =0x01; // Bit  0     - SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    742a:	4a4d      	ldr	r2, [pc, #308]	; (7560 <spi_init+0x1b0>)
    742c:	6813      	ldr	r3, [r2, #0]
    742e:	2101      	movs	r1, #1
    7430:	430b      	orrs	r3, r1
    7432:	6013      	str	r3, [r2, #0]
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    7434:	46c0      	nop			; (mov r8, r8)
    7436:	4b4a      	ldr	r3, [pc, #296]	; (7560 <spi_init+0x1b0>)
    7438:	69db      	ldr	r3, [r3, #28]
    743a:	07db      	lsls	r3, r3, #31
    743c:	0fdb      	lsrs	r3, r3, #31
    743e:	b2db      	uxtb	r3, r3
    7440:	2b00      	cmp	r3, #0
    7442:	d1f8      	bne.n	7436 <spi_init+0x86>

	SERCOM5->SPI.CTRLA.bit.DORD    =0x00; // Bit  30    - DORD: Data Order (0: MSB is transferred first)
    7444:	4a46      	ldr	r2, [pc, #280]	; (7560 <spi_init+0x1b0>)
    7446:	6813      	ldr	r3, [r2, #0]
    7448:	4946      	ldr	r1, [pc, #280]	; (7564 <spi_init+0x1b4>)
    744a:	400b      	ands	r3, r1
    744c:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL    =0x00; // Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    744e:	4a44      	ldr	r2, [pc, #272]	; (7560 <spi_init+0x1b0>)
    7450:	6813      	ldr	r3, [r2, #0]
    7452:	4945      	ldr	r1, [pc, #276]	; (7568 <spi_init+0x1b8>)
    7454:	400b      	ands	r3, r1
    7456:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.CPHA    =0x00; // Bit  28    - CPHA: Clock Phase (0: The data is sampled on a leading SCK edge and changed on a trailing SCK edge)
    7458:	4a41      	ldr	r2, [pc, #260]	; (7560 <spi_init+0x1b0>)
    745a:	6813      	ldr	r3, [r2, #0]
    745c:	4943      	ldr	r1, [pc, #268]	; (756c <spi_init+0x1bc>)
    745e:	400b      	ands	r3, r1
    7460:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.FORM    =0x00; // Bits 27:24 - FORM: Frame Format (0: SPI frame)
    7462:	4a3f      	ldr	r2, [pc, #252]	; (7560 <spi_init+0x1b0>)
    7464:	6813      	ldr	r3, [r2, #0]
    7466:	4942      	ldr	r1, [pc, #264]	; (7570 <spi_init+0x1c0>)
    7468:	400b      	ands	r3, r1
    746a:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.IBON    =0x00; // Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    746c:	4a3c      	ldr	r2, [pc, #240]	; (7560 <spi_init+0x1b0>)
    746e:	6813      	ldr	r3, [r2, #0]
    7470:	4940      	ldr	r1, [pc, #256]	; (7574 <spi_init+0x1c4>)
    7472:	400b      	ands	r3, r1
    7474:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.RUNSTDBY=0x00; // Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    7476:	4a3a      	ldr	r2, [pc, #232]	; (7560 <spi_init+0x1b0>)
    7478:	6813      	ldr	r3, [r2, #0]
    747a:	2180      	movs	r1, #128	; 0x80
    747c:	438b      	bics	r3, r1
    747e:	6013      	str	r3, [r2, #0]
	SERCOM5->SPI.CTRLA.bit.MODE    =0x03; // Bits 4:2   - MODE: Operating Mode (3: SPI master operation)
    7480:	4a37      	ldr	r2, [pc, #220]	; (7560 <spi_init+0x1b0>)
    7482:	6813      	ldr	r3, [r2, #0]
    7484:	211c      	movs	r1, #28
    7486:	438b      	bics	r3, r1
    7488:	210c      	movs	r1, #12
    748a:	430b      	orrs	r3, r1
    748c:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	4b33      	ldr	r3, [pc, #204]	; (7560 <spi_init+0x1b0>)
    7492:	69db      	ldr	r3, [r3, #28]
    7494:	2207      	movs	r2, #7
    7496:	4013      	ands	r3, r2
    7498:	d1fa      	bne.n	7490 <spi_init+0xe0>
	SERCOM5->SPI.CTRLA.bit.DOPO=0x02;     // Bits 17:16 - DOPO: Data Out Pinout (0: MOSI->PAD[3], SCK->PAD[1])
    749a:	4a31      	ldr	r2, [pc, #196]	; (7560 <spi_init+0x1b0>)
    749c:	6813      	ldr	r3, [r2, #0]
    749e:	4936      	ldr	r1, [pc, #216]	; (7578 <spi_init+0x1c8>)
    74a0:	400b      	ands	r3, r1
    74a2:	2180      	movs	r1, #128	; 0x80
    74a4:	0289      	lsls	r1, r1, #10
    74a6:	430b      	orrs	r3, r1
    74a8:	6013      	str	r3, [r2, #0]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    74aa:	46c0      	nop			; (mov r8, r8)
    74ac:	4b2c      	ldr	r3, [pc, #176]	; (7560 <spi_init+0x1b0>)
    74ae:	69db      	ldr	r3, [r3, #28]
    74b0:	2207      	movs	r2, #7
    74b2:	4013      	ands	r3, r2
    74b4:	d1fa      	bne.n	74ac <spi_init+0xfc>
	SERCOM5->SPI.CTRLA.bit.DIPO=0x00;     // Bits 21:20 - DIPO: Data In Pinout (0: SERCOM PAD[0] is used as data input)
    74b6:	4a2a      	ldr	r2, [pc, #168]	; (7560 <spi_init+0x1b0>)
    74b8:	6813      	ldr	r3, [r2, #0]
    74ba:	4930      	ldr	r1, [pc, #192]	; (757c <spi_init+0x1cc>)
    74bc:	400b      	ands	r3, r1
    74be:	6013      	str	r3, [r2, #0]

	SERCOM5->SPI.CTRLB.bit.RXEN   =0x01;  // Bit  17    - RXEN: Receiver Enable (1: The receiver is enabled or it will be enabled when SPI is enabled.)
    74c0:	4a27      	ldr	r2, [pc, #156]	; (7560 <spi_init+0x1b0>)
    74c2:	6853      	ldr	r3, [r2, #4]
    74c4:	2180      	movs	r1, #128	; 0x80
    74c6:	0289      	lsls	r1, r1, #10
    74c8:	430b      	orrs	r3, r1
    74ca:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.MSSEN  =0x00;  // Bit  13    - MSSEN: Master Slave Select Enable (0: Hardware _SS control is disabled)
    74cc:	4a24      	ldr	r2, [pc, #144]	; (7560 <spi_init+0x1b0>)
    74ce:	6853      	ldr	r3, [r2, #4]
    74d0:	492b      	ldr	r1, [pc, #172]	; (7580 <spi_init+0x1d0>)
    74d2:	400b      	ands	r3, r1
    74d4:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.AMODE  =0x00;  // Bits 15:14 - AMODE: Address Mode (0: ADDRMASK is used as a mask to the ADDR register)
    74d6:	4a22      	ldr	r2, [pc, #136]	; (7560 <spi_init+0x1b0>)
    74d8:	6853      	ldr	r3, [r2, #4]
    74da:	492a      	ldr	r1, [pc, #168]	; (7584 <spi_init+0x1d4>)
    74dc:	400b      	ands	r3, r1
    74de:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.SSDE   =0x00;  // Bit  9     - SSDE: Slave Select Low Detect Enable (0: _SS low detector is disabled.)
    74e0:	4a1f      	ldr	r2, [pc, #124]	; (7560 <spi_init+0x1b0>)
    74e2:	6853      	ldr	r3, [r2, #4]
    74e4:	4928      	ldr	r1, [pc, #160]	; (7588 <spi_init+0x1d8>)
    74e6:	400b      	ands	r3, r1
    74e8:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.PLOADEN=0x00;  // Bit 6      – PLOADEN: Slave Data Preload Enable ()
    74ea:	4a1d      	ldr	r2, [pc, #116]	; (7560 <spi_init+0x1b0>)
    74ec:	6853      	ldr	r3, [r2, #4]
    74ee:	2140      	movs	r1, #64	; 0x40
    74f0:	438b      	bics	r3, r1
    74f2:	6053      	str	r3, [r2, #4]
	SERCOM5->SPI.CTRLB.bit.CHSIZE =0x00;  // Bits 2:0   - CHSIZE: Character Size (0: 8 bits)
    74f4:	4a1a      	ldr	r2, [pc, #104]	; (7560 <spi_init+0x1b0>)
    74f6:	6853      	ldr	r3, [r2, #4]
    74f8:	2107      	movs	r1, #7
    74fa:	438b      	bics	r3, r1
    74fc:	6053      	str	r3, [r2, #4]

	SERCOM5->SPI.BAUD.bit.BAUD        = (float)(PROC_HERZ ) / (2 * (float)(8000000 )) - 1;
    74fe:	4b18      	ldr	r3, [pc, #96]	; (7560 <spi_init+0x1b0>)
    7500:	2200      	movs	r2, #0
    7502:	731a      	strb	r2, [r3, #12]
	SERCOM5->SPI.INTENSET.bit.TXC	  = 0x00;
    7504:	4a16      	ldr	r2, [pc, #88]	; (7560 <spi_init+0x1b0>)
    7506:	7d93      	ldrb	r3, [r2, #22]
    7508:	2102      	movs	r1, #2
    750a:	438b      	bics	r3, r1
    750c:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.DRE     = 0x00;
    750e:	4a14      	ldr	r2, [pc, #80]	; (7560 <spi_init+0x1b0>)
    7510:	7d93      	ldrb	r3, [r2, #22]
    7512:	2101      	movs	r1, #1
    7514:	438b      	bics	r3, r1
    7516:	7593      	strb	r3, [r2, #22]
	SERCOM5->SPI.INTENSET.bit.RXC     = 0x00;	
    7518:	4a11      	ldr	r2, [pc, #68]	; (7560 <spi_init+0x1b0>)
    751a:	7d93      	ldrb	r3, [r2, #22]
    751c:	2104      	movs	r1, #4
    751e:	438b      	bics	r3, r1
    7520:	7593      	strb	r3, [r2, #22]

	while(SERCOM5->SPI.SYNCBUSY.reg & 0x07) { ; }
    7522:	46c0      	nop			; (mov r8, r8)
    7524:	4b0e      	ldr	r3, [pc, #56]	; (7560 <spi_init+0x1b0>)
    7526:	69db      	ldr	r3, [r3, #28]
    7528:	2207      	movs	r2, #7
    752a:	4013      	ands	r3, r2
    752c:	d1fa      	bne.n	7524 <spi_init+0x174>
	SERCOM5->SPI.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    752e:	4a0c      	ldr	r2, [pc, #48]	; (7560 <spi_init+0x1b0>)
    7530:	6813      	ldr	r3, [r2, #0]
    7532:	2102      	movs	r1, #2
    7534:	430b      	orrs	r3, r1
    7536:	6013      	str	r3, [r2, #0]

	NVIC_DisableIRQ(SERCOM5_IRQn);
    7538:	200e      	movs	r0, #14
    753a:	f7ff feab 	bl	7294 <__NVIC_DisableIRQ>
	NVIC_SetPriority(SERCOM5_IRQn, 1);
    753e:	2101      	movs	r1, #1
    7540:	200e      	movs	r0, #14
    7542:	f7ff fec7 	bl	72d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SERCOM5_IRQn);
    7546:	200e      	movs	r0, #14
    7548:	f7ff fe8a 	bl	7260 <__NVIC_EnableIRQ>
}
    754c:	46c0      	nop			; (mov r8, r8)
    754e:	46bd      	mov	sp, r7
    7550:	bd80      	pop	{r7, pc}
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	40000400 	.word	0x40000400
    7558:	40000c00 	.word	0x40000c00
    755c:	fffff0ff 	.word	0xfffff0ff
    7560:	42001c00 	.word	0x42001c00
    7564:	bfffffff 	.word	0xbfffffff
    7568:	dfffffff 	.word	0xdfffffff
    756c:	efffffff 	.word	0xefffffff
    7570:	f0ffffff 	.word	0xf0ffffff
    7574:	fffffeff 	.word	0xfffffeff
    7578:	fffcffff 	.word	0xfffcffff
    757c:	ffcfffff 	.word	0xffcfffff
    7580:	ffffdfff 	.word	0xffffdfff
    7584:	ffff3fff 	.word	0xffff3fff
    7588:	fffffdff 	.word	0xfffffdff

0000758c <spi_process>:


WORD spi_process (uint16_t addr, uint8_t cb, uint8_t *buf, uint16_t len, BYTE cmd)
{
    758c:	b5b0      	push	{r4, r5, r7, lr}
    758e:	b086      	sub	sp, #24
    7590:	af00      	add	r7, sp, #0
    7592:	0004      	movs	r4, r0
    7594:	0008      	movs	r0, r1
    7596:	60ba      	str	r2, [r7, #8]
    7598:	0019      	movs	r1, r3
    759a:	230e      	movs	r3, #14
    759c:	18fb      	adds	r3, r7, r3
    759e:	1c22      	adds	r2, r4, #0
    75a0:	801a      	strh	r2, [r3, #0]
    75a2:	230d      	movs	r3, #13
    75a4:	18fb      	adds	r3, r7, r3
    75a6:	1c02      	adds	r2, r0, #0
    75a8:	701a      	strb	r2, [r3, #0]
    75aa:	1dbb      	adds	r3, r7, #6
    75ac:	1c0a      	adds	r2, r1, #0
    75ae:	801a      	strh	r2, [r3, #0]
	BYTE st_spi=0;
    75b0:	2315      	movs	r3, #21
    75b2:	18fb      	adds	r3, r7, r3
    75b4:	2200      	movs	r2, #0
    75b6:	701a      	strb	r2, [r3, #0]
	WORD rn_wn=0;
    75b8:	2316      	movs	r3, #22
    75ba:	18fb      	adds	r3, r7, r3
    75bc:	2200      	movs	r2, #0
    75be:	801a      	strh	r2, [r3, #0]
	
	st_spi = cmd;
    75c0:	2315      	movs	r3, #21
    75c2:	18fb      	adds	r3, r7, r3
    75c4:	2228      	movs	r2, #40	; 0x28
    75c6:	18ba      	adds	r2, r7, r2
    75c8:	7812      	ldrb	r2, [r2, #0]
    75ca:	701a      	strb	r2, [r3, #0]
	switch(st_spi)
    75cc:	2315      	movs	r3, #21
    75ce:	18fb      	adds	r3, r7, r3
    75d0:	781b      	ldrb	r3, [r3, #0]
    75d2:	2b01      	cmp	r3, #1
    75d4:	d005      	beq.n	75e2 <spi_process+0x56>
    75d6:	2b02      	cmp	r3, #2
    75d8:	d014      	beq.n	7604 <spi_process+0x78>
    75da:	2b00      	cmp	r3, #0
    75dc:	d123      	bne.n	7626 <spi_process+0x9a>
	{
		case 0:
			return (1);
    75de:	2301      	movs	r3, #1
    75e0:	e024      	b.n	762c <spi_process+0xa0>
		break;
		case READ_DATA:
			rn_wn=spi_read(addr,cb,buf,len);
    75e2:	2316      	movs	r3, #22
    75e4:	18fc      	adds	r4, r7, r3
    75e6:	1dbb      	adds	r3, r7, #6
    75e8:	881d      	ldrh	r5, [r3, #0]
    75ea:	68ba      	ldr	r2, [r7, #8]
    75ec:	230d      	movs	r3, #13
    75ee:	18fb      	adds	r3, r7, r3
    75f0:	7819      	ldrb	r1, [r3, #0]
    75f2:	230e      	movs	r3, #14
    75f4:	18fb      	adds	r3, r7, r3
    75f6:	8818      	ldrh	r0, [r3, #0]
    75f8:	002b      	movs	r3, r5
    75fa:	f000 f8f7 	bl	77ec <spi_read>
    75fe:	0003      	movs	r3, r0
    7600:	8023      	strh	r3, [r4, #0]
		break;
    7602:	e010      	b.n	7626 <spi_process+0x9a>
		case WRITE_DATA:
			rn_wn=spi_write(addr,cb,buf,len);
    7604:	2316      	movs	r3, #22
    7606:	18fc      	adds	r4, r7, r3
    7608:	1dbb      	adds	r3, r7, #6
    760a:	881d      	ldrh	r5, [r3, #0]
    760c:	68ba      	ldr	r2, [r7, #8]
    760e:	230d      	movs	r3, #13
    7610:	18fb      	adds	r3, r7, r3
    7612:	7819      	ldrb	r1, [r3, #0]
    7614:	230e      	movs	r3, #14
    7616:	18fb      	adds	r3, r7, r3
    7618:	8818      	ldrh	r0, [r3, #0]
    761a:	002b      	movs	r3, r5
    761c:	f000 f80a 	bl	7634 <spi_write>
    7620:	0003      	movs	r3, r0
    7622:	8023      	strh	r3, [r4, #0]
		break;			
    7624:	46c0      	nop			; (mov r8, r8)
	}
	return (rn_wn);
    7626:	2316      	movs	r3, #22
    7628:	18fb      	adds	r3, r7, r3
    762a:	881b      	ldrh	r3, [r3, #0]
}
    762c:	0018      	movs	r0, r3
    762e:	46bd      	mov	sp, r7
    7630:	b006      	add	sp, #24
    7632:	bdb0      	pop	{r4, r5, r7, pc}

00007634 <spi_write>:

WORD spi_write(uint16_t addr, uint8_t cb, uint8_t *tx_buf, uint16_t len)
{
    7634:	b590      	push	{r4, r7, lr}
    7636:	b087      	sub	sp, #28
    7638:	af00      	add	r7, sp, #0
    763a:	0004      	movs	r4, r0
    763c:	0008      	movs	r0, r1
    763e:	60ba      	str	r2, [r7, #8]
    7640:	0019      	movs	r1, r3
    7642:	230e      	movs	r3, #14
    7644:	18fb      	adds	r3, r7, r3
    7646:	1c22      	adds	r2, r4, #0
    7648:	801a      	strh	r2, [r3, #0]
    764a:	230d      	movs	r3, #13
    764c:	18fb      	adds	r3, r7, r3
    764e:	1c02      	adds	r2, r0, #0
    7650:	701a      	strb	r2, [r3, #0]
    7652:	1dbb      	adds	r3, r7, #6
    7654:	1c0a      	adds	r2, r1, #0
    7656:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7658:	2316      	movs	r3, #22
    765a:	18fb      	adds	r3, r7, r3
    765c:	2200      	movs	r2, #0
    765e:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7660:	4b5c      	ldr	r3, [pc, #368]	; (77d4 <spi_write+0x1a0>)
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	2b00      	cmp	r3, #0
    7666:	d003      	beq.n	7670 <spi_write+0x3c>
    7668:	2b01      	cmp	r3, #1
    766a:	d100      	bne.n	766e <spi_write+0x3a>
    766c:	e08b      	b.n	7786 <spi_write+0x152>
    766e:	e0ac      	b.n	77ca <spi_write+0x196>
	{
		case 0:
			CS_clr();			
    7670:	23c0      	movs	r3, #192	; 0xc0
    7672:	05db      	lsls	r3, r3, #23
    7674:	2280      	movs	r2, #128	; 0x80
    7676:	0452      	lsls	r2, r2, #17
    7678:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    767a:	2316      	movs	r3, #22
    767c:	18fb      	adds	r3, r7, r3
    767e:	881b      	ldrh	r3, [r3, #0]
    7680:	220e      	movs	r2, #14
    7682:	18ba      	adds	r2, r7, r2
    7684:	8812      	ldrh	r2, [r2, #0]
    7686:	0a12      	lsrs	r2, r2, #8
    7688:	b292      	uxth	r2, r2
    768a:	b2d1      	uxtb	r1, r2
    768c:	4a52      	ldr	r2, [pc, #328]	; (77d8 <spi_write+0x1a4>)
    768e:	54d1      	strb	r1, [r2, r3]
    7690:	2316      	movs	r3, #22
    7692:	18fb      	adds	r3, r7, r3
    7694:	881a      	ldrh	r2, [r3, #0]
    7696:	2316      	movs	r3, #22
    7698:	18fb      	adds	r3, r7, r3
    769a:	3201      	adds	r2, #1
    769c:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    769e:	2316      	movs	r3, #22
    76a0:	18fb      	adds	r3, r7, r3
    76a2:	881b      	ldrh	r3, [r3, #0]
    76a4:	220e      	movs	r2, #14
    76a6:	18ba      	adds	r2, r7, r2
    76a8:	8812      	ldrh	r2, [r2, #0]
    76aa:	b2d1      	uxtb	r1, r2
    76ac:	4a4a      	ldr	r2, [pc, #296]	; (77d8 <spi_write+0x1a4>)
    76ae:	54d1      	strb	r1, [r2, r3]
    76b0:	2316      	movs	r3, #22
    76b2:	18fb      	adds	r3, r7, r3
    76b4:	881a      	ldrh	r2, [r3, #0]
    76b6:	2316      	movs	r3, #22
    76b8:	18fb      	adds	r3, r7, r3
    76ba:	3201      	adds	r2, #1
    76bc:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | WRITE_REG | LEN_N_BYTES;		cnt++;
    76be:	2316      	movs	r3, #22
    76c0:	18fb      	adds	r3, r7, r3
    76c2:	881b      	ldrh	r3, [r3, #0]
    76c4:	220d      	movs	r2, #13
    76c6:	18ba      	adds	r2, r7, r2
    76c8:	7812      	ldrb	r2, [r2, #0]
    76ca:	2104      	movs	r1, #4
    76cc:	430a      	orrs	r2, r1
    76ce:	b2d1      	uxtb	r1, r2
    76d0:	4a41      	ldr	r2, [pc, #260]	; (77d8 <spi_write+0x1a4>)
    76d2:	54d1      	strb	r1, [r2, r3]
    76d4:	2316      	movs	r3, #22
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	881a      	ldrh	r2, [r3, #0]
    76da:	2316      	movs	r3, #22
    76dc:	18fb      	adds	r3, r7, r3
    76de:	3201      	adds	r2, #1
    76e0:	801a      	strh	r2, [r3, #0]
							
			if((len+cnt)>MAX_SIZE_BUF_SPI)		{len=MAX_SIZE_BUF_SPI-cnt;}
    76e2:	1dbb      	adds	r3, r7, #6
    76e4:	881a      	ldrh	r2, [r3, #0]
    76e6:	2316      	movs	r3, #22
    76e8:	18fb      	adds	r3, r7, r3
    76ea:	881b      	ldrh	r3, [r3, #0]
    76ec:	18d2      	adds	r2, r2, r3
    76ee:	23b9      	movs	r3, #185	; 0xb9
    76f0:	00db      	lsls	r3, r3, #3
    76f2:	429a      	cmp	r2, r3
    76f4:	dd07      	ble.n	7706 <spi_write+0xd2>
    76f6:	1dbb      	adds	r3, r7, #6
    76f8:	2216      	movs	r2, #22
    76fa:	18ba      	adds	r2, r7, r2
    76fc:	8812      	ldrh	r2, [r2, #0]
    76fe:	21b9      	movs	r1, #185	; 0xb9
    7700:	00c9      	lsls	r1, r1, #3
    7702:	1a8a      	subs	r2, r1, r2
    7704:	801a      	strh	r2, [r3, #0]
			memcpy(&spi.wbuf[cnt],tx_buf,len);  cnt=cnt+len;
    7706:	2316      	movs	r3, #22
    7708:	18fb      	adds	r3, r7, r3
    770a:	881a      	ldrh	r2, [r3, #0]
    770c:	4b32      	ldr	r3, [pc, #200]	; (77d8 <spi_write+0x1a4>)
    770e:	18d0      	adds	r0, r2, r3
    7710:	1dbb      	adds	r3, r7, #6
    7712:	881a      	ldrh	r2, [r3, #0]
    7714:	68bb      	ldr	r3, [r7, #8]
    7716:	0019      	movs	r1, r3
    7718:	4b30      	ldr	r3, [pc, #192]	; (77dc <spi_write+0x1a8>)
    771a:	4798      	blx	r3
    771c:	2316      	movs	r3, #22
    771e:	18fb      	adds	r3, r7, r3
    7720:	2216      	movs	r2, #22
    7722:	18b9      	adds	r1, r7, r2
    7724:	1dba      	adds	r2, r7, #6
    7726:	8809      	ldrh	r1, [r1, #0]
    7728:	8812      	ldrh	r2, [r2, #0]
    772a:	188a      	adds	r2, r1, r2
    772c:	801a      	strh	r2, [r3, #0]
							
			spi.wx = cnt; 
    772e:	4b2a      	ldr	r3, [pc, #168]	; (77d8 <spi_write+0x1a4>)
    7730:	2216      	movs	r2, #22
    7732:	18ba      	adds	r2, r7, r2
    7734:	492a      	ldr	r1, [pc, #168]	; (77e0 <spi_write+0x1ac>)
    7736:	8812      	ldrh	r2, [r2, #0]
    7738:	525a      	strh	r2, [r3, r1]
			spi.wn = 0;
    773a:	4b27      	ldr	r3, [pc, #156]	; (77d8 <spi_write+0x1a4>)
    773c:	4a29      	ldr	r2, [pc, #164]	; (77e4 <spi_write+0x1b0>)
    773e:	2100      	movs	r1, #0
    7740:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    7742:	4a25      	ldr	r2, [pc, #148]	; (77d8 <spi_write+0x1a4>)
    7744:	23b9      	movs	r3, #185	; 0xb9
    7746:	011b      	lsls	r3, r3, #4
    7748:	2100      	movs	r1, #0
    774a:	52d1      	strh	r1, [r2, r3]
							
			if(spi.wx>MAX_SIZE_BUF_SPI)			{spi.wx=MAX_SIZE_BUF_SPI;}
    774c:	4b22      	ldr	r3, [pc, #136]	; (77d8 <spi_write+0x1a4>)
    774e:	4a24      	ldr	r2, [pc, #144]	; (77e0 <spi_write+0x1ac>)
    7750:	5a9a      	ldrh	r2, [r3, r2]
    7752:	23b9      	movs	r3, #185	; 0xb9
    7754:	00db      	lsls	r3, r3, #3
    7756:	429a      	cmp	r2, r3
    7758:	d904      	bls.n	7764 <spi_write+0x130>
    775a:	4b1f      	ldr	r3, [pc, #124]	; (77d8 <spi_write+0x1a4>)
    775c:	4a20      	ldr	r2, [pc, #128]	; (77e0 <spi_write+0x1ac>)
    775e:	21b9      	movs	r1, #185	; 0xb9
    7760:	00c9      	lsls	r1, r1, #3
    7762:	5299      	strh	r1, [r3, r2]
			st_read++;
    7764:	4b1b      	ldr	r3, [pc, #108]	; (77d4 <spi_write+0x1a0>)
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	3301      	adds	r3, #1
    776a:	b2da      	uxtb	r2, r3
    776c:	4b19      	ldr	r3, [pc, #100]	; (77d4 <spi_write+0x1a0>)
    776e:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    7770:	4a1d      	ldr	r2, [pc, #116]	; (77e8 <spi_write+0x1b4>)
    7772:	7d93      	ldrb	r3, [r2, #22]
    7774:	2101      	movs	r1, #1
    7776:	430b      	orrs	r3, r1
    7778:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;							
    777a:	4a1b      	ldr	r2, [pc, #108]	; (77e8 <spi_write+0x1b4>)
    777c:	7d93      	ldrb	r3, [r2, #22]
    777e:	2104      	movs	r1, #4
    7780:	430b      	orrs	r3, r1
    7782:	7593      	strb	r3, [r2, #22]
		break;
    7784:	e021      	b.n	77ca <spi_write+0x196>
		case 1:	
			if(spi.wx)							{return 0;}
    7786:	4b14      	ldr	r3, [pc, #80]	; (77d8 <spi_write+0x1a4>)
    7788:	4a15      	ldr	r2, [pc, #84]	; (77e0 <spi_write+0x1ac>)
    778a:	5a9b      	ldrh	r3, [r3, r2]
    778c:	2b00      	cmp	r3, #0
    778e:	d001      	beq.n	7794 <spi_write+0x160>
    7790:	2300      	movs	r3, #0
    7792:	e01b      	b.n	77cc <spi_write+0x198>
			if(spi.rn!=spi.wn)					{return 0;}
    7794:	4a10      	ldr	r2, [pc, #64]	; (77d8 <spi_write+0x1a4>)
    7796:	23b9      	movs	r3, #185	; 0xb9
    7798:	011b      	lsls	r3, r3, #4
    779a:	5ad2      	ldrh	r2, [r2, r3]
    779c:	4b0e      	ldr	r3, [pc, #56]	; (77d8 <spi_write+0x1a4>)
    779e:	4911      	ldr	r1, [pc, #68]	; (77e4 <spi_write+0x1b0>)
    77a0:	5a5b      	ldrh	r3, [r3, r1]
    77a2:	429a      	cmp	r2, r3
    77a4:	d001      	beq.n	77aa <spi_write+0x176>
    77a6:	2300      	movs	r3, #0
    77a8:	e010      	b.n	77cc <spi_write+0x198>
			st_read--;
    77aa:	4b0a      	ldr	r3, [pc, #40]	; (77d4 <spi_write+0x1a0>)
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	3b01      	subs	r3, #1
    77b0:	b2da      	uxtb	r2, r3
    77b2:	4b08      	ldr	r3, [pc, #32]	; (77d4 <spi_write+0x1a0>)
    77b4:	701a      	strb	r2, [r3, #0]
			CS_set();
    77b6:	23c0      	movs	r3, #192	; 0xc0
    77b8:	05db      	lsls	r3, r3, #23
    77ba:	2280      	movs	r2, #128	; 0x80
    77bc:	0452      	lsls	r2, r2, #17
    77be:	619a      	str	r2, [r3, #24]
			
			return (spi.rn);
    77c0:	4a05      	ldr	r2, [pc, #20]	; (77d8 <spi_write+0x1a4>)
    77c2:	23b9      	movs	r3, #185	; 0xb9
    77c4:	011b      	lsls	r3, r3, #4
    77c6:	5ad3      	ldrh	r3, [r2, r3]
    77c8:	e000      	b.n	77cc <spi_write+0x198>
		break;
	}
	return 0;
    77ca:	2300      	movs	r3, #0
}
    77cc:	0018      	movs	r0, r3
    77ce:	46bd      	mov	sp, r7
    77d0:	b007      	add	sp, #28
    77d2:	bd90      	pop	{r4, r7, pc}
    77d4:	2000046d 	.word	0x2000046d
    77d8:	20002650 	.word	0x20002650
    77dc:	0000c4e5 	.word	0x0000c4e5
    77e0:	00000b94 	.word	0x00000b94
    77e4:	00000b92 	.word	0x00000b92
    77e8:	42001c00 	.word	0x42001c00

000077ec <spi_read>:

WORD spi_read(uint16_t addr, uint8_t cb, uint8_t *rx_buf, uint16_t len)
{
    77ec:	b590      	push	{r4, r7, lr}
    77ee:	b087      	sub	sp, #28
    77f0:	af00      	add	r7, sp, #0
    77f2:	0004      	movs	r4, r0
    77f4:	0008      	movs	r0, r1
    77f6:	60ba      	str	r2, [r7, #8]
    77f8:	0019      	movs	r1, r3
    77fa:	230e      	movs	r3, #14
    77fc:	18fb      	adds	r3, r7, r3
    77fe:	1c22      	adds	r2, r4, #0
    7800:	801a      	strh	r2, [r3, #0]
    7802:	230d      	movs	r3, #13
    7804:	18fb      	adds	r3, r7, r3
    7806:	1c02      	adds	r2, r0, #0
    7808:	701a      	strb	r2, [r3, #0]
    780a:	1dbb      	adds	r3, r7, #6
    780c:	1c0a      	adds	r2, r1, #0
    780e:	801a      	strh	r2, [r3, #0]
	WORD cnt=0;
    7810:	2316      	movs	r3, #22
    7812:	18fb      	adds	r3, r7, r3
    7814:	2200      	movs	r2, #0
    7816:	801a      	strh	r2, [r3, #0]
	static BYTE st_read=0;
	
	switch (st_read)
    7818:	4b4e      	ldr	r3, [pc, #312]	; (7954 <spi_read+0x168>)
    781a:	781b      	ldrb	r3, [r3, #0]
    781c:	2b00      	cmp	r3, #0
    781e:	d002      	beq.n	7826 <spi_read+0x3a>
    7820:	2b01      	cmp	r3, #1
    7822:	d066      	beq.n	78f2 <spi_read+0x106>
    7824:	e091      	b.n	794a <spi_read+0x15e>
	{
		case 0:
			CS_clr();
    7826:	23c0      	movs	r3, #192	; 0xc0
    7828:	05db      	lsls	r3, r3, #23
    782a:	2280      	movs	r2, #128	; 0x80
    782c:	0452      	lsls	r2, r2, #17
    782e:	615a      	str	r2, [r3, #20]
			spi.wbuf[cnt]=(addr >> 8);						cnt++;
    7830:	2316      	movs	r3, #22
    7832:	18fb      	adds	r3, r7, r3
    7834:	881b      	ldrh	r3, [r3, #0]
    7836:	220e      	movs	r2, #14
    7838:	18ba      	adds	r2, r7, r2
    783a:	8812      	ldrh	r2, [r2, #0]
    783c:	0a12      	lsrs	r2, r2, #8
    783e:	b292      	uxth	r2, r2
    7840:	b2d1      	uxtb	r1, r2
    7842:	4a45      	ldr	r2, [pc, #276]	; (7958 <spi_read+0x16c>)
    7844:	54d1      	strb	r1, [r2, r3]
    7846:	2316      	movs	r3, #22
    7848:	18fb      	adds	r3, r7, r3
    784a:	881a      	ldrh	r2, [r3, #0]
    784c:	2316      	movs	r3, #22
    784e:	18fb      	adds	r3, r7, r3
    7850:	3201      	adds	r2, #1
    7852:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=(addr & 0xFF);					cnt++;
    7854:	2316      	movs	r3, #22
    7856:	18fb      	adds	r3, r7, r3
    7858:	881b      	ldrh	r3, [r3, #0]
    785a:	220e      	movs	r2, #14
    785c:	18ba      	adds	r2, r7, r2
    785e:	8812      	ldrh	r2, [r2, #0]
    7860:	b2d1      	uxtb	r1, r2
    7862:	4a3d      	ldr	r2, [pc, #244]	; (7958 <spi_read+0x16c>)
    7864:	54d1      	strb	r1, [r2, r3]
    7866:	2316      	movs	r3, #22
    7868:	18fb      	adds	r3, r7, r3
    786a:	881a      	ldrh	r2, [r3, #0]
    786c:	2316      	movs	r3, #22
    786e:	18fb      	adds	r3, r7, r3
    7870:	3201      	adds	r2, #1
    7872:	801a      	strh	r2, [r3, #0]
			spi.wbuf[cnt]=cb | READ_REG | LEN_N_BYTES;		cnt++;
    7874:	2316      	movs	r3, #22
    7876:	18fb      	adds	r3, r7, r3
    7878:	881b      	ldrh	r3, [r3, #0]
    787a:	4a37      	ldr	r2, [pc, #220]	; (7958 <spi_read+0x16c>)
    787c:	210d      	movs	r1, #13
    787e:	1879      	adds	r1, r7, r1
    7880:	7809      	ldrb	r1, [r1, #0]
    7882:	54d1      	strb	r1, [r2, r3]
    7884:	2316      	movs	r3, #22
    7886:	18fb      	adds	r3, r7, r3
    7888:	881a      	ldrh	r2, [r3, #0]
    788a:	2316      	movs	r3, #22
    788c:	18fb      	adds	r3, r7, r3
    788e:	3201      	adds	r2, #1
    7890:	801a      	strh	r2, [r3, #0]
			spi.wx = cnt + len;
    7892:	2316      	movs	r3, #22
    7894:	18fa      	adds	r2, r7, r3
    7896:	1dbb      	adds	r3, r7, #6
    7898:	8812      	ldrh	r2, [r2, #0]
    789a:	881b      	ldrh	r3, [r3, #0]
    789c:	18d3      	adds	r3, r2, r3
    789e:	b299      	uxth	r1, r3
    78a0:	4b2d      	ldr	r3, [pc, #180]	; (7958 <spi_read+0x16c>)
    78a2:	4a2e      	ldr	r2, [pc, #184]	; (795c <spi_read+0x170>)
    78a4:	5299      	strh	r1, [r3, r2]
			spi.wn = 0;
    78a6:	4b2c      	ldr	r3, [pc, #176]	; (7958 <spi_read+0x16c>)
    78a8:	4a2d      	ldr	r2, [pc, #180]	; (7960 <spi_read+0x174>)
    78aa:	2100      	movs	r1, #0
    78ac:	5299      	strh	r1, [r3, r2]
			spi.rn = 0;
    78ae:	4a2a      	ldr	r2, [pc, #168]	; (7958 <spi_read+0x16c>)
    78b0:	23b9      	movs	r3, #185	; 0xb9
    78b2:	011b      	lsls	r3, r3, #4
    78b4:	2100      	movs	r1, #0
    78b6:	52d1      	strh	r1, [r2, r3]
			if(spi.wx>MAX_SIZE_BUF_SPI) {spi.wx=MAX_SIZE_BUF_SPI;}
    78b8:	4b27      	ldr	r3, [pc, #156]	; (7958 <spi_read+0x16c>)
    78ba:	4a28      	ldr	r2, [pc, #160]	; (795c <spi_read+0x170>)
    78bc:	5a9a      	ldrh	r2, [r3, r2]
    78be:	23b9      	movs	r3, #185	; 0xb9
    78c0:	00db      	lsls	r3, r3, #3
    78c2:	429a      	cmp	r2, r3
    78c4:	d904      	bls.n	78d0 <spi_read+0xe4>
    78c6:	4b24      	ldr	r3, [pc, #144]	; (7958 <spi_read+0x16c>)
    78c8:	4a24      	ldr	r2, [pc, #144]	; (795c <spi_read+0x170>)
    78ca:	21b9      	movs	r1, #185	; 0xb9
    78cc:	00c9      	lsls	r1, r1, #3
    78ce:	5299      	strh	r1, [r3, r2]
			st_read++;
    78d0:	4b20      	ldr	r3, [pc, #128]	; (7954 <spi_read+0x168>)
    78d2:	781b      	ldrb	r3, [r3, #0]
    78d4:	3301      	adds	r3, #1
    78d6:	b2da      	uxtb	r2, r3
    78d8:	4b1e      	ldr	r3, [pc, #120]	; (7954 <spi_read+0x168>)
    78da:	701a      	strb	r2, [r3, #0]
			SERCOM5->SPI.INTENSET.bit.DRE=0x01;
    78dc:	4a21      	ldr	r2, [pc, #132]	; (7964 <spi_read+0x178>)
    78de:	7d93      	ldrb	r3, [r2, #22]
    78e0:	2101      	movs	r1, #1
    78e2:	430b      	orrs	r3, r1
    78e4:	7593      	strb	r3, [r2, #22]
			SERCOM5->SPI.INTENSET.bit.RXC=0x01;
    78e6:	4a1f      	ldr	r2, [pc, #124]	; (7964 <spi_read+0x178>)
    78e8:	7d93      	ldrb	r3, [r2, #22]
    78ea:	2104      	movs	r1, #4
    78ec:	430b      	orrs	r3, r1
    78ee:	7593      	strb	r3, [r2, #22]
		break;
    78f0:	e02b      	b.n	794a <spi_read+0x15e>
		case 1:
			if(spi.wx)							{return 0;}
    78f2:	4b19      	ldr	r3, [pc, #100]	; (7958 <spi_read+0x16c>)
    78f4:	4a19      	ldr	r2, [pc, #100]	; (795c <spi_read+0x170>)
    78f6:	5a9b      	ldrh	r3, [r3, r2]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d001      	beq.n	7900 <spi_read+0x114>
    78fc:	2300      	movs	r3, #0
    78fe:	e025      	b.n	794c <spi_read+0x160>
			if(spi.rn!=spi.wn)					{return 0;}
    7900:	4a15      	ldr	r2, [pc, #84]	; (7958 <spi_read+0x16c>)
    7902:	23b9      	movs	r3, #185	; 0xb9
    7904:	011b      	lsls	r3, r3, #4
    7906:	5ad2      	ldrh	r2, [r2, r3]
    7908:	4b13      	ldr	r3, [pc, #76]	; (7958 <spi_read+0x16c>)
    790a:	4915      	ldr	r1, [pc, #84]	; (7960 <spi_read+0x174>)
    790c:	5a5b      	ldrh	r3, [r3, r1]
    790e:	429a      	cmp	r2, r3
    7910:	d001      	beq.n	7916 <spi_read+0x12a>
    7912:	2300      	movs	r3, #0
    7914:	e01a      	b.n	794c <spi_read+0x160>
			memcpy(rx_buf,&spi.rbuf[3],spi.rn);
    7916:	4a10      	ldr	r2, [pc, #64]	; (7958 <spi_read+0x16c>)
    7918:	23b9      	movs	r3, #185	; 0xb9
    791a:	011b      	lsls	r3, r3, #4
    791c:	5ad3      	ldrh	r3, [r2, r3]
    791e:	001a      	movs	r2, r3
    7920:	4911      	ldr	r1, [pc, #68]	; (7968 <spi_read+0x17c>)
    7922:	68bb      	ldr	r3, [r7, #8]
    7924:	0018      	movs	r0, r3
    7926:	4b11      	ldr	r3, [pc, #68]	; (796c <spi_read+0x180>)
    7928:	4798      	blx	r3
			st_read--;
    792a:	4b0a      	ldr	r3, [pc, #40]	; (7954 <spi_read+0x168>)
    792c:	781b      	ldrb	r3, [r3, #0]
    792e:	3b01      	subs	r3, #1
    7930:	b2da      	uxtb	r2, r3
    7932:	4b08      	ldr	r3, [pc, #32]	; (7954 <spi_read+0x168>)
    7934:	701a      	strb	r2, [r3, #0]
			CS_set();
    7936:	23c0      	movs	r3, #192	; 0xc0
    7938:	05db      	lsls	r3, r3, #23
    793a:	2280      	movs	r2, #128	; 0x80
    793c:	0452      	lsls	r2, r2, #17
    793e:	619a      	str	r2, [r3, #24]
				
			return (spi.rn);
    7940:	4a05      	ldr	r2, [pc, #20]	; (7958 <spi_read+0x16c>)
    7942:	23b9      	movs	r3, #185	; 0xb9
    7944:	011b      	lsls	r3, r3, #4
    7946:	5ad3      	ldrh	r3, [r2, r3]
    7948:	e000      	b.n	794c <spi_read+0x160>
		break;
	}
	return 0;
    794a:	2300      	movs	r3, #0
}
    794c:	0018      	movs	r0, r3
    794e:	46bd      	mov	sp, r7
    7950:	b007      	add	sp, #28
    7952:	bd90      	pop	{r4, r7, pc}
    7954:	2000046e 	.word	0x2000046e
    7958:	20002650 	.word	0x20002650
    795c:	00000b94 	.word	0x00000b94
    7960:	00000b92 	.word	0x00000b92
    7964:	42001c00 	.word	0x42001c00
    7968:	20002c1b 	.word	0x20002c1b
    796c:	0000c4e5 	.word	0x0000c4e5

00007970 <SERCOM5_Handler>:

void SERCOM5_Handler(void)
//-----------------------------------------------------------------------------
{
    7970:	b580      	push	{r7, lr}
    7972:	af00      	add	r7, sp, #0
	
	if(SERCOM5->SPI.INTFLAG.bit.RXC)
    7974:	4b37      	ldr	r3, [pc, #220]	; (7a54 <SERCOM5_Handler+0xe4>)
    7976:	7e1b      	ldrb	r3, [r3, #24]
    7978:	075b      	lsls	r3, r3, #29
    797a:	0fdb      	lsrs	r3, r3, #31
    797c:	b2db      	uxtb	r3, r3
    797e:	2b00      	cmp	r3, #0
    7980:	d029      	beq.n	79d6 <SERCOM5_Handler+0x66>
	{
		spi.rbuf[spi.rn] = SERCOM5->SPI.DATA.reg;
    7982:	4a35      	ldr	r2, [pc, #212]	; (7a58 <SERCOM5_Handler+0xe8>)
    7984:	23b9      	movs	r3, #185	; 0xb9
    7986:	011b      	lsls	r3, r3, #4
    7988:	5ad3      	ldrh	r3, [r2, r3]
    798a:	0018      	movs	r0, r3
    798c:	4b31      	ldr	r3, [pc, #196]	; (7a54 <SERCOM5_Handler+0xe4>)
    798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7990:	b2d9      	uxtb	r1, r3
    7992:	4a31      	ldr	r2, [pc, #196]	; (7a58 <SERCOM5_Handler+0xe8>)
    7994:	23b9      	movs	r3, #185	; 0xb9
    7996:	00db      	lsls	r3, r3, #3
    7998:	1812      	adds	r2, r2, r0
    799a:	18d3      	adds	r3, r2, r3
    799c:	1c0a      	adds	r2, r1, #0
    799e:	701a      	strb	r2, [r3, #0]
		spi.rn++;	
    79a0:	4a2d      	ldr	r2, [pc, #180]	; (7a58 <SERCOM5_Handler+0xe8>)
    79a2:	23b9      	movs	r3, #185	; 0xb9
    79a4:	011b      	lsls	r3, r3, #4
    79a6:	5ad3      	ldrh	r3, [r2, r3]
    79a8:	3301      	adds	r3, #1
    79aa:	b299      	uxth	r1, r3
    79ac:	4a2a      	ldr	r2, [pc, #168]	; (7a58 <SERCOM5_Handler+0xe8>)
    79ae:	23b9      	movs	r3, #185	; 0xb9
    79b0:	011b      	lsls	r3, r3, #4
    79b2:	52d1      	strh	r1, [r2, r3]
		spi.RXC_sum++;
    79b4:	4b28      	ldr	r3, [pc, #160]	; (7a58 <SERCOM5_Handler+0xe8>)
    79b6:	4a29      	ldr	r2, [pc, #164]	; (7a5c <SERCOM5_Handler+0xec>)
    79b8:	589b      	ldr	r3, [r3, r2]
    79ba:	1c5a      	adds	r2, r3, #1
    79bc:	4b26      	ldr	r3, [pc, #152]	; (7a58 <SERCOM5_Handler+0xe8>)
    79be:	4927      	ldr	r1, [pc, #156]	; (7a5c <SERCOM5_Handler+0xec>)
    79c0:	505a      	str	r2, [r3, r1]
		if(!spi.wx) 
    79c2:	4b25      	ldr	r3, [pc, #148]	; (7a58 <SERCOM5_Handler+0xe8>)
    79c4:	4a26      	ldr	r2, [pc, #152]	; (7a60 <SERCOM5_Handler+0xf0>)
    79c6:	5a9b      	ldrh	r3, [r3, r2]
    79c8:	2b00      	cmp	r3, #0
    79ca:	d104      	bne.n	79d6 <SERCOM5_Handler+0x66>
		{
			SERCOM5->SPI.INTENCLR.bit.RXC =0x01;
    79cc:	4a21      	ldr	r2, [pc, #132]	; (7a54 <SERCOM5_Handler+0xe4>)
    79ce:	7d13      	ldrb	r3, [r2, #20]
    79d0:	2104      	movs	r1, #4
    79d2:	430b      	orrs	r3, r1
    79d4:	7513      	strb	r3, [r2, #20]
		}	
	}
	if(SERCOM5->SPI.INTFLAG.bit.DRE)
    79d6:	4b1f      	ldr	r3, [pc, #124]	; (7a54 <SERCOM5_Handler+0xe4>)
    79d8:	7e1b      	ldrb	r3, [r3, #24]
    79da:	07db      	lsls	r3, r3, #31
    79dc:	0fdb      	lsrs	r3, r3, #31
    79de:	b2db      	uxtb	r3, r3
    79e0:	2b00      	cmp	r3, #0
    79e2:	d034      	beq.n	7a4e <SERCOM5_Handler+0xde>
	{
		spi.DRE_sum++;
    79e4:	4b1c      	ldr	r3, [pc, #112]	; (7a58 <SERCOM5_Handler+0xe8>)
    79e6:	4a1f      	ldr	r2, [pc, #124]	; (7a64 <SERCOM5_Handler+0xf4>)
    79e8:	589b      	ldr	r3, [r3, r2]
    79ea:	1c5a      	adds	r2, r3, #1
    79ec:	4b1a      	ldr	r3, [pc, #104]	; (7a58 <SERCOM5_Handler+0xe8>)
    79ee:	491d      	ldr	r1, [pc, #116]	; (7a64 <SERCOM5_Handler+0xf4>)
    79f0:	505a      	str	r2, [r3, r1]
		if(spi.rn!=spi.wn){return;}
    79f2:	4a19      	ldr	r2, [pc, #100]	; (7a58 <SERCOM5_Handler+0xe8>)
    79f4:	23b9      	movs	r3, #185	; 0xb9
    79f6:	011b      	lsls	r3, r3, #4
    79f8:	5ad2      	ldrh	r2, [r2, r3]
    79fa:	4b17      	ldr	r3, [pc, #92]	; (7a58 <SERCOM5_Handler+0xe8>)
    79fc:	491a      	ldr	r1, [pc, #104]	; (7a68 <SERCOM5_Handler+0xf8>)
    79fe:	5a5b      	ldrh	r3, [r3, r1]
    7a00:	429a      	cmp	r2, r3
    7a02:	d123      	bne.n	7a4c <SERCOM5_Handler+0xdc>
		if(spi.wx)
    7a04:	4b14      	ldr	r3, [pc, #80]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a06:	4a16      	ldr	r2, [pc, #88]	; (7a60 <SERCOM5_Handler+0xf0>)
    7a08:	5a9b      	ldrh	r3, [r3, r2]
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d018      	beq.n	7a40 <SERCOM5_Handler+0xd0>
		{ 
			SERCOM5->SPI.DATA.reg=spi.wbuf[spi.wn];
    7a0e:	4b11      	ldr	r3, [pc, #68]	; (7a54 <SERCOM5_Handler+0xe4>)
    7a10:	4a11      	ldr	r2, [pc, #68]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a12:	4915      	ldr	r1, [pc, #84]	; (7a68 <SERCOM5_Handler+0xf8>)
    7a14:	5a52      	ldrh	r2, [r2, r1]
    7a16:	0011      	movs	r1, r2
    7a18:	4a0f      	ldr	r2, [pc, #60]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a1a:	5c52      	ldrb	r2, [r2, r1]
    7a1c:	629a      	str	r2, [r3, #40]	; 0x28
			spi.wn++;
    7a1e:	4b0e      	ldr	r3, [pc, #56]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a20:	4a11      	ldr	r2, [pc, #68]	; (7a68 <SERCOM5_Handler+0xf8>)
    7a22:	5a9b      	ldrh	r3, [r3, r2]
    7a24:	3301      	adds	r3, #1
    7a26:	b299      	uxth	r1, r3
    7a28:	4b0b      	ldr	r3, [pc, #44]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a2a:	4a0f      	ldr	r2, [pc, #60]	; (7a68 <SERCOM5_Handler+0xf8>)
    7a2c:	5299      	strh	r1, [r3, r2]
			spi.wx--;
    7a2e:	4b0a      	ldr	r3, [pc, #40]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a30:	4a0b      	ldr	r2, [pc, #44]	; (7a60 <SERCOM5_Handler+0xf0>)
    7a32:	5a9b      	ldrh	r3, [r3, r2]
    7a34:	3b01      	subs	r3, #1
    7a36:	b299      	uxth	r1, r3
    7a38:	4b07      	ldr	r3, [pc, #28]	; (7a58 <SERCOM5_Handler+0xe8>)
    7a3a:	4a09      	ldr	r2, [pc, #36]	; (7a60 <SERCOM5_Handler+0xf0>)
    7a3c:	5299      	strh	r1, [r3, r2]
    7a3e:	e006      	b.n	7a4e <SERCOM5_Handler+0xde>
		}
		else {SERCOM5->SPI.INTENCLR.bit.DRE =0x01;}
    7a40:	4a04      	ldr	r2, [pc, #16]	; (7a54 <SERCOM5_Handler+0xe4>)
    7a42:	7d13      	ldrb	r3, [r2, #20]
    7a44:	2101      	movs	r1, #1
    7a46:	430b      	orrs	r3, r1
    7a48:	7513      	strb	r3, [r2, #20]
    7a4a:	e000      	b.n	7a4e <SERCOM5_Handler+0xde>
		if(spi.rn!=spi.wn){return;}
    7a4c:	46c0      	nop			; (mov r8, r8)
	}
}
    7a4e:	46bd      	mov	sp, r7
    7a50:	bd80      	pop	{r7, pc}
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	42001c00 	.word	0x42001c00
    7a58:	20002650 	.word	0x20002650
    7a5c:	00000b9c 	.word	0x00000b9c
    7a60:	00000b94 	.word	0x00000b94
    7a64:	00000b98 	.word	0x00000b98
    7a68:	00000b92 	.word	0x00000b92

00007a6c <sys_clock_init_USE_OSC8M>:



void sys_clock_init_USE_OSC8M(void)
//-----------------------------------------------------------------------------
{
    7a6c:	b580      	push	{r7, lr}
    7a6e:	b082      	sub	sp, #8
    7a70:	af00      	add	r7, sp, #0
	uint32_t temp = SYSCTRL->OSC8M.reg;
    7a72:	4b0c      	ldr	r3, [pc, #48]	; (7aa4 <sys_clock_init_USE_OSC8M+0x38>)
    7a74:	6a1b      	ldr	r3, [r3, #32]
    7a76:	607b      	str	r3, [r7, #4]
	temp &= ~((uint32_t)0x0000FFFF);
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	0c1b      	lsrs	r3, r3, #16
    7a7c:	041b      	lsls	r3, r3, #16
    7a7e:	607b      	str	r3, [r7, #4]
	temp |= SYSCTRL_OSC8M_PRESC(0x00) | SYSCTRL_OSC8M_ENABLE;
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	2202      	movs	r2, #2
    7a84:	4313      	orrs	r3, r2
    7a86:	607b      	str	r3, [r7, #4]
	SYSCTRL->OSC8M.reg = temp;
    7a88:	4b06      	ldr	r3, [pc, #24]	; (7aa4 <sys_clock_init_USE_OSC8M+0x38>)
    7a8a:	687a      	ldr	r2, [r7, #4]
    7a8c:	621a      	str	r2, [r3, #32]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY)){};
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	4b04      	ldr	r3, [pc, #16]	; (7aa4 <sys_clock_init_USE_OSC8M+0x38>)
    7a92:	68db      	ldr	r3, [r3, #12]
    7a94:	2208      	movs	r2, #8
    7a96:	4013      	ands	r3, r2
    7a98:	d0fa      	beq.n	7a90 <sys_clock_init_USE_OSC8M+0x24>
}
    7a9a:	46c0      	nop			; (mov r8, r8)
    7a9c:	46bd      	mov	sp, r7
    7a9e:	b002      	add	sp, #8
    7aa0:	bd80      	pop	{r7, pc}
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	40000800 	.word	0x40000800

00007aa8 <sys_clock_init_USE_DFLL48M>:


void sys_clock_init_USE_DFLL48M(void)
{
    7aa8:	b580      	push	{r7, lr}
    7aaa:	b082      	sub	sp, #8
    7aac:	af00      	add	r7, sp, #0
	uint32_t coarse, fine;

	NVMCTRL->CTRLB.bit.RWS=2; //this is needed for 48 MHz
    7aae:	4a2d      	ldr	r2, [pc, #180]	; (7b64 <sys_clock_init_USE_DFLL48M+0xbc>)
    7ab0:	6853      	ldr	r3, [r2, #4]
    7ab2:	211e      	movs	r1, #30
    7ab4:	438b      	bics	r3, r1
    7ab6:	2104      	movs	r1, #4
    7ab8:	430b      	orrs	r3, r1
    7aba:	6053      	str	r3, [r2, #4]

	coarse=NVM_READ_CAL(DFLL48M_COARSE_CAL); //read coarse calibration value from NVM Software Calibration Area Map
    7abc:	4b2a      	ldr	r3, [pc, #168]	; (7b68 <sys_clock_init_USE_DFLL48M+0xc0>)
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	0e9b      	lsrs	r3, r3, #26
    7ac2:	607b      	str	r3, [r7, #4]
	fine  =NVM_READ_CAL(DFLL48M_FINE_CAL  ); //read fine calibration value from NVM Software Calibration Area Map
    7ac4:	4b29      	ldr	r3, [pc, #164]	; (7b6c <sys_clock_init_USE_DFLL48M+0xc4>)
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	059b      	lsls	r3, r3, #22
    7aca:	0d9b      	lsrs	r3, r3, #22
    7acc:	603b      	str	r3, [r7, #0]

	SYSCTRL->DFLLCTRL.reg=0; // See Errata 9905
    7ace:	4b28      	ldr	r3, [pc, #160]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7ad0:	2200      	movs	r2, #0
    7ad2:	849a      	strh	r2, [r3, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; }
    7ad4:	46c0      	nop			; (mov r8, r8)
    7ad6:	4b26      	ldr	r3, [pc, #152]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7ad8:	68db      	ldr	r3, [r3, #12]
    7ada:	2210      	movs	r2, #16
    7adc:	4013      	ands	r3, r2
    7ade:	d0fa      	beq.n	7ad6 <sys_clock_init_USE_DFLL48M+0x2e>

	SYSCTRL->DFLLVAL.reg=SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine); //this will set DFLL48 close to 48 MHz
    7ae0:	4b23      	ldr	r3, [pc, #140]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7ae2:	687a      	ldr	r2, [r7, #4]
    7ae4:	0292      	lsls	r2, r2, #10
    7ae6:	0412      	lsls	r2, r2, #16
    7ae8:	0c11      	lsrs	r1, r2, #16
    7aea:	683a      	ldr	r2, [r7, #0]
    7aec:	0592      	lsls	r2, r2, #22
    7aee:	0d92      	lsrs	r2, r2, #22
    7af0:	430a      	orrs	r2, r1
    7af2:	629a      	str	r2, [r3, #40]	; 0x28
	
	SYSCTRL->DFLLCTRL.bit.STABLE	=1; // Stable frequency (FINE calibration register value will be fixed after a fine lock)
    7af4:	4a1e      	ldr	r2, [pc, #120]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7af6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7af8:	2108      	movs	r1, #8
    7afa:	430b      	orrs	r3, r1
    7afc:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.BPLCKC	=1; // Bypass coarse clock enable
    7afe:	4a1c      	ldr	r2, [pc, #112]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b00:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7b02:	2180      	movs	r1, #128	; 0x80
    7b04:	00c9      	lsls	r1, r1, #3
    7b06:	430b      	orrs	r3, r1
    7b08:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.MODE		=0; // Open loop mode
    7b0a:	4a19      	ldr	r2, [pc, #100]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b0c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7b0e:	2104      	movs	r1, #4
    7b10:	438b      	bics	r3, r1
    7b12:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ONDEMAND  =0; // On Demand is disabled, the oscillator will always be running when enabled.
    7b14:	4a16      	ldr	r2, [pc, #88]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b16:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7b18:	2180      	movs	r1, #128	; 0x80
    7b1a:	438b      	bics	r3, r1
    7b1c:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.ENABLE	=1; // Enable DFLL48
    7b1e:	4a14      	ldr	r2, [pc, #80]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b20:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7b22:	2102      	movs	r1, #2
    7b24:	430b      	orrs	r3, r1
    7b26:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL->DFLLCTRL.bit.CCDIS		=1; // Chill Cycle is disabled
    7b28:	4a11      	ldr	r2, [pc, #68]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b2a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    7b2c:	2180      	movs	r1, #128	; 0x80
    7b2e:	0049      	lsls	r1, r1, #1
    7b30:	430b      	orrs	r3, r1
    7b32:	8493      	strh	r3, [r2, #36]	; 0x24
	while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0) { ; } // wait till DFLL is stable and ready to be used as a clock source
    7b34:	46c0      	nop			; (mov r8, r8)
    7b36:	4b0e      	ldr	r3, [pc, #56]	; (7b70 <sys_clock_init_USE_DFLL48M+0xc8>)
    7b38:	68db      	ldr	r3, [r3, #12]
    7b3a:	2210      	movs	r2, #16
    7b3c:	4013      	ands	r3, r2
    7b3e:	d0fa      	beq.n	7b36 <sys_clock_init_USE_DFLL48M+0x8e>

	GCLK->GENDIV.reg =GCLK_GENDIV_ID (GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENDIV_DIV (MAIN_CLK_DEVIDER);//16MHz
    7b40:	4b0c      	ldr	r3, [pc, #48]	; (7b74 <sys_clock_init_USE_DFLL48M+0xcc>)
    7b42:	2280      	movs	r2, #128	; 0x80
    7b44:	0052      	lsls	r2, r2, #1
    7b46:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg=GCLK_GENCTRL_ID(GCLK_CLKCTRL_GEN_GCLK0_Val) | GCLK_GENCTRL_SRC (GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    7b48:	4b0a      	ldr	r3, [pc, #40]	; (7b74 <sys_clock_init_USE_DFLL48M+0xcc>)
    7b4a:	4a0b      	ldr	r2, [pc, #44]	; (7b78 <sys_clock_init_USE_DFLL48M+0xd0>)
    7b4c:	605a      	str	r2, [r3, #4]
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) { ; }
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	4b08      	ldr	r3, [pc, #32]	; (7b74 <sys_clock_init_USE_DFLL48M+0xcc>)
    7b52:	785b      	ldrb	r3, [r3, #1]
    7b54:	b2db      	uxtb	r3, r3
    7b56:	b25b      	sxtb	r3, r3
    7b58:	2b00      	cmp	r3, #0
    7b5a:	dbf9      	blt.n	7b50 <sys_clock_init_USE_DFLL48M+0xa8>
}
    7b5c:	46c0      	nop			; (mov r8, r8)
    7b5e:	46bd      	mov	sp, r7
    7b60:	b002      	add	sp, #8
    7b62:	bd80      	pop	{r7, pc}
    7b64:	41004000 	.word	0x41004000
    7b68:	00806024 	.word	0x00806024
    7b6c:	00806028 	.word	0x00806028
    7b70:	40000800 	.word	0x40000800
    7b74:	40000c00 	.word	0x40000c00
    7b78:	00210700 	.word	0x00210700

00007b7c <__NVIC_EnableIRQ>:
{
    7b7c:	b580      	push	{r7, lr}
    7b7e:	b082      	sub	sp, #8
    7b80:	af00      	add	r7, sp, #0
    7b82:	0002      	movs	r2, r0
    7b84:	1dfb      	adds	r3, r7, #7
    7b86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7b88:	1dfb      	adds	r3, r7, #7
    7b8a:	781b      	ldrb	r3, [r3, #0]
    7b8c:	2b7f      	cmp	r3, #127	; 0x7f
    7b8e:	d809      	bhi.n	7ba4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7b90:	4b06      	ldr	r3, [pc, #24]	; (7bac <__NVIC_EnableIRQ+0x30>)
    7b92:	1dfa      	adds	r2, r7, #7
    7b94:	7812      	ldrb	r2, [r2, #0]
    7b96:	0011      	movs	r1, r2
    7b98:	221f      	movs	r2, #31
    7b9a:	400a      	ands	r2, r1
    7b9c:	2101      	movs	r1, #1
    7b9e:	4091      	lsls	r1, r2
    7ba0:	000a      	movs	r2, r1
    7ba2:	601a      	str	r2, [r3, #0]
}
    7ba4:	46c0      	nop			; (mov r8, r8)
    7ba6:	46bd      	mov	sp, r7
    7ba8:	b002      	add	sp, #8
    7baa:	bd80      	pop	{r7, pc}
    7bac:	e000e100 	.word	0xe000e100

00007bb0 <__NVIC_DisableIRQ>:
{
    7bb0:	b580      	push	{r7, lr}
    7bb2:	b082      	sub	sp, #8
    7bb4:	af00      	add	r7, sp, #0
    7bb6:	0002      	movs	r2, r0
    7bb8:	1dfb      	adds	r3, r7, #7
    7bba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7bbc:	1dfb      	adds	r3, r7, #7
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	2b7f      	cmp	r3, #127	; 0x7f
    7bc2:	d80e      	bhi.n	7be2 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7bc4:	4909      	ldr	r1, [pc, #36]	; (7bec <__NVIC_DisableIRQ+0x3c>)
    7bc6:	1dfb      	adds	r3, r7, #7
    7bc8:	781b      	ldrb	r3, [r3, #0]
    7bca:	001a      	movs	r2, r3
    7bcc:	231f      	movs	r3, #31
    7bce:	4013      	ands	r3, r2
    7bd0:	2201      	movs	r2, #1
    7bd2:	409a      	lsls	r2, r3
    7bd4:	0013      	movs	r3, r2
    7bd6:	2280      	movs	r2, #128	; 0x80
    7bd8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    7bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7bde:	f3bf 8f6f 	isb	sy
}
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	46bd      	mov	sp, r7
    7be6:	b002      	add	sp, #8
    7be8:	bd80      	pop	{r7, pc}
    7bea:	46c0      	nop			; (mov r8, r8)
    7bec:	e000e100 	.word	0xe000e100

00007bf0 <__NVIC_SetPriority>:
{
    7bf0:	b5b0      	push	{r4, r5, r7, lr}
    7bf2:	b082      	sub	sp, #8
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	0002      	movs	r2, r0
    7bf8:	6039      	str	r1, [r7, #0]
    7bfa:	1dfb      	adds	r3, r7, #7
    7bfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    7bfe:	1dfb      	adds	r3, r7, #7
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	2b7f      	cmp	r3, #127	; 0x7f
    7c04:	d828      	bhi.n	7c58 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7c06:	4c2f      	ldr	r4, [pc, #188]	; (7cc4 <__NVIC_SetPriority+0xd4>)
    7c08:	1dfb      	adds	r3, r7, #7
    7c0a:	781b      	ldrb	r3, [r3, #0]
    7c0c:	b25b      	sxtb	r3, r3
    7c0e:	089b      	lsrs	r3, r3, #2
    7c10:	492c      	ldr	r1, [pc, #176]	; (7cc4 <__NVIC_SetPriority+0xd4>)
    7c12:	1dfa      	adds	r2, r7, #7
    7c14:	7812      	ldrb	r2, [r2, #0]
    7c16:	b252      	sxtb	r2, r2
    7c18:	0892      	lsrs	r2, r2, #2
    7c1a:	32c0      	adds	r2, #192	; 0xc0
    7c1c:	0092      	lsls	r2, r2, #2
    7c1e:	5852      	ldr	r2, [r2, r1]
    7c20:	1df9      	adds	r1, r7, #7
    7c22:	7809      	ldrb	r1, [r1, #0]
    7c24:	0008      	movs	r0, r1
    7c26:	2103      	movs	r1, #3
    7c28:	4001      	ands	r1, r0
    7c2a:	00c9      	lsls	r1, r1, #3
    7c2c:	20ff      	movs	r0, #255	; 0xff
    7c2e:	4088      	lsls	r0, r1
    7c30:	0001      	movs	r1, r0
    7c32:	43c9      	mvns	r1, r1
    7c34:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7c36:	683a      	ldr	r2, [r7, #0]
    7c38:	0192      	lsls	r2, r2, #6
    7c3a:	20ff      	movs	r0, #255	; 0xff
    7c3c:	4010      	ands	r0, r2
    7c3e:	1dfa      	adds	r2, r7, #7
    7c40:	7812      	ldrb	r2, [r2, #0]
    7c42:	0015      	movs	r5, r2
    7c44:	2203      	movs	r2, #3
    7c46:	402a      	ands	r2, r5
    7c48:	00d2      	lsls	r2, r2, #3
    7c4a:	4090      	lsls	r0, r2
    7c4c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7c4e:	430a      	orrs	r2, r1
    7c50:	33c0      	adds	r3, #192	; 0xc0
    7c52:	009b      	lsls	r3, r3, #2
    7c54:	511a      	str	r2, [r3, r4]
}
    7c56:	e031      	b.n	7cbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7c58:	4c1b      	ldr	r4, [pc, #108]	; (7cc8 <__NVIC_SetPriority+0xd8>)
    7c5a:	1dfb      	adds	r3, r7, #7
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	001a      	movs	r2, r3
    7c60:	230f      	movs	r3, #15
    7c62:	4013      	ands	r3, r2
    7c64:	3b08      	subs	r3, #8
    7c66:	0899      	lsrs	r1, r3, #2
    7c68:	4a17      	ldr	r2, [pc, #92]	; (7cc8 <__NVIC_SetPriority+0xd8>)
    7c6a:	1dfb      	adds	r3, r7, #7
    7c6c:	781b      	ldrb	r3, [r3, #0]
    7c6e:	0018      	movs	r0, r3
    7c70:	230f      	movs	r3, #15
    7c72:	4003      	ands	r3, r0
    7c74:	3b08      	subs	r3, #8
    7c76:	089b      	lsrs	r3, r3, #2
    7c78:	3306      	adds	r3, #6
    7c7a:	009b      	lsls	r3, r3, #2
    7c7c:	18d3      	adds	r3, r2, r3
    7c7e:	3304      	adds	r3, #4
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	1dfa      	adds	r2, r7, #7
    7c84:	7812      	ldrb	r2, [r2, #0]
    7c86:	0010      	movs	r0, r2
    7c88:	2203      	movs	r2, #3
    7c8a:	4002      	ands	r2, r0
    7c8c:	00d2      	lsls	r2, r2, #3
    7c8e:	20ff      	movs	r0, #255	; 0xff
    7c90:	4090      	lsls	r0, r2
    7c92:	0002      	movs	r2, r0
    7c94:	43d2      	mvns	r2, r2
    7c96:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7c98:	683b      	ldr	r3, [r7, #0]
    7c9a:	019b      	lsls	r3, r3, #6
    7c9c:	20ff      	movs	r0, #255	; 0xff
    7c9e:	4018      	ands	r0, r3
    7ca0:	1dfb      	adds	r3, r7, #7
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	001d      	movs	r5, r3
    7ca6:	2303      	movs	r3, #3
    7ca8:	402b      	ands	r3, r5
    7caa:	00db      	lsls	r3, r3, #3
    7cac:	4098      	lsls	r0, r3
    7cae:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7cb0:	431a      	orrs	r2, r3
    7cb2:	1d8b      	adds	r3, r1, #6
    7cb4:	009b      	lsls	r3, r3, #2
    7cb6:	18e3      	adds	r3, r4, r3
    7cb8:	3304      	adds	r3, #4
    7cba:	601a      	str	r2, [r3, #0]
}
    7cbc:	46c0      	nop			; (mov r8, r8)
    7cbe:	46bd      	mov	sp, r7
    7cc0:	b002      	add	sp, #8
    7cc2:	bdb0      	pop	{r4, r5, r7, pc}
    7cc4:	e000e100 	.word	0xe000e100
    7cc8:	e000ed00 	.word	0xe000ed00

00007ccc <TC3_start>:
//funx
	extern void TC3_init(void);
	extern void wait(DWORD time_100mk);
	extern void tc3_process(void);
//inline
	static inline void TC3_start(WORD cc) { TC3->COUNT16.CC[0].reg=cc-1; TC3->COUNT16.CTRLBSET.bit.CMD=0x01; }
    7ccc:	b580      	push	{r7, lr}
    7cce:	b082      	sub	sp, #8
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	0002      	movs	r2, r0
    7cd4:	1dbb      	adds	r3, r7, #6
    7cd6:	801a      	strh	r2, [r3, #0]
    7cd8:	4a08      	ldr	r2, [pc, #32]	; (7cfc <TC3_start+0x30>)
    7cda:	1dbb      	adds	r3, r7, #6
    7cdc:	881b      	ldrh	r3, [r3, #0]
    7cde:	3b01      	subs	r3, #1
    7ce0:	b29b      	uxth	r3, r3
    7ce2:	8313      	strh	r3, [r2, #24]
    7ce4:	4a05      	ldr	r2, [pc, #20]	; (7cfc <TC3_start+0x30>)
    7ce6:	7953      	ldrb	r3, [r2, #5]
    7ce8:	213f      	movs	r1, #63	; 0x3f
    7cea:	400b      	ands	r3, r1
    7cec:	1c19      	adds	r1, r3, #0
    7cee:	2340      	movs	r3, #64	; 0x40
    7cf0:	430b      	orrs	r3, r1
    7cf2:	7153      	strb	r3, [r2, #5]
    7cf4:	46c0      	nop			; (mov r8, r8)
    7cf6:	46bd      	mov	sp, r7
    7cf8:	b002      	add	sp, #8
    7cfa:	bd80      	pop	{r7, pc}
    7cfc:	42002c00 	.word	0x42002c00

00007d00 <TC3_Handler>:
volatile DWORD  time_100mk=0;
volatile DWORD  TTL=0;

void TC3_Handler(void)
//-----------------------------------------------------------------------------
{
    7d00:	b580      	push	{r7, lr}
    7d02:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg|=0xFFFF;
    7d04:	4b22      	ldr	r3, [pc, #136]	; (7d90 <TC3_Handler+0x90>)
    7d06:	7b9b      	ldrb	r3, [r3, #14]
    7d08:	4b21      	ldr	r3, [pc, #132]	; (7d90 <TC3_Handler+0x90>)
    7d0a:	22ff      	movs	r2, #255	; 0xff
    7d0c:	739a      	strb	r2, [r3, #14]
	
	tc3_cnt++;
    7d0e:	4b21      	ldr	r3, [pc, #132]	; (7d94 <TC3_Handler+0x94>)
    7d10:	681b      	ldr	r3, [r3, #0]
    7d12:	1c5a      	adds	r2, r3, #1
    7d14:	4b1f      	ldr	r3, [pc, #124]	; (7d94 <TC3_Handler+0x94>)
    7d16:	601a      	str	r2, [r3, #0]
	time_wait++;
    7d18:	4b1f      	ldr	r3, [pc, #124]	; (7d98 <TC3_Handler+0x98>)
    7d1a:	681b      	ldr	r3, [r3, #0]
    7d1c:	1c5a      	adds	r2, r3, #1
    7d1e:	4b1e      	ldr	r3, [pc, #120]	; (7d98 <TC3_Handler+0x98>)
    7d20:	601a      	str	r2, [r3, #0]
	port[0].rtime++;
    7d22:	4a1e      	ldr	r2, [pc, #120]	; (7d9c <TC3_Handler+0x9c>)
    7d24:	2385      	movs	r3, #133	; 0x85
    7d26:	009b      	lsls	r3, r3, #2
    7d28:	5ad3      	ldrh	r3, [r2, r3]
    7d2a:	b29b      	uxth	r3, r3
    7d2c:	3301      	adds	r3, #1
    7d2e:	b299      	uxth	r1, r3
    7d30:	4a1a      	ldr	r2, [pc, #104]	; (7d9c <TC3_Handler+0x9c>)
    7d32:	2385      	movs	r3, #133	; 0x85
    7d34:	009b      	lsls	r3, r3, #2
    7d36:	52d1      	strh	r1, [r2, r3]
	port[1].rtime++;
    7d38:	4b18      	ldr	r3, [pc, #96]	; (7d9c <TC3_Handler+0x9c>)
    7d3a:	4a19      	ldr	r2, [pc, #100]	; (7da0 <TC3_Handler+0xa0>)
    7d3c:	5a9b      	ldrh	r3, [r3, r2]
    7d3e:	b29b      	uxth	r3, r3
    7d40:	3301      	adds	r3, #1
    7d42:	b299      	uxth	r1, r3
    7d44:	4b15      	ldr	r3, [pc, #84]	; (7d9c <TC3_Handler+0x9c>)
    7d46:	4a16      	ldr	r2, [pc, #88]	; (7da0 <TC3_Handler+0xa0>)
    7d48:	5299      	strh	r1, [r3, r2]
	port[2].rtime++;
    7d4a:	4b14      	ldr	r3, [pc, #80]	; (7d9c <TC3_Handler+0x9c>)
    7d4c:	4a15      	ldr	r2, [pc, #84]	; (7da4 <TC3_Handler+0xa4>)
    7d4e:	5a9b      	ldrh	r3, [r3, r2]
    7d50:	b29b      	uxth	r3, r3
    7d52:	3301      	adds	r3, #1
    7d54:	b299      	uxth	r1, r3
    7d56:	4b11      	ldr	r3, [pc, #68]	; (7d9c <TC3_Handler+0x9c>)
    7d58:	4a12      	ldr	r2, [pc, #72]	; (7da4 <TC3_Handler+0xa4>)
    7d5a:	5299      	strh	r1, [r3, r2]
	port[3].rtime++;
    7d5c:	4b0f      	ldr	r3, [pc, #60]	; (7d9c <TC3_Handler+0x9c>)
    7d5e:	4a12      	ldr	r2, [pc, #72]	; (7da8 <TC3_Handler+0xa8>)
    7d60:	5a9b      	ldrh	r3, [r3, r2]
    7d62:	b29b      	uxth	r3, r3
    7d64:	3301      	adds	r3, #1
    7d66:	b299      	uxth	r1, r3
    7d68:	4b0c      	ldr	r3, [pc, #48]	; (7d9c <TC3_Handler+0x9c>)
    7d6a:	4a0f      	ldr	r2, [pc, #60]	; (7da8 <TC3_Handler+0xa8>)
    7d6c:	5299      	strh	r1, [r3, r2]
	
	
	if(spi_wait--);
    7d6e:	4b0f      	ldr	r3, [pc, #60]	; (7dac <TC3_Handler+0xac>)
    7d70:	881b      	ldrh	r3, [r3, #0]
    7d72:	b29b      	uxth	r3, r3
    7d74:	3b01      	subs	r3, #1
    7d76:	b29a      	uxth	r2, r3
    7d78:	4b0c      	ldr	r3, [pc, #48]	; (7dac <TC3_Handler+0xac>)
    7d7a:	801a      	strh	r2, [r3, #0]
	if(cmd_spi_wait--);
    7d7c:	4b0c      	ldr	r3, [pc, #48]	; (7db0 <TC3_Handler+0xb0>)
    7d7e:	881b      	ldrh	r3, [r3, #0]
    7d80:	b29b      	uxth	r3, r3
    7d82:	3b01      	subs	r3, #1
    7d84:	b29a      	uxth	r2, r3
    7d86:	4b0a      	ldr	r3, [pc, #40]	; (7db0 <TC3_Handler+0xb0>)
    7d88:	801a      	strh	r2, [r3, #0]
}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	46bd      	mov	sp, r7
    7d8e:	bd80      	pop	{r7, pc}
    7d90:	42002c00 	.word	0x42002c00
    7d94:	20000470 	.word	0x20000470
    7d98:	200031f4 	.word	0x200031f4
    7d9c:	200031f8 	.word	0x200031f8
    7da0:	00000454 	.word	0x00000454
    7da4:	00000694 	.word	0x00000694
    7da8:	000008d4 	.word	0x000008d4
    7dac:	200031f0 	.word	0x200031f0
    7db0:	200031f2 	.word	0x200031f2

00007db4 <TC3_init>:

void TC3_init(void)
//-----------------------------------------------------------------------------
{
    7db4:	b580      	push	{r7, lr}
    7db6:	af00      	add	r7, sp, #0
	GCLK->CLKCTRL.bit.ID   =0x1B; // Bits 5:0  - ID: Generic Clock Selection ID (0x1B - TCC2,TC3)
    7db8:	4a37      	ldr	r2, [pc, #220]	; (7e98 <TC3_init+0xe4>)
    7dba:	8853      	ldrh	r3, [r2, #2]
    7dbc:	213f      	movs	r1, #63	; 0x3f
    7dbe:	438b      	bics	r3, r1
    7dc0:	1c19      	adds	r1, r3, #0
    7dc2:	231b      	movs	r3, #27
    7dc4:	430b      	orrs	r3, r1
    7dc6:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN  =0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    7dc8:	4a33      	ldr	r2, [pc, #204]	; (7e98 <TC3_init+0xe4>)
    7dca:	8853      	ldrh	r3, [r2, #2]
    7dcc:	4933      	ldr	r1, [pc, #204]	; (7e9c <TC3_init+0xe8>)
    7dce:	400b      	ands	r3, r1
    7dd0:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN=0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    7dd2:	4a31      	ldr	r2, [pc, #196]	; (7e98 <TC3_init+0xe4>)
    7dd4:	8853      	ldrh	r3, [r2, #2]
    7dd6:	2180      	movs	r1, #128	; 0x80
    7dd8:	01c9      	lsls	r1, r1, #7
    7dda:	430b      	orrs	r3, r1
    7ddc:	8053      	strh	r3, [r2, #2]

	PM->APBCSEL.bit.APBCDIV=0x00;
    7dde:	4a30      	ldr	r2, [pc, #192]	; (7ea0 <TC3_init+0xec>)
    7de0:	7ad3      	ldrb	r3, [r2, #11]
    7de2:	2107      	movs	r1, #7
    7de4:	438b      	bics	r3, r1
    7de6:	72d3      	strb	r3, [r2, #11]
	PM->APBCMASK.bit.TC3_  =0x01; //
    7de8:	4a2d      	ldr	r2, [pc, #180]	; (7ea0 <TC3_init+0xec>)
    7dea:	6a13      	ldr	r3, [r2, #32]
    7dec:	2180      	movs	r1, #128	; 0x80
    7dee:	0109      	lsls	r1, r1, #4
    7df0:	430b      	orrs	r3, r1
    7df2:	6213      	str	r3, [r2, #32]

	TC3->COUNT16.CTRLA.bit.MODE     =0x0; // Bits 3:2   - MODE: (0-Counter in 16-bit mode)
    7df4:	4a2b      	ldr	r2, [pc, #172]	; (7ea4 <TC3_init+0xf0>)
    7df6:	8813      	ldrh	r3, [r2, #0]
    7df8:	210c      	movs	r1, #12
    7dfa:	438b      	bics	r3, r1
    7dfc:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.PRESCALER=TC_CTRLA_PRESCALER_DIV16_Val; // Bits 10:8  - PRESCALER: Prescaler (4: GCLK_TC/16)
    7dfe:	4a29      	ldr	r2, [pc, #164]	; (7ea4 <TC3_init+0xf0>)
    7e00:	8813      	ldrh	r3, [r2, #0]
    7e02:	4929      	ldr	r1, [pc, #164]	; (7ea8 <TC3_init+0xf4>)
    7e04:	400b      	ands	r3, r1
    7e06:	1c19      	adds	r1, r3, #0
    7e08:	2380      	movs	r3, #128	; 0x80
    7e0a:	00db      	lsls	r3, r3, #3
    7e0c:	430b      	orrs	r3, r1
    7e0e:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.PRESCSYNC=0x00; // Bits 13:12 - PRESCSYNC: Prescaler and Counter Synchronization (Reload or reset the counter on next generic clock)
    7e10:	4a24      	ldr	r2, [pc, #144]	; (7ea4 <TC3_init+0xf0>)
    7e12:	8813      	ldrh	r3, [r2, #0]
    7e14:	4925      	ldr	r1, [pc, #148]	; (7eac <TC3_init+0xf8>)
    7e16:	400b      	ands	r3, r1
    7e18:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.CTRLA.bit.WAVEGEN  =0x01; // Bits 6:5   - WAVEGEN: Waveform Generation Operation
    7e1a:	4a22      	ldr	r2, [pc, #136]	; (7ea4 <TC3_init+0xf0>)
    7e1c:	8813      	ldrh	r3, [r2, #0]
    7e1e:	2160      	movs	r1, #96	; 0x60
    7e20:	438b      	bics	r3, r1
    7e22:	1c19      	adds	r1, r3, #0
    7e24:	2320      	movs	r3, #32
    7e26:	430b      	orrs	r3, r1
    7e28:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    7e2a:	4b1e      	ldr	r3, [pc, #120]	; (7ea4 <TC3_init+0xf0>)
    7e2c:	2201      	movs	r2, #1
    7e2e:	4252      	negs	r2, r2
    7e30:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    7e32:	4b1c      	ldr	r3, [pc, #112]	; (7ea4 <TC3_init+0xf0>)
    7e34:	2201      	movs	r2, #1
    7e36:	4252      	negs	r2, r2
    7e38:	835a      	strh	r2, [r3, #26]

	//TC3->COUNT16.CTRLBSET.bit.ONESHOT=0x00; // Bit 2 - ONESHOT: One-Shot (1: The timer/counter will wrap around and stop on the next underflow/overflow condition.)
	TC3->COUNT16.CTRLBSET.bit.DIR    =0x00; // Bit 0 - DIR: Counter Direction (0: The timer/counter is counting up (incrementing))
    7e3a:	4a1a      	ldr	r2, [pc, #104]	; (7ea4 <TC3_init+0xf0>)
    7e3c:	7953      	ldrb	r3, [r2, #5]
    7e3e:	2101      	movs	r1, #1
    7e40:	438b      	bics	r3, r1
    7e42:	7153      	strb	r3, [r2, #5]
	TC3->COUNT16.CTRLA.bit.ENABLE    =0x01; // Bit 1 - ENABLE: Enable
    7e44:	4a17      	ldr	r2, [pc, #92]	; (7ea4 <TC3_init+0xf0>)
    7e46:	8813      	ldrh	r3, [r2, #0]
    7e48:	2102      	movs	r1, #2
    7e4a:	430b      	orrs	r3, r1
    7e4c:	8013      	strh	r3, [r2, #0]

	TC3->COUNT16.CC[0].reg=0xFFFF;
    7e4e:	4b15      	ldr	r3, [pc, #84]	; (7ea4 <TC3_init+0xf0>)
    7e50:	2201      	movs	r2, #1
    7e52:	4252      	negs	r2, r2
    7e54:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.CC[1].reg=0xFFFF;
    7e56:	4b13      	ldr	r3, [pc, #76]	; (7ea4 <TC3_init+0xf0>)
    7e58:	2201      	movs	r2, #1
    7e5a:	4252      	negs	r2, r2
    7e5c:	835a      	strh	r2, [r3, #26]
	
	while(TC3->COUNT16.STATUS.bit.SYNCBUSY == 0x01); // wait for TC3 to be enabled
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	4b10      	ldr	r3, [pc, #64]	; (7ea4 <TC3_init+0xf0>)
    7e62:	7bdb      	ldrb	r3, [r3, #15]
    7e64:	061b      	lsls	r3, r3, #24
    7e66:	0fdb      	lsrs	r3, r3, #31
    7e68:	b2db      	uxtb	r3, r3
    7e6a:	2b01      	cmp	r3, #1
    7e6c:	d0f8      	beq.n	7e60 <TC3_init+0xac>

	NVIC_DisableIRQ(TC3_IRQn);					// Disable the interrupt
    7e6e:	2012      	movs	r0, #18
    7e70:	f7ff fe9e 	bl	7bb0 <__NVIC_DisableIRQ>
	//TC3->COUNT16.INTENSET.bit.MC0=0x01;	// Enable match interrupts on compare channel 0
	TC3->COUNT16.INTENSET.bit.OVF=0x01;
    7e74:	4a0b      	ldr	r2, [pc, #44]	; (7ea4 <TC3_init+0xf0>)
    7e76:	7b53      	ldrb	r3, [r2, #13]
    7e78:	2101      	movs	r1, #1
    7e7a:	430b      	orrs	r3, r1
    7e7c:	7353      	strb	r3, [r2, #13]
	NVIC_SetPriority(TC3_IRQn, 0);			// Set the interrupt priority to lowest value
    7e7e:	2100      	movs	r1, #0
    7e80:	2012      	movs	r0, #18
    7e82:	f7ff feb5 	bl	7bf0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TC3_IRQn);						// Enable the interrupt
    7e86:	2012      	movs	r0, #18
    7e88:	f7ff fe78 	bl	7b7c <__NVIC_EnableIRQ>
	
	TC3_start(TC3_100mk);
    7e8c:	2032      	movs	r0, #50	; 0x32
    7e8e:	f7ff ff1d 	bl	7ccc <TC3_start>
}
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	46bd      	mov	sp, r7
    7e96:	bd80      	pop	{r7, pc}
    7e98:	40000c00 	.word	0x40000c00
    7e9c:	fffff0ff 	.word	0xfffff0ff
    7ea0:	40000400 	.word	0x40000400
    7ea4:	42002c00 	.word	0x42002c00
    7ea8:	fffff8ff 	.word	0xfffff8ff
    7eac:	ffffcfff 	.word	0xffffcfff

00007eb0 <wait>:


	void wait(DWORD time_100mk)
	{
    7eb0:	b580      	push	{r7, lr}
    7eb2:	b082      	sub	sp, #8
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
	time_wait=0;
    7eb8:	4b10      	ldr	r3, [pc, #64]	; (7efc <wait+0x4c>)
    7eba:	2200      	movs	r2, #0
    7ebc:	601a      	str	r2, [r3, #0]
	while(1){if(reset   == NULL) {wdt_reset();}if(time_wait>time_100mk){break;}}
    7ebe:	4b10      	ldr	r3, [pc, #64]	; (7f00 <wait+0x50>)
    7ec0:	881b      	ldrh	r3, [r3, #0]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d10e      	bne.n	7ee4 <wait+0x34>
    7ec6:	4b0f      	ldr	r3, [pc, #60]	; (7f04 <wait+0x54>)
    7ec8:	799b      	ldrb	r3, [r3, #6]
    7eca:	07db      	lsls	r3, r3, #31
    7ecc:	0fdb      	lsrs	r3, r3, #31
    7ece:	b2db      	uxtb	r3, r3
    7ed0:	2b01      	cmp	r3, #1
    7ed2:	d107      	bne.n	7ee4 <wait+0x34>
    7ed4:	4a0b      	ldr	r2, [pc, #44]	; (7f04 <wait+0x54>)
    7ed6:	7993      	ldrb	r3, [r2, #6]
    7ed8:	2101      	movs	r1, #1
    7eda:	430b      	orrs	r3, r1
    7edc:	7193      	strb	r3, [r2, #6]
    7ede:	4b09      	ldr	r3, [pc, #36]	; (7f04 <wait+0x54>)
    7ee0:	22a5      	movs	r2, #165	; 0xa5
    7ee2:	721a      	strb	r2, [r3, #8]
    7ee4:	4b05      	ldr	r3, [pc, #20]	; (7efc <wait+0x4c>)
    7ee6:	681a      	ldr	r2, [r3, #0]
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	429a      	cmp	r2, r3
    7eec:	d800      	bhi.n	7ef0 <wait+0x40>
    7eee:	e7e6      	b.n	7ebe <wait+0xe>
    7ef0:	46c0      	nop			; (mov r8, r8)
	}
    7ef2:	46c0      	nop			; (mov r8, r8)
    7ef4:	46bd      	mov	sp, r7
    7ef6:	b002      	add	sp, #8
    7ef8:	bd80      	pop	{r7, pc}
    7efa:	46c0      	nop			; (mov r8, r8)
    7efc:	200031f4 	.word	0x200031f4
    7f00:	20002548 	.word	0x20002548
    7f04:	40001000 	.word	0x40001000

00007f08 <tc3_process>:
	
	
	
	void tc3_process(void)
	//-----------------------------------------------------------------------------
	{
    7f08:	b5b0      	push	{r4, r5, r7, lr}
    7f0a:	af00      	add	r7, sp, #0
		if(!tc3_cnt) {return;}
    7f0c:	4b9c      	ldr	r3, [pc, #624]	; (8180 <tc3_process+0x278>)
    7f0e:	681b      	ldr	r3, [r3, #0]
    7f10:	2b00      	cmp	r3, #0
    7f12:	d100      	bne.n	7f16 <tc3_process+0xe>
    7f14:	e130      	b.n	8178 <tc3_process+0x270>
			
		if(port[0].time_port){port[0].time_port--;}
    7f16:	4a9b      	ldr	r2, [pc, #620]	; (8184 <tc3_process+0x27c>)
    7f18:	2388      	movs	r3, #136	; 0x88
    7f1a:	009b      	lsls	r3, r3, #2
    7f1c:	58d3      	ldr	r3, [r2, r3]
    7f1e:	2b00      	cmp	r3, #0
    7f20:	d008      	beq.n	7f34 <tc3_process+0x2c>
    7f22:	4a98      	ldr	r2, [pc, #608]	; (8184 <tc3_process+0x27c>)
    7f24:	2388      	movs	r3, #136	; 0x88
    7f26:	009b      	lsls	r3, r3, #2
    7f28:	58d3      	ldr	r3, [r2, r3]
    7f2a:	1e59      	subs	r1, r3, #1
    7f2c:	4a95      	ldr	r2, [pc, #596]	; (8184 <tc3_process+0x27c>)
    7f2e:	2388      	movs	r3, #136	; 0x88
    7f30:	009b      	lsls	r3, r3, #2
    7f32:	50d1      	str	r1, [r2, r3]
		if(port[1].time_port){port[1].time_port--;}
    7f34:	4a93      	ldr	r2, [pc, #588]	; (8184 <tc3_process+0x27c>)
    7f36:	238c      	movs	r3, #140	; 0x8c
    7f38:	00db      	lsls	r3, r3, #3
    7f3a:	58d3      	ldr	r3, [r2, r3]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d008      	beq.n	7f52 <tc3_process+0x4a>
    7f40:	4a90      	ldr	r2, [pc, #576]	; (8184 <tc3_process+0x27c>)
    7f42:	238c      	movs	r3, #140	; 0x8c
    7f44:	00db      	lsls	r3, r3, #3
    7f46:	58d3      	ldr	r3, [r2, r3]
    7f48:	1e59      	subs	r1, r3, #1
    7f4a:	4a8e      	ldr	r2, [pc, #568]	; (8184 <tc3_process+0x27c>)
    7f4c:	238c      	movs	r3, #140	; 0x8c
    7f4e:	00db      	lsls	r3, r3, #3
    7f50:	50d1      	str	r1, [r2, r3]
		if(port[2].time_port){port[2].time_port--;}
    7f52:	4a8c      	ldr	r2, [pc, #560]	; (8184 <tc3_process+0x27c>)
    7f54:	23d4      	movs	r3, #212	; 0xd4
    7f56:	00db      	lsls	r3, r3, #3
    7f58:	58d3      	ldr	r3, [r2, r3]
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	d008      	beq.n	7f70 <tc3_process+0x68>
    7f5e:	4a89      	ldr	r2, [pc, #548]	; (8184 <tc3_process+0x27c>)
    7f60:	23d4      	movs	r3, #212	; 0xd4
    7f62:	00db      	lsls	r3, r3, #3
    7f64:	58d3      	ldr	r3, [r2, r3]
    7f66:	1e59      	subs	r1, r3, #1
    7f68:	4a86      	ldr	r2, [pc, #536]	; (8184 <tc3_process+0x27c>)
    7f6a:	23d4      	movs	r3, #212	; 0xd4
    7f6c:	00db      	lsls	r3, r3, #3
    7f6e:	50d1      	str	r1, [r2, r3]
		if(port[3].time_port){port[3].time_port--;}
    7f70:	4a84      	ldr	r2, [pc, #528]	; (8184 <tc3_process+0x27c>)
    7f72:	238e      	movs	r3, #142	; 0x8e
    7f74:	011b      	lsls	r3, r3, #4
    7f76:	58d3      	ldr	r3, [r2, r3]
    7f78:	2b00      	cmp	r3, #0
    7f7a:	d008      	beq.n	7f8e <tc3_process+0x86>
    7f7c:	4a81      	ldr	r2, [pc, #516]	; (8184 <tc3_process+0x27c>)
    7f7e:	238e      	movs	r3, #142	; 0x8e
    7f80:	011b      	lsls	r3, r3, #4
    7f82:	58d3      	ldr	r3, [r2, r3]
    7f84:	1e59      	subs	r1, r3, #1
    7f86:	4a7f      	ldr	r2, [pc, #508]	; (8184 <tc3_process+0x27c>)
    7f88:	238e      	movs	r3, #142	; 0x8e
    7f8a:	011b      	lsls	r3, r3, #4
    7f8c:	50d1      	str	r1, [r2, r3]
			
		
				
		if(eth_sock[0].time_wait_SEND_OK){eth_sock[0].time_wait_SEND_OK--;}
    7f8e:	4b7e      	ldr	r3, [pc, #504]	; (8188 <tc3_process+0x280>)
    7f90:	4a7e      	ldr	r2, [pc, #504]	; (818c <tc3_process+0x284>)
    7f92:	5c9a      	ldrb	r2, [r3, r2]
    7f94:	497e      	ldr	r1, [pc, #504]	; (8190 <tc3_process+0x288>)
    7f96:	5c5b      	ldrb	r3, [r3, r1]
    7f98:	021b      	lsls	r3, r3, #8
    7f9a:	4313      	orrs	r3, r2
    7f9c:	b29b      	uxth	r3, r3
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d01f      	beq.n	7fe2 <tc3_process+0xda>
    7fa2:	4b79      	ldr	r3, [pc, #484]	; (8188 <tc3_process+0x280>)
    7fa4:	4a79      	ldr	r2, [pc, #484]	; (818c <tc3_process+0x284>)
    7fa6:	5c9a      	ldrb	r2, [r3, r2]
    7fa8:	4979      	ldr	r1, [pc, #484]	; (8190 <tc3_process+0x288>)
    7faa:	5c5b      	ldrb	r3, [r3, r1]
    7fac:	021b      	lsls	r3, r3, #8
    7fae:	4313      	orrs	r3, r2
    7fb0:	b29b      	uxth	r3, r3
    7fb2:	3b01      	subs	r3, #1
    7fb4:	b299      	uxth	r1, r3
    7fb6:	4b74      	ldr	r3, [pc, #464]	; (8188 <tc3_process+0x280>)
    7fb8:	4a74      	ldr	r2, [pc, #464]	; (818c <tc3_process+0x284>)
    7fba:	20ff      	movs	r0, #255	; 0xff
    7fbc:	4008      	ands	r0, r1
    7fbe:	0005      	movs	r5, r0
    7fc0:	5c98      	ldrb	r0, [r3, r2]
    7fc2:	2400      	movs	r4, #0
    7fc4:	4020      	ands	r0, r4
    7fc6:	1c04      	adds	r4, r0, #0
    7fc8:	1c28      	adds	r0, r5, #0
    7fca:	4320      	orrs	r0, r4
    7fcc:	5498      	strb	r0, [r3, r2]
    7fce:	0a09      	lsrs	r1, r1, #8
    7fd0:	b288      	uxth	r0, r1
    7fd2:	189b      	adds	r3, r3, r2
    7fd4:	785a      	ldrb	r2, [r3, #1]
    7fd6:	2100      	movs	r1, #0
    7fd8:	400a      	ands	r2, r1
    7fda:	1c11      	adds	r1, r2, #0
    7fdc:	1c02      	adds	r2, r0, #0
    7fde:	430a      	orrs	r2, r1
    7fe0:	705a      	strb	r2, [r3, #1]
		if(eth_sock[1].time_wait_SEND_OK){eth_sock[1].time_wait_SEND_OK--;}
    7fe2:	4b69      	ldr	r3, [pc, #420]	; (8188 <tc3_process+0x280>)
    7fe4:	4a6b      	ldr	r2, [pc, #428]	; (8194 <tc3_process+0x28c>)
    7fe6:	5c9a      	ldrb	r2, [r3, r2]
    7fe8:	496b      	ldr	r1, [pc, #428]	; (8198 <tc3_process+0x290>)
    7fea:	5c5b      	ldrb	r3, [r3, r1]
    7fec:	021b      	lsls	r3, r3, #8
    7fee:	4313      	orrs	r3, r2
    7ff0:	b29b      	uxth	r3, r3
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d01f      	beq.n	8036 <tc3_process+0x12e>
    7ff6:	4b64      	ldr	r3, [pc, #400]	; (8188 <tc3_process+0x280>)
    7ff8:	4a66      	ldr	r2, [pc, #408]	; (8194 <tc3_process+0x28c>)
    7ffa:	5c9a      	ldrb	r2, [r3, r2]
    7ffc:	4966      	ldr	r1, [pc, #408]	; (8198 <tc3_process+0x290>)
    7ffe:	5c5b      	ldrb	r3, [r3, r1]
    8000:	021b      	lsls	r3, r3, #8
    8002:	4313      	orrs	r3, r2
    8004:	b29b      	uxth	r3, r3
    8006:	3b01      	subs	r3, #1
    8008:	b299      	uxth	r1, r3
    800a:	4b5f      	ldr	r3, [pc, #380]	; (8188 <tc3_process+0x280>)
    800c:	4a61      	ldr	r2, [pc, #388]	; (8194 <tc3_process+0x28c>)
    800e:	20ff      	movs	r0, #255	; 0xff
    8010:	4008      	ands	r0, r1
    8012:	0005      	movs	r5, r0
    8014:	5c98      	ldrb	r0, [r3, r2]
    8016:	2400      	movs	r4, #0
    8018:	4020      	ands	r0, r4
    801a:	1c04      	adds	r4, r0, #0
    801c:	1c28      	adds	r0, r5, #0
    801e:	4320      	orrs	r0, r4
    8020:	5498      	strb	r0, [r3, r2]
    8022:	0a09      	lsrs	r1, r1, #8
    8024:	b288      	uxth	r0, r1
    8026:	189b      	adds	r3, r3, r2
    8028:	785a      	ldrb	r2, [r3, #1]
    802a:	2100      	movs	r1, #0
    802c:	400a      	ands	r2, r1
    802e:	1c11      	adds	r1, r2, #0
    8030:	1c02      	adds	r2, r0, #0
    8032:	430a      	orrs	r2, r1
    8034:	705a      	strb	r2, [r3, #1]
		if(eth_sock[2].time_wait_SEND_OK){eth_sock[2].time_wait_SEND_OK--;}
    8036:	4b54      	ldr	r3, [pc, #336]	; (8188 <tc3_process+0x280>)
    8038:	4a58      	ldr	r2, [pc, #352]	; (819c <tc3_process+0x294>)
    803a:	5c9a      	ldrb	r2, [r3, r2]
    803c:	4958      	ldr	r1, [pc, #352]	; (81a0 <tc3_process+0x298>)
    803e:	5c5b      	ldrb	r3, [r3, r1]
    8040:	021b      	lsls	r3, r3, #8
    8042:	4313      	orrs	r3, r2
    8044:	b29b      	uxth	r3, r3
    8046:	2b00      	cmp	r3, #0
    8048:	d01f      	beq.n	808a <tc3_process+0x182>
    804a:	4b4f      	ldr	r3, [pc, #316]	; (8188 <tc3_process+0x280>)
    804c:	4a53      	ldr	r2, [pc, #332]	; (819c <tc3_process+0x294>)
    804e:	5c9a      	ldrb	r2, [r3, r2]
    8050:	4953      	ldr	r1, [pc, #332]	; (81a0 <tc3_process+0x298>)
    8052:	5c5b      	ldrb	r3, [r3, r1]
    8054:	021b      	lsls	r3, r3, #8
    8056:	4313      	orrs	r3, r2
    8058:	b29b      	uxth	r3, r3
    805a:	3b01      	subs	r3, #1
    805c:	b299      	uxth	r1, r3
    805e:	4b4a      	ldr	r3, [pc, #296]	; (8188 <tc3_process+0x280>)
    8060:	4a4e      	ldr	r2, [pc, #312]	; (819c <tc3_process+0x294>)
    8062:	20ff      	movs	r0, #255	; 0xff
    8064:	4008      	ands	r0, r1
    8066:	0005      	movs	r5, r0
    8068:	5c98      	ldrb	r0, [r3, r2]
    806a:	2400      	movs	r4, #0
    806c:	4020      	ands	r0, r4
    806e:	1c04      	adds	r4, r0, #0
    8070:	1c28      	adds	r0, r5, #0
    8072:	4320      	orrs	r0, r4
    8074:	5498      	strb	r0, [r3, r2]
    8076:	0a09      	lsrs	r1, r1, #8
    8078:	b288      	uxth	r0, r1
    807a:	189b      	adds	r3, r3, r2
    807c:	785a      	ldrb	r2, [r3, #1]
    807e:	2100      	movs	r1, #0
    8080:	400a      	ands	r2, r1
    8082:	1c11      	adds	r1, r2, #0
    8084:	1c02      	adds	r2, r0, #0
    8086:	430a      	orrs	r2, r1
    8088:	705a      	strb	r2, [r3, #1]
		if(eth_sock[3].time_wait_SEND_OK){eth_sock[3].time_wait_SEND_OK--;}
    808a:	4b3f      	ldr	r3, [pc, #252]	; (8188 <tc3_process+0x280>)
    808c:	4a45      	ldr	r2, [pc, #276]	; (81a4 <tc3_process+0x29c>)
    808e:	5c9a      	ldrb	r2, [r3, r2]
    8090:	4945      	ldr	r1, [pc, #276]	; (81a8 <tc3_process+0x2a0>)
    8092:	5c5b      	ldrb	r3, [r3, r1]
    8094:	021b      	lsls	r3, r3, #8
    8096:	4313      	orrs	r3, r2
    8098:	b29b      	uxth	r3, r3
    809a:	2b00      	cmp	r3, #0
    809c:	d01f      	beq.n	80de <tc3_process+0x1d6>
    809e:	4b3a      	ldr	r3, [pc, #232]	; (8188 <tc3_process+0x280>)
    80a0:	4a40      	ldr	r2, [pc, #256]	; (81a4 <tc3_process+0x29c>)
    80a2:	5c9a      	ldrb	r2, [r3, r2]
    80a4:	4940      	ldr	r1, [pc, #256]	; (81a8 <tc3_process+0x2a0>)
    80a6:	5c5b      	ldrb	r3, [r3, r1]
    80a8:	021b      	lsls	r3, r3, #8
    80aa:	4313      	orrs	r3, r2
    80ac:	b29b      	uxth	r3, r3
    80ae:	3b01      	subs	r3, #1
    80b0:	b299      	uxth	r1, r3
    80b2:	4b35      	ldr	r3, [pc, #212]	; (8188 <tc3_process+0x280>)
    80b4:	4a3b      	ldr	r2, [pc, #236]	; (81a4 <tc3_process+0x29c>)
    80b6:	20ff      	movs	r0, #255	; 0xff
    80b8:	4008      	ands	r0, r1
    80ba:	0005      	movs	r5, r0
    80bc:	5c98      	ldrb	r0, [r3, r2]
    80be:	2400      	movs	r4, #0
    80c0:	4020      	ands	r0, r4
    80c2:	1c04      	adds	r4, r0, #0
    80c4:	1c28      	adds	r0, r5, #0
    80c6:	4320      	orrs	r0, r4
    80c8:	5498      	strb	r0, [r3, r2]
    80ca:	0a09      	lsrs	r1, r1, #8
    80cc:	b288      	uxth	r0, r1
    80ce:	189b      	adds	r3, r3, r2
    80d0:	785a      	ldrb	r2, [r3, #1]
    80d2:	2100      	movs	r1, #0
    80d4:	400a      	ands	r2, r1
    80d6:	1c11      	adds	r1, r2, #0
    80d8:	1c02      	adds	r2, r0, #0
    80da:	430a      	orrs	r2, r1
    80dc:	705a      	strb	r2, [r3, #1]
		if(eth_sock[4].time_wait_SEND_OK){eth_sock[4].time_wait_SEND_OK--;}	
    80de:	4b2a      	ldr	r3, [pc, #168]	; (8188 <tc3_process+0x280>)
    80e0:	4a32      	ldr	r2, [pc, #200]	; (81ac <tc3_process+0x2a4>)
    80e2:	5c9a      	ldrb	r2, [r3, r2]
    80e4:	4932      	ldr	r1, [pc, #200]	; (81b0 <tc3_process+0x2a8>)
    80e6:	5c5b      	ldrb	r3, [r3, r1]
    80e8:	021b      	lsls	r3, r3, #8
    80ea:	4313      	orrs	r3, r2
    80ec:	b29b      	uxth	r3, r3
    80ee:	2b00      	cmp	r3, #0
    80f0:	d01f      	beq.n	8132 <tc3_process+0x22a>
    80f2:	4b25      	ldr	r3, [pc, #148]	; (8188 <tc3_process+0x280>)
    80f4:	4a2d      	ldr	r2, [pc, #180]	; (81ac <tc3_process+0x2a4>)
    80f6:	5c9a      	ldrb	r2, [r3, r2]
    80f8:	492d      	ldr	r1, [pc, #180]	; (81b0 <tc3_process+0x2a8>)
    80fa:	5c5b      	ldrb	r3, [r3, r1]
    80fc:	021b      	lsls	r3, r3, #8
    80fe:	4313      	orrs	r3, r2
    8100:	b29b      	uxth	r3, r3
    8102:	3b01      	subs	r3, #1
    8104:	b299      	uxth	r1, r3
    8106:	4b20      	ldr	r3, [pc, #128]	; (8188 <tc3_process+0x280>)
    8108:	4a28      	ldr	r2, [pc, #160]	; (81ac <tc3_process+0x2a4>)
    810a:	20ff      	movs	r0, #255	; 0xff
    810c:	4008      	ands	r0, r1
    810e:	0005      	movs	r5, r0
    8110:	5c98      	ldrb	r0, [r3, r2]
    8112:	2400      	movs	r4, #0
    8114:	4020      	ands	r0, r4
    8116:	1c04      	adds	r4, r0, #0
    8118:	1c28      	adds	r0, r5, #0
    811a:	4320      	orrs	r0, r4
    811c:	5498      	strb	r0, [r3, r2]
    811e:	0a09      	lsrs	r1, r1, #8
    8120:	b288      	uxth	r0, r1
    8122:	189b      	adds	r3, r3, r2
    8124:	785a      	ldrb	r2, [r3, #1]
    8126:	2100      	movs	r1, #0
    8128:	400a      	ands	r2, r1
    812a:	1c11      	adds	r1, r2, #0
    812c:	1c02      	adds	r2, r0, #0
    812e:	430a      	orrs	r2, r1
    8130:	705a      	strb	r2, [r3, #1]
		
		time_100mk=time_100mk+tc3_cnt;	
    8132:	4b20      	ldr	r3, [pc, #128]	; (81b4 <tc3_process+0x2ac>)
    8134:	681a      	ldr	r2, [r3, #0]
    8136:	4b12      	ldr	r3, [pc, #72]	; (8180 <tc3_process+0x278>)
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	18d2      	adds	r2, r2, r3
    813c:	4b1d      	ldr	r3, [pc, #116]	; (81b4 <tc3_process+0x2ac>)
    813e:	601a      	str	r2, [r3, #0]
		if(time_100mk>=10000){time_100mk=0;TTL++; if(ger_wait){ger_wait--;} check_gerkon();}
    8140:	4b1c      	ldr	r3, [pc, #112]	; (81b4 <tc3_process+0x2ac>)
    8142:	681b      	ldr	r3, [r3, #0]
    8144:	4a1c      	ldr	r2, [pc, #112]	; (81b8 <tc3_process+0x2b0>)
    8146:	4293      	cmp	r3, r2
    8148:	d912      	bls.n	8170 <tc3_process+0x268>
    814a:	4b1a      	ldr	r3, [pc, #104]	; (81b4 <tc3_process+0x2ac>)
    814c:	2200      	movs	r2, #0
    814e:	601a      	str	r2, [r3, #0]
    8150:	4b1a      	ldr	r3, [pc, #104]	; (81bc <tc3_process+0x2b4>)
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	1c5a      	adds	r2, r3, #1
    8156:	4b19      	ldr	r3, [pc, #100]	; (81bc <tc3_process+0x2b4>)
    8158:	601a      	str	r2, [r3, #0]
    815a:	4b19      	ldr	r3, [pc, #100]	; (81c0 <tc3_process+0x2b8>)
    815c:	681b      	ldr	r3, [r3, #0]
    815e:	2b00      	cmp	r3, #0
    8160:	d004      	beq.n	816c <tc3_process+0x264>
    8162:	4b17      	ldr	r3, [pc, #92]	; (81c0 <tc3_process+0x2b8>)
    8164:	681b      	ldr	r3, [r3, #0]
    8166:	1e5a      	subs	r2, r3, #1
    8168:	4b15      	ldr	r3, [pc, #84]	; (81c0 <tc3_process+0x2b8>)
    816a:	601a      	str	r2, [r3, #0]
    816c:	4b15      	ldr	r3, [pc, #84]	; (81c4 <tc3_process+0x2bc>)
    816e:	4798      	blx	r3
		
		tc3_cnt=0;		
    8170:	4b03      	ldr	r3, [pc, #12]	; (8180 <tc3_process+0x278>)
    8172:	2200      	movs	r2, #0
    8174:	601a      	str	r2, [r3, #0]
    8176:	e000      	b.n	817a <tc3_process+0x272>
		if(!tc3_cnt) {return;}
    8178:	46c0      	nop			; (mov r8, r8)
		
	}
    817a:	46bd      	mov	sp, r7
    817c:	bdb0      	pop	{r4, r5, r7, pc}
    817e:	46c0      	nop			; (mov r8, r8)
    8180:	20000470 	.word	0x20000470
    8184:	200031f8 	.word	0x200031f8
    8188:	200005cc 	.word	0x200005cc
    818c:	000005e3 	.word	0x000005e3
    8190:	000005e4 	.word	0x000005e4
    8194:	00000bc8 	.word	0x00000bc8
    8198:	00000bc9 	.word	0x00000bc9
    819c:	000011ad 	.word	0x000011ad
    81a0:	000011ae 	.word	0x000011ae
    81a4:	00001792 	.word	0x00001792
    81a8:	00001793 	.word	0x00001793
    81ac:	00001d77 	.word	0x00001d77
    81b0:	00001d78 	.word	0x00001d78
    81b4:	20000478 	.word	0x20000478
    81b8:	0000270f 	.word	0x0000270f
    81bc:	2000047c 	.word	0x2000047c
    81c0:	20000474 	.word	0x20000474
    81c4:	00006c09 	.word	0x00006c09

000081c8 <__NVIC_EnableIRQ>:
{
    81c8:	b580      	push	{r7, lr}
    81ca:	b082      	sub	sp, #8
    81cc:	af00      	add	r7, sp, #0
    81ce:	0002      	movs	r2, r0
    81d0:	1dfb      	adds	r3, r7, #7
    81d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    81d4:	1dfb      	adds	r3, r7, #7
    81d6:	781b      	ldrb	r3, [r3, #0]
    81d8:	2b7f      	cmp	r3, #127	; 0x7f
    81da:	d809      	bhi.n	81f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    81dc:	4b06      	ldr	r3, [pc, #24]	; (81f8 <__NVIC_EnableIRQ+0x30>)
    81de:	1dfa      	adds	r2, r7, #7
    81e0:	7812      	ldrb	r2, [r2, #0]
    81e2:	0011      	movs	r1, r2
    81e4:	221f      	movs	r2, #31
    81e6:	400a      	ands	r2, r1
    81e8:	2101      	movs	r1, #1
    81ea:	4091      	lsls	r1, r2
    81ec:	000a      	movs	r2, r1
    81ee:	601a      	str	r2, [r3, #0]
}
    81f0:	46c0      	nop			; (mov r8, r8)
    81f2:	46bd      	mov	sp, r7
    81f4:	b002      	add	sp, #8
    81f6:	bd80      	pop	{r7, pc}
    81f8:	e000e100 	.word	0xe000e100

000081fc <__NVIC_DisableIRQ>:
{
    81fc:	b580      	push	{r7, lr}
    81fe:	b082      	sub	sp, #8
    8200:	af00      	add	r7, sp, #0
    8202:	0002      	movs	r2, r0
    8204:	1dfb      	adds	r3, r7, #7
    8206:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8208:	1dfb      	adds	r3, r7, #7
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	2b7f      	cmp	r3, #127	; 0x7f
    820e:	d80e      	bhi.n	822e <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8210:	4909      	ldr	r1, [pc, #36]	; (8238 <__NVIC_DisableIRQ+0x3c>)
    8212:	1dfb      	adds	r3, r7, #7
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	001a      	movs	r2, r3
    8218:	231f      	movs	r3, #31
    821a:	4013      	ands	r3, r2
    821c:	2201      	movs	r2, #1
    821e:	409a      	lsls	r2, r3
    8220:	0013      	movs	r3, r2
    8222:	2280      	movs	r2, #128	; 0x80
    8224:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    8226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    822a:	f3bf 8f6f 	isb	sy
}
    822e:	46c0      	nop			; (mov r8, r8)
    8230:	46bd      	mov	sp, r7
    8232:	b002      	add	sp, #8
    8234:	bd80      	pop	{r7, pc}
    8236:	46c0      	nop			; (mov r8, r8)
    8238:	e000e100 	.word	0xe000e100

0000823c <__NVIC_SetPriority>:
{
    823c:	b5b0      	push	{r4, r5, r7, lr}
    823e:	b082      	sub	sp, #8
    8240:	af00      	add	r7, sp, #0
    8242:	0002      	movs	r2, r0
    8244:	6039      	str	r1, [r7, #0]
    8246:	1dfb      	adds	r3, r7, #7
    8248:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    824a:	1dfb      	adds	r3, r7, #7
    824c:	781b      	ldrb	r3, [r3, #0]
    824e:	2b7f      	cmp	r3, #127	; 0x7f
    8250:	d828      	bhi.n	82a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8252:	4c2f      	ldr	r4, [pc, #188]	; (8310 <__NVIC_SetPriority+0xd4>)
    8254:	1dfb      	adds	r3, r7, #7
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	b25b      	sxtb	r3, r3
    825a:	089b      	lsrs	r3, r3, #2
    825c:	492c      	ldr	r1, [pc, #176]	; (8310 <__NVIC_SetPriority+0xd4>)
    825e:	1dfa      	adds	r2, r7, #7
    8260:	7812      	ldrb	r2, [r2, #0]
    8262:	b252      	sxtb	r2, r2
    8264:	0892      	lsrs	r2, r2, #2
    8266:	32c0      	adds	r2, #192	; 0xc0
    8268:	0092      	lsls	r2, r2, #2
    826a:	5852      	ldr	r2, [r2, r1]
    826c:	1df9      	adds	r1, r7, #7
    826e:	7809      	ldrb	r1, [r1, #0]
    8270:	0008      	movs	r0, r1
    8272:	2103      	movs	r1, #3
    8274:	4001      	ands	r1, r0
    8276:	00c9      	lsls	r1, r1, #3
    8278:	20ff      	movs	r0, #255	; 0xff
    827a:	4088      	lsls	r0, r1
    827c:	0001      	movs	r1, r0
    827e:	43c9      	mvns	r1, r1
    8280:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    8282:	683a      	ldr	r2, [r7, #0]
    8284:	0192      	lsls	r2, r2, #6
    8286:	20ff      	movs	r0, #255	; 0xff
    8288:	4010      	ands	r0, r2
    828a:	1dfa      	adds	r2, r7, #7
    828c:	7812      	ldrb	r2, [r2, #0]
    828e:	0015      	movs	r5, r2
    8290:	2203      	movs	r2, #3
    8292:	402a      	ands	r2, r5
    8294:	00d2      	lsls	r2, r2, #3
    8296:	4090      	lsls	r0, r2
    8298:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    829a:	430a      	orrs	r2, r1
    829c:	33c0      	adds	r3, #192	; 0xc0
    829e:	009b      	lsls	r3, r3, #2
    82a0:	511a      	str	r2, [r3, r4]
}
    82a2:	e031      	b.n	8308 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82a4:	4c1b      	ldr	r4, [pc, #108]	; (8314 <__NVIC_SetPriority+0xd8>)
    82a6:	1dfb      	adds	r3, r7, #7
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	001a      	movs	r2, r3
    82ac:	230f      	movs	r3, #15
    82ae:	4013      	ands	r3, r2
    82b0:	3b08      	subs	r3, #8
    82b2:	0899      	lsrs	r1, r3, #2
    82b4:	4a17      	ldr	r2, [pc, #92]	; (8314 <__NVIC_SetPriority+0xd8>)
    82b6:	1dfb      	adds	r3, r7, #7
    82b8:	781b      	ldrb	r3, [r3, #0]
    82ba:	0018      	movs	r0, r3
    82bc:	230f      	movs	r3, #15
    82be:	4003      	ands	r3, r0
    82c0:	3b08      	subs	r3, #8
    82c2:	089b      	lsrs	r3, r3, #2
    82c4:	3306      	adds	r3, #6
    82c6:	009b      	lsls	r3, r3, #2
    82c8:	18d3      	adds	r3, r2, r3
    82ca:	3304      	adds	r3, #4
    82cc:	681b      	ldr	r3, [r3, #0]
    82ce:	1dfa      	adds	r2, r7, #7
    82d0:	7812      	ldrb	r2, [r2, #0]
    82d2:	0010      	movs	r0, r2
    82d4:	2203      	movs	r2, #3
    82d6:	4002      	ands	r2, r0
    82d8:	00d2      	lsls	r2, r2, #3
    82da:	20ff      	movs	r0, #255	; 0xff
    82dc:	4090      	lsls	r0, r2
    82de:	0002      	movs	r2, r0
    82e0:	43d2      	mvns	r2, r2
    82e2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    82e4:	683b      	ldr	r3, [r7, #0]
    82e6:	019b      	lsls	r3, r3, #6
    82e8:	20ff      	movs	r0, #255	; 0xff
    82ea:	4018      	ands	r0, r3
    82ec:	1dfb      	adds	r3, r7, #7
    82ee:	781b      	ldrb	r3, [r3, #0]
    82f0:	001d      	movs	r5, r3
    82f2:	2303      	movs	r3, #3
    82f4:	402b      	ands	r3, r5
    82f6:	00db      	lsls	r3, r3, #3
    82f8:	4098      	lsls	r0, r3
    82fa:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82fc:	431a      	orrs	r2, r3
    82fe:	1d8b      	adds	r3, r1, #6
    8300:	009b      	lsls	r3, r3, #2
    8302:	18e3      	adds	r3, r4, r3
    8304:	3304      	adds	r3, #4
    8306:	601a      	str	r2, [r3, #0]
}
    8308:	46c0      	nop			; (mov r8, r8)
    830a:	46bd      	mov	sp, r7
    830c:	b002      	add	sp, #8
    830e:	bdb0      	pop	{r4, r5, r7, pc}
    8310:	e000e100 	.word	0xe000e100
    8314:	e000ed00 	.word	0xe000ed00

00008318 <usart_init>:
#include "def.h"

volatile USART port[4];

void usart_init(void)	{for(BYTE i= 0; i < 4; i++) {init(i);}}
    8318:	b580      	push	{r7, lr}
    831a:	b082      	sub	sp, #8
    831c:	af00      	add	r7, sp, #0
    831e:	1dfb      	adds	r3, r7, #7
    8320:	2200      	movs	r2, #0
    8322:	701a      	strb	r2, [r3, #0]
    8324:	e009      	b.n	833a <usart_init+0x22>
    8326:	1dfb      	adds	r3, r7, #7
    8328:	781b      	ldrb	r3, [r3, #0]
    832a:	0018      	movs	r0, r3
    832c:	f000 f80d 	bl	834a <init>
    8330:	1dfb      	adds	r3, r7, #7
    8332:	781a      	ldrb	r2, [r3, #0]
    8334:	1dfb      	adds	r3, r7, #7
    8336:	3201      	adds	r2, #1
    8338:	701a      	strb	r2, [r3, #0]
    833a:	1dfb      	adds	r3, r7, #7
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	2b03      	cmp	r3, #3
    8340:	d9f1      	bls.n	8326 <usart_init+0xe>
    8342:	46c0      	nop			; (mov r8, r8)
    8344:	46bd      	mov	sp, r7
    8346:	b002      	add	sp, #8
    8348:	bd80      	pop	{r7, pc}

0000834a <init>:
	
void init(BYTE n_port)
{
    834a:	b5b0      	push	{r4, r5, r7, lr}
    834c:	b088      	sub	sp, #32
    834e:	af00      	add	r7, sp, #0
    8350:	0002      	movs	r2, r0
    8352:	1dfb      	adds	r3, r7, #7
    8354:	701a      	strb	r2, [r3, #0]
	double tout = 0;
    8356:	2300      	movs	r3, #0
    8358:	2400      	movs	r4, #0
    835a:	613b      	str	r3, [r7, #16]
    835c:	617c      	str	r4, [r7, #20]
	double bsize = 0;
    835e:	2300      	movs	r3, #0
    8360:	2400      	movs	r4, #0
    8362:	60bb      	str	r3, [r7, #8]
    8364:	60fc      	str	r4, [r7, #12]
	DWORD val = 0;
    8366:	2300      	movs	r3, #0
    8368:	61fb      	str	r3, [r7, #28]
	bsize = 9;
    836a:	2300      	movs	r3, #0
    836c:	4c40      	ldr	r4, [pc, #256]	; (8470 <init+0x126>)
    836e:	60bb      	str	r3, [r7, #8]
    8370:	60fc      	str	r4, [r7, #12]

	switch(n_port)
    8372:	1dfb      	adds	r3, r7, #7
    8374:	781b      	ldrb	r3, [r3, #0]
    8376:	2b01      	cmp	r3, #1
    8378:	d030      	beq.n	83dc <init+0x92>
    837a:	dc03      	bgt.n	8384 <init+0x3a>
    837c:	2b00      	cmp	r3, #0
    837e:	d008      	beq.n	8392 <init+0x48>
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
			port[n_port].sercom = SERCOM1;
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
			port[n_port].irqn_sercom = SERCOM1_IRQn;
		break;
		default: /*error*/ return;
    8380:	f000 fbe9 	bl	8b56 <init+0x80c>
	switch(n_port)
    8384:	2b02      	cmp	r3, #2
    8386:	d04e      	beq.n	8426 <init+0xdc>
    8388:	2b03      	cmp	r3, #3
    838a:	d100      	bne.n	838e <init+0x44>
    838c:	e07c      	b.n	8488 <init+0x13e>
		default: /*error*/ return;
    838e:	f000 fbe2 	bl	8b56 <init+0x80c>
			PM->APBCMASK.bit.SERCOM3_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8392:	4a38      	ldr	r2, [pc, #224]	; (8474 <init+0x12a>)
    8394:	6a13      	ldr	r3, [r2, #32]
    8396:	2120      	movs	r1, #32
    8398:	430b      	orrs	r3, r1
    839a:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM3;
    839c:	1dfb      	adds	r3, r7, #7
    839e:	781a      	ldrb	r2, [r3, #0]
    83a0:	4935      	ldr	r1, [pc, #212]	; (8478 <init+0x12e>)
    83a2:	0013      	movs	r3, r2
    83a4:	00db      	lsls	r3, r3, #3
    83a6:	189b      	adds	r3, r3, r2
    83a8:	019b      	lsls	r3, r3, #6
    83aa:	4a34      	ldr	r2, [pc, #208]	; (847c <init+0x132>)
    83ac:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM3_CORE;
    83ae:	1dfb      	adds	r3, r7, #7
    83b0:	781a      	ldrb	r2, [r3, #0]
    83b2:	4931      	ldr	r1, [pc, #196]	; (8478 <init+0x12e>)
    83b4:	0013      	movs	r3, r2
    83b6:	00db      	lsls	r3, r3, #3
    83b8:	189b      	adds	r3, r3, r2
    83ba:	019b      	lsls	r3, r3, #6
    83bc:	18cb      	adds	r3, r1, r3
    83be:	3304      	adds	r3, #4
    83c0:	2217      	movs	r2, #23
    83c2:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM3_IRQn;
    83c4:	1dfb      	adds	r3, r7, #7
    83c6:	781a      	ldrb	r2, [r3, #0]
    83c8:	492b      	ldr	r1, [pc, #172]	; (8478 <init+0x12e>)
    83ca:	0013      	movs	r3, r2
    83cc:	00db      	lsls	r3, r3, #3
    83ce:	189b      	adds	r3, r3, r2
    83d0:	019b      	lsls	r3, r3, #6
    83d2:	18cb      	adds	r3, r1, r3
    83d4:	3308      	adds	r3, #8
    83d6:	220c      	movs	r2, #12
    83d8:	701a      	strb	r2, [r3, #0]
		break;
    83da:	e07a      	b.n	84d2 <init+0x188>
			PM->APBCMASK.bit.SERCOM2_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    83dc:	4a25      	ldr	r2, [pc, #148]	; (8474 <init+0x12a>)
    83de:	6a13      	ldr	r3, [r2, #32]
    83e0:	2110      	movs	r1, #16
    83e2:	430b      	orrs	r3, r1
    83e4:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM2;
    83e6:	1dfb      	adds	r3, r7, #7
    83e8:	781a      	ldrb	r2, [r3, #0]
    83ea:	4923      	ldr	r1, [pc, #140]	; (8478 <init+0x12e>)
    83ec:	0013      	movs	r3, r2
    83ee:	00db      	lsls	r3, r3, #3
    83f0:	189b      	adds	r3, r3, r2
    83f2:	019b      	lsls	r3, r3, #6
    83f4:	4a22      	ldr	r2, [pc, #136]	; (8480 <init+0x136>)
    83f6:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM2_CORE;
    83f8:	1dfb      	adds	r3, r7, #7
    83fa:	781a      	ldrb	r2, [r3, #0]
    83fc:	491e      	ldr	r1, [pc, #120]	; (8478 <init+0x12e>)
    83fe:	0013      	movs	r3, r2
    8400:	00db      	lsls	r3, r3, #3
    8402:	189b      	adds	r3, r3, r2
    8404:	019b      	lsls	r3, r3, #6
    8406:	18cb      	adds	r3, r1, r3
    8408:	3304      	adds	r3, #4
    840a:	2216      	movs	r2, #22
    840c:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM2_IRQn;
    840e:	1dfb      	adds	r3, r7, #7
    8410:	781a      	ldrb	r2, [r3, #0]
    8412:	4919      	ldr	r1, [pc, #100]	; (8478 <init+0x12e>)
    8414:	0013      	movs	r3, r2
    8416:	00db      	lsls	r3, r3, #3
    8418:	189b      	adds	r3, r3, r2
    841a:	019b      	lsls	r3, r3, #6
    841c:	18cb      	adds	r3, r1, r3
    841e:	3308      	adds	r3, #8
    8420:	220b      	movs	r2, #11
    8422:	701a      	strb	r2, [r3, #0]
		break;
    8424:	e055      	b.n	84d2 <init+0x188>
			PM->APBCMASK.bit.SERCOM0_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8426:	4a13      	ldr	r2, [pc, #76]	; (8474 <init+0x12a>)
    8428:	6a13      	ldr	r3, [r2, #32]
    842a:	2104      	movs	r1, #4
    842c:	430b      	orrs	r3, r1
    842e:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM0;
    8430:	1dfb      	adds	r3, r7, #7
    8432:	781a      	ldrb	r2, [r3, #0]
    8434:	4910      	ldr	r1, [pc, #64]	; (8478 <init+0x12e>)
    8436:	0013      	movs	r3, r2
    8438:	00db      	lsls	r3, r3, #3
    843a:	189b      	adds	r3, r3, r2
    843c:	019b      	lsls	r3, r3, #6
    843e:	4a11      	ldr	r2, [pc, #68]	; (8484 <init+0x13a>)
    8440:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM0_CORE;
    8442:	1dfb      	adds	r3, r7, #7
    8444:	781a      	ldrb	r2, [r3, #0]
    8446:	490c      	ldr	r1, [pc, #48]	; (8478 <init+0x12e>)
    8448:	0013      	movs	r3, r2
    844a:	00db      	lsls	r3, r3, #3
    844c:	189b      	adds	r3, r3, r2
    844e:	019b      	lsls	r3, r3, #6
    8450:	18cb      	adds	r3, r1, r3
    8452:	3304      	adds	r3, #4
    8454:	2214      	movs	r2, #20
    8456:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM0_IRQn;
    8458:	1dfb      	adds	r3, r7, #7
    845a:	781a      	ldrb	r2, [r3, #0]
    845c:	4906      	ldr	r1, [pc, #24]	; (8478 <init+0x12e>)
    845e:	0013      	movs	r3, r2
    8460:	00db      	lsls	r3, r3, #3
    8462:	189b      	adds	r3, r3, r2
    8464:	019b      	lsls	r3, r3, #6
    8466:	18cb      	adds	r3, r1, r3
    8468:	3308      	adds	r3, #8
    846a:	2209      	movs	r2, #9
    846c:	701a      	strb	r2, [r3, #0]
		break;
    846e:	e030      	b.n	84d2 <init+0x188>
    8470:	40220000 	.word	0x40220000
    8474:	40000400 	.word	0x40000400
    8478:	200031f8 	.word	0x200031f8
    847c:	42001400 	.word	0x42001400
    8480:	42001000 	.word	0x42001000
    8484:	42000800 	.word	0x42000800
			PM->APBCMASK.bit.SERCOM1_ = 1; // Bit  2    - SERCOM0: SERCOM0 APB Clock Enable (1 - enabled)
    8488:	4aea      	ldr	r2, [pc, #936]	; (8834 <init+0x4ea>)
    848a:	6a13      	ldr	r3, [r2, #32]
    848c:	2108      	movs	r1, #8
    848e:	430b      	orrs	r3, r1
    8490:	6213      	str	r3, [r2, #32]
			port[n_port].sercom = SERCOM1;
    8492:	1dfb      	adds	r3, r7, #7
    8494:	781a      	ldrb	r2, [r3, #0]
    8496:	49e8      	ldr	r1, [pc, #928]	; (8838 <init+0x4ee>)
    8498:	0013      	movs	r3, r2
    849a:	00db      	lsls	r3, r3, #3
    849c:	189b      	adds	r3, r3, r2
    849e:	019b      	lsls	r3, r3, #6
    84a0:	4ae6      	ldr	r2, [pc, #920]	; (883c <init+0x4f2>)
    84a2:	505a      	str	r2, [r3, r1]
			port[n_port].gclk_sercom = GCLK_CLKCTRL_ID_SERCOM1_CORE;
    84a4:	1dfb      	adds	r3, r7, #7
    84a6:	781a      	ldrb	r2, [r3, #0]
    84a8:	49e3      	ldr	r1, [pc, #908]	; (8838 <init+0x4ee>)
    84aa:	0013      	movs	r3, r2
    84ac:	00db      	lsls	r3, r3, #3
    84ae:	189b      	adds	r3, r3, r2
    84b0:	019b      	lsls	r3, r3, #6
    84b2:	18cb      	adds	r3, r1, r3
    84b4:	3304      	adds	r3, #4
    84b6:	2215      	movs	r2, #21
    84b8:	601a      	str	r2, [r3, #0]
			port[n_port].irqn_sercom = SERCOM1_IRQn;
    84ba:	1dfb      	adds	r3, r7, #7
    84bc:	781a      	ldrb	r2, [r3, #0]
    84be:	49de      	ldr	r1, [pc, #888]	; (8838 <init+0x4ee>)
    84c0:	0013      	movs	r3, r2
    84c2:	00db      	lsls	r3, r3, #3
    84c4:	189b      	adds	r3, r3, r2
    84c6:	019b      	lsls	r3, r3, #6
    84c8:	18cb      	adds	r3, r1, r3
    84ca:	3308      	adds	r3, #8
    84cc:	220a      	movs	r2, #10
    84ce:	701a      	strb	r2, [r3, #0]
		break;
    84d0:	46c0      	nop			; (mov r8, r8)
	}
	
	PM->APBCSEL.bit.APBCDIV   = 0x00;
    84d2:	4ad8      	ldr	r2, [pc, #864]	; (8834 <init+0x4ea>)
    84d4:	7ad3      	ldrb	r3, [r2, #11]
    84d6:	2107      	movs	r1, #7
    84d8:	438b      	bics	r3, r1
    84da:	72d3      	strb	r3, [r2, #11]
	GCLK->CLKCTRL.bit.WRTLOCK = 0x00;
    84dc:	4ad8      	ldr	r2, [pc, #864]	; (8840 <init+0x4f6>)
    84de:	8853      	ldrh	r3, [r2, #2]
    84e0:	045b      	lsls	r3, r3, #17
    84e2:	0c5b      	lsrs	r3, r3, #17
    84e4:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.ID      = port[n_port].gclk_sercom; // Bits 5:0  - ID: Generic Clock Selection ID (0x14 - SERCOM0_CORE)
    84e6:	4ad6      	ldr	r2, [pc, #856]	; (8840 <init+0x4f6>)
    84e8:	1dfb      	adds	r3, r7, #7
    84ea:	7819      	ldrb	r1, [r3, #0]
    84ec:	48d2      	ldr	r0, [pc, #840]	; (8838 <init+0x4ee>)
    84ee:	000b      	movs	r3, r1
    84f0:	00db      	lsls	r3, r3, #3
    84f2:	185b      	adds	r3, r3, r1
    84f4:	019b      	lsls	r3, r3, #6
    84f6:	18c3      	adds	r3, r0, r3
    84f8:	3304      	adds	r3, #4
    84fa:	681b      	ldr	r3, [r3, #0]
    84fc:	b2db      	uxtb	r3, r3
    84fe:	1c19      	adds	r1, r3, #0
    8500:	233f      	movs	r3, #63	; 0x3f
    8502:	400b      	ands	r3, r1
    8504:	b2d9      	uxtb	r1, r3
    8506:	8853      	ldrh	r3, [r2, #2]
    8508:	1c08      	adds	r0, r1, #0
    850a:	213f      	movs	r1, #63	; 0x3f
    850c:	4008      	ands	r0, r1
    850e:	213f      	movs	r1, #63	; 0x3f
    8510:	438b      	bics	r3, r1
    8512:	1c19      	adds	r1, r3, #0
    8514:	1c03      	adds	r3, r0, #0
    8516:	430b      	orrs	r3, r1
    8518:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN     = 0x00; // Bits 11:8 - GEN: Generic Clock Generator (0: Generic clock generator 0)
    851a:	4ac9      	ldr	r2, [pc, #804]	; (8840 <init+0x4f6>)
    851c:	8853      	ldrh	r3, [r2, #2]
    851e:	49c9      	ldr	r1, [pc, #804]	; (8844 <init+0x4fa>)
    8520:	400b      	ands	r3, r1
    8522:	8053      	strh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.CLKEN   = 0x01; // Bit  14   - CLKEN: Clock Enable (1: The generic clock is enabled)
    8524:	4ac6      	ldr	r2, [pc, #792]	; (8840 <init+0x4f6>)
    8526:	8853      	ldrh	r3, [r2, #2]
    8528:	2180      	movs	r1, #128	; 0x80
    852a:	01c9      	lsls	r1, r1, #7
    852c:	430b      	orrs	r3, r1
    852e:	8053      	strh	r3, [r2, #2]

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.ENABLE = 0x00; // Bit 1 - ENABLE: Enable (0: The peripheral is disabled or being disabled)
    8530:	1dfb      	adds	r3, r7, #7
    8532:	781a      	ldrb	r2, [r3, #0]
    8534:	49c0      	ldr	r1, [pc, #768]	; (8838 <init+0x4ee>)
    8536:	0013      	movs	r3, r2
    8538:	00db      	lsls	r3, r3, #3
    853a:	189b      	adds	r3, r3, r2
    853c:	019b      	lsls	r3, r3, #6
    853e:	585b      	ldr	r3, [r3, r1]
    8540:	681a      	ldr	r2, [r3, #0]
    8542:	2102      	movs	r1, #2
    8544:	438a      	bics	r2, r1
    8546:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.ENABLE) { ; }
    8548:	46c0      	nop			; (mov r8, r8)
    854a:	1dfb      	adds	r3, r7, #7
    854c:	781a      	ldrb	r2, [r3, #0]
    854e:	49ba      	ldr	r1, [pc, #744]	; (8838 <init+0x4ee>)
    8550:	0013      	movs	r3, r2
    8552:	00db      	lsls	r3, r3, #3
    8554:	189b      	adds	r3, r3, r2
    8556:	019b      	lsls	r3, r3, #6
    8558:	585b      	ldr	r3, [r3, r1]
    855a:	69db      	ldr	r3, [r3, #28]
    855c:	079b      	lsls	r3, r3, #30
    855e:	0fdb      	lsrs	r3, r3, #31
    8560:	b2db      	uxtb	r3, r3
    8562:	2b00      	cmp	r3, #0
    8564:	d1f1      	bne.n	854a <init+0x200>

	//.............................................................................

	port[n_port].sercom->USART.CTRLA.bit.SWRST   =0x01; //Bit0-SWRST: Software Reset (Writing a one to this bit resets all registers in the SERCOM, except DBGCTRL, to their initial state, and the SERCOM will be disabled.)
    8566:	1dfb      	adds	r3, r7, #7
    8568:	781a      	ldrb	r2, [r3, #0]
    856a:	49b3      	ldr	r1, [pc, #716]	; (8838 <init+0x4ee>)
    856c:	0013      	movs	r3, r2
    856e:	00db      	lsls	r3, r3, #3
    8570:	189b      	adds	r3, r3, r2
    8572:	019b      	lsls	r3, r3, #6
    8574:	585b      	ldr	r3, [r3, r1]
    8576:	681a      	ldr	r2, [r3, #0]
    8578:	2101      	movs	r1, #1
    857a:	430a      	orrs	r2, r1
    857c:	601a      	str	r2, [r3, #0]
	while(port[n_port].sercom->USART.SYNCBUSY.bit.SWRST) { ; } // Bit 0 - SWRST: Software Reset Synchronization Busy
    857e:	46c0      	nop			; (mov r8, r8)
    8580:	1dfb      	adds	r3, r7, #7
    8582:	781a      	ldrb	r2, [r3, #0]
    8584:	49ac      	ldr	r1, [pc, #688]	; (8838 <init+0x4ee>)
    8586:	0013      	movs	r3, r2
    8588:	00db      	lsls	r3, r3, #3
    858a:	189b      	adds	r3, r3, r2
    858c:	019b      	lsls	r3, r3, #6
    858e:	585b      	ldr	r3, [r3, r1]
    8590:	69db      	ldr	r3, [r3, #28]
    8592:	07db      	lsls	r3, r3, #31
    8594:	0fdb      	lsrs	r3, r3, #31
    8596:	b2db      	uxtb	r3, r3
    8598:	2b00      	cmp	r3, #0
    859a:	d1f1      	bne.n	8580 <init+0x236>

	port[n_port].sercom->USART.CTRLA.bit.DORD    =0x01;									// Bit  30    - DORD: Data Order (1: LSB is transmitted first.)
    859c:	1dfb      	adds	r3, r7, #7
    859e:	781a      	ldrb	r2, [r3, #0]
    85a0:	49a5      	ldr	r1, [pc, #660]	; (8838 <init+0x4ee>)
    85a2:	0013      	movs	r3, r2
    85a4:	00db      	lsls	r3, r3, #3
    85a6:	189b      	adds	r3, r3, r2
    85a8:	019b      	lsls	r3, r3, #6
    85aa:	585b      	ldr	r3, [r3, r1]
    85ac:	681a      	ldr	r2, [r3, #0]
    85ae:	2180      	movs	r1, #128	; 0x80
    85b0:	05c9      	lsls	r1, r1, #23
    85b2:	430a      	orrs	r2, r1
    85b4:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CPOL    =0x00;									// Bit  29    - CPOL: Clock Polarity (0: SCK is low when idle. The leading edge of a clock cycle is a rising edge, while the trailing edge is a falling edge)
    85b6:	1dfb      	adds	r3, r7, #7
    85b8:	781a      	ldrb	r2, [r3, #0]
    85ba:	499f      	ldr	r1, [pc, #636]	; (8838 <init+0x4ee>)
    85bc:	0013      	movs	r3, r2
    85be:	00db      	lsls	r3, r3, #3
    85c0:	189b      	adds	r3, r3, r2
    85c2:	019b      	lsls	r3, r3, #6
    85c4:	585b      	ldr	r3, [r3, r1]
    85c6:	681a      	ldr	r2, [r3, #0]
    85c8:	499f      	ldr	r1, [pc, #636]	; (8848 <init+0x4fe>)
    85ca:	400a      	ands	r2, r1
    85cc:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.CMODE   =0x00;									// Bit  28    - CMODE: Communication Mode (0: Asynchronous communication.)
    85ce:	1dfb      	adds	r3, r7, #7
    85d0:	781a      	ldrb	r2, [r3, #0]
    85d2:	4999      	ldr	r1, [pc, #612]	; (8838 <init+0x4ee>)
    85d4:	0013      	movs	r3, r2
    85d6:	00db      	lsls	r3, r3, #3
    85d8:	189b      	adds	r3, r3, r2
    85da:	019b      	lsls	r3, r3, #6
    85dc:	585b      	ldr	r3, [r3, r1]
    85de:	681a      	ldr	r2, [r3, #0]
    85e0:	499a      	ldr	r1, [pc, #616]	; (884c <init+0x502>)
    85e2:	400a      	ands	r2, r1
    85e4:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPA   =0x00;									// Bits 23:22 - SAMPA[1:0]: Sample Adjustment (0: 3-4-5)
    85e6:	1dfb      	adds	r3, r7, #7
    85e8:	781a      	ldrb	r2, [r3, #0]
    85ea:	4993      	ldr	r1, [pc, #588]	; (8838 <init+0x4ee>)
    85ec:	0013      	movs	r3, r2
    85ee:	00db      	lsls	r3, r3, #3
    85f0:	189b      	adds	r3, r3, r2
    85f2:	019b      	lsls	r3, r3, #6
    85f4:	585b      	ldr	r3, [r3, r1]
    85f6:	681a      	ldr	r2, [r3, #0]
    85f8:	4995      	ldr	r1, [pc, #596]	; (8850 <init+0x506>)
    85fa:	400a      	ands	r2, r1
    85fc:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.SAMPR   =0x02;									// Bits 15:13 - SAMPR[2:0]: Sample Rate (2: 8x over-sampling using arithmetic baud rate generation.)
    85fe:	1dfb      	adds	r3, r7, #7
    8600:	781a      	ldrb	r2, [r3, #0]
    8602:	498d      	ldr	r1, [pc, #564]	; (8838 <init+0x4ee>)
    8604:	0013      	movs	r3, r2
    8606:	00db      	lsls	r3, r3, #3
    8608:	189b      	adds	r3, r3, r2
    860a:	019b      	lsls	r3, r3, #6
    860c:	585b      	ldr	r3, [r3, r1]
    860e:	681a      	ldr	r2, [r3, #0]
    8610:	4990      	ldr	r1, [pc, #576]	; (8854 <init+0x50a>)
    8612:	400a      	ands	r2, r1
    8614:	2180      	movs	r1, #128	; 0x80
    8616:	01c9      	lsls	r1, r1, #7
    8618:	430a      	orrs	r2, r1
    861a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.IBON    =0x00;									// Bit  8     - IBON: Immediate Buffer Overflow Notification (0: STATUS.BUFOVF is asserted when it occurs in the data stream)
    861c:	1dfb      	adds	r3, r7, #7
    861e:	781a      	ldrb	r2, [r3, #0]
    8620:	4985      	ldr	r1, [pc, #532]	; (8838 <init+0x4ee>)
    8622:	0013      	movs	r3, r2
    8624:	00db      	lsls	r3, r3, #3
    8626:	189b      	adds	r3, r3, r2
    8628:	019b      	lsls	r3, r3, #6
    862a:	585b      	ldr	r3, [r3, r1]
    862c:	681a      	ldr	r2, [r3, #0]
    862e:	498a      	ldr	r1, [pc, #552]	; (8858 <init+0x50e>)
    8630:	400a      	ands	r2, r1
    8632:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RUNSTDBY=0x00;									// Bit  7     - RUNSTDBY: Run In Standby (Generic clock is disabled when ongoing transaction is finished. All interrupts can wake up the device.)
    8634:	1dfb      	adds	r3, r7, #7
    8636:	781a      	ldrb	r2, [r3, #0]
    8638:	497f      	ldr	r1, [pc, #508]	; (8838 <init+0x4ee>)
    863a:	0013      	movs	r3, r2
    863c:	00db      	lsls	r3, r3, #3
    863e:	189b      	adds	r3, r3, r2
    8640:	019b      	lsls	r3, r3, #6
    8642:	585b      	ldr	r3, [r3, r1]
    8644:	681a      	ldr	r2, [r3, #0]
    8646:	2180      	movs	r1, #128	; 0x80
    8648:	438a      	bics	r2, r1
    864a:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.MODE    =0x01;									// Bits 4:2   - MODE: Operating Mode (1: USART with internal clock.)
    864c:	1dfb      	adds	r3, r7, #7
    864e:	781a      	ldrb	r2, [r3, #0]
    8650:	4979      	ldr	r1, [pc, #484]	; (8838 <init+0x4ee>)
    8652:	0013      	movs	r3, r2
    8654:	00db      	lsls	r3, r3, #3
    8656:	189b      	adds	r3, r3, r2
    8658:	019b      	lsls	r3, r3, #6
    865a:	585b      	ldr	r3, [r3, r1]
    865c:	681a      	ldr	r2, [r3, #0]
    865e:	211c      	movs	r1, #28
    8660:	438a      	bics	r2, r1
    8662:	2104      	movs	r1, #4
    8664:	430a      	orrs	r2, r1
    8666:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.TXPO    =0x02;									// Bits 17:16 - TXPO: Transmit Data Pinout (2: TX->PAD[0], RTS->PAD[2])
    8668:	1dfb      	adds	r3, r7, #7
    866a:	781a      	ldrb	r2, [r3, #0]
    866c:	4972      	ldr	r1, [pc, #456]	; (8838 <init+0x4ee>)
    866e:	0013      	movs	r3, r2
    8670:	00db      	lsls	r3, r3, #3
    8672:	189b      	adds	r3, r3, r2
    8674:	019b      	lsls	r3, r3, #6
    8676:	585b      	ldr	r3, [r3, r1]
    8678:	681a      	ldr	r2, [r3, #0]
    867a:	4978      	ldr	r1, [pc, #480]	; (885c <init+0x512>)
    867c:	400a      	ands	r2, r1
    867e:	2180      	movs	r1, #128	; 0x80
    8680:	0289      	lsls	r1, r1, #10
    8682:	430a      	orrs	r2, r1
    8684:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLA.bit.RXPO    =0x01;									// Bits 21:20 - RXPO: Receive Data Pinout (1: RX->PAD[1])
    8686:	1dfb      	adds	r3, r7, #7
    8688:	781a      	ldrb	r2, [r3, #0]
    868a:	496b      	ldr	r1, [pc, #428]	; (8838 <init+0x4ee>)
    868c:	0013      	movs	r3, r2
    868e:	00db      	lsls	r3, r3, #3
    8690:	189b      	adds	r3, r3, r2
    8692:	019b      	lsls	r3, r3, #6
    8694:	585b      	ldr	r3, [r3, r1]
    8696:	681a      	ldr	r2, [r3, #0]
    8698:	4971      	ldr	r1, [pc, #452]	; (8860 <init+0x516>)
    869a:	400a      	ands	r2, r1
    869c:	2180      	movs	r1, #128	; 0x80
    869e:	0349      	lsls	r1, r1, #13
    86a0:	430a      	orrs	r2, r1
    86a2:	601a      	str	r2, [r3, #0]
	port[n_port].sercom->USART.CTRLB.bit.ENC     =0x00;									// Bit  10    - ENC: Encoding Format (0: Data is not encoded.)
    86a4:	1dfb      	adds	r3, r7, #7
    86a6:	781a      	ldrb	r2, [r3, #0]
    86a8:	4963      	ldr	r1, [pc, #396]	; (8838 <init+0x4ee>)
    86aa:	0013      	movs	r3, r2
    86ac:	00db      	lsls	r3, r3, #3
    86ae:	189b      	adds	r3, r3, r2
    86b0:	019b      	lsls	r3, r3, #6
    86b2:	585b      	ldr	r3, [r3, r1]
    86b4:	685a      	ldr	r2, [r3, #4]
    86b6:	496b      	ldr	r1, [pc, #428]	; (8864 <init+0x51a>)
    86b8:	400a      	ands	r2, r1
    86ba:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.SFDE    =0x01;									// Bit  9     - SFDE: Start of Frame Detection Enable (1: Start-of-frame detection enabled.)
    86bc:	1dfb      	adds	r3, r7, #7
    86be:	781a      	ldrb	r2, [r3, #0]
    86c0:	495d      	ldr	r1, [pc, #372]	; (8838 <init+0x4ee>)
    86c2:	0013      	movs	r3, r2
    86c4:	00db      	lsls	r3, r3, #3
    86c6:	189b      	adds	r3, r3, r2
    86c8:	019b      	lsls	r3, r3, #6
    86ca:	585b      	ldr	r3, [r3, r1]
    86cc:	685a      	ldr	r2, [r3, #4]
    86ce:	2180      	movs	r1, #128	; 0x80
    86d0:	0089      	lsls	r1, r1, #2
    86d2:	430a      	orrs	r2, r1
    86d4:	605a      	str	r2, [r3, #4]
	port[n_port].sercom->USART.CTRLB.bit.COLDEN  =0x00;									// Bit  8     - COLDEN: Collision Detection Enable (0: Collision detection is not enabled.)
    86d6:	1dfb      	adds	r3, r7, #7
    86d8:	781a      	ldrb	r2, [r3, #0]
    86da:	4957      	ldr	r1, [pc, #348]	; (8838 <init+0x4ee>)
    86dc:	0013      	movs	r3, r2
    86de:	00db      	lsls	r3, r3, #3
    86e0:	189b      	adds	r3, r3, r2
    86e2:	019b      	lsls	r3, r3, #6
    86e4:	585b      	ldr	r3, [r3, r1]
    86e6:	685a      	ldr	r2, [r3, #4]
    86e8:	495b      	ldr	r1, [pc, #364]	; (8858 <init+0x50e>)
    86ea:	400a      	ands	r2, r1
    86ec:	605a      	str	r2, [r3, #4]
	

	//cfg settings
	//frame
	switch (cfg_1.sock_rs485[n_port].parity) 
    86ee:	1dfb      	adds	r3, r7, #7
    86f0:	781a      	ldrb	r2, [r3, #0]
    86f2:	495d      	ldr	r1, [pc, #372]	; (8868 <init+0x51e>)
    86f4:	2038      	movs	r0, #56	; 0x38
    86f6:	0013      	movs	r3, r2
    86f8:	005b      	lsls	r3, r3, #1
    86fa:	189b      	adds	r3, r3, r2
    86fc:	009b      	lsls	r3, r3, #2
    86fe:	189b      	adds	r3, r3, r2
    8700:	18cb      	adds	r3, r1, r3
    8702:	181b      	adds	r3, r3, r0
    8704:	795b      	ldrb	r3, [r3, #5]
    8706:	069b      	lsls	r3, r3, #26
    8708:	0f9b      	lsrs	r3, r3, #30
    870a:	b2db      	uxtb	r3, r3
    870c:	2b01      	cmp	r3, #1
    870e:	d01d      	beq.n	874c <init+0x402>
    8710:	2b02      	cmp	r3, #2
    8712:	d138      	bne.n	8786 <init+0x43c>
	{
		case  PARITY_EVEN:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = EVEN; break;
    8714:	1dfb      	adds	r3, r7, #7
    8716:	781a      	ldrb	r2, [r3, #0]
    8718:	4947      	ldr	r1, [pc, #284]	; (8838 <init+0x4ee>)
    871a:	0013      	movs	r3, r2
    871c:	00db      	lsls	r3, r3, #3
    871e:	189b      	adds	r3, r3, r2
    8720:	019b      	lsls	r3, r3, #6
    8722:	585b      	ldr	r3, [r3, r1]
    8724:	681a      	ldr	r2, [r3, #0]
    8726:	4951      	ldr	r1, [pc, #324]	; (886c <init+0x522>)
    8728:	400a      	ands	r2, r1
    872a:	2180      	movs	r1, #128	; 0x80
    872c:	0449      	lsls	r1, r1, #17
    872e:	430a      	orrs	r2, r1
    8730:	601a      	str	r2, [r3, #0]
    8732:	1dfb      	adds	r3, r7, #7
    8734:	781a      	ldrb	r2, [r3, #0]
    8736:	4940      	ldr	r1, [pc, #256]	; (8838 <init+0x4ee>)
    8738:	0013      	movs	r3, r2
    873a:	00db      	lsls	r3, r3, #3
    873c:	189b      	adds	r3, r3, r2
    873e:	019b      	lsls	r3, r3, #6
    8740:	585b      	ldr	r3, [r3, r1]
    8742:	685a      	ldr	r2, [r3, #4]
    8744:	494a      	ldr	r1, [pc, #296]	; (8870 <init+0x526>)
    8746:	400a      	ands	r2, r1
    8748:	605a      	str	r2, [r3, #4]
    874a:	e029      	b.n	87a0 <init+0x456>
		case  PARITY_ODD:	port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_WITH_PARITY; port[n_port].sercom->USART.CTRLB.bit.PMODE = ODD; break;
    874c:	1dfb      	adds	r3, r7, #7
    874e:	781a      	ldrb	r2, [r3, #0]
    8750:	4939      	ldr	r1, [pc, #228]	; (8838 <init+0x4ee>)
    8752:	0013      	movs	r3, r2
    8754:	00db      	lsls	r3, r3, #3
    8756:	189b      	adds	r3, r3, r2
    8758:	019b      	lsls	r3, r3, #6
    875a:	585b      	ldr	r3, [r3, r1]
    875c:	681a      	ldr	r2, [r3, #0]
    875e:	4943      	ldr	r1, [pc, #268]	; (886c <init+0x522>)
    8760:	400a      	ands	r2, r1
    8762:	2180      	movs	r1, #128	; 0x80
    8764:	0449      	lsls	r1, r1, #17
    8766:	430a      	orrs	r2, r1
    8768:	601a      	str	r2, [r3, #0]
    876a:	1dfb      	adds	r3, r7, #7
    876c:	781a      	ldrb	r2, [r3, #0]
    876e:	4932      	ldr	r1, [pc, #200]	; (8838 <init+0x4ee>)
    8770:	0013      	movs	r3, r2
    8772:	00db      	lsls	r3, r3, #3
    8774:	189b      	adds	r3, r3, r2
    8776:	019b      	lsls	r3, r3, #6
    8778:	585b      	ldr	r3, [r3, r1]
    877a:	685a      	ldr	r2, [r3, #4]
    877c:	2180      	movs	r1, #128	; 0x80
    877e:	0189      	lsls	r1, r1, #6
    8780:	430a      	orrs	r2, r1
    8782:	605a      	str	r2, [r3, #4]
    8784:	e00c      	b.n	87a0 <init+0x456>
		default:			port[n_port].sercom->USART.CTRLA.bit.FORM = FRAME_NO_PARITY; break;
    8786:	1dfb      	adds	r3, r7, #7
    8788:	781a      	ldrb	r2, [r3, #0]
    878a:	492b      	ldr	r1, [pc, #172]	; (8838 <init+0x4ee>)
    878c:	0013      	movs	r3, r2
    878e:	00db      	lsls	r3, r3, #3
    8790:	189b      	adds	r3, r3, r2
    8792:	019b      	lsls	r3, r3, #6
    8794:	585b      	ldr	r3, [r3, r1]
    8796:	681a      	ldr	r2, [r3, #0]
    8798:	4934      	ldr	r1, [pc, #208]	; (886c <init+0x522>)
    879a:	400a      	ands	r2, r1
    879c:	601a      	str	r2, [r3, #0]
    879e:	46c0      	nop			; (mov r8, r8)
	}
	//stop bit
	switch(cfg_1.sock_rs485[n_port].stop)	
    87a0:	1dfb      	adds	r3, r7, #7
    87a2:	781a      	ldrb	r2, [r3, #0]
    87a4:	4930      	ldr	r1, [pc, #192]	; (8868 <init+0x51e>)
    87a6:	2038      	movs	r0, #56	; 0x38
    87a8:	0013      	movs	r3, r2
    87aa:	005b      	lsls	r3, r3, #1
    87ac:	189b      	adds	r3, r3, r2
    87ae:	009b      	lsls	r3, r3, #2
    87b0:	189b      	adds	r3, r3, r2
    87b2:	18cb      	adds	r3, r1, r3
    87b4:	181b      	adds	r3, r3, r0
    87b6:	795b      	ldrb	r3, [r3, #5]
    87b8:	061b      	lsls	r3, r3, #24
    87ba:	0f9b      	lsrs	r3, r3, #30
    87bc:	b2db      	uxtb	r3, r3
    87be:	2b02      	cmp	r3, #2
    87c0:	d10c      	bne.n	87dc <init+0x492>
	{
		case 2:		port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 1; break;
    87c2:	1dfb      	adds	r3, r7, #7
    87c4:	781a      	ldrb	r2, [r3, #0]
    87c6:	491c      	ldr	r1, [pc, #112]	; (8838 <init+0x4ee>)
    87c8:	0013      	movs	r3, r2
    87ca:	00db      	lsls	r3, r3, #3
    87cc:	189b      	adds	r3, r3, r2
    87ce:	019b      	lsls	r3, r3, #6
    87d0:	585b      	ldr	r3, [r3, r1]
    87d2:	685a      	ldr	r2, [r3, #4]
    87d4:	2140      	movs	r1, #64	; 0x40
    87d6:	430a      	orrs	r2, r1
    87d8:	605a      	str	r2, [r3, #4]
    87da:	e00c      	b.n	87f6 <init+0x4ac>
		default:	port[n_port].sercom->USART.CTRLB.bit.SBMODE  = 0; break;
    87dc:	1dfb      	adds	r3, r7, #7
    87de:	781a      	ldrb	r2, [r3, #0]
    87e0:	4915      	ldr	r1, [pc, #84]	; (8838 <init+0x4ee>)
    87e2:	0013      	movs	r3, r2
    87e4:	00db      	lsls	r3, r3, #3
    87e6:	189b      	adds	r3, r3, r2
    87e8:	019b      	lsls	r3, r3, #6
    87ea:	585b      	ldr	r3, [r3, r1]
    87ec:	685a      	ldr	r2, [r3, #4]
    87ee:	2140      	movs	r1, #64	; 0x40
    87f0:	438a      	bics	r2, r1
    87f2:	605a      	str	r2, [r3, #4]
    87f4:	46c0      	nop			; (mov r8, r8)
	}
	//char size
	switch (cfg_1.sock_rs485[n_port].bsize)
    87f6:	1dfb      	adds	r3, r7, #7
    87f8:	781a      	ldrb	r2, [r3, #0]
    87fa:	491b      	ldr	r1, [pc, #108]	; (8868 <init+0x51e>)
    87fc:	2038      	movs	r0, #56	; 0x38
    87fe:	0013      	movs	r3, r2
    8800:	005b      	lsls	r3, r3, #1
    8802:	189b      	adds	r3, r3, r2
    8804:	009b      	lsls	r3, r3, #2
    8806:	189b      	adds	r3, r3, r2
    8808:	18cb      	adds	r3, r1, r3
    880a:	181b      	adds	r3, r3, r0
    880c:	795b      	ldrb	r3, [r3, #5]
    880e:	071b      	lsls	r3, r3, #28
    8810:	0f1b      	lsrs	r3, r3, #28
    8812:	b2db      	uxtb	r3, r3
    8814:	2b07      	cmp	r3, #7
    8816:	d12d      	bne.n	8874 <init+0x52a>
	{
		case 7:	port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x07; break;
    8818:	1dfb      	adds	r3, r7, #7
    881a:	781a      	ldrb	r2, [r3, #0]
    881c:	4906      	ldr	r1, [pc, #24]	; (8838 <init+0x4ee>)
    881e:	0013      	movs	r3, r2
    8820:	00db      	lsls	r3, r3, #3
    8822:	189b      	adds	r3, r3, r2
    8824:	019b      	lsls	r3, r3, #6
    8826:	585b      	ldr	r3, [r3, r1]
    8828:	685a      	ldr	r2, [r3, #4]
    882a:	2107      	movs	r1, #7
    882c:	430a      	orrs	r2, r1
    882e:	605a      	str	r2, [r3, #4]
    8830:	e02d      	b.n	888e <init+0x544>
    8832:	46c0      	nop			; (mov r8, r8)
    8834:	40000400 	.word	0x40000400
    8838:	200031f8 	.word	0x200031f8
    883c:	42000c00 	.word	0x42000c00
    8840:	40000c00 	.word	0x40000c00
    8844:	fffff0ff 	.word	0xfffff0ff
    8848:	dfffffff 	.word	0xdfffffff
    884c:	efffffff 	.word	0xefffffff
    8850:	ff3fffff 	.word	0xff3fffff
    8854:	ffff1fff 	.word	0xffff1fff
    8858:	fffffeff 	.word	0xfffffeff
    885c:	fffcffff 	.word	0xfffcffff
    8860:	ffcfffff 	.word	0xffcfffff
    8864:	fffffbff 	.word	0xfffffbff
    8868:	20003dc0 	.word	0x20003dc0
    886c:	f0ffffff 	.word	0xf0ffffff
    8870:	ffffdfff 	.word	0xffffdfff
		default:port[n_port].sercom->USART.CTRLB.bit.CHSIZE = 0x00; break;
    8874:	1dfb      	adds	r3, r7, #7
    8876:	781a      	ldrb	r2, [r3, #0]
    8878:	49b8      	ldr	r1, [pc, #736]	; (8b5c <init+0x812>)
    887a:	0013      	movs	r3, r2
    887c:	00db      	lsls	r3, r3, #3
    887e:	189b      	adds	r3, r3, r2
    8880:	019b      	lsls	r3, r3, #6
    8882:	585b      	ldr	r3, [r3, r1]
    8884:	685a      	ldr	r2, [r3, #4]
    8886:	2107      	movs	r1, #7
    8888:	438a      	bics	r2, r1
    888a:	605a      	str	r2, [r3, #4]
    888c:	46c0      	nop			; (mov r8, r8)
	}
	//baud
	val = cfg_1.sock_rs485[n_port].baud;
    888e:	1dfb      	adds	r3, r7, #7
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	49b3      	ldr	r1, [pc, #716]	; (8b60 <init+0x816>)
    8894:	0013      	movs	r3, r2
    8896:	005b      	lsls	r3, r3, #1
    8898:	189b      	adds	r3, r3, r2
    889a:	009b      	lsls	r3, r3, #2
    889c:	189b      	adds	r3, r3, r2
    889e:	18cb      	adds	r3, r1, r3
    88a0:	3330      	adds	r3, #48	; 0x30
    88a2:	7a5a      	ldrb	r2, [r3, #9]
    88a4:	7a99      	ldrb	r1, [r3, #10]
    88a6:	0209      	lsls	r1, r1, #8
    88a8:	430a      	orrs	r2, r1
    88aa:	7ad9      	ldrb	r1, [r3, #11]
    88ac:	0409      	lsls	r1, r1, #16
    88ae:	430a      	orrs	r2, r1
    88b0:	7b1b      	ldrb	r3, [r3, #12]
    88b2:	061b      	lsls	r3, r3, #24
    88b4:	4313      	orrs	r3, r2
    88b6:	61fb      	str	r3, [r7, #28]
	if ( !((val == 600) || (val == 1200) || (val == 2400) || (val == 4800) || (val == 9600) || (val == 19200) || (val == 38400) || (val == 57600) || (val == 115200) || (val == 128000) || (val == 256000)) ) {val = 38400;}
    88b8:	69fa      	ldr	r2, [r7, #28]
    88ba:	2396      	movs	r3, #150	; 0x96
    88bc:	009b      	lsls	r3, r3, #2
    88be:	429a      	cmp	r2, r3
    88c0:	d034      	beq.n	892c <init+0x5e2>
    88c2:	69fa      	ldr	r2, [r7, #28]
    88c4:	2396      	movs	r3, #150	; 0x96
    88c6:	00db      	lsls	r3, r3, #3
    88c8:	429a      	cmp	r2, r3
    88ca:	d02f      	beq.n	892c <init+0x5e2>
    88cc:	69fa      	ldr	r2, [r7, #28]
    88ce:	2396      	movs	r3, #150	; 0x96
    88d0:	011b      	lsls	r3, r3, #4
    88d2:	429a      	cmp	r2, r3
    88d4:	d02a      	beq.n	892c <init+0x5e2>
    88d6:	69fa      	ldr	r2, [r7, #28]
    88d8:	2396      	movs	r3, #150	; 0x96
    88da:	015b      	lsls	r3, r3, #5
    88dc:	429a      	cmp	r2, r3
    88de:	d025      	beq.n	892c <init+0x5e2>
    88e0:	69fa      	ldr	r2, [r7, #28]
    88e2:	2396      	movs	r3, #150	; 0x96
    88e4:	019b      	lsls	r3, r3, #6
    88e6:	429a      	cmp	r2, r3
    88e8:	d020      	beq.n	892c <init+0x5e2>
    88ea:	69fa      	ldr	r2, [r7, #28]
    88ec:	2396      	movs	r3, #150	; 0x96
    88ee:	01db      	lsls	r3, r3, #7
    88f0:	429a      	cmp	r2, r3
    88f2:	d01b      	beq.n	892c <init+0x5e2>
    88f4:	69fa      	ldr	r2, [r7, #28]
    88f6:	2396      	movs	r3, #150	; 0x96
    88f8:	021b      	lsls	r3, r3, #8
    88fa:	429a      	cmp	r2, r3
    88fc:	d016      	beq.n	892c <init+0x5e2>
    88fe:	69fa      	ldr	r2, [r7, #28]
    8900:	23e1      	movs	r3, #225	; 0xe1
    8902:	021b      	lsls	r3, r3, #8
    8904:	429a      	cmp	r2, r3
    8906:	d011      	beq.n	892c <init+0x5e2>
    8908:	69fa      	ldr	r2, [r7, #28]
    890a:	23e1      	movs	r3, #225	; 0xe1
    890c:	025b      	lsls	r3, r3, #9
    890e:	429a      	cmp	r2, r3
    8910:	d00c      	beq.n	892c <init+0x5e2>
    8912:	69fa      	ldr	r2, [r7, #28]
    8914:	23fa      	movs	r3, #250	; 0xfa
    8916:	025b      	lsls	r3, r3, #9
    8918:	429a      	cmp	r2, r3
    891a:	d007      	beq.n	892c <init+0x5e2>
    891c:	69fa      	ldr	r2, [r7, #28]
    891e:	23fa      	movs	r3, #250	; 0xfa
    8920:	029b      	lsls	r3, r3, #10
    8922:	429a      	cmp	r2, r3
    8924:	d002      	beq.n	892c <init+0x5e2>
    8926:	2396      	movs	r3, #150	; 0x96
    8928:	021b      	lsls	r3, r3, #8
    892a:	61fb      	str	r3, [r7, #28]
	port[n_port].sercom->USART.BAUD.bit.BAUD = 65536.0f*(1.0f-(8.0*(float)(val))/(float)(PROC_HERZ)); 
    892c:	1dfb      	adds	r3, r7, #7
    892e:	781a      	ldrb	r2, [r3, #0]
    8930:	498a      	ldr	r1, [pc, #552]	; (8b5c <init+0x812>)
    8932:	0013      	movs	r3, r2
    8934:	00db      	lsls	r3, r3, #3
    8936:	189b      	adds	r3, r3, r2
    8938:	019b      	lsls	r3, r3, #6
    893a:	585c      	ldr	r4, [r3, r1]
    893c:	4b89      	ldr	r3, [pc, #548]	; (8b64 <init+0x81a>)
    893e:	69f8      	ldr	r0, [r7, #28]
    8940:	4798      	blx	r3
    8942:	1c02      	adds	r2, r0, #0
    8944:	4b88      	ldr	r3, [pc, #544]	; (8b68 <init+0x81e>)
    8946:	1c10      	adds	r0, r2, #0
    8948:	4798      	blx	r3
    894a:	4d88      	ldr	r5, [pc, #544]	; (8b6c <init+0x822>)
    894c:	2200      	movs	r2, #0
    894e:	4b88      	ldr	r3, [pc, #544]	; (8b70 <init+0x826>)
    8950:	47a8      	blx	r5
    8952:	0002      	movs	r2, r0
    8954:	000b      	movs	r3, r1
    8956:	0010      	movs	r0, r2
    8958:	0019      	movs	r1, r3
    895a:	4d86      	ldr	r5, [pc, #536]	; (8b74 <init+0x82a>)
    895c:	2200      	movs	r2, #0
    895e:	4b86      	ldr	r3, [pc, #536]	; (8b78 <init+0x82e>)
    8960:	47a8      	blx	r5
    8962:	0002      	movs	r2, r0
    8964:	000b      	movs	r3, r1
    8966:	4d85      	ldr	r5, [pc, #532]	; (8b7c <init+0x832>)
    8968:	2000      	movs	r0, #0
    896a:	4985      	ldr	r1, [pc, #532]	; (8b80 <init+0x836>)
    896c:	47a8      	blx	r5
    896e:	0002      	movs	r2, r0
    8970:	000b      	movs	r3, r1
    8972:	0010      	movs	r0, r2
    8974:	0019      	movs	r1, r3
    8976:	4d7d      	ldr	r5, [pc, #500]	; (8b6c <init+0x822>)
    8978:	2200      	movs	r2, #0
    897a:	4b82      	ldr	r3, [pc, #520]	; (8b84 <init+0x83a>)
    897c:	47a8      	blx	r5
    897e:	0002      	movs	r2, r0
    8980:	000b      	movs	r3, r1
    8982:	0011      	movs	r1, r2
    8984:	001a      	movs	r2, r3
    8986:	4b80      	ldr	r3, [pc, #512]	; (8b88 <init+0x83e>)
    8988:	0008      	movs	r0, r1
    898a:	0011      	movs	r1, r2
    898c:	4798      	blx	r3
    898e:	0003      	movs	r3, r0
    8990:	b29b      	uxth	r3, r3
    8992:	81a3      	strh	r3, [r4, #12]
	//cfg settings end

	port[n_port].sercom->USART.INTENSET.bit.RXC  =0x01; // Bit 2 RXC: Receive Complete Interrupt Enable
    8994:	1dfb      	adds	r3, r7, #7
    8996:	781a      	ldrb	r2, [r3, #0]
    8998:	4970      	ldr	r1, [pc, #448]	; (8b5c <init+0x812>)
    899a:	0013      	movs	r3, r2
    899c:	00db      	lsls	r3, r3, #3
    899e:	189b      	adds	r3, r3, r2
    89a0:	019b      	lsls	r3, r3, #6
    89a2:	585a      	ldr	r2, [r3, r1]
    89a4:	7d93      	ldrb	r3, [r2, #22]
    89a6:	2104      	movs	r1, #4
    89a8:	430b      	orrs	r3, r1
    89aa:	7593      	strb	r3, [r2, #22]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    89ac:	46c0      	nop			; (mov r8, r8)
    89ae:	1dfb      	adds	r3, r7, #7
    89b0:	781a      	ldrb	r2, [r3, #0]
    89b2:	496a      	ldr	r1, [pc, #424]	; (8b5c <init+0x812>)
    89b4:	0013      	movs	r3, r2
    89b6:	00db      	lsls	r3, r3, #3
    89b8:	189b      	adds	r3, r3, r2
    89ba:	019b      	lsls	r3, r3, #6
    89bc:	585b      	ldr	r3, [r3, r1]
    89be:	69db      	ldr	r3, [r3, #28]
    89c0:	2207      	movs	r2, #7
    89c2:	4013      	ands	r3, r2
    89c4:	d1f3      	bne.n	89ae <init+0x664>
	port[n_port].sercom->USART.CTRLB.bit.RXEN=0x01;     // Bit 17 - RXEN: Receiver Enable (11: The receiver is enabled or will be enabled when the USART is enabled)
    89c6:	1dfb      	adds	r3, r7, #7
    89c8:	781a      	ldrb	r2, [r3, #0]
    89ca:	4964      	ldr	r1, [pc, #400]	; (8b5c <init+0x812>)
    89cc:	0013      	movs	r3, r2
    89ce:	00db      	lsls	r3, r3, #3
    89d0:	189b      	adds	r3, r3, r2
    89d2:	019b      	lsls	r3, r3, #6
    89d4:	585b      	ldr	r3, [r3, r1]
    89d6:	685a      	ldr	r2, [r3, #4]
    89d8:	2180      	movs	r1, #128	; 0x80
    89da:	0289      	lsls	r1, r1, #10
    89dc:	430a      	orrs	r2, r1
    89de:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    89e0:	46c0      	nop			; (mov r8, r8)
    89e2:	1dfb      	adds	r3, r7, #7
    89e4:	781a      	ldrb	r2, [r3, #0]
    89e6:	495d      	ldr	r1, [pc, #372]	; (8b5c <init+0x812>)
    89e8:	0013      	movs	r3, r2
    89ea:	00db      	lsls	r3, r3, #3
    89ec:	189b      	adds	r3, r3, r2
    89ee:	019b      	lsls	r3, r3, #6
    89f0:	585b      	ldr	r3, [r3, r1]
    89f2:	69db      	ldr	r3, [r3, #28]
    89f4:	2207      	movs	r2, #7
    89f6:	4013      	ands	r3, r2
    89f8:	d1f3      	bne.n	89e2 <init+0x698>
	port[n_port].sercom->USART.CTRLB.bit.TXEN=0x01;     // Bit 16 - TXEN: Transmitter Enable (1: The transmitter is enabled or will be enabled when the USART is enabled.)
    89fa:	1dfb      	adds	r3, r7, #7
    89fc:	781a      	ldrb	r2, [r3, #0]
    89fe:	4957      	ldr	r1, [pc, #348]	; (8b5c <init+0x812>)
    8a00:	0013      	movs	r3, r2
    8a02:	00db      	lsls	r3, r3, #3
    8a04:	189b      	adds	r3, r3, r2
    8a06:	019b      	lsls	r3, r3, #6
    8a08:	585b      	ldr	r3, [r3, r1]
    8a0a:	685a      	ldr	r2, [r3, #4]
    8a0c:	2180      	movs	r1, #128	; 0x80
    8a0e:	0249      	lsls	r1, r1, #9
    8a10:	430a      	orrs	r2, r1
    8a12:	605a      	str	r2, [r3, #4]

	while(port[n_port].sercom->USART.SYNCBUSY.reg & 0x07) { ; }
    8a14:	46c0      	nop			; (mov r8, r8)
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	781a      	ldrb	r2, [r3, #0]
    8a1a:	4950      	ldr	r1, [pc, #320]	; (8b5c <init+0x812>)
    8a1c:	0013      	movs	r3, r2
    8a1e:	00db      	lsls	r3, r3, #3
    8a20:	189b      	adds	r3, r3, r2
    8a22:	019b      	lsls	r3, r3, #6
    8a24:	585b      	ldr	r3, [r3, r1]
    8a26:	69db      	ldr	r3, [r3, #28]
    8a28:	2207      	movs	r2, #7
    8a2a:	4013      	ands	r3, r2
    8a2c:	d1f3      	bne.n	8a16 <init+0x6cc>
	port[n_port].sercom->USART.CTRLA.bit.ENABLE=0x01;   // Bit 1 - ENABLE: Enable (1: The peripheral is enabled or being enabled.)
    8a2e:	1dfb      	adds	r3, r7, #7
    8a30:	781a      	ldrb	r2, [r3, #0]
    8a32:	494a      	ldr	r1, [pc, #296]	; (8b5c <init+0x812>)
    8a34:	0013      	movs	r3, r2
    8a36:	00db      	lsls	r3, r3, #3
    8a38:	189b      	adds	r3, r3, r2
    8a3a:	019b      	lsls	r3, r3, #6
    8a3c:	585b      	ldr	r3, [r3, r1]
    8a3e:	681a      	ldr	r2, [r3, #0]
    8a40:	2102      	movs	r1, #2
    8a42:	430a      	orrs	r2, r1
    8a44:	601a      	str	r2, [r3, #0]

	tout = (double)1000000 / (double)cfg_1.sock_rs485[n_port].baud;
    8a46:	1dfb      	adds	r3, r7, #7
    8a48:	781a      	ldrb	r2, [r3, #0]
    8a4a:	4945      	ldr	r1, [pc, #276]	; (8b60 <init+0x816>)
    8a4c:	0013      	movs	r3, r2
    8a4e:	005b      	lsls	r3, r3, #1
    8a50:	189b      	adds	r3, r3, r2
    8a52:	009b      	lsls	r3, r3, #2
    8a54:	189b      	adds	r3, r3, r2
    8a56:	18cb      	adds	r3, r1, r3
    8a58:	3330      	adds	r3, #48	; 0x30
    8a5a:	7a5a      	ldrb	r2, [r3, #9]
    8a5c:	7a99      	ldrb	r1, [r3, #10]
    8a5e:	0209      	lsls	r1, r1, #8
    8a60:	430a      	orrs	r2, r1
    8a62:	7ad9      	ldrb	r1, [r3, #11]
    8a64:	0409      	lsls	r1, r1, #16
    8a66:	430a      	orrs	r2, r1
    8a68:	7b1b      	ldrb	r3, [r3, #12]
    8a6a:	061b      	lsls	r3, r3, #24
    8a6c:	4313      	orrs	r3, r2
    8a6e:	001a      	movs	r2, r3
    8a70:	4b46      	ldr	r3, [pc, #280]	; (8b8c <init+0x842>)
    8a72:	0010      	movs	r0, r2
    8a74:	4798      	blx	r3
    8a76:	0002      	movs	r2, r0
    8a78:	000b      	movs	r3, r1
    8a7a:	4c3e      	ldr	r4, [pc, #248]	; (8b74 <init+0x82a>)
    8a7c:	2000      	movs	r0, #0
    8a7e:	4944      	ldr	r1, [pc, #272]	; (8b90 <init+0x846>)
    8a80:	47a0      	blx	r4
    8a82:	0003      	movs	r3, r0
    8a84:	000c      	movs	r4, r1
    8a86:	613b      	str	r3, [r7, #16]
    8a88:	617c      	str	r4, [r7, #20]
	tout = tout * bsize;
    8a8a:	4c38      	ldr	r4, [pc, #224]	; (8b6c <init+0x822>)
    8a8c:	68ba      	ldr	r2, [r7, #8]
    8a8e:	68fb      	ldr	r3, [r7, #12]
    8a90:	6938      	ldr	r0, [r7, #16]
    8a92:	6979      	ldr	r1, [r7, #20]
    8a94:	47a0      	blx	r4
    8a96:	0003      	movs	r3, r0
    8a98:	000c      	movs	r4, r1
    8a9a:	613b      	str	r3, [r7, #16]
    8a9c:	617c      	str	r4, [r7, #20]
	tout = tout * 4;
    8a9e:	4c33      	ldr	r4, [pc, #204]	; (8b6c <init+0x822>)
    8aa0:	2200      	movs	r2, #0
    8aa2:	4b3c      	ldr	r3, [pc, #240]	; (8b94 <init+0x84a>)
    8aa4:	6938      	ldr	r0, [r7, #16]
    8aa6:	6979      	ldr	r1, [r7, #20]
    8aa8:	47a0      	blx	r4
    8aaa:	0003      	movs	r3, r0
    8aac:	000c      	movs	r4, r1
    8aae:	613b      	str	r3, [r7, #16]
    8ab0:	617c      	str	r4, [r7, #20]
	tout = tout / 100;
    8ab2:	4c30      	ldr	r4, [pc, #192]	; (8b74 <init+0x82a>)
    8ab4:	2200      	movs	r2, #0
    8ab6:	4b38      	ldr	r3, [pc, #224]	; (8b98 <init+0x84e>)
    8ab8:	6938      	ldr	r0, [r7, #16]
    8aba:	6979      	ldr	r1, [r7, #20]
    8abc:	47a0      	blx	r4
    8abe:	0003      	movs	r3, r0
    8ac0:	000c      	movs	r4, r1
    8ac2:	613b      	str	r3, [r7, #16]
    8ac4:	617c      	str	r4, [r7, #20]
	port[n_port].rtout = tout;
    8ac6:	1dfb      	adds	r3, r7, #7
    8ac8:	781c      	ldrb	r4, [r3, #0]
    8aca:	4b2f      	ldr	r3, [pc, #188]	; (8b88 <init+0x83e>)
    8acc:	6938      	ldr	r0, [r7, #16]
    8ace:	6979      	ldr	r1, [r7, #20]
    8ad0:	4798      	blx	r3
    8ad2:	0003      	movs	r3, r0
    8ad4:	b298      	uxth	r0, r3
    8ad6:	4921      	ldr	r1, [pc, #132]	; (8b5c <init+0x812>)
    8ad8:	2384      	movs	r3, #132	; 0x84
    8ada:	009a      	lsls	r2, r3, #2
    8adc:	0023      	movs	r3, r4
    8ade:	00db      	lsls	r3, r3, #3
    8ae0:	191b      	adds	r3, r3, r4
    8ae2:	019b      	lsls	r3, r3, #6
    8ae4:	18cb      	adds	r3, r1, r3
    8ae6:	189b      	adds	r3, r3, r2
    8ae8:	1c02      	adds	r2, r0, #0
    8aea:	801a      	strh	r2, [r3, #0]

	NVIC_DisableIRQ(port[n_port].irqn_sercom);
    8aec:	1dfb      	adds	r3, r7, #7
    8aee:	781a      	ldrb	r2, [r3, #0]
    8af0:	491a      	ldr	r1, [pc, #104]	; (8b5c <init+0x812>)
    8af2:	0013      	movs	r3, r2
    8af4:	00db      	lsls	r3, r3, #3
    8af6:	189b      	adds	r3, r3, r2
    8af8:	019b      	lsls	r3, r3, #6
    8afa:	18cb      	adds	r3, r1, r3
    8afc:	3308      	adds	r3, #8
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	b2db      	uxtb	r3, r3
    8b02:	b25b      	sxtb	r3, r3
    8b04:	0018      	movs	r0, r3
    8b06:	f7ff fb79 	bl	81fc <__NVIC_DisableIRQ>
	NVIC_SetPriority(port[n_port].irqn_sercom, 1);
    8b0a:	1dfb      	adds	r3, r7, #7
    8b0c:	781a      	ldrb	r2, [r3, #0]
    8b0e:	4913      	ldr	r1, [pc, #76]	; (8b5c <init+0x812>)
    8b10:	0013      	movs	r3, r2
    8b12:	00db      	lsls	r3, r3, #3
    8b14:	189b      	adds	r3, r3, r2
    8b16:	019b      	lsls	r3, r3, #6
    8b18:	18cb      	adds	r3, r1, r3
    8b1a:	3308      	adds	r3, #8
    8b1c:	781b      	ldrb	r3, [r3, #0]
    8b1e:	b2db      	uxtb	r3, r3
    8b20:	b25b      	sxtb	r3, r3
    8b22:	2101      	movs	r1, #1
    8b24:	0018      	movs	r0, r3
    8b26:	f7ff fb89 	bl	823c <__NVIC_SetPriority>
	NVIC_EnableIRQ(port[n_port].irqn_sercom);
    8b2a:	1dfb      	adds	r3, r7, #7
    8b2c:	781a      	ldrb	r2, [r3, #0]
    8b2e:	490b      	ldr	r1, [pc, #44]	; (8b5c <init+0x812>)
    8b30:	0013      	movs	r3, r2
    8b32:	00db      	lsls	r3, r3, #3
    8b34:	189b      	adds	r3, r3, r2
    8b36:	019b      	lsls	r3, r3, #6
    8b38:	18cb      	adds	r3, r1, r3
    8b3a:	3308      	adds	r3, #8
    8b3c:	781b      	ldrb	r3, [r3, #0]
    8b3e:	b2db      	uxtb	r3, r3
    8b40:	b25b      	sxtb	r3, r3
    8b42:	0018      	movs	r0, r3
    8b44:	f7ff fb40 	bl	81c8 <__NVIC_EnableIRQ>
	pin_ctrl(RTS, n_port, CLR);
    8b48:	1dfb      	adds	r3, r7, #7
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	2202      	movs	r2, #2
    8b4e:	0019      	movs	r1, r3
    8b50:	2000      	movs	r0, #0
    8b52:	4b12      	ldr	r3, [pc, #72]	; (8b9c <init+0x852>)
    8b54:	4798      	blx	r3
}
    8b56:	46bd      	mov	sp, r7
    8b58:	b008      	add	sp, #32
    8b5a:	bdb0      	pop	{r4, r5, r7, pc}
    8b5c:	200031f8 	.word	0x200031f8
    8b60:	20003dc0 	.word	0x20003dc0
    8b64:	0000ae49 	.word	0x0000ae49
    8b68:	0000c141 	.word	0x0000c141
    8b6c:	0000b53d 	.word	0x0000b53d
    8b70:	40200000 	.word	0x40200000
    8b74:	0000aed5 	.word	0x0000aed5
    8b78:	415e8480 	.word	0x415e8480
    8b7c:	0000ba3d 	.word	0x0000ba3d
    8b80:	3ff00000 	.word	0x3ff00000
    8b84:	40f00000 	.word	0x40f00000
    8b88:	0000ae0d 	.word	0x0000ae0d
    8b8c:	0000c0d1 	.word	0x0000c0d1
    8b90:	412e8480 	.word	0x412e8480
    8b94:	40100000 	.word	0x40100000
    8b98:	40590000 	.word	0x40590000
    8b9c:	00006a71 	.word	0x00006a71

00008ba0 <usart_write>:

WORD usart_write(BYTE n_port, BYTE* wbuf,WORD size)
{
    8ba0:	b590      	push	{r4, r7, lr}
    8ba2:	b083      	sub	sp, #12
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6039      	str	r1, [r7, #0]
    8ba8:	0011      	movs	r1, r2
    8baa:	1dfb      	adds	r3, r7, #7
    8bac:	1c02      	adds	r2, r0, #0
    8bae:	701a      	strb	r2, [r3, #0]
    8bb0:	1d3b      	adds	r3, r7, #4
    8bb2:	1c0a      	adds	r2, r1, #0
    8bb4:	801a      	strh	r2, [r3, #0]
	if(size == 0) { return(0); }
    8bb6:	1d3b      	adds	r3, r7, #4
    8bb8:	881b      	ldrh	r3, [r3, #0]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d101      	bne.n	8bc2 <usart_write+0x22>
    8bbe:	2300      	movs	r3, #0
    8bc0:	e06c      	b.n	8c9c <usart_write+0xfc>
	pin_ctrl(RTS, n_port, SET);
    8bc2:	1dfb      	adds	r3, r7, #7
    8bc4:	781b      	ldrb	r3, [r3, #0]
    8bc6:	2201      	movs	r2, #1
    8bc8:	0019      	movs	r1, r3
    8bca:	2000      	movs	r0, #0
    8bcc:	4b35      	ldr	r3, [pc, #212]	; (8ca4 <usart_write+0x104>)
    8bce:	4798      	blx	r3
	
	if(size > USART_BUF_SIZE) { size = USART_BUF_SIZE; }
    8bd0:	1d3b      	adds	r3, r7, #4
    8bd2:	881a      	ldrh	r2, [r3, #0]
    8bd4:	2380      	movs	r3, #128	; 0x80
    8bd6:	005b      	lsls	r3, r3, #1
    8bd8:	429a      	cmp	r2, r3
    8bda:	d903      	bls.n	8be4 <usart_write+0x44>
    8bdc:	1d3b      	adds	r3, r7, #4
    8bde:	2280      	movs	r2, #128	; 0x80
    8be0:	0052      	lsls	r2, r2, #1
    8be2:	801a      	strh	r2, [r3, #0]
	memcpy(port[n_port].wbuf,wbuf,size);
    8be4:	1dfb      	adds	r3, r7, #7
    8be6:	781a      	ldrb	r2, [r3, #0]
    8be8:	0013      	movs	r3, r2
    8bea:	00db      	lsls	r3, r3, #3
    8bec:	189b      	adds	r3, r3, r2
    8bee:	019b      	lsls	r3, r3, #6
    8bf0:	3308      	adds	r3, #8
    8bf2:	001a      	movs	r2, r3
    8bf4:	4b2c      	ldr	r3, [pc, #176]	; (8ca8 <usart_write+0x108>)
    8bf6:	18d3      	adds	r3, r2, r3
    8bf8:	1c58      	adds	r0, r3, #1
    8bfa:	1d3b      	adds	r3, r7, #4
    8bfc:	881a      	ldrh	r2, [r3, #0]
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	0019      	movs	r1, r3
    8c02:	4b2a      	ldr	r3, [pc, #168]	; (8cac <usart_write+0x10c>)
    8c04:	4798      	blx	r3
	port[n_port].wn = size;
    8c06:	1dfb      	adds	r3, r7, #7
    8c08:	781a      	ldrb	r2, [r3, #0]
    8c0a:	4927      	ldr	r1, [pc, #156]	; (8ca8 <usart_write+0x108>)
    8c0c:	4828      	ldr	r0, [pc, #160]	; (8cb0 <usart_write+0x110>)
    8c0e:	0013      	movs	r3, r2
    8c10:	00db      	lsls	r3, r3, #3
    8c12:	189b      	adds	r3, r3, r2
    8c14:	019b      	lsls	r3, r3, #6
    8c16:	18cb      	adds	r3, r1, r3
    8c18:	181b      	adds	r3, r3, r0
    8c1a:	1d3a      	adds	r2, r7, #4
    8c1c:	8812      	ldrh	r2, [r2, #0]
    8c1e:	801a      	strh	r2, [r3, #0]
	//port[n_port].wx = 1;
	port[n_port].wx = 0;
    8c20:	1dfb      	adds	r3, r7, #7
    8c22:	781a      	ldrb	r2, [r3, #0]
    8c24:	4820      	ldr	r0, [pc, #128]	; (8ca8 <usart_write+0x108>)
    8c26:	2383      	movs	r3, #131	; 0x83
    8c28:	0099      	lsls	r1, r3, #2
    8c2a:	0013      	movs	r3, r2
    8c2c:	00db      	lsls	r3, r3, #3
    8c2e:	189b      	adds	r3, r3, r2
    8c30:	019b      	lsls	r3, r3, #6
    8c32:	18c3      	adds	r3, r0, r3
    8c34:	185b      	adds	r3, r3, r1
    8c36:	2200      	movs	r2, #0
    8c38:	801a      	strh	r2, [r3, #0]
	//port[n_port].sercom->USART.DATA.reg=port[n_port].wbuf[0];
	port[n_port].sercom->USART.INTENCLR.bit.RXC = 1;
    8c3a:	1dfb      	adds	r3, r7, #7
    8c3c:	781a      	ldrb	r2, [r3, #0]
    8c3e:	491a      	ldr	r1, [pc, #104]	; (8ca8 <usart_write+0x108>)
    8c40:	0013      	movs	r3, r2
    8c42:	00db      	lsls	r3, r3, #3
    8c44:	189b      	adds	r3, r3, r2
    8c46:	019b      	lsls	r3, r3, #6
    8c48:	585a      	ldr	r2, [r3, r1]
    8c4a:	7d13      	ldrb	r3, [r2, #20]
    8c4c:	2104      	movs	r1, #4
    8c4e:	430b      	orrs	r3, r1
    8c50:	7513      	strb	r3, [r2, #20]
	port[n_port].sercom->USART.INTENSET.bit.DRE = 1;
    8c52:	1dfb      	adds	r3, r7, #7
    8c54:	781a      	ldrb	r2, [r3, #0]
    8c56:	4914      	ldr	r1, [pc, #80]	; (8ca8 <usart_write+0x108>)
    8c58:	0013      	movs	r3, r2
    8c5a:	00db      	lsls	r3, r3, #3
    8c5c:	189b      	adds	r3, r3, r2
    8c5e:	019b      	lsls	r3, r3, #6
    8c60:	585a      	ldr	r2, [r3, r1]
    8c62:	7d93      	ldrb	r3, [r2, #22]
    8c64:	2101      	movs	r1, #1
    8c66:	430b      	orrs	r3, r1
    8c68:	7593      	strb	r3, [r2, #22]
	port[n_port].counters.tx++;
    8c6a:	1dfb      	adds	r3, r7, #7
    8c6c:	781a      	ldrb	r2, [r3, #0]
    8c6e:	480e      	ldr	r0, [pc, #56]	; (8ca8 <usart_write+0x108>)
    8c70:	238d      	movs	r3, #141	; 0x8d
    8c72:	0099      	lsls	r1, r3, #2
    8c74:	0013      	movs	r3, r2
    8c76:	00db      	lsls	r3, r3, #3
    8c78:	189b      	adds	r3, r3, r2
    8c7a:	019b      	lsls	r3, r3, #6
    8c7c:	18c3      	adds	r3, r0, r3
    8c7e:	185b      	adds	r3, r3, r1
    8c80:	681b      	ldr	r3, [r3, #0]
    8c82:	1c59      	adds	r1, r3, #1
    8c84:	4c08      	ldr	r4, [pc, #32]	; (8ca8 <usart_write+0x108>)
    8c86:	238d      	movs	r3, #141	; 0x8d
    8c88:	0098      	lsls	r0, r3, #2
    8c8a:	0013      	movs	r3, r2
    8c8c:	00db      	lsls	r3, r3, #3
    8c8e:	189b      	adds	r3, r3, r2
    8c90:	019b      	lsls	r3, r3, #6
    8c92:	18e3      	adds	r3, r4, r3
    8c94:	181b      	adds	r3, r3, r0
    8c96:	6019      	str	r1, [r3, #0]
	return(size);
    8c98:	1d3b      	adds	r3, r7, #4
    8c9a:	881b      	ldrh	r3, [r3, #0]
}
    8c9c:	0018      	movs	r0, r3
    8c9e:	46bd      	mov	sp, r7
    8ca0:	b003      	add	sp, #12
    8ca2:	bd90      	pop	{r4, r7, pc}
    8ca4:	00006a71 	.word	0x00006a71
    8ca8:	200031f8 	.word	0x200031f8
    8cac:	0000c4e5 	.word	0x0000c4e5
    8cb0:	0000020a 	.word	0x0000020a

00008cb4 <usart_read>:

WORD usart_read (BYTE n_port, BYTE* rbuf,WORD size)
{
    8cb4:	b590      	push	{r4, r7, lr}
    8cb6:	b085      	sub	sp, #20
    8cb8:	af00      	add	r7, sp, #0
    8cba:	6039      	str	r1, [r7, #0]
    8cbc:	0011      	movs	r1, r2
    8cbe:	1dfb      	adds	r3, r7, #7
    8cc0:	1c02      	adds	r2, r0, #0
    8cc2:	701a      	strb	r2, [r3, #0]
    8cc4:	1d3b      	adds	r3, r7, #4
    8cc6:	1c0a      	adds	r2, r1, #0
    8cc8:	801a      	strh	r2, [r3, #0]
	WORD size_1 = 0;
    8cca:	230e      	movs	r3, #14
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	2200      	movs	r2, #0
    8cd0:	801a      	strh	r2, [r3, #0]
	
	if(port[n_port].rn     ==       0x00)			{ port[n_port].rtime=0; return(0); }
    8cd2:	1dfb      	adds	r3, r7, #7
    8cd4:	781a      	ldrb	r2, [r3, #0]
    8cd6:	4948      	ldr	r1, [pc, #288]	; (8df8 <usart_read+0x144>)
    8cd8:	4848      	ldr	r0, [pc, #288]	; (8dfc <usart_read+0x148>)
    8cda:	0013      	movs	r3, r2
    8cdc:	00db      	lsls	r3, r3, #3
    8cde:	189b      	adds	r3, r3, r2
    8ce0:	019b      	lsls	r3, r3, #6
    8ce2:	18cb      	adds	r3, r1, r3
    8ce4:	181b      	adds	r3, r3, r0
    8ce6:	881b      	ldrh	r3, [r3, #0]
    8ce8:	b29b      	uxth	r3, r3
    8cea:	2b00      	cmp	r3, #0
    8cec:	d10e      	bne.n	8d0c <usart_read+0x58>
    8cee:	1dfb      	adds	r3, r7, #7
    8cf0:	781a      	ldrb	r2, [r3, #0]
    8cf2:	4841      	ldr	r0, [pc, #260]	; (8df8 <usart_read+0x144>)
    8cf4:	2385      	movs	r3, #133	; 0x85
    8cf6:	0099      	lsls	r1, r3, #2
    8cf8:	0013      	movs	r3, r2
    8cfa:	00db      	lsls	r3, r3, #3
    8cfc:	189b      	adds	r3, r3, r2
    8cfe:	019b      	lsls	r3, r3, #6
    8d00:	18c3      	adds	r3, r0, r3
    8d02:	185b      	adds	r3, r3, r1
    8d04:	2200      	movs	r2, #0
    8d06:	801a      	strh	r2, [r3, #0]
    8d08:	2300      	movs	r3, #0
    8d0a:	e070      	b.n	8dee <usart_read+0x13a>
	if(port[n_port].rtout  >  port[n_port].rtime)	{ return(0); }
    8d0c:	1dfb      	adds	r3, r7, #7
    8d0e:	781a      	ldrb	r2, [r3, #0]
    8d10:	4839      	ldr	r0, [pc, #228]	; (8df8 <usart_read+0x144>)
    8d12:	2384      	movs	r3, #132	; 0x84
    8d14:	0099      	lsls	r1, r3, #2
    8d16:	0013      	movs	r3, r2
    8d18:	00db      	lsls	r3, r3, #3
    8d1a:	189b      	adds	r3, r3, r2
    8d1c:	019b      	lsls	r3, r3, #6
    8d1e:	18c3      	adds	r3, r0, r3
    8d20:	185b      	adds	r3, r3, r1
    8d22:	881b      	ldrh	r3, [r3, #0]
    8d24:	b299      	uxth	r1, r3
    8d26:	1dfb      	adds	r3, r7, #7
    8d28:	781a      	ldrb	r2, [r3, #0]
    8d2a:	4c33      	ldr	r4, [pc, #204]	; (8df8 <usart_read+0x144>)
    8d2c:	2385      	movs	r3, #133	; 0x85
    8d2e:	0098      	lsls	r0, r3, #2
    8d30:	0013      	movs	r3, r2
    8d32:	00db      	lsls	r3, r3, #3
    8d34:	189b      	adds	r3, r3, r2
    8d36:	019b      	lsls	r3, r3, #6
    8d38:	18e3      	adds	r3, r4, r3
    8d3a:	181b      	adds	r3, r3, r0
    8d3c:	881b      	ldrh	r3, [r3, #0]
    8d3e:	b29b      	uxth	r3, r3
    8d40:	4299      	cmp	r1, r3
    8d42:	d901      	bls.n	8d48 <usart_read+0x94>
    8d44:	2300      	movs	r3, #0
    8d46:	e052      	b.n	8dee <usart_read+0x13a>
		
	size_1 = port[n_port].rn; 
    8d48:	1dfb      	adds	r3, r7, #7
    8d4a:	781a      	ldrb	r2, [r3, #0]
    8d4c:	230e      	movs	r3, #14
    8d4e:	18f9      	adds	r1, r7, r3
    8d50:	4829      	ldr	r0, [pc, #164]	; (8df8 <usart_read+0x144>)
    8d52:	4c2a      	ldr	r4, [pc, #168]	; (8dfc <usart_read+0x148>)
    8d54:	0013      	movs	r3, r2
    8d56:	00db      	lsls	r3, r3, #3
    8d58:	189b      	adds	r3, r3, r2
    8d5a:	019b      	lsls	r3, r3, #6
    8d5c:	18c3      	adds	r3, r0, r3
    8d5e:	191b      	adds	r3, r3, r4
    8d60:	881b      	ldrh	r3, [r3, #0]
    8d62:	800b      	strh	r3, [r1, #0]

	if(size_1 > size) {size_1 = size;}
    8d64:	230e      	movs	r3, #14
    8d66:	18fa      	adds	r2, r7, r3
    8d68:	1d3b      	adds	r3, r7, #4
    8d6a:	8812      	ldrh	r2, [r2, #0]
    8d6c:	881b      	ldrh	r3, [r3, #0]
    8d6e:	429a      	cmp	r2, r3
    8d70:	d904      	bls.n	8d7c <usart_read+0xc8>
    8d72:	230e      	movs	r3, #14
    8d74:	18fb      	adds	r3, r7, r3
    8d76:	1d3a      	adds	r2, r7, #4
    8d78:	8812      	ldrh	r2, [r2, #0]
    8d7a:	801a      	strh	r2, [r3, #0]
	
	memcpy(rbuf,port[n_port].rbuf,size_1);
    8d7c:	1dfb      	adds	r3, r7, #7
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	0013      	movs	r3, r2
    8d82:	00db      	lsls	r3, r3, #3
    8d84:	189b      	adds	r3, r3, r2
    8d86:	019b      	lsls	r3, r3, #6
    8d88:	3309      	adds	r3, #9
    8d8a:	33ff      	adds	r3, #255	; 0xff
    8d8c:	001a      	movs	r2, r3
    8d8e:	4b1a      	ldr	r3, [pc, #104]	; (8df8 <usart_read+0x144>)
    8d90:	18d3      	adds	r3, r2, r3
    8d92:	1c59      	adds	r1, r3, #1
    8d94:	230e      	movs	r3, #14
    8d96:	18fb      	adds	r3, r7, r3
    8d98:	881a      	ldrh	r2, [r3, #0]
    8d9a:	683b      	ldr	r3, [r7, #0]
    8d9c:	0018      	movs	r0, r3
    8d9e:	4b18      	ldr	r3, [pc, #96]	; (8e00 <usart_read+0x14c>)
    8da0:	4798      	blx	r3
	port[n_port].rn = 0;
    8da2:	1dfb      	adds	r3, r7, #7
    8da4:	781a      	ldrb	r2, [r3, #0]
    8da6:	4914      	ldr	r1, [pc, #80]	; (8df8 <usart_read+0x144>)
    8da8:	4814      	ldr	r0, [pc, #80]	; (8dfc <usart_read+0x148>)
    8daa:	0013      	movs	r3, r2
    8dac:	00db      	lsls	r3, r3, #3
    8dae:	189b      	adds	r3, r3, r2
    8db0:	019b      	lsls	r3, r3, #6
    8db2:	18cb      	adds	r3, r1, r3
    8db4:	181b      	adds	r3, r3, r0
    8db6:	2200      	movs	r2, #0
    8db8:	801a      	strh	r2, [r3, #0]
	port[n_port].counters.rx++;
    8dba:	1dfb      	adds	r3, r7, #7
    8dbc:	781a      	ldrb	r2, [r3, #0]
    8dbe:	480e      	ldr	r0, [pc, #56]	; (8df8 <usart_read+0x144>)
    8dc0:	238e      	movs	r3, #142	; 0x8e
    8dc2:	0099      	lsls	r1, r3, #2
    8dc4:	0013      	movs	r3, r2
    8dc6:	00db      	lsls	r3, r3, #3
    8dc8:	189b      	adds	r3, r3, r2
    8dca:	019b      	lsls	r3, r3, #6
    8dcc:	18c3      	adds	r3, r0, r3
    8dce:	185b      	adds	r3, r3, r1
    8dd0:	681b      	ldr	r3, [r3, #0]
    8dd2:	1c59      	adds	r1, r3, #1
    8dd4:	4c08      	ldr	r4, [pc, #32]	; (8df8 <usart_read+0x144>)
    8dd6:	238e      	movs	r3, #142	; 0x8e
    8dd8:	0098      	lsls	r0, r3, #2
    8dda:	0013      	movs	r3, r2
    8ddc:	00db      	lsls	r3, r3, #3
    8dde:	189b      	adds	r3, r3, r2
    8de0:	019b      	lsls	r3, r3, #6
    8de2:	18e3      	adds	r3, r4, r3
    8de4:	181b      	adds	r3, r3, r0
    8de6:	6019      	str	r1, [r3, #0]
	return(size_1);
    8de8:	230e      	movs	r3, #14
    8dea:	18fb      	adds	r3, r7, r3
    8dec:	881b      	ldrh	r3, [r3, #0]
}
    8dee:	0018      	movs	r0, r3
    8df0:	46bd      	mov	sp, r7
    8df2:	b005      	add	sp, #20
    8df4:	bd90      	pop	{r4, r7, pc}
    8df6:	46c0      	nop			; (mov r8, r8)
    8df8:	200031f8 	.word	0x200031f8
    8dfc:	0000020e 	.word	0x0000020e
    8e00:	0000c4e5 	.word	0x0000c4e5

00008e04 <sercom_proc>:

void sercom_proc(BYTE n_port)
{
    8e04:	b5b0      	push	{r4, r5, r7, lr}
    8e06:	b082      	sub	sp, #8
    8e08:	af00      	add	r7, sp, #0
    8e0a:	0002      	movs	r2, r0
    8e0c:	1dfb      	adds	r3, r7, #7
    8e0e:	701a      	strb	r2, [r3, #0]
	if (port[n_port].sercom->USART.STATUS.bit.COLL)		{port[n_port].errors.collision++;		port[n_port].sercom->USART.STATUS.bit.COLL   = 1;}
    8e10:	1dfb      	adds	r3, r7, #7
    8e12:	781a      	ldrb	r2, [r3, #0]
    8e14:	49c4      	ldr	r1, [pc, #784]	; (9128 <sercom_proc+0x324>)
    8e16:	0013      	movs	r3, r2
    8e18:	00db      	lsls	r3, r3, #3
    8e1a:	189b      	adds	r3, r3, r2
    8e1c:	019b      	lsls	r3, r3, #6
    8e1e:	585b      	ldr	r3, [r3, r1]
    8e20:	8b5b      	ldrh	r3, [r3, #26]
    8e22:	069b      	lsls	r3, r3, #26
    8e24:	0fdb      	lsrs	r3, r3, #31
    8e26:	b2db      	uxtb	r3, r3
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d023      	beq.n	8e74 <sercom_proc+0x70>
    8e2c:	1dfb      	adds	r3, r7, #7
    8e2e:	781a      	ldrb	r2, [r3, #0]
    8e30:	49bd      	ldr	r1, [pc, #756]	; (9128 <sercom_proc+0x324>)
    8e32:	48be      	ldr	r0, [pc, #760]	; (912c <sercom_proc+0x328>)
    8e34:	0013      	movs	r3, r2
    8e36:	00db      	lsls	r3, r3, #3
    8e38:	189b      	adds	r3, r3, r2
    8e3a:	019b      	lsls	r3, r3, #6
    8e3c:	18cb      	adds	r3, r1, r3
    8e3e:	181b      	adds	r3, r3, r0
    8e40:	881b      	ldrh	r3, [r3, #0]
    8e42:	b29b      	uxth	r3, r3
    8e44:	3301      	adds	r3, #1
    8e46:	b29c      	uxth	r4, r3
    8e48:	49b7      	ldr	r1, [pc, #732]	; (9128 <sercom_proc+0x324>)
    8e4a:	48b8      	ldr	r0, [pc, #736]	; (912c <sercom_proc+0x328>)
    8e4c:	0013      	movs	r3, r2
    8e4e:	00db      	lsls	r3, r3, #3
    8e50:	189b      	adds	r3, r3, r2
    8e52:	019b      	lsls	r3, r3, #6
    8e54:	18cb      	adds	r3, r1, r3
    8e56:	181b      	adds	r3, r3, r0
    8e58:	1c22      	adds	r2, r4, #0
    8e5a:	801a      	strh	r2, [r3, #0]
    8e5c:	1dfb      	adds	r3, r7, #7
    8e5e:	781a      	ldrb	r2, [r3, #0]
    8e60:	49b1      	ldr	r1, [pc, #708]	; (9128 <sercom_proc+0x324>)
    8e62:	0013      	movs	r3, r2
    8e64:	00db      	lsls	r3, r3, #3
    8e66:	189b      	adds	r3, r3, r2
    8e68:	019b      	lsls	r3, r3, #6
    8e6a:	585a      	ldr	r2, [r3, r1]
    8e6c:	8b53      	ldrh	r3, [r2, #26]
    8e6e:	2120      	movs	r1, #32
    8e70:	430b      	orrs	r3, r1
    8e72:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.ISF)		{port[n_port].errors.synchr++;		port[n_port].sercom->USART.STATUS.bit.ISF    = 1;}
    8e74:	1dfb      	adds	r3, r7, #7
    8e76:	781a      	ldrb	r2, [r3, #0]
    8e78:	49ab      	ldr	r1, [pc, #684]	; (9128 <sercom_proc+0x324>)
    8e7a:	0013      	movs	r3, r2
    8e7c:	00db      	lsls	r3, r3, #3
    8e7e:	189b      	adds	r3, r3, r2
    8e80:	019b      	lsls	r3, r3, #6
    8e82:	585b      	ldr	r3, [r3, r1]
    8e84:	8b5b      	ldrh	r3, [r3, #26]
    8e86:	06db      	lsls	r3, r3, #27
    8e88:	0fdb      	lsrs	r3, r3, #31
    8e8a:	b2db      	uxtb	r3, r3
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	d025      	beq.n	8edc <sercom_proc+0xd8>
    8e90:	1dfb      	adds	r3, r7, #7
    8e92:	781a      	ldrb	r2, [r3, #0]
    8e94:	48a4      	ldr	r0, [pc, #656]	; (9128 <sercom_proc+0x324>)
    8e96:	238b      	movs	r3, #139	; 0x8b
    8e98:	0099      	lsls	r1, r3, #2
    8e9a:	0013      	movs	r3, r2
    8e9c:	00db      	lsls	r3, r3, #3
    8e9e:	189b      	adds	r3, r3, r2
    8ea0:	019b      	lsls	r3, r3, #6
    8ea2:	18c3      	adds	r3, r0, r3
    8ea4:	185b      	adds	r3, r3, r1
    8ea6:	881b      	ldrh	r3, [r3, #0]
    8ea8:	b29b      	uxth	r3, r3
    8eaa:	3301      	adds	r3, #1
    8eac:	b29c      	uxth	r4, r3
    8eae:	489e      	ldr	r0, [pc, #632]	; (9128 <sercom_proc+0x324>)
    8eb0:	238b      	movs	r3, #139	; 0x8b
    8eb2:	0099      	lsls	r1, r3, #2
    8eb4:	0013      	movs	r3, r2
    8eb6:	00db      	lsls	r3, r3, #3
    8eb8:	189b      	adds	r3, r3, r2
    8eba:	019b      	lsls	r3, r3, #6
    8ebc:	18c3      	adds	r3, r0, r3
    8ebe:	185b      	adds	r3, r3, r1
    8ec0:	1c22      	adds	r2, r4, #0
    8ec2:	801a      	strh	r2, [r3, #0]
    8ec4:	1dfb      	adds	r3, r7, #7
    8ec6:	781a      	ldrb	r2, [r3, #0]
    8ec8:	4997      	ldr	r1, [pc, #604]	; (9128 <sercom_proc+0x324>)
    8eca:	0013      	movs	r3, r2
    8ecc:	00db      	lsls	r3, r3, #3
    8ece:	189b      	adds	r3, r3, r2
    8ed0:	019b      	lsls	r3, r3, #6
    8ed2:	585a      	ldr	r2, [r3, r1]
    8ed4:	8b53      	ldrh	r3, [r2, #26]
    8ed6:	2110      	movs	r1, #16
    8ed8:	430b      	orrs	r3, r1
    8eda:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.BUFOVF)	{port[n_port].errors.buf_ovf++;		port[n_port].sercom->USART.STATUS.bit.BUFOVF = 1;}
    8edc:	1dfb      	adds	r3, r7, #7
    8ede:	781a      	ldrb	r2, [r3, #0]
    8ee0:	4991      	ldr	r1, [pc, #580]	; (9128 <sercom_proc+0x324>)
    8ee2:	0013      	movs	r3, r2
    8ee4:	00db      	lsls	r3, r3, #3
    8ee6:	189b      	adds	r3, r3, r2
    8ee8:	019b      	lsls	r3, r3, #6
    8eea:	585b      	ldr	r3, [r3, r1]
    8eec:	8b5b      	ldrh	r3, [r3, #26]
    8eee:	075b      	lsls	r3, r3, #29
    8ef0:	0fdb      	lsrs	r3, r3, #31
    8ef2:	b2db      	uxtb	r3, r3
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d023      	beq.n	8f40 <sercom_proc+0x13c>
    8ef8:	1dfb      	adds	r3, r7, #7
    8efa:	781a      	ldrb	r2, [r3, #0]
    8efc:	498a      	ldr	r1, [pc, #552]	; (9128 <sercom_proc+0x324>)
    8efe:	488c      	ldr	r0, [pc, #560]	; (9130 <sercom_proc+0x32c>)
    8f00:	0013      	movs	r3, r2
    8f02:	00db      	lsls	r3, r3, #3
    8f04:	189b      	adds	r3, r3, r2
    8f06:	019b      	lsls	r3, r3, #6
    8f08:	18cb      	adds	r3, r1, r3
    8f0a:	181b      	adds	r3, r3, r0
    8f0c:	881b      	ldrh	r3, [r3, #0]
    8f0e:	b29b      	uxth	r3, r3
    8f10:	3301      	adds	r3, #1
    8f12:	b29c      	uxth	r4, r3
    8f14:	4984      	ldr	r1, [pc, #528]	; (9128 <sercom_proc+0x324>)
    8f16:	4886      	ldr	r0, [pc, #536]	; (9130 <sercom_proc+0x32c>)
    8f18:	0013      	movs	r3, r2
    8f1a:	00db      	lsls	r3, r3, #3
    8f1c:	189b      	adds	r3, r3, r2
    8f1e:	019b      	lsls	r3, r3, #6
    8f20:	18cb      	adds	r3, r1, r3
    8f22:	181b      	adds	r3, r3, r0
    8f24:	1c22      	adds	r2, r4, #0
    8f26:	801a      	strh	r2, [r3, #0]
    8f28:	1dfb      	adds	r3, r7, #7
    8f2a:	781a      	ldrb	r2, [r3, #0]
    8f2c:	497e      	ldr	r1, [pc, #504]	; (9128 <sercom_proc+0x324>)
    8f2e:	0013      	movs	r3, r2
    8f30:	00db      	lsls	r3, r3, #3
    8f32:	189b      	adds	r3, r3, r2
    8f34:	019b      	lsls	r3, r3, #6
    8f36:	585a      	ldr	r2, [r3, r1]
    8f38:	8b53      	ldrh	r3, [r2, #26]
    8f3a:	2104      	movs	r1, #4
    8f3c:	430b      	orrs	r3, r1
    8f3e:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.FERR)		{port[n_port].errors.st_bit++;		port[n_port].sercom->USART.STATUS.bit.FERR   = 1;}
    8f40:	1dfb      	adds	r3, r7, #7
    8f42:	781a      	ldrb	r2, [r3, #0]
    8f44:	4978      	ldr	r1, [pc, #480]	; (9128 <sercom_proc+0x324>)
    8f46:	0013      	movs	r3, r2
    8f48:	00db      	lsls	r3, r3, #3
    8f4a:	189b      	adds	r3, r3, r2
    8f4c:	019b      	lsls	r3, r3, #6
    8f4e:	585b      	ldr	r3, [r3, r1]
    8f50:	8b5b      	ldrh	r3, [r3, #26]
    8f52:	079b      	lsls	r3, r3, #30
    8f54:	0fdb      	lsrs	r3, r3, #31
    8f56:	b2db      	uxtb	r3, r3
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d025      	beq.n	8fa8 <sercom_proc+0x1a4>
    8f5c:	1dfb      	adds	r3, r7, #7
    8f5e:	781a      	ldrb	r2, [r3, #0]
    8f60:	4871      	ldr	r0, [pc, #452]	; (9128 <sercom_proc+0x324>)
    8f62:	238c      	movs	r3, #140	; 0x8c
    8f64:	0099      	lsls	r1, r3, #2
    8f66:	0013      	movs	r3, r2
    8f68:	00db      	lsls	r3, r3, #3
    8f6a:	189b      	adds	r3, r3, r2
    8f6c:	019b      	lsls	r3, r3, #6
    8f6e:	18c3      	adds	r3, r0, r3
    8f70:	185b      	adds	r3, r3, r1
    8f72:	881b      	ldrh	r3, [r3, #0]
    8f74:	b29b      	uxth	r3, r3
    8f76:	3301      	adds	r3, #1
    8f78:	b29c      	uxth	r4, r3
    8f7a:	486b      	ldr	r0, [pc, #428]	; (9128 <sercom_proc+0x324>)
    8f7c:	238c      	movs	r3, #140	; 0x8c
    8f7e:	0099      	lsls	r1, r3, #2
    8f80:	0013      	movs	r3, r2
    8f82:	00db      	lsls	r3, r3, #3
    8f84:	189b      	adds	r3, r3, r2
    8f86:	019b      	lsls	r3, r3, #6
    8f88:	18c3      	adds	r3, r0, r3
    8f8a:	185b      	adds	r3, r3, r1
    8f8c:	1c22      	adds	r2, r4, #0
    8f8e:	801a      	strh	r2, [r3, #0]
    8f90:	1dfb      	adds	r3, r7, #7
    8f92:	781a      	ldrb	r2, [r3, #0]
    8f94:	4964      	ldr	r1, [pc, #400]	; (9128 <sercom_proc+0x324>)
    8f96:	0013      	movs	r3, r2
    8f98:	00db      	lsls	r3, r3, #3
    8f9a:	189b      	adds	r3, r3, r2
    8f9c:	019b      	lsls	r3, r3, #6
    8f9e:	585a      	ldr	r2, [r3, r1]
    8fa0:	8b53      	ldrh	r3, [r2, #26]
    8fa2:	2102      	movs	r1, #2
    8fa4:	430b      	orrs	r3, r1
    8fa6:	8353      	strh	r3, [r2, #26]
	if (port[n_port].sercom->USART.STATUS.bit.PERR)		{port[n_port].errors.prty++;			port[n_port].sercom->USART.STATUS.bit.PERR   = 1;}
    8fa8:	1dfb      	adds	r3, r7, #7
    8faa:	781a      	ldrb	r2, [r3, #0]
    8fac:	495e      	ldr	r1, [pc, #376]	; (9128 <sercom_proc+0x324>)
    8fae:	0013      	movs	r3, r2
    8fb0:	00db      	lsls	r3, r3, #3
    8fb2:	189b      	adds	r3, r3, r2
    8fb4:	019b      	lsls	r3, r3, #6
    8fb6:	585b      	ldr	r3, [r3, r1]
    8fb8:	8b5b      	ldrh	r3, [r3, #26]
    8fba:	07db      	lsls	r3, r3, #31
    8fbc:	0fdb      	lsrs	r3, r3, #31
    8fbe:	b2db      	uxtb	r3, r3
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d023      	beq.n	900c <sercom_proc+0x208>
    8fc4:	1dfb      	adds	r3, r7, #7
    8fc6:	781a      	ldrb	r2, [r3, #0]
    8fc8:	4957      	ldr	r1, [pc, #348]	; (9128 <sercom_proc+0x324>)
    8fca:	485a      	ldr	r0, [pc, #360]	; (9134 <sercom_proc+0x330>)
    8fcc:	0013      	movs	r3, r2
    8fce:	00db      	lsls	r3, r3, #3
    8fd0:	189b      	adds	r3, r3, r2
    8fd2:	019b      	lsls	r3, r3, #6
    8fd4:	18cb      	adds	r3, r1, r3
    8fd6:	181b      	adds	r3, r3, r0
    8fd8:	881b      	ldrh	r3, [r3, #0]
    8fda:	b29b      	uxth	r3, r3
    8fdc:	3301      	adds	r3, #1
    8fde:	b29c      	uxth	r4, r3
    8fe0:	4951      	ldr	r1, [pc, #324]	; (9128 <sercom_proc+0x324>)
    8fe2:	4854      	ldr	r0, [pc, #336]	; (9134 <sercom_proc+0x330>)
    8fe4:	0013      	movs	r3, r2
    8fe6:	00db      	lsls	r3, r3, #3
    8fe8:	189b      	adds	r3, r3, r2
    8fea:	019b      	lsls	r3, r3, #6
    8fec:	18cb      	adds	r3, r1, r3
    8fee:	181b      	adds	r3, r3, r0
    8ff0:	1c22      	adds	r2, r4, #0
    8ff2:	801a      	strh	r2, [r3, #0]
    8ff4:	1dfb      	adds	r3, r7, #7
    8ff6:	781a      	ldrb	r2, [r3, #0]
    8ff8:	494b      	ldr	r1, [pc, #300]	; (9128 <sercom_proc+0x324>)
    8ffa:	0013      	movs	r3, r2
    8ffc:	00db      	lsls	r3, r3, #3
    8ffe:	189b      	adds	r3, r3, r2
    9000:	019b      	lsls	r3, r3, #6
    9002:	585a      	ldr	r2, [r3, r1]
    9004:	8b53      	ldrh	r3, [r2, #26]
    9006:	2101      	movs	r1, #1
    9008:	430b      	orrs	r3, r1
    900a:	8353      	strh	r3, [r2, #26]
		
	if (port[n_port].sercom->USART.INTFLAG.bit.RXC)
    900c:	1dfb      	adds	r3, r7, #7
    900e:	781a      	ldrb	r2, [r3, #0]
    9010:	4945      	ldr	r1, [pc, #276]	; (9128 <sercom_proc+0x324>)
    9012:	0013      	movs	r3, r2
    9014:	00db      	lsls	r3, r3, #3
    9016:	189b      	adds	r3, r3, r2
    9018:	019b      	lsls	r3, r3, #6
    901a:	585b      	ldr	r3, [r3, r1]
    901c:	7e1b      	ldrb	r3, [r3, #24]
    901e:	075b      	lsls	r3, r3, #29
    9020:	0fdb      	lsrs	r3, r3, #31
    9022:	b2db      	uxtb	r3, r3
    9024:	2b00      	cmp	r3, #0
    9026:	d100      	bne.n	902a <sercom_proc+0x226>
    9028:	e08a      	b.n	9140 <sercom_proc+0x33c>
	{
		port[n_port].rxc++;
    902a:	1dfb      	adds	r3, r7, #7
    902c:	781a      	ldrb	r2, [r3, #0]
    902e:	493e      	ldr	r1, [pc, #248]	; (9128 <sercom_proc+0x324>)
    9030:	4841      	ldr	r0, [pc, #260]	; (9138 <sercom_proc+0x334>)
    9032:	0013      	movs	r3, r2
    9034:	00db      	lsls	r3, r3, #3
    9036:	189b      	adds	r3, r3, r2
    9038:	019b      	lsls	r3, r3, #6
    903a:	18cb      	adds	r3, r1, r3
    903c:	181b      	adds	r3, r3, r0
    903e:	881b      	ldrh	r3, [r3, #0]
    9040:	b29b      	uxth	r3, r3
    9042:	3301      	adds	r3, #1
    9044:	b29c      	uxth	r4, r3
    9046:	4938      	ldr	r1, [pc, #224]	; (9128 <sercom_proc+0x324>)
    9048:	483b      	ldr	r0, [pc, #236]	; (9138 <sercom_proc+0x334>)
    904a:	0013      	movs	r3, r2
    904c:	00db      	lsls	r3, r3, #3
    904e:	189b      	adds	r3, r3, r2
    9050:	019b      	lsls	r3, r3, #6
    9052:	18cb      	adds	r3, r1, r3
    9054:	181b      	adds	r3, r3, r0
    9056:	1c22      	adds	r2, r4, #0
    9058:	801a      	strh	r2, [r3, #0]
		if(port[n_port].rn >= USART_BUF_SIZE){port[n_port].rn = 0;}
    905a:	1dfb      	adds	r3, r7, #7
    905c:	781a      	ldrb	r2, [r3, #0]
    905e:	4932      	ldr	r1, [pc, #200]	; (9128 <sercom_proc+0x324>)
    9060:	4836      	ldr	r0, [pc, #216]	; (913c <sercom_proc+0x338>)
    9062:	0013      	movs	r3, r2
    9064:	00db      	lsls	r3, r3, #3
    9066:	189b      	adds	r3, r3, r2
    9068:	019b      	lsls	r3, r3, #6
    906a:	18cb      	adds	r3, r1, r3
    906c:	181b      	adds	r3, r3, r0
    906e:	881b      	ldrh	r3, [r3, #0]
    9070:	b29b      	uxth	r3, r3
    9072:	2bff      	cmp	r3, #255	; 0xff
    9074:	d90b      	bls.n	908e <sercom_proc+0x28a>
    9076:	1dfb      	adds	r3, r7, #7
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	492b      	ldr	r1, [pc, #172]	; (9128 <sercom_proc+0x324>)
    907c:	482f      	ldr	r0, [pc, #188]	; (913c <sercom_proc+0x338>)
    907e:	0013      	movs	r3, r2
    9080:	00db      	lsls	r3, r3, #3
    9082:	189b      	adds	r3, r3, r2
    9084:	019b      	lsls	r3, r3, #6
    9086:	18cb      	adds	r3, r1, r3
    9088:	181b      	adds	r3, r3, r0
    908a:	2200      	movs	r2, #0
    908c:	801a      	strh	r2, [r3, #0]
		port[n_port].rbuf[port[n_port].rn] = port[n_port].sercom->USART.DATA.reg;
    908e:	1dfb      	adds	r3, r7, #7
    9090:	781a      	ldrb	r2, [r3, #0]
    9092:	1dfb      	adds	r3, r7, #7
    9094:	7819      	ldrb	r1, [r3, #0]
    9096:	4824      	ldr	r0, [pc, #144]	; (9128 <sercom_proc+0x324>)
    9098:	4c28      	ldr	r4, [pc, #160]	; (913c <sercom_proc+0x338>)
    909a:	000b      	movs	r3, r1
    909c:	00db      	lsls	r3, r3, #3
    909e:	185b      	adds	r3, r3, r1
    90a0:	019b      	lsls	r3, r3, #6
    90a2:	18c3      	adds	r3, r0, r3
    90a4:	191b      	adds	r3, r3, r4
    90a6:	881b      	ldrh	r3, [r3, #0]
    90a8:	b29b      	uxth	r3, r3
    90aa:	001d      	movs	r5, r3
    90ac:	1dfb      	adds	r3, r7, #7
    90ae:	7819      	ldrb	r1, [r3, #0]
    90b0:	481d      	ldr	r0, [pc, #116]	; (9128 <sercom_proc+0x324>)
    90b2:	000b      	movs	r3, r1
    90b4:	00db      	lsls	r3, r3, #3
    90b6:	185b      	adds	r3, r3, r1
    90b8:	019b      	lsls	r3, r3, #6
    90ba:	581b      	ldr	r3, [r3, r0]
    90bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    90be:	b29b      	uxth	r3, r3
    90c0:	b2dc      	uxtb	r4, r3
    90c2:	4819      	ldr	r0, [pc, #100]	; (9128 <sercom_proc+0x324>)
    90c4:	230a      	movs	r3, #10
    90c6:	33ff      	adds	r3, #255	; 0xff
    90c8:	0019      	movs	r1, r3
    90ca:	0013      	movs	r3, r2
    90cc:	00db      	lsls	r3, r3, #3
    90ce:	189b      	adds	r3, r3, r2
    90d0:	019b      	lsls	r3, r3, #6
    90d2:	18c3      	adds	r3, r0, r3
    90d4:	195b      	adds	r3, r3, r5
    90d6:	185b      	adds	r3, r3, r1
    90d8:	1c22      	adds	r2, r4, #0
    90da:	701a      	strb	r2, [r3, #0]
		port[n_port].rn++;
    90dc:	1dfb      	adds	r3, r7, #7
    90de:	781a      	ldrb	r2, [r3, #0]
    90e0:	4911      	ldr	r1, [pc, #68]	; (9128 <sercom_proc+0x324>)
    90e2:	4816      	ldr	r0, [pc, #88]	; (913c <sercom_proc+0x338>)
    90e4:	0013      	movs	r3, r2
    90e6:	00db      	lsls	r3, r3, #3
    90e8:	189b      	adds	r3, r3, r2
    90ea:	019b      	lsls	r3, r3, #6
    90ec:	18cb      	adds	r3, r1, r3
    90ee:	181b      	adds	r3, r3, r0
    90f0:	881b      	ldrh	r3, [r3, #0]
    90f2:	b29b      	uxth	r3, r3
    90f4:	3301      	adds	r3, #1
    90f6:	b29c      	uxth	r4, r3
    90f8:	490b      	ldr	r1, [pc, #44]	; (9128 <sercom_proc+0x324>)
    90fa:	4810      	ldr	r0, [pc, #64]	; (913c <sercom_proc+0x338>)
    90fc:	0013      	movs	r3, r2
    90fe:	00db      	lsls	r3, r3, #3
    9100:	189b      	adds	r3, r3, r2
    9102:	019b      	lsls	r3, r3, #6
    9104:	18cb      	adds	r3, r1, r3
    9106:	181b      	adds	r3, r3, r0
    9108:	1c22      	adds	r2, r4, #0
    910a:	801a      	strh	r2, [r3, #0]
		port[n_port].rtime = 0;
    910c:	1dfb      	adds	r3, r7, #7
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	4805      	ldr	r0, [pc, #20]	; (9128 <sercom_proc+0x324>)
    9112:	2385      	movs	r3, #133	; 0x85
    9114:	0099      	lsls	r1, r3, #2
    9116:	0013      	movs	r3, r2
    9118:	00db      	lsls	r3, r3, #3
    911a:	189b      	adds	r3, r3, r2
    911c:	019b      	lsls	r3, r3, #6
    911e:	18c3      	adds	r3, r0, r3
    9120:	185b      	adds	r3, r3, r1
    9122:	2200      	movs	r2, #0
    9124:	801a      	strh	r2, [r3, #0]
		return;
    9126:	e0fb      	b.n	9320 <sercom_proc+0x51c>
    9128:	200031f8 	.word	0x200031f8
    912c:	0000022a 	.word	0x0000022a
    9130:	0000022e 	.word	0x0000022e
    9134:	00000232 	.word	0x00000232
    9138:	00000226 	.word	0x00000226
    913c:	0000020e 	.word	0x0000020e
	}

	if(port[n_port].sercom->USART.INTFLAG.bit.TXC)
    9140:	1dfb      	adds	r3, r7, #7
    9142:	781a      	ldrb	r2, [r3, #0]
    9144:	4978      	ldr	r1, [pc, #480]	; (9328 <sercom_proc+0x524>)
    9146:	0013      	movs	r3, r2
    9148:	00db      	lsls	r3, r3, #3
    914a:	189b      	adds	r3, r3, r2
    914c:	019b      	lsls	r3, r3, #6
    914e:	585b      	ldr	r3, [r3, r1]
    9150:	7e1b      	ldrb	r3, [r3, #24]
    9152:	079b      	lsls	r3, r3, #30
    9154:	0fdb      	lsrs	r3, r3, #31
    9156:	b2db      	uxtb	r3, r3
    9158:	2b00      	cmp	r3, #0
    915a:	d045      	beq.n	91e8 <sercom_proc+0x3e4>
	{
		port[n_port].txc++;
    915c:	1dfb      	adds	r3, r7, #7
    915e:	781a      	ldrb	r2, [r3, #0]
    9160:	4871      	ldr	r0, [pc, #452]	; (9328 <sercom_proc+0x524>)
    9162:	238a      	movs	r3, #138	; 0x8a
    9164:	0099      	lsls	r1, r3, #2
    9166:	0013      	movs	r3, r2
    9168:	00db      	lsls	r3, r3, #3
    916a:	189b      	adds	r3, r3, r2
    916c:	019b      	lsls	r3, r3, #6
    916e:	18c3      	adds	r3, r0, r3
    9170:	185b      	adds	r3, r3, r1
    9172:	881b      	ldrh	r3, [r3, #0]
    9174:	b29b      	uxth	r3, r3
    9176:	3301      	adds	r3, #1
    9178:	b29c      	uxth	r4, r3
    917a:	486b      	ldr	r0, [pc, #428]	; (9328 <sercom_proc+0x524>)
    917c:	238a      	movs	r3, #138	; 0x8a
    917e:	0099      	lsls	r1, r3, #2
    9180:	0013      	movs	r3, r2
    9182:	00db      	lsls	r3, r3, #3
    9184:	189b      	adds	r3, r3, r2
    9186:	019b      	lsls	r3, r3, #6
    9188:	18c3      	adds	r3, r0, r3
    918a:	185b      	adds	r3, r3, r1
    918c:	1c22      	adds	r2, r4, #0
    918e:	801a      	strh	r2, [r3, #0]
		port[n_port].sercom->USART.INTFLAG.bit.TXC = 1;
    9190:	1dfb      	adds	r3, r7, #7
    9192:	781a      	ldrb	r2, [r3, #0]
    9194:	4964      	ldr	r1, [pc, #400]	; (9328 <sercom_proc+0x524>)
    9196:	0013      	movs	r3, r2
    9198:	00db      	lsls	r3, r3, #3
    919a:	189b      	adds	r3, r3, r2
    919c:	019b      	lsls	r3, r3, #6
    919e:	585a      	ldr	r2, [r3, r1]
    91a0:	7e13      	ldrb	r3, [r2, #24]
    91a2:	2102      	movs	r1, #2
    91a4:	430b      	orrs	r3, r1
    91a6:	7613      	strb	r3, [r2, #24]
		pin_ctrl(RTS, n_port, CLR);
    91a8:	1dfb      	adds	r3, r7, #7
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	2202      	movs	r2, #2
    91ae:	0019      	movs	r1, r3
    91b0:	2000      	movs	r0, #0
    91b2:	4b5e      	ldr	r3, [pc, #376]	; (932c <sercom_proc+0x528>)
    91b4:	4798      	blx	r3
		port[n_port].sercom->USART.INTENCLR.bit.TXC = 1;
    91b6:	1dfb      	adds	r3, r7, #7
    91b8:	781a      	ldrb	r2, [r3, #0]
    91ba:	495b      	ldr	r1, [pc, #364]	; (9328 <sercom_proc+0x524>)
    91bc:	0013      	movs	r3, r2
    91be:	00db      	lsls	r3, r3, #3
    91c0:	189b      	adds	r3, r3, r2
    91c2:	019b      	lsls	r3, r3, #6
    91c4:	585a      	ldr	r2, [r3, r1]
    91c6:	7d13      	ldrb	r3, [r2, #20]
    91c8:	2102      	movs	r1, #2
    91ca:	430b      	orrs	r3, r1
    91cc:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.RXC = 1;
    91ce:	1dfb      	adds	r3, r7, #7
    91d0:	781a      	ldrb	r2, [r3, #0]
    91d2:	4955      	ldr	r1, [pc, #340]	; (9328 <sercom_proc+0x524>)
    91d4:	0013      	movs	r3, r2
    91d6:	00db      	lsls	r3, r3, #3
    91d8:	189b      	adds	r3, r3, r2
    91da:	019b      	lsls	r3, r3, #6
    91dc:	585a      	ldr	r2, [r3, r1]
    91de:	7d93      	ldrb	r3, [r2, #22]
    91e0:	2104      	movs	r1, #4
    91e2:	430b      	orrs	r3, r1
    91e4:	7593      	strb	r3, [r2, #22]
		return;
    91e6:	e09b      	b.n	9320 <sercom_proc+0x51c>
	}
	
	if(port[n_port].sercom->USART.INTFLAG.bit.DRE)
    91e8:	1dfb      	adds	r3, r7, #7
    91ea:	781a      	ldrb	r2, [r3, #0]
    91ec:	494e      	ldr	r1, [pc, #312]	; (9328 <sercom_proc+0x524>)
    91ee:	0013      	movs	r3, r2
    91f0:	00db      	lsls	r3, r3, #3
    91f2:	189b      	adds	r3, r3, r2
    91f4:	019b      	lsls	r3, r3, #6
    91f6:	585b      	ldr	r3, [r3, r1]
    91f8:	7e1b      	ldrb	r3, [r3, #24]
    91fa:	07db      	lsls	r3, r3, #31
    91fc:	0fdb      	lsrs	r3, r3, #31
    91fe:	b2db      	uxtb	r3, r3
    9200:	2b00      	cmp	r3, #0
    9202:	d100      	bne.n	9206 <sercom_proc+0x402>
    9204:	e08c      	b.n	9320 <sercom_proc+0x51c>
	{
		port[n_port].dre++;
    9206:	1dfb      	adds	r3, r7, #7
    9208:	781a      	ldrb	r2, [r3, #0]
    920a:	4847      	ldr	r0, [pc, #284]	; (9328 <sercom_proc+0x524>)
    920c:	2389      	movs	r3, #137	; 0x89
    920e:	0099      	lsls	r1, r3, #2
    9210:	0013      	movs	r3, r2
    9212:	00db      	lsls	r3, r3, #3
    9214:	189b      	adds	r3, r3, r2
    9216:	019b      	lsls	r3, r3, #6
    9218:	18c3      	adds	r3, r0, r3
    921a:	185b      	adds	r3, r3, r1
    921c:	881b      	ldrh	r3, [r3, #0]
    921e:	b29b      	uxth	r3, r3
    9220:	3301      	adds	r3, #1
    9222:	b29c      	uxth	r4, r3
    9224:	4840      	ldr	r0, [pc, #256]	; (9328 <sercom_proc+0x524>)
    9226:	2389      	movs	r3, #137	; 0x89
    9228:	0099      	lsls	r1, r3, #2
    922a:	0013      	movs	r3, r2
    922c:	00db      	lsls	r3, r3, #3
    922e:	189b      	adds	r3, r3, r2
    9230:	019b      	lsls	r3, r3, #6
    9232:	18c3      	adds	r3, r0, r3
    9234:	185b      	adds	r3, r3, r1
    9236:	1c22      	adds	r2, r4, #0
    9238:	801a      	strh	r2, [r3, #0]
		if(port[n_port].wx < port[n_port].wn)
    923a:	1dfb      	adds	r3, r7, #7
    923c:	781a      	ldrb	r2, [r3, #0]
    923e:	483a      	ldr	r0, [pc, #232]	; (9328 <sercom_proc+0x524>)
    9240:	2383      	movs	r3, #131	; 0x83
    9242:	0099      	lsls	r1, r3, #2
    9244:	0013      	movs	r3, r2
    9246:	00db      	lsls	r3, r3, #3
    9248:	189b      	adds	r3, r3, r2
    924a:	019b      	lsls	r3, r3, #6
    924c:	18c3      	adds	r3, r0, r3
    924e:	185b      	adds	r3, r3, r1
    9250:	881b      	ldrh	r3, [r3, #0]
    9252:	b299      	uxth	r1, r3
    9254:	1dfb      	adds	r3, r7, #7
    9256:	781a      	ldrb	r2, [r3, #0]
    9258:	4833      	ldr	r0, [pc, #204]	; (9328 <sercom_proc+0x524>)
    925a:	4c35      	ldr	r4, [pc, #212]	; (9330 <sercom_proc+0x52c>)
    925c:	0013      	movs	r3, r2
    925e:	00db      	lsls	r3, r3, #3
    9260:	189b      	adds	r3, r3, r2
    9262:	019b      	lsls	r3, r3, #6
    9264:	18c3      	adds	r3, r0, r3
    9266:	191b      	adds	r3, r3, r4
    9268:	881b      	ldrh	r3, [r3, #0]
    926a:	b29b      	uxth	r3, r3
    926c:	4299      	cmp	r1, r3
    926e:	d23e      	bcs.n	92ee <sercom_proc+0x4ea>
		{
			port[n_port].sercom->USART.DATA.reg = port[n_port].wbuf[port[n_port].wx];
    9270:	1dfb      	adds	r3, r7, #7
    9272:	781a      	ldrb	r2, [r3, #0]
    9274:	492c      	ldr	r1, [pc, #176]	; (9328 <sercom_proc+0x524>)
    9276:	0013      	movs	r3, r2
    9278:	00db      	lsls	r3, r3, #3
    927a:	189b      	adds	r3, r3, r2
    927c:	019b      	lsls	r3, r3, #6
    927e:	5858      	ldr	r0, [r3, r1]
    9280:	1dfb      	adds	r3, r7, #7
    9282:	781a      	ldrb	r2, [r3, #0]
    9284:	1dfb      	adds	r3, r7, #7
    9286:	7819      	ldrb	r1, [r3, #0]
    9288:	4d27      	ldr	r5, [pc, #156]	; (9328 <sercom_proc+0x524>)
    928a:	2383      	movs	r3, #131	; 0x83
    928c:	009c      	lsls	r4, r3, #2
    928e:	000b      	movs	r3, r1
    9290:	00db      	lsls	r3, r3, #3
    9292:	185b      	adds	r3, r3, r1
    9294:	019b      	lsls	r3, r3, #6
    9296:	18eb      	adds	r3, r5, r3
    9298:	191b      	adds	r3, r3, r4
    929a:	881b      	ldrh	r3, [r3, #0]
    929c:	b29b      	uxth	r3, r3
    929e:	001c      	movs	r4, r3
    92a0:	4921      	ldr	r1, [pc, #132]	; (9328 <sercom_proc+0x524>)
    92a2:	0013      	movs	r3, r2
    92a4:	00db      	lsls	r3, r3, #3
    92a6:	189b      	adds	r3, r3, r2
    92a8:	019b      	lsls	r3, r3, #6
    92aa:	18cb      	adds	r3, r1, r3
    92ac:	191b      	adds	r3, r3, r4
    92ae:	3309      	adds	r3, #9
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	b2db      	uxtb	r3, r3
    92b4:	b29b      	uxth	r3, r3
    92b6:	8503      	strh	r3, [r0, #40]	; 0x28
			port[n_port].wx  ++;
    92b8:	1dfb      	adds	r3, r7, #7
    92ba:	781a      	ldrb	r2, [r3, #0]
    92bc:	481a      	ldr	r0, [pc, #104]	; (9328 <sercom_proc+0x524>)
    92be:	2383      	movs	r3, #131	; 0x83
    92c0:	0099      	lsls	r1, r3, #2
    92c2:	0013      	movs	r3, r2
    92c4:	00db      	lsls	r3, r3, #3
    92c6:	189b      	adds	r3, r3, r2
    92c8:	019b      	lsls	r3, r3, #6
    92ca:	18c3      	adds	r3, r0, r3
    92cc:	185b      	adds	r3, r3, r1
    92ce:	881b      	ldrh	r3, [r3, #0]
    92d0:	b29b      	uxth	r3, r3
    92d2:	3301      	adds	r3, #1
    92d4:	b29c      	uxth	r4, r3
    92d6:	4814      	ldr	r0, [pc, #80]	; (9328 <sercom_proc+0x524>)
    92d8:	2383      	movs	r3, #131	; 0x83
    92da:	0099      	lsls	r1, r3, #2
    92dc:	0013      	movs	r3, r2
    92de:	00db      	lsls	r3, r3, #3
    92e0:	189b      	adds	r3, r3, r2
    92e2:	019b      	lsls	r3, r3, #6
    92e4:	18c3      	adds	r3, r0, r3
    92e6:	185b      	adds	r3, r3, r1
    92e8:	1c22      	adds	r2, r4, #0
    92ea:	801a      	strh	r2, [r3, #0]
			return;
    92ec:	e018      	b.n	9320 <sercom_proc+0x51c>
		}
		port[n_port].sercom->USART.INTENCLR.bit.DRE=1;
    92ee:	1dfb      	adds	r3, r7, #7
    92f0:	781a      	ldrb	r2, [r3, #0]
    92f2:	490d      	ldr	r1, [pc, #52]	; (9328 <sercom_proc+0x524>)
    92f4:	0013      	movs	r3, r2
    92f6:	00db      	lsls	r3, r3, #3
    92f8:	189b      	adds	r3, r3, r2
    92fa:	019b      	lsls	r3, r3, #6
    92fc:	585a      	ldr	r2, [r3, r1]
    92fe:	7d13      	ldrb	r3, [r2, #20]
    9300:	2101      	movs	r1, #1
    9302:	430b      	orrs	r3, r1
    9304:	7513      	strb	r3, [r2, #20]
		port[n_port].sercom->USART.INTENSET.bit.TXC=1;
    9306:	1dfb      	adds	r3, r7, #7
    9308:	781a      	ldrb	r2, [r3, #0]
    930a:	4907      	ldr	r1, [pc, #28]	; (9328 <sercom_proc+0x524>)
    930c:	0013      	movs	r3, r2
    930e:	00db      	lsls	r3, r3, #3
    9310:	189b      	adds	r3, r3, r2
    9312:	019b      	lsls	r3, r3, #6
    9314:	585a      	ldr	r2, [r3, r1]
    9316:	7d93      	ldrb	r3, [r2, #22]
    9318:	2102      	movs	r1, #2
    931a:	430b      	orrs	r3, r1
    931c:	7593      	strb	r3, [r2, #22]
		return;
    931e:	46c0      	nop			; (mov r8, r8)
	}
};
    9320:	46bd      	mov	sp, r7
    9322:	b002      	add	sp, #8
    9324:	bdb0      	pop	{r4, r5, r7, pc}
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	200031f8 	.word	0x200031f8
    932c:	00006a71 	.word	0x00006a71
    9330:	0000020a 	.word	0x0000020a

00009334 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    9334:	b580      	push	{r7, lr}
    9336:	af00      	add	r7, sp, #0
	sercom_proc(0);
    9338:	2000      	movs	r0, #0
    933a:	f7ff fd63 	bl	8e04 <sercom_proc>
}
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	46bd      	mov	sp, r7
    9342:	bd80      	pop	{r7, pc}

00009344 <SERCOM2_Handler>:


void SERCOM2_Handler(void)
{
    9344:	b580      	push	{r7, lr}
    9346:	af00      	add	r7, sp, #0
	sercom_proc(1);
    9348:	2001      	movs	r0, #1
    934a:	f7ff fd5b 	bl	8e04 <sercom_proc>
}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	46bd      	mov	sp, r7
    9352:	bd80      	pop	{r7, pc}

00009354 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    9354:	b580      	push	{r7, lr}
    9356:	af00      	add	r7, sp, #0
	sercom_proc(2);
    9358:	2002      	movs	r0, #2
    935a:	f7ff fd53 	bl	8e04 <sercom_proc>
}
    935e:	46c0      	nop			; (mov r8, r8)
    9360:	46bd      	mov	sp, r7
    9362:	bd80      	pop	{r7, pc}

00009364 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    9364:	b580      	push	{r7, lr}
    9366:	af00      	add	r7, sp, #0
	sercom_proc(3);
    9368:	2003      	movs	r0, #3
    936a:	f7ff fd4b 	bl	8e04 <sercom_proc>
}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	46bd      	mov	sp, r7
    9372:	bd80      	pop	{r7, pc}

00009374 <w5500_init_reg>:
W5500_MODE w5500_mode;

volatile WORD sizert=0;

BYTE w5500_init_reg(void)
{
    9374:	b580      	push	{r7, lr}
    9376:	af00      	add	r7, sp, #0
	pin_ctrl(W55,PWR,SET);
    9378:	2201      	movs	r2, #1
    937a:	2100      	movs	r1, #0
    937c:	2002      	movs	r0, #2
    937e:	4b19      	ldr	r3, [pc, #100]	; (93e4 <w5500_init_reg+0x70>)
    9380:	4798      	blx	r3
	
	
		
	if(ip_init()	)	{err_dword.ip_init_er   = 1;	return ERROR;}
    9382:	f000 f893 	bl	94ac <ip_init>
    9386:	1e03      	subs	r3, r0, #0
    9388:	d007      	beq.n	939a <w5500_init_reg+0x26>
    938a:	4b17      	ldr	r3, [pc, #92]	; (93e8 <w5500_init_reg+0x74>)
    938c:	781a      	ldrb	r2, [r3, #0]
    938e:	2180      	movs	r1, #128	; 0x80
    9390:	4249      	negs	r1, r1
    9392:	430a      	orrs	r2, r1
    9394:	701a      	strb	r2, [r3, #0]
    9396:	2302      	movs	r3, #2
    9398:	e021      	b.n	93de <w5500_init_reg+0x6a>
	if(mask_init()	)	{err_dword.mask_init_er = 1;	return ERROR;}
    939a:	f000 f867 	bl	946c <mask_init>
    939e:	1e03      	subs	r3, r0, #0
    93a0:	d006      	beq.n	93b0 <w5500_init_reg+0x3c>
    93a2:	4b11      	ldr	r3, [pc, #68]	; (93e8 <w5500_init_reg+0x74>)
    93a4:	785a      	ldrb	r2, [r3, #1]
    93a6:	2101      	movs	r1, #1
    93a8:	430a      	orrs	r2, r1
    93aa:	705a      	strb	r2, [r3, #1]
    93ac:	2302      	movs	r3, #2
    93ae:	e016      	b.n	93de <w5500_init_reg+0x6a>
	if(gw_init()	)	{err_dword.gw_init_er   = 1;	return ERROR;}		
    93b0:	f000 f83c 	bl	942c <gw_init>
    93b4:	1e03      	subs	r3, r0, #0
    93b6:	d006      	beq.n	93c6 <w5500_init_reg+0x52>
    93b8:	4b0b      	ldr	r3, [pc, #44]	; (93e8 <w5500_init_reg+0x74>)
    93ba:	785a      	ldrb	r2, [r3, #1]
    93bc:	2102      	movs	r1, #2
    93be:	430a      	orrs	r2, r1
    93c0:	705a      	strb	r2, [r3, #1]
    93c2:	2302      	movs	r3, #2
    93c4:	e00b      	b.n	93de <w5500_init_reg+0x6a>
	if(mac_init()	)	{err_dword.mac_init_er  = 1;	return ERROR;}
    93c6:	f000 f811 	bl	93ec <mac_init>
    93ca:	1e03      	subs	r3, r0, #0
    93cc:	d006      	beq.n	93dc <w5500_init_reg+0x68>
    93ce:	4b06      	ldr	r3, [pc, #24]	; (93e8 <w5500_init_reg+0x74>)
    93d0:	785a      	ldrb	r2, [r3, #1]
    93d2:	2104      	movs	r1, #4
    93d4:	430a      	orrs	r2, r1
    93d6:	705a      	strb	r2, [r3, #1]
    93d8:	2302      	movs	r3, #2
    93da:	e000      	b.n	93de <w5500_init_reg+0x6a>
		
	return SUCCESS;
    93dc:	2300      	movs	r3, #0
}
    93de:	0018      	movs	r0, r3
    93e0:	46bd      	mov	sp, r7
    93e2:	bd80      	pop	{r7, pc}
    93e4:	00006a71 	.word	0x00006a71
    93e8:	2000254c 	.word	0x2000254c

000093ec <mac_init>:

BYTE mac_init(void)
{
    93ec:	b5b0      	push	{r4, r5, r7, lr}
    93ee:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MAC_ADDR_0,COMMON_REGISTER,cfg_2.mac_addr,sizeof(cfg_2.mac_addr),10);
    93f0:	4b0b      	ldr	r3, [pc, #44]	; (9420 <mac_init+0x34>)
    93f2:	220a      	movs	r2, #10
    93f4:	801a      	strh	r2, [r3, #0]
    93f6:	e006      	b.n	9406 <mac_init+0x1a>
    93f8:	4b09      	ldr	r3, [pc, #36]	; (9420 <mac_init+0x34>)
    93fa:	881b      	ldrh	r3, [r3, #0]
    93fc:	b29b      	uxth	r3, r3
    93fe:	2b00      	cmp	r3, #0
    9400:	d101      	bne.n	9406 <mac_init+0x1a>
    9402:	2301      	movs	r3, #1
    9404:	e008      	b.n	9418 <mac_init+0x2c>
    9406:	4a07      	ldr	r2, [pc, #28]	; (9424 <mac_init+0x38>)
    9408:	2306      	movs	r3, #6
    940a:	2100      	movs	r1, #0
    940c:	2009      	movs	r0, #9
    940e:	4c06      	ldr	r4, [pc, #24]	; (9428 <mac_init+0x3c>)
    9410:	47a0      	blx	r4
    9412:	1e03      	subs	r3, r0, #0
    9414:	d0f0      	beq.n	93f8 <mac_init+0xc>
	return SUCCESS;
    9416:	2300      	movs	r3, #0
}
    9418:	0018      	movs	r0, r3
    941a:	46bd      	mov	sp, r7
    941c:	bdb0      	pop	{r4, r5, r7, pc}
    941e:	46c0      	nop			; (mov r8, r8)
    9420:	200031f0 	.word	0x200031f0
    9424:	20003bc0 	.word	0x20003bc0
    9428:	00007635 	.word	0x00007635

0000942c <gw_init>:
BYTE gw_init(void)
{
    942c:	b5b0      	push	{r4, r5, r7, lr}
    942e:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_GATEWAY_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_gate,sizeof(cfg_1.com_network.ip_gate),10);
    9430:	4b0b      	ldr	r3, [pc, #44]	; (9460 <gw_init+0x34>)
    9432:	220a      	movs	r2, #10
    9434:	801a      	strh	r2, [r3, #0]
    9436:	e006      	b.n	9446 <gw_init+0x1a>
    9438:	4b09      	ldr	r3, [pc, #36]	; (9460 <gw_init+0x34>)
    943a:	881b      	ldrh	r3, [r3, #0]
    943c:	b29b      	uxth	r3, r3
    943e:	2b00      	cmp	r3, #0
    9440:	d101      	bne.n	9446 <gw_init+0x1a>
    9442:	2301      	movs	r3, #1
    9444:	e008      	b.n	9458 <gw_init+0x2c>
    9446:	4a07      	ldr	r2, [pc, #28]	; (9464 <gw_init+0x38>)
    9448:	2304      	movs	r3, #4
    944a:	2100      	movs	r1, #0
    944c:	2001      	movs	r0, #1
    944e:	4c06      	ldr	r4, [pc, #24]	; (9468 <gw_init+0x3c>)
    9450:	47a0      	blx	r4
    9452:	1e03      	subs	r3, r0, #0
    9454:	d0f0      	beq.n	9438 <gw_init+0xc>
	return SUCCESS;
    9456:	2300      	movs	r3, #0
}
    9458:	0018      	movs	r0, r3
    945a:	46bd      	mov	sp, r7
    945c:	bdb0      	pop	{r4, r5, r7, pc}
    945e:	46c0      	nop			; (mov r8, r8)
    9460:	200031f0 	.word	0x200031f0
    9464:	20003df0 	.word	0x20003df0
    9468:	00007635 	.word	0x00007635

0000946c <mask_init>:
BYTE mask_init(void)
{
    946c:	b5b0      	push	{r4, r5, r7, lr}
    946e:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_MASK_ADDR_0,COMMON_REGISTER,cfg_1.com_network.ip_mask,sizeof(cfg_1.com_network.ip_mask),10);
    9470:	4b0b      	ldr	r3, [pc, #44]	; (94a0 <mask_init+0x34>)
    9472:	220a      	movs	r2, #10
    9474:	801a      	strh	r2, [r3, #0]
    9476:	e006      	b.n	9486 <mask_init+0x1a>
    9478:	4b09      	ldr	r3, [pc, #36]	; (94a0 <mask_init+0x34>)
    947a:	881b      	ldrh	r3, [r3, #0]
    947c:	b29b      	uxth	r3, r3
    947e:	2b00      	cmp	r3, #0
    9480:	d101      	bne.n	9486 <mask_init+0x1a>
    9482:	2301      	movs	r3, #1
    9484:	e008      	b.n	9498 <mask_init+0x2c>
    9486:	4a07      	ldr	r2, [pc, #28]	; (94a4 <mask_init+0x38>)
    9488:	2304      	movs	r3, #4
    948a:	2100      	movs	r1, #0
    948c:	2005      	movs	r0, #5
    948e:	4c06      	ldr	r4, [pc, #24]	; (94a8 <mask_init+0x3c>)
    9490:	47a0      	blx	r4
    9492:	1e03      	subs	r3, r0, #0
    9494:	d0f0      	beq.n	9478 <mask_init+0xc>
	return SUCCESS;
    9496:	2300      	movs	r3, #0
}
    9498:	0018      	movs	r0, r3
    949a:	46bd      	mov	sp, r7
    949c:	bdb0      	pop	{r4, r5, r7, pc}
    949e:	46c0      	nop			; (mov r8, r8)
    94a0:	200031f0 	.word	0x200031f0
    94a4:	20003dec 	.word	0x20003dec
    94a8:	00007635 	.word	0x00007635

000094ac <ip_init>:
BYTE ip_init(void)
{
    94ac:	b5b0      	push	{r4, r5, r7, lr}
    94ae:	af00      	add	r7, sp, #0
	spi_write_timeout(ADDR_COM_SRC_IP_ADR_0,COMMON_REGISTER,cfg_1.com_network.ip_addr,sizeof(cfg_1.com_network.ip_addr),10);
    94b0:	4b0b      	ldr	r3, [pc, #44]	; (94e0 <ip_init+0x34>)
    94b2:	220a      	movs	r2, #10
    94b4:	801a      	strh	r2, [r3, #0]
    94b6:	e006      	b.n	94c6 <ip_init+0x1a>
    94b8:	4b09      	ldr	r3, [pc, #36]	; (94e0 <ip_init+0x34>)
    94ba:	881b      	ldrh	r3, [r3, #0]
    94bc:	b29b      	uxth	r3, r3
    94be:	2b00      	cmp	r3, #0
    94c0:	d101      	bne.n	94c6 <ip_init+0x1a>
    94c2:	2301      	movs	r3, #1
    94c4:	e008      	b.n	94d8 <ip_init+0x2c>
    94c6:	4a07      	ldr	r2, [pc, #28]	; (94e4 <ip_init+0x38>)
    94c8:	2304      	movs	r3, #4
    94ca:	2100      	movs	r1, #0
    94cc:	200f      	movs	r0, #15
    94ce:	4c06      	ldr	r4, [pc, #24]	; (94e8 <ip_init+0x3c>)
    94d0:	47a0      	blx	r4
    94d2:	1e03      	subs	r3, r0, #0
    94d4:	d0f0      	beq.n	94b8 <ip_init+0xc>
	return SUCCESS;
    94d6:	2300      	movs	r3, #0
}
    94d8:	0018      	movs	r0, r3
    94da:	46bd      	mov	sp, r7
    94dc:	bdb0      	pop	{r4, r5, r7, pc}
    94de:	46c0      	nop			; (mov r8, r8)
    94e0:	200031f0 	.word	0x200031f0
    94e4:	20003de8 	.word	0x20003de8
    94e8:	00007635 	.word	0x00007635

000094ec <w5500_process>:

WORD w5500_process (BYTE spi_mode, BYTE sock_numb)
{
    94ec:	b590      	push	{r4, r7, lr}
    94ee:	b087      	sub	sp, #28
    94f0:	af02      	add	r7, sp, #8
    94f2:	0002      	movs	r2, r0
    94f4:	1dfb      	adds	r3, r7, #7
    94f6:	701a      	strb	r2, [r3, #0]
    94f8:	1dbb      	adds	r3, r7, #6
    94fa:	1c0a      	adds	r2, r1, #0
    94fc:	701a      	strb	r2, [r3, #0]
	static BYTE w5500_st=0;
	WORD rtrn=0;
    94fe:	230e      	movs	r3, #14
    9500:	18fb      	adds	r3, r7, r3
    9502:	2200      	movs	r2, #0
    9504:	801a      	strh	r2, [r3, #0]
	if(!cmd_spi_wait){w5500_st=0;return 2;} //if 20 mS no answer, break process
    9506:	4b50      	ldr	r3, [pc, #320]	; (9648 <w5500_process+0x15c>)
    9508:	881b      	ldrh	r3, [r3, #0]
    950a:	b29b      	uxth	r3, r3
    950c:	2b00      	cmp	r3, #0
    950e:	d104      	bne.n	951a <w5500_process+0x2e>
    9510:	4b4e      	ldr	r3, [pc, #312]	; (964c <w5500_process+0x160>)
    9512:	2200      	movs	r2, #0
    9514:	701a      	strb	r2, [r3, #0]
    9516:	2302      	movs	r3, #2
    9518:	e091      	b.n	963e <w5500_process+0x152>
		
		
	switch (w5500_st)
    951a:	4b4c      	ldr	r3, [pc, #304]	; (964c <w5500_process+0x160>)
    951c:	781b      	ldrb	r3, [r3, #0]
    951e:	2b05      	cmp	r3, #5
    9520:	d900      	bls.n	9524 <w5500_process+0x38>
    9522:	e085      	b.n	9630 <w5500_process+0x144>
    9524:	009a      	lsls	r2, r3, #2
    9526:	4b4a      	ldr	r3, [pc, #296]	; (9650 <w5500_process+0x164>)
    9528:	18d3      	adds	r3, r2, r3
    952a:	681b      	ldr	r3, [r3, #0]
    952c:	469f      	mov	pc, r3
	{
		case NULLS:
								w5500_st=spi_mode;
    952e:	4b47      	ldr	r3, [pc, #284]	; (964c <w5500_process+0x160>)
    9530:	1dfa      	adds	r2, r7, #7
    9532:	7812      	ldrb	r2, [r2, #0]
    9534:	701a      	strb	r2, [r3, #0]
								cmd_spi_wait=time_20ms;
    9536:	4b44      	ldr	r3, [pc, #272]	; (9648 <w5500_process+0x15c>)
    9538:	4a46      	ldr	r2, [pc, #280]	; (9654 <w5500_process+0x168>)
    953a:	801a      	strh	r2, [r3, #0]
								return PROC_WAIT;
    953c:	2300      	movs	r3, #0
    953e:	e07e      	b.n	963e <w5500_process+0x152>
		case SPI_PROCESS:
								if(spi_process(addr_w5500,cb_w5500,ptr_buf,len_buf,cmd)){w5500_st=spi_mode;cmd=0;}
    9540:	4b45      	ldr	r3, [pc, #276]	; (9658 <w5500_process+0x16c>)
    9542:	8818      	ldrh	r0, [r3, #0]
    9544:	4b45      	ldr	r3, [pc, #276]	; (965c <w5500_process+0x170>)
    9546:	881b      	ldrh	r3, [r3, #0]
    9548:	b2d9      	uxtb	r1, r3
    954a:	4b45      	ldr	r3, [pc, #276]	; (9660 <w5500_process+0x174>)
    954c:	681a      	ldr	r2, [r3, #0]
    954e:	4b45      	ldr	r3, [pc, #276]	; (9664 <w5500_process+0x178>)
    9550:	881c      	ldrh	r4, [r3, #0]
    9552:	4b45      	ldr	r3, [pc, #276]	; (9668 <w5500_process+0x17c>)
    9554:	781b      	ldrb	r3, [r3, #0]
    9556:	9300      	str	r3, [sp, #0]
    9558:	0023      	movs	r3, r4
    955a:	4c44      	ldr	r4, [pc, #272]	; (966c <w5500_process+0x180>)
    955c:	47a0      	blx	r4
    955e:	1e03      	subs	r3, r0, #0
    9560:	d100      	bne.n	9564 <w5500_process+0x78>
    9562:	e06a      	b.n	963a <w5500_process+0x14e>
    9564:	4b39      	ldr	r3, [pc, #228]	; (964c <w5500_process+0x160>)
    9566:	1dfa      	adds	r2, r7, #7
    9568:	7812      	ldrb	r2, [r2, #0]
    956a:	701a      	strb	r2, [r3, #0]
    956c:	4b3e      	ldr	r3, [pc, #248]	; (9668 <w5500_process+0x17c>)
    956e:	2200      	movs	r2, #0
    9570:	701a      	strb	r2, [r3, #0]
		break;
    9572:	e062      	b.n	963a <w5500_process+0x14e>
		case MODE_OP_READ_UDP:
								rtrn=w5500_cmd_read_socket_udp(sock_numb);
    9574:	230e      	movs	r3, #14
    9576:	18fc      	adds	r4, r7, r3
    9578:	1dbb      	adds	r3, r7, #6
    957a:	781b      	ldrb	r3, [r3, #0]
    957c:	0018      	movs	r0, r3
    957e:	f000 f877 	bl	9670 <w5500_cmd_read_socket_udp>
    9582:	0003      	movs	r3, r0
    9584:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    9586:	230e      	movs	r3, #14
    9588:	18fb      	adds	r3, r7, r3
    958a:	881b      	ldrh	r3, [r3, #0]
    958c:	2b00      	cmp	r3, #0
    958e:	d009      	beq.n	95a4 <w5500_process+0xb8>
    9590:	4b2e      	ldr	r3, [pc, #184]	; (964c <w5500_process+0x160>)
    9592:	2200      	movs	r2, #0
    9594:	701a      	strb	r2, [r3, #0]
    9596:	1dfb      	adds	r3, r7, #7
    9598:	2200      	movs	r2, #0
    959a:	701a      	strb	r2, [r3, #0]
    959c:	230e      	movs	r3, #14
    959e:	18fb      	adds	r3, r7, r3
    95a0:	881b      	ldrh	r3, [r3, #0]
    95a2:	e04c      	b.n	963e <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    95a4:	4b29      	ldr	r3, [pc, #164]	; (964c <w5500_process+0x160>)
    95a6:	2201      	movs	r2, #1
    95a8:	701a      	strb	r2, [r3, #0]
		break;
    95aa:	e047      	b.n	963c <w5500_process+0x150>
		case MODE_OP_WRITE_UDP:
								if(w5500_write_socket_udp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    95ac:	1dbb      	adds	r3, r7, #6
    95ae:	781b      	ldrb	r3, [r3, #0]
    95b0:	0018      	movs	r0, r3
    95b2:	f000 f9f1 	bl	9998 <w5500_write_socket_udp>
    95b6:	1e03      	subs	r3, r0, #0
    95b8:	d007      	beq.n	95ca <w5500_process+0xde>
    95ba:	4b24      	ldr	r3, [pc, #144]	; (964c <w5500_process+0x160>)
    95bc:	2200      	movs	r2, #0
    95be:	701a      	strb	r2, [r3, #0]
    95c0:	1dfb      	adds	r3, r7, #7
    95c2:	2200      	movs	r2, #0
    95c4:	701a      	strb	r2, [r3, #0]
    95c6:	2301      	movs	r3, #1
    95c8:	e039      	b.n	963e <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    95ca:	4b20      	ldr	r3, [pc, #128]	; (964c <w5500_process+0x160>)
    95cc:	2201      	movs	r2, #1
    95ce:	701a      	strb	r2, [r3, #0]
		break;
    95d0:	e034      	b.n	963c <w5500_process+0x150>
		case MODE_OP_READ_TCP:
								rtrn=w5500_cmd_read_socket_tcp(sock_numb);
    95d2:	230e      	movs	r3, #14
    95d4:	18fc      	adds	r4, r7, r3
    95d6:	1dbb      	adds	r3, r7, #6
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	0018      	movs	r0, r3
    95dc:	f000 fc2a 	bl	9e34 <w5500_cmd_read_socket_tcp>
    95e0:	0003      	movs	r3, r0
    95e2:	8023      	strh	r3, [r4, #0]
								if(rtrn)	{w5500_st=NULLS;spi_mode=0;return (rtrn);}
    95e4:	230e      	movs	r3, #14
    95e6:	18fb      	adds	r3, r7, r3
    95e8:	881b      	ldrh	r3, [r3, #0]
    95ea:	2b00      	cmp	r3, #0
    95ec:	d009      	beq.n	9602 <w5500_process+0x116>
    95ee:	4b17      	ldr	r3, [pc, #92]	; (964c <w5500_process+0x160>)
    95f0:	2200      	movs	r2, #0
    95f2:	701a      	strb	r2, [r3, #0]
    95f4:	1dfb      	adds	r3, r7, #7
    95f6:	2200      	movs	r2, #0
    95f8:	701a      	strb	r2, [r3, #0]
    95fa:	230e      	movs	r3, #14
    95fc:	18fb      	adds	r3, r7, r3
    95fe:	881b      	ldrh	r3, [r3, #0]
    9600:	e01d      	b.n	963e <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9602:	4b12      	ldr	r3, [pc, #72]	; (964c <w5500_process+0x160>)
    9604:	2201      	movs	r2, #1
    9606:	701a      	strb	r2, [r3, #0]
		break;
    9608:	e018      	b.n	963c <w5500_process+0x150>
		case MODE_OP_WRITE_TCP:
								if(w5500_write_socket_tcp(sock_numb))	{w5500_st=NULLS;spi_mode=0;return PROC_OK;}
    960a:	1dbb      	adds	r3, r7, #6
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	0018      	movs	r0, r3
    9610:	f000 fe8e 	bl	a330 <w5500_write_socket_tcp>
    9614:	1e03      	subs	r3, r0, #0
    9616:	d007      	beq.n	9628 <w5500_process+0x13c>
    9618:	4b0c      	ldr	r3, [pc, #48]	; (964c <w5500_process+0x160>)
    961a:	2200      	movs	r2, #0
    961c:	701a      	strb	r2, [r3, #0]
    961e:	1dfb      	adds	r3, r7, #7
    9620:	2200      	movs	r2, #0
    9622:	701a      	strb	r2, [r3, #0]
    9624:	2301      	movs	r3, #1
    9626:	e00a      	b.n	963e <w5500_process+0x152>
								w5500_st=SPI_PROCESS;
    9628:	4b08      	ldr	r3, [pc, #32]	; (964c <w5500_process+0x160>)
    962a:	2201      	movs	r2, #1
    962c:	701a      	strb	r2, [r3, #0]
		break;
    962e:	e005      	b.n	963c <w5500_process+0x150>
		default:
								w5500_st=0; return PROC_ER;
    9630:	4b06      	ldr	r3, [pc, #24]	; (964c <w5500_process+0x160>)
    9632:	2200      	movs	r2, #0
    9634:	701a      	strb	r2, [r3, #0]
    9636:	2302      	movs	r3, #2
    9638:	e001      	b.n	963e <w5500_process+0x152>
		break;
    963a:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    963c:	2300      	movs	r3, #0
}
    963e:	0018      	movs	r0, r3
    9640:	46bd      	mov	sp, r7
    9642:	b005      	add	sp, #20
    9644:	bd90      	pop	{r4, r7, pc}
    9646:	46c0      	nop			; (mov r8, r8)
    9648:	200031f2 	.word	0x200031f2
    964c:	20000488 	.word	0x20000488
    9650:	0000c828 	.word	0x0000c828
    9654:	00002710 	.word	0x00002710
    9658:	20000480 	.word	0x20000480
    965c:	20000482 	.word	0x20000482
    9660:	20003af8 	.word	0x20003af8
    9664:	20000484 	.word	0x20000484
    9668:	20003bb3 	.word	0x20003bb3
    966c:	0000758d 	.word	0x0000758d

00009670 <w5500_cmd_read_socket_udp>:

WORD w5500_cmd_read_socket_udp (BYTE sock_numb)
{
    9670:	b590      	push	{r4, r7, lr}
    9672:	b085      	sub	sp, #20
    9674:	af00      	add	r7, sp, #0
    9676:	0002      	movs	r2, r0
    9678:	1dfb      	adds	r3, r7, #7
    967a:	701a      	strb	r2, [r3, #0]
	static BYTE numb_static_r=0;
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	BYTE cnt=0;
    967c:	230f      	movs	r3, #15
    967e:	18fb      	adds	r3, r7, r3
    9680:	2200      	movs	r2, #0
    9682:	701a      	strb	r2, [r3, #0]
	
	if(numb_static_r!=sock_numb){numb_static_r=sock_numb;st_cmd_w5500=0;}
    9684:	4bb6      	ldr	r3, [pc, #728]	; (9960 <w5500_cmd_read_socket_udp+0x2f0>)
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	1dfa      	adds	r2, r7, #7
    968a:	7812      	ldrb	r2, [r2, #0]
    968c:	429a      	cmp	r2, r3
    968e:	d006      	beq.n	969e <w5500_cmd_read_socket_udp+0x2e>
    9690:	4bb3      	ldr	r3, [pc, #716]	; (9960 <w5500_cmd_read_socket_udp+0x2f0>)
    9692:	1dfa      	adds	r2, r7, #7
    9694:	7812      	ldrb	r2, [r2, #0]
    9696:	701a      	strb	r2, [r3, #0]
    9698:	4bb2      	ldr	r3, [pc, #712]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    969a:	2200      	movs	r2, #0
    969c:	701a      	strb	r2, [r3, #0]
	
	switch(st_cmd_w5500)
    969e:	4bb1      	ldr	r3, [pc, #708]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	2b04      	cmp	r3, #4
    96a4:	d900      	bls.n	96a8 <w5500_cmd_read_socket_udp+0x38>
    96a6:	e151      	b.n	994c <w5500_cmd_read_socket_udp+0x2dc>
    96a8:	009a      	lsls	r2, r3, #2
    96aa:	4baf      	ldr	r3, [pc, #700]	; (9968 <w5500_cmd_read_socket_udp+0x2f8>)
    96ac:	18d3      	adds	r3, r2, r3
    96ae:	681b      	ldr	r3, [r3, #0]
    96b0:	469f      	mov	pc, r3
	{
		case UDP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr in w5500 1,2
    96b2:	4bae      	ldr	r3, [pc, #696]	; (996c <w5500_cmd_read_socket_udp+0x2fc>)
    96b4:	2226      	movs	r2, #38	; 0x26
    96b6:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//cb 3
    96b8:	1dfb      	adds	r3, r7, #7
    96ba:	781b      	ldrb	r3, [r3, #0]
    96bc:	015b      	lsls	r3, r3, #5
    96be:	b21b      	sxth	r3, r3
    96c0:	2208      	movs	r2, #8
    96c2:	4313      	orrs	r3, r2
    96c4:	b21b      	sxth	r3, r3
    96c6:	b29a      	uxth	r2, r3
    96c8:	4ba9      	ldr	r3, [pc, #676]	; (9970 <w5500_cmd_read_socket_udp+0x300>)
    96ca:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//4 data (point write data aus w5500)
    96cc:	1dfb      	adds	r3, r7, #7
    96ce:	781b      	ldrb	r3, [r3, #0]
    96d0:	015b      	lsls	r3, r3, #5
    96d2:	3328      	adds	r3, #40	; 0x28
    96d4:	001a      	movs	r2, r3
    96d6:	4ba7      	ldr	r3, [pc, #668]	; (9974 <w5500_cmd_read_socket_udp+0x304>)
    96d8:	18d3      	adds	r3, r2, r3
    96da:	1d5a      	adds	r2, r3, #5
    96dc:	4ba6      	ldr	r3, [pc, #664]	; (9978 <w5500_cmd_read_socket_udp+0x308>)
    96de:	601a      	str	r2, [r3, #0]
			len_buf=2;//len
    96e0:	4ba6      	ldr	r3, [pc, #664]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    96e2:	2202      	movs	r2, #2
    96e4:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    96e6:	4ba6      	ldr	r3, [pc, #664]	; (9980 <w5500_cmd_read_socket_udp+0x310>)
    96e8:	2201      	movs	r2, #1
    96ea:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = UDP_PART_RD;//"next"
    96ec:	4b9d      	ldr	r3, [pc, #628]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    96ee:	2201      	movs	r2, #1
    96f0:	701a      	strb	r2, [r3, #0]
								
			size=0;
    96f2:	4ba4      	ldr	r3, [pc, #656]	; (9984 <w5500_cmd_read_socket_udp+0x314>)
    96f4:	2200      	movs	r2, #0
    96f6:	801a      	strh	r2, [r3, #0]
		break;	
    96f8:	e12d      	b.n	9956 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_PART_RD:					
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    96fa:	1dfb      	adds	r3, r7, #7
    96fc:	781b      	ldrb	r3, [r3, #0]
    96fe:	4a9d      	ldr	r2, [pc, #628]	; (9974 <w5500_cmd_read_socket_udp+0x304>)
    9700:	212d      	movs	r1, #45	; 0x2d
    9702:	015b      	lsls	r3, r3, #5
    9704:	18d3      	adds	r3, r2, r3
    9706:	185b      	adds	r3, r3, r1
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	021b      	lsls	r3, r3, #8
    970c:	b21a      	sxth	r2, r3
    970e:	1dfb      	adds	r3, r7, #7
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	4998      	ldr	r1, [pc, #608]	; (9974 <w5500_cmd_read_socket_udp+0x304>)
    9714:	202e      	movs	r0, #46	; 0x2e
    9716:	015b      	lsls	r3, r3, #5
    9718:	18cb      	adds	r3, r1, r3
    971a:	181b      	adds	r3, r3, r0
    971c:	781b      	ldrb	r3, [r3, #0]
    971e:	b21b      	sxth	r3, r3
    9720:	4313      	orrs	r3, r2
    9722:	b21b      	sxth	r3, r3
    9724:	b29a      	uxth	r2, r3
    9726:	4b98      	ldr	r3, [pc, #608]	; (9988 <w5500_cmd_read_socket_udp+0x318>)
    9728:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return
    972a:	4b97      	ldr	r3, [pc, #604]	; (9988 <w5500_cmd_read_socket_udp+0x318>)
    972c:	881b      	ldrh	r3, [r3, #0]
    972e:	b29b      	uxth	r3, r3
    9730:	2b00      	cmp	r3, #0
    9732:	d06c      	beq.n	980e <w5500_cmd_read_socket_udp+0x19e>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;
    9734:	1dfb      	adds	r3, r7, #7
    9736:	781a      	ldrb	r2, [r3, #0]
    9738:	4994      	ldr	r1, [pc, #592]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    973a:	23ba      	movs	r3, #186	; 0xba
    973c:	00db      	lsls	r3, r3, #3
    973e:	4894      	ldr	r0, [pc, #592]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    9740:	4342      	muls	r2, r0
    9742:	188a      	adds	r2, r1, r2
    9744:	18d3      	adds	r3, r2, r3
    9746:	78da      	ldrb	r2, [r3, #3]
    9748:	791b      	ldrb	r3, [r3, #4]
    974a:	021b      	lsls	r3, r3, #8
    974c:	4313      	orrs	r3, r2
    974e:	b29a      	uxth	r2, r3
    9750:	4b86      	ldr	r3, [pc, #536]	; (996c <w5500_cmd_read_socket_udp+0x2fc>)
    9752:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);
    9754:	1dfb      	adds	r3, r7, #7
    9756:	781b      	ldrb	r3, [r3, #0]
    9758:	015b      	lsls	r3, r3, #5
    975a:	b21b      	sxth	r3, r3
    975c:	2218      	movs	r2, #24
    975e:	4313      	orrs	r3, r2
    9760:	b21b      	sxth	r3, r3
    9762:	b29a      	uxth	r2, r3
    9764:	4b82      	ldr	r3, [pc, #520]	; (9970 <w5500_cmd_read_socket_udp+0x300>)
    9766:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb];
    9768:	1dfb      	adds	r3, r7, #7
    976a:	781b      	ldrb	r3, [r3, #0]
    976c:	4a88      	ldr	r2, [pc, #544]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    976e:	435a      	muls	r2, r3
    9770:	4b86      	ldr	r3, [pc, #536]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    9772:	18d2      	adds	r2, r2, r3
    9774:	4b80      	ldr	r3, [pc, #512]	; (9978 <w5500_cmd_read_socket_udp+0x308>)
    9776:	601a      	str	r2, [r3, #0]
				len_buf=sizert;
    9778:	4b83      	ldr	r3, [pc, #524]	; (9988 <w5500_cmd_read_socket_udp+0x318>)
    977a:	881b      	ldrh	r3, [r3, #0]
    977c:	b29a      	uxth	r2, r3
    977e:	4b7f      	ldr	r3, [pc, #508]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    9780:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    9782:	1dfb      	adds	r3, r7, #7
    9784:	7819      	ldrb	r1, [r3, #0]
    9786:	1dfb      	adds	r3, r7, #7
    9788:	781a      	ldrb	r2, [r3, #0]
    978a:	4880      	ldr	r0, [pc, #512]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    978c:	23ba      	movs	r3, #186	; 0xba
    978e:	00db      	lsls	r3, r3, #3
    9790:	4c7f      	ldr	r4, [pc, #508]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    9792:	4362      	muls	r2, r4
    9794:	1882      	adds	r2, r0, r2
    9796:	18d3      	adds	r3, r2, r3
    9798:	78da      	ldrb	r2, [r3, #3]
    979a:	791b      	ldrb	r3, [r3, #4]
    979c:	021b      	lsls	r3, r3, #8
    979e:	4313      	orrs	r3, r2
    97a0:	b29a      	uxth	r2, r3
    97a2:	4b76      	ldr	r3, [pc, #472]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	18d3      	adds	r3, r2, r3
    97a8:	b29a      	uxth	r2, r3
    97aa:	4878      	ldr	r0, [pc, #480]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    97ac:	23ba      	movs	r3, #186	; 0xba
    97ae:	00db      	lsls	r3, r3, #3
    97b0:	4c77      	ldr	r4, [pc, #476]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    97b2:	4361      	muls	r1, r4
    97b4:	1841      	adds	r1, r0, r1
    97b6:	18cb      	adds	r3, r1, r3
    97b8:	3303      	adds	r3, #3
    97ba:	21ff      	movs	r1, #255	; 0xff
    97bc:	4011      	ands	r1, r2
    97be:	000c      	movs	r4, r1
    97c0:	7819      	ldrb	r1, [r3, #0]
    97c2:	2000      	movs	r0, #0
    97c4:	4001      	ands	r1, r0
    97c6:	1c08      	adds	r0, r1, #0
    97c8:	1c21      	adds	r1, r4, #0
    97ca:	4301      	orrs	r1, r0
    97cc:	7019      	strb	r1, [r3, #0]
    97ce:	0a12      	lsrs	r2, r2, #8
    97d0:	b290      	uxth	r0, r2
    97d2:	785a      	ldrb	r2, [r3, #1]
    97d4:	2100      	movs	r1, #0
    97d6:	400a      	ands	r2, r1
    97d8:	1c11      	adds	r1, r2, #0
    97da:	1c02      	adds	r2, r0, #0
    97dc:	430a      	orrs	r2, r1
    97de:	705a      	strb	r2, [r3, #1]
				size=len_buf;
    97e0:	4b66      	ldr	r3, [pc, #408]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    97e2:	881a      	ldrh	r2, [r3, #0]
    97e4:	4b67      	ldr	r3, [pc, #412]	; (9984 <w5500_cmd_read_socket_udp+0x314>)
    97e6:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_UDP){size=PROC_ER;}							
    97e8:	4b64      	ldr	r3, [pc, #400]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    97ea:	881a      	ldrh	r2, [r3, #0]
    97ec:	23b9      	movs	r3, #185	; 0xb9
    97ee:	00db      	lsls	r3, r3, #3
    97f0:	429a      	cmp	r2, r3
    97f2:	d902      	bls.n	97fa <w5500_cmd_read_socket_udp+0x18a>
    97f4:	4b63      	ldr	r3, [pc, #396]	; (9984 <w5500_cmd_read_socket_udp+0x314>)
    97f6:	2202      	movs	r2, #2
    97f8:	801a      	strh	r2, [r3, #0]
				cmd=READ_DATA;
    97fa:	4b61      	ldr	r3, [pc, #388]	; (9980 <w5500_cmd_read_socket_udp+0x310>)
    97fc:	2201      	movs	r2, #1
    97fe:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500++;
    9800:	4b58      	ldr	r3, [pc, #352]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	3301      	adds	r3, #1
    9806:	b2da      	uxtb	r2, r3
    9808:	4b56      	ldr	r3, [pc, #344]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    980a:	701a      	strb	r2, [r3, #0]
				break;
    980c:	e0a3      	b.n	9956 <w5500_cmd_read_socket_udp+0x2e6>
			}
			st_cmd_w5500--;
    980e:	4b55      	ldr	r3, [pc, #340]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	3b01      	subs	r3, #1
    9814:	b2da      	uxtb	r2, r3
    9816:	4b53      	ldr	r3, [pc, #332]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    9818:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    981a:	2302      	movs	r3, #2
    981c:	e09c      	b.n	9958 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		case UDP_PTR_MOVE:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    981e:	230f      	movs	r3, #15
    9820:	18fb      	adds	r3, r7, r3
    9822:	781a      	ldrb	r2, [r3, #0]
    9824:	1dfb      	adds	r3, r7, #7
    9826:	7819      	ldrb	r1, [r3, #0]
    9828:	4858      	ldr	r0, [pc, #352]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    982a:	23ba      	movs	r3, #186	; 0xba
    982c:	00db      	lsls	r3, r3, #3
    982e:	4c58      	ldr	r4, [pc, #352]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    9830:	4361      	muls	r1, r4
    9832:	1841      	adds	r1, r0, r1
    9834:	18cb      	adds	r3, r1, r3
    9836:	78d9      	ldrb	r1, [r3, #3]
    9838:	791b      	ldrb	r3, [r3, #4]
    983a:	021b      	lsls	r3, r3, #8
    983c:	430b      	orrs	r3, r1
    983e:	b29b      	uxth	r3, r3
    9840:	0a1b      	lsrs	r3, r3, #8
    9842:	b29b      	uxth	r3, r3
    9844:	b2d9      	uxtb	r1, r3
    9846:	4b53      	ldr	r3, [pc, #332]	; (9994 <w5500_cmd_read_socket_udp+0x324>)
    9848:	5499      	strb	r1, [r3, r2]
    984a:	230f      	movs	r3, #15
    984c:	18fb      	adds	r3, r7, r3
    984e:	781a      	ldrb	r2, [r3, #0]
    9850:	230f      	movs	r3, #15
    9852:	18fb      	adds	r3, r7, r3
    9854:	3201      	adds	r2, #1
    9856:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    9858:	230f      	movs	r3, #15
    985a:	18fb      	adds	r3, r7, r3
    985c:	781a      	ldrb	r2, [r3, #0]
    985e:	1dfb      	adds	r3, r7, #7
    9860:	7819      	ldrb	r1, [r3, #0]
    9862:	484a      	ldr	r0, [pc, #296]	; (998c <w5500_cmd_read_socket_udp+0x31c>)
    9864:	23ba      	movs	r3, #186	; 0xba
    9866:	00db      	lsls	r3, r3, #3
    9868:	4c49      	ldr	r4, [pc, #292]	; (9990 <w5500_cmd_read_socket_udp+0x320>)
    986a:	4361      	muls	r1, r4
    986c:	1841      	adds	r1, r0, r1
    986e:	18cb      	adds	r3, r1, r3
    9870:	78d9      	ldrb	r1, [r3, #3]
    9872:	791b      	ldrb	r3, [r3, #4]
    9874:	021b      	lsls	r3, r3, #8
    9876:	430b      	orrs	r3, r1
    9878:	b29b      	uxth	r3, r3
    987a:	b2d9      	uxtb	r1, r3
    987c:	4b45      	ldr	r3, [pc, #276]	; (9994 <w5500_cmd_read_socket_udp+0x324>)
    987e:	5499      	strb	r1, [r3, r2]
    9880:	230f      	movs	r3, #15
    9882:	18fb      	adds	r3, r7, r3
    9884:	781a      	ldrb	r2, [r3, #0]
    9886:	230f      	movs	r3, #15
    9888:	18fb      	adds	r3, r7, r3
    988a:	3201      	adds	r2, #1
    988c:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;//reg RX_RD(28)
    988e:	4b37      	ldr	r3, [pc, #220]	; (996c <w5500_cmd_read_socket_udp+0x2fc>)
    9890:	2228      	movs	r2, #40	; 0x28
    9892:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9894:	1dfb      	adds	r3, r7, #7
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	015b      	lsls	r3, r3, #5
    989a:	b21b      	sxth	r3, r3
    989c:	2208      	movs	r2, #8
    989e:	4313      	orrs	r3, r2
    98a0:	b21b      	sxth	r3, r3
    98a2:	b29a      	uxth	r2, r3
    98a4:	4b32      	ldr	r3, [pc, #200]	; (9970 <w5500_cmd_read_socket_udp+0x300>)
    98a6:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;/*(записать в него смещение)*/
    98a8:	4b33      	ldr	r3, [pc, #204]	; (9978 <w5500_cmd_read_socket_udp+0x308>)
    98aa:	4a3a      	ldr	r2, [pc, #232]	; (9994 <w5500_cmd_read_socket_udp+0x324>)
    98ac:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    98ae:	230f      	movs	r3, #15
    98b0:	18fb      	adds	r3, r7, r3
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	b29a      	uxth	r2, r3
    98b6:	4b31      	ldr	r3, [pc, #196]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    98b8:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    98ba:	4b31      	ldr	r3, [pc, #196]	; (9980 <w5500_cmd_read_socket_udp+0x310>)
    98bc:	2202      	movs	r2, #2
    98be:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    98c0:	4b28      	ldr	r3, [pc, #160]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	3301      	adds	r3, #1
    98c6:	b2da      	uxtb	r2, r3
    98c8:	4b26      	ldr	r3, [pc, #152]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    98ca:	701a      	strb	r2, [r3, #0]
		break;
    98cc:	e043      	b.n	9956 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_RCV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//перейти в режим приема(возобновить прием)
    98ce:	230f      	movs	r3, #15
    98d0:	18fb      	adds	r3, r7, r3
    98d2:	781b      	ldrb	r3, [r3, #0]
    98d4:	4a2f      	ldr	r2, [pc, #188]	; (9994 <w5500_cmd_read_socket_udp+0x324>)
    98d6:	2140      	movs	r1, #64	; 0x40
    98d8:	54d1      	strb	r1, [r2, r3]
    98da:	230f      	movs	r3, #15
    98dc:	18fb      	adds	r3, r7, r3
    98de:	781a      	ldrb	r2, [r3, #0]
    98e0:	230f      	movs	r3, #15
    98e2:	18fb      	adds	r3, r7, r3
    98e4:	3201      	adds	r2, #1
    98e6:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    98e8:	4b20      	ldr	r3, [pc, #128]	; (996c <w5500_cmd_read_socket_udp+0x2fc>)
    98ea:	2201      	movs	r2, #1
    98ec:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    98ee:	1dfb      	adds	r3, r7, #7
    98f0:	781b      	ldrb	r3, [r3, #0]
    98f2:	015b      	lsls	r3, r3, #5
    98f4:	b21b      	sxth	r3, r3
    98f6:	2208      	movs	r2, #8
    98f8:	4313      	orrs	r3, r2
    98fa:	b21b      	sxth	r3, r3
    98fc:	b29a      	uxth	r2, r3
    98fe:	4b1c      	ldr	r3, [pc, #112]	; (9970 <w5500_cmd_read_socket_udp+0x300>)
    9900:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9902:	4b1d      	ldr	r3, [pc, #116]	; (9978 <w5500_cmd_read_socket_udp+0x308>)
    9904:	4a23      	ldr	r2, [pc, #140]	; (9994 <w5500_cmd_read_socket_udp+0x324>)
    9906:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9908:	230f      	movs	r3, #15
    990a:	18fb      	adds	r3, r7, r3
    990c:	781b      	ldrb	r3, [r3, #0]
    990e:	b29a      	uxth	r2, r3
    9910:	4b1a      	ldr	r3, [pc, #104]	; (997c <w5500_cmd_read_socket_udp+0x30c>)
    9912:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9914:	4b1a      	ldr	r3, [pc, #104]	; (9980 <w5500_cmd_read_socket_udp+0x310>)
    9916:	2202      	movs	r2, #2
    9918:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500++;
    991a:	4b12      	ldr	r3, [pc, #72]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	3301      	adds	r3, #1
    9920:	b2da      	uxtb	r2, r3
    9922:	4b10      	ldr	r3, [pc, #64]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    9924:	701a      	strb	r2, [r3, #0]
		break;	
    9926:	e016      	b.n	9956 <w5500_cmd_read_socket_udp+0x2e6>
		case UDP_BK_START:
			st_cmd_w5500=0;//сброс параметров
    9928:	4b0e      	ldr	r3, [pc, #56]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    992a:	2200      	movs	r2, #0
    992c:	701a      	strb	r2, [r3, #0]
			if((size > USART_BUF_SIZE) && (sock_numb))	 {return PROC_ER;}
    992e:	4b15      	ldr	r3, [pc, #84]	; (9984 <w5500_cmd_read_socket_udp+0x314>)
    9930:	881a      	ldrh	r2, [r3, #0]
    9932:	2380      	movs	r3, #128	; 0x80
    9934:	005b      	lsls	r3, r3, #1
    9936:	429a      	cmp	r2, r3
    9938:	d905      	bls.n	9946 <w5500_cmd_read_socket_udp+0x2d6>
    993a:	1dfb      	adds	r3, r7, #7
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	2b00      	cmp	r3, #0
    9940:	d001      	beq.n	9946 <w5500_cmd_read_socket_udp+0x2d6>
    9942:	2302      	movs	r3, #2
    9944:	e008      	b.n	9958 <w5500_cmd_read_socket_udp+0x2e8>
			return (size);
    9946:	4b0f      	ldr	r3, [pc, #60]	; (9984 <w5500_cmd_read_socket_udp+0x314>)
    9948:	881b      	ldrh	r3, [r3, #0]
    994a:	e005      	b.n	9958 <w5500_cmd_read_socket_udp+0x2e8>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    994c:	4b05      	ldr	r3, [pc, #20]	; (9964 <w5500_cmd_read_socket_udp+0x2f4>)
    994e:	2200      	movs	r2, #0
    9950:	701a      	strb	r2, [r3, #0]
    9952:	2302      	movs	r3, #2
    9954:	e000      	b.n	9958 <w5500_cmd_read_socket_udp+0x2e8>
		break;
	}
	return PROC_WAIT;
    9956:	2300      	movs	r3, #0
}
    9958:	0018      	movs	r0, r3
    995a:	46bd      	mov	sp, r7
    995c:	b005      	add	sp, #20
    995e:	bd90      	pop	{r4, r7, pc}
    9960:	20000489 	.word	0x20000489
    9964:	2000048a 	.word	0x2000048a
    9968:	0000c840 	.word	0x0000c840
    996c:	20000480 	.word	0x20000480
    9970:	20000482 	.word	0x20000482
    9974:	20003b00 	.word	0x20003b00
    9978:	20003af8 	.word	0x20003af8
    997c:	20000484 	.word	0x20000484
    9980:	20003bb3 	.word	0x20003bb3
    9984:	2000048c 	.word	0x2000048c
    9988:	20000486 	.word	0x20000486
    998c:	200005cc 	.word	0x200005cc
    9990:	000005e5 	.word	0x000005e5
    9994:	20003bb4 	.word	0x20003bb4

00009998 <w5500_write_socket_udp>:

WORD w5500_write_socket_udp (BYTE sock_numb)
{
    9998:	b590      	push	{r4, r7, lr}
    999a:	b085      	sub	sp, #20
    999c:	af00      	add	r7, sp, #0
    999e:	0002      	movs	r2, r0
    99a0:	1dfb      	adds	r3, r7, #7
    99a2:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500 = 0;
	static BYTE numb_static = 0;
	WORD cnt = 0;
    99a4:	230e      	movs	r3, #14
    99a6:	18fb      	adds	r3, r7, r3
    99a8:	2200      	movs	r2, #0
    99aa:	801a      	strh	r2, [r3, #0]
	
	if(numb_static != sock_numb) {numb_static = sock_numb; st_wr_w5500 = 0;}
    99ac:	4bd9      	ldr	r3, [pc, #868]	; (9d14 <w5500_write_socket_udp+0x37c>)
    99ae:	781b      	ldrb	r3, [r3, #0]
    99b0:	1dfa      	adds	r2, r7, #7
    99b2:	7812      	ldrb	r2, [r2, #0]
    99b4:	429a      	cmp	r2, r3
    99b6:	d006      	beq.n	99c6 <w5500_write_socket_udp+0x2e>
    99b8:	4bd6      	ldr	r3, [pc, #856]	; (9d14 <w5500_write_socket_udp+0x37c>)
    99ba:	1dfa      	adds	r2, r7, #7
    99bc:	7812      	ldrb	r2, [r2, #0]
    99be:	701a      	strb	r2, [r3, #0]
    99c0:	4bd5      	ldr	r3, [pc, #852]	; (9d18 <w5500_write_socket_udp+0x380>)
    99c2:	2200      	movs	r2, #0
    99c4:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    99c6:	4bd4      	ldr	r3, [pc, #848]	; (9d18 <w5500_write_socket_udp+0x380>)
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	2b08      	cmp	r3, #8
    99cc:	d900      	bls.n	99d0 <w5500_write_socket_udp+0x38>
    99ce:	e212      	b.n	9df6 <w5500_write_socket_udp+0x45e>
    99d0:	009a      	lsls	r2, r3, #2
    99d2:	4bd2      	ldr	r3, [pc, #840]	; (9d1c <w5500_write_socket_udp+0x384>)
    99d4:	18d3      	adds	r3, r2, r3
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	469f      	mov	pc, r3
	{
		case UDP_RD_TX_STAT:																	//read reg tx status
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;						
    99da:	4bd1      	ldr	r3, [pc, #836]	; (9d20 <w5500_write_socket_udp+0x388>)
    99dc:	2220      	movs	r2, #32
    99de:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    99e0:	1dfb      	adds	r3, r7, #7
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	015b      	lsls	r3, r3, #5
    99e6:	b21b      	sxth	r3, r3
    99e8:	2208      	movs	r2, #8
    99ea:	4313      	orrs	r3, r2
    99ec:	b21b      	sxth	r3, r3
    99ee:	b29a      	uxth	r2, r3
    99f0:	4bcc      	ldr	r3, [pc, #816]	; (9d24 <w5500_write_socket_udp+0x38c>)
    99f2:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    99f4:	1dfb      	adds	r3, r7, #7
    99f6:	781b      	ldrb	r3, [r3, #0]
    99f8:	3301      	adds	r3, #1
    99fa:	015a      	lsls	r2, r3, #5
    99fc:	4bca      	ldr	r3, [pc, #808]	; (9d28 <w5500_write_socket_udp+0x390>)
    99fe:	18d3      	adds	r3, r2, r3
    9a00:	1dda      	adds	r2, r3, #7
    9a02:	4bca      	ldr	r3, [pc, #808]	; (9d2c <w5500_write_socket_udp+0x394>)
    9a04:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9a06:	4bca      	ldr	r3, [pc, #808]	; (9d30 <w5500_write_socket_udp+0x398>)
    9a08:	2206      	movs	r2, #6
    9a0a:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9a0c:	4bc9      	ldr	r3, [pc, #804]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9a0e:	2201      	movs	r2, #1
    9a10:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9a12:	4bc1      	ldr	r3, [pc, #772]	; (9d18 <w5500_write_socket_udp+0x380>)
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	3301      	adds	r3, #1
    9a18:	b2da      	uxtb	r2, r3
    9a1a:	4bbf      	ldr	r3, [pc, #764]	; (9d18 <w5500_write_socket_udp+0x380>)
    9a1c:	701a      	strb	r2, [r3, #0]
		break;
    9a1e:	e1f0      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_WR_IP:																	//write ip
			addr_w5500=ADDR_SOC_D_IP_ADDR0;
    9a20:	4bbf      	ldr	r3, [pc, #764]	; (9d20 <w5500_write_socket_udp+0x388>)
    9a22:	220c      	movs	r2, #12
    9a24:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9a26:	1dfb      	adds	r3, r7, #7
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	015b      	lsls	r3, r3, #5
    9a2c:	b21b      	sxth	r3, r3
    9a2e:	2208      	movs	r2, #8
    9a30:	4313      	orrs	r3, r2
    9a32:	b21b      	sxth	r3, r3
    9a34:	b29a      	uxth	r2, r3
    9a36:	4bbb      	ldr	r3, [pc, #748]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9a38:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].ip_addr;
    9a3a:	1dfb      	adds	r3, r7, #7
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	4abe      	ldr	r2, [pc, #760]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9a40:	435a      	muls	r2, r3
    9a42:	4bbe      	ldr	r3, [pc, #760]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9a44:	18d2      	adds	r2, r2, r3
    9a46:	4bb9      	ldr	r3, [pc, #740]	; (9d2c <w5500_write_socket_udp+0x394>)
    9a48:	601a      	str	r2, [r3, #0]
			len_buf=4;
    9a4a:	4bb9      	ldr	r3, [pc, #740]	; (9d30 <w5500_write_socket_udp+0x398>)
    9a4c:	2204      	movs	r2, #4
    9a4e:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9a50:	4bb8      	ldr	r3, [pc, #736]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9a52:	2202      	movs	r2, #2
    9a54:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9a56:	4bb0      	ldr	r3, [pc, #704]	; (9d18 <w5500_write_socket_udp+0x380>)
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	3301      	adds	r3, #1
    9a5c:	b2da      	uxtb	r2, r3
    9a5e:	4bae      	ldr	r3, [pc, #696]	; (9d18 <w5500_write_socket_udp+0x380>)
    9a60:	701a      	strb	r2, [r3, #0]
		break;
    9a62:	e1ce      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_WR_PORT:																	//write port
			addr_w5500=ADDR_SOC_D_PORT0;
    9a64:	4bae      	ldr	r3, [pc, #696]	; (9d20 <w5500_write_socket_udp+0x388>)
    9a66:	2210      	movs	r2, #16
    9a68:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9a6a:	1dfb      	adds	r3, r7, #7
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	015b      	lsls	r3, r3, #5
    9a70:	b21b      	sxth	r3, r3
    9a72:	2208      	movs	r2, #8
    9a74:	4313      	orrs	r3, r2
    9a76:	b21b      	sxth	r3, r3
    9a78:	b29a      	uxth	r2, r3
    9a7a:	4baa      	ldr	r3, [pc, #680]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9a7c:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].port;
    9a7e:	1dfb      	adds	r3, r7, #7
    9a80:	781b      	ldrb	r3, [r3, #0]
    9a82:	4aad      	ldr	r2, [pc, #692]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9a84:	435a      	muls	r2, r3
    9a86:	4bad      	ldr	r3, [pc, #692]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9a88:	18d3      	adds	r3, r2, r3
    9a8a:	1d1a      	adds	r2, r3, #4
    9a8c:	4ba7      	ldr	r3, [pc, #668]	; (9d2c <w5500_write_socket_udp+0x394>)
    9a8e:	601a      	str	r2, [r3, #0]
			len_buf=2;
    9a90:	4ba7      	ldr	r3, [pc, #668]	; (9d30 <w5500_write_socket_udp+0x398>)
    9a92:	2202      	movs	r2, #2
    9a94:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9a96:	4ba7      	ldr	r3, [pc, #668]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9a98:	2202      	movs	r2, #2
    9a9a:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9a9c:	4b9e      	ldr	r3, [pc, #632]	; (9d18 <w5500_write_socket_udp+0x380>)
    9a9e:	781b      	ldrb	r3, [r3, #0]
    9aa0:	3301      	adds	r3, #1
    9aa2:	b2da      	uxtb	r2, r3
    9aa4:	4b9c      	ldr	r3, [pc, #624]	; (9d18 <w5500_write_socket_udp+0x380>)
    9aa6:	701a      	strb	r2, [r3, #0]
		break;
    9aa8:	e1ab      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_WR_DATA:																	//write data
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    9aaa:	1dfb      	adds	r3, r7, #7
    9aac:	781a      	ldrb	r2, [r3, #0]
    9aae:	49a3      	ldr	r1, [pc, #652]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9ab0:	23ba      	movs	r3, #186	; 0xba
    9ab2:	00db      	lsls	r3, r3, #3
    9ab4:	48a0      	ldr	r0, [pc, #640]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9ab6:	4342      	muls	r2, r0
    9ab8:	188a      	adds	r2, r1, r2
    9aba:	18d3      	adds	r3, r2, r3
    9abc:	795a      	ldrb	r2, [r3, #5]
    9abe:	799b      	ldrb	r3, [r3, #6]
    9ac0:	021b      	lsls	r3, r3, #8
    9ac2:	4313      	orrs	r3, r2
    9ac4:	b29a      	uxth	r2, r3
    9ac6:	4b96      	ldr	r3, [pc, #600]	; (9d20 <w5500_write_socket_udp+0x388>)
    9ac8:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    9aca:	1dfb      	adds	r3, r7, #7
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	015b      	lsls	r3, r3, #5
    9ad0:	b21b      	sxth	r3, r3
    9ad2:	2210      	movs	r2, #16
    9ad4:	4313      	orrs	r3, r2
    9ad6:	b21b      	sxth	r3, r3
    9ad8:	b29a      	uxth	r2, r3
    9ada:	4b92      	ldr	r3, [pc, #584]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9adc:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    9ade:	1dfb      	adds	r3, r7, #7
    9ae0:	781b      	ldrb	r3, [r3, #0]
    9ae2:	4a95      	ldr	r2, [pc, #596]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9ae4:	4353      	muls	r3, r2
    9ae6:	3308      	adds	r3, #8
    9ae8:	001a      	movs	r2, r3
    9aea:	4b94      	ldr	r3, [pc, #592]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9aec:	18d2      	adds	r2, r2, r3
    9aee:	4b8f      	ldr	r3, [pc, #572]	; (9d2c <w5500_write_socket_udp+0x394>)
    9af0:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    9af2:	1dfb      	adds	r3, r7, #7
    9af4:	781b      	ldrb	r3, [r3, #0]
    9af6:	4a91      	ldr	r2, [pc, #580]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9af8:	498f      	ldr	r1, [pc, #572]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9afa:	434b      	muls	r3, r1
    9afc:	18d3      	adds	r3, r2, r3
    9afe:	3306      	adds	r3, #6
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	021b      	lsls	r3, r3, #8
    9b04:	b21a      	sxth	r2, r3
    9b06:	1dfb      	adds	r3, r7, #7
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	498c      	ldr	r1, [pc, #560]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9b0c:	488a      	ldr	r0, [pc, #552]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9b0e:	4343      	muls	r3, r0
    9b10:	18cb      	adds	r3, r1, r3
    9b12:	3307      	adds	r3, #7
    9b14:	781b      	ldrb	r3, [r3, #0]
    9b16:	b21b      	sxth	r3, r3
    9b18:	4313      	orrs	r3, r2
    9b1a:	b21b      	sxth	r3, r3
    9b1c:	b29a      	uxth	r2, r3
    9b1e:	4b84      	ldr	r3, [pc, #528]	; (9d30 <w5500_write_socket_udp+0x398>)
    9b20:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    9b22:	1dfb      	adds	r3, r7, #7
    9b24:	7819      	ldrb	r1, [r3, #0]
    9b26:	1dfb      	adds	r3, r7, #7
    9b28:	781a      	ldrb	r2, [r3, #0]
    9b2a:	4884      	ldr	r0, [pc, #528]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9b2c:	23ba      	movs	r3, #186	; 0xba
    9b2e:	00db      	lsls	r3, r3, #3
    9b30:	4c81      	ldr	r4, [pc, #516]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9b32:	4362      	muls	r2, r4
    9b34:	1882      	adds	r2, r0, r2
    9b36:	18d3      	adds	r3, r2, r3
    9b38:	795a      	ldrb	r2, [r3, #5]
    9b3a:	799b      	ldrb	r3, [r3, #6]
    9b3c:	021b      	lsls	r3, r3, #8
    9b3e:	4313      	orrs	r3, r2
    9b40:	b29a      	uxth	r2, r3
    9b42:	4b7b      	ldr	r3, [pc, #492]	; (9d30 <w5500_write_socket_udp+0x398>)
    9b44:	881b      	ldrh	r3, [r3, #0]
    9b46:	18d3      	adds	r3, r2, r3
    9b48:	b29a      	uxth	r2, r3
    9b4a:	487c      	ldr	r0, [pc, #496]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9b4c:	23ba      	movs	r3, #186	; 0xba
    9b4e:	00db      	lsls	r3, r3, #3
    9b50:	4c79      	ldr	r4, [pc, #484]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9b52:	4361      	muls	r1, r4
    9b54:	1841      	adds	r1, r0, r1
    9b56:	18cb      	adds	r3, r1, r3
    9b58:	3305      	adds	r3, #5
    9b5a:	21ff      	movs	r1, #255	; 0xff
    9b5c:	4011      	ands	r1, r2
    9b5e:	000c      	movs	r4, r1
    9b60:	7819      	ldrb	r1, [r3, #0]
    9b62:	2000      	movs	r0, #0
    9b64:	4001      	ands	r1, r0
    9b66:	1c08      	adds	r0, r1, #0
    9b68:	1c21      	adds	r1, r4, #0
    9b6a:	4301      	orrs	r1, r0
    9b6c:	7019      	strb	r1, [r3, #0]
    9b6e:	0a12      	lsrs	r2, r2, #8
    9b70:	b290      	uxth	r0, r2
    9b72:	785a      	ldrb	r2, [r3, #1]
    9b74:	2100      	movs	r1, #0
    9b76:	400a      	ands	r2, r1
    9b78:	1c11      	adds	r1, r2, #0
    9b7a:	1c02      	adds	r2, r0, #0
    9b7c:	430a      	orrs	r2, r1
    9b7e:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    9b80:	4b6c      	ldr	r3, [pc, #432]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9b82:	2202      	movs	r2, #2
    9b84:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9b86:	4b64      	ldr	r3, [pc, #400]	; (9d18 <w5500_write_socket_udp+0x380>)
    9b88:	781b      	ldrb	r3, [r3, #0]
    9b8a:	3301      	adds	r3, #1
    9b8c:	b2da      	uxtb	r2, r3
    9b8e:	4b62      	ldr	r3, [pc, #392]	; (9d18 <w5500_write_socket_udp+0x380>)
    9b90:	701a      	strb	r2, [r3, #0]
		break;
    9b92:	e136      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_WR_PTR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    9b94:	230e      	movs	r3, #14
    9b96:	18fb      	adds	r3, r7, r3
    9b98:	881a      	ldrh	r2, [r3, #0]
    9b9a:	1dfb      	adds	r3, r7, #7
    9b9c:	7819      	ldrb	r1, [r3, #0]
    9b9e:	4867      	ldr	r0, [pc, #412]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9ba0:	23ba      	movs	r3, #186	; 0xba
    9ba2:	00db      	lsls	r3, r3, #3
    9ba4:	4c64      	ldr	r4, [pc, #400]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9ba6:	4361      	muls	r1, r4
    9ba8:	1841      	adds	r1, r0, r1
    9baa:	18cb      	adds	r3, r1, r3
    9bac:	7959      	ldrb	r1, [r3, #5]
    9bae:	799b      	ldrb	r3, [r3, #6]
    9bb0:	021b      	lsls	r3, r3, #8
    9bb2:	430b      	orrs	r3, r1
    9bb4:	b29b      	uxth	r3, r3
    9bb6:	0a1b      	lsrs	r3, r3, #8
    9bb8:	b29b      	uxth	r3, r3
    9bba:	b2d9      	uxtb	r1, r3
    9bbc:	4b60      	ldr	r3, [pc, #384]	; (9d40 <w5500_write_socket_udp+0x3a8>)
    9bbe:	5499      	strb	r1, [r3, r2]
    9bc0:	230e      	movs	r3, #14
    9bc2:	18fb      	adds	r3, r7, r3
    9bc4:	881a      	ldrh	r2, [r3, #0]
    9bc6:	230e      	movs	r3, #14
    9bc8:	18fb      	adds	r3, r7, r3
    9bca:	3201      	adds	r2, #1
    9bcc:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    9bce:	230e      	movs	r3, #14
    9bd0:	18fb      	adds	r3, r7, r3
    9bd2:	881a      	ldrh	r2, [r3, #0]
    9bd4:	1dfb      	adds	r3, r7, #7
    9bd6:	7819      	ldrb	r1, [r3, #0]
    9bd8:	4858      	ldr	r0, [pc, #352]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9bda:	23ba      	movs	r3, #186	; 0xba
    9bdc:	00db      	lsls	r3, r3, #3
    9bde:	4c56      	ldr	r4, [pc, #344]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9be0:	4361      	muls	r1, r4
    9be2:	1841      	adds	r1, r0, r1
    9be4:	18cb      	adds	r3, r1, r3
    9be6:	7959      	ldrb	r1, [r3, #5]
    9be8:	799b      	ldrb	r3, [r3, #6]
    9bea:	021b      	lsls	r3, r3, #8
    9bec:	430b      	orrs	r3, r1
    9bee:	b29b      	uxth	r3, r3
    9bf0:	b2d9      	uxtb	r1, r3
    9bf2:	4b53      	ldr	r3, [pc, #332]	; (9d40 <w5500_write_socket_udp+0x3a8>)
    9bf4:	5499      	strb	r1, [r3, r2]
    9bf6:	230e      	movs	r3, #14
    9bf8:	18fb      	adds	r3, r7, r3
    9bfa:	881a      	ldrh	r2, [r3, #0]
    9bfc:	230e      	movs	r3, #14
    9bfe:	18fb      	adds	r3, r7, r3
    9c00:	3201      	adds	r2, #1
    9c02:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    9c04:	4b46      	ldr	r3, [pc, #280]	; (9d20 <w5500_write_socket_udp+0x388>)
    9c06:	2224      	movs	r2, #36	; 0x24
    9c08:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9c0a:	1dfb      	adds	r3, r7, #7
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	015b      	lsls	r3, r3, #5
    9c10:	b21b      	sxth	r3, r3
    9c12:	2208      	movs	r2, #8
    9c14:	4313      	orrs	r3, r2
    9c16:	b21b      	sxth	r3, r3
    9c18:	b29a      	uxth	r2, r3
    9c1a:	4b42      	ldr	r3, [pc, #264]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9c1c:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9c1e:	4b43      	ldr	r3, [pc, #268]	; (9d2c <w5500_write_socket_udp+0x394>)
    9c20:	4a47      	ldr	r2, [pc, #284]	; (9d40 <w5500_write_socket_udp+0x3a8>)
    9c22:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c24:	4b42      	ldr	r3, [pc, #264]	; (9d30 <w5500_write_socket_udp+0x398>)
    9c26:	220e      	movs	r2, #14
    9c28:	18ba      	adds	r2, r7, r2
    9c2a:	8812      	ldrh	r2, [r2, #0]
    9c2c:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c2e:	4b41      	ldr	r3, [pc, #260]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9c30:	2202      	movs	r2, #2
    9c32:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9c34:	4b38      	ldr	r3, [pc, #224]	; (9d18 <w5500_write_socket_udp+0x380>)
    9c36:	781b      	ldrb	r3, [r3, #0]
    9c38:	3301      	adds	r3, #1
    9c3a:	b2da      	uxtb	r2, r3
    9c3c:	4b36      	ldr	r3, [pc, #216]	; (9d18 <w5500_write_socket_udp+0x380>)
    9c3e:	701a      	strb	r2, [r3, #0]
		break;
    9c40:	e0df      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    9c42:	230e      	movs	r3, #14
    9c44:	18fb      	adds	r3, r7, r3
    9c46:	881b      	ldrh	r3, [r3, #0]
    9c48:	4a3d      	ldr	r2, [pc, #244]	; (9d40 <w5500_write_socket_udp+0x3a8>)
    9c4a:	2120      	movs	r1, #32
    9c4c:	54d1      	strb	r1, [r2, r3]
    9c4e:	230e      	movs	r3, #14
    9c50:	18fb      	adds	r3, r7, r3
    9c52:	881a      	ldrh	r2, [r3, #0]
    9c54:	230e      	movs	r3, #14
    9c56:	18fb      	adds	r3, r7, r3
    9c58:	3201      	adds	r2, #1
    9c5a:	801a      	strh	r2, [r3, #0]
						
			addr_w5500=ADDR_SOC_COMMAND;
    9c5c:	4b30      	ldr	r3, [pc, #192]	; (9d20 <w5500_write_socket_udp+0x388>)
    9c5e:	2201      	movs	r2, #1
    9c60:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9c62:	1dfb      	adds	r3, r7, #7
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	015b      	lsls	r3, r3, #5
    9c68:	b21b      	sxth	r3, r3
    9c6a:	2208      	movs	r2, #8
    9c6c:	4313      	orrs	r3, r2
    9c6e:	b21b      	sxth	r3, r3
    9c70:	b29a      	uxth	r2, r3
    9c72:	4b2c      	ldr	r3, [pc, #176]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9c74:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    9c76:	4b2d      	ldr	r3, [pc, #180]	; (9d2c <w5500_write_socket_udp+0x394>)
    9c78:	4a31      	ldr	r2, [pc, #196]	; (9d40 <w5500_write_socket_udp+0x3a8>)
    9c7a:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    9c7c:	4b2c      	ldr	r3, [pc, #176]	; (9d30 <w5500_write_socket_udp+0x398>)
    9c7e:	220e      	movs	r2, #14
    9c80:	18ba      	adds	r2, r7, r2
    9c82:	8812      	ldrh	r2, [r2, #0]
    9c84:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    9c86:	4b2b      	ldr	r3, [pc, #172]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9c88:	2202      	movs	r2, #2
    9c8a:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9c8c:	4b22      	ldr	r3, [pc, #136]	; (9d18 <w5500_write_socket_udp+0x380>)
    9c8e:	781b      	ldrb	r3, [r3, #0]
    9c90:	3301      	adds	r3, #1
    9c92:	b2da      	uxtb	r2, r3
    9c94:	4b20      	ldr	r3, [pc, #128]	; (9d18 <w5500_write_socket_udp+0x380>)
    9c96:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    9c98:	1dfb      	adds	r3, r7, #7
    9c9a:	781a      	ldrb	r2, [r3, #0]
    9c9c:	4927      	ldr	r1, [pc, #156]	; (9d3c <w5500_write_socket_udp+0x3a4>)
    9c9e:	23bc      	movs	r3, #188	; 0xbc
    9ca0:	00db      	lsls	r3, r3, #3
    9ca2:	4825      	ldr	r0, [pc, #148]	; (9d38 <w5500_write_socket_udp+0x3a0>)
    9ca4:	4342      	muls	r2, r0
    9ca6:	188a      	adds	r2, r1, r2
    9ca8:	18d3      	adds	r3, r2, r3
    9caa:	3303      	adds	r3, #3
    9cac:	781a      	ldrb	r2, [r3, #0]
    9cae:	2100      	movs	r1, #0
    9cb0:	400a      	ands	r2, r1
    9cb2:	1c11      	adds	r1, r2, #0
    9cb4:	2278      	movs	r2, #120	; 0x78
    9cb6:	4252      	negs	r2, r2
    9cb8:	430a      	orrs	r2, r1
    9cba:	701a      	strb	r2, [r3, #0]
    9cbc:	785a      	ldrb	r2, [r3, #1]
    9cbe:	2100      	movs	r1, #0
    9cc0:	400a      	ands	r2, r1
    9cc2:	1c11      	adds	r1, r2, #0
    9cc4:	2213      	movs	r2, #19
    9cc6:	430a      	orrs	r2, r1
    9cc8:	705a      	strb	r2, [r3, #1]
		break;
    9cca:	e09a      	b.n	9e02 <w5500_write_socket_udp+0x46a>
		case UDP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    9ccc:	4b14      	ldr	r3, [pc, #80]	; (9d20 <w5500_write_socket_udp+0x388>)
    9cce:	2202      	movs	r2, #2
    9cd0:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9cd2:	1dfb      	adds	r3, r7, #7
    9cd4:	781b      	ldrb	r3, [r3, #0]
    9cd6:	015b      	lsls	r3, r3, #5
    9cd8:	b21b      	sxth	r3, r3
    9cda:	2208      	movs	r2, #8
    9cdc:	4313      	orrs	r3, r2
    9cde:	b21b      	sxth	r3, r3
    9ce0:	b29a      	uxth	r2, r3
    9ce2:	4b10      	ldr	r3, [pc, #64]	; (9d24 <w5500_write_socket_udp+0x38c>)
    9ce4:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    9ce6:	1dfb      	adds	r3, r7, #7
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	015b      	lsls	r3, r3, #5
    9cec:	3310      	adds	r3, #16
    9cee:	001a      	movs	r2, r3
    9cf0:	4b0d      	ldr	r3, [pc, #52]	; (9d28 <w5500_write_socket_udp+0x390>)
    9cf2:	18d3      	adds	r3, r2, r3
    9cf4:	1d5a      	adds	r2, r3, #5
    9cf6:	4b0d      	ldr	r3, [pc, #52]	; (9d2c <w5500_write_socket_udp+0x394>)
    9cf8:	601a      	str	r2, [r3, #0]
			len_buf=1;
    9cfa:	4b0d      	ldr	r3, [pc, #52]	; (9d30 <w5500_write_socket_udp+0x398>)
    9cfc:	2201      	movs	r2, #1
    9cfe:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    9d00:	4b0c      	ldr	r3, [pc, #48]	; (9d34 <w5500_write_socket_udp+0x39c>)
    9d02:	2201      	movs	r2, #1
    9d04:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    9d06:	4b04      	ldr	r3, [pc, #16]	; (9d18 <w5500_write_socket_udp+0x380>)
    9d08:	781b      	ldrb	r3, [r3, #0]
    9d0a:	3301      	adds	r3, #1
    9d0c:	b2da      	uxtb	r2, r3
    9d0e:	4b02      	ldr	r3, [pc, #8]	; (9d18 <w5500_write_socket_udp+0x380>)
    9d10:	701a      	strb	r2, [r3, #0]
		break;
    9d12:	e076      	b.n	9e02 <w5500_write_socket_udp+0x46a>
    9d14:	2000048e 	.word	0x2000048e
    9d18:	2000048f 	.word	0x2000048f
    9d1c:	0000c854 	.word	0x0000c854
    9d20:	20000480 	.word	0x20000480
    9d24:	20000482 	.word	0x20000482
    9d28:	20003b00 	.word	0x20003b00
    9d2c:	20003af8 	.word	0x20003af8
    9d30:	20000484 	.word	0x20000484
    9d34:	20003bb3 	.word	0x20003bb3
    9d38:	000005e5 	.word	0x000005e5
    9d3c:	200005cc 	.word	0x200005cc
    9d40:	20003bb4 	.word	0x20003bb4
		case UDP_STATUS_CLR:															//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    9d44:	1dfb      	adds	r3, r7, #7
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	4a30      	ldr	r2, [pc, #192]	; (9e0c <w5500_write_socket_udp+0x474>)
    9d4a:	2110      	movs	r1, #16
    9d4c:	015b      	lsls	r3, r3, #5
    9d4e:	18d3      	adds	r3, r2, r3
    9d50:	185b      	adds	r3, r3, r1
    9d52:	795b      	ldrb	r3, [r3, #5]
    9d54:	06db      	lsls	r3, r3, #27
    9d56:	0fdb      	lsrs	r3, r3, #31
    9d58:	b2db      	uxtb	r3, r3
    9d5a:	2b01      	cmp	r3, #1
    9d5c:	d12b      	bne.n	9db6 <w5500_write_socket_udp+0x41e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    9d5e:	230e      	movs	r3, #14
    9d60:	18fb      	adds	r3, r7, r3
    9d62:	881b      	ldrh	r3, [r3, #0]
    9d64:	4a2a      	ldr	r2, [pc, #168]	; (9e10 <w5500_write_socket_udp+0x478>)
    9d66:	2110      	movs	r1, #16
    9d68:	54d1      	strb	r1, [r2, r3]
    9d6a:	230e      	movs	r3, #14
    9d6c:	18fb      	adds	r3, r7, r3
    9d6e:	881a      	ldrh	r2, [r3, #0]
    9d70:	230e      	movs	r3, #14
    9d72:	18fb      	adds	r3, r7, r3
    9d74:	3201      	adds	r2, #1
    9d76:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    9d78:	4b26      	ldr	r3, [pc, #152]	; (9e14 <w5500_write_socket_udp+0x47c>)
    9d7a:	2202      	movs	r2, #2
    9d7c:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    9d7e:	1dfb      	adds	r3, r7, #7
    9d80:	781b      	ldrb	r3, [r3, #0]
    9d82:	015b      	lsls	r3, r3, #5
    9d84:	b21b      	sxth	r3, r3
    9d86:	2208      	movs	r2, #8
    9d88:	4313      	orrs	r3, r2
    9d8a:	b21b      	sxth	r3, r3
    9d8c:	b29a      	uxth	r2, r3
    9d8e:	4b22      	ldr	r3, [pc, #136]	; (9e18 <w5500_write_socket_udp+0x480>)
    9d90:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    9d92:	4b22      	ldr	r3, [pc, #136]	; (9e1c <w5500_write_socket_udp+0x484>)
    9d94:	4a1e      	ldr	r2, [pc, #120]	; (9e10 <w5500_write_socket_udp+0x478>)
    9d96:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    9d98:	4b21      	ldr	r3, [pc, #132]	; (9e20 <w5500_write_socket_udp+0x488>)
    9d9a:	220e      	movs	r2, #14
    9d9c:	18ba      	adds	r2, r7, r2
    9d9e:	8812      	ldrh	r2, [r2, #0]
    9da0:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    9da2:	4b20      	ldr	r3, [pc, #128]	; (9e24 <w5500_write_socket_udp+0x48c>)
    9da4:	2202      	movs	r2, #2
    9da6:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    9da8:	4b1f      	ldr	r3, [pc, #124]	; (9e28 <w5500_write_socket_udp+0x490>)
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	3301      	adds	r3, #1
    9dae:	b2da      	uxtb	r2, r3
    9db0:	4b1d      	ldr	r3, [pc, #116]	; (9e28 <w5500_write_socket_udp+0x490>)
    9db2:	701a      	strb	r2, [r3, #0]
				break;
    9db4:	e025      	b.n	9e02 <w5500_write_socket_udp+0x46a>
			}
			st_wr_w5500--;
    9db6:	4b1c      	ldr	r3, [pc, #112]	; (9e28 <w5500_write_socket_udp+0x490>)
    9db8:	781b      	ldrb	r3, [r3, #0]
    9dba:	3b01      	subs	r3, #1
    9dbc:	b2da      	uxtb	r2, r3
    9dbe:	4b1a      	ldr	r3, [pc, #104]	; (9e28 <w5500_write_socket_udp+0x490>)
    9dc0:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    9dc2:	1dfb      	adds	r3, r7, #7
    9dc4:	781a      	ldrb	r2, [r3, #0]
    9dc6:	4919      	ldr	r1, [pc, #100]	; (9e2c <w5500_write_socket_udp+0x494>)
    9dc8:	23bc      	movs	r3, #188	; 0xbc
    9dca:	00db      	lsls	r3, r3, #3
    9dcc:	4818      	ldr	r0, [pc, #96]	; (9e30 <w5500_write_socket_udp+0x498>)
    9dce:	4342      	muls	r2, r0
    9dd0:	188a      	adds	r2, r1, r2
    9dd2:	18d3      	adds	r3, r2, r3
    9dd4:	78da      	ldrb	r2, [r3, #3]
    9dd6:	791b      	ldrb	r3, [r3, #4]
    9dd8:	021b      	lsls	r3, r3, #8
    9dda:	4313      	orrs	r3, r2
    9ddc:	b29b      	uxth	r3, r3
    9dde:	2b00      	cmp	r3, #0
    9de0:	d10e      	bne.n	9e00 <w5500_write_socket_udp+0x468>
			{
				st_wr_w5500=0; 
    9de2:	4b11      	ldr	r3, [pc, #68]	; (9e28 <w5500_write_socket_udp+0x490>)
    9de4:	2200      	movs	r2, #0
    9de6:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    9de8:	2302      	movs	r3, #2
    9dea:	e00b      	b.n	9e04 <w5500_write_socket_udp+0x46c>
			}
		break;
		case 8:
				st_wr_w5500=0;
    9dec:	4b0e      	ldr	r3, [pc, #56]	; (9e28 <w5500_write_socket_udp+0x490>)
    9dee:	2200      	movs	r2, #0
    9df0:	701a      	strb	r2, [r3, #0]
				return PROC_OK;
    9df2:	2301      	movs	r3, #1
    9df4:	e006      	b.n	9e04 <w5500_write_socket_udp+0x46c>
		break;
		default:
				st_wr_w5500=0; 
    9df6:	4b0c      	ldr	r3, [pc, #48]	; (9e28 <w5500_write_socket_udp+0x490>)
    9df8:	2200      	movs	r2, #0
    9dfa:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    9dfc:	2302      	movs	r3, #2
    9dfe:	e001      	b.n	9e04 <w5500_write_socket_udp+0x46c>
		break;
    9e00:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    9e02:	2300      	movs	r3, #0
}
    9e04:	0018      	movs	r0, r3
    9e06:	46bd      	mov	sp, r7
    9e08:	b005      	add	sp, #20
    9e0a:	bd90      	pop	{r4, r7, pc}
    9e0c:	20003b00 	.word	0x20003b00
    9e10:	20003bb4 	.word	0x20003bb4
    9e14:	20000480 	.word	0x20000480
    9e18:	20000482 	.word	0x20000482
    9e1c:	20003af8 	.word	0x20003af8
    9e20:	20000484 	.word	0x20000484
    9e24:	20003bb3 	.word	0x20003bb3
    9e28:	2000048f 	.word	0x2000048f
    9e2c:	200005cc 	.word	0x200005cc
    9e30:	000005e5 	.word	0x000005e5

00009e34 <w5500_cmd_read_socket_tcp>:

WORD w5500_cmd_read_socket_tcp (BYTE sock_numb)
{
    9e34:	b590      	push	{r4, r7, lr}
    9e36:	b085      	sub	sp, #20
    9e38:	af00      	add	r7, sp, #0
    9e3a:	0002      	movs	r2, r0
    9e3c:	1dfb      	adds	r3, r7, #7
    9e3e:	701a      	strb	r2, [r3, #0]
	static BYTE st_cmd_w5500=0;
	static WORD size=0;
	static BYTE status_ded[MAX_SOCKETS_CNT];
	BYTE cnt=0;
    9e40:	230f      	movs	r3, #15
    9e42:	18fb      	adds	r3, r7, r3
    9e44:	2200      	movs	r2, #0
    9e46:	701a      	strb	r2, [r3, #0]

	switch(st_cmd_w5500)
    9e48:	4bd2      	ldr	r3, [pc, #840]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	2b06      	cmp	r3, #6
    9e4e:	d900      	bls.n	9e52 <w5500_cmd_read_socket_tcp+0x1e>
    9e50:	e24e      	b.n	a2f0 <w5500_cmd_read_socket_tcp+0x4bc>
    9e52:	009a      	lsls	r2, r3, #2
    9e54:	4bd0      	ldr	r3, [pc, #832]	; (a198 <w5500_cmd_read_socket_tcp+0x364>)
    9e56:	18d3      	adds	r3, r2, r3
    9e58:	681b      	ldr	r3, [r3, #0]
    9e5a:	469f      	mov	pc, r3
	{
		case TCP_GIVE_LEN:
			addr_w5500=ADDR_SOC_RX_RECEIVED_SIZE_0;//addr
    9e5c:	4bcf      	ldr	r3, [pc, #828]	; (a19c <w5500_cmd_read_socket_tcp+0x368>)
    9e5e:	2226      	movs	r2, #38	; 0x26
    9e60:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    9e62:	1dfb      	adds	r3, r7, #7
    9e64:	781b      	ldrb	r3, [r3, #0]
    9e66:	015b      	lsls	r3, r3, #5
    9e68:	b21b      	sxth	r3, r3
    9e6a:	2208      	movs	r2, #8
    9e6c:	4313      	orrs	r3, r2
    9e6e:	b21b      	sxth	r3, r3
    9e70:	b29a      	uxth	r2, r3
    9e72:	4bcb      	ldr	r3, [pc, #812]	; (a1a0 <w5500_cmd_read_socket_tcp+0x36c>)
    9e74:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27;//data
    9e76:	1dfb      	adds	r3, r7, #7
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	015b      	lsls	r3, r3, #5
    9e7c:	3328      	adds	r3, #40	; 0x28
    9e7e:	001a      	movs	r2, r3
    9e80:	4bc8      	ldr	r3, [pc, #800]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    9e82:	18d3      	adds	r3, r2, r3
    9e84:	1d5a      	adds	r2, r3, #5
    9e86:	4bc8      	ldr	r3, [pc, #800]	; (a1a8 <w5500_cmd_read_socket_tcp+0x374>)
    9e88:	601a      	str	r2, [r3, #0]
			len_buf=6;
    9e8a:	4bc8      	ldr	r3, [pc, #800]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    9e8c:	2206      	movs	r2, #6
    9e8e:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    9e90:	4bc7      	ldr	r3, [pc, #796]	; (a1b0 <w5500_cmd_read_socket_tcp+0x37c>)
    9e92:	2201      	movs	r2, #1
    9e94:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_PART_RD; //"next"
    9e96:	4bbf      	ldr	r3, [pc, #764]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    9e98:	2201      	movs	r2, #1
    9e9a:	701a      	strb	r2, [r3, #0]
			size=0; 
    9e9c:	4bc5      	ldr	r3, [pc, #788]	; (a1b4 <w5500_cmd_read_socket_tcp+0x380>)
    9e9e:	2200      	movs	r2, #0
    9ea0:	801a      	strh	r2, [r3, #0]
			
			eth_sock[sock_numb].check_connect_cnt++;
    9ea2:	1dfb      	adds	r3, r7, #7
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	48c4      	ldr	r0, [pc, #784]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    9ea8:	22bc      	movs	r2, #188	; 0xbc
    9eaa:	00d2      	lsls	r2, r2, #3
    9eac:	49c3      	ldr	r1, [pc, #780]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    9eae:	4359      	muls	r1, r3
    9eb0:	1841      	adds	r1, r0, r1
    9eb2:	188a      	adds	r2, r1, r2
    9eb4:	7851      	ldrb	r1, [r2, #1]
    9eb6:	7892      	ldrb	r2, [r2, #2]
    9eb8:	0212      	lsls	r2, r2, #8
    9eba:	430a      	orrs	r2, r1
    9ebc:	b292      	uxth	r2, r2
    9ebe:	3201      	adds	r2, #1
    9ec0:	b292      	uxth	r2, r2
    9ec2:	48bd      	ldr	r0, [pc, #756]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    9ec4:	21bc      	movs	r1, #188	; 0xbc
    9ec6:	00c9      	lsls	r1, r1, #3
    9ec8:	4cbc      	ldr	r4, [pc, #752]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    9eca:	4363      	muls	r3, r4
    9ecc:	18c3      	adds	r3, r0, r3
    9ece:	185b      	adds	r3, r3, r1
    9ed0:	3301      	adds	r3, #1
    9ed2:	21ff      	movs	r1, #255	; 0xff
    9ed4:	4011      	ands	r1, r2
    9ed6:	000c      	movs	r4, r1
    9ed8:	7819      	ldrb	r1, [r3, #0]
    9eda:	2000      	movs	r0, #0
    9edc:	4001      	ands	r1, r0
    9ede:	1c08      	adds	r0, r1, #0
    9ee0:	1c21      	adds	r1, r4, #0
    9ee2:	4301      	orrs	r1, r0
    9ee4:	7019      	strb	r1, [r3, #0]
    9ee6:	0a12      	lsrs	r2, r2, #8
    9ee8:	b290      	uxth	r0, r2
    9eea:	785a      	ldrb	r2, [r3, #1]
    9eec:	2100      	movs	r1, #0
    9eee:	400a      	ands	r2, r1
    9ef0:	1c11      	adds	r1, r2, #0
    9ef2:	1c02      	adds	r2, r0, #0
    9ef4:	430a      	orrs	r2, r1
    9ef6:	705a      	strb	r2, [r3, #1]
			if(eth_sock[sock_numb].check_connect_cnt > 5) {st_cmd_w5500 = TCP_STATUS_RD; eth_sock[sock_numb].check_connect_cnt=0;}
    9ef8:	1dfb      	adds	r3, r7, #7
    9efa:	781a      	ldrb	r2, [r3, #0]
    9efc:	49ae      	ldr	r1, [pc, #696]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    9efe:	23bc      	movs	r3, #188	; 0xbc
    9f00:	00db      	lsls	r3, r3, #3
    9f02:	48ae      	ldr	r0, [pc, #696]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    9f04:	4342      	muls	r2, r0
    9f06:	188a      	adds	r2, r1, r2
    9f08:	18d3      	adds	r3, r2, r3
    9f0a:	785a      	ldrb	r2, [r3, #1]
    9f0c:	789b      	ldrb	r3, [r3, #2]
    9f0e:	021b      	lsls	r3, r3, #8
    9f10:	4313      	orrs	r3, r2
    9f12:	b29b      	uxth	r3, r3
    9f14:	2b05      	cmp	r3, #5
    9f16:	d800      	bhi.n	9f1a <w5500_cmd_read_socket_tcp+0xe6>
    9f18:	e1ef      	b.n	a2fa <w5500_cmd_read_socket_tcp+0x4c6>
    9f1a:	4b9e      	ldr	r3, [pc, #632]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    9f1c:	2205      	movs	r2, #5
    9f1e:	701a      	strb	r2, [r3, #0]
    9f20:	1dfb      	adds	r3, r7, #7
    9f22:	781a      	ldrb	r2, [r3, #0]
    9f24:	49a4      	ldr	r1, [pc, #656]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    9f26:	23bc      	movs	r3, #188	; 0xbc
    9f28:	00db      	lsls	r3, r3, #3
    9f2a:	48a4      	ldr	r0, [pc, #656]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    9f2c:	4342      	muls	r2, r0
    9f2e:	188a      	adds	r2, r1, r2
    9f30:	18d3      	adds	r3, r2, r3
    9f32:	3301      	adds	r3, #1
    9f34:	781a      	ldrb	r2, [r3, #0]
    9f36:	2100      	movs	r1, #0
    9f38:	400a      	ands	r2, r1
    9f3a:	701a      	strb	r2, [r3, #0]
    9f3c:	785a      	ldrb	r2, [r3, #1]
    9f3e:	2100      	movs	r1, #0
    9f40:	400a      	ands	r2, r1
    9f42:	705a      	strb	r2, [r3, #1]
		break;	
    9f44:	e1d9      	b.n	a2fa <w5500_cmd_read_socket_tcp+0x4c6>
		case TCP_STATUS_RD:
			addr_w5500=ADDR_SOC_STATUS;//addr in w5500 
    9f46:	4b95      	ldr	r3, [pc, #596]	; (a19c <w5500_cmd_read_socket_tcp+0x368>)
    9f48:	2203      	movs	r2, #3
    9f4a:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);//bsb
    9f4c:	1dfb      	adds	r3, r7, #7
    9f4e:	781b      	ldrb	r3, [r3, #0]
    9f50:	015b      	lsls	r3, r3, #5
    9f52:	b21b      	sxth	r3, r3
    9f54:	2208      	movs	r2, #8
    9f56:	4313      	orrs	r3, r2
    9f58:	b21b      	sxth	r3, r3
    9f5a:	b29a      	uxth	r2, r3
    9f5c:	4b90      	ldr	r3, [pc, #576]	; (a1a0 <w5500_cmd_read_socket_tcp+0x36c>)
    9f5e:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R04_Sn_SR_03.Status;//place for write result
    9f60:	1dfb      	adds	r3, r7, #7
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	015b      	lsls	r3, r3, #5
    9f66:	3310      	adds	r3, #16
    9f68:	001a      	movs	r2, r3
    9f6a:	4b8e      	ldr	r3, [pc, #568]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    9f6c:	18d3      	adds	r3, r2, r3
    9f6e:	1d9a      	adds	r2, r3, #6
    9f70:	4b8d      	ldr	r3, [pc, #564]	; (a1a8 <w5500_cmd_read_socket_tcp+0x374>)
    9f72:	601a      	str	r2, [r3, #0]
			len_buf=1;
    9f74:	4b8d      	ldr	r3, [pc, #564]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    9f76:	2201      	movs	r2, #1
    9f78:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;//mode
    9f7a:	4b8d      	ldr	r3, [pc, #564]	; (a1b0 <w5500_cmd_read_socket_tcp+0x37c>)
    9f7c:	2201      	movs	r2, #1
    9f7e:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_FORK;//"next" 
    9f80:	4b84      	ldr	r3, [pc, #528]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    9f82:	2206      	movs	r2, #6
    9f84:	701a      	strb	r2, [r3, #0]
		break;
    9f86:	e1b9      	b.n	a2fc <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_FORK:
			if(status_ded[sock_numb]==chip.sockReg[sock_numb].R04_Sn_SR_03.Status){st_cmd_w5500 = TCP_PART_RD; return PROC_WAIT;}
    9f88:	1dfb      	adds	r3, r7, #7
    9f8a:	781b      	ldrb	r3, [r3, #0]
    9f8c:	4a8c      	ldr	r2, [pc, #560]	; (a1c0 <w5500_cmd_read_socket_tcp+0x38c>)
    9f8e:	5cd2      	ldrb	r2, [r2, r3]
    9f90:	1dfb      	adds	r3, r7, #7
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	4983      	ldr	r1, [pc, #524]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    9f96:	015b      	lsls	r3, r3, #5
    9f98:	18cb      	adds	r3, r1, r3
    9f9a:	3316      	adds	r3, #22
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	429a      	cmp	r2, r3
    9fa0:	d104      	bne.n	9fac <w5500_cmd_read_socket_tcp+0x178>
    9fa2:	4b7c      	ldr	r3, [pc, #496]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    9fa4:	2201      	movs	r2, #1
    9fa6:	701a      	strb	r2, [r3, #0]
    9fa8:	2300      	movs	r3, #0
    9faa:	e1a8      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
			status_ded[sock_numb]=chip.sockReg[sock_numb].R04_Sn_SR_03.Status;
    9fac:	1dfb      	adds	r3, r7, #7
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	1dfa      	adds	r2, r7, #7
    9fb2:	7812      	ldrb	r2, [r2, #0]
    9fb4:	497b      	ldr	r1, [pc, #492]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    9fb6:	0152      	lsls	r2, r2, #5
    9fb8:	188a      	adds	r2, r1, r2
    9fba:	3216      	adds	r2, #22
    9fbc:	7811      	ldrb	r1, [r2, #0]
    9fbe:	4a80      	ldr	r2, [pc, #512]	; (a1c0 <w5500_cmd_read_socket_tcp+0x38c>)
    9fc0:	54d1      	strb	r1, [r2, r3]
			switch(chip.sockReg[sock_numb].R04_Sn_SR_03.Status)
    9fc2:	1dfb      	adds	r3, r7, #7
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	4a77      	ldr	r2, [pc, #476]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    9fc8:	015b      	lsls	r3, r3, #5
    9fca:	18d3      	adds	r3, r2, r3
    9fcc:	3316      	adds	r3, #22
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	2b13      	cmp	r3, #19
    9fd2:	d00a      	beq.n	9fea <w5500_cmd_read_socket_tcp+0x1b6>
    9fd4:	2b1c      	cmp	r3, #28
    9fd6:	d00f      	beq.n	9ff8 <w5500_cmd_read_socket_tcp+0x1c4>
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d114      	bne.n	a006 <w5500_cmd_read_socket_tcp+0x1d2>
			{
				case ST_CLOSE:
					wbuf_w55[cnt]=CMD_OPEN;
    9fdc:	230f      	movs	r3, #15
    9fde:	18fb      	adds	r3, r7, r3
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	4a78      	ldr	r2, [pc, #480]	; (a1c4 <w5500_cmd_read_socket_tcp+0x390>)
    9fe4:	2101      	movs	r1, #1
    9fe6:	54d1      	strb	r1, [r2, r3]
				break;
    9fe8:	e012      	b.n	a010 <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_INIT:
					wbuf_w55[cnt]=CMD_LISTEN;
    9fea:	230f      	movs	r3, #15
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	781b      	ldrb	r3, [r3, #0]
    9ff0:	4a74      	ldr	r2, [pc, #464]	; (a1c4 <w5500_cmd_read_socket_tcp+0x390>)
    9ff2:	2102      	movs	r1, #2
    9ff4:	54d1      	strb	r1, [r2, r3]
				break;
    9ff6:	e00b      	b.n	a010 <w5500_cmd_read_socket_tcp+0x1dc>
				case ST_CLOSE_WAIT:
					wbuf_w55[cnt]=CMD_CLOSE;			
    9ff8:	230f      	movs	r3, #15
    9ffa:	18fb      	adds	r3, r7, r3
    9ffc:	781b      	ldrb	r3, [r3, #0]
    9ffe:	4a71      	ldr	r2, [pc, #452]	; (a1c4 <w5500_cmd_read_socket_tcp+0x390>)
    a000:	2110      	movs	r1, #16
    a002:	54d1      	strb	r1, [r2, r3]
				break;
    a004:	e004      	b.n	a010 <w5500_cmd_read_socket_tcp+0x1dc>
				default:
					st_cmd_w5500=TCP_PART_RD;
    a006:	4b63      	ldr	r3, [pc, #396]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    a008:	2201      	movs	r2, #1
    a00a:	701a      	strb	r2, [r3, #0]
				return PROC_WAIT;
    a00c:	2300      	movs	r3, #0
    a00e:	e176      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
			}
			addr_w5500=ADDR_SOC_COMMAND;
    a010:	4b62      	ldr	r3, [pc, #392]	; (a19c <w5500_cmd_read_socket_tcp+0x368>)
    a012:	2201      	movs	r2, #1
    a014:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a016:	1dfb      	adds	r3, r7, #7
    a018:	781b      	ldrb	r3, [r3, #0]
    a01a:	015b      	lsls	r3, r3, #5
    a01c:	b21b      	sxth	r3, r3
    a01e:	2208      	movs	r2, #8
    a020:	4313      	orrs	r3, r2
    a022:	b21b      	sxth	r3, r3
    a024:	b29a      	uxth	r2, r3
    a026:	4b5e      	ldr	r3, [pc, #376]	; (a1a0 <w5500_cmd_read_socket_tcp+0x36c>)
    a028:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a02a:	4b5f      	ldr	r3, [pc, #380]	; (a1a8 <w5500_cmd_read_socket_tcp+0x374>)
    a02c:	4a65      	ldr	r2, [pc, #404]	; (a1c4 <w5500_cmd_read_socket_tcp+0x390>)
    a02e:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a030:	4b5e      	ldr	r3, [pc, #376]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    a032:	2201      	movs	r2, #1
    a034:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a036:	4b5e      	ldr	r3, [pc, #376]	; (a1b0 <w5500_cmd_read_socket_tcp+0x37c>)
    a038:	2202      	movs	r2, #2
    a03a:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500=TCP_STATUS_RD;
    a03c:	4b55      	ldr	r3, [pc, #340]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    a03e:	2205      	movs	r2, #5
    a040:	701a      	strb	r2, [r3, #0]
		break;
    a042:	e15b      	b.n	a2fc <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_PART_RD:	
			sizert=(*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R017_Sn_RX_RSR_26_27.case2);//check len
    a044:	1dfb      	adds	r3, r7, #7
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	4a56      	ldr	r2, [pc, #344]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    a04a:	212d      	movs	r1, #45	; 0x2d
    a04c:	015b      	lsls	r3, r3, #5
    a04e:	18d3      	adds	r3, r2, r3
    a050:	185b      	adds	r3, r3, r1
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	021b      	lsls	r3, r3, #8
    a056:	b21a      	sxth	r2, r3
    a058:	1dfb      	adds	r3, r7, #7
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	4951      	ldr	r1, [pc, #324]	; (a1a4 <w5500_cmd_read_socket_tcp+0x370>)
    a05e:	202e      	movs	r0, #46	; 0x2e
    a060:	015b      	lsls	r3, r3, #5
    a062:	18cb      	adds	r3, r1, r3
    a064:	181b      	adds	r3, r3, r0
    a066:	781b      	ldrb	r3, [r3, #0]
    a068:	b21b      	sxth	r3, r3
    a06a:	4313      	orrs	r3, r2
    a06c:	b21b      	sxth	r3, r3
    a06e:	b29a      	uxth	r2, r3
    a070:	4b55      	ldr	r3, [pc, #340]	; (a1c8 <w5500_cmd_read_socket_tcp+0x394>)
    a072:	801a      	strh	r2, [r3, #0]
			if(sizert!=0x0000)//back & return		
    a074:	4b54      	ldr	r3, [pc, #336]	; (a1c8 <w5500_cmd_read_socket_tcp+0x394>)
    a076:	881b      	ldrh	r3, [r3, #0]
    a078:	b29b      	uxth	r3, r3
    a07a:	2b00      	cmp	r3, #0
    a07c:	d100      	bne.n	a080 <w5500_cmd_read_socket_tcp+0x24c>
    a07e:	e084      	b.n	a18a <w5500_cmd_read_socket_tcp+0x356>
			{
				addr_w5500=eth_sock[sock_numb].ptr_rx_buf;//addr start messege
    a080:	1dfb      	adds	r3, r7, #7
    a082:	781a      	ldrb	r2, [r3, #0]
    a084:	494c      	ldr	r1, [pc, #304]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a086:	23ba      	movs	r3, #186	; 0xba
    a088:	00db      	lsls	r3, r3, #3
    a08a:	484c      	ldr	r0, [pc, #304]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a08c:	4342      	muls	r2, r0
    a08e:	188a      	adds	r2, r1, r2
    a090:	18d3      	adds	r3, r2, r3
    a092:	78da      	ldrb	r2, [r3, #3]
    a094:	791b      	ldrb	r3, [r3, #4]
    a096:	021b      	lsls	r3, r3, #8
    a098:	4313      	orrs	r3, r2
    a09a:	b29a      	uxth	r2, r3
    a09c:	4b3f      	ldr	r3, [pc, #252]	; (a19c <w5500_cmd_read_socket_tcp+0x368>)
    a09e:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_RX_BUFFER | SOCKET(sock_numb);//bsb sock RX
    a0a0:	1dfb      	adds	r3, r7, #7
    a0a2:	781b      	ldrb	r3, [r3, #0]
    a0a4:	015b      	lsls	r3, r3, #5
    a0a6:	b21b      	sxth	r3, r3
    a0a8:	2218      	movs	r2, #24
    a0aa:	4313      	orrs	r3, r2
    a0ac:	b21b      	sxth	r3, r3
    a0ae:	b29a      	uxth	r2, r3
    a0b0:	4b3b      	ldr	r3, [pc, #236]	; (a1a0 <w5500_cmd_read_socket_tcp+0x36c>)
    a0b2:	801a      	strh	r2, [r3, #0]
				ptr_buf=(BYTE*) & eth_sock[sock_numb].data;
    a0b4:	1dfb      	adds	r3, r7, #7
    a0b6:	781b      	ldrb	r3, [r3, #0]
    a0b8:	4a40      	ldr	r2, [pc, #256]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a0ba:	4353      	muls	r3, r2
    a0bc:	3308      	adds	r3, #8
    a0be:	001a      	movs	r2, r3
    a0c0:	4b3d      	ldr	r3, [pc, #244]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a0c2:	18d2      	adds	r2, r2, r3
    a0c4:	4b38      	ldr	r3, [pc, #224]	; (a1a8 <w5500_cmd_read_socket_tcp+0x374>)
    a0c6:	601a      	str	r2, [r3, #0]
				len_buf = sizert;
    a0c8:	4b3f      	ldr	r3, [pc, #252]	; (a1c8 <w5500_cmd_read_socket_tcp+0x394>)
    a0ca:	881b      	ldrh	r3, [r3, #0]
    a0cc:	b29a      	uxth	r2, r3
    a0ce:	4b37      	ldr	r3, [pc, #220]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    a0d0:	801a      	strh	r2, [r3, #0]
				eth_sock[sock_numb].ptr_rx_buf=eth_sock[sock_numb].ptr_rx_buf+len_buf;
    a0d2:	1dfb      	adds	r3, r7, #7
    a0d4:	7819      	ldrb	r1, [r3, #0]
    a0d6:	1dfb      	adds	r3, r7, #7
    a0d8:	781a      	ldrb	r2, [r3, #0]
    a0da:	4837      	ldr	r0, [pc, #220]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a0dc:	23ba      	movs	r3, #186	; 0xba
    a0de:	00db      	lsls	r3, r3, #3
    a0e0:	4c36      	ldr	r4, [pc, #216]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a0e2:	4362      	muls	r2, r4
    a0e4:	1882      	adds	r2, r0, r2
    a0e6:	18d3      	adds	r3, r2, r3
    a0e8:	78da      	ldrb	r2, [r3, #3]
    a0ea:	791b      	ldrb	r3, [r3, #4]
    a0ec:	021b      	lsls	r3, r3, #8
    a0ee:	4313      	orrs	r3, r2
    a0f0:	b29a      	uxth	r2, r3
    a0f2:	4b2e      	ldr	r3, [pc, #184]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    a0f4:	881b      	ldrh	r3, [r3, #0]
    a0f6:	18d3      	adds	r3, r2, r3
    a0f8:	b29a      	uxth	r2, r3
    a0fa:	482f      	ldr	r0, [pc, #188]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a0fc:	23ba      	movs	r3, #186	; 0xba
    a0fe:	00db      	lsls	r3, r3, #3
    a100:	4c2e      	ldr	r4, [pc, #184]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a102:	4361      	muls	r1, r4
    a104:	1841      	adds	r1, r0, r1
    a106:	18cb      	adds	r3, r1, r3
    a108:	3303      	adds	r3, #3
    a10a:	21ff      	movs	r1, #255	; 0xff
    a10c:	4011      	ands	r1, r2
    a10e:	000c      	movs	r4, r1
    a110:	7819      	ldrb	r1, [r3, #0]
    a112:	2000      	movs	r0, #0
    a114:	4001      	ands	r1, r0
    a116:	1c08      	adds	r0, r1, #0
    a118:	1c21      	adds	r1, r4, #0
    a11a:	4301      	orrs	r1, r0
    a11c:	7019      	strb	r1, [r3, #0]
    a11e:	0a12      	lsrs	r2, r2, #8
    a120:	b290      	uxth	r0, r2
    a122:	785a      	ldrb	r2, [r3, #1]
    a124:	2100      	movs	r1, #0
    a126:	400a      	ands	r2, r1
    a128:	1c11      	adds	r1, r2, #0
    a12a:	1c02      	adds	r2, r0, #0
    a12c:	430a      	orrs	r2, r1
    a12e:	705a      	strb	r2, [r3, #1]
				
				size=len_buf;
    a130:	4b1e      	ldr	r3, [pc, #120]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    a132:	881a      	ldrh	r2, [r3, #0]
    a134:	4b1f      	ldr	r3, [pc, #124]	; (a1b4 <w5500_cmd_read_socket_tcp+0x380>)
    a136:	801a      	strh	r2, [r3, #0]
				if(len_buf>DEFAULT_MTU_TCP){size=PROC_ER;}
    a138:	4b1c      	ldr	r3, [pc, #112]	; (a1ac <w5500_cmd_read_socket_tcp+0x378>)
    a13a:	881b      	ldrh	r3, [r3, #0]
    a13c:	4a23      	ldr	r2, [pc, #140]	; (a1cc <w5500_cmd_read_socket_tcp+0x398>)
    a13e:	4293      	cmp	r3, r2
    a140:	d902      	bls.n	a148 <w5500_cmd_read_socket_tcp+0x314>
    a142:	4b1c      	ldr	r3, [pc, #112]	; (a1b4 <w5500_cmd_read_socket_tcp+0x380>)
    a144:	2202      	movs	r2, #2
    a146:	801a      	strh	r2, [r3, #0]
					
				eth_sock[sock_numb].len[0]=	(size & 0xFF00)>>8;
    a148:	1dfb      	adds	r3, r7, #7
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	4a19      	ldr	r2, [pc, #100]	; (a1b4 <w5500_cmd_read_socket_tcp+0x380>)
    a14e:	8812      	ldrh	r2, [r2, #0]
    a150:	0a12      	lsrs	r2, r2, #8
    a152:	b292      	uxth	r2, r2
    a154:	b2d0      	uxtb	r0, r2
    a156:	4a18      	ldr	r2, [pc, #96]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a158:	4918      	ldr	r1, [pc, #96]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a15a:	434b      	muls	r3, r1
    a15c:	18d3      	adds	r3, r2, r3
    a15e:	3306      	adds	r3, #6
    a160:	1c02      	adds	r2, r0, #0
    a162:	701a      	strb	r2, [r3, #0]
				eth_sock[sock_numb].len[1]=	(size & 0x00FF);							
    a164:	1dfb      	adds	r3, r7, #7
    a166:	781b      	ldrb	r3, [r3, #0]
    a168:	4a12      	ldr	r2, [pc, #72]	; (a1b4 <w5500_cmd_read_socket_tcp+0x380>)
    a16a:	8812      	ldrh	r2, [r2, #0]
    a16c:	b2d0      	uxtb	r0, r2
    a16e:	4a12      	ldr	r2, [pc, #72]	; (a1b8 <w5500_cmd_read_socket_tcp+0x384>)
    a170:	4912      	ldr	r1, [pc, #72]	; (a1bc <w5500_cmd_read_socket_tcp+0x388>)
    a172:	434b      	muls	r3, r1
    a174:	18d3      	adds	r3, r2, r3
    a176:	3307      	adds	r3, #7
    a178:	1c02      	adds	r2, r0, #0
    a17a:	701a      	strb	r2, [r3, #0]
				cmd=READ_DATA;
    a17c:	4b0c      	ldr	r3, [pc, #48]	; (a1b0 <w5500_cmd_read_socket_tcp+0x37c>)
    a17e:	2201      	movs	r2, #1
    a180:	701a      	strb	r2, [r3, #0]
				st_cmd_w5500 = TCP_DROP_PTR;
    a182:	4b04      	ldr	r3, [pc, #16]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    a184:	2203      	movs	r2, #3
    a186:	701a      	strb	r2, [r3, #0]
				break;
    a188:	e0b8      	b.n	a2fc <w5500_cmd_read_socket_tcp+0x4c8>
			}
			st_cmd_w5500=TCP_GIVE_LEN;
    a18a:	4b02      	ldr	r3, [pc, #8]	; (a194 <w5500_cmd_read_socket_tcp+0x360>)
    a18c:	2200      	movs	r2, #0
    a18e:	701a      	strb	r2, [r3, #0]
			return PROC_ER;
    a190:	2302      	movs	r3, #2
    a192:	e0b4      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
    a194:	20000490 	.word	0x20000490
    a198:	0000c878 	.word	0x0000c878
    a19c:	20000480 	.word	0x20000480
    a1a0:	20000482 	.word	0x20000482
    a1a4:	20003b00 	.word	0x20003b00
    a1a8:	20003af8 	.word	0x20003af8
    a1ac:	20000484 	.word	0x20000484
    a1b0:	20003bb3 	.word	0x20003bb3
    a1b4:	20000492 	.word	0x20000492
    a1b8:	200005cc 	.word	0x200005cc
    a1bc:	000005e5 	.word	0x000005e5
    a1c0:	20000494 	.word	0x20000494
    a1c4:	20003bb4 	.word	0x20003bb4
    a1c8:	20000486 	.word	0x20000486
    a1cc:	000005b4 	.word	0x000005b4
		break;
		case TCP_DROP_PTR:
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_rx_buf>>8);			cnt++;//move to next part messege data 1
    a1d0:	230f      	movs	r3, #15
    a1d2:	18fb      	adds	r3, r7, r3
    a1d4:	781a      	ldrb	r2, [r3, #0]
    a1d6:	1dfb      	adds	r3, r7, #7
    a1d8:	7819      	ldrb	r1, [r3, #0]
    a1da:	484b      	ldr	r0, [pc, #300]	; (a308 <w5500_cmd_read_socket_tcp+0x4d4>)
    a1dc:	23ba      	movs	r3, #186	; 0xba
    a1de:	00db      	lsls	r3, r3, #3
    a1e0:	4c4a      	ldr	r4, [pc, #296]	; (a30c <w5500_cmd_read_socket_tcp+0x4d8>)
    a1e2:	4361      	muls	r1, r4
    a1e4:	1841      	adds	r1, r0, r1
    a1e6:	18cb      	adds	r3, r1, r3
    a1e8:	78d9      	ldrb	r1, [r3, #3]
    a1ea:	791b      	ldrb	r3, [r3, #4]
    a1ec:	021b      	lsls	r3, r3, #8
    a1ee:	430b      	orrs	r3, r1
    a1f0:	b29b      	uxth	r3, r3
    a1f2:	0a1b      	lsrs	r3, r3, #8
    a1f4:	b29b      	uxth	r3, r3
    a1f6:	b2d9      	uxtb	r1, r3
    a1f8:	4b45      	ldr	r3, [pc, #276]	; (a310 <w5500_cmd_read_socket_tcp+0x4dc>)
    a1fa:	5499      	strb	r1, [r3, r2]
    a1fc:	230f      	movs	r3, #15
    a1fe:	18fb      	adds	r3, r7, r3
    a200:	781a      	ldrb	r2, [r3, #0]
    a202:	230f      	movs	r3, #15
    a204:	18fb      	adds	r3, r7, r3
    a206:	3201      	adds	r2, #1
    a208:	701a      	strb	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_rx_buf;			cnt++;//2d byte data 2
    a20a:	230f      	movs	r3, #15
    a20c:	18fb      	adds	r3, r7, r3
    a20e:	781a      	ldrb	r2, [r3, #0]
    a210:	1dfb      	adds	r3, r7, #7
    a212:	7819      	ldrb	r1, [r3, #0]
    a214:	483c      	ldr	r0, [pc, #240]	; (a308 <w5500_cmd_read_socket_tcp+0x4d4>)
    a216:	23ba      	movs	r3, #186	; 0xba
    a218:	00db      	lsls	r3, r3, #3
    a21a:	4c3c      	ldr	r4, [pc, #240]	; (a30c <w5500_cmd_read_socket_tcp+0x4d8>)
    a21c:	4361      	muls	r1, r4
    a21e:	1841      	adds	r1, r0, r1
    a220:	18cb      	adds	r3, r1, r3
    a222:	78d9      	ldrb	r1, [r3, #3]
    a224:	791b      	ldrb	r3, [r3, #4]
    a226:	021b      	lsls	r3, r3, #8
    a228:	430b      	orrs	r3, r1
    a22a:	b29b      	uxth	r3, r3
    a22c:	b2d9      	uxtb	r1, r3
    a22e:	4b38      	ldr	r3, [pc, #224]	; (a310 <w5500_cmd_read_socket_tcp+0x4dc>)
    a230:	5499      	strb	r1, [r3, r2]
    a232:	230f      	movs	r3, #15
    a234:	18fb      	adds	r3, r7, r3
    a236:	781a      	ldrb	r2, [r3, #0]
    a238:	230f      	movs	r3, #15
    a23a:	18fb      	adds	r3, r7, r3
    a23c:	3201      	adds	r2, #1
    a23e:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_RX_READ_PTR_0;
    a240:	4b34      	ldr	r3, [pc, #208]	; (a314 <w5500_cmd_read_socket_tcp+0x4e0>)
    a242:	2228      	movs	r2, #40	; 0x28
    a244:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a246:	1dfb      	adds	r3, r7, #7
    a248:	781b      	ldrb	r3, [r3, #0]
    a24a:	015b      	lsls	r3, r3, #5
    a24c:	b21b      	sxth	r3, r3
    a24e:	2208      	movs	r2, #8
    a250:	4313      	orrs	r3, r2
    a252:	b21b      	sxth	r3, r3
    a254:	b29a      	uxth	r2, r3
    a256:	4b30      	ldr	r3, [pc, #192]	; (a318 <w5500_cmd_read_socket_tcp+0x4e4>)
    a258:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a25a:	4b30      	ldr	r3, [pc, #192]	; (a31c <w5500_cmd_read_socket_tcp+0x4e8>)
    a25c:	4a2c      	ldr	r2, [pc, #176]	; (a310 <w5500_cmd_read_socket_tcp+0x4dc>)
    a25e:	601a      	str	r2, [r3, #0]
			len_buf=2;
    a260:	4b2f      	ldr	r3, [pc, #188]	; (a320 <w5500_cmd_read_socket_tcp+0x4ec>)
    a262:	2202      	movs	r2, #2
    a264:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a266:	4b2f      	ldr	r3, [pc, #188]	; (a324 <w5500_cmd_read_socket_tcp+0x4f0>)
    a268:	2202      	movs	r2, #2
    a26a:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_RSV_CMD;//"next" 
    a26c:	4b2e      	ldr	r3, [pc, #184]	; (a328 <w5500_cmd_read_socket_tcp+0x4f4>)
    a26e:	2202      	movs	r2, #2
    a270:	701a      	strb	r2, [r3, #0]
		break;
    a272:	e043      	b.n	a2fc <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_RSV_CMD:
			wbuf_w55[cnt]=CMD_RECV;					cnt++;//go to reciv mode (and rewrite number)
    a274:	230f      	movs	r3, #15
    a276:	18fb      	adds	r3, r7, r3
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	4a25      	ldr	r2, [pc, #148]	; (a310 <w5500_cmd_read_socket_tcp+0x4dc>)
    a27c:	2140      	movs	r1, #64	; 0x40
    a27e:	54d1      	strb	r1, [r2, r3]
    a280:	230f      	movs	r3, #15
    a282:	18fb      	adds	r3, r7, r3
    a284:	781a      	ldrb	r2, [r3, #0]
    a286:	230f      	movs	r3, #15
    a288:	18fb      	adds	r3, r7, r3
    a28a:	3201      	adds	r2, #1
    a28c:	701a      	strb	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a28e:	4b21      	ldr	r3, [pc, #132]	; (a314 <w5500_cmd_read_socket_tcp+0x4e0>)
    a290:	2201      	movs	r2, #1
    a292:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a294:	1dfb      	adds	r3, r7, #7
    a296:	781b      	ldrb	r3, [r3, #0]
    a298:	015b      	lsls	r3, r3, #5
    a29a:	b21b      	sxth	r3, r3
    a29c:	2208      	movs	r2, #8
    a29e:	4313      	orrs	r3, r2
    a2a0:	b21b      	sxth	r3, r3
    a2a2:	b29a      	uxth	r2, r3
    a2a4:	4b1c      	ldr	r3, [pc, #112]	; (a318 <w5500_cmd_read_socket_tcp+0x4e4>)
    a2a6:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a2a8:	4b1c      	ldr	r3, [pc, #112]	; (a31c <w5500_cmd_read_socket_tcp+0x4e8>)
    a2aa:	4a19      	ldr	r2, [pc, #100]	; (a310 <w5500_cmd_read_socket_tcp+0x4dc>)
    a2ac:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a2ae:	230f      	movs	r3, #15
    a2b0:	18fb      	adds	r3, r7, r3
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	b29a      	uxth	r2, r3
    a2b6:	4b1a      	ldr	r3, [pc, #104]	; (a320 <w5500_cmd_read_socket_tcp+0x4ec>)
    a2b8:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a2ba:	4b1a      	ldr	r3, [pc, #104]	; (a324 <w5500_cmd_read_socket_tcp+0x4f0>)
    a2bc:	2202      	movs	r2, #2
    a2be:	701a      	strb	r2, [r3, #0]
			st_cmd_w5500 = TCP_BK_START;//"next" 
    a2c0:	4b19      	ldr	r3, [pc, #100]	; (a328 <w5500_cmd_read_socket_tcp+0x4f4>)
    a2c2:	2204      	movs	r2, #4
    a2c4:	701a      	strb	r2, [r3, #0]
		break;
    a2c6:	e019      	b.n	a2fc <w5500_cmd_read_socket_tcp+0x4c8>
		case TCP_BK_START:
			st_cmd_w5500=TCP_GIVE_LEN;//сброс параметров
    a2c8:	4b17      	ldr	r3, [pc, #92]	; (a328 <w5500_cmd_read_socket_tcp+0x4f4>)
    a2ca:	2200      	movs	r2, #0
    a2cc:	701a      	strb	r2, [r3, #0]
			if(!size)					 {return PROC_ER;}
    a2ce:	4b17      	ldr	r3, [pc, #92]	; (a32c <w5500_cmd_read_socket_tcp+0x4f8>)
    a2d0:	881b      	ldrh	r3, [r3, #0]
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d101      	bne.n	a2da <w5500_cmd_read_socket_tcp+0x4a6>
    a2d6:	2302      	movs	r3, #2
    a2d8:	e011      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
			if(size > USART_BUF_SIZE)	 {return PROC_ER;}
    a2da:	4b14      	ldr	r3, [pc, #80]	; (a32c <w5500_cmd_read_socket_tcp+0x4f8>)
    a2dc:	881a      	ldrh	r2, [r3, #0]
    a2de:	2380      	movs	r3, #128	; 0x80
    a2e0:	005b      	lsls	r3, r3, #1
    a2e2:	429a      	cmp	r2, r3
    a2e4:	d901      	bls.n	a2ea <w5500_cmd_read_socket_tcp+0x4b6>
    a2e6:	2302      	movs	r3, #2
    a2e8:	e009      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
			return (size);
    a2ea:	4b10      	ldr	r3, [pc, #64]	; (a32c <w5500_cmd_read_socket_tcp+0x4f8>)
    a2ec:	881b      	ldrh	r3, [r3, #0]
    a2ee:	e006      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
		break;
		default:
				st_cmd_w5500=0; return PROC_ER;
    a2f0:	4b0d      	ldr	r3, [pc, #52]	; (a328 <w5500_cmd_read_socket_tcp+0x4f4>)
    a2f2:	2200      	movs	r2, #0
    a2f4:	701a      	strb	r2, [r3, #0]
    a2f6:	2302      	movs	r3, #2
    a2f8:	e001      	b.n	a2fe <w5500_cmd_read_socket_tcp+0x4ca>
		break;	
    a2fa:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a2fc:	2300      	movs	r3, #0
}
    a2fe:	0018      	movs	r0, r3
    a300:	46bd      	mov	sp, r7
    a302:	b005      	add	sp, #20
    a304:	bd90      	pop	{r4, r7, pc}
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	200005cc 	.word	0x200005cc
    a30c:	000005e5 	.word	0x000005e5
    a310:	20003bb4 	.word	0x20003bb4
    a314:	20000480 	.word	0x20000480
    a318:	20000482 	.word	0x20000482
    a31c:	20003af8 	.word	0x20003af8
    a320:	20000484 	.word	0x20000484
    a324:	20003bb3 	.word	0x20003bb3
    a328:	20000490 	.word	0x20000490
    a32c:	20000492 	.word	0x20000492

0000a330 <w5500_write_socket_tcp>:

WORD w5500_write_socket_tcp (BYTE sock_numb)
{
    a330:	b590      	push	{r4, r7, lr}
    a332:	b085      	sub	sp, #20
    a334:	af00      	add	r7, sp, #0
    a336:	0002      	movs	r2, r0
    a338:	1dfb      	adds	r3, r7, #7
    a33a:	701a      	strb	r2, [r3, #0]
	static BYTE st_wr_w5500=0;
	static BYTE numb_static=0;
	WORD cnt=0;
    a33c:	230e      	movs	r3, #14
    a33e:	18fb      	adds	r3, r7, r3
    a340:	2200      	movs	r2, #0
    a342:	801a      	strh	r2, [r3, #0]
	
	if(numb_static!=sock_numb){numb_static=sock_numb;st_wr_w5500=0;}
    a344:	4bdc      	ldr	r3, [pc, #880]	; (a6b8 <w5500_write_socket_tcp+0x388>)
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	1dfa      	adds	r2, r7, #7
    a34a:	7812      	ldrb	r2, [r2, #0]
    a34c:	429a      	cmp	r2, r3
    a34e:	d006      	beq.n	a35e <w5500_write_socket_tcp+0x2e>
    a350:	4bd9      	ldr	r3, [pc, #868]	; (a6b8 <w5500_write_socket_tcp+0x388>)
    a352:	1dfa      	adds	r2, r7, #7
    a354:	7812      	ldrb	r2, [r2, #0]
    a356:	701a      	strb	r2, [r3, #0]
    a358:	4bd8      	ldr	r3, [pc, #864]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a35a:	2200      	movs	r2, #0
    a35c:	701a      	strb	r2, [r3, #0]

	switch(st_wr_w5500)
    a35e:	4bd7      	ldr	r3, [pc, #860]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a360:	781b      	ldrb	r3, [r3, #0]
    a362:	2b06      	cmp	r3, #6
    a364:	d900      	bls.n	a368 <w5500_write_socket_tcp+0x38>
    a366:	e21a      	b.n	a79e <w5500_write_socket_tcp+0x46e>
    a368:	009a      	lsls	r2, r3, #2
    a36a:	4bd5      	ldr	r3, [pc, #852]	; (a6c0 <w5500_write_socket_tcp+0x390>)
    a36c:	18d3      	adds	r3, r2, r3
    a36e:	681b      	ldr	r3, [r3, #0]
    a370:	469f      	mov	pc, r3
	{
		case TCP_RD_FSR:																	//read reg tx status FSR
			addr_w5500=ADDR_SOC_TX_FREE_SIZE_0;
    a372:	4bd4      	ldr	r3, [pc, #848]	; (a6c4 <w5500_write_socket_tcp+0x394>)
    a374:	2220      	movs	r2, #32
    a376:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a378:	1dfb      	adds	r3, r7, #7
    a37a:	781b      	ldrb	r3, [r3, #0]
    a37c:	015b      	lsls	r3, r3, #5
    a37e:	b21b      	sxth	r3, r3
    a380:	2208      	movs	r2, #8
    a382:	4313      	orrs	r3, r2
    a384:	b21b      	sxth	r3, r3
    a386:	b29a      	uxth	r2, r3
    a388:	4bcf      	ldr	r3, [pc, #828]	; (a6c8 <w5500_write_socket_tcp+0x398>)
    a38a:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R014_Sn_TX_FSR_20_21;
    a38c:	1dfb      	adds	r3, r7, #7
    a38e:	781b      	ldrb	r3, [r3, #0]
    a390:	3301      	adds	r3, #1
    a392:	015a      	lsls	r2, r3, #5
    a394:	4bcd      	ldr	r3, [pc, #820]	; (a6cc <w5500_write_socket_tcp+0x39c>)
    a396:	18d3      	adds	r3, r2, r3
    a398:	1dda      	adds	r2, r3, #7
    a39a:	4bcd      	ldr	r3, [pc, #820]	; (a6d0 <w5500_write_socket_tcp+0x3a0>)
    a39c:	601a      	str	r2, [r3, #0]
			len_buf=6;
    a39e:	4bcd      	ldr	r3, [pc, #820]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a3a0:	2206      	movs	r2, #6
    a3a2:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a3a4:	4bcc      	ldr	r3, [pc, #816]	; (a6d8 <w5500_write_socket_tcp+0x3a8>)
    a3a6:	2201      	movs	r2, #1
    a3a8:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a3aa:	4bc4      	ldr	r3, [pc, #784]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a3ac:	781b      	ldrb	r3, [r3, #0]
    a3ae:	3301      	adds	r3, #1
    a3b0:	b2da      	uxtb	r2, r3
    a3b2:	4bc2      	ldr	r3, [pc, #776]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a3b4:	701a      	strb	r2, [r3, #0]
		break;
    a3b6:	e1f8      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
		case TCP_WR_DATA:	
			sizert=	(*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case1<<8) | (*(BYTE*)&chip.sockReg[sock_numb].R016_Sn_TX_WR_24_25.case2);				
    a3b8:	1dfb      	adds	r3, r7, #7
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	4ac3      	ldr	r2, [pc, #780]	; (a6cc <w5500_write_socket_tcp+0x39c>)
    a3be:	212b      	movs	r1, #43	; 0x2b
    a3c0:	015b      	lsls	r3, r3, #5
    a3c2:	18d3      	adds	r3, r2, r3
    a3c4:	185b      	adds	r3, r3, r1
    a3c6:	781b      	ldrb	r3, [r3, #0]
    a3c8:	021b      	lsls	r3, r3, #8
    a3ca:	b21a      	sxth	r2, r3
    a3cc:	1dfb      	adds	r3, r7, #7
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	49be      	ldr	r1, [pc, #760]	; (a6cc <w5500_write_socket_tcp+0x39c>)
    a3d2:	202c      	movs	r0, #44	; 0x2c
    a3d4:	015b      	lsls	r3, r3, #5
    a3d6:	18cb      	adds	r3, r1, r3
    a3d8:	181b      	adds	r3, r3, r0
    a3da:	781b      	ldrb	r3, [r3, #0]
    a3dc:	b21b      	sxth	r3, r3
    a3de:	4313      	orrs	r3, r2
    a3e0:	b21b      	sxth	r3, r3
    a3e2:	b29a      	uxth	r2, r3
    a3e4:	4bbd      	ldr	r3, [pc, #756]	; (a6dc <w5500_write_socket_tcp+0x3ac>)
    a3e6:	801a      	strh	r2, [r3, #0]
			
			if(sizert!=eth_sock[sock_numb].ptr_tx_buf){ eth_sock[sock_numb].ptr_tx_buf=sizert; }
    a3e8:	1dfb      	adds	r3, r7, #7
    a3ea:	781a      	ldrb	r2, [r3, #0]
    a3ec:	49bc      	ldr	r1, [pc, #752]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a3ee:	23ba      	movs	r3, #186	; 0xba
    a3f0:	00db      	lsls	r3, r3, #3
    a3f2:	48bc      	ldr	r0, [pc, #752]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a3f4:	4342      	muls	r2, r0
    a3f6:	188a      	adds	r2, r1, r2
    a3f8:	18d3      	adds	r3, r2, r3
    a3fa:	795a      	ldrb	r2, [r3, #5]
    a3fc:	799b      	ldrb	r3, [r3, #6]
    a3fe:	021b      	lsls	r3, r3, #8
    a400:	4313      	orrs	r3, r2
    a402:	b29a      	uxth	r2, r3
    a404:	4bb5      	ldr	r3, [pc, #724]	; (a6dc <w5500_write_socket_tcp+0x3ac>)
    a406:	881b      	ldrh	r3, [r3, #0]
    a408:	b29b      	uxth	r3, r3
    a40a:	429a      	cmp	r2, r3
    a40c:	d01f      	beq.n	a44e <w5500_write_socket_tcp+0x11e>
    a40e:	1dfb      	adds	r3, r7, #7
    a410:	7819      	ldrb	r1, [r3, #0]
    a412:	4bb2      	ldr	r3, [pc, #712]	; (a6dc <w5500_write_socket_tcp+0x3ac>)
    a414:	881b      	ldrh	r3, [r3, #0]
    a416:	b29a      	uxth	r2, r3
    a418:	48b1      	ldr	r0, [pc, #708]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a41a:	23ba      	movs	r3, #186	; 0xba
    a41c:	00db      	lsls	r3, r3, #3
    a41e:	4cb1      	ldr	r4, [pc, #708]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a420:	4361      	muls	r1, r4
    a422:	1841      	adds	r1, r0, r1
    a424:	18cb      	adds	r3, r1, r3
    a426:	3305      	adds	r3, #5
    a428:	21ff      	movs	r1, #255	; 0xff
    a42a:	4011      	ands	r1, r2
    a42c:	000c      	movs	r4, r1
    a42e:	7819      	ldrb	r1, [r3, #0]
    a430:	2000      	movs	r0, #0
    a432:	4001      	ands	r1, r0
    a434:	1c08      	adds	r0, r1, #0
    a436:	1c21      	adds	r1, r4, #0
    a438:	4301      	orrs	r1, r0
    a43a:	7019      	strb	r1, [r3, #0]
    a43c:	0a12      	lsrs	r2, r2, #8
    a43e:	b290      	uxth	r0, r2
    a440:	785a      	ldrb	r2, [r3, #1]
    a442:	2100      	movs	r1, #0
    a444:	400a      	ands	r2, r1
    a446:	1c11      	adds	r1, r2, #0
    a448:	1c02      	adds	r2, r0, #0
    a44a:	430a      	orrs	r2, r1
    a44c:	705a      	strb	r2, [r3, #1]
																			
			addr_w5500=eth_sock[sock_numb].ptr_tx_buf;
    a44e:	1dfb      	adds	r3, r7, #7
    a450:	781a      	ldrb	r2, [r3, #0]
    a452:	49a3      	ldr	r1, [pc, #652]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a454:	23ba      	movs	r3, #186	; 0xba
    a456:	00db      	lsls	r3, r3, #3
    a458:	48a2      	ldr	r0, [pc, #648]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a45a:	4342      	muls	r2, r0
    a45c:	188a      	adds	r2, r1, r2
    a45e:	18d3      	adds	r3, r2, r3
    a460:	795a      	ldrb	r2, [r3, #5]
    a462:	799b      	ldrb	r3, [r3, #6]
    a464:	021b      	lsls	r3, r3, #8
    a466:	4313      	orrs	r3, r2
    a468:	b29a      	uxth	r2, r3
    a46a:	4b96      	ldr	r3, [pc, #600]	; (a6c4 <w5500_write_socket_tcp+0x394>)
    a46c:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_TX_BUFFER | SOCKET(sock_numb);
    a46e:	1dfb      	adds	r3, r7, #7
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	015b      	lsls	r3, r3, #5
    a474:	b21b      	sxth	r3, r3
    a476:	2210      	movs	r2, #16
    a478:	4313      	orrs	r3, r2
    a47a:	b21b      	sxth	r3, r3
    a47c:	b29a      	uxth	r2, r3
    a47e:	4b92      	ldr	r3, [pc, #584]	; (a6c8 <w5500_write_socket_tcp+0x398>)
    a480:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&eth_sock[sock_numb].data;
    a482:	1dfb      	adds	r3, r7, #7
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	4a97      	ldr	r2, [pc, #604]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a488:	4353      	muls	r3, r2
    a48a:	3308      	adds	r3, #8
    a48c:	001a      	movs	r2, r3
    a48e:	4b94      	ldr	r3, [pc, #592]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a490:	18d2      	adds	r2, r2, r3
    a492:	4b8f      	ldr	r3, [pc, #572]	; (a6d0 <w5500_write_socket_tcp+0x3a0>)
    a494:	601a      	str	r2, [r3, #0]
			len_buf=(eth_sock[sock_numb].len[0] << 8) | (eth_sock[sock_numb].len[1]);
    a496:	1dfb      	adds	r3, r7, #7
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	4a91      	ldr	r2, [pc, #580]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a49c:	4991      	ldr	r1, [pc, #580]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a49e:	434b      	muls	r3, r1
    a4a0:	18d3      	adds	r3, r2, r3
    a4a2:	3306      	adds	r3, #6
    a4a4:	781b      	ldrb	r3, [r3, #0]
    a4a6:	021b      	lsls	r3, r3, #8
    a4a8:	b21a      	sxth	r2, r3
    a4aa:	1dfb      	adds	r3, r7, #7
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	498c      	ldr	r1, [pc, #560]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a4b0:	488c      	ldr	r0, [pc, #560]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a4b2:	4343      	muls	r3, r0
    a4b4:	18cb      	adds	r3, r1, r3
    a4b6:	3307      	adds	r3, #7
    a4b8:	781b      	ldrb	r3, [r3, #0]
    a4ba:	b21b      	sxth	r3, r3
    a4bc:	4313      	orrs	r3, r2
    a4be:	b21b      	sxth	r3, r3
    a4c0:	b29a      	uxth	r2, r3
    a4c2:	4b84      	ldr	r3, [pc, #528]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a4c4:	801a      	strh	r2, [r3, #0]
			eth_sock[sock_numb].ptr_tx_buf=eth_sock[sock_numb].ptr_tx_buf+len_buf;
    a4c6:	1dfb      	adds	r3, r7, #7
    a4c8:	7819      	ldrb	r1, [r3, #0]
    a4ca:	1dfb      	adds	r3, r7, #7
    a4cc:	781a      	ldrb	r2, [r3, #0]
    a4ce:	4884      	ldr	r0, [pc, #528]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a4d0:	23ba      	movs	r3, #186	; 0xba
    a4d2:	00db      	lsls	r3, r3, #3
    a4d4:	4c83      	ldr	r4, [pc, #524]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a4d6:	4362      	muls	r2, r4
    a4d8:	1882      	adds	r2, r0, r2
    a4da:	18d3      	adds	r3, r2, r3
    a4dc:	795a      	ldrb	r2, [r3, #5]
    a4de:	799b      	ldrb	r3, [r3, #6]
    a4e0:	021b      	lsls	r3, r3, #8
    a4e2:	4313      	orrs	r3, r2
    a4e4:	b29a      	uxth	r2, r3
    a4e6:	4b7b      	ldr	r3, [pc, #492]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a4e8:	881b      	ldrh	r3, [r3, #0]
    a4ea:	18d3      	adds	r3, r2, r3
    a4ec:	b29a      	uxth	r2, r3
    a4ee:	487c      	ldr	r0, [pc, #496]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a4f0:	23ba      	movs	r3, #186	; 0xba
    a4f2:	00db      	lsls	r3, r3, #3
    a4f4:	4c7b      	ldr	r4, [pc, #492]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a4f6:	4361      	muls	r1, r4
    a4f8:	1841      	adds	r1, r0, r1
    a4fa:	18cb      	adds	r3, r1, r3
    a4fc:	3305      	adds	r3, #5
    a4fe:	21ff      	movs	r1, #255	; 0xff
    a500:	4011      	ands	r1, r2
    a502:	000c      	movs	r4, r1
    a504:	7819      	ldrb	r1, [r3, #0]
    a506:	2000      	movs	r0, #0
    a508:	4001      	ands	r1, r0
    a50a:	1c08      	adds	r0, r1, #0
    a50c:	1c21      	adds	r1, r4, #0
    a50e:	4301      	orrs	r1, r0
    a510:	7019      	strb	r1, [r3, #0]
    a512:	0a12      	lsrs	r2, r2, #8
    a514:	b290      	uxth	r0, r2
    a516:	785a      	ldrb	r2, [r3, #1]
    a518:	2100      	movs	r1, #0
    a51a:	400a      	ands	r2, r1
    a51c:	1c11      	adds	r1, r2, #0
    a51e:	1c02      	adds	r2, r0, #0
    a520:	430a      	orrs	r2, r1
    a522:	705a      	strb	r2, [r3, #1]
			cmd=WRITE_DATA;
    a524:	4b6c      	ldr	r3, [pc, #432]	; (a6d8 <w5500_write_socket_tcp+0x3a8>)
    a526:	2202      	movs	r2, #2
    a528:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a52a:	4b64      	ldr	r3, [pc, #400]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	3301      	adds	r3, #1
    a530:	b2da      	uxtb	r2, r3
    a532:	4b62      	ldr	r3, [pc, #392]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a534:	701a      	strb	r2, [r3, #0]
		break;
    a536:	e138      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
		case TCP_PTR_WR:																	//write ptr
			wbuf_w55[cnt]=(eth_sock[sock_numb].ptr_tx_buf>>8);		cnt++;
    a538:	230e      	movs	r3, #14
    a53a:	18fb      	adds	r3, r7, r3
    a53c:	881a      	ldrh	r2, [r3, #0]
    a53e:	1dfb      	adds	r3, r7, #7
    a540:	7819      	ldrb	r1, [r3, #0]
    a542:	4867      	ldr	r0, [pc, #412]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a544:	23ba      	movs	r3, #186	; 0xba
    a546:	00db      	lsls	r3, r3, #3
    a548:	4c66      	ldr	r4, [pc, #408]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a54a:	4361      	muls	r1, r4
    a54c:	1841      	adds	r1, r0, r1
    a54e:	18cb      	adds	r3, r1, r3
    a550:	7959      	ldrb	r1, [r3, #5]
    a552:	799b      	ldrb	r3, [r3, #6]
    a554:	021b      	lsls	r3, r3, #8
    a556:	430b      	orrs	r3, r1
    a558:	b29b      	uxth	r3, r3
    a55a:	0a1b      	lsrs	r3, r3, #8
    a55c:	b29b      	uxth	r3, r3
    a55e:	b2d9      	uxtb	r1, r3
    a560:	4b61      	ldr	r3, [pc, #388]	; (a6e8 <w5500_write_socket_tcp+0x3b8>)
    a562:	5499      	strb	r1, [r3, r2]
    a564:	230e      	movs	r3, #14
    a566:	18fb      	adds	r3, r7, r3
    a568:	881a      	ldrh	r2, [r3, #0]
    a56a:	230e      	movs	r3, #14
    a56c:	18fb      	adds	r3, r7, r3
    a56e:	3201      	adds	r2, #1
    a570:	801a      	strh	r2, [r3, #0]
			wbuf_w55[cnt]=(BYTE)eth_sock[sock_numb].ptr_tx_buf;		cnt++;
    a572:	230e      	movs	r3, #14
    a574:	18fb      	adds	r3, r7, r3
    a576:	881a      	ldrh	r2, [r3, #0]
    a578:	1dfb      	adds	r3, r7, #7
    a57a:	7819      	ldrb	r1, [r3, #0]
    a57c:	4858      	ldr	r0, [pc, #352]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a57e:	23ba      	movs	r3, #186	; 0xba
    a580:	00db      	lsls	r3, r3, #3
    a582:	4c58      	ldr	r4, [pc, #352]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a584:	4361      	muls	r1, r4
    a586:	1841      	adds	r1, r0, r1
    a588:	18cb      	adds	r3, r1, r3
    a58a:	7959      	ldrb	r1, [r3, #5]
    a58c:	799b      	ldrb	r3, [r3, #6]
    a58e:	021b      	lsls	r3, r3, #8
    a590:	430b      	orrs	r3, r1
    a592:	b29b      	uxth	r3, r3
    a594:	b2d9      	uxtb	r1, r3
    a596:	4b54      	ldr	r3, [pc, #336]	; (a6e8 <w5500_write_socket_tcp+0x3b8>)
    a598:	5499      	strb	r1, [r3, r2]
    a59a:	230e      	movs	r3, #14
    a59c:	18fb      	adds	r3, r7, r3
    a59e:	881a      	ldrh	r2, [r3, #0]
    a5a0:	230e      	movs	r3, #14
    a5a2:	18fb      	adds	r3, r7, r3
    a5a4:	3201      	adds	r2, #1
    a5a6:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_TX_WRITE_PTR_0;
    a5a8:	4b46      	ldr	r3, [pc, #280]	; (a6c4 <w5500_write_socket_tcp+0x394>)
    a5aa:	2224      	movs	r2, #36	; 0x24
    a5ac:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a5ae:	1dfb      	adds	r3, r7, #7
    a5b0:	781b      	ldrb	r3, [r3, #0]
    a5b2:	015b      	lsls	r3, r3, #5
    a5b4:	b21b      	sxth	r3, r3
    a5b6:	2208      	movs	r2, #8
    a5b8:	4313      	orrs	r3, r2
    a5ba:	b21b      	sxth	r3, r3
    a5bc:	b29a      	uxth	r2, r3
    a5be:	4b42      	ldr	r3, [pc, #264]	; (a6c8 <w5500_write_socket_tcp+0x398>)
    a5c0:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a5c2:	4b43      	ldr	r3, [pc, #268]	; (a6d0 <w5500_write_socket_tcp+0x3a0>)
    a5c4:	4a48      	ldr	r2, [pc, #288]	; (a6e8 <w5500_write_socket_tcp+0x3b8>)
    a5c6:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a5c8:	4b42      	ldr	r3, [pc, #264]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a5ca:	220e      	movs	r2, #14
    a5cc:	18ba      	adds	r2, r7, r2
    a5ce:	8812      	ldrh	r2, [r2, #0]
    a5d0:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a5d2:	4b41      	ldr	r3, [pc, #260]	; (a6d8 <w5500_write_socket_tcp+0x3a8>)
    a5d4:	2202      	movs	r2, #2
    a5d6:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a5d8:	4b38      	ldr	r3, [pc, #224]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	3301      	adds	r3, #1
    a5de:	b2da      	uxtb	r2, r3
    a5e0:	4b36      	ldr	r3, [pc, #216]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a5e2:	701a      	strb	r2, [r3, #0]
		break;
    a5e4:	e0e1      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
		case TCP_SEND_CMD:																	//write cmd SEND
			wbuf_w55[cnt]=CMD_SEND;				cnt++;
    a5e6:	230e      	movs	r3, #14
    a5e8:	18fb      	adds	r3, r7, r3
    a5ea:	881b      	ldrh	r3, [r3, #0]
    a5ec:	4a3e      	ldr	r2, [pc, #248]	; (a6e8 <w5500_write_socket_tcp+0x3b8>)
    a5ee:	2120      	movs	r1, #32
    a5f0:	54d1      	strb	r1, [r2, r3]
    a5f2:	230e      	movs	r3, #14
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	881a      	ldrh	r2, [r3, #0]
    a5f8:	230e      	movs	r3, #14
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	3201      	adds	r2, #1
    a5fe:	801a      	strh	r2, [r3, #0]
			addr_w5500=ADDR_SOC_COMMAND;
    a600:	4b30      	ldr	r3, [pc, #192]	; (a6c4 <w5500_write_socket_tcp+0x394>)
    a602:	2201      	movs	r2, #1
    a604:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a606:	1dfb      	adds	r3, r7, #7
    a608:	781b      	ldrb	r3, [r3, #0]
    a60a:	015b      	lsls	r3, r3, #5
    a60c:	b21b      	sxth	r3, r3
    a60e:	2208      	movs	r2, #8
    a610:	4313      	orrs	r3, r2
    a612:	b21b      	sxth	r3, r3
    a614:	b29a      	uxth	r2, r3
    a616:	4b2c      	ldr	r3, [pc, #176]	; (a6c8 <w5500_write_socket_tcp+0x398>)
    a618:	801a      	strh	r2, [r3, #0]
			ptr_buf=wbuf_w55;
    a61a:	4b2d      	ldr	r3, [pc, #180]	; (a6d0 <w5500_write_socket_tcp+0x3a0>)
    a61c:	4a32      	ldr	r2, [pc, #200]	; (a6e8 <w5500_write_socket_tcp+0x3b8>)
    a61e:	601a      	str	r2, [r3, #0]
			len_buf=cnt;
    a620:	4b2c      	ldr	r3, [pc, #176]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a622:	220e      	movs	r2, #14
    a624:	18ba      	adds	r2, r7, r2
    a626:	8812      	ldrh	r2, [r2, #0]
    a628:	801a      	strh	r2, [r3, #0]
			cmd=WRITE_DATA;
    a62a:	4b2b      	ldr	r3, [pc, #172]	; (a6d8 <w5500_write_socket_tcp+0x3a8>)
    a62c:	2202      	movs	r2, #2
    a62e:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a630:	4b22      	ldr	r3, [pc, #136]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	3301      	adds	r3, #1
    a636:	b2da      	uxtb	r2, r3
    a638:	4b20      	ldr	r3, [pc, #128]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a63a:	701a      	strb	r2, [r3, #0]
			eth_sock[sock_numb].time_wait_SEND_OK=time_10ms;
    a63c:	1dfb      	adds	r3, r7, #7
    a63e:	781a      	ldrb	r2, [r3, #0]
    a640:	4927      	ldr	r1, [pc, #156]	; (a6e0 <w5500_write_socket_tcp+0x3b0>)
    a642:	23bc      	movs	r3, #188	; 0xbc
    a644:	00db      	lsls	r3, r3, #3
    a646:	4827      	ldr	r0, [pc, #156]	; (a6e4 <w5500_write_socket_tcp+0x3b4>)
    a648:	4342      	muls	r2, r0
    a64a:	188a      	adds	r2, r1, r2
    a64c:	18d3      	adds	r3, r2, r3
    a64e:	3303      	adds	r3, #3
    a650:	781a      	ldrb	r2, [r3, #0]
    a652:	2100      	movs	r1, #0
    a654:	400a      	ands	r2, r1
    a656:	1c11      	adds	r1, r2, #0
    a658:	2278      	movs	r2, #120	; 0x78
    a65a:	4252      	negs	r2, r2
    a65c:	430a      	orrs	r2, r1
    a65e:	701a      	strb	r2, [r3, #0]
    a660:	785a      	ldrb	r2, [r3, #1]
    a662:	2100      	movs	r1, #0
    a664:	400a      	ands	r2, r1
    a666:	1c11      	adds	r1, r2, #0
    a668:	2213      	movs	r2, #19
    a66a:	430a      	orrs	r2, r1
    a66c:	705a      	strb	r2, [r3, #1]
		break;
    a66e:	e09c      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
		case TCP_STAT_RD:																//read status_SEND_OK
			addr_w5500=ADDR_SOC_INT;
    a670:	4b14      	ldr	r3, [pc, #80]	; (a6c4 <w5500_write_socket_tcp+0x394>)
    a672:	2202      	movs	r2, #2
    a674:	801a      	strh	r2, [r3, #0]
			cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a676:	1dfb      	adds	r3, r7, #7
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	015b      	lsls	r3, r3, #5
    a67c:	b21b      	sxth	r3, r3
    a67e:	2208      	movs	r2, #8
    a680:	4313      	orrs	r3, r2
    a682:	b21b      	sxth	r3, r3
    a684:	b29a      	uxth	r2, r3
    a686:	4b10      	ldr	r3, [pc, #64]	; (a6c8 <w5500_write_socket_tcp+0x398>)
    a688:	801a      	strh	r2, [r3, #0]
			ptr_buf=(BYTE*)&chip.sockReg[sock_numb].R03_Sn_IR_02;
    a68a:	1dfb      	adds	r3, r7, #7
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	015b      	lsls	r3, r3, #5
    a690:	3310      	adds	r3, #16
    a692:	001a      	movs	r2, r3
    a694:	4b0d      	ldr	r3, [pc, #52]	; (a6cc <w5500_write_socket_tcp+0x39c>)
    a696:	18d3      	adds	r3, r2, r3
    a698:	1d5a      	adds	r2, r3, #5
    a69a:	4b0d      	ldr	r3, [pc, #52]	; (a6d0 <w5500_write_socket_tcp+0x3a0>)
    a69c:	601a      	str	r2, [r3, #0]
			len_buf=1;
    a69e:	4b0d      	ldr	r3, [pc, #52]	; (a6d4 <w5500_write_socket_tcp+0x3a4>)
    a6a0:	2201      	movs	r2, #1
    a6a2:	801a      	strh	r2, [r3, #0]
			cmd=READ_DATA;
    a6a4:	4b0c      	ldr	r3, [pc, #48]	; (a6d8 <w5500_write_socket_tcp+0x3a8>)
    a6a6:	2201      	movs	r2, #1
    a6a8:	701a      	strb	r2, [r3, #0]
			st_wr_w5500++;
    a6aa:	4b04      	ldr	r3, [pc, #16]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a6ac:	781b      	ldrb	r3, [r3, #0]
    a6ae:	3301      	adds	r3, #1
    a6b0:	b2da      	uxtb	r2, r3
    a6b2:	4b02      	ldr	r3, [pc, #8]	; (a6bc <w5500_write_socket_tcp+0x38c>)
    a6b4:	701a      	strb	r2, [r3, #0]
		break;
    a6b6:	e078      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
    a6b8:	20000499 	.word	0x20000499
    a6bc:	2000049a 	.word	0x2000049a
    a6c0:	0000c894 	.word	0x0000c894
    a6c4:	20000480 	.word	0x20000480
    a6c8:	20000482 	.word	0x20000482
    a6cc:	20003b00 	.word	0x20003b00
    a6d0:	20003af8 	.word	0x20003af8
    a6d4:	20000484 	.word	0x20000484
    a6d8:	20003bb3 	.word	0x20003bb3
    a6dc:	20000486 	.word	0x20000486
    a6e0:	200005cc 	.word	0x200005cc
    a6e4:	000005e5 	.word	0x000005e5
    a6e8:	20003bb4 	.word	0x20003bb4
		case TCP_STATUS_CLR:																//clear status SEND_OK
			if(chip.sockReg[sock_numb].R03_Sn_IR_02.SEND_OK==1)
    a6ec:	1dfb      	adds	r3, r7, #7
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	4a30      	ldr	r2, [pc, #192]	; (a7b4 <w5500_write_socket_tcp+0x484>)
    a6f2:	2110      	movs	r1, #16
    a6f4:	015b      	lsls	r3, r3, #5
    a6f6:	18d3      	adds	r3, r2, r3
    a6f8:	185b      	adds	r3, r3, r1
    a6fa:	795b      	ldrb	r3, [r3, #5]
    a6fc:	06db      	lsls	r3, r3, #27
    a6fe:	0fdb      	lsrs	r3, r3, #31
    a700:	b2db      	uxtb	r3, r3
    a702:	2b01      	cmp	r3, #1
    a704:	d12b      	bne.n	a75e <w5500_write_socket_tcp+0x42e>
			{
				wbuf_w55[cnt]=SR_2C_SEND_OK;			cnt++;
    a706:	230e      	movs	r3, #14
    a708:	18fb      	adds	r3, r7, r3
    a70a:	881b      	ldrh	r3, [r3, #0]
    a70c:	4a2a      	ldr	r2, [pc, #168]	; (a7b8 <w5500_write_socket_tcp+0x488>)
    a70e:	2110      	movs	r1, #16
    a710:	54d1      	strb	r1, [r2, r3]
    a712:	230e      	movs	r3, #14
    a714:	18fb      	adds	r3, r7, r3
    a716:	881a      	ldrh	r2, [r3, #0]
    a718:	230e      	movs	r3, #14
    a71a:	18fb      	adds	r3, r7, r3
    a71c:	3201      	adds	r2, #1
    a71e:	801a      	strh	r2, [r3, #0]
				addr_w5500=ADDR_SOC_INT;
    a720:	4b26      	ldr	r3, [pc, #152]	; (a7bc <w5500_write_socket_tcp+0x48c>)
    a722:	2202      	movs	r2, #2
    a724:	801a      	strh	r2, [r3, #0]
				cb_w5500=SOCKET_REGISTER | SOCKET(sock_numb);
    a726:	1dfb      	adds	r3, r7, #7
    a728:	781b      	ldrb	r3, [r3, #0]
    a72a:	015b      	lsls	r3, r3, #5
    a72c:	b21b      	sxth	r3, r3
    a72e:	2208      	movs	r2, #8
    a730:	4313      	orrs	r3, r2
    a732:	b21b      	sxth	r3, r3
    a734:	b29a      	uxth	r2, r3
    a736:	4b22      	ldr	r3, [pc, #136]	; (a7c0 <w5500_write_socket_tcp+0x490>)
    a738:	801a      	strh	r2, [r3, #0]
				ptr_buf=wbuf_w55;
    a73a:	4b22      	ldr	r3, [pc, #136]	; (a7c4 <w5500_write_socket_tcp+0x494>)
    a73c:	4a1e      	ldr	r2, [pc, #120]	; (a7b8 <w5500_write_socket_tcp+0x488>)
    a73e:	601a      	str	r2, [r3, #0]
				len_buf=cnt;
    a740:	4b21      	ldr	r3, [pc, #132]	; (a7c8 <w5500_write_socket_tcp+0x498>)
    a742:	220e      	movs	r2, #14
    a744:	18ba      	adds	r2, r7, r2
    a746:	8812      	ldrh	r2, [r2, #0]
    a748:	801a      	strh	r2, [r3, #0]
				cmd=WRITE_DATA;
    a74a:	4b20      	ldr	r3, [pc, #128]	; (a7cc <w5500_write_socket_tcp+0x49c>)
    a74c:	2202      	movs	r2, #2
    a74e:	701a      	strb	r2, [r3, #0]
				st_wr_w5500++;
    a750:	4b1f      	ldr	r3, [pc, #124]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a752:	781b      	ldrb	r3, [r3, #0]
    a754:	3301      	adds	r3, #1
    a756:	b2da      	uxtb	r2, r3
    a758:	4b1d      	ldr	r3, [pc, #116]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a75a:	701a      	strb	r2, [r3, #0]
				break;
    a75c:	e025      	b.n	a7aa <w5500_write_socket_tcp+0x47a>
			}
			st_wr_w5500--;
    a75e:	4b1c      	ldr	r3, [pc, #112]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	3b01      	subs	r3, #1
    a764:	b2da      	uxtb	r2, r3
    a766:	4b1a      	ldr	r3, [pc, #104]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a768:	701a      	strb	r2, [r3, #0]
			if(!eth_sock[sock_numb].time_wait_SEND_OK)
    a76a:	1dfb      	adds	r3, r7, #7
    a76c:	781a      	ldrb	r2, [r3, #0]
    a76e:	4919      	ldr	r1, [pc, #100]	; (a7d4 <w5500_write_socket_tcp+0x4a4>)
    a770:	23bc      	movs	r3, #188	; 0xbc
    a772:	00db      	lsls	r3, r3, #3
    a774:	4818      	ldr	r0, [pc, #96]	; (a7d8 <w5500_write_socket_tcp+0x4a8>)
    a776:	4342      	muls	r2, r0
    a778:	188a      	adds	r2, r1, r2
    a77a:	18d3      	adds	r3, r2, r3
    a77c:	78da      	ldrb	r2, [r3, #3]
    a77e:	791b      	ldrb	r3, [r3, #4]
    a780:	021b      	lsls	r3, r3, #8
    a782:	4313      	orrs	r3, r2
    a784:	b29b      	uxth	r3, r3
    a786:	2b00      	cmp	r3, #0
    a788:	d10e      	bne.n	a7a8 <w5500_write_socket_tcp+0x478>
			{
				st_wr_w5500=TCP_RD_FSR; 
    a78a:	4b11      	ldr	r3, [pc, #68]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a78c:	2200      	movs	r2, #0
    a78e:	701a      	strb	r2, [r3, #0]
				return PROC_ER;
    a790:	2302      	movs	r3, #2
    a792:	e00b      	b.n	a7ac <w5500_write_socket_tcp+0x47c>
			}
		break;
		case TCP_BK_TO_START:
			st_wr_w5500=TCP_RD_FSR;
    a794:	4b0e      	ldr	r3, [pc, #56]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a796:	2200      	movs	r2, #0
    a798:	701a      	strb	r2, [r3, #0]
			return PROC_OK;
    a79a:	2301      	movs	r3, #1
    a79c:	e006      	b.n	a7ac <w5500_write_socket_tcp+0x47c>
		break;
		default:
			st_wr_w5500=TCP_RD_FSR; return PROC_ER;
    a79e:	4b0c      	ldr	r3, [pc, #48]	; (a7d0 <w5500_write_socket_tcp+0x4a0>)
    a7a0:	2200      	movs	r2, #0
    a7a2:	701a      	strb	r2, [r3, #0]
    a7a4:	2302      	movs	r3, #2
    a7a6:	e001      	b.n	a7ac <w5500_write_socket_tcp+0x47c>
		break;
    a7a8:	46c0      	nop			; (mov r8, r8)
		break;
	}
	return PROC_WAIT;
    a7aa:	2300      	movs	r3, #0
}
    a7ac:	0018      	movs	r0, r3
    a7ae:	46bd      	mov	sp, r7
    a7b0:	b005      	add	sp, #20
    a7b2:	bd90      	pop	{r4, r7, pc}
    a7b4:	20003b00 	.word	0x20003b00
    a7b8:	20003bb4 	.word	0x20003bb4
    a7bc:	20000480 	.word	0x20000480
    a7c0:	20000482 	.word	0x20000482
    a7c4:	20003af8 	.word	0x20003af8
    a7c8:	20000484 	.word	0x20000484
    a7cc:	20003bb3 	.word	0x20003bb3
    a7d0:	2000049a 	.word	0x2000049a
    a7d4:	200005cc 	.word	0x200005cc
    a7d8:	000005e5 	.word	0x000005e5

0000a7dc <cfg_init>:

BYTE cfg_2_err = 1;

void cfg_init(void)
//--------------------------------------------------------------------------
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	af00      	add	r7, sp, #0
	memset(&cfg_1    ,0x00,sizeof(CFG_1));
    a7e0:	2380      	movs	r3, #128	; 0x80
    a7e2:	005a      	lsls	r2, r3, #1
    a7e4:	4b07      	ldr	r3, [pc, #28]	; (a804 <cfg_init+0x28>)
    a7e6:	2100      	movs	r1, #0
    a7e8:	0018      	movs	r0, r3
    a7ea:	4b07      	ldr	r3, [pc, #28]	; (a808 <cfg_init+0x2c>)
    a7ec:	4798      	blx	r3
	memset(&cfg_1_tmp,0x00,sizeof(CFG_1));
    a7ee:	2380      	movs	r3, #128	; 0x80
    a7f0:	005a      	lsls	r2, r3, #1
    a7f2:	4b06      	ldr	r3, [pc, #24]	; (a80c <cfg_init+0x30>)
    a7f4:	2100      	movs	r1, #0
    a7f6:	0018      	movs	r0, r3
    a7f8:	4b03      	ldr	r3, [pc, #12]	; (a808 <cfg_init+0x2c>)
    a7fa:	4798      	blx	r3
}
    a7fc:	46c0      	nop			; (mov r8, r8)
    a7fe:	46bd      	mov	sp, r7
    a800:	bd80      	pop	{r7, pc}
    a802:	46c0      	nop			; (mov r8, r8)
    a804:	20003dc0 	.word	0x20003dc0
    a808:	0000c569 	.word	0x0000c569
    a80c:	20003cc0 	.word	0x20003cc0

0000a810 <cfg_read>:

WORD cfg_read(void)
//--------------------------------------------------------------------------
{
    a810:	b590      	push	{r4, r7, lr}
    a812:	b083      	sub	sp, #12
    a814:	af00      	add	r7, sp, #0
	WORD size = 0;
    a816:	1dbb      	adds	r3, r7, #6
    a818:	2200      	movs	r2, #0
    a81a:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_1_ADDR,&cfg_1,sizeof(CFG_1));
    a81c:	1dbc      	adds	r4, r7, #6
    a81e:	2380      	movs	r3, #128	; 0x80
    a820:	005a      	lsls	r2, r3, #1
    a822:	4910      	ldr	r1, [pc, #64]	; (a864 <cfg_read+0x54>)
    a824:	23fc      	movs	r3, #252	; 0xfc
    a826:	029b      	lsls	r3, r3, #10
    a828:	0018      	movs	r0, r3
    a82a:	4b0f      	ldr	r3, [pc, #60]	; (a868 <cfg_read+0x58>)
    a82c:	4798      	blx	r3
    a82e:	0003      	movs	r3, r0
    a830:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_1)) {return(CFG_ERR);}
    a832:	1dbb      	adds	r3, r7, #6
    a834:	881a      	ldrh	r2, [r3, #0]
    a836:	2380      	movs	r3, #128	; 0x80
    a838:	005b      	lsls	r3, r3, #1
    a83a:	429a      	cmp	r2, r3
    a83c:	d001      	beq.n	a842 <cfg_read+0x32>
    a83e:	2300      	movs	r3, #0
    a840:	e00b      	b.n	a85a <cfg_read+0x4a>

	if(crc16_ccit((BYTE*)&cfg_1,sizeof(CFG_1))!=0){return(CFG_ERR);}
    a842:	2380      	movs	r3, #128	; 0x80
    a844:	005a      	lsls	r2, r3, #1
    a846:	4b07      	ldr	r3, [pc, #28]	; (a864 <cfg_read+0x54>)
    a848:	0011      	movs	r1, r2
    a84a:	0018      	movs	r0, r3
    a84c:	4b07      	ldr	r3, [pc, #28]	; (a86c <cfg_read+0x5c>)
    a84e:	4798      	blx	r3
    a850:	1e03      	subs	r3, r0, #0
    a852:	d001      	beq.n	a858 <cfg_read+0x48>
    a854:	2300      	movs	r3, #0
    a856:	e000      	b.n	a85a <cfg_read+0x4a>

	return(CFG_OK);
    a858:	2301      	movs	r3, #1
}
    a85a:	0018      	movs	r0, r3
    a85c:	46bd      	mov	sp, r7
    a85e:	b003      	add	sp, #12
    a860:	bd90      	pop	{r4, r7, pc}
    a862:	46c0      	nop			; (mov r8, r8)
    a864:	20003dc0 	.word	0x20003dc0
    a868:	000066d5 	.word	0x000066d5
    a86c:	00005bfd 	.word	0x00005bfd

0000a870 <cfg_2_read>:

WORD cfg_2_read(void)
//--------------------------------------------------------------------------
{
    a870:	b590      	push	{r4, r7, lr}
    a872:	b083      	sub	sp, #12
    a874:	af00      	add	r7, sp, #0
	WORD size = 0;
    a876:	1dbb      	adds	r3, r7, #6
    a878:	2200      	movs	r2, #0
    a87a:	801a      	strh	r2, [r3, #0]

	size = flash_read(CFG_2_ADDR,&cfg_2,sizeof(CFG_2));
    a87c:	1dbc      	adds	r4, r7, #6
    a87e:	2380      	movs	r3, #128	; 0x80
    a880:	005a      	lsls	r2, r3, #1
    a882:	4b0f      	ldr	r3, [pc, #60]	; (a8c0 <cfg_2_read+0x50>)
    a884:	480f      	ldr	r0, [pc, #60]	; (a8c4 <cfg_2_read+0x54>)
    a886:	0019      	movs	r1, r3
    a888:	4b0f      	ldr	r3, [pc, #60]	; (a8c8 <cfg_2_read+0x58>)
    a88a:	4798      	blx	r3
    a88c:	0003      	movs	r3, r0
    a88e:	8023      	strh	r3, [r4, #0]

	if(size != sizeof(CFG_2)) {return(CFG_ERR);}
    a890:	1dbb      	adds	r3, r7, #6
    a892:	881a      	ldrh	r2, [r3, #0]
    a894:	2380      	movs	r3, #128	; 0x80
    a896:	005b      	lsls	r3, r3, #1
    a898:	429a      	cmp	r2, r3
    a89a:	d001      	beq.n	a8a0 <cfg_2_read+0x30>
    a89c:	2300      	movs	r3, #0
    a89e:	e00b      	b.n	a8b8 <cfg_2_read+0x48>

	if(crc16_ccit((BYTE*)&cfg_2,sizeof(CFG_2))!=0){return(CFG_ERR);}
    a8a0:	2380      	movs	r3, #128	; 0x80
    a8a2:	005a      	lsls	r2, r3, #1
    a8a4:	4b06      	ldr	r3, [pc, #24]	; (a8c0 <cfg_2_read+0x50>)
    a8a6:	0011      	movs	r1, r2
    a8a8:	0018      	movs	r0, r3
    a8aa:	4b08      	ldr	r3, [pc, #32]	; (a8cc <cfg_2_read+0x5c>)
    a8ac:	4798      	blx	r3
    a8ae:	1e03      	subs	r3, r0, #0
    a8b0:	d001      	beq.n	a8b6 <cfg_2_read+0x46>
    a8b2:	2300      	movs	r3, #0
    a8b4:	e000      	b.n	a8b8 <cfg_2_read+0x48>

	return(CFG_OK);
    a8b6:	2301      	movs	r3, #1
}
    a8b8:	0018      	movs	r0, r3
    a8ba:	46bd      	mov	sp, r7
    a8bc:	b003      	add	sp, #12
    a8be:	bd90      	pop	{r4, r7, pc}
    a8c0:	20003bc0 	.word	0x20003bc0
    a8c4:	0003f100 	.word	0x0003f100
    a8c8:	000066d5 	.word	0x000066d5
    a8cc:	00005bfd 	.word	0x00005bfd

0000a8d0 <cfg_default>:

void cfg_default(void)
//--------------------------------------------------------------------------
{
    a8d0:	b5b0      	push	{r4, r5, r7, lr}
    a8d2:	b082      	sub	sp, #8
    a8d4:	af00      	add	r7, sp, #0
	WORD  i=0;
    a8d6:	1dbb      	adds	r3, r7, #6
    a8d8:	2200      	movs	r2, #0
    a8da:	801a      	strh	r2, [r3, #0]

	cfg_1.guid = 0xFAC6097A;
    a8dc:	4bb9      	ldr	r3, [pc, #740]	; (abc4 <cfg_default+0x2f4>)
    a8de:	781a      	ldrb	r2, [r3, #0]
    a8e0:	2100      	movs	r1, #0
    a8e2:	400a      	ands	r2, r1
    a8e4:	1c11      	adds	r1, r2, #0
    a8e6:	227a      	movs	r2, #122	; 0x7a
    a8e8:	430a      	orrs	r2, r1
    a8ea:	701a      	strb	r2, [r3, #0]
    a8ec:	785a      	ldrb	r2, [r3, #1]
    a8ee:	2100      	movs	r1, #0
    a8f0:	400a      	ands	r2, r1
    a8f2:	1c11      	adds	r1, r2, #0
    a8f4:	2209      	movs	r2, #9
    a8f6:	430a      	orrs	r2, r1
    a8f8:	705a      	strb	r2, [r3, #1]
    a8fa:	789a      	ldrb	r2, [r3, #2]
    a8fc:	2100      	movs	r1, #0
    a8fe:	400a      	ands	r2, r1
    a900:	1c11      	adds	r1, r2, #0
    a902:	223a      	movs	r2, #58	; 0x3a
    a904:	4252      	negs	r2, r2
    a906:	430a      	orrs	r2, r1
    a908:	709a      	strb	r2, [r3, #2]
    a90a:	78da      	ldrb	r2, [r3, #3]
    a90c:	2100      	movs	r1, #0
    a90e:	400a      	ands	r2, r1
    a910:	1c11      	adds	r1, r2, #0
    a912:	2206      	movs	r2, #6
    a914:	4252      	negs	r2, r2
    a916:	430a      	orrs	r2, r1
    a918:	70da      	strb	r2, [r3, #3]
	
	cfg_1.in_numb=102;
    a91a:	4baa      	ldr	r3, [pc, #680]	; (abc4 <cfg_default+0x2f4>)
    a91c:	2268      	movs	r2, #104	; 0x68
    a91e:	5c99      	ldrb	r1, [r3, r2]
    a920:	2000      	movs	r0, #0
    a922:	4001      	ands	r1, r0
    a924:	1c08      	adds	r0, r1, #0
    a926:	2166      	movs	r1, #102	; 0x66
    a928:	4301      	orrs	r1, r0
    a92a:	5499      	strb	r1, [r3, r2]
    a92c:	189b      	adds	r3, r3, r2
    a92e:	785a      	ldrb	r2, [r3, #1]
    a930:	2100      	movs	r1, #0
    a932:	400a      	ands	r2, r1
    a934:	705a      	strb	r2, [r3, #1]
	
	//............................................................................

	cfg_1.com_network.src_port    = 4000;
    a936:	4ba3      	ldr	r3, [pc, #652]	; (abc4 <cfg_default+0x2f4>)
    a938:	2226      	movs	r2, #38	; 0x26
    a93a:	5c99      	ldrb	r1, [r3, r2]
    a93c:	2000      	movs	r0, #0
    a93e:	4001      	ands	r1, r0
    a940:	1c08      	adds	r0, r1, #0
    a942:	2160      	movs	r1, #96	; 0x60
    a944:	4249      	negs	r1, r1
    a946:	4301      	orrs	r1, r0
    a948:	5499      	strb	r1, [r3, r2]
    a94a:	2227      	movs	r2, #39	; 0x27
    a94c:	5c99      	ldrb	r1, [r3, r2]
    a94e:	2000      	movs	r0, #0
    a950:	4001      	ands	r1, r0
    a952:	1c08      	adds	r0, r1, #0
    a954:	210f      	movs	r1, #15
    a956:	4301      	orrs	r1, r0
    a958:	5499      	strb	r1, [r3, r2]
	
	//ip 192.168.1.102 /SIPR
	cfg_1.com_network.ip_addr[0]=0xC0;//192
    a95a:	4b9a      	ldr	r3, [pc, #616]	; (abc4 <cfg_default+0x2f4>)
    a95c:	2228      	movs	r2, #40	; 0x28
    a95e:	21c0      	movs	r1, #192	; 0xc0
    a960:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[1]=0xA8;//168
    a962:	4b98      	ldr	r3, [pc, #608]	; (abc4 <cfg_default+0x2f4>)
    a964:	2229      	movs	r2, #41	; 0x29
    a966:	21a8      	movs	r1, #168	; 0xa8
    a968:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[2]=0x01;//1
    a96a:	4b96      	ldr	r3, [pc, #600]	; (abc4 <cfg_default+0x2f4>)
    a96c:	222a      	movs	r2, #42	; 0x2a
    a96e:	2101      	movs	r1, #1
    a970:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_addr[3]=0x65;//101
    a972:	4b94      	ldr	r3, [pc, #592]	; (abc4 <cfg_default+0x2f4>)
    a974:	222b      	movs	r2, #43	; 0x2b
    a976:	2165      	movs	r1, #101	; 0x65
    a978:	5499      	strb	r1, [r3, r2]

	//mask 255.255.255.0 /SUBR
	cfg_1.com_network.ip_mask[0]=0xFF;
    a97a:	4b92      	ldr	r3, [pc, #584]	; (abc4 <cfg_default+0x2f4>)
    a97c:	222c      	movs	r2, #44	; 0x2c
    a97e:	21ff      	movs	r1, #255	; 0xff
    a980:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[1]=0xFF;
    a982:	4b90      	ldr	r3, [pc, #576]	; (abc4 <cfg_default+0x2f4>)
    a984:	222d      	movs	r2, #45	; 0x2d
    a986:	21ff      	movs	r1, #255	; 0xff
    a988:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[2]=0xFF;
    a98a:	4b8e      	ldr	r3, [pc, #568]	; (abc4 <cfg_default+0x2f4>)
    a98c:	222e      	movs	r2, #46	; 0x2e
    a98e:	21ff      	movs	r1, #255	; 0xff
    a990:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_mask[3]=0x00;
    a992:	4b8c      	ldr	r3, [pc, #560]	; (abc4 <cfg_default+0x2f4>)
    a994:	222f      	movs	r2, #47	; 0x2f
    a996:	2100      	movs	r1, #0
    a998:	5499      	strb	r1, [r3, r2]
	
	//gateway 192.168.1.1 /GAR
	cfg_1.com_network.ip_gate[0]=0xC0;
    a99a:	4b8a      	ldr	r3, [pc, #552]	; (abc4 <cfg_default+0x2f4>)
    a99c:	2230      	movs	r2, #48	; 0x30
    a99e:	21c0      	movs	r1, #192	; 0xc0
    a9a0:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[1]=0xA8;
    a9a2:	4b88      	ldr	r3, [pc, #544]	; (abc4 <cfg_default+0x2f4>)
    a9a4:	2231      	movs	r2, #49	; 0x31
    a9a6:	21a8      	movs	r1, #168	; 0xa8
    a9a8:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[2]=0x01;
    a9aa:	4b86      	ldr	r3, [pc, #536]	; (abc4 <cfg_default+0x2f4>)
    a9ac:	2232      	movs	r2, #50	; 0x32
    a9ae:	2101      	movs	r1, #1
    a9b0:	5499      	strb	r1, [r3, r2]
	cfg_1.com_network.ip_gate[3]=0x01;
    a9b2:	4b84      	ldr	r3, [pc, #528]	; (abc4 <cfg_default+0x2f4>)
    a9b4:	2233      	movs	r2, #51	; 0x33
    a9b6:	2101      	movs	r1, #1
    a9b8:	5499      	strb	r1, [r3, r2]
	
	memcpy(cfg_1.name, NAME, sizeof(NAME));
    a9ba:	4983      	ldr	r1, [pc, #524]	; (abc8 <cfg_default+0x2f8>)
    a9bc:	4b83      	ldr	r3, [pc, #524]	; (abcc <cfg_default+0x2fc>)
    a9be:	220c      	movs	r2, #12
    a9c0:	0018      	movs	r0, r3
    a9c2:	4b83      	ldr	r3, [pc, #524]	; (abd0 <cfg_default+0x300>)
    a9c4:	4798      	blx	r3
	cfg_1.name[sizeof(NAME) + 1] = 0x00;
    a9c6:	4b7f      	ldr	r3, [pc, #508]	; (abc4 <cfg_default+0x2f4>)
    a9c8:	2200      	movs	r2, #0
    a9ca:	745a      	strb	r2, [r3, #17]
	
	//...........................................................................
	for(i=0;i<4;++i)
    a9cc:	1dbb      	adds	r3, r7, #6
    a9ce:	2200      	movs	r2, #0
    a9d0:	801a      	strh	r2, [r3, #0]
    a9d2:	e0d0      	b.n	ab76 <cfg_default+0x2a6>
	{
		cfg_1.sock_rs485[i].mode		= UDP;
    a9d4:	1dbb      	adds	r3, r7, #6
    a9d6:	881a      	ldrh	r2, [r3, #0]
    a9d8:	497a      	ldr	r1, [pc, #488]	; (abc4 <cfg_default+0x2f4>)
    a9da:	2035      	movs	r0, #53	; 0x35
    a9dc:	0013      	movs	r3, r2
    a9de:	005b      	lsls	r3, r3, #1
    a9e0:	189b      	adds	r3, r3, r2
    a9e2:	009b      	lsls	r3, r3, #2
    a9e4:	189b      	adds	r3, r3, r2
    a9e6:	18cb      	adds	r3, r1, r3
    a9e8:	181b      	adds	r3, r3, r0
    a9ea:	2201      	movs	r2, #1
    a9ec:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].pl			= GATE;
    a9ee:	1dbb      	adds	r3, r7, #6
    a9f0:	881a      	ldrh	r2, [r3, #0]
    a9f2:	4974      	ldr	r1, [pc, #464]	; (abc4 <cfg_default+0x2f4>)
    a9f4:	2036      	movs	r0, #54	; 0x36
    a9f6:	0013      	movs	r3, r2
    a9f8:	005b      	lsls	r3, r3, #1
    a9fa:	189b      	adds	r3, r3, r2
    a9fc:	009b      	lsls	r3, r3, #2
    a9fe:	189b      	adds	r3, r3, r2
    aa00:	18cb      	adds	r3, r1, r3
    aa02:	181b      	adds	r3, r3, r0
    aa04:	2201      	movs	r2, #1
    aa06:	701a      	strb	r2, [r3, #0]
		cfg_1.sock_rs485[i].en			= FALSE;
    aa08:	1dbb      	adds	r3, r7, #6
    aa0a:	881a      	ldrh	r2, [r3, #0]
    aa0c:	496d      	ldr	r1, [pc, #436]	; (abc4 <cfg_default+0x2f4>)
    aa0e:	2034      	movs	r0, #52	; 0x34
    aa10:	0013      	movs	r3, r2
    aa12:	005b      	lsls	r3, r3, #1
    aa14:	189b      	adds	r3, r3, r2
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	189b      	adds	r3, r3, r2
    aa1a:	18cb      	adds	r3, r1, r3
    aa1c:	181b      	adds	r3, r3, r0
    aa1e:	2200      	movs	r2, #0
    aa20:	701a      	strb	r2, [r3, #0]
		
		cfg_1.sock_rs485[i].src_port	=4001+i;
    aa22:	1dbb      	adds	r3, r7, #6
    aa24:	881a      	ldrh	r2, [r3, #0]
    aa26:	1dbb      	adds	r3, r7, #6
    aa28:	881b      	ldrh	r3, [r3, #0]
    aa2a:	496a      	ldr	r1, [pc, #424]	; (abd4 <cfg_default+0x304>)
    aa2c:	468c      	mov	ip, r1
    aa2e:	4463      	add	r3, ip
    aa30:	b299      	uxth	r1, r3
    aa32:	4864      	ldr	r0, [pc, #400]	; (abc4 <cfg_default+0x2f4>)
    aa34:	0013      	movs	r3, r2
    aa36:	005b      	lsls	r3, r3, #1
    aa38:	189b      	adds	r3, r3, r2
    aa3a:	009b      	lsls	r3, r3, #2
    aa3c:	189b      	adds	r3, r3, r2
    aa3e:	18c3      	adds	r3, r0, r3
    aa40:	3330      	adds	r3, #48	; 0x30
    aa42:	3307      	adds	r3, #7
    aa44:	22ff      	movs	r2, #255	; 0xff
    aa46:	400a      	ands	r2, r1
    aa48:	0014      	movs	r4, r2
    aa4a:	781a      	ldrb	r2, [r3, #0]
    aa4c:	2000      	movs	r0, #0
    aa4e:	4002      	ands	r2, r0
    aa50:	1c10      	adds	r0, r2, #0
    aa52:	1c22      	adds	r2, r4, #0
    aa54:	4302      	orrs	r2, r0
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	0a0a      	lsrs	r2, r1, #8
    aa5a:	b290      	uxth	r0, r2
    aa5c:	785a      	ldrb	r2, [r3, #1]
    aa5e:	2100      	movs	r1, #0
    aa60:	400a      	ands	r2, r1
    aa62:	1c11      	adds	r1, r2, #0
    aa64:	1c02      	adds	r2, r0, #0
    aa66:	430a      	orrs	r2, r1
    aa68:	705a      	strb	r2, [r3, #1]
		
		cfg_1.sock_rs485[i].baud		=38400;
    aa6a:	1dbb      	adds	r3, r7, #6
    aa6c:	881a      	ldrh	r2, [r3, #0]
    aa6e:	4955      	ldr	r1, [pc, #340]	; (abc4 <cfg_default+0x2f4>)
    aa70:	0013      	movs	r3, r2
    aa72:	005b      	lsls	r3, r3, #1
    aa74:	189b      	adds	r3, r3, r2
    aa76:	009b      	lsls	r3, r3, #2
    aa78:	189b      	adds	r3, r3, r2
    aa7a:	18cb      	adds	r3, r1, r3
    aa7c:	3330      	adds	r3, #48	; 0x30
    aa7e:	3309      	adds	r3, #9
    aa80:	781a      	ldrb	r2, [r3, #0]
    aa82:	2100      	movs	r1, #0
    aa84:	400a      	ands	r2, r1
    aa86:	701a      	strb	r2, [r3, #0]
    aa88:	785a      	ldrb	r2, [r3, #1]
    aa8a:	2100      	movs	r1, #0
    aa8c:	400a      	ands	r2, r1
    aa8e:	1c11      	adds	r1, r2, #0
    aa90:	226a      	movs	r2, #106	; 0x6a
    aa92:	4252      	negs	r2, r2
    aa94:	430a      	orrs	r2, r1
    aa96:	705a      	strb	r2, [r3, #1]
    aa98:	789a      	ldrb	r2, [r3, #2]
    aa9a:	2100      	movs	r1, #0
    aa9c:	400a      	ands	r2, r1
    aa9e:	709a      	strb	r2, [r3, #2]
    aaa0:	78da      	ldrb	r2, [r3, #3]
    aaa2:	2100      	movs	r1, #0
    aaa4:	400a      	ands	r2, r1
    aaa6:	70da      	strb	r2, [r3, #3]
		cfg_1.sock_rs485[i].bsize		=8;
    aaa8:	1dbb      	adds	r3, r7, #6
    aaaa:	881a      	ldrh	r2, [r3, #0]
    aaac:	4945      	ldr	r1, [pc, #276]	; (abc4 <cfg_default+0x2f4>)
    aaae:	2038      	movs	r0, #56	; 0x38
    aab0:	0013      	movs	r3, r2
    aab2:	005b      	lsls	r3, r3, #1
    aab4:	189b      	adds	r3, r3, r2
    aab6:	009b      	lsls	r3, r3, #2
    aab8:	189b      	adds	r3, r3, r2
    aaba:	18cb      	adds	r3, r1, r3
    aabc:	181b      	adds	r3, r3, r0
    aabe:	795a      	ldrb	r2, [r3, #5]
    aac0:	210f      	movs	r1, #15
    aac2:	438a      	bics	r2, r1
    aac4:	1c11      	adds	r1, r2, #0
    aac6:	2208      	movs	r2, #8
    aac8:	430a      	orrs	r2, r1
    aaca:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].parity		=0;
    aacc:	1dbb      	adds	r3, r7, #6
    aace:	881a      	ldrh	r2, [r3, #0]
    aad0:	493c      	ldr	r1, [pc, #240]	; (abc4 <cfg_default+0x2f4>)
    aad2:	2038      	movs	r0, #56	; 0x38
    aad4:	0013      	movs	r3, r2
    aad6:	005b      	lsls	r3, r3, #1
    aad8:	189b      	adds	r3, r3, r2
    aada:	009b      	lsls	r3, r3, #2
    aadc:	189b      	adds	r3, r3, r2
    aade:	18cb      	adds	r3, r1, r3
    aae0:	181b      	adds	r3, r3, r0
    aae2:	795a      	ldrb	r2, [r3, #5]
    aae4:	2130      	movs	r1, #48	; 0x30
    aae6:	438a      	bics	r2, r1
    aae8:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].stop		=0;
    aaea:	1dbb      	adds	r3, r7, #6
    aaec:	881a      	ldrh	r2, [r3, #0]
    aaee:	4935      	ldr	r1, [pc, #212]	; (abc4 <cfg_default+0x2f4>)
    aaf0:	2038      	movs	r0, #56	; 0x38
    aaf2:	0013      	movs	r3, r2
    aaf4:	005b      	lsls	r3, r3, #1
    aaf6:	189b      	adds	r3, r3, r2
    aaf8:	009b      	lsls	r3, r3, #2
    aafa:	189b      	adds	r3, r3, r2
    aafc:	18cb      	adds	r3, r1, r3
    aafe:	181b      	adds	r3, r3, r0
    ab00:	795a      	ldrb	r2, [r3, #5]
    ab02:	213f      	movs	r1, #63	; 0x3f
    ab04:	400a      	ands	r2, r1
    ab06:	715a      	strb	r2, [r3, #5]
		cfg_1.sock_rs485[i].tout		=100;
    ab08:	1dbb      	adds	r3, r7, #6
    ab0a:	881a      	ldrh	r2, [r3, #0]
    ab0c:	492d      	ldr	r1, [pc, #180]	; (abc4 <cfg_default+0x2f4>)
    ab0e:	0013      	movs	r3, r2
    ab10:	005b      	lsls	r3, r3, #1
    ab12:	189b      	adds	r3, r3, r2
    ab14:	009b      	lsls	r3, r3, #2
    ab16:	189b      	adds	r3, r3, r2
    ab18:	18cb      	adds	r3, r1, r3
    ab1a:	3338      	adds	r3, #56	; 0x38
    ab1c:	3307      	adds	r3, #7
    ab1e:	781a      	ldrb	r2, [r3, #0]
    ab20:	2100      	movs	r1, #0
    ab22:	400a      	ands	r2, r1
    ab24:	1c11      	adds	r1, r2, #0
    ab26:	2264      	movs	r2, #100	; 0x64
    ab28:	430a      	orrs	r2, r1
    ab2a:	701a      	strb	r2, [r3, #0]
    ab2c:	785a      	ldrb	r2, [r3, #1]
    ab2e:	2100      	movs	r1, #0
    ab30:	400a      	ands	r2, r1
    ab32:	705a      	strb	r2, [r3, #1]
		
		memset(cfg_1.access[i].ip, 0, 4*4);
    ab34:	1dbb      	adds	r3, r7, #6
    ab36:	881a      	ldrh	r2, [r3, #0]
    ab38:	0013      	movs	r3, r2
    ab3a:	00db      	lsls	r3, r3, #3
    ab3c:	189b      	adds	r3, r3, r2
    ab3e:	005b      	lsls	r3, r3, #1
    ab40:	3368      	adds	r3, #104	; 0x68
    ab42:	001a      	movs	r2, r3
    ab44:	4b1f      	ldr	r3, [pc, #124]	; (abc4 <cfg_default+0x2f4>)
    ab46:	18d3      	adds	r3, r2, r3
    ab48:	3304      	adds	r3, #4
    ab4a:	2210      	movs	r2, #16
    ab4c:	2100      	movs	r1, #0
    ab4e:	0018      	movs	r0, r3
    ab50:	4b21      	ldr	r3, [pc, #132]	; (abd8 <cfg_default+0x308>)
    ab52:	4798      	blx	r3
		cfg_1.access[i].en = 1;
    ab54:	1dbb      	adds	r3, r7, #6
    ab56:	881a      	ldrh	r2, [r3, #0]
    ab58:	491a      	ldr	r1, [pc, #104]	; (abc4 <cfg_default+0x2f4>)
    ab5a:	206a      	movs	r0, #106	; 0x6a
    ab5c:	0013      	movs	r3, r2
    ab5e:	00db      	lsls	r3, r3, #3
    ab60:	189b      	adds	r3, r3, r2
    ab62:	005b      	lsls	r3, r3, #1
    ab64:	18cb      	adds	r3, r1, r3
    ab66:	181b      	adds	r3, r3, r0
    ab68:	2201      	movs	r2, #1
    ab6a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;++i)
    ab6c:	1dbb      	adds	r3, r7, #6
    ab6e:	1dba      	adds	r2, r7, #6
    ab70:	8812      	ldrh	r2, [r2, #0]
    ab72:	3201      	adds	r2, #1
    ab74:	801a      	strh	r2, [r3, #0]
    ab76:	1dbb      	adds	r3, r7, #6
    ab78:	881b      	ldrh	r3, [r3, #0]
    ab7a:	2b03      	cmp	r3, #3
    ab7c:	d800      	bhi.n	ab80 <cfg_default+0x2b0>
    ab7e:	e729      	b.n	a9d4 <cfg_default+0x104>

	}
	cfg_1.cs=crc16_ccit(((BYTE *)&cfg_1),sizeof(CFG_1)-2);
    ab80:	4b10      	ldr	r3, [pc, #64]	; (abc4 <cfg_default+0x2f4>)
    ab82:	21fe      	movs	r1, #254	; 0xfe
    ab84:	0018      	movs	r0, r3
    ab86:	4b15      	ldr	r3, [pc, #84]	; (abdc <cfg_default+0x30c>)
    ab88:	4798      	blx	r3
    ab8a:	0003      	movs	r3, r0
    ab8c:	0019      	movs	r1, r3
    ab8e:	4b0d      	ldr	r3, [pc, #52]	; (abc4 <cfg_default+0x2f4>)
    ab90:	22fe      	movs	r2, #254	; 0xfe
    ab92:	20ff      	movs	r0, #255	; 0xff
    ab94:	4008      	ands	r0, r1
    ab96:	0005      	movs	r5, r0
    ab98:	5c98      	ldrb	r0, [r3, r2]
    ab9a:	2400      	movs	r4, #0
    ab9c:	4020      	ands	r0, r4
    ab9e:	1c04      	adds	r4, r0, #0
    aba0:	1c28      	adds	r0, r5, #0
    aba2:	4320      	orrs	r0, r4
    aba4:	5498      	strb	r0, [r3, r2]
    aba6:	0a09      	lsrs	r1, r1, #8
    aba8:	b288      	uxth	r0, r1
    abaa:	189b      	adds	r3, r3, r2
    abac:	785a      	ldrb	r2, [r3, #1]
    abae:	2100      	movs	r1, #0
    abb0:	400a      	ands	r2, r1
    abb2:	1c11      	adds	r1, r2, #0
    abb4:	1c02      	adds	r2, r0, #0
    abb6:	430a      	orrs	r2, r1
    abb8:	705a      	strb	r2, [r3, #1]
	//..............................................................................
}
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	46bd      	mov	sp, r7
    abbe:	b002      	add	sp, #8
    abc0:	bdb0      	pop	{r4, r5, r7, pc}
    abc2:	46c0      	nop			; (mov r8, r8)
    abc4:	20003dc0 	.word	0x20003dc0
    abc8:	0000c8b0 	.word	0x0000c8b0
    abcc:	20003dc4 	.word	0x20003dc4
    abd0:	0000c4e5 	.word	0x0000c4e5
    abd4:	00000fa1 	.word	0x00000fa1
    abd8:	0000c569 	.word	0x0000c569
    abdc:	00005bfd 	.word	0x00005bfd

0000abe0 <cfg_check>:

void cfg_check()
//--------------------------------------------------------------------------
{
    abe0:	b590      	push	{r4, r7, lr}
    abe2:	b083      	sub	sp, #12
    abe4:	af00      	add	r7, sp, #0
	BYTE i = 0;
    abe6:	1dfb      	adds	r3, r7, #7
    abe8:	2200      	movs	r2, #0
    abea:	701a      	strb	r2, [r3, #0]
	
	for(i=0;i<4;i++)
    abec:	1dfb      	adds	r3, r7, #7
    abee:	2200      	movs	r2, #0
    abf0:	701a      	strb	r2, [r3, #0]
    abf2:	e04d      	b.n	ac90 <cfg_check+0xb0>
	{
		port[i].tout_port=cfg_1.sock_rs485[i].tout;
    abf4:	1dfb      	adds	r3, r7, #7
    abf6:	7819      	ldrb	r1, [r3, #0]
    abf8:	1dfb      	adds	r3, r7, #7
    abfa:	781a      	ldrb	r2, [r3, #0]
    abfc:	4828      	ldr	r0, [pc, #160]	; (aca0 <cfg_check+0xc0>)
    abfe:	0013      	movs	r3, r2
    ac00:	005b      	lsls	r3, r3, #1
    ac02:	189b      	adds	r3, r3, r2
    ac04:	009b      	lsls	r3, r3, #2
    ac06:	189b      	adds	r3, r3, r2
    ac08:	18c3      	adds	r3, r0, r3
    ac0a:	3338      	adds	r3, #56	; 0x38
    ac0c:	79da      	ldrb	r2, [r3, #7]
    ac0e:	7a1b      	ldrb	r3, [r3, #8]
    ac10:	021b      	lsls	r3, r3, #8
    ac12:	4313      	orrs	r3, r2
    ac14:	b29c      	uxth	r4, r3
    ac16:	4823      	ldr	r0, [pc, #140]	; (aca4 <cfg_check+0xc4>)
    ac18:	2386      	movs	r3, #134	; 0x86
    ac1a:	009a      	lsls	r2, r3, #2
    ac1c:	000b      	movs	r3, r1
    ac1e:	00db      	lsls	r3, r3, #3
    ac20:	185b      	adds	r3, r3, r1
    ac22:	019b      	lsls	r3, r3, #6
    ac24:	18c3      	adds	r3, r0, r3
    ac26:	189b      	adds	r3, r3, r2
    ac28:	1c22      	adds	r2, r4, #0
    ac2a:	801a      	strh	r2, [r3, #0]
		if ((port[i].tout_port < 50) || (port[i].tout_port > 1000))  {port[i].tout_port= 100;}
    ac2c:	1dfb      	adds	r3, r7, #7
    ac2e:	781a      	ldrb	r2, [r3, #0]
    ac30:	481c      	ldr	r0, [pc, #112]	; (aca4 <cfg_check+0xc4>)
    ac32:	2386      	movs	r3, #134	; 0x86
    ac34:	0099      	lsls	r1, r3, #2
    ac36:	0013      	movs	r3, r2
    ac38:	00db      	lsls	r3, r3, #3
    ac3a:	189b      	adds	r3, r3, r2
    ac3c:	019b      	lsls	r3, r3, #6
    ac3e:	18c3      	adds	r3, r0, r3
    ac40:	185b      	adds	r3, r3, r1
    ac42:	881b      	ldrh	r3, [r3, #0]
    ac44:	b29b      	uxth	r3, r3
    ac46:	2b31      	cmp	r3, #49	; 0x31
    ac48:	d910      	bls.n	ac6c <cfg_check+0x8c>
    ac4a:	1dfb      	adds	r3, r7, #7
    ac4c:	781a      	ldrb	r2, [r3, #0]
    ac4e:	4815      	ldr	r0, [pc, #84]	; (aca4 <cfg_check+0xc4>)
    ac50:	2386      	movs	r3, #134	; 0x86
    ac52:	0099      	lsls	r1, r3, #2
    ac54:	0013      	movs	r3, r2
    ac56:	00db      	lsls	r3, r3, #3
    ac58:	189b      	adds	r3, r3, r2
    ac5a:	019b      	lsls	r3, r3, #6
    ac5c:	18c3      	adds	r3, r0, r3
    ac5e:	185b      	adds	r3, r3, r1
    ac60:	881b      	ldrh	r3, [r3, #0]
    ac62:	b29a      	uxth	r2, r3
    ac64:	23fa      	movs	r3, #250	; 0xfa
    ac66:	009b      	lsls	r3, r3, #2
    ac68:	429a      	cmp	r2, r3
    ac6a:	d90c      	bls.n	ac86 <cfg_check+0xa6>
    ac6c:	1dfb      	adds	r3, r7, #7
    ac6e:	781a      	ldrb	r2, [r3, #0]
    ac70:	480c      	ldr	r0, [pc, #48]	; (aca4 <cfg_check+0xc4>)
    ac72:	2386      	movs	r3, #134	; 0x86
    ac74:	0099      	lsls	r1, r3, #2
    ac76:	0013      	movs	r3, r2
    ac78:	00db      	lsls	r3, r3, #3
    ac7a:	189b      	adds	r3, r3, r2
    ac7c:	019b      	lsls	r3, r3, #6
    ac7e:	18c3      	adds	r3, r0, r3
    ac80:	185b      	adds	r3, r3, r1
    ac82:	2264      	movs	r2, #100	; 0x64
    ac84:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
    ac86:	1dfb      	adds	r3, r7, #7
    ac88:	781a      	ldrb	r2, [r3, #0]
    ac8a:	1dfb      	adds	r3, r7, #7
    ac8c:	3201      	adds	r2, #1
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	1dfb      	adds	r3, r7, #7
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	2b03      	cmp	r3, #3
    ac96:	d9ad      	bls.n	abf4 <cfg_check+0x14>
	}
	
	return;
    ac98:	46c0      	nop			; (mov r8, r8)
}
    ac9a:	46bd      	mov	sp, r7
    ac9c:	b003      	add	sp, #12
    ac9e:	bd90      	pop	{r4, r7, pc}
    aca0:	20003dc0 	.word	0x20003dc0
    aca4:	200031f8 	.word	0x200031f8

0000aca8 <cfg_save>:

WORD cfg_save(void)
//--------------------------------------------------------------------------
{
    aca8:	b580      	push	{r7, lr}
    acaa:	af00      	add	r7, sp, #0
	if(!flash_empty(CFG_1_ADDR,256))
    acac:	2380      	movs	r3, #128	; 0x80
    acae:	005a      	lsls	r2, r3, #1
    acb0:	23fc      	movs	r3, #252	; 0xfc
    acb2:	029b      	lsls	r3, r3, #10
    acb4:	0011      	movs	r1, r2
    acb6:	0018      	movs	r0, r3
    acb8:	4b0a      	ldr	r3, [pc, #40]	; (ace4 <cfg_save+0x3c>)
    acba:	4798      	blx	r3
    acbc:	1e03      	subs	r3, r0, #0
    acbe:	d104      	bne.n	acca <cfg_save+0x22>
	{
		flash_erase_page(CFG_1_ADDR);
    acc0:	23fc      	movs	r3, #252	; 0xfc
    acc2:	029b      	lsls	r3, r3, #10
    acc4:	0018      	movs	r0, r3
    acc6:	4b08      	ldr	r3, [pc, #32]	; (ace8 <cfg_save+0x40>)
    acc8:	4798      	blx	r3
	}
	
	flash_write(CFG_1_ADDR,(BYTE*)&cfg_1,sizeof(CFG_1));
    acca:	2380      	movs	r3, #128	; 0x80
    accc:	005a      	lsls	r2, r3, #1
    acce:	4907      	ldr	r1, [pc, #28]	; (acec <cfg_save+0x44>)
    acd0:	23fc      	movs	r3, #252	; 0xfc
    acd2:	029b      	lsls	r3, r3, #10
    acd4:	0018      	movs	r0, r3
    acd6:	4b06      	ldr	r3, [pc, #24]	; (acf0 <cfg_save+0x48>)
    acd8:	4798      	blx	r3
			
	return(CFG_OK);
    acda:	2301      	movs	r3, #1
}
    acdc:	0018      	movs	r0, r3
    acde:	46bd      	mov	sp, r7
    ace0:	bd80      	pop	{r7, pc}
    ace2:	46c0      	nop			; (mov r8, r8)
    ace4:	00006461 	.word	0x00006461
    ace8:	000064a7 	.word	0x000064a7
    acec:	20003dc0 	.word	0x20003dc0
    acf0:	000064f5 	.word	0x000064f5

0000acf4 <__udivsi3>:
    acf4:	2200      	movs	r2, #0
    acf6:	0843      	lsrs	r3, r0, #1
    acf8:	428b      	cmp	r3, r1
    acfa:	d374      	bcc.n	ade6 <__udivsi3+0xf2>
    acfc:	0903      	lsrs	r3, r0, #4
    acfe:	428b      	cmp	r3, r1
    ad00:	d35f      	bcc.n	adc2 <__udivsi3+0xce>
    ad02:	0a03      	lsrs	r3, r0, #8
    ad04:	428b      	cmp	r3, r1
    ad06:	d344      	bcc.n	ad92 <__udivsi3+0x9e>
    ad08:	0b03      	lsrs	r3, r0, #12
    ad0a:	428b      	cmp	r3, r1
    ad0c:	d328      	bcc.n	ad60 <__udivsi3+0x6c>
    ad0e:	0c03      	lsrs	r3, r0, #16
    ad10:	428b      	cmp	r3, r1
    ad12:	d30d      	bcc.n	ad30 <__udivsi3+0x3c>
    ad14:	22ff      	movs	r2, #255	; 0xff
    ad16:	0209      	lsls	r1, r1, #8
    ad18:	ba12      	rev	r2, r2
    ad1a:	0c03      	lsrs	r3, r0, #16
    ad1c:	428b      	cmp	r3, r1
    ad1e:	d302      	bcc.n	ad26 <__udivsi3+0x32>
    ad20:	1212      	asrs	r2, r2, #8
    ad22:	0209      	lsls	r1, r1, #8
    ad24:	d065      	beq.n	adf2 <__udivsi3+0xfe>
    ad26:	0b03      	lsrs	r3, r0, #12
    ad28:	428b      	cmp	r3, r1
    ad2a:	d319      	bcc.n	ad60 <__udivsi3+0x6c>
    ad2c:	e000      	b.n	ad30 <__udivsi3+0x3c>
    ad2e:	0a09      	lsrs	r1, r1, #8
    ad30:	0bc3      	lsrs	r3, r0, #15
    ad32:	428b      	cmp	r3, r1
    ad34:	d301      	bcc.n	ad3a <__udivsi3+0x46>
    ad36:	03cb      	lsls	r3, r1, #15
    ad38:	1ac0      	subs	r0, r0, r3
    ad3a:	4152      	adcs	r2, r2
    ad3c:	0b83      	lsrs	r3, r0, #14
    ad3e:	428b      	cmp	r3, r1
    ad40:	d301      	bcc.n	ad46 <__udivsi3+0x52>
    ad42:	038b      	lsls	r3, r1, #14
    ad44:	1ac0      	subs	r0, r0, r3
    ad46:	4152      	adcs	r2, r2
    ad48:	0b43      	lsrs	r3, r0, #13
    ad4a:	428b      	cmp	r3, r1
    ad4c:	d301      	bcc.n	ad52 <__udivsi3+0x5e>
    ad4e:	034b      	lsls	r3, r1, #13
    ad50:	1ac0      	subs	r0, r0, r3
    ad52:	4152      	adcs	r2, r2
    ad54:	0b03      	lsrs	r3, r0, #12
    ad56:	428b      	cmp	r3, r1
    ad58:	d301      	bcc.n	ad5e <__udivsi3+0x6a>
    ad5a:	030b      	lsls	r3, r1, #12
    ad5c:	1ac0      	subs	r0, r0, r3
    ad5e:	4152      	adcs	r2, r2
    ad60:	0ac3      	lsrs	r3, r0, #11
    ad62:	428b      	cmp	r3, r1
    ad64:	d301      	bcc.n	ad6a <__udivsi3+0x76>
    ad66:	02cb      	lsls	r3, r1, #11
    ad68:	1ac0      	subs	r0, r0, r3
    ad6a:	4152      	adcs	r2, r2
    ad6c:	0a83      	lsrs	r3, r0, #10
    ad6e:	428b      	cmp	r3, r1
    ad70:	d301      	bcc.n	ad76 <__udivsi3+0x82>
    ad72:	028b      	lsls	r3, r1, #10
    ad74:	1ac0      	subs	r0, r0, r3
    ad76:	4152      	adcs	r2, r2
    ad78:	0a43      	lsrs	r3, r0, #9
    ad7a:	428b      	cmp	r3, r1
    ad7c:	d301      	bcc.n	ad82 <__udivsi3+0x8e>
    ad7e:	024b      	lsls	r3, r1, #9
    ad80:	1ac0      	subs	r0, r0, r3
    ad82:	4152      	adcs	r2, r2
    ad84:	0a03      	lsrs	r3, r0, #8
    ad86:	428b      	cmp	r3, r1
    ad88:	d301      	bcc.n	ad8e <__udivsi3+0x9a>
    ad8a:	020b      	lsls	r3, r1, #8
    ad8c:	1ac0      	subs	r0, r0, r3
    ad8e:	4152      	adcs	r2, r2
    ad90:	d2cd      	bcs.n	ad2e <__udivsi3+0x3a>
    ad92:	09c3      	lsrs	r3, r0, #7
    ad94:	428b      	cmp	r3, r1
    ad96:	d301      	bcc.n	ad9c <__udivsi3+0xa8>
    ad98:	01cb      	lsls	r3, r1, #7
    ad9a:	1ac0      	subs	r0, r0, r3
    ad9c:	4152      	adcs	r2, r2
    ad9e:	0983      	lsrs	r3, r0, #6
    ada0:	428b      	cmp	r3, r1
    ada2:	d301      	bcc.n	ada8 <__udivsi3+0xb4>
    ada4:	018b      	lsls	r3, r1, #6
    ada6:	1ac0      	subs	r0, r0, r3
    ada8:	4152      	adcs	r2, r2
    adaa:	0943      	lsrs	r3, r0, #5
    adac:	428b      	cmp	r3, r1
    adae:	d301      	bcc.n	adb4 <__udivsi3+0xc0>
    adb0:	014b      	lsls	r3, r1, #5
    adb2:	1ac0      	subs	r0, r0, r3
    adb4:	4152      	adcs	r2, r2
    adb6:	0903      	lsrs	r3, r0, #4
    adb8:	428b      	cmp	r3, r1
    adba:	d301      	bcc.n	adc0 <__udivsi3+0xcc>
    adbc:	010b      	lsls	r3, r1, #4
    adbe:	1ac0      	subs	r0, r0, r3
    adc0:	4152      	adcs	r2, r2
    adc2:	08c3      	lsrs	r3, r0, #3
    adc4:	428b      	cmp	r3, r1
    adc6:	d301      	bcc.n	adcc <__udivsi3+0xd8>
    adc8:	00cb      	lsls	r3, r1, #3
    adca:	1ac0      	subs	r0, r0, r3
    adcc:	4152      	adcs	r2, r2
    adce:	0883      	lsrs	r3, r0, #2
    add0:	428b      	cmp	r3, r1
    add2:	d301      	bcc.n	add8 <__udivsi3+0xe4>
    add4:	008b      	lsls	r3, r1, #2
    add6:	1ac0      	subs	r0, r0, r3
    add8:	4152      	adcs	r2, r2
    adda:	0843      	lsrs	r3, r0, #1
    addc:	428b      	cmp	r3, r1
    adde:	d301      	bcc.n	ade4 <__udivsi3+0xf0>
    ade0:	004b      	lsls	r3, r1, #1
    ade2:	1ac0      	subs	r0, r0, r3
    ade4:	4152      	adcs	r2, r2
    ade6:	1a41      	subs	r1, r0, r1
    ade8:	d200      	bcs.n	adec <__udivsi3+0xf8>
    adea:	4601      	mov	r1, r0
    adec:	4152      	adcs	r2, r2
    adee:	4610      	mov	r0, r2
    adf0:	4770      	bx	lr
    adf2:	e7ff      	b.n	adf4 <__udivsi3+0x100>
    adf4:	b501      	push	{r0, lr}
    adf6:	2000      	movs	r0, #0
    adf8:	f000 f806 	bl	ae08 <__aeabi_idiv0>
    adfc:	bd02      	pop	{r1, pc}
    adfe:	46c0      	nop			; (mov r8, r8)

0000ae00 <__aeabi_uidivmod>:
    ae00:	2900      	cmp	r1, #0
    ae02:	d0f7      	beq.n	adf4 <__udivsi3+0x100>
    ae04:	e776      	b.n	acf4 <__udivsi3>
    ae06:	4770      	bx	lr

0000ae08 <__aeabi_idiv0>:
    ae08:	4770      	bx	lr
    ae0a:	46c0      	nop			; (mov r8, r8)

0000ae0c <__aeabi_d2uiz>:
    ae0c:	b570      	push	{r4, r5, r6, lr}
    ae0e:	2200      	movs	r2, #0
    ae10:	4b0c      	ldr	r3, [pc, #48]	; (ae44 <__aeabi_d2uiz+0x38>)
    ae12:	0004      	movs	r4, r0
    ae14:	000d      	movs	r5, r1
    ae16:	f001 fa19 	bl	c24c <__aeabi_dcmpge>
    ae1a:	2800      	cmp	r0, #0
    ae1c:	d104      	bne.n	ae28 <__aeabi_d2uiz+0x1c>
    ae1e:	0020      	movs	r0, r4
    ae20:	0029      	movs	r1, r5
    ae22:	f001 f921 	bl	c068 <__aeabi_d2iz>
    ae26:	bd70      	pop	{r4, r5, r6, pc}
    ae28:	4b06      	ldr	r3, [pc, #24]	; (ae44 <__aeabi_d2uiz+0x38>)
    ae2a:	2200      	movs	r2, #0
    ae2c:	0020      	movs	r0, r4
    ae2e:	0029      	movs	r1, r5
    ae30:	f000 fe04 	bl	ba3c <__aeabi_dsub>
    ae34:	f001 f918 	bl	c068 <__aeabi_d2iz>
    ae38:	2380      	movs	r3, #128	; 0x80
    ae3a:	061b      	lsls	r3, r3, #24
    ae3c:	469c      	mov	ip, r3
    ae3e:	4460      	add	r0, ip
    ae40:	e7f1      	b.n	ae26 <__aeabi_d2uiz+0x1a>
    ae42:	46c0      	nop			; (mov r8, r8)
    ae44:	41e00000 	.word	0x41e00000

0000ae48 <__aeabi_ui2f>:
    ae48:	b510      	push	{r4, lr}
    ae4a:	1e04      	subs	r4, r0, #0
    ae4c:	d027      	beq.n	ae9e <__aeabi_ui2f+0x56>
    ae4e:	f001 fa07 	bl	c260 <__clzsi2>
    ae52:	239e      	movs	r3, #158	; 0x9e
    ae54:	1a1b      	subs	r3, r3, r0
    ae56:	2b96      	cmp	r3, #150	; 0x96
    ae58:	dc0a      	bgt.n	ae70 <__aeabi_ui2f+0x28>
    ae5a:	2296      	movs	r2, #150	; 0x96
    ae5c:	1ad2      	subs	r2, r2, r3
    ae5e:	4094      	lsls	r4, r2
    ae60:	0264      	lsls	r4, r4, #9
    ae62:	0a64      	lsrs	r4, r4, #9
    ae64:	b2db      	uxtb	r3, r3
    ae66:	0264      	lsls	r4, r4, #9
    ae68:	05db      	lsls	r3, r3, #23
    ae6a:	0a60      	lsrs	r0, r4, #9
    ae6c:	4318      	orrs	r0, r3
    ae6e:	bd10      	pop	{r4, pc}
    ae70:	2b99      	cmp	r3, #153	; 0x99
    ae72:	dc17      	bgt.n	aea4 <__aeabi_ui2f+0x5c>
    ae74:	2299      	movs	r2, #153	; 0x99
    ae76:	1ad2      	subs	r2, r2, r3
    ae78:	2a00      	cmp	r2, #0
    ae7a:	dd27      	ble.n	aecc <__aeabi_ui2f+0x84>
    ae7c:	4094      	lsls	r4, r2
    ae7e:	0022      	movs	r2, r4
    ae80:	4c13      	ldr	r4, [pc, #76]	; (aed0 <__aeabi_ui2f+0x88>)
    ae82:	4014      	ands	r4, r2
    ae84:	0751      	lsls	r1, r2, #29
    ae86:	d004      	beq.n	ae92 <__aeabi_ui2f+0x4a>
    ae88:	210f      	movs	r1, #15
    ae8a:	400a      	ands	r2, r1
    ae8c:	2a04      	cmp	r2, #4
    ae8e:	d000      	beq.n	ae92 <__aeabi_ui2f+0x4a>
    ae90:	3404      	adds	r4, #4
    ae92:	0162      	lsls	r2, r4, #5
    ae94:	d412      	bmi.n	aebc <__aeabi_ui2f+0x74>
    ae96:	01a4      	lsls	r4, r4, #6
    ae98:	0a64      	lsrs	r4, r4, #9
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	e7e3      	b.n	ae66 <__aeabi_ui2f+0x1e>
    ae9e:	2300      	movs	r3, #0
    aea0:	2400      	movs	r4, #0
    aea2:	e7e0      	b.n	ae66 <__aeabi_ui2f+0x1e>
    aea4:	22b9      	movs	r2, #185	; 0xb9
    aea6:	0021      	movs	r1, r4
    aea8:	1ad2      	subs	r2, r2, r3
    aeaa:	4091      	lsls	r1, r2
    aeac:	000a      	movs	r2, r1
    aeae:	1e51      	subs	r1, r2, #1
    aeb0:	418a      	sbcs	r2, r1
    aeb2:	2105      	movs	r1, #5
    aeb4:	1a09      	subs	r1, r1, r0
    aeb6:	40cc      	lsrs	r4, r1
    aeb8:	4314      	orrs	r4, r2
    aeba:	e7db      	b.n	ae74 <__aeabi_ui2f+0x2c>
    aebc:	4b04      	ldr	r3, [pc, #16]	; (aed0 <__aeabi_ui2f+0x88>)
    aebe:	401c      	ands	r4, r3
    aec0:	239f      	movs	r3, #159	; 0x9f
    aec2:	01a4      	lsls	r4, r4, #6
    aec4:	1a1b      	subs	r3, r3, r0
    aec6:	0a64      	lsrs	r4, r4, #9
    aec8:	b2db      	uxtb	r3, r3
    aeca:	e7cc      	b.n	ae66 <__aeabi_ui2f+0x1e>
    aecc:	0022      	movs	r2, r4
    aece:	e7d7      	b.n	ae80 <__aeabi_ui2f+0x38>
    aed0:	fbffffff 	.word	0xfbffffff

0000aed4 <__aeabi_ddiv>:
    aed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aed6:	4657      	mov	r7, sl
    aed8:	4645      	mov	r5, r8
    aeda:	46de      	mov	lr, fp
    aedc:	464e      	mov	r6, r9
    aede:	b5e0      	push	{r5, r6, r7, lr}
    aee0:	004c      	lsls	r4, r1, #1
    aee2:	030e      	lsls	r6, r1, #12
    aee4:	b087      	sub	sp, #28
    aee6:	4683      	mov	fp, r0
    aee8:	4692      	mov	sl, r2
    aeea:	001d      	movs	r5, r3
    aeec:	4680      	mov	r8, r0
    aeee:	0b36      	lsrs	r6, r6, #12
    aef0:	0d64      	lsrs	r4, r4, #21
    aef2:	0fcf      	lsrs	r7, r1, #31
    aef4:	2c00      	cmp	r4, #0
    aef6:	d04f      	beq.n	af98 <__aeabi_ddiv+0xc4>
    aef8:	4b6f      	ldr	r3, [pc, #444]	; (b0b8 <__aeabi_ddiv+0x1e4>)
    aefa:	429c      	cmp	r4, r3
    aefc:	d035      	beq.n	af6a <__aeabi_ddiv+0x96>
    aefe:	2380      	movs	r3, #128	; 0x80
    af00:	0f42      	lsrs	r2, r0, #29
    af02:	041b      	lsls	r3, r3, #16
    af04:	00f6      	lsls	r6, r6, #3
    af06:	4313      	orrs	r3, r2
    af08:	4333      	orrs	r3, r6
    af0a:	4699      	mov	r9, r3
    af0c:	00c3      	lsls	r3, r0, #3
    af0e:	4698      	mov	r8, r3
    af10:	4b6a      	ldr	r3, [pc, #424]	; (b0bc <__aeabi_ddiv+0x1e8>)
    af12:	2600      	movs	r6, #0
    af14:	469c      	mov	ip, r3
    af16:	2300      	movs	r3, #0
    af18:	4464      	add	r4, ip
    af1a:	9303      	str	r3, [sp, #12]
    af1c:	032b      	lsls	r3, r5, #12
    af1e:	0b1b      	lsrs	r3, r3, #12
    af20:	469b      	mov	fp, r3
    af22:	006b      	lsls	r3, r5, #1
    af24:	0fed      	lsrs	r5, r5, #31
    af26:	4650      	mov	r0, sl
    af28:	0d5b      	lsrs	r3, r3, #21
    af2a:	9501      	str	r5, [sp, #4]
    af2c:	d05e      	beq.n	afec <__aeabi_ddiv+0x118>
    af2e:	4a62      	ldr	r2, [pc, #392]	; (b0b8 <__aeabi_ddiv+0x1e4>)
    af30:	4293      	cmp	r3, r2
    af32:	d053      	beq.n	afdc <__aeabi_ddiv+0x108>
    af34:	465a      	mov	r2, fp
    af36:	00d1      	lsls	r1, r2, #3
    af38:	2280      	movs	r2, #128	; 0x80
    af3a:	0f40      	lsrs	r0, r0, #29
    af3c:	0412      	lsls	r2, r2, #16
    af3e:	4302      	orrs	r2, r0
    af40:	430a      	orrs	r2, r1
    af42:	4693      	mov	fp, r2
    af44:	4652      	mov	r2, sl
    af46:	00d1      	lsls	r1, r2, #3
    af48:	4a5c      	ldr	r2, [pc, #368]	; (b0bc <__aeabi_ddiv+0x1e8>)
    af4a:	4694      	mov	ip, r2
    af4c:	2200      	movs	r2, #0
    af4e:	4463      	add	r3, ip
    af50:	0038      	movs	r0, r7
    af52:	4068      	eors	r0, r5
    af54:	4684      	mov	ip, r0
    af56:	9002      	str	r0, [sp, #8]
    af58:	1ae4      	subs	r4, r4, r3
    af5a:	4316      	orrs	r6, r2
    af5c:	2e0f      	cmp	r6, #15
    af5e:	d900      	bls.n	af62 <__aeabi_ddiv+0x8e>
    af60:	e0b4      	b.n	b0cc <__aeabi_ddiv+0x1f8>
    af62:	4b57      	ldr	r3, [pc, #348]	; (b0c0 <__aeabi_ddiv+0x1ec>)
    af64:	00b6      	lsls	r6, r6, #2
    af66:	599b      	ldr	r3, [r3, r6]
    af68:	469f      	mov	pc, r3
    af6a:	0003      	movs	r3, r0
    af6c:	4333      	orrs	r3, r6
    af6e:	4699      	mov	r9, r3
    af70:	d16c      	bne.n	b04c <__aeabi_ddiv+0x178>
    af72:	2300      	movs	r3, #0
    af74:	4698      	mov	r8, r3
    af76:	3302      	adds	r3, #2
    af78:	2608      	movs	r6, #8
    af7a:	9303      	str	r3, [sp, #12]
    af7c:	e7ce      	b.n	af1c <__aeabi_ddiv+0x48>
    af7e:	46cb      	mov	fp, r9
    af80:	4641      	mov	r1, r8
    af82:	9a03      	ldr	r2, [sp, #12]
    af84:	9701      	str	r7, [sp, #4]
    af86:	2a02      	cmp	r2, #2
    af88:	d165      	bne.n	b056 <__aeabi_ddiv+0x182>
    af8a:	9b01      	ldr	r3, [sp, #4]
    af8c:	4c4a      	ldr	r4, [pc, #296]	; (b0b8 <__aeabi_ddiv+0x1e4>)
    af8e:	469c      	mov	ip, r3
    af90:	2300      	movs	r3, #0
    af92:	2200      	movs	r2, #0
    af94:	4698      	mov	r8, r3
    af96:	e06b      	b.n	b070 <__aeabi_ddiv+0x19c>
    af98:	0003      	movs	r3, r0
    af9a:	4333      	orrs	r3, r6
    af9c:	4699      	mov	r9, r3
    af9e:	d04e      	beq.n	b03e <__aeabi_ddiv+0x16a>
    afa0:	2e00      	cmp	r6, #0
    afa2:	d100      	bne.n	afa6 <__aeabi_ddiv+0xd2>
    afa4:	e1bc      	b.n	b320 <__aeabi_ddiv+0x44c>
    afa6:	0030      	movs	r0, r6
    afa8:	f001 f95a 	bl	c260 <__clzsi2>
    afac:	0003      	movs	r3, r0
    afae:	3b0b      	subs	r3, #11
    afb0:	2b1c      	cmp	r3, #28
    afb2:	dd00      	ble.n	afb6 <__aeabi_ddiv+0xe2>
    afb4:	e1ac      	b.n	b310 <__aeabi_ddiv+0x43c>
    afb6:	221d      	movs	r2, #29
    afb8:	1ad3      	subs	r3, r2, r3
    afba:	465a      	mov	r2, fp
    afbc:	0001      	movs	r1, r0
    afbe:	40da      	lsrs	r2, r3
    afc0:	3908      	subs	r1, #8
    afc2:	408e      	lsls	r6, r1
    afc4:	0013      	movs	r3, r2
    afc6:	4333      	orrs	r3, r6
    afc8:	4699      	mov	r9, r3
    afca:	465b      	mov	r3, fp
    afcc:	408b      	lsls	r3, r1
    afce:	4698      	mov	r8, r3
    afd0:	2300      	movs	r3, #0
    afd2:	4c3c      	ldr	r4, [pc, #240]	; (b0c4 <__aeabi_ddiv+0x1f0>)
    afd4:	2600      	movs	r6, #0
    afd6:	1a24      	subs	r4, r4, r0
    afd8:	9303      	str	r3, [sp, #12]
    afda:	e79f      	b.n	af1c <__aeabi_ddiv+0x48>
    afdc:	4651      	mov	r1, sl
    afde:	465a      	mov	r2, fp
    afe0:	4311      	orrs	r1, r2
    afe2:	d129      	bne.n	b038 <__aeabi_ddiv+0x164>
    afe4:	2200      	movs	r2, #0
    afe6:	4693      	mov	fp, r2
    afe8:	3202      	adds	r2, #2
    afea:	e7b1      	b.n	af50 <__aeabi_ddiv+0x7c>
    afec:	4659      	mov	r1, fp
    afee:	4301      	orrs	r1, r0
    aff0:	d01e      	beq.n	b030 <__aeabi_ddiv+0x15c>
    aff2:	465b      	mov	r3, fp
    aff4:	2b00      	cmp	r3, #0
    aff6:	d100      	bne.n	affa <__aeabi_ddiv+0x126>
    aff8:	e19e      	b.n	b338 <__aeabi_ddiv+0x464>
    affa:	4658      	mov	r0, fp
    affc:	f001 f930 	bl	c260 <__clzsi2>
    b000:	0003      	movs	r3, r0
    b002:	3b0b      	subs	r3, #11
    b004:	2b1c      	cmp	r3, #28
    b006:	dd00      	ble.n	b00a <__aeabi_ddiv+0x136>
    b008:	e18f      	b.n	b32a <__aeabi_ddiv+0x456>
    b00a:	0002      	movs	r2, r0
    b00c:	4659      	mov	r1, fp
    b00e:	3a08      	subs	r2, #8
    b010:	4091      	lsls	r1, r2
    b012:	468b      	mov	fp, r1
    b014:	211d      	movs	r1, #29
    b016:	1acb      	subs	r3, r1, r3
    b018:	4651      	mov	r1, sl
    b01a:	40d9      	lsrs	r1, r3
    b01c:	000b      	movs	r3, r1
    b01e:	4659      	mov	r1, fp
    b020:	430b      	orrs	r3, r1
    b022:	4651      	mov	r1, sl
    b024:	469b      	mov	fp, r3
    b026:	4091      	lsls	r1, r2
    b028:	4b26      	ldr	r3, [pc, #152]	; (b0c4 <__aeabi_ddiv+0x1f0>)
    b02a:	2200      	movs	r2, #0
    b02c:	1a1b      	subs	r3, r3, r0
    b02e:	e78f      	b.n	af50 <__aeabi_ddiv+0x7c>
    b030:	2300      	movs	r3, #0
    b032:	2201      	movs	r2, #1
    b034:	469b      	mov	fp, r3
    b036:	e78b      	b.n	af50 <__aeabi_ddiv+0x7c>
    b038:	4651      	mov	r1, sl
    b03a:	2203      	movs	r2, #3
    b03c:	e788      	b.n	af50 <__aeabi_ddiv+0x7c>
    b03e:	2300      	movs	r3, #0
    b040:	4698      	mov	r8, r3
    b042:	3301      	adds	r3, #1
    b044:	2604      	movs	r6, #4
    b046:	2400      	movs	r4, #0
    b048:	9303      	str	r3, [sp, #12]
    b04a:	e767      	b.n	af1c <__aeabi_ddiv+0x48>
    b04c:	2303      	movs	r3, #3
    b04e:	46b1      	mov	r9, r6
    b050:	9303      	str	r3, [sp, #12]
    b052:	260c      	movs	r6, #12
    b054:	e762      	b.n	af1c <__aeabi_ddiv+0x48>
    b056:	2a03      	cmp	r2, #3
    b058:	d100      	bne.n	b05c <__aeabi_ddiv+0x188>
    b05a:	e25c      	b.n	b516 <__aeabi_ddiv+0x642>
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	2a01      	cmp	r2, #1
    b060:	d000      	beq.n	b064 <__aeabi_ddiv+0x190>
    b062:	e1e4      	b.n	b42e <__aeabi_ddiv+0x55a>
    b064:	4013      	ands	r3, r2
    b066:	469c      	mov	ip, r3
    b068:	2300      	movs	r3, #0
    b06a:	2400      	movs	r4, #0
    b06c:	2200      	movs	r2, #0
    b06e:	4698      	mov	r8, r3
    b070:	2100      	movs	r1, #0
    b072:	0312      	lsls	r2, r2, #12
    b074:	0b13      	lsrs	r3, r2, #12
    b076:	0d0a      	lsrs	r2, r1, #20
    b078:	0512      	lsls	r2, r2, #20
    b07a:	431a      	orrs	r2, r3
    b07c:	0523      	lsls	r3, r4, #20
    b07e:	4c12      	ldr	r4, [pc, #72]	; (b0c8 <__aeabi_ddiv+0x1f4>)
    b080:	4640      	mov	r0, r8
    b082:	4022      	ands	r2, r4
    b084:	4313      	orrs	r3, r2
    b086:	4662      	mov	r2, ip
    b088:	005b      	lsls	r3, r3, #1
    b08a:	07d2      	lsls	r2, r2, #31
    b08c:	085b      	lsrs	r3, r3, #1
    b08e:	4313      	orrs	r3, r2
    b090:	0019      	movs	r1, r3
    b092:	b007      	add	sp, #28
    b094:	bc3c      	pop	{r2, r3, r4, r5}
    b096:	4690      	mov	r8, r2
    b098:	4699      	mov	r9, r3
    b09a:	46a2      	mov	sl, r4
    b09c:	46ab      	mov	fp, r5
    b09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0a0:	2300      	movs	r3, #0
    b0a2:	2280      	movs	r2, #128	; 0x80
    b0a4:	469c      	mov	ip, r3
    b0a6:	0312      	lsls	r2, r2, #12
    b0a8:	4698      	mov	r8, r3
    b0aa:	4c03      	ldr	r4, [pc, #12]	; (b0b8 <__aeabi_ddiv+0x1e4>)
    b0ac:	e7e0      	b.n	b070 <__aeabi_ddiv+0x19c>
    b0ae:	2300      	movs	r3, #0
    b0b0:	4c01      	ldr	r4, [pc, #4]	; (b0b8 <__aeabi_ddiv+0x1e4>)
    b0b2:	2200      	movs	r2, #0
    b0b4:	4698      	mov	r8, r3
    b0b6:	e7db      	b.n	b070 <__aeabi_ddiv+0x19c>
    b0b8:	000007ff 	.word	0x000007ff
    b0bc:	fffffc01 	.word	0xfffffc01
    b0c0:	0000c8bc 	.word	0x0000c8bc
    b0c4:	fffffc0d 	.word	0xfffffc0d
    b0c8:	800fffff 	.word	0x800fffff
    b0cc:	45d9      	cmp	r9, fp
    b0ce:	d900      	bls.n	b0d2 <__aeabi_ddiv+0x1fe>
    b0d0:	e139      	b.n	b346 <__aeabi_ddiv+0x472>
    b0d2:	d100      	bne.n	b0d6 <__aeabi_ddiv+0x202>
    b0d4:	e134      	b.n	b340 <__aeabi_ddiv+0x46c>
    b0d6:	2300      	movs	r3, #0
    b0d8:	4646      	mov	r6, r8
    b0da:	464d      	mov	r5, r9
    b0dc:	469a      	mov	sl, r3
    b0de:	3c01      	subs	r4, #1
    b0e0:	465b      	mov	r3, fp
    b0e2:	0e0a      	lsrs	r2, r1, #24
    b0e4:	021b      	lsls	r3, r3, #8
    b0e6:	431a      	orrs	r2, r3
    b0e8:	020b      	lsls	r3, r1, #8
    b0ea:	0c17      	lsrs	r7, r2, #16
    b0ec:	9303      	str	r3, [sp, #12]
    b0ee:	0413      	lsls	r3, r2, #16
    b0f0:	0c1b      	lsrs	r3, r3, #16
    b0f2:	0039      	movs	r1, r7
    b0f4:	0028      	movs	r0, r5
    b0f6:	4690      	mov	r8, r2
    b0f8:	9301      	str	r3, [sp, #4]
    b0fa:	f7ff fdfb 	bl	acf4 <__udivsi3>
    b0fe:	0002      	movs	r2, r0
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	4683      	mov	fp, r0
    b104:	435a      	muls	r2, r3
    b106:	0028      	movs	r0, r5
    b108:	0039      	movs	r1, r7
    b10a:	4691      	mov	r9, r2
    b10c:	f7ff fe78 	bl	ae00 <__aeabi_uidivmod>
    b110:	0c35      	lsrs	r5, r6, #16
    b112:	0409      	lsls	r1, r1, #16
    b114:	430d      	orrs	r5, r1
    b116:	45a9      	cmp	r9, r5
    b118:	d90d      	bls.n	b136 <__aeabi_ddiv+0x262>
    b11a:	465b      	mov	r3, fp
    b11c:	4445      	add	r5, r8
    b11e:	3b01      	subs	r3, #1
    b120:	45a8      	cmp	r8, r5
    b122:	d900      	bls.n	b126 <__aeabi_ddiv+0x252>
    b124:	e13a      	b.n	b39c <__aeabi_ddiv+0x4c8>
    b126:	45a9      	cmp	r9, r5
    b128:	d800      	bhi.n	b12c <__aeabi_ddiv+0x258>
    b12a:	e137      	b.n	b39c <__aeabi_ddiv+0x4c8>
    b12c:	2302      	movs	r3, #2
    b12e:	425b      	negs	r3, r3
    b130:	469c      	mov	ip, r3
    b132:	4445      	add	r5, r8
    b134:	44e3      	add	fp, ip
    b136:	464b      	mov	r3, r9
    b138:	1aeb      	subs	r3, r5, r3
    b13a:	0039      	movs	r1, r7
    b13c:	0018      	movs	r0, r3
    b13e:	9304      	str	r3, [sp, #16]
    b140:	f7ff fdd8 	bl	acf4 <__udivsi3>
    b144:	9b01      	ldr	r3, [sp, #4]
    b146:	0005      	movs	r5, r0
    b148:	4343      	muls	r3, r0
    b14a:	0039      	movs	r1, r7
    b14c:	9804      	ldr	r0, [sp, #16]
    b14e:	4699      	mov	r9, r3
    b150:	f7ff fe56 	bl	ae00 <__aeabi_uidivmod>
    b154:	0433      	lsls	r3, r6, #16
    b156:	0409      	lsls	r1, r1, #16
    b158:	0c1b      	lsrs	r3, r3, #16
    b15a:	430b      	orrs	r3, r1
    b15c:	4599      	cmp	r9, r3
    b15e:	d909      	bls.n	b174 <__aeabi_ddiv+0x2a0>
    b160:	4443      	add	r3, r8
    b162:	1e6a      	subs	r2, r5, #1
    b164:	4598      	cmp	r8, r3
    b166:	d900      	bls.n	b16a <__aeabi_ddiv+0x296>
    b168:	e11a      	b.n	b3a0 <__aeabi_ddiv+0x4cc>
    b16a:	4599      	cmp	r9, r3
    b16c:	d800      	bhi.n	b170 <__aeabi_ddiv+0x29c>
    b16e:	e117      	b.n	b3a0 <__aeabi_ddiv+0x4cc>
    b170:	3d02      	subs	r5, #2
    b172:	4443      	add	r3, r8
    b174:	464a      	mov	r2, r9
    b176:	1a9b      	subs	r3, r3, r2
    b178:	465a      	mov	r2, fp
    b17a:	0412      	lsls	r2, r2, #16
    b17c:	432a      	orrs	r2, r5
    b17e:	9903      	ldr	r1, [sp, #12]
    b180:	4693      	mov	fp, r2
    b182:	0c10      	lsrs	r0, r2, #16
    b184:	0c0a      	lsrs	r2, r1, #16
    b186:	4691      	mov	r9, r2
    b188:	0409      	lsls	r1, r1, #16
    b18a:	465a      	mov	r2, fp
    b18c:	0c09      	lsrs	r1, r1, #16
    b18e:	464e      	mov	r6, r9
    b190:	000d      	movs	r5, r1
    b192:	0412      	lsls	r2, r2, #16
    b194:	0c12      	lsrs	r2, r2, #16
    b196:	4345      	muls	r5, r0
    b198:	9105      	str	r1, [sp, #20]
    b19a:	4351      	muls	r1, r2
    b19c:	4372      	muls	r2, r6
    b19e:	4370      	muls	r0, r6
    b1a0:	1952      	adds	r2, r2, r5
    b1a2:	0c0e      	lsrs	r6, r1, #16
    b1a4:	18b2      	adds	r2, r6, r2
    b1a6:	4295      	cmp	r5, r2
    b1a8:	d903      	bls.n	b1b2 <__aeabi_ddiv+0x2de>
    b1aa:	2580      	movs	r5, #128	; 0x80
    b1ac:	026d      	lsls	r5, r5, #9
    b1ae:	46ac      	mov	ip, r5
    b1b0:	4460      	add	r0, ip
    b1b2:	0c15      	lsrs	r5, r2, #16
    b1b4:	0409      	lsls	r1, r1, #16
    b1b6:	0412      	lsls	r2, r2, #16
    b1b8:	0c09      	lsrs	r1, r1, #16
    b1ba:	1828      	adds	r0, r5, r0
    b1bc:	1852      	adds	r2, r2, r1
    b1be:	4283      	cmp	r3, r0
    b1c0:	d200      	bcs.n	b1c4 <__aeabi_ddiv+0x2f0>
    b1c2:	e0ce      	b.n	b362 <__aeabi_ddiv+0x48e>
    b1c4:	d100      	bne.n	b1c8 <__aeabi_ddiv+0x2f4>
    b1c6:	e0c8      	b.n	b35a <__aeabi_ddiv+0x486>
    b1c8:	1a1d      	subs	r5, r3, r0
    b1ca:	4653      	mov	r3, sl
    b1cc:	1a9e      	subs	r6, r3, r2
    b1ce:	45b2      	cmp	sl, r6
    b1d0:	4192      	sbcs	r2, r2
    b1d2:	4252      	negs	r2, r2
    b1d4:	1aab      	subs	r3, r5, r2
    b1d6:	469a      	mov	sl, r3
    b1d8:	4598      	cmp	r8, r3
    b1da:	d100      	bne.n	b1de <__aeabi_ddiv+0x30a>
    b1dc:	e117      	b.n	b40e <__aeabi_ddiv+0x53a>
    b1de:	0039      	movs	r1, r7
    b1e0:	0018      	movs	r0, r3
    b1e2:	f7ff fd87 	bl	acf4 <__udivsi3>
    b1e6:	9b01      	ldr	r3, [sp, #4]
    b1e8:	0005      	movs	r5, r0
    b1ea:	4343      	muls	r3, r0
    b1ec:	0039      	movs	r1, r7
    b1ee:	4650      	mov	r0, sl
    b1f0:	9304      	str	r3, [sp, #16]
    b1f2:	f7ff fe05 	bl	ae00 <__aeabi_uidivmod>
    b1f6:	9804      	ldr	r0, [sp, #16]
    b1f8:	040b      	lsls	r3, r1, #16
    b1fa:	0c31      	lsrs	r1, r6, #16
    b1fc:	4319      	orrs	r1, r3
    b1fe:	4288      	cmp	r0, r1
    b200:	d909      	bls.n	b216 <__aeabi_ddiv+0x342>
    b202:	4441      	add	r1, r8
    b204:	1e6b      	subs	r3, r5, #1
    b206:	4588      	cmp	r8, r1
    b208:	d900      	bls.n	b20c <__aeabi_ddiv+0x338>
    b20a:	e107      	b.n	b41c <__aeabi_ddiv+0x548>
    b20c:	4288      	cmp	r0, r1
    b20e:	d800      	bhi.n	b212 <__aeabi_ddiv+0x33e>
    b210:	e104      	b.n	b41c <__aeabi_ddiv+0x548>
    b212:	3d02      	subs	r5, #2
    b214:	4441      	add	r1, r8
    b216:	9b04      	ldr	r3, [sp, #16]
    b218:	1acb      	subs	r3, r1, r3
    b21a:	0018      	movs	r0, r3
    b21c:	0039      	movs	r1, r7
    b21e:	9304      	str	r3, [sp, #16]
    b220:	f7ff fd68 	bl	acf4 <__udivsi3>
    b224:	9b01      	ldr	r3, [sp, #4]
    b226:	4682      	mov	sl, r0
    b228:	4343      	muls	r3, r0
    b22a:	0039      	movs	r1, r7
    b22c:	9804      	ldr	r0, [sp, #16]
    b22e:	9301      	str	r3, [sp, #4]
    b230:	f7ff fde6 	bl	ae00 <__aeabi_uidivmod>
    b234:	9801      	ldr	r0, [sp, #4]
    b236:	040b      	lsls	r3, r1, #16
    b238:	0431      	lsls	r1, r6, #16
    b23a:	0c09      	lsrs	r1, r1, #16
    b23c:	4319      	orrs	r1, r3
    b23e:	4288      	cmp	r0, r1
    b240:	d90d      	bls.n	b25e <__aeabi_ddiv+0x38a>
    b242:	4653      	mov	r3, sl
    b244:	4441      	add	r1, r8
    b246:	3b01      	subs	r3, #1
    b248:	4588      	cmp	r8, r1
    b24a:	d900      	bls.n	b24e <__aeabi_ddiv+0x37a>
    b24c:	e0e8      	b.n	b420 <__aeabi_ddiv+0x54c>
    b24e:	4288      	cmp	r0, r1
    b250:	d800      	bhi.n	b254 <__aeabi_ddiv+0x380>
    b252:	e0e5      	b.n	b420 <__aeabi_ddiv+0x54c>
    b254:	2302      	movs	r3, #2
    b256:	425b      	negs	r3, r3
    b258:	469c      	mov	ip, r3
    b25a:	4441      	add	r1, r8
    b25c:	44e2      	add	sl, ip
    b25e:	9b01      	ldr	r3, [sp, #4]
    b260:	042d      	lsls	r5, r5, #16
    b262:	1ace      	subs	r6, r1, r3
    b264:	4651      	mov	r1, sl
    b266:	4329      	orrs	r1, r5
    b268:	9d05      	ldr	r5, [sp, #20]
    b26a:	464f      	mov	r7, r9
    b26c:	002a      	movs	r2, r5
    b26e:	040b      	lsls	r3, r1, #16
    b270:	0c08      	lsrs	r0, r1, #16
    b272:	0c1b      	lsrs	r3, r3, #16
    b274:	435a      	muls	r2, r3
    b276:	4345      	muls	r5, r0
    b278:	437b      	muls	r3, r7
    b27a:	4378      	muls	r0, r7
    b27c:	195b      	adds	r3, r3, r5
    b27e:	0c17      	lsrs	r7, r2, #16
    b280:	18fb      	adds	r3, r7, r3
    b282:	429d      	cmp	r5, r3
    b284:	d903      	bls.n	b28e <__aeabi_ddiv+0x3ba>
    b286:	2580      	movs	r5, #128	; 0x80
    b288:	026d      	lsls	r5, r5, #9
    b28a:	46ac      	mov	ip, r5
    b28c:	4460      	add	r0, ip
    b28e:	0c1d      	lsrs	r5, r3, #16
    b290:	0412      	lsls	r2, r2, #16
    b292:	041b      	lsls	r3, r3, #16
    b294:	0c12      	lsrs	r2, r2, #16
    b296:	1828      	adds	r0, r5, r0
    b298:	189b      	adds	r3, r3, r2
    b29a:	4286      	cmp	r6, r0
    b29c:	d200      	bcs.n	b2a0 <__aeabi_ddiv+0x3cc>
    b29e:	e093      	b.n	b3c8 <__aeabi_ddiv+0x4f4>
    b2a0:	d100      	bne.n	b2a4 <__aeabi_ddiv+0x3d0>
    b2a2:	e08e      	b.n	b3c2 <__aeabi_ddiv+0x4ee>
    b2a4:	2301      	movs	r3, #1
    b2a6:	4319      	orrs	r1, r3
    b2a8:	4ba0      	ldr	r3, [pc, #640]	; (b52c <__aeabi_ddiv+0x658>)
    b2aa:	18e3      	adds	r3, r4, r3
    b2ac:	2b00      	cmp	r3, #0
    b2ae:	dc00      	bgt.n	b2b2 <__aeabi_ddiv+0x3de>
    b2b0:	e099      	b.n	b3e6 <__aeabi_ddiv+0x512>
    b2b2:	074a      	lsls	r2, r1, #29
    b2b4:	d000      	beq.n	b2b8 <__aeabi_ddiv+0x3e4>
    b2b6:	e09e      	b.n	b3f6 <__aeabi_ddiv+0x522>
    b2b8:	465a      	mov	r2, fp
    b2ba:	01d2      	lsls	r2, r2, #7
    b2bc:	d506      	bpl.n	b2cc <__aeabi_ddiv+0x3f8>
    b2be:	465a      	mov	r2, fp
    b2c0:	4b9b      	ldr	r3, [pc, #620]	; (b530 <__aeabi_ddiv+0x65c>)
    b2c2:	401a      	ands	r2, r3
    b2c4:	2380      	movs	r3, #128	; 0x80
    b2c6:	4693      	mov	fp, r2
    b2c8:	00db      	lsls	r3, r3, #3
    b2ca:	18e3      	adds	r3, r4, r3
    b2cc:	4a99      	ldr	r2, [pc, #612]	; (b534 <__aeabi_ddiv+0x660>)
    b2ce:	4293      	cmp	r3, r2
    b2d0:	dd68      	ble.n	b3a4 <__aeabi_ddiv+0x4d0>
    b2d2:	2301      	movs	r3, #1
    b2d4:	9a02      	ldr	r2, [sp, #8]
    b2d6:	4c98      	ldr	r4, [pc, #608]	; (b538 <__aeabi_ddiv+0x664>)
    b2d8:	401a      	ands	r2, r3
    b2da:	2300      	movs	r3, #0
    b2dc:	4694      	mov	ip, r2
    b2de:	4698      	mov	r8, r3
    b2e0:	2200      	movs	r2, #0
    b2e2:	e6c5      	b.n	b070 <__aeabi_ddiv+0x19c>
    b2e4:	2280      	movs	r2, #128	; 0x80
    b2e6:	464b      	mov	r3, r9
    b2e8:	0312      	lsls	r2, r2, #12
    b2ea:	4213      	tst	r3, r2
    b2ec:	d00a      	beq.n	b304 <__aeabi_ddiv+0x430>
    b2ee:	465b      	mov	r3, fp
    b2f0:	4213      	tst	r3, r2
    b2f2:	d106      	bne.n	b302 <__aeabi_ddiv+0x42e>
    b2f4:	431a      	orrs	r2, r3
    b2f6:	0312      	lsls	r2, r2, #12
    b2f8:	0b12      	lsrs	r2, r2, #12
    b2fa:	46ac      	mov	ip, r5
    b2fc:	4688      	mov	r8, r1
    b2fe:	4c8e      	ldr	r4, [pc, #568]	; (b538 <__aeabi_ddiv+0x664>)
    b300:	e6b6      	b.n	b070 <__aeabi_ddiv+0x19c>
    b302:	464b      	mov	r3, r9
    b304:	431a      	orrs	r2, r3
    b306:	0312      	lsls	r2, r2, #12
    b308:	0b12      	lsrs	r2, r2, #12
    b30a:	46bc      	mov	ip, r7
    b30c:	4c8a      	ldr	r4, [pc, #552]	; (b538 <__aeabi_ddiv+0x664>)
    b30e:	e6af      	b.n	b070 <__aeabi_ddiv+0x19c>
    b310:	0003      	movs	r3, r0
    b312:	465a      	mov	r2, fp
    b314:	3b28      	subs	r3, #40	; 0x28
    b316:	409a      	lsls	r2, r3
    b318:	2300      	movs	r3, #0
    b31a:	4691      	mov	r9, r2
    b31c:	4698      	mov	r8, r3
    b31e:	e657      	b.n	afd0 <__aeabi_ddiv+0xfc>
    b320:	4658      	mov	r0, fp
    b322:	f000 ff9d 	bl	c260 <__clzsi2>
    b326:	3020      	adds	r0, #32
    b328:	e640      	b.n	afac <__aeabi_ddiv+0xd8>
    b32a:	0003      	movs	r3, r0
    b32c:	4652      	mov	r2, sl
    b32e:	3b28      	subs	r3, #40	; 0x28
    b330:	409a      	lsls	r2, r3
    b332:	2100      	movs	r1, #0
    b334:	4693      	mov	fp, r2
    b336:	e677      	b.n	b028 <__aeabi_ddiv+0x154>
    b338:	f000 ff92 	bl	c260 <__clzsi2>
    b33c:	3020      	adds	r0, #32
    b33e:	e65f      	b.n	b000 <__aeabi_ddiv+0x12c>
    b340:	4588      	cmp	r8, r1
    b342:	d200      	bcs.n	b346 <__aeabi_ddiv+0x472>
    b344:	e6c7      	b.n	b0d6 <__aeabi_ddiv+0x202>
    b346:	464b      	mov	r3, r9
    b348:	07de      	lsls	r6, r3, #31
    b34a:	085d      	lsrs	r5, r3, #1
    b34c:	4643      	mov	r3, r8
    b34e:	085b      	lsrs	r3, r3, #1
    b350:	431e      	orrs	r6, r3
    b352:	4643      	mov	r3, r8
    b354:	07db      	lsls	r3, r3, #31
    b356:	469a      	mov	sl, r3
    b358:	e6c2      	b.n	b0e0 <__aeabi_ddiv+0x20c>
    b35a:	2500      	movs	r5, #0
    b35c:	4592      	cmp	sl, r2
    b35e:	d300      	bcc.n	b362 <__aeabi_ddiv+0x48e>
    b360:	e733      	b.n	b1ca <__aeabi_ddiv+0x2f6>
    b362:	9e03      	ldr	r6, [sp, #12]
    b364:	4659      	mov	r1, fp
    b366:	46b4      	mov	ip, r6
    b368:	44e2      	add	sl, ip
    b36a:	45b2      	cmp	sl, r6
    b36c:	41ad      	sbcs	r5, r5
    b36e:	426d      	negs	r5, r5
    b370:	4445      	add	r5, r8
    b372:	18eb      	adds	r3, r5, r3
    b374:	3901      	subs	r1, #1
    b376:	4598      	cmp	r8, r3
    b378:	d207      	bcs.n	b38a <__aeabi_ddiv+0x4b6>
    b37a:	4298      	cmp	r0, r3
    b37c:	d900      	bls.n	b380 <__aeabi_ddiv+0x4ac>
    b37e:	e07f      	b.n	b480 <__aeabi_ddiv+0x5ac>
    b380:	d100      	bne.n	b384 <__aeabi_ddiv+0x4b0>
    b382:	e0bc      	b.n	b4fe <__aeabi_ddiv+0x62a>
    b384:	1a1d      	subs	r5, r3, r0
    b386:	468b      	mov	fp, r1
    b388:	e71f      	b.n	b1ca <__aeabi_ddiv+0x2f6>
    b38a:	4598      	cmp	r8, r3
    b38c:	d1fa      	bne.n	b384 <__aeabi_ddiv+0x4b0>
    b38e:	9d03      	ldr	r5, [sp, #12]
    b390:	4555      	cmp	r5, sl
    b392:	d9f2      	bls.n	b37a <__aeabi_ddiv+0x4a6>
    b394:	4643      	mov	r3, r8
    b396:	468b      	mov	fp, r1
    b398:	1a1d      	subs	r5, r3, r0
    b39a:	e716      	b.n	b1ca <__aeabi_ddiv+0x2f6>
    b39c:	469b      	mov	fp, r3
    b39e:	e6ca      	b.n	b136 <__aeabi_ddiv+0x262>
    b3a0:	0015      	movs	r5, r2
    b3a2:	e6e7      	b.n	b174 <__aeabi_ddiv+0x2a0>
    b3a4:	465a      	mov	r2, fp
    b3a6:	08c9      	lsrs	r1, r1, #3
    b3a8:	0752      	lsls	r2, r2, #29
    b3aa:	430a      	orrs	r2, r1
    b3ac:	055b      	lsls	r3, r3, #21
    b3ae:	4690      	mov	r8, r2
    b3b0:	0d5c      	lsrs	r4, r3, #21
    b3b2:	465a      	mov	r2, fp
    b3b4:	2301      	movs	r3, #1
    b3b6:	9902      	ldr	r1, [sp, #8]
    b3b8:	0252      	lsls	r2, r2, #9
    b3ba:	4019      	ands	r1, r3
    b3bc:	0b12      	lsrs	r2, r2, #12
    b3be:	468c      	mov	ip, r1
    b3c0:	e656      	b.n	b070 <__aeabi_ddiv+0x19c>
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	d100      	bne.n	b3c8 <__aeabi_ddiv+0x4f4>
    b3c6:	e76f      	b.n	b2a8 <__aeabi_ddiv+0x3d4>
    b3c8:	4446      	add	r6, r8
    b3ca:	1e4a      	subs	r2, r1, #1
    b3cc:	45b0      	cmp	r8, r6
    b3ce:	d929      	bls.n	b424 <__aeabi_ddiv+0x550>
    b3d0:	0011      	movs	r1, r2
    b3d2:	4286      	cmp	r6, r0
    b3d4:	d000      	beq.n	b3d8 <__aeabi_ddiv+0x504>
    b3d6:	e765      	b.n	b2a4 <__aeabi_ddiv+0x3d0>
    b3d8:	9a03      	ldr	r2, [sp, #12]
    b3da:	4293      	cmp	r3, r2
    b3dc:	d000      	beq.n	b3e0 <__aeabi_ddiv+0x50c>
    b3de:	e761      	b.n	b2a4 <__aeabi_ddiv+0x3d0>
    b3e0:	e762      	b.n	b2a8 <__aeabi_ddiv+0x3d4>
    b3e2:	2101      	movs	r1, #1
    b3e4:	4249      	negs	r1, r1
    b3e6:	2001      	movs	r0, #1
    b3e8:	1ac2      	subs	r2, r0, r3
    b3ea:	2a38      	cmp	r2, #56	; 0x38
    b3ec:	dd21      	ble.n	b432 <__aeabi_ddiv+0x55e>
    b3ee:	9b02      	ldr	r3, [sp, #8]
    b3f0:	4003      	ands	r3, r0
    b3f2:	469c      	mov	ip, r3
    b3f4:	e638      	b.n	b068 <__aeabi_ddiv+0x194>
    b3f6:	220f      	movs	r2, #15
    b3f8:	400a      	ands	r2, r1
    b3fa:	2a04      	cmp	r2, #4
    b3fc:	d100      	bne.n	b400 <__aeabi_ddiv+0x52c>
    b3fe:	e75b      	b.n	b2b8 <__aeabi_ddiv+0x3e4>
    b400:	000a      	movs	r2, r1
    b402:	1d11      	adds	r1, r2, #4
    b404:	4291      	cmp	r1, r2
    b406:	4192      	sbcs	r2, r2
    b408:	4252      	negs	r2, r2
    b40a:	4493      	add	fp, r2
    b40c:	e754      	b.n	b2b8 <__aeabi_ddiv+0x3e4>
    b40e:	4b47      	ldr	r3, [pc, #284]	; (b52c <__aeabi_ddiv+0x658>)
    b410:	18e3      	adds	r3, r4, r3
    b412:	2b00      	cmp	r3, #0
    b414:	dde5      	ble.n	b3e2 <__aeabi_ddiv+0x50e>
    b416:	2201      	movs	r2, #1
    b418:	4252      	negs	r2, r2
    b41a:	e7f2      	b.n	b402 <__aeabi_ddiv+0x52e>
    b41c:	001d      	movs	r5, r3
    b41e:	e6fa      	b.n	b216 <__aeabi_ddiv+0x342>
    b420:	469a      	mov	sl, r3
    b422:	e71c      	b.n	b25e <__aeabi_ddiv+0x38a>
    b424:	42b0      	cmp	r0, r6
    b426:	d839      	bhi.n	b49c <__aeabi_ddiv+0x5c8>
    b428:	d06e      	beq.n	b508 <__aeabi_ddiv+0x634>
    b42a:	0011      	movs	r1, r2
    b42c:	e73a      	b.n	b2a4 <__aeabi_ddiv+0x3d0>
    b42e:	9302      	str	r3, [sp, #8]
    b430:	e73a      	b.n	b2a8 <__aeabi_ddiv+0x3d4>
    b432:	2a1f      	cmp	r2, #31
    b434:	dc3c      	bgt.n	b4b0 <__aeabi_ddiv+0x5dc>
    b436:	2320      	movs	r3, #32
    b438:	1a9b      	subs	r3, r3, r2
    b43a:	000c      	movs	r4, r1
    b43c:	4658      	mov	r0, fp
    b43e:	4099      	lsls	r1, r3
    b440:	4098      	lsls	r0, r3
    b442:	1e4b      	subs	r3, r1, #1
    b444:	4199      	sbcs	r1, r3
    b446:	465b      	mov	r3, fp
    b448:	40d4      	lsrs	r4, r2
    b44a:	40d3      	lsrs	r3, r2
    b44c:	4320      	orrs	r0, r4
    b44e:	4308      	orrs	r0, r1
    b450:	001a      	movs	r2, r3
    b452:	0743      	lsls	r3, r0, #29
    b454:	d009      	beq.n	b46a <__aeabi_ddiv+0x596>
    b456:	230f      	movs	r3, #15
    b458:	4003      	ands	r3, r0
    b45a:	2b04      	cmp	r3, #4
    b45c:	d005      	beq.n	b46a <__aeabi_ddiv+0x596>
    b45e:	0001      	movs	r1, r0
    b460:	1d08      	adds	r0, r1, #4
    b462:	4288      	cmp	r0, r1
    b464:	419b      	sbcs	r3, r3
    b466:	425b      	negs	r3, r3
    b468:	18d2      	adds	r2, r2, r3
    b46a:	0213      	lsls	r3, r2, #8
    b46c:	d53a      	bpl.n	b4e4 <__aeabi_ddiv+0x610>
    b46e:	2301      	movs	r3, #1
    b470:	9a02      	ldr	r2, [sp, #8]
    b472:	2401      	movs	r4, #1
    b474:	401a      	ands	r2, r3
    b476:	2300      	movs	r3, #0
    b478:	4694      	mov	ip, r2
    b47a:	4698      	mov	r8, r3
    b47c:	2200      	movs	r2, #0
    b47e:	e5f7      	b.n	b070 <__aeabi_ddiv+0x19c>
    b480:	2102      	movs	r1, #2
    b482:	4249      	negs	r1, r1
    b484:	468c      	mov	ip, r1
    b486:	9d03      	ldr	r5, [sp, #12]
    b488:	44e3      	add	fp, ip
    b48a:	46ac      	mov	ip, r5
    b48c:	44e2      	add	sl, ip
    b48e:	45aa      	cmp	sl, r5
    b490:	41ad      	sbcs	r5, r5
    b492:	426d      	negs	r5, r5
    b494:	4445      	add	r5, r8
    b496:	18ed      	adds	r5, r5, r3
    b498:	1a2d      	subs	r5, r5, r0
    b49a:	e696      	b.n	b1ca <__aeabi_ddiv+0x2f6>
    b49c:	1e8a      	subs	r2, r1, #2
    b49e:	9903      	ldr	r1, [sp, #12]
    b4a0:	004d      	lsls	r5, r1, #1
    b4a2:	428d      	cmp	r5, r1
    b4a4:	4189      	sbcs	r1, r1
    b4a6:	4249      	negs	r1, r1
    b4a8:	4441      	add	r1, r8
    b4aa:	1876      	adds	r6, r6, r1
    b4ac:	9503      	str	r5, [sp, #12]
    b4ae:	e78f      	b.n	b3d0 <__aeabi_ddiv+0x4fc>
    b4b0:	201f      	movs	r0, #31
    b4b2:	4240      	negs	r0, r0
    b4b4:	1ac3      	subs	r3, r0, r3
    b4b6:	4658      	mov	r0, fp
    b4b8:	40d8      	lsrs	r0, r3
    b4ba:	0003      	movs	r3, r0
    b4bc:	2a20      	cmp	r2, #32
    b4be:	d028      	beq.n	b512 <__aeabi_ddiv+0x63e>
    b4c0:	2040      	movs	r0, #64	; 0x40
    b4c2:	465d      	mov	r5, fp
    b4c4:	1a82      	subs	r2, r0, r2
    b4c6:	4095      	lsls	r5, r2
    b4c8:	4329      	orrs	r1, r5
    b4ca:	1e4a      	subs	r2, r1, #1
    b4cc:	4191      	sbcs	r1, r2
    b4ce:	4319      	orrs	r1, r3
    b4d0:	2307      	movs	r3, #7
    b4d2:	2200      	movs	r2, #0
    b4d4:	400b      	ands	r3, r1
    b4d6:	d009      	beq.n	b4ec <__aeabi_ddiv+0x618>
    b4d8:	230f      	movs	r3, #15
    b4da:	2200      	movs	r2, #0
    b4dc:	400b      	ands	r3, r1
    b4de:	0008      	movs	r0, r1
    b4e0:	2b04      	cmp	r3, #4
    b4e2:	d1bd      	bne.n	b460 <__aeabi_ddiv+0x58c>
    b4e4:	0001      	movs	r1, r0
    b4e6:	0753      	lsls	r3, r2, #29
    b4e8:	0252      	lsls	r2, r2, #9
    b4ea:	0b12      	lsrs	r2, r2, #12
    b4ec:	08c9      	lsrs	r1, r1, #3
    b4ee:	4319      	orrs	r1, r3
    b4f0:	2301      	movs	r3, #1
    b4f2:	4688      	mov	r8, r1
    b4f4:	9902      	ldr	r1, [sp, #8]
    b4f6:	2400      	movs	r4, #0
    b4f8:	4019      	ands	r1, r3
    b4fa:	468c      	mov	ip, r1
    b4fc:	e5b8      	b.n	b070 <__aeabi_ddiv+0x19c>
    b4fe:	4552      	cmp	r2, sl
    b500:	d8be      	bhi.n	b480 <__aeabi_ddiv+0x5ac>
    b502:	468b      	mov	fp, r1
    b504:	2500      	movs	r5, #0
    b506:	e660      	b.n	b1ca <__aeabi_ddiv+0x2f6>
    b508:	9d03      	ldr	r5, [sp, #12]
    b50a:	429d      	cmp	r5, r3
    b50c:	d3c6      	bcc.n	b49c <__aeabi_ddiv+0x5c8>
    b50e:	0011      	movs	r1, r2
    b510:	e762      	b.n	b3d8 <__aeabi_ddiv+0x504>
    b512:	2500      	movs	r5, #0
    b514:	e7d8      	b.n	b4c8 <__aeabi_ddiv+0x5f4>
    b516:	2280      	movs	r2, #128	; 0x80
    b518:	465b      	mov	r3, fp
    b51a:	0312      	lsls	r2, r2, #12
    b51c:	431a      	orrs	r2, r3
    b51e:	9b01      	ldr	r3, [sp, #4]
    b520:	0312      	lsls	r2, r2, #12
    b522:	0b12      	lsrs	r2, r2, #12
    b524:	469c      	mov	ip, r3
    b526:	4688      	mov	r8, r1
    b528:	4c03      	ldr	r4, [pc, #12]	; (b538 <__aeabi_ddiv+0x664>)
    b52a:	e5a1      	b.n	b070 <__aeabi_ddiv+0x19c>
    b52c:	000003ff 	.word	0x000003ff
    b530:	feffffff 	.word	0xfeffffff
    b534:	000007fe 	.word	0x000007fe
    b538:	000007ff 	.word	0x000007ff

0000b53c <__aeabi_dmul>:
    b53c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b53e:	4657      	mov	r7, sl
    b540:	4645      	mov	r5, r8
    b542:	46de      	mov	lr, fp
    b544:	464e      	mov	r6, r9
    b546:	b5e0      	push	{r5, r6, r7, lr}
    b548:	030c      	lsls	r4, r1, #12
    b54a:	4698      	mov	r8, r3
    b54c:	004e      	lsls	r6, r1, #1
    b54e:	0b23      	lsrs	r3, r4, #12
    b550:	b087      	sub	sp, #28
    b552:	0007      	movs	r7, r0
    b554:	4692      	mov	sl, r2
    b556:	469b      	mov	fp, r3
    b558:	0d76      	lsrs	r6, r6, #21
    b55a:	0fcd      	lsrs	r5, r1, #31
    b55c:	2e00      	cmp	r6, #0
    b55e:	d06b      	beq.n	b638 <__aeabi_dmul+0xfc>
    b560:	4b6d      	ldr	r3, [pc, #436]	; (b718 <__aeabi_dmul+0x1dc>)
    b562:	429e      	cmp	r6, r3
    b564:	d035      	beq.n	b5d2 <__aeabi_dmul+0x96>
    b566:	2480      	movs	r4, #128	; 0x80
    b568:	465b      	mov	r3, fp
    b56a:	0f42      	lsrs	r2, r0, #29
    b56c:	0424      	lsls	r4, r4, #16
    b56e:	00db      	lsls	r3, r3, #3
    b570:	4314      	orrs	r4, r2
    b572:	431c      	orrs	r4, r3
    b574:	00c3      	lsls	r3, r0, #3
    b576:	4699      	mov	r9, r3
    b578:	4b68      	ldr	r3, [pc, #416]	; (b71c <__aeabi_dmul+0x1e0>)
    b57a:	46a3      	mov	fp, r4
    b57c:	469c      	mov	ip, r3
    b57e:	2300      	movs	r3, #0
    b580:	2700      	movs	r7, #0
    b582:	4466      	add	r6, ip
    b584:	9302      	str	r3, [sp, #8]
    b586:	4643      	mov	r3, r8
    b588:	031c      	lsls	r4, r3, #12
    b58a:	005a      	lsls	r2, r3, #1
    b58c:	0fdb      	lsrs	r3, r3, #31
    b58e:	4650      	mov	r0, sl
    b590:	0b24      	lsrs	r4, r4, #12
    b592:	0d52      	lsrs	r2, r2, #21
    b594:	4698      	mov	r8, r3
    b596:	d100      	bne.n	b59a <__aeabi_dmul+0x5e>
    b598:	e076      	b.n	b688 <__aeabi_dmul+0x14c>
    b59a:	4b5f      	ldr	r3, [pc, #380]	; (b718 <__aeabi_dmul+0x1dc>)
    b59c:	429a      	cmp	r2, r3
    b59e:	d06d      	beq.n	b67c <__aeabi_dmul+0x140>
    b5a0:	2380      	movs	r3, #128	; 0x80
    b5a2:	0f41      	lsrs	r1, r0, #29
    b5a4:	041b      	lsls	r3, r3, #16
    b5a6:	430b      	orrs	r3, r1
    b5a8:	495c      	ldr	r1, [pc, #368]	; (b71c <__aeabi_dmul+0x1e0>)
    b5aa:	00e4      	lsls	r4, r4, #3
    b5ac:	468c      	mov	ip, r1
    b5ae:	431c      	orrs	r4, r3
    b5b0:	00c3      	lsls	r3, r0, #3
    b5b2:	2000      	movs	r0, #0
    b5b4:	4462      	add	r2, ip
    b5b6:	4641      	mov	r1, r8
    b5b8:	18b6      	adds	r6, r6, r2
    b5ba:	4069      	eors	r1, r5
    b5bc:	1c72      	adds	r2, r6, #1
    b5be:	9101      	str	r1, [sp, #4]
    b5c0:	4694      	mov	ip, r2
    b5c2:	4307      	orrs	r7, r0
    b5c4:	2f0f      	cmp	r7, #15
    b5c6:	d900      	bls.n	b5ca <__aeabi_dmul+0x8e>
    b5c8:	e0b0      	b.n	b72c <__aeabi_dmul+0x1f0>
    b5ca:	4a55      	ldr	r2, [pc, #340]	; (b720 <__aeabi_dmul+0x1e4>)
    b5cc:	00bf      	lsls	r7, r7, #2
    b5ce:	59d2      	ldr	r2, [r2, r7]
    b5d0:	4697      	mov	pc, r2
    b5d2:	465b      	mov	r3, fp
    b5d4:	4303      	orrs	r3, r0
    b5d6:	4699      	mov	r9, r3
    b5d8:	d000      	beq.n	b5dc <__aeabi_dmul+0xa0>
    b5da:	e087      	b.n	b6ec <__aeabi_dmul+0x1b0>
    b5dc:	2300      	movs	r3, #0
    b5de:	469b      	mov	fp, r3
    b5e0:	3302      	adds	r3, #2
    b5e2:	2708      	movs	r7, #8
    b5e4:	9302      	str	r3, [sp, #8]
    b5e6:	e7ce      	b.n	b586 <__aeabi_dmul+0x4a>
    b5e8:	4642      	mov	r2, r8
    b5ea:	9201      	str	r2, [sp, #4]
    b5ec:	2802      	cmp	r0, #2
    b5ee:	d067      	beq.n	b6c0 <__aeabi_dmul+0x184>
    b5f0:	2803      	cmp	r0, #3
    b5f2:	d100      	bne.n	b5f6 <__aeabi_dmul+0xba>
    b5f4:	e20e      	b.n	ba14 <__aeabi_dmul+0x4d8>
    b5f6:	2801      	cmp	r0, #1
    b5f8:	d000      	beq.n	b5fc <__aeabi_dmul+0xc0>
    b5fa:	e162      	b.n	b8c2 <__aeabi_dmul+0x386>
    b5fc:	2300      	movs	r3, #0
    b5fe:	2400      	movs	r4, #0
    b600:	2200      	movs	r2, #0
    b602:	4699      	mov	r9, r3
    b604:	9901      	ldr	r1, [sp, #4]
    b606:	4001      	ands	r1, r0
    b608:	b2cd      	uxtb	r5, r1
    b60a:	2100      	movs	r1, #0
    b60c:	0312      	lsls	r2, r2, #12
    b60e:	0d0b      	lsrs	r3, r1, #20
    b610:	0b12      	lsrs	r2, r2, #12
    b612:	051b      	lsls	r3, r3, #20
    b614:	4313      	orrs	r3, r2
    b616:	4a43      	ldr	r2, [pc, #268]	; (b724 <__aeabi_dmul+0x1e8>)
    b618:	0524      	lsls	r4, r4, #20
    b61a:	4013      	ands	r3, r2
    b61c:	431c      	orrs	r4, r3
    b61e:	0064      	lsls	r4, r4, #1
    b620:	07ed      	lsls	r5, r5, #31
    b622:	0864      	lsrs	r4, r4, #1
    b624:	432c      	orrs	r4, r5
    b626:	4648      	mov	r0, r9
    b628:	0021      	movs	r1, r4
    b62a:	b007      	add	sp, #28
    b62c:	bc3c      	pop	{r2, r3, r4, r5}
    b62e:	4690      	mov	r8, r2
    b630:	4699      	mov	r9, r3
    b632:	46a2      	mov	sl, r4
    b634:	46ab      	mov	fp, r5
    b636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b638:	4303      	orrs	r3, r0
    b63a:	4699      	mov	r9, r3
    b63c:	d04f      	beq.n	b6de <__aeabi_dmul+0x1a2>
    b63e:	465b      	mov	r3, fp
    b640:	2b00      	cmp	r3, #0
    b642:	d100      	bne.n	b646 <__aeabi_dmul+0x10a>
    b644:	e189      	b.n	b95a <__aeabi_dmul+0x41e>
    b646:	4658      	mov	r0, fp
    b648:	f000 fe0a 	bl	c260 <__clzsi2>
    b64c:	0003      	movs	r3, r0
    b64e:	3b0b      	subs	r3, #11
    b650:	2b1c      	cmp	r3, #28
    b652:	dd00      	ble.n	b656 <__aeabi_dmul+0x11a>
    b654:	e17a      	b.n	b94c <__aeabi_dmul+0x410>
    b656:	221d      	movs	r2, #29
    b658:	1ad3      	subs	r3, r2, r3
    b65a:	003a      	movs	r2, r7
    b65c:	0001      	movs	r1, r0
    b65e:	465c      	mov	r4, fp
    b660:	40da      	lsrs	r2, r3
    b662:	3908      	subs	r1, #8
    b664:	408c      	lsls	r4, r1
    b666:	0013      	movs	r3, r2
    b668:	408f      	lsls	r7, r1
    b66a:	4323      	orrs	r3, r4
    b66c:	469b      	mov	fp, r3
    b66e:	46b9      	mov	r9, r7
    b670:	2300      	movs	r3, #0
    b672:	4e2d      	ldr	r6, [pc, #180]	; (b728 <__aeabi_dmul+0x1ec>)
    b674:	2700      	movs	r7, #0
    b676:	1a36      	subs	r6, r6, r0
    b678:	9302      	str	r3, [sp, #8]
    b67a:	e784      	b.n	b586 <__aeabi_dmul+0x4a>
    b67c:	4653      	mov	r3, sl
    b67e:	4323      	orrs	r3, r4
    b680:	d12a      	bne.n	b6d8 <__aeabi_dmul+0x19c>
    b682:	2400      	movs	r4, #0
    b684:	2002      	movs	r0, #2
    b686:	e796      	b.n	b5b6 <__aeabi_dmul+0x7a>
    b688:	4653      	mov	r3, sl
    b68a:	4323      	orrs	r3, r4
    b68c:	d020      	beq.n	b6d0 <__aeabi_dmul+0x194>
    b68e:	2c00      	cmp	r4, #0
    b690:	d100      	bne.n	b694 <__aeabi_dmul+0x158>
    b692:	e157      	b.n	b944 <__aeabi_dmul+0x408>
    b694:	0020      	movs	r0, r4
    b696:	f000 fde3 	bl	c260 <__clzsi2>
    b69a:	0003      	movs	r3, r0
    b69c:	3b0b      	subs	r3, #11
    b69e:	2b1c      	cmp	r3, #28
    b6a0:	dd00      	ble.n	b6a4 <__aeabi_dmul+0x168>
    b6a2:	e149      	b.n	b938 <__aeabi_dmul+0x3fc>
    b6a4:	211d      	movs	r1, #29
    b6a6:	1acb      	subs	r3, r1, r3
    b6a8:	4651      	mov	r1, sl
    b6aa:	0002      	movs	r2, r0
    b6ac:	40d9      	lsrs	r1, r3
    b6ae:	4653      	mov	r3, sl
    b6b0:	3a08      	subs	r2, #8
    b6b2:	4094      	lsls	r4, r2
    b6b4:	4093      	lsls	r3, r2
    b6b6:	430c      	orrs	r4, r1
    b6b8:	4a1b      	ldr	r2, [pc, #108]	; (b728 <__aeabi_dmul+0x1ec>)
    b6ba:	1a12      	subs	r2, r2, r0
    b6bc:	2000      	movs	r0, #0
    b6be:	e77a      	b.n	b5b6 <__aeabi_dmul+0x7a>
    b6c0:	2501      	movs	r5, #1
    b6c2:	9b01      	ldr	r3, [sp, #4]
    b6c4:	4c14      	ldr	r4, [pc, #80]	; (b718 <__aeabi_dmul+0x1dc>)
    b6c6:	401d      	ands	r5, r3
    b6c8:	2300      	movs	r3, #0
    b6ca:	2200      	movs	r2, #0
    b6cc:	4699      	mov	r9, r3
    b6ce:	e79c      	b.n	b60a <__aeabi_dmul+0xce>
    b6d0:	2400      	movs	r4, #0
    b6d2:	2200      	movs	r2, #0
    b6d4:	2001      	movs	r0, #1
    b6d6:	e76e      	b.n	b5b6 <__aeabi_dmul+0x7a>
    b6d8:	4653      	mov	r3, sl
    b6da:	2003      	movs	r0, #3
    b6dc:	e76b      	b.n	b5b6 <__aeabi_dmul+0x7a>
    b6de:	2300      	movs	r3, #0
    b6e0:	469b      	mov	fp, r3
    b6e2:	3301      	adds	r3, #1
    b6e4:	2704      	movs	r7, #4
    b6e6:	2600      	movs	r6, #0
    b6e8:	9302      	str	r3, [sp, #8]
    b6ea:	e74c      	b.n	b586 <__aeabi_dmul+0x4a>
    b6ec:	2303      	movs	r3, #3
    b6ee:	4681      	mov	r9, r0
    b6f0:	270c      	movs	r7, #12
    b6f2:	9302      	str	r3, [sp, #8]
    b6f4:	e747      	b.n	b586 <__aeabi_dmul+0x4a>
    b6f6:	2280      	movs	r2, #128	; 0x80
    b6f8:	2300      	movs	r3, #0
    b6fa:	2500      	movs	r5, #0
    b6fc:	0312      	lsls	r2, r2, #12
    b6fe:	4699      	mov	r9, r3
    b700:	4c05      	ldr	r4, [pc, #20]	; (b718 <__aeabi_dmul+0x1dc>)
    b702:	e782      	b.n	b60a <__aeabi_dmul+0xce>
    b704:	465c      	mov	r4, fp
    b706:	464b      	mov	r3, r9
    b708:	9802      	ldr	r0, [sp, #8]
    b70a:	e76f      	b.n	b5ec <__aeabi_dmul+0xb0>
    b70c:	465c      	mov	r4, fp
    b70e:	464b      	mov	r3, r9
    b710:	9501      	str	r5, [sp, #4]
    b712:	9802      	ldr	r0, [sp, #8]
    b714:	e76a      	b.n	b5ec <__aeabi_dmul+0xb0>
    b716:	46c0      	nop			; (mov r8, r8)
    b718:	000007ff 	.word	0x000007ff
    b71c:	fffffc01 	.word	0xfffffc01
    b720:	0000c8fc 	.word	0x0000c8fc
    b724:	800fffff 	.word	0x800fffff
    b728:	fffffc0d 	.word	0xfffffc0d
    b72c:	464a      	mov	r2, r9
    b72e:	4649      	mov	r1, r9
    b730:	0c17      	lsrs	r7, r2, #16
    b732:	0c1a      	lsrs	r2, r3, #16
    b734:	041b      	lsls	r3, r3, #16
    b736:	0c1b      	lsrs	r3, r3, #16
    b738:	0408      	lsls	r0, r1, #16
    b73a:	0019      	movs	r1, r3
    b73c:	0c00      	lsrs	r0, r0, #16
    b73e:	4341      	muls	r1, r0
    b740:	0015      	movs	r5, r2
    b742:	4688      	mov	r8, r1
    b744:	0019      	movs	r1, r3
    b746:	437d      	muls	r5, r7
    b748:	4379      	muls	r1, r7
    b74a:	9503      	str	r5, [sp, #12]
    b74c:	4689      	mov	r9, r1
    b74e:	0029      	movs	r1, r5
    b750:	0015      	movs	r5, r2
    b752:	4345      	muls	r5, r0
    b754:	444d      	add	r5, r9
    b756:	9502      	str	r5, [sp, #8]
    b758:	4645      	mov	r5, r8
    b75a:	0c2d      	lsrs	r5, r5, #16
    b75c:	46aa      	mov	sl, r5
    b75e:	9d02      	ldr	r5, [sp, #8]
    b760:	4455      	add	r5, sl
    b762:	45a9      	cmp	r9, r5
    b764:	d906      	bls.n	b774 <__aeabi_dmul+0x238>
    b766:	468a      	mov	sl, r1
    b768:	2180      	movs	r1, #128	; 0x80
    b76a:	0249      	lsls	r1, r1, #9
    b76c:	4689      	mov	r9, r1
    b76e:	44ca      	add	sl, r9
    b770:	4651      	mov	r1, sl
    b772:	9103      	str	r1, [sp, #12]
    b774:	0c29      	lsrs	r1, r5, #16
    b776:	9104      	str	r1, [sp, #16]
    b778:	4641      	mov	r1, r8
    b77a:	0409      	lsls	r1, r1, #16
    b77c:	042d      	lsls	r5, r5, #16
    b77e:	0c09      	lsrs	r1, r1, #16
    b780:	4688      	mov	r8, r1
    b782:	0029      	movs	r1, r5
    b784:	0c25      	lsrs	r5, r4, #16
    b786:	0424      	lsls	r4, r4, #16
    b788:	4441      	add	r1, r8
    b78a:	0c24      	lsrs	r4, r4, #16
    b78c:	9105      	str	r1, [sp, #20]
    b78e:	0021      	movs	r1, r4
    b790:	4341      	muls	r1, r0
    b792:	4688      	mov	r8, r1
    b794:	0021      	movs	r1, r4
    b796:	4379      	muls	r1, r7
    b798:	468a      	mov	sl, r1
    b79a:	4368      	muls	r0, r5
    b79c:	4641      	mov	r1, r8
    b79e:	4450      	add	r0, sl
    b7a0:	4681      	mov	r9, r0
    b7a2:	0c08      	lsrs	r0, r1, #16
    b7a4:	4448      	add	r0, r9
    b7a6:	436f      	muls	r7, r5
    b7a8:	4582      	cmp	sl, r0
    b7aa:	d903      	bls.n	b7b4 <__aeabi_dmul+0x278>
    b7ac:	2180      	movs	r1, #128	; 0x80
    b7ae:	0249      	lsls	r1, r1, #9
    b7b0:	4689      	mov	r9, r1
    b7b2:	444f      	add	r7, r9
    b7b4:	0c01      	lsrs	r1, r0, #16
    b7b6:	4689      	mov	r9, r1
    b7b8:	0039      	movs	r1, r7
    b7ba:	4449      	add	r1, r9
    b7bc:	9102      	str	r1, [sp, #8]
    b7be:	4641      	mov	r1, r8
    b7c0:	040f      	lsls	r7, r1, #16
    b7c2:	9904      	ldr	r1, [sp, #16]
    b7c4:	0c3f      	lsrs	r7, r7, #16
    b7c6:	4688      	mov	r8, r1
    b7c8:	0400      	lsls	r0, r0, #16
    b7ca:	19c0      	adds	r0, r0, r7
    b7cc:	4480      	add	r8, r0
    b7ce:	4641      	mov	r1, r8
    b7d0:	9104      	str	r1, [sp, #16]
    b7d2:	4659      	mov	r1, fp
    b7d4:	0c0f      	lsrs	r7, r1, #16
    b7d6:	0409      	lsls	r1, r1, #16
    b7d8:	0c09      	lsrs	r1, r1, #16
    b7da:	4688      	mov	r8, r1
    b7dc:	4359      	muls	r1, r3
    b7de:	468a      	mov	sl, r1
    b7e0:	0039      	movs	r1, r7
    b7e2:	4351      	muls	r1, r2
    b7e4:	4689      	mov	r9, r1
    b7e6:	4641      	mov	r1, r8
    b7e8:	434a      	muls	r2, r1
    b7ea:	4651      	mov	r1, sl
    b7ec:	0c09      	lsrs	r1, r1, #16
    b7ee:	468b      	mov	fp, r1
    b7f0:	437b      	muls	r3, r7
    b7f2:	18d2      	adds	r2, r2, r3
    b7f4:	445a      	add	r2, fp
    b7f6:	4293      	cmp	r3, r2
    b7f8:	d903      	bls.n	b802 <__aeabi_dmul+0x2c6>
    b7fa:	2380      	movs	r3, #128	; 0x80
    b7fc:	025b      	lsls	r3, r3, #9
    b7fe:	469b      	mov	fp, r3
    b800:	44d9      	add	r9, fp
    b802:	4651      	mov	r1, sl
    b804:	0409      	lsls	r1, r1, #16
    b806:	0c09      	lsrs	r1, r1, #16
    b808:	468a      	mov	sl, r1
    b80a:	4641      	mov	r1, r8
    b80c:	4361      	muls	r1, r4
    b80e:	437c      	muls	r4, r7
    b810:	0c13      	lsrs	r3, r2, #16
    b812:	0412      	lsls	r2, r2, #16
    b814:	444b      	add	r3, r9
    b816:	4452      	add	r2, sl
    b818:	46a1      	mov	r9, r4
    b81a:	468a      	mov	sl, r1
    b81c:	003c      	movs	r4, r7
    b81e:	4641      	mov	r1, r8
    b820:	436c      	muls	r4, r5
    b822:	434d      	muls	r5, r1
    b824:	4651      	mov	r1, sl
    b826:	444d      	add	r5, r9
    b828:	0c0f      	lsrs	r7, r1, #16
    b82a:	197d      	adds	r5, r7, r5
    b82c:	45a9      	cmp	r9, r5
    b82e:	d903      	bls.n	b838 <__aeabi_dmul+0x2fc>
    b830:	2180      	movs	r1, #128	; 0x80
    b832:	0249      	lsls	r1, r1, #9
    b834:	4688      	mov	r8, r1
    b836:	4444      	add	r4, r8
    b838:	9f04      	ldr	r7, [sp, #16]
    b83a:	9903      	ldr	r1, [sp, #12]
    b83c:	46b8      	mov	r8, r7
    b83e:	4441      	add	r1, r8
    b840:	468b      	mov	fp, r1
    b842:	4583      	cmp	fp, r0
    b844:	4180      	sbcs	r0, r0
    b846:	4241      	negs	r1, r0
    b848:	4688      	mov	r8, r1
    b84a:	4651      	mov	r1, sl
    b84c:	0408      	lsls	r0, r1, #16
    b84e:	042f      	lsls	r7, r5, #16
    b850:	0c00      	lsrs	r0, r0, #16
    b852:	183f      	adds	r7, r7, r0
    b854:	4658      	mov	r0, fp
    b856:	9902      	ldr	r1, [sp, #8]
    b858:	1810      	adds	r0, r2, r0
    b85a:	4689      	mov	r9, r1
    b85c:	4290      	cmp	r0, r2
    b85e:	4192      	sbcs	r2, r2
    b860:	444f      	add	r7, r9
    b862:	46ba      	mov	sl, r7
    b864:	4252      	negs	r2, r2
    b866:	4699      	mov	r9, r3
    b868:	4693      	mov	fp, r2
    b86a:	44c2      	add	sl, r8
    b86c:	44d1      	add	r9, sl
    b86e:	44cb      	add	fp, r9
    b870:	428f      	cmp	r7, r1
    b872:	41bf      	sbcs	r7, r7
    b874:	45c2      	cmp	sl, r8
    b876:	4189      	sbcs	r1, r1
    b878:	4599      	cmp	r9, r3
    b87a:	419b      	sbcs	r3, r3
    b87c:	4593      	cmp	fp, r2
    b87e:	4192      	sbcs	r2, r2
    b880:	427f      	negs	r7, r7
    b882:	4249      	negs	r1, r1
    b884:	0c2d      	lsrs	r5, r5, #16
    b886:	4252      	negs	r2, r2
    b888:	430f      	orrs	r7, r1
    b88a:	425b      	negs	r3, r3
    b88c:	4313      	orrs	r3, r2
    b88e:	197f      	adds	r7, r7, r5
    b890:	18ff      	adds	r7, r7, r3
    b892:	465b      	mov	r3, fp
    b894:	193c      	adds	r4, r7, r4
    b896:	0ddb      	lsrs	r3, r3, #23
    b898:	9a05      	ldr	r2, [sp, #20]
    b89a:	0264      	lsls	r4, r4, #9
    b89c:	431c      	orrs	r4, r3
    b89e:	0243      	lsls	r3, r0, #9
    b8a0:	4313      	orrs	r3, r2
    b8a2:	1e5d      	subs	r5, r3, #1
    b8a4:	41ab      	sbcs	r3, r5
    b8a6:	465a      	mov	r2, fp
    b8a8:	0dc0      	lsrs	r0, r0, #23
    b8aa:	4303      	orrs	r3, r0
    b8ac:	0252      	lsls	r2, r2, #9
    b8ae:	4313      	orrs	r3, r2
    b8b0:	01e2      	lsls	r2, r4, #7
    b8b2:	d556      	bpl.n	b962 <__aeabi_dmul+0x426>
    b8b4:	2001      	movs	r0, #1
    b8b6:	085a      	lsrs	r2, r3, #1
    b8b8:	4003      	ands	r3, r0
    b8ba:	4313      	orrs	r3, r2
    b8bc:	07e2      	lsls	r2, r4, #31
    b8be:	4313      	orrs	r3, r2
    b8c0:	0864      	lsrs	r4, r4, #1
    b8c2:	485a      	ldr	r0, [pc, #360]	; (ba2c <__aeabi_dmul+0x4f0>)
    b8c4:	4460      	add	r0, ip
    b8c6:	2800      	cmp	r0, #0
    b8c8:	dd4d      	ble.n	b966 <__aeabi_dmul+0x42a>
    b8ca:	075a      	lsls	r2, r3, #29
    b8cc:	d009      	beq.n	b8e2 <__aeabi_dmul+0x3a6>
    b8ce:	220f      	movs	r2, #15
    b8d0:	401a      	ands	r2, r3
    b8d2:	2a04      	cmp	r2, #4
    b8d4:	d005      	beq.n	b8e2 <__aeabi_dmul+0x3a6>
    b8d6:	1d1a      	adds	r2, r3, #4
    b8d8:	429a      	cmp	r2, r3
    b8da:	419b      	sbcs	r3, r3
    b8dc:	425b      	negs	r3, r3
    b8de:	18e4      	adds	r4, r4, r3
    b8e0:	0013      	movs	r3, r2
    b8e2:	01e2      	lsls	r2, r4, #7
    b8e4:	d504      	bpl.n	b8f0 <__aeabi_dmul+0x3b4>
    b8e6:	2080      	movs	r0, #128	; 0x80
    b8e8:	4a51      	ldr	r2, [pc, #324]	; (ba30 <__aeabi_dmul+0x4f4>)
    b8ea:	00c0      	lsls	r0, r0, #3
    b8ec:	4014      	ands	r4, r2
    b8ee:	4460      	add	r0, ip
    b8f0:	4a50      	ldr	r2, [pc, #320]	; (ba34 <__aeabi_dmul+0x4f8>)
    b8f2:	4290      	cmp	r0, r2
    b8f4:	dd00      	ble.n	b8f8 <__aeabi_dmul+0x3bc>
    b8f6:	e6e3      	b.n	b6c0 <__aeabi_dmul+0x184>
    b8f8:	2501      	movs	r5, #1
    b8fa:	08db      	lsrs	r3, r3, #3
    b8fc:	0762      	lsls	r2, r4, #29
    b8fe:	431a      	orrs	r2, r3
    b900:	0264      	lsls	r4, r4, #9
    b902:	9b01      	ldr	r3, [sp, #4]
    b904:	4691      	mov	r9, r2
    b906:	0b22      	lsrs	r2, r4, #12
    b908:	0544      	lsls	r4, r0, #21
    b90a:	0d64      	lsrs	r4, r4, #21
    b90c:	401d      	ands	r5, r3
    b90e:	e67c      	b.n	b60a <__aeabi_dmul+0xce>
    b910:	2280      	movs	r2, #128	; 0x80
    b912:	4659      	mov	r1, fp
    b914:	0312      	lsls	r2, r2, #12
    b916:	4211      	tst	r1, r2
    b918:	d008      	beq.n	b92c <__aeabi_dmul+0x3f0>
    b91a:	4214      	tst	r4, r2
    b91c:	d106      	bne.n	b92c <__aeabi_dmul+0x3f0>
    b91e:	4322      	orrs	r2, r4
    b920:	0312      	lsls	r2, r2, #12
    b922:	0b12      	lsrs	r2, r2, #12
    b924:	4645      	mov	r5, r8
    b926:	4699      	mov	r9, r3
    b928:	4c43      	ldr	r4, [pc, #268]	; (ba38 <__aeabi_dmul+0x4fc>)
    b92a:	e66e      	b.n	b60a <__aeabi_dmul+0xce>
    b92c:	465b      	mov	r3, fp
    b92e:	431a      	orrs	r2, r3
    b930:	0312      	lsls	r2, r2, #12
    b932:	0b12      	lsrs	r2, r2, #12
    b934:	4c40      	ldr	r4, [pc, #256]	; (ba38 <__aeabi_dmul+0x4fc>)
    b936:	e668      	b.n	b60a <__aeabi_dmul+0xce>
    b938:	0003      	movs	r3, r0
    b93a:	4654      	mov	r4, sl
    b93c:	3b28      	subs	r3, #40	; 0x28
    b93e:	409c      	lsls	r4, r3
    b940:	2300      	movs	r3, #0
    b942:	e6b9      	b.n	b6b8 <__aeabi_dmul+0x17c>
    b944:	f000 fc8c 	bl	c260 <__clzsi2>
    b948:	3020      	adds	r0, #32
    b94a:	e6a6      	b.n	b69a <__aeabi_dmul+0x15e>
    b94c:	0003      	movs	r3, r0
    b94e:	3b28      	subs	r3, #40	; 0x28
    b950:	409f      	lsls	r7, r3
    b952:	2300      	movs	r3, #0
    b954:	46bb      	mov	fp, r7
    b956:	4699      	mov	r9, r3
    b958:	e68a      	b.n	b670 <__aeabi_dmul+0x134>
    b95a:	f000 fc81 	bl	c260 <__clzsi2>
    b95e:	3020      	adds	r0, #32
    b960:	e674      	b.n	b64c <__aeabi_dmul+0x110>
    b962:	46b4      	mov	ip, r6
    b964:	e7ad      	b.n	b8c2 <__aeabi_dmul+0x386>
    b966:	2501      	movs	r5, #1
    b968:	1a2a      	subs	r2, r5, r0
    b96a:	2a38      	cmp	r2, #56	; 0x38
    b96c:	dd06      	ble.n	b97c <__aeabi_dmul+0x440>
    b96e:	9b01      	ldr	r3, [sp, #4]
    b970:	2400      	movs	r4, #0
    b972:	401d      	ands	r5, r3
    b974:	2300      	movs	r3, #0
    b976:	2200      	movs	r2, #0
    b978:	4699      	mov	r9, r3
    b97a:	e646      	b.n	b60a <__aeabi_dmul+0xce>
    b97c:	2a1f      	cmp	r2, #31
    b97e:	dc21      	bgt.n	b9c4 <__aeabi_dmul+0x488>
    b980:	2520      	movs	r5, #32
    b982:	0020      	movs	r0, r4
    b984:	1aad      	subs	r5, r5, r2
    b986:	001e      	movs	r6, r3
    b988:	40ab      	lsls	r3, r5
    b98a:	40a8      	lsls	r0, r5
    b98c:	40d6      	lsrs	r6, r2
    b98e:	1e5d      	subs	r5, r3, #1
    b990:	41ab      	sbcs	r3, r5
    b992:	4330      	orrs	r0, r6
    b994:	4318      	orrs	r0, r3
    b996:	40d4      	lsrs	r4, r2
    b998:	0743      	lsls	r3, r0, #29
    b99a:	d009      	beq.n	b9b0 <__aeabi_dmul+0x474>
    b99c:	230f      	movs	r3, #15
    b99e:	4003      	ands	r3, r0
    b9a0:	2b04      	cmp	r3, #4
    b9a2:	d005      	beq.n	b9b0 <__aeabi_dmul+0x474>
    b9a4:	0003      	movs	r3, r0
    b9a6:	1d18      	adds	r0, r3, #4
    b9a8:	4298      	cmp	r0, r3
    b9aa:	419b      	sbcs	r3, r3
    b9ac:	425b      	negs	r3, r3
    b9ae:	18e4      	adds	r4, r4, r3
    b9b0:	0223      	lsls	r3, r4, #8
    b9b2:	d521      	bpl.n	b9f8 <__aeabi_dmul+0x4bc>
    b9b4:	2501      	movs	r5, #1
    b9b6:	9b01      	ldr	r3, [sp, #4]
    b9b8:	2401      	movs	r4, #1
    b9ba:	401d      	ands	r5, r3
    b9bc:	2300      	movs	r3, #0
    b9be:	2200      	movs	r2, #0
    b9c0:	4699      	mov	r9, r3
    b9c2:	e622      	b.n	b60a <__aeabi_dmul+0xce>
    b9c4:	251f      	movs	r5, #31
    b9c6:	0021      	movs	r1, r4
    b9c8:	426d      	negs	r5, r5
    b9ca:	1a28      	subs	r0, r5, r0
    b9cc:	40c1      	lsrs	r1, r0
    b9ce:	0008      	movs	r0, r1
    b9d0:	2a20      	cmp	r2, #32
    b9d2:	d01d      	beq.n	ba10 <__aeabi_dmul+0x4d4>
    b9d4:	355f      	adds	r5, #95	; 0x5f
    b9d6:	1aaa      	subs	r2, r5, r2
    b9d8:	4094      	lsls	r4, r2
    b9da:	4323      	orrs	r3, r4
    b9dc:	1e5c      	subs	r4, r3, #1
    b9de:	41a3      	sbcs	r3, r4
    b9e0:	2507      	movs	r5, #7
    b9e2:	4303      	orrs	r3, r0
    b9e4:	401d      	ands	r5, r3
    b9e6:	2200      	movs	r2, #0
    b9e8:	2d00      	cmp	r5, #0
    b9ea:	d009      	beq.n	ba00 <__aeabi_dmul+0x4c4>
    b9ec:	220f      	movs	r2, #15
    b9ee:	2400      	movs	r4, #0
    b9f0:	401a      	ands	r2, r3
    b9f2:	0018      	movs	r0, r3
    b9f4:	2a04      	cmp	r2, #4
    b9f6:	d1d6      	bne.n	b9a6 <__aeabi_dmul+0x46a>
    b9f8:	0003      	movs	r3, r0
    b9fa:	0765      	lsls	r5, r4, #29
    b9fc:	0264      	lsls	r4, r4, #9
    b9fe:	0b22      	lsrs	r2, r4, #12
    ba00:	08db      	lsrs	r3, r3, #3
    ba02:	432b      	orrs	r3, r5
    ba04:	2501      	movs	r5, #1
    ba06:	4699      	mov	r9, r3
    ba08:	9b01      	ldr	r3, [sp, #4]
    ba0a:	2400      	movs	r4, #0
    ba0c:	401d      	ands	r5, r3
    ba0e:	e5fc      	b.n	b60a <__aeabi_dmul+0xce>
    ba10:	2400      	movs	r4, #0
    ba12:	e7e2      	b.n	b9da <__aeabi_dmul+0x49e>
    ba14:	2280      	movs	r2, #128	; 0x80
    ba16:	2501      	movs	r5, #1
    ba18:	0312      	lsls	r2, r2, #12
    ba1a:	4322      	orrs	r2, r4
    ba1c:	9901      	ldr	r1, [sp, #4]
    ba1e:	0312      	lsls	r2, r2, #12
    ba20:	0b12      	lsrs	r2, r2, #12
    ba22:	400d      	ands	r5, r1
    ba24:	4699      	mov	r9, r3
    ba26:	4c04      	ldr	r4, [pc, #16]	; (ba38 <__aeabi_dmul+0x4fc>)
    ba28:	e5ef      	b.n	b60a <__aeabi_dmul+0xce>
    ba2a:	46c0      	nop			; (mov r8, r8)
    ba2c:	000003ff 	.word	0x000003ff
    ba30:	feffffff 	.word	0xfeffffff
    ba34:	000007fe 	.word	0x000007fe
    ba38:	000007ff 	.word	0x000007ff

0000ba3c <__aeabi_dsub>:
    ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba3e:	4646      	mov	r6, r8
    ba40:	46d6      	mov	lr, sl
    ba42:	464f      	mov	r7, r9
    ba44:	030c      	lsls	r4, r1, #12
    ba46:	b5c0      	push	{r6, r7, lr}
    ba48:	0fcd      	lsrs	r5, r1, #31
    ba4a:	004e      	lsls	r6, r1, #1
    ba4c:	0a61      	lsrs	r1, r4, #9
    ba4e:	0f44      	lsrs	r4, r0, #29
    ba50:	430c      	orrs	r4, r1
    ba52:	00c1      	lsls	r1, r0, #3
    ba54:	0058      	lsls	r0, r3, #1
    ba56:	0d40      	lsrs	r0, r0, #21
    ba58:	4684      	mov	ip, r0
    ba5a:	468a      	mov	sl, r1
    ba5c:	000f      	movs	r7, r1
    ba5e:	0319      	lsls	r1, r3, #12
    ba60:	0f50      	lsrs	r0, r2, #29
    ba62:	0a49      	lsrs	r1, r1, #9
    ba64:	4301      	orrs	r1, r0
    ba66:	48c6      	ldr	r0, [pc, #792]	; (bd80 <__aeabi_dsub+0x344>)
    ba68:	0d76      	lsrs	r6, r6, #21
    ba6a:	46a8      	mov	r8, r5
    ba6c:	0fdb      	lsrs	r3, r3, #31
    ba6e:	00d2      	lsls	r2, r2, #3
    ba70:	4584      	cmp	ip, r0
    ba72:	d100      	bne.n	ba76 <__aeabi_dsub+0x3a>
    ba74:	e0d8      	b.n	bc28 <__aeabi_dsub+0x1ec>
    ba76:	2001      	movs	r0, #1
    ba78:	4043      	eors	r3, r0
    ba7a:	42ab      	cmp	r3, r5
    ba7c:	d100      	bne.n	ba80 <__aeabi_dsub+0x44>
    ba7e:	e0a6      	b.n	bbce <__aeabi_dsub+0x192>
    ba80:	4660      	mov	r0, ip
    ba82:	1a35      	subs	r5, r6, r0
    ba84:	2d00      	cmp	r5, #0
    ba86:	dc00      	bgt.n	ba8a <__aeabi_dsub+0x4e>
    ba88:	e105      	b.n	bc96 <__aeabi_dsub+0x25a>
    ba8a:	2800      	cmp	r0, #0
    ba8c:	d110      	bne.n	bab0 <__aeabi_dsub+0x74>
    ba8e:	000b      	movs	r3, r1
    ba90:	4313      	orrs	r3, r2
    ba92:	d100      	bne.n	ba96 <__aeabi_dsub+0x5a>
    ba94:	e0d7      	b.n	bc46 <__aeabi_dsub+0x20a>
    ba96:	1e6b      	subs	r3, r5, #1
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d000      	beq.n	ba9e <__aeabi_dsub+0x62>
    ba9c:	e14b      	b.n	bd36 <__aeabi_dsub+0x2fa>
    ba9e:	4653      	mov	r3, sl
    baa0:	1a9f      	subs	r7, r3, r2
    baa2:	45ba      	cmp	sl, r7
    baa4:	4180      	sbcs	r0, r0
    baa6:	1a64      	subs	r4, r4, r1
    baa8:	4240      	negs	r0, r0
    baaa:	1a24      	subs	r4, r4, r0
    baac:	2601      	movs	r6, #1
    baae:	e01e      	b.n	baee <__aeabi_dsub+0xb2>
    bab0:	4bb3      	ldr	r3, [pc, #716]	; (bd80 <__aeabi_dsub+0x344>)
    bab2:	429e      	cmp	r6, r3
    bab4:	d048      	beq.n	bb48 <__aeabi_dsub+0x10c>
    bab6:	2380      	movs	r3, #128	; 0x80
    bab8:	041b      	lsls	r3, r3, #16
    baba:	4319      	orrs	r1, r3
    babc:	2d38      	cmp	r5, #56	; 0x38
    babe:	dd00      	ble.n	bac2 <__aeabi_dsub+0x86>
    bac0:	e119      	b.n	bcf6 <__aeabi_dsub+0x2ba>
    bac2:	2d1f      	cmp	r5, #31
    bac4:	dd00      	ble.n	bac8 <__aeabi_dsub+0x8c>
    bac6:	e14c      	b.n	bd62 <__aeabi_dsub+0x326>
    bac8:	2320      	movs	r3, #32
    baca:	000f      	movs	r7, r1
    bacc:	1b5b      	subs	r3, r3, r5
    bace:	0010      	movs	r0, r2
    bad0:	409a      	lsls	r2, r3
    bad2:	409f      	lsls	r7, r3
    bad4:	40e8      	lsrs	r0, r5
    bad6:	1e53      	subs	r3, r2, #1
    bad8:	419a      	sbcs	r2, r3
    bada:	40e9      	lsrs	r1, r5
    badc:	4307      	orrs	r7, r0
    bade:	4317      	orrs	r7, r2
    bae0:	4653      	mov	r3, sl
    bae2:	1bdf      	subs	r7, r3, r7
    bae4:	1a61      	subs	r1, r4, r1
    bae6:	45ba      	cmp	sl, r7
    bae8:	41a4      	sbcs	r4, r4
    baea:	4264      	negs	r4, r4
    baec:	1b0c      	subs	r4, r1, r4
    baee:	0223      	lsls	r3, r4, #8
    baf0:	d400      	bmi.n	baf4 <__aeabi_dsub+0xb8>
    baf2:	e0c5      	b.n	bc80 <__aeabi_dsub+0x244>
    baf4:	0264      	lsls	r4, r4, #9
    baf6:	0a65      	lsrs	r5, r4, #9
    baf8:	2d00      	cmp	r5, #0
    bafa:	d100      	bne.n	bafe <__aeabi_dsub+0xc2>
    bafc:	e0f6      	b.n	bcec <__aeabi_dsub+0x2b0>
    bafe:	0028      	movs	r0, r5
    bb00:	f000 fbae 	bl	c260 <__clzsi2>
    bb04:	0003      	movs	r3, r0
    bb06:	3b08      	subs	r3, #8
    bb08:	2b1f      	cmp	r3, #31
    bb0a:	dd00      	ble.n	bb0e <__aeabi_dsub+0xd2>
    bb0c:	e0e9      	b.n	bce2 <__aeabi_dsub+0x2a6>
    bb0e:	2220      	movs	r2, #32
    bb10:	003c      	movs	r4, r7
    bb12:	1ad2      	subs	r2, r2, r3
    bb14:	409d      	lsls	r5, r3
    bb16:	40d4      	lsrs	r4, r2
    bb18:	409f      	lsls	r7, r3
    bb1a:	4325      	orrs	r5, r4
    bb1c:	429e      	cmp	r6, r3
    bb1e:	dd00      	ble.n	bb22 <__aeabi_dsub+0xe6>
    bb20:	e0db      	b.n	bcda <__aeabi_dsub+0x29e>
    bb22:	1b9e      	subs	r6, r3, r6
    bb24:	1c73      	adds	r3, r6, #1
    bb26:	2b1f      	cmp	r3, #31
    bb28:	dd00      	ble.n	bb2c <__aeabi_dsub+0xf0>
    bb2a:	e10a      	b.n	bd42 <__aeabi_dsub+0x306>
    bb2c:	2220      	movs	r2, #32
    bb2e:	0038      	movs	r0, r7
    bb30:	1ad2      	subs	r2, r2, r3
    bb32:	0029      	movs	r1, r5
    bb34:	4097      	lsls	r7, r2
    bb36:	002c      	movs	r4, r5
    bb38:	4091      	lsls	r1, r2
    bb3a:	40d8      	lsrs	r0, r3
    bb3c:	1e7a      	subs	r2, r7, #1
    bb3e:	4197      	sbcs	r7, r2
    bb40:	40dc      	lsrs	r4, r3
    bb42:	2600      	movs	r6, #0
    bb44:	4301      	orrs	r1, r0
    bb46:	430f      	orrs	r7, r1
    bb48:	077b      	lsls	r3, r7, #29
    bb4a:	d009      	beq.n	bb60 <__aeabi_dsub+0x124>
    bb4c:	230f      	movs	r3, #15
    bb4e:	403b      	ands	r3, r7
    bb50:	2b04      	cmp	r3, #4
    bb52:	d005      	beq.n	bb60 <__aeabi_dsub+0x124>
    bb54:	1d3b      	adds	r3, r7, #4
    bb56:	42bb      	cmp	r3, r7
    bb58:	41bf      	sbcs	r7, r7
    bb5a:	427f      	negs	r7, r7
    bb5c:	19e4      	adds	r4, r4, r7
    bb5e:	001f      	movs	r7, r3
    bb60:	0223      	lsls	r3, r4, #8
    bb62:	d525      	bpl.n	bbb0 <__aeabi_dsub+0x174>
    bb64:	4b86      	ldr	r3, [pc, #536]	; (bd80 <__aeabi_dsub+0x344>)
    bb66:	3601      	adds	r6, #1
    bb68:	429e      	cmp	r6, r3
    bb6a:	d100      	bne.n	bb6e <__aeabi_dsub+0x132>
    bb6c:	e0af      	b.n	bcce <__aeabi_dsub+0x292>
    bb6e:	4b85      	ldr	r3, [pc, #532]	; (bd84 <__aeabi_dsub+0x348>)
    bb70:	2501      	movs	r5, #1
    bb72:	401c      	ands	r4, r3
    bb74:	4643      	mov	r3, r8
    bb76:	0762      	lsls	r2, r4, #29
    bb78:	08ff      	lsrs	r7, r7, #3
    bb7a:	0264      	lsls	r4, r4, #9
    bb7c:	0576      	lsls	r6, r6, #21
    bb7e:	4317      	orrs	r7, r2
    bb80:	0b24      	lsrs	r4, r4, #12
    bb82:	0d76      	lsrs	r6, r6, #21
    bb84:	401d      	ands	r5, r3
    bb86:	2100      	movs	r1, #0
    bb88:	0324      	lsls	r4, r4, #12
    bb8a:	0b23      	lsrs	r3, r4, #12
    bb8c:	0d0c      	lsrs	r4, r1, #20
    bb8e:	4a7e      	ldr	r2, [pc, #504]	; (bd88 <__aeabi_dsub+0x34c>)
    bb90:	0524      	lsls	r4, r4, #20
    bb92:	431c      	orrs	r4, r3
    bb94:	4014      	ands	r4, r2
    bb96:	0533      	lsls	r3, r6, #20
    bb98:	4323      	orrs	r3, r4
    bb9a:	005b      	lsls	r3, r3, #1
    bb9c:	07ed      	lsls	r5, r5, #31
    bb9e:	085b      	lsrs	r3, r3, #1
    bba0:	432b      	orrs	r3, r5
    bba2:	0038      	movs	r0, r7
    bba4:	0019      	movs	r1, r3
    bba6:	bc1c      	pop	{r2, r3, r4}
    bba8:	4690      	mov	r8, r2
    bbaa:	4699      	mov	r9, r3
    bbac:	46a2      	mov	sl, r4
    bbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbb0:	2501      	movs	r5, #1
    bbb2:	4643      	mov	r3, r8
    bbb4:	0762      	lsls	r2, r4, #29
    bbb6:	08ff      	lsrs	r7, r7, #3
    bbb8:	4317      	orrs	r7, r2
    bbba:	08e4      	lsrs	r4, r4, #3
    bbbc:	401d      	ands	r5, r3
    bbbe:	4b70      	ldr	r3, [pc, #448]	; (bd80 <__aeabi_dsub+0x344>)
    bbc0:	429e      	cmp	r6, r3
    bbc2:	d036      	beq.n	bc32 <__aeabi_dsub+0x1f6>
    bbc4:	0324      	lsls	r4, r4, #12
    bbc6:	0576      	lsls	r6, r6, #21
    bbc8:	0b24      	lsrs	r4, r4, #12
    bbca:	0d76      	lsrs	r6, r6, #21
    bbcc:	e7db      	b.n	bb86 <__aeabi_dsub+0x14a>
    bbce:	4663      	mov	r3, ip
    bbd0:	1af3      	subs	r3, r6, r3
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	dc00      	bgt.n	bbd8 <__aeabi_dsub+0x19c>
    bbd6:	e094      	b.n	bd02 <__aeabi_dsub+0x2c6>
    bbd8:	4660      	mov	r0, ip
    bbda:	2800      	cmp	r0, #0
    bbdc:	d035      	beq.n	bc4a <__aeabi_dsub+0x20e>
    bbde:	4868      	ldr	r0, [pc, #416]	; (bd80 <__aeabi_dsub+0x344>)
    bbe0:	4286      	cmp	r6, r0
    bbe2:	d0b1      	beq.n	bb48 <__aeabi_dsub+0x10c>
    bbe4:	2780      	movs	r7, #128	; 0x80
    bbe6:	043f      	lsls	r7, r7, #16
    bbe8:	4339      	orrs	r1, r7
    bbea:	2b38      	cmp	r3, #56	; 0x38
    bbec:	dc00      	bgt.n	bbf0 <__aeabi_dsub+0x1b4>
    bbee:	e0fd      	b.n	bdec <__aeabi_dsub+0x3b0>
    bbf0:	430a      	orrs	r2, r1
    bbf2:	0017      	movs	r7, r2
    bbf4:	2100      	movs	r1, #0
    bbf6:	1e7a      	subs	r2, r7, #1
    bbf8:	4197      	sbcs	r7, r2
    bbfa:	4457      	add	r7, sl
    bbfc:	4557      	cmp	r7, sl
    bbfe:	4180      	sbcs	r0, r0
    bc00:	1909      	adds	r1, r1, r4
    bc02:	4244      	negs	r4, r0
    bc04:	190c      	adds	r4, r1, r4
    bc06:	0223      	lsls	r3, r4, #8
    bc08:	d53a      	bpl.n	bc80 <__aeabi_dsub+0x244>
    bc0a:	4b5d      	ldr	r3, [pc, #372]	; (bd80 <__aeabi_dsub+0x344>)
    bc0c:	3601      	adds	r6, #1
    bc0e:	429e      	cmp	r6, r3
    bc10:	d100      	bne.n	bc14 <__aeabi_dsub+0x1d8>
    bc12:	e14b      	b.n	beac <__aeabi_dsub+0x470>
    bc14:	2201      	movs	r2, #1
    bc16:	4b5b      	ldr	r3, [pc, #364]	; (bd84 <__aeabi_dsub+0x348>)
    bc18:	401c      	ands	r4, r3
    bc1a:	087b      	lsrs	r3, r7, #1
    bc1c:	4017      	ands	r7, r2
    bc1e:	431f      	orrs	r7, r3
    bc20:	07e2      	lsls	r2, r4, #31
    bc22:	4317      	orrs	r7, r2
    bc24:	0864      	lsrs	r4, r4, #1
    bc26:	e78f      	b.n	bb48 <__aeabi_dsub+0x10c>
    bc28:	0008      	movs	r0, r1
    bc2a:	4310      	orrs	r0, r2
    bc2c:	d000      	beq.n	bc30 <__aeabi_dsub+0x1f4>
    bc2e:	e724      	b.n	ba7a <__aeabi_dsub+0x3e>
    bc30:	e721      	b.n	ba76 <__aeabi_dsub+0x3a>
    bc32:	0023      	movs	r3, r4
    bc34:	433b      	orrs	r3, r7
    bc36:	d100      	bne.n	bc3a <__aeabi_dsub+0x1fe>
    bc38:	e1b9      	b.n	bfae <__aeabi_dsub+0x572>
    bc3a:	2280      	movs	r2, #128	; 0x80
    bc3c:	0312      	lsls	r2, r2, #12
    bc3e:	4314      	orrs	r4, r2
    bc40:	0324      	lsls	r4, r4, #12
    bc42:	0b24      	lsrs	r4, r4, #12
    bc44:	e79f      	b.n	bb86 <__aeabi_dsub+0x14a>
    bc46:	002e      	movs	r6, r5
    bc48:	e77e      	b.n	bb48 <__aeabi_dsub+0x10c>
    bc4a:	0008      	movs	r0, r1
    bc4c:	4310      	orrs	r0, r2
    bc4e:	d100      	bne.n	bc52 <__aeabi_dsub+0x216>
    bc50:	e0ca      	b.n	bde8 <__aeabi_dsub+0x3ac>
    bc52:	1e58      	subs	r0, r3, #1
    bc54:	4684      	mov	ip, r0
    bc56:	2800      	cmp	r0, #0
    bc58:	d000      	beq.n	bc5c <__aeabi_dsub+0x220>
    bc5a:	e0e7      	b.n	be2c <__aeabi_dsub+0x3f0>
    bc5c:	4452      	add	r2, sl
    bc5e:	4552      	cmp	r2, sl
    bc60:	4180      	sbcs	r0, r0
    bc62:	1864      	adds	r4, r4, r1
    bc64:	4240      	negs	r0, r0
    bc66:	1824      	adds	r4, r4, r0
    bc68:	0017      	movs	r7, r2
    bc6a:	2601      	movs	r6, #1
    bc6c:	0223      	lsls	r3, r4, #8
    bc6e:	d507      	bpl.n	bc80 <__aeabi_dsub+0x244>
    bc70:	2602      	movs	r6, #2
    bc72:	e7cf      	b.n	bc14 <__aeabi_dsub+0x1d8>
    bc74:	4664      	mov	r4, ip
    bc76:	432c      	orrs	r4, r5
    bc78:	d100      	bne.n	bc7c <__aeabi_dsub+0x240>
    bc7a:	e1b3      	b.n	bfe4 <__aeabi_dsub+0x5a8>
    bc7c:	002c      	movs	r4, r5
    bc7e:	4667      	mov	r7, ip
    bc80:	077b      	lsls	r3, r7, #29
    bc82:	d000      	beq.n	bc86 <__aeabi_dsub+0x24a>
    bc84:	e762      	b.n	bb4c <__aeabi_dsub+0x110>
    bc86:	0763      	lsls	r3, r4, #29
    bc88:	08ff      	lsrs	r7, r7, #3
    bc8a:	431f      	orrs	r7, r3
    bc8c:	2501      	movs	r5, #1
    bc8e:	4643      	mov	r3, r8
    bc90:	08e4      	lsrs	r4, r4, #3
    bc92:	401d      	ands	r5, r3
    bc94:	e793      	b.n	bbbe <__aeabi_dsub+0x182>
    bc96:	2d00      	cmp	r5, #0
    bc98:	d178      	bne.n	bd8c <__aeabi_dsub+0x350>
    bc9a:	1c75      	adds	r5, r6, #1
    bc9c:	056d      	lsls	r5, r5, #21
    bc9e:	0d6d      	lsrs	r5, r5, #21
    bca0:	2d01      	cmp	r5, #1
    bca2:	dc00      	bgt.n	bca6 <__aeabi_dsub+0x26a>
    bca4:	e0f2      	b.n	be8c <__aeabi_dsub+0x450>
    bca6:	4650      	mov	r0, sl
    bca8:	1a80      	subs	r0, r0, r2
    bcaa:	4582      	cmp	sl, r0
    bcac:	41bf      	sbcs	r7, r7
    bcae:	1a65      	subs	r5, r4, r1
    bcb0:	427f      	negs	r7, r7
    bcb2:	1bed      	subs	r5, r5, r7
    bcb4:	4684      	mov	ip, r0
    bcb6:	0228      	lsls	r0, r5, #8
    bcb8:	d400      	bmi.n	bcbc <__aeabi_dsub+0x280>
    bcba:	e08c      	b.n	bdd6 <__aeabi_dsub+0x39a>
    bcbc:	4650      	mov	r0, sl
    bcbe:	1a17      	subs	r7, r2, r0
    bcc0:	42ba      	cmp	r2, r7
    bcc2:	4192      	sbcs	r2, r2
    bcc4:	1b0c      	subs	r4, r1, r4
    bcc6:	4255      	negs	r5, r2
    bcc8:	1b65      	subs	r5, r4, r5
    bcca:	4698      	mov	r8, r3
    bccc:	e714      	b.n	baf8 <__aeabi_dsub+0xbc>
    bcce:	2501      	movs	r5, #1
    bcd0:	4643      	mov	r3, r8
    bcd2:	2400      	movs	r4, #0
    bcd4:	401d      	ands	r5, r3
    bcd6:	2700      	movs	r7, #0
    bcd8:	e755      	b.n	bb86 <__aeabi_dsub+0x14a>
    bcda:	4c2a      	ldr	r4, [pc, #168]	; (bd84 <__aeabi_dsub+0x348>)
    bcdc:	1af6      	subs	r6, r6, r3
    bcde:	402c      	ands	r4, r5
    bce0:	e732      	b.n	bb48 <__aeabi_dsub+0x10c>
    bce2:	003d      	movs	r5, r7
    bce4:	3828      	subs	r0, #40	; 0x28
    bce6:	4085      	lsls	r5, r0
    bce8:	2700      	movs	r7, #0
    bcea:	e717      	b.n	bb1c <__aeabi_dsub+0xe0>
    bcec:	0038      	movs	r0, r7
    bcee:	f000 fab7 	bl	c260 <__clzsi2>
    bcf2:	3020      	adds	r0, #32
    bcf4:	e706      	b.n	bb04 <__aeabi_dsub+0xc8>
    bcf6:	430a      	orrs	r2, r1
    bcf8:	0017      	movs	r7, r2
    bcfa:	2100      	movs	r1, #0
    bcfc:	1e7a      	subs	r2, r7, #1
    bcfe:	4197      	sbcs	r7, r2
    bd00:	e6ee      	b.n	bae0 <__aeabi_dsub+0xa4>
    bd02:	2b00      	cmp	r3, #0
    bd04:	d000      	beq.n	bd08 <__aeabi_dsub+0x2cc>
    bd06:	e0e5      	b.n	bed4 <__aeabi_dsub+0x498>
    bd08:	1c73      	adds	r3, r6, #1
    bd0a:	469c      	mov	ip, r3
    bd0c:	055b      	lsls	r3, r3, #21
    bd0e:	0d5b      	lsrs	r3, r3, #21
    bd10:	2b01      	cmp	r3, #1
    bd12:	dc00      	bgt.n	bd16 <__aeabi_dsub+0x2da>
    bd14:	e09f      	b.n	be56 <__aeabi_dsub+0x41a>
    bd16:	4b1a      	ldr	r3, [pc, #104]	; (bd80 <__aeabi_dsub+0x344>)
    bd18:	459c      	cmp	ip, r3
    bd1a:	d100      	bne.n	bd1e <__aeabi_dsub+0x2e2>
    bd1c:	e0c5      	b.n	beaa <__aeabi_dsub+0x46e>
    bd1e:	4452      	add	r2, sl
    bd20:	4552      	cmp	r2, sl
    bd22:	4180      	sbcs	r0, r0
    bd24:	1864      	adds	r4, r4, r1
    bd26:	4240      	negs	r0, r0
    bd28:	1824      	adds	r4, r4, r0
    bd2a:	07e7      	lsls	r7, r4, #31
    bd2c:	0852      	lsrs	r2, r2, #1
    bd2e:	4317      	orrs	r7, r2
    bd30:	0864      	lsrs	r4, r4, #1
    bd32:	4666      	mov	r6, ip
    bd34:	e708      	b.n	bb48 <__aeabi_dsub+0x10c>
    bd36:	4812      	ldr	r0, [pc, #72]	; (bd80 <__aeabi_dsub+0x344>)
    bd38:	4285      	cmp	r5, r0
    bd3a:	d100      	bne.n	bd3e <__aeabi_dsub+0x302>
    bd3c:	e085      	b.n	be4a <__aeabi_dsub+0x40e>
    bd3e:	001d      	movs	r5, r3
    bd40:	e6bc      	b.n	babc <__aeabi_dsub+0x80>
    bd42:	0029      	movs	r1, r5
    bd44:	3e1f      	subs	r6, #31
    bd46:	40f1      	lsrs	r1, r6
    bd48:	2b20      	cmp	r3, #32
    bd4a:	d100      	bne.n	bd4e <__aeabi_dsub+0x312>
    bd4c:	e07f      	b.n	be4e <__aeabi_dsub+0x412>
    bd4e:	2240      	movs	r2, #64	; 0x40
    bd50:	1ad3      	subs	r3, r2, r3
    bd52:	409d      	lsls	r5, r3
    bd54:	432f      	orrs	r7, r5
    bd56:	1e7d      	subs	r5, r7, #1
    bd58:	41af      	sbcs	r7, r5
    bd5a:	2400      	movs	r4, #0
    bd5c:	430f      	orrs	r7, r1
    bd5e:	2600      	movs	r6, #0
    bd60:	e78e      	b.n	bc80 <__aeabi_dsub+0x244>
    bd62:	002b      	movs	r3, r5
    bd64:	000f      	movs	r7, r1
    bd66:	3b20      	subs	r3, #32
    bd68:	40df      	lsrs	r7, r3
    bd6a:	2d20      	cmp	r5, #32
    bd6c:	d071      	beq.n	be52 <__aeabi_dsub+0x416>
    bd6e:	2340      	movs	r3, #64	; 0x40
    bd70:	1b5d      	subs	r5, r3, r5
    bd72:	40a9      	lsls	r1, r5
    bd74:	430a      	orrs	r2, r1
    bd76:	1e51      	subs	r1, r2, #1
    bd78:	418a      	sbcs	r2, r1
    bd7a:	2100      	movs	r1, #0
    bd7c:	4317      	orrs	r7, r2
    bd7e:	e6af      	b.n	bae0 <__aeabi_dsub+0xa4>
    bd80:	000007ff 	.word	0x000007ff
    bd84:	ff7fffff 	.word	0xff7fffff
    bd88:	800fffff 	.word	0x800fffff
    bd8c:	2e00      	cmp	r6, #0
    bd8e:	d03e      	beq.n	be0e <__aeabi_dsub+0x3d2>
    bd90:	4eb3      	ldr	r6, [pc, #716]	; (c060 <__aeabi_dsub+0x624>)
    bd92:	45b4      	cmp	ip, r6
    bd94:	d045      	beq.n	be22 <__aeabi_dsub+0x3e6>
    bd96:	2680      	movs	r6, #128	; 0x80
    bd98:	0436      	lsls	r6, r6, #16
    bd9a:	426d      	negs	r5, r5
    bd9c:	4334      	orrs	r4, r6
    bd9e:	2d38      	cmp	r5, #56	; 0x38
    bda0:	dd00      	ble.n	bda4 <__aeabi_dsub+0x368>
    bda2:	e0a8      	b.n	bef6 <__aeabi_dsub+0x4ba>
    bda4:	2d1f      	cmp	r5, #31
    bda6:	dd00      	ble.n	bdaa <__aeabi_dsub+0x36e>
    bda8:	e11f      	b.n	bfea <__aeabi_dsub+0x5ae>
    bdaa:	2620      	movs	r6, #32
    bdac:	0027      	movs	r7, r4
    bdae:	4650      	mov	r0, sl
    bdb0:	1b76      	subs	r6, r6, r5
    bdb2:	40b7      	lsls	r7, r6
    bdb4:	40e8      	lsrs	r0, r5
    bdb6:	4307      	orrs	r7, r0
    bdb8:	4650      	mov	r0, sl
    bdba:	40b0      	lsls	r0, r6
    bdbc:	1e46      	subs	r6, r0, #1
    bdbe:	41b0      	sbcs	r0, r6
    bdc0:	40ec      	lsrs	r4, r5
    bdc2:	4338      	orrs	r0, r7
    bdc4:	1a17      	subs	r7, r2, r0
    bdc6:	42ba      	cmp	r2, r7
    bdc8:	4192      	sbcs	r2, r2
    bdca:	1b0c      	subs	r4, r1, r4
    bdcc:	4252      	negs	r2, r2
    bdce:	1aa4      	subs	r4, r4, r2
    bdd0:	4666      	mov	r6, ip
    bdd2:	4698      	mov	r8, r3
    bdd4:	e68b      	b.n	baee <__aeabi_dsub+0xb2>
    bdd6:	4664      	mov	r4, ip
    bdd8:	4667      	mov	r7, ip
    bdda:	432c      	orrs	r4, r5
    bddc:	d000      	beq.n	bde0 <__aeabi_dsub+0x3a4>
    bdde:	e68b      	b.n	baf8 <__aeabi_dsub+0xbc>
    bde0:	2500      	movs	r5, #0
    bde2:	2600      	movs	r6, #0
    bde4:	2700      	movs	r7, #0
    bde6:	e6ea      	b.n	bbbe <__aeabi_dsub+0x182>
    bde8:	001e      	movs	r6, r3
    bdea:	e6ad      	b.n	bb48 <__aeabi_dsub+0x10c>
    bdec:	2b1f      	cmp	r3, #31
    bdee:	dc60      	bgt.n	beb2 <__aeabi_dsub+0x476>
    bdf0:	2720      	movs	r7, #32
    bdf2:	1af8      	subs	r0, r7, r3
    bdf4:	000f      	movs	r7, r1
    bdf6:	4684      	mov	ip, r0
    bdf8:	4087      	lsls	r7, r0
    bdfa:	0010      	movs	r0, r2
    bdfc:	40d8      	lsrs	r0, r3
    bdfe:	4307      	orrs	r7, r0
    be00:	4660      	mov	r0, ip
    be02:	4082      	lsls	r2, r0
    be04:	1e50      	subs	r0, r2, #1
    be06:	4182      	sbcs	r2, r0
    be08:	40d9      	lsrs	r1, r3
    be0a:	4317      	orrs	r7, r2
    be0c:	e6f5      	b.n	bbfa <__aeabi_dsub+0x1be>
    be0e:	0026      	movs	r6, r4
    be10:	4650      	mov	r0, sl
    be12:	4306      	orrs	r6, r0
    be14:	d005      	beq.n	be22 <__aeabi_dsub+0x3e6>
    be16:	43ed      	mvns	r5, r5
    be18:	2d00      	cmp	r5, #0
    be1a:	d0d3      	beq.n	bdc4 <__aeabi_dsub+0x388>
    be1c:	4e90      	ldr	r6, [pc, #576]	; (c060 <__aeabi_dsub+0x624>)
    be1e:	45b4      	cmp	ip, r6
    be20:	d1bd      	bne.n	bd9e <__aeabi_dsub+0x362>
    be22:	000c      	movs	r4, r1
    be24:	0017      	movs	r7, r2
    be26:	4666      	mov	r6, ip
    be28:	4698      	mov	r8, r3
    be2a:	e68d      	b.n	bb48 <__aeabi_dsub+0x10c>
    be2c:	488c      	ldr	r0, [pc, #560]	; (c060 <__aeabi_dsub+0x624>)
    be2e:	4283      	cmp	r3, r0
    be30:	d00b      	beq.n	be4a <__aeabi_dsub+0x40e>
    be32:	4663      	mov	r3, ip
    be34:	e6d9      	b.n	bbea <__aeabi_dsub+0x1ae>
    be36:	2d00      	cmp	r5, #0
    be38:	d000      	beq.n	be3c <__aeabi_dsub+0x400>
    be3a:	e096      	b.n	bf6a <__aeabi_dsub+0x52e>
    be3c:	0008      	movs	r0, r1
    be3e:	4310      	orrs	r0, r2
    be40:	d100      	bne.n	be44 <__aeabi_dsub+0x408>
    be42:	e0e2      	b.n	c00a <__aeabi_dsub+0x5ce>
    be44:	000c      	movs	r4, r1
    be46:	0017      	movs	r7, r2
    be48:	4698      	mov	r8, r3
    be4a:	4e85      	ldr	r6, [pc, #532]	; (c060 <__aeabi_dsub+0x624>)
    be4c:	e67c      	b.n	bb48 <__aeabi_dsub+0x10c>
    be4e:	2500      	movs	r5, #0
    be50:	e780      	b.n	bd54 <__aeabi_dsub+0x318>
    be52:	2100      	movs	r1, #0
    be54:	e78e      	b.n	bd74 <__aeabi_dsub+0x338>
    be56:	0023      	movs	r3, r4
    be58:	4650      	mov	r0, sl
    be5a:	4303      	orrs	r3, r0
    be5c:	2e00      	cmp	r6, #0
    be5e:	d000      	beq.n	be62 <__aeabi_dsub+0x426>
    be60:	e0a8      	b.n	bfb4 <__aeabi_dsub+0x578>
    be62:	2b00      	cmp	r3, #0
    be64:	d100      	bne.n	be68 <__aeabi_dsub+0x42c>
    be66:	e0de      	b.n	c026 <__aeabi_dsub+0x5ea>
    be68:	000b      	movs	r3, r1
    be6a:	4313      	orrs	r3, r2
    be6c:	d100      	bne.n	be70 <__aeabi_dsub+0x434>
    be6e:	e66b      	b.n	bb48 <__aeabi_dsub+0x10c>
    be70:	4452      	add	r2, sl
    be72:	4552      	cmp	r2, sl
    be74:	4180      	sbcs	r0, r0
    be76:	1864      	adds	r4, r4, r1
    be78:	4240      	negs	r0, r0
    be7a:	1824      	adds	r4, r4, r0
    be7c:	0017      	movs	r7, r2
    be7e:	0223      	lsls	r3, r4, #8
    be80:	d400      	bmi.n	be84 <__aeabi_dsub+0x448>
    be82:	e6fd      	b.n	bc80 <__aeabi_dsub+0x244>
    be84:	4b77      	ldr	r3, [pc, #476]	; (c064 <__aeabi_dsub+0x628>)
    be86:	4666      	mov	r6, ip
    be88:	401c      	ands	r4, r3
    be8a:	e65d      	b.n	bb48 <__aeabi_dsub+0x10c>
    be8c:	0025      	movs	r5, r4
    be8e:	4650      	mov	r0, sl
    be90:	4305      	orrs	r5, r0
    be92:	2e00      	cmp	r6, #0
    be94:	d1cf      	bne.n	be36 <__aeabi_dsub+0x3fa>
    be96:	2d00      	cmp	r5, #0
    be98:	d14f      	bne.n	bf3a <__aeabi_dsub+0x4fe>
    be9a:	000c      	movs	r4, r1
    be9c:	4314      	orrs	r4, r2
    be9e:	d100      	bne.n	bea2 <__aeabi_dsub+0x466>
    bea0:	e0a0      	b.n	bfe4 <__aeabi_dsub+0x5a8>
    bea2:	000c      	movs	r4, r1
    bea4:	0017      	movs	r7, r2
    bea6:	4698      	mov	r8, r3
    bea8:	e64e      	b.n	bb48 <__aeabi_dsub+0x10c>
    beaa:	4666      	mov	r6, ip
    beac:	2400      	movs	r4, #0
    beae:	2700      	movs	r7, #0
    beb0:	e685      	b.n	bbbe <__aeabi_dsub+0x182>
    beb2:	001f      	movs	r7, r3
    beb4:	0008      	movs	r0, r1
    beb6:	3f20      	subs	r7, #32
    beb8:	40f8      	lsrs	r0, r7
    beba:	0007      	movs	r7, r0
    bebc:	2b20      	cmp	r3, #32
    bebe:	d100      	bne.n	bec2 <__aeabi_dsub+0x486>
    bec0:	e08e      	b.n	bfe0 <__aeabi_dsub+0x5a4>
    bec2:	2040      	movs	r0, #64	; 0x40
    bec4:	1ac3      	subs	r3, r0, r3
    bec6:	4099      	lsls	r1, r3
    bec8:	430a      	orrs	r2, r1
    beca:	1e51      	subs	r1, r2, #1
    becc:	418a      	sbcs	r2, r1
    bece:	2100      	movs	r1, #0
    bed0:	4317      	orrs	r7, r2
    bed2:	e692      	b.n	bbfa <__aeabi_dsub+0x1be>
    bed4:	2e00      	cmp	r6, #0
    bed6:	d114      	bne.n	bf02 <__aeabi_dsub+0x4c6>
    bed8:	0026      	movs	r6, r4
    beda:	4650      	mov	r0, sl
    bedc:	4306      	orrs	r6, r0
    bede:	d062      	beq.n	bfa6 <__aeabi_dsub+0x56a>
    bee0:	43db      	mvns	r3, r3
    bee2:	2b00      	cmp	r3, #0
    bee4:	d15c      	bne.n	bfa0 <__aeabi_dsub+0x564>
    bee6:	1887      	adds	r7, r0, r2
    bee8:	4297      	cmp	r7, r2
    beea:	4192      	sbcs	r2, r2
    beec:	1864      	adds	r4, r4, r1
    beee:	4252      	negs	r2, r2
    bef0:	18a4      	adds	r4, r4, r2
    bef2:	4666      	mov	r6, ip
    bef4:	e687      	b.n	bc06 <__aeabi_dsub+0x1ca>
    bef6:	4650      	mov	r0, sl
    bef8:	4320      	orrs	r0, r4
    befa:	1e44      	subs	r4, r0, #1
    befc:	41a0      	sbcs	r0, r4
    befe:	2400      	movs	r4, #0
    bf00:	e760      	b.n	bdc4 <__aeabi_dsub+0x388>
    bf02:	4e57      	ldr	r6, [pc, #348]	; (c060 <__aeabi_dsub+0x624>)
    bf04:	45b4      	cmp	ip, r6
    bf06:	d04e      	beq.n	bfa6 <__aeabi_dsub+0x56a>
    bf08:	2680      	movs	r6, #128	; 0x80
    bf0a:	0436      	lsls	r6, r6, #16
    bf0c:	425b      	negs	r3, r3
    bf0e:	4334      	orrs	r4, r6
    bf10:	2b38      	cmp	r3, #56	; 0x38
    bf12:	dd00      	ble.n	bf16 <__aeabi_dsub+0x4da>
    bf14:	e07f      	b.n	c016 <__aeabi_dsub+0x5da>
    bf16:	2b1f      	cmp	r3, #31
    bf18:	dd00      	ble.n	bf1c <__aeabi_dsub+0x4e0>
    bf1a:	e08b      	b.n	c034 <__aeabi_dsub+0x5f8>
    bf1c:	2620      	movs	r6, #32
    bf1e:	0027      	movs	r7, r4
    bf20:	4650      	mov	r0, sl
    bf22:	1af6      	subs	r6, r6, r3
    bf24:	40b7      	lsls	r7, r6
    bf26:	40d8      	lsrs	r0, r3
    bf28:	4307      	orrs	r7, r0
    bf2a:	4650      	mov	r0, sl
    bf2c:	40b0      	lsls	r0, r6
    bf2e:	1e46      	subs	r6, r0, #1
    bf30:	41b0      	sbcs	r0, r6
    bf32:	4307      	orrs	r7, r0
    bf34:	40dc      	lsrs	r4, r3
    bf36:	18bf      	adds	r7, r7, r2
    bf38:	e7d6      	b.n	bee8 <__aeabi_dsub+0x4ac>
    bf3a:	000d      	movs	r5, r1
    bf3c:	4315      	orrs	r5, r2
    bf3e:	d100      	bne.n	bf42 <__aeabi_dsub+0x506>
    bf40:	e602      	b.n	bb48 <__aeabi_dsub+0x10c>
    bf42:	4650      	mov	r0, sl
    bf44:	1a80      	subs	r0, r0, r2
    bf46:	4582      	cmp	sl, r0
    bf48:	41bf      	sbcs	r7, r7
    bf4a:	1a65      	subs	r5, r4, r1
    bf4c:	427f      	negs	r7, r7
    bf4e:	1bed      	subs	r5, r5, r7
    bf50:	4684      	mov	ip, r0
    bf52:	0228      	lsls	r0, r5, #8
    bf54:	d400      	bmi.n	bf58 <__aeabi_dsub+0x51c>
    bf56:	e68d      	b.n	bc74 <__aeabi_dsub+0x238>
    bf58:	4650      	mov	r0, sl
    bf5a:	1a17      	subs	r7, r2, r0
    bf5c:	42ba      	cmp	r2, r7
    bf5e:	4192      	sbcs	r2, r2
    bf60:	1b0c      	subs	r4, r1, r4
    bf62:	4252      	negs	r2, r2
    bf64:	1aa4      	subs	r4, r4, r2
    bf66:	4698      	mov	r8, r3
    bf68:	e5ee      	b.n	bb48 <__aeabi_dsub+0x10c>
    bf6a:	000d      	movs	r5, r1
    bf6c:	4315      	orrs	r5, r2
    bf6e:	d100      	bne.n	bf72 <__aeabi_dsub+0x536>
    bf70:	e76b      	b.n	be4a <__aeabi_dsub+0x40e>
    bf72:	4650      	mov	r0, sl
    bf74:	0767      	lsls	r7, r4, #29
    bf76:	08c0      	lsrs	r0, r0, #3
    bf78:	4307      	orrs	r7, r0
    bf7a:	2080      	movs	r0, #128	; 0x80
    bf7c:	08e4      	lsrs	r4, r4, #3
    bf7e:	0300      	lsls	r0, r0, #12
    bf80:	4204      	tst	r4, r0
    bf82:	d007      	beq.n	bf94 <__aeabi_dsub+0x558>
    bf84:	08cd      	lsrs	r5, r1, #3
    bf86:	4205      	tst	r5, r0
    bf88:	d104      	bne.n	bf94 <__aeabi_dsub+0x558>
    bf8a:	002c      	movs	r4, r5
    bf8c:	4698      	mov	r8, r3
    bf8e:	08d7      	lsrs	r7, r2, #3
    bf90:	0749      	lsls	r1, r1, #29
    bf92:	430f      	orrs	r7, r1
    bf94:	0f7b      	lsrs	r3, r7, #29
    bf96:	00e4      	lsls	r4, r4, #3
    bf98:	431c      	orrs	r4, r3
    bf9a:	00ff      	lsls	r7, r7, #3
    bf9c:	4e30      	ldr	r6, [pc, #192]	; (c060 <__aeabi_dsub+0x624>)
    bf9e:	e5d3      	b.n	bb48 <__aeabi_dsub+0x10c>
    bfa0:	4e2f      	ldr	r6, [pc, #188]	; (c060 <__aeabi_dsub+0x624>)
    bfa2:	45b4      	cmp	ip, r6
    bfa4:	d1b4      	bne.n	bf10 <__aeabi_dsub+0x4d4>
    bfa6:	000c      	movs	r4, r1
    bfa8:	0017      	movs	r7, r2
    bfaa:	4666      	mov	r6, ip
    bfac:	e5cc      	b.n	bb48 <__aeabi_dsub+0x10c>
    bfae:	2700      	movs	r7, #0
    bfb0:	2400      	movs	r4, #0
    bfb2:	e5e8      	b.n	bb86 <__aeabi_dsub+0x14a>
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d039      	beq.n	c02c <__aeabi_dsub+0x5f0>
    bfb8:	000b      	movs	r3, r1
    bfba:	4313      	orrs	r3, r2
    bfbc:	d100      	bne.n	bfc0 <__aeabi_dsub+0x584>
    bfbe:	e744      	b.n	be4a <__aeabi_dsub+0x40e>
    bfc0:	08c0      	lsrs	r0, r0, #3
    bfc2:	0767      	lsls	r7, r4, #29
    bfc4:	4307      	orrs	r7, r0
    bfc6:	2080      	movs	r0, #128	; 0x80
    bfc8:	08e4      	lsrs	r4, r4, #3
    bfca:	0300      	lsls	r0, r0, #12
    bfcc:	4204      	tst	r4, r0
    bfce:	d0e1      	beq.n	bf94 <__aeabi_dsub+0x558>
    bfd0:	08cb      	lsrs	r3, r1, #3
    bfd2:	4203      	tst	r3, r0
    bfd4:	d1de      	bne.n	bf94 <__aeabi_dsub+0x558>
    bfd6:	08d7      	lsrs	r7, r2, #3
    bfd8:	0749      	lsls	r1, r1, #29
    bfda:	430f      	orrs	r7, r1
    bfdc:	001c      	movs	r4, r3
    bfde:	e7d9      	b.n	bf94 <__aeabi_dsub+0x558>
    bfe0:	2100      	movs	r1, #0
    bfe2:	e771      	b.n	bec8 <__aeabi_dsub+0x48c>
    bfe4:	2500      	movs	r5, #0
    bfe6:	2700      	movs	r7, #0
    bfe8:	e5e9      	b.n	bbbe <__aeabi_dsub+0x182>
    bfea:	002e      	movs	r6, r5
    bfec:	0027      	movs	r7, r4
    bfee:	3e20      	subs	r6, #32
    bff0:	40f7      	lsrs	r7, r6
    bff2:	2d20      	cmp	r5, #32
    bff4:	d02f      	beq.n	c056 <__aeabi_dsub+0x61a>
    bff6:	2640      	movs	r6, #64	; 0x40
    bff8:	1b75      	subs	r5, r6, r5
    bffa:	40ac      	lsls	r4, r5
    bffc:	4650      	mov	r0, sl
    bffe:	4320      	orrs	r0, r4
    c000:	1e44      	subs	r4, r0, #1
    c002:	41a0      	sbcs	r0, r4
    c004:	2400      	movs	r4, #0
    c006:	4338      	orrs	r0, r7
    c008:	e6dc      	b.n	bdc4 <__aeabi_dsub+0x388>
    c00a:	2480      	movs	r4, #128	; 0x80
    c00c:	2500      	movs	r5, #0
    c00e:	0324      	lsls	r4, r4, #12
    c010:	4e13      	ldr	r6, [pc, #76]	; (c060 <__aeabi_dsub+0x624>)
    c012:	2700      	movs	r7, #0
    c014:	e5d3      	b.n	bbbe <__aeabi_dsub+0x182>
    c016:	4650      	mov	r0, sl
    c018:	4320      	orrs	r0, r4
    c01a:	0007      	movs	r7, r0
    c01c:	1e78      	subs	r0, r7, #1
    c01e:	4187      	sbcs	r7, r0
    c020:	2400      	movs	r4, #0
    c022:	18bf      	adds	r7, r7, r2
    c024:	e760      	b.n	bee8 <__aeabi_dsub+0x4ac>
    c026:	000c      	movs	r4, r1
    c028:	0017      	movs	r7, r2
    c02a:	e58d      	b.n	bb48 <__aeabi_dsub+0x10c>
    c02c:	000c      	movs	r4, r1
    c02e:	0017      	movs	r7, r2
    c030:	4e0b      	ldr	r6, [pc, #44]	; (c060 <__aeabi_dsub+0x624>)
    c032:	e589      	b.n	bb48 <__aeabi_dsub+0x10c>
    c034:	001e      	movs	r6, r3
    c036:	0027      	movs	r7, r4
    c038:	3e20      	subs	r6, #32
    c03a:	40f7      	lsrs	r7, r6
    c03c:	2b20      	cmp	r3, #32
    c03e:	d00c      	beq.n	c05a <__aeabi_dsub+0x61e>
    c040:	2640      	movs	r6, #64	; 0x40
    c042:	1af3      	subs	r3, r6, r3
    c044:	409c      	lsls	r4, r3
    c046:	4650      	mov	r0, sl
    c048:	4320      	orrs	r0, r4
    c04a:	1e44      	subs	r4, r0, #1
    c04c:	41a0      	sbcs	r0, r4
    c04e:	4307      	orrs	r7, r0
    c050:	2400      	movs	r4, #0
    c052:	18bf      	adds	r7, r7, r2
    c054:	e748      	b.n	bee8 <__aeabi_dsub+0x4ac>
    c056:	2400      	movs	r4, #0
    c058:	e7d0      	b.n	bffc <__aeabi_dsub+0x5c0>
    c05a:	2400      	movs	r4, #0
    c05c:	e7f3      	b.n	c046 <__aeabi_dsub+0x60a>
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	000007ff 	.word	0x000007ff
    c064:	ff7fffff 	.word	0xff7fffff

0000c068 <__aeabi_d2iz>:
    c068:	b530      	push	{r4, r5, lr}
    c06a:	4d13      	ldr	r5, [pc, #76]	; (c0b8 <__aeabi_d2iz+0x50>)
    c06c:	030a      	lsls	r2, r1, #12
    c06e:	004b      	lsls	r3, r1, #1
    c070:	0b12      	lsrs	r2, r2, #12
    c072:	0d5b      	lsrs	r3, r3, #21
    c074:	0fc9      	lsrs	r1, r1, #31
    c076:	2400      	movs	r4, #0
    c078:	42ab      	cmp	r3, r5
    c07a:	dd10      	ble.n	c09e <__aeabi_d2iz+0x36>
    c07c:	4c0f      	ldr	r4, [pc, #60]	; (c0bc <__aeabi_d2iz+0x54>)
    c07e:	42a3      	cmp	r3, r4
    c080:	dc0f      	bgt.n	c0a2 <__aeabi_d2iz+0x3a>
    c082:	2480      	movs	r4, #128	; 0x80
    c084:	4d0e      	ldr	r5, [pc, #56]	; (c0c0 <__aeabi_d2iz+0x58>)
    c086:	0364      	lsls	r4, r4, #13
    c088:	4322      	orrs	r2, r4
    c08a:	1aed      	subs	r5, r5, r3
    c08c:	2d1f      	cmp	r5, #31
    c08e:	dd0b      	ble.n	c0a8 <__aeabi_d2iz+0x40>
    c090:	480c      	ldr	r0, [pc, #48]	; (c0c4 <__aeabi_d2iz+0x5c>)
    c092:	1ac3      	subs	r3, r0, r3
    c094:	40da      	lsrs	r2, r3
    c096:	4254      	negs	r4, r2
    c098:	2900      	cmp	r1, #0
    c09a:	d100      	bne.n	c09e <__aeabi_d2iz+0x36>
    c09c:	0014      	movs	r4, r2
    c09e:	0020      	movs	r0, r4
    c0a0:	bd30      	pop	{r4, r5, pc}
    c0a2:	4b09      	ldr	r3, [pc, #36]	; (c0c8 <__aeabi_d2iz+0x60>)
    c0a4:	18cc      	adds	r4, r1, r3
    c0a6:	e7fa      	b.n	c09e <__aeabi_d2iz+0x36>
    c0a8:	4c08      	ldr	r4, [pc, #32]	; (c0cc <__aeabi_d2iz+0x64>)
    c0aa:	40e8      	lsrs	r0, r5
    c0ac:	46a4      	mov	ip, r4
    c0ae:	4463      	add	r3, ip
    c0b0:	409a      	lsls	r2, r3
    c0b2:	4302      	orrs	r2, r0
    c0b4:	e7ef      	b.n	c096 <__aeabi_d2iz+0x2e>
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	000003fe 	.word	0x000003fe
    c0bc:	0000041d 	.word	0x0000041d
    c0c0:	00000433 	.word	0x00000433
    c0c4:	00000413 	.word	0x00000413
    c0c8:	7fffffff 	.word	0x7fffffff
    c0cc:	fffffbed 	.word	0xfffffbed

0000c0d0 <__aeabi_ui2d>:
    c0d0:	b510      	push	{r4, lr}
    c0d2:	1e04      	subs	r4, r0, #0
    c0d4:	d028      	beq.n	c128 <__aeabi_ui2d+0x58>
    c0d6:	f000 f8c3 	bl	c260 <__clzsi2>
    c0da:	4b15      	ldr	r3, [pc, #84]	; (c130 <__aeabi_ui2d+0x60>)
    c0dc:	4a15      	ldr	r2, [pc, #84]	; (c134 <__aeabi_ui2d+0x64>)
    c0de:	1a1b      	subs	r3, r3, r0
    c0e0:	1ad2      	subs	r2, r2, r3
    c0e2:	2a1f      	cmp	r2, #31
    c0e4:	dd15      	ble.n	c112 <__aeabi_ui2d+0x42>
    c0e6:	4a14      	ldr	r2, [pc, #80]	; (c138 <__aeabi_ui2d+0x68>)
    c0e8:	1ad2      	subs	r2, r2, r3
    c0ea:	4094      	lsls	r4, r2
    c0ec:	2200      	movs	r2, #0
    c0ee:	0324      	lsls	r4, r4, #12
    c0f0:	055b      	lsls	r3, r3, #21
    c0f2:	0b24      	lsrs	r4, r4, #12
    c0f4:	0d5b      	lsrs	r3, r3, #21
    c0f6:	2100      	movs	r1, #0
    c0f8:	0010      	movs	r0, r2
    c0fa:	0324      	lsls	r4, r4, #12
    c0fc:	0d0a      	lsrs	r2, r1, #20
    c0fe:	0b24      	lsrs	r4, r4, #12
    c100:	0512      	lsls	r2, r2, #20
    c102:	4322      	orrs	r2, r4
    c104:	4c0d      	ldr	r4, [pc, #52]	; (c13c <__aeabi_ui2d+0x6c>)
    c106:	051b      	lsls	r3, r3, #20
    c108:	4022      	ands	r2, r4
    c10a:	4313      	orrs	r3, r2
    c10c:	005b      	lsls	r3, r3, #1
    c10e:	0859      	lsrs	r1, r3, #1
    c110:	bd10      	pop	{r4, pc}
    c112:	0021      	movs	r1, r4
    c114:	4091      	lsls	r1, r2
    c116:	000a      	movs	r2, r1
    c118:	210b      	movs	r1, #11
    c11a:	1a08      	subs	r0, r1, r0
    c11c:	40c4      	lsrs	r4, r0
    c11e:	055b      	lsls	r3, r3, #21
    c120:	0324      	lsls	r4, r4, #12
    c122:	0b24      	lsrs	r4, r4, #12
    c124:	0d5b      	lsrs	r3, r3, #21
    c126:	e7e6      	b.n	c0f6 <__aeabi_ui2d+0x26>
    c128:	2300      	movs	r3, #0
    c12a:	2400      	movs	r4, #0
    c12c:	2200      	movs	r2, #0
    c12e:	e7e2      	b.n	c0f6 <__aeabi_ui2d+0x26>
    c130:	0000041e 	.word	0x0000041e
    c134:	00000433 	.word	0x00000433
    c138:	00000413 	.word	0x00000413
    c13c:	800fffff 	.word	0x800fffff

0000c140 <__aeabi_f2d>:
    c140:	0041      	lsls	r1, r0, #1
    c142:	0e09      	lsrs	r1, r1, #24
    c144:	1c4b      	adds	r3, r1, #1
    c146:	b570      	push	{r4, r5, r6, lr}
    c148:	b2db      	uxtb	r3, r3
    c14a:	0246      	lsls	r6, r0, #9
    c14c:	0a75      	lsrs	r5, r6, #9
    c14e:	0fc4      	lsrs	r4, r0, #31
    c150:	2b01      	cmp	r3, #1
    c152:	dd14      	ble.n	c17e <__aeabi_f2d+0x3e>
    c154:	23e0      	movs	r3, #224	; 0xe0
    c156:	009b      	lsls	r3, r3, #2
    c158:	076d      	lsls	r5, r5, #29
    c15a:	0b36      	lsrs	r6, r6, #12
    c15c:	18cb      	adds	r3, r1, r3
    c15e:	2100      	movs	r1, #0
    c160:	0d0a      	lsrs	r2, r1, #20
    c162:	0028      	movs	r0, r5
    c164:	0512      	lsls	r2, r2, #20
    c166:	4d1c      	ldr	r5, [pc, #112]	; (c1d8 <__aeabi_f2d+0x98>)
    c168:	4332      	orrs	r2, r6
    c16a:	055b      	lsls	r3, r3, #21
    c16c:	402a      	ands	r2, r5
    c16e:	085b      	lsrs	r3, r3, #1
    c170:	4313      	orrs	r3, r2
    c172:	005b      	lsls	r3, r3, #1
    c174:	07e4      	lsls	r4, r4, #31
    c176:	085b      	lsrs	r3, r3, #1
    c178:	4323      	orrs	r3, r4
    c17a:	0019      	movs	r1, r3
    c17c:	bd70      	pop	{r4, r5, r6, pc}
    c17e:	2900      	cmp	r1, #0
    c180:	d114      	bne.n	c1ac <__aeabi_f2d+0x6c>
    c182:	2d00      	cmp	r5, #0
    c184:	d01e      	beq.n	c1c4 <__aeabi_f2d+0x84>
    c186:	0028      	movs	r0, r5
    c188:	f000 f86a 	bl	c260 <__clzsi2>
    c18c:	280a      	cmp	r0, #10
    c18e:	dc1c      	bgt.n	c1ca <__aeabi_f2d+0x8a>
    c190:	230b      	movs	r3, #11
    c192:	002a      	movs	r2, r5
    c194:	1a1b      	subs	r3, r3, r0
    c196:	40da      	lsrs	r2, r3
    c198:	0003      	movs	r3, r0
    c19a:	3315      	adds	r3, #21
    c19c:	409d      	lsls	r5, r3
    c19e:	4b0f      	ldr	r3, [pc, #60]	; (c1dc <__aeabi_f2d+0x9c>)
    c1a0:	0312      	lsls	r2, r2, #12
    c1a2:	1a1b      	subs	r3, r3, r0
    c1a4:	055b      	lsls	r3, r3, #21
    c1a6:	0b16      	lsrs	r6, r2, #12
    c1a8:	0d5b      	lsrs	r3, r3, #21
    c1aa:	e7d8      	b.n	c15e <__aeabi_f2d+0x1e>
    c1ac:	2d00      	cmp	r5, #0
    c1ae:	d006      	beq.n	c1be <__aeabi_f2d+0x7e>
    c1b0:	0b32      	lsrs	r2, r6, #12
    c1b2:	2680      	movs	r6, #128	; 0x80
    c1b4:	0336      	lsls	r6, r6, #12
    c1b6:	076d      	lsls	r5, r5, #29
    c1b8:	4316      	orrs	r6, r2
    c1ba:	4b09      	ldr	r3, [pc, #36]	; (c1e0 <__aeabi_f2d+0xa0>)
    c1bc:	e7cf      	b.n	c15e <__aeabi_f2d+0x1e>
    c1be:	4b08      	ldr	r3, [pc, #32]	; (c1e0 <__aeabi_f2d+0xa0>)
    c1c0:	2600      	movs	r6, #0
    c1c2:	e7cc      	b.n	c15e <__aeabi_f2d+0x1e>
    c1c4:	2300      	movs	r3, #0
    c1c6:	2600      	movs	r6, #0
    c1c8:	e7c9      	b.n	c15e <__aeabi_f2d+0x1e>
    c1ca:	0003      	movs	r3, r0
    c1cc:	002a      	movs	r2, r5
    c1ce:	3b0b      	subs	r3, #11
    c1d0:	409a      	lsls	r2, r3
    c1d2:	2500      	movs	r5, #0
    c1d4:	e7e3      	b.n	c19e <__aeabi_f2d+0x5e>
    c1d6:	46c0      	nop			; (mov r8, r8)
    c1d8:	800fffff 	.word	0x800fffff
    c1dc:	00000389 	.word	0x00000389
    c1e0:	000007ff 	.word	0x000007ff

0000c1e4 <__aeabi_cdrcmple>:
    c1e4:	4684      	mov	ip, r0
    c1e6:	1c10      	adds	r0, r2, #0
    c1e8:	4662      	mov	r2, ip
    c1ea:	468c      	mov	ip, r1
    c1ec:	1c19      	adds	r1, r3, #0
    c1ee:	4663      	mov	r3, ip
    c1f0:	e000      	b.n	c1f4 <__aeabi_cdcmpeq>
    c1f2:	46c0      	nop			; (mov r8, r8)

0000c1f4 <__aeabi_cdcmpeq>:
    c1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c1f6:	f000 f8ef 	bl	c3d8 <__ledf2>
    c1fa:	2800      	cmp	r0, #0
    c1fc:	d401      	bmi.n	c202 <__aeabi_cdcmpeq+0xe>
    c1fe:	2100      	movs	r1, #0
    c200:	42c8      	cmn	r0, r1
    c202:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c204 <__aeabi_dcmpeq>:
    c204:	b510      	push	{r4, lr}
    c206:	f000 f849 	bl	c29c <__eqdf2>
    c20a:	4240      	negs	r0, r0
    c20c:	3001      	adds	r0, #1
    c20e:	bd10      	pop	{r4, pc}

0000c210 <__aeabi_dcmplt>:
    c210:	b510      	push	{r4, lr}
    c212:	f000 f8e1 	bl	c3d8 <__ledf2>
    c216:	2800      	cmp	r0, #0
    c218:	db01      	blt.n	c21e <__aeabi_dcmplt+0xe>
    c21a:	2000      	movs	r0, #0
    c21c:	bd10      	pop	{r4, pc}
    c21e:	2001      	movs	r0, #1
    c220:	bd10      	pop	{r4, pc}
    c222:	46c0      	nop			; (mov r8, r8)

0000c224 <__aeabi_dcmple>:
    c224:	b510      	push	{r4, lr}
    c226:	f000 f8d7 	bl	c3d8 <__ledf2>
    c22a:	2800      	cmp	r0, #0
    c22c:	dd01      	ble.n	c232 <__aeabi_dcmple+0xe>
    c22e:	2000      	movs	r0, #0
    c230:	bd10      	pop	{r4, pc}
    c232:	2001      	movs	r0, #1
    c234:	bd10      	pop	{r4, pc}
    c236:	46c0      	nop			; (mov r8, r8)

0000c238 <__aeabi_dcmpgt>:
    c238:	b510      	push	{r4, lr}
    c23a:	f000 f869 	bl	c310 <__gedf2>
    c23e:	2800      	cmp	r0, #0
    c240:	dc01      	bgt.n	c246 <__aeabi_dcmpgt+0xe>
    c242:	2000      	movs	r0, #0
    c244:	bd10      	pop	{r4, pc}
    c246:	2001      	movs	r0, #1
    c248:	bd10      	pop	{r4, pc}
    c24a:	46c0      	nop			; (mov r8, r8)

0000c24c <__aeabi_dcmpge>:
    c24c:	b510      	push	{r4, lr}
    c24e:	f000 f85f 	bl	c310 <__gedf2>
    c252:	2800      	cmp	r0, #0
    c254:	da01      	bge.n	c25a <__aeabi_dcmpge+0xe>
    c256:	2000      	movs	r0, #0
    c258:	bd10      	pop	{r4, pc}
    c25a:	2001      	movs	r0, #1
    c25c:	bd10      	pop	{r4, pc}
    c25e:	46c0      	nop			; (mov r8, r8)

0000c260 <__clzsi2>:
    c260:	211c      	movs	r1, #28
    c262:	2301      	movs	r3, #1
    c264:	041b      	lsls	r3, r3, #16
    c266:	4298      	cmp	r0, r3
    c268:	d301      	bcc.n	c26e <__clzsi2+0xe>
    c26a:	0c00      	lsrs	r0, r0, #16
    c26c:	3910      	subs	r1, #16
    c26e:	0a1b      	lsrs	r3, r3, #8
    c270:	4298      	cmp	r0, r3
    c272:	d301      	bcc.n	c278 <__clzsi2+0x18>
    c274:	0a00      	lsrs	r0, r0, #8
    c276:	3908      	subs	r1, #8
    c278:	091b      	lsrs	r3, r3, #4
    c27a:	4298      	cmp	r0, r3
    c27c:	d301      	bcc.n	c282 <__clzsi2+0x22>
    c27e:	0900      	lsrs	r0, r0, #4
    c280:	3904      	subs	r1, #4
    c282:	a202      	add	r2, pc, #8	; (adr r2, c28c <__clzsi2+0x2c>)
    c284:	5c10      	ldrb	r0, [r2, r0]
    c286:	1840      	adds	r0, r0, r1
    c288:	4770      	bx	lr
    c28a:	46c0      	nop			; (mov r8, r8)
    c28c:	02020304 	.word	0x02020304
    c290:	01010101 	.word	0x01010101
	...

0000c29c <__eqdf2>:
    c29c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c29e:	464f      	mov	r7, r9
    c2a0:	4646      	mov	r6, r8
    c2a2:	46d6      	mov	lr, sl
    c2a4:	005c      	lsls	r4, r3, #1
    c2a6:	b5c0      	push	{r6, r7, lr}
    c2a8:	031f      	lsls	r7, r3, #12
    c2aa:	0fdb      	lsrs	r3, r3, #31
    c2ac:	469a      	mov	sl, r3
    c2ae:	4b17      	ldr	r3, [pc, #92]	; (c30c <__eqdf2+0x70>)
    c2b0:	030e      	lsls	r6, r1, #12
    c2b2:	004d      	lsls	r5, r1, #1
    c2b4:	4684      	mov	ip, r0
    c2b6:	4680      	mov	r8, r0
    c2b8:	0b36      	lsrs	r6, r6, #12
    c2ba:	0d6d      	lsrs	r5, r5, #21
    c2bc:	0fc9      	lsrs	r1, r1, #31
    c2be:	4691      	mov	r9, r2
    c2c0:	0b3f      	lsrs	r7, r7, #12
    c2c2:	0d64      	lsrs	r4, r4, #21
    c2c4:	2001      	movs	r0, #1
    c2c6:	429d      	cmp	r5, r3
    c2c8:	d008      	beq.n	c2dc <__eqdf2+0x40>
    c2ca:	429c      	cmp	r4, r3
    c2cc:	d001      	beq.n	c2d2 <__eqdf2+0x36>
    c2ce:	42a5      	cmp	r5, r4
    c2d0:	d00b      	beq.n	c2ea <__eqdf2+0x4e>
    c2d2:	bc1c      	pop	{r2, r3, r4}
    c2d4:	4690      	mov	r8, r2
    c2d6:	4699      	mov	r9, r3
    c2d8:	46a2      	mov	sl, r4
    c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2dc:	4663      	mov	r3, ip
    c2de:	4333      	orrs	r3, r6
    c2e0:	d1f7      	bne.n	c2d2 <__eqdf2+0x36>
    c2e2:	42ac      	cmp	r4, r5
    c2e4:	d1f5      	bne.n	c2d2 <__eqdf2+0x36>
    c2e6:	433a      	orrs	r2, r7
    c2e8:	d1f3      	bne.n	c2d2 <__eqdf2+0x36>
    c2ea:	2001      	movs	r0, #1
    c2ec:	42be      	cmp	r6, r7
    c2ee:	d1f0      	bne.n	c2d2 <__eqdf2+0x36>
    c2f0:	45c8      	cmp	r8, r9
    c2f2:	d1ee      	bne.n	c2d2 <__eqdf2+0x36>
    c2f4:	4551      	cmp	r1, sl
    c2f6:	d007      	beq.n	c308 <__eqdf2+0x6c>
    c2f8:	2d00      	cmp	r5, #0
    c2fa:	d1ea      	bne.n	c2d2 <__eqdf2+0x36>
    c2fc:	4663      	mov	r3, ip
    c2fe:	431e      	orrs	r6, r3
    c300:	0030      	movs	r0, r6
    c302:	1e46      	subs	r6, r0, #1
    c304:	41b0      	sbcs	r0, r6
    c306:	e7e4      	b.n	c2d2 <__eqdf2+0x36>
    c308:	2000      	movs	r0, #0
    c30a:	e7e2      	b.n	c2d2 <__eqdf2+0x36>
    c30c:	000007ff 	.word	0x000007ff

0000c310 <__gedf2>:
    c310:	b5f0      	push	{r4, r5, r6, r7, lr}
    c312:	4645      	mov	r5, r8
    c314:	46de      	mov	lr, fp
    c316:	4657      	mov	r7, sl
    c318:	464e      	mov	r6, r9
    c31a:	b5e0      	push	{r5, r6, r7, lr}
    c31c:	031f      	lsls	r7, r3, #12
    c31e:	0b3d      	lsrs	r5, r7, #12
    c320:	4f2c      	ldr	r7, [pc, #176]	; (c3d4 <__gedf2+0xc4>)
    c322:	030e      	lsls	r6, r1, #12
    c324:	004c      	lsls	r4, r1, #1
    c326:	46ab      	mov	fp, r5
    c328:	005d      	lsls	r5, r3, #1
    c32a:	4684      	mov	ip, r0
    c32c:	0b36      	lsrs	r6, r6, #12
    c32e:	0d64      	lsrs	r4, r4, #21
    c330:	0fc9      	lsrs	r1, r1, #31
    c332:	4690      	mov	r8, r2
    c334:	0d6d      	lsrs	r5, r5, #21
    c336:	0fdb      	lsrs	r3, r3, #31
    c338:	42bc      	cmp	r4, r7
    c33a:	d02a      	beq.n	c392 <__gedf2+0x82>
    c33c:	4f25      	ldr	r7, [pc, #148]	; (c3d4 <__gedf2+0xc4>)
    c33e:	42bd      	cmp	r5, r7
    c340:	d02d      	beq.n	c39e <__gedf2+0x8e>
    c342:	2c00      	cmp	r4, #0
    c344:	d10f      	bne.n	c366 <__gedf2+0x56>
    c346:	4330      	orrs	r0, r6
    c348:	0007      	movs	r7, r0
    c34a:	4681      	mov	r9, r0
    c34c:	4278      	negs	r0, r7
    c34e:	4178      	adcs	r0, r7
    c350:	b2c0      	uxtb	r0, r0
    c352:	2d00      	cmp	r5, #0
    c354:	d117      	bne.n	c386 <__gedf2+0x76>
    c356:	465f      	mov	r7, fp
    c358:	433a      	orrs	r2, r7
    c35a:	d114      	bne.n	c386 <__gedf2+0x76>
    c35c:	464b      	mov	r3, r9
    c35e:	2000      	movs	r0, #0
    c360:	2b00      	cmp	r3, #0
    c362:	d00a      	beq.n	c37a <__gedf2+0x6a>
    c364:	e006      	b.n	c374 <__gedf2+0x64>
    c366:	2d00      	cmp	r5, #0
    c368:	d102      	bne.n	c370 <__gedf2+0x60>
    c36a:	4658      	mov	r0, fp
    c36c:	4302      	orrs	r2, r0
    c36e:	d001      	beq.n	c374 <__gedf2+0x64>
    c370:	4299      	cmp	r1, r3
    c372:	d018      	beq.n	c3a6 <__gedf2+0x96>
    c374:	4248      	negs	r0, r1
    c376:	2101      	movs	r1, #1
    c378:	4308      	orrs	r0, r1
    c37a:	bc3c      	pop	{r2, r3, r4, r5}
    c37c:	4690      	mov	r8, r2
    c37e:	4699      	mov	r9, r3
    c380:	46a2      	mov	sl, r4
    c382:	46ab      	mov	fp, r5
    c384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c386:	2800      	cmp	r0, #0
    c388:	d0f2      	beq.n	c370 <__gedf2+0x60>
    c38a:	2001      	movs	r0, #1
    c38c:	3b01      	subs	r3, #1
    c38e:	4318      	orrs	r0, r3
    c390:	e7f3      	b.n	c37a <__gedf2+0x6a>
    c392:	0037      	movs	r7, r6
    c394:	4307      	orrs	r7, r0
    c396:	d0d1      	beq.n	c33c <__gedf2+0x2c>
    c398:	2002      	movs	r0, #2
    c39a:	4240      	negs	r0, r0
    c39c:	e7ed      	b.n	c37a <__gedf2+0x6a>
    c39e:	465f      	mov	r7, fp
    c3a0:	4317      	orrs	r7, r2
    c3a2:	d0ce      	beq.n	c342 <__gedf2+0x32>
    c3a4:	e7f8      	b.n	c398 <__gedf2+0x88>
    c3a6:	42ac      	cmp	r4, r5
    c3a8:	dce4      	bgt.n	c374 <__gedf2+0x64>
    c3aa:	da03      	bge.n	c3b4 <__gedf2+0xa4>
    c3ac:	1e48      	subs	r0, r1, #1
    c3ae:	2101      	movs	r1, #1
    c3b0:	4308      	orrs	r0, r1
    c3b2:	e7e2      	b.n	c37a <__gedf2+0x6a>
    c3b4:	455e      	cmp	r6, fp
    c3b6:	d8dd      	bhi.n	c374 <__gedf2+0x64>
    c3b8:	d006      	beq.n	c3c8 <__gedf2+0xb8>
    c3ba:	2000      	movs	r0, #0
    c3bc:	455e      	cmp	r6, fp
    c3be:	d2dc      	bcs.n	c37a <__gedf2+0x6a>
    c3c0:	2301      	movs	r3, #1
    c3c2:	1e48      	subs	r0, r1, #1
    c3c4:	4318      	orrs	r0, r3
    c3c6:	e7d8      	b.n	c37a <__gedf2+0x6a>
    c3c8:	45c4      	cmp	ip, r8
    c3ca:	d8d3      	bhi.n	c374 <__gedf2+0x64>
    c3cc:	2000      	movs	r0, #0
    c3ce:	45c4      	cmp	ip, r8
    c3d0:	d3f6      	bcc.n	c3c0 <__gedf2+0xb0>
    c3d2:	e7d2      	b.n	c37a <__gedf2+0x6a>
    c3d4:	000007ff 	.word	0x000007ff

0000c3d8 <__ledf2>:
    c3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3da:	464e      	mov	r6, r9
    c3dc:	4645      	mov	r5, r8
    c3de:	46de      	mov	lr, fp
    c3e0:	4657      	mov	r7, sl
    c3e2:	005c      	lsls	r4, r3, #1
    c3e4:	b5e0      	push	{r5, r6, r7, lr}
    c3e6:	031f      	lsls	r7, r3, #12
    c3e8:	0fdb      	lsrs	r3, r3, #31
    c3ea:	4699      	mov	r9, r3
    c3ec:	4b2a      	ldr	r3, [pc, #168]	; (c498 <__ledf2+0xc0>)
    c3ee:	030e      	lsls	r6, r1, #12
    c3f0:	004d      	lsls	r5, r1, #1
    c3f2:	0fc9      	lsrs	r1, r1, #31
    c3f4:	4684      	mov	ip, r0
    c3f6:	0b36      	lsrs	r6, r6, #12
    c3f8:	0d6d      	lsrs	r5, r5, #21
    c3fa:	468b      	mov	fp, r1
    c3fc:	4690      	mov	r8, r2
    c3fe:	0b3f      	lsrs	r7, r7, #12
    c400:	0d64      	lsrs	r4, r4, #21
    c402:	429d      	cmp	r5, r3
    c404:	d020      	beq.n	c448 <__ledf2+0x70>
    c406:	4b24      	ldr	r3, [pc, #144]	; (c498 <__ledf2+0xc0>)
    c408:	429c      	cmp	r4, r3
    c40a:	d022      	beq.n	c452 <__ledf2+0x7a>
    c40c:	2d00      	cmp	r5, #0
    c40e:	d112      	bne.n	c436 <__ledf2+0x5e>
    c410:	4330      	orrs	r0, r6
    c412:	4243      	negs	r3, r0
    c414:	4143      	adcs	r3, r0
    c416:	b2db      	uxtb	r3, r3
    c418:	2c00      	cmp	r4, #0
    c41a:	d01f      	beq.n	c45c <__ledf2+0x84>
    c41c:	2b00      	cmp	r3, #0
    c41e:	d00c      	beq.n	c43a <__ledf2+0x62>
    c420:	464b      	mov	r3, r9
    c422:	2001      	movs	r0, #1
    c424:	3b01      	subs	r3, #1
    c426:	4303      	orrs	r3, r0
    c428:	0018      	movs	r0, r3
    c42a:	bc3c      	pop	{r2, r3, r4, r5}
    c42c:	4690      	mov	r8, r2
    c42e:	4699      	mov	r9, r3
    c430:	46a2      	mov	sl, r4
    c432:	46ab      	mov	fp, r5
    c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c436:	2c00      	cmp	r4, #0
    c438:	d016      	beq.n	c468 <__ledf2+0x90>
    c43a:	45cb      	cmp	fp, r9
    c43c:	d017      	beq.n	c46e <__ledf2+0x96>
    c43e:	465b      	mov	r3, fp
    c440:	4259      	negs	r1, r3
    c442:	2301      	movs	r3, #1
    c444:	430b      	orrs	r3, r1
    c446:	e7ef      	b.n	c428 <__ledf2+0x50>
    c448:	0031      	movs	r1, r6
    c44a:	2302      	movs	r3, #2
    c44c:	4301      	orrs	r1, r0
    c44e:	d1eb      	bne.n	c428 <__ledf2+0x50>
    c450:	e7d9      	b.n	c406 <__ledf2+0x2e>
    c452:	0039      	movs	r1, r7
    c454:	2302      	movs	r3, #2
    c456:	4311      	orrs	r1, r2
    c458:	d1e6      	bne.n	c428 <__ledf2+0x50>
    c45a:	e7d7      	b.n	c40c <__ledf2+0x34>
    c45c:	433a      	orrs	r2, r7
    c45e:	d1dd      	bne.n	c41c <__ledf2+0x44>
    c460:	2300      	movs	r3, #0
    c462:	2800      	cmp	r0, #0
    c464:	d0e0      	beq.n	c428 <__ledf2+0x50>
    c466:	e7ea      	b.n	c43e <__ledf2+0x66>
    c468:	433a      	orrs	r2, r7
    c46a:	d1e6      	bne.n	c43a <__ledf2+0x62>
    c46c:	e7e7      	b.n	c43e <__ledf2+0x66>
    c46e:	42a5      	cmp	r5, r4
    c470:	dce5      	bgt.n	c43e <__ledf2+0x66>
    c472:	db05      	blt.n	c480 <__ledf2+0xa8>
    c474:	42be      	cmp	r6, r7
    c476:	d8e2      	bhi.n	c43e <__ledf2+0x66>
    c478:	d007      	beq.n	c48a <__ledf2+0xb2>
    c47a:	2300      	movs	r3, #0
    c47c:	42be      	cmp	r6, r7
    c47e:	d2d3      	bcs.n	c428 <__ledf2+0x50>
    c480:	4659      	mov	r1, fp
    c482:	2301      	movs	r3, #1
    c484:	3901      	subs	r1, #1
    c486:	430b      	orrs	r3, r1
    c488:	e7ce      	b.n	c428 <__ledf2+0x50>
    c48a:	45c4      	cmp	ip, r8
    c48c:	d8d7      	bhi.n	c43e <__ledf2+0x66>
    c48e:	2300      	movs	r3, #0
    c490:	45c4      	cmp	ip, r8
    c492:	d3f5      	bcc.n	c480 <__ledf2+0xa8>
    c494:	e7c8      	b.n	c428 <__ledf2+0x50>
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	000007ff 	.word	0x000007ff

0000c49c <__libc_init_array>:
    c49c:	b570      	push	{r4, r5, r6, lr}
    c49e:	4e0d      	ldr	r6, [pc, #52]	; (c4d4 <__libc_init_array+0x38>)
    c4a0:	4d0d      	ldr	r5, [pc, #52]	; (c4d8 <__libc_init_array+0x3c>)
    c4a2:	2400      	movs	r4, #0
    c4a4:	1bad      	subs	r5, r5, r6
    c4a6:	10ad      	asrs	r5, r5, #2
    c4a8:	d005      	beq.n	c4b6 <__libc_init_array+0x1a>
    c4aa:	00a3      	lsls	r3, r4, #2
    c4ac:	58f3      	ldr	r3, [r6, r3]
    c4ae:	3401      	adds	r4, #1
    c4b0:	4798      	blx	r3
    c4b2:	42a5      	cmp	r5, r4
    c4b4:	d1f9      	bne.n	c4aa <__libc_init_array+0xe>
    c4b6:	f000 fa43 	bl	c940 <_init>
    c4ba:	4e08      	ldr	r6, [pc, #32]	; (c4dc <__libc_init_array+0x40>)
    c4bc:	4d08      	ldr	r5, [pc, #32]	; (c4e0 <__libc_init_array+0x44>)
    c4be:	2400      	movs	r4, #0
    c4c0:	1bad      	subs	r5, r5, r6
    c4c2:	10ad      	asrs	r5, r5, #2
    c4c4:	d005      	beq.n	c4d2 <__libc_init_array+0x36>
    c4c6:	00a3      	lsls	r3, r4, #2
    c4c8:	58f3      	ldr	r3, [r6, r3]
    c4ca:	3401      	adds	r4, #1
    c4cc:	4798      	blx	r3
    c4ce:	42a5      	cmp	r5, r4
    c4d0:	d1f9      	bne.n	c4c6 <__libc_init_array+0x2a>
    c4d2:	bd70      	pop	{r4, r5, r6, pc}
    c4d4:	0000c94c 	.word	0x0000c94c
    c4d8:	0000c94c 	.word	0x0000c94c
    c4dc:	0000c94c 	.word	0x0000c94c
    c4e0:	0000c954 	.word	0x0000c954

0000c4e4 <memcpy>:
    c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4e6:	0005      	movs	r5, r0
    c4e8:	2a0f      	cmp	r2, #15
    c4ea:	d92f      	bls.n	c54c <memcpy+0x68>
    c4ec:	000b      	movs	r3, r1
    c4ee:	4303      	orrs	r3, r0
    c4f0:	079b      	lsls	r3, r3, #30
    c4f2:	d134      	bne.n	c55e <memcpy+0x7a>
    c4f4:	0016      	movs	r6, r2
    c4f6:	000c      	movs	r4, r1
    c4f8:	0003      	movs	r3, r0
    c4fa:	3e10      	subs	r6, #16
    c4fc:	0935      	lsrs	r5, r6, #4
    c4fe:	3501      	adds	r5, #1
    c500:	012d      	lsls	r5, r5, #4
    c502:	1945      	adds	r5, r0, r5
    c504:	6827      	ldr	r7, [r4, #0]
    c506:	601f      	str	r7, [r3, #0]
    c508:	6867      	ldr	r7, [r4, #4]
    c50a:	605f      	str	r7, [r3, #4]
    c50c:	68a7      	ldr	r7, [r4, #8]
    c50e:	609f      	str	r7, [r3, #8]
    c510:	68e7      	ldr	r7, [r4, #12]
    c512:	3410      	adds	r4, #16
    c514:	60df      	str	r7, [r3, #12]
    c516:	3310      	adds	r3, #16
    c518:	429d      	cmp	r5, r3
    c51a:	d1f3      	bne.n	c504 <memcpy+0x20>
    c51c:	230f      	movs	r3, #15
    c51e:	439e      	bics	r6, r3
    c520:	3610      	adds	r6, #16
    c522:	1985      	adds	r5, r0, r6
    c524:	1989      	adds	r1, r1, r6
    c526:	4013      	ands	r3, r2
    c528:	2b03      	cmp	r3, #3
    c52a:	d91a      	bls.n	c562 <memcpy+0x7e>
    c52c:	1f1e      	subs	r6, r3, #4
    c52e:	2300      	movs	r3, #0
    c530:	08b4      	lsrs	r4, r6, #2
    c532:	3401      	adds	r4, #1
    c534:	00a4      	lsls	r4, r4, #2
    c536:	58cf      	ldr	r7, [r1, r3]
    c538:	50ef      	str	r7, [r5, r3]
    c53a:	3304      	adds	r3, #4
    c53c:	42a3      	cmp	r3, r4
    c53e:	d1fa      	bne.n	c536 <memcpy+0x52>
    c540:	2403      	movs	r4, #3
    c542:	43a6      	bics	r6, r4
    c544:	1d33      	adds	r3, r6, #4
    c546:	4022      	ands	r2, r4
    c548:	18c9      	adds	r1, r1, r3
    c54a:	18ed      	adds	r5, r5, r3
    c54c:	2a00      	cmp	r2, #0
    c54e:	d005      	beq.n	c55c <memcpy+0x78>
    c550:	2300      	movs	r3, #0
    c552:	5ccc      	ldrb	r4, [r1, r3]
    c554:	54ec      	strb	r4, [r5, r3]
    c556:	3301      	adds	r3, #1
    c558:	4293      	cmp	r3, r2
    c55a:	d1fa      	bne.n	c552 <memcpy+0x6e>
    c55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c55e:	0005      	movs	r5, r0
    c560:	e7f6      	b.n	c550 <memcpy+0x6c>
    c562:	001a      	movs	r2, r3
    c564:	e7f2      	b.n	c54c <memcpy+0x68>
    c566:	46c0      	nop			; (mov r8, r8)

0000c568 <memset>:
    c568:	b5f0      	push	{r4, r5, r6, r7, lr}
    c56a:	0783      	lsls	r3, r0, #30
    c56c:	d043      	beq.n	c5f6 <memset+0x8e>
    c56e:	1e54      	subs	r4, r2, #1
    c570:	2a00      	cmp	r2, #0
    c572:	d03f      	beq.n	c5f4 <memset+0x8c>
    c574:	b2ce      	uxtb	r6, r1
    c576:	0002      	movs	r2, r0
    c578:	2503      	movs	r5, #3
    c57a:	e002      	b.n	c582 <memset+0x1a>
    c57c:	001a      	movs	r2, r3
    c57e:	3c01      	subs	r4, #1
    c580:	d338      	bcc.n	c5f4 <memset+0x8c>
    c582:	1c53      	adds	r3, r2, #1
    c584:	7016      	strb	r6, [r2, #0]
    c586:	422b      	tst	r3, r5
    c588:	d1f8      	bne.n	c57c <memset+0x14>
    c58a:	2c03      	cmp	r4, #3
    c58c:	d92a      	bls.n	c5e4 <memset+0x7c>
    c58e:	22ff      	movs	r2, #255	; 0xff
    c590:	400a      	ands	r2, r1
    c592:	0215      	lsls	r5, r2, #8
    c594:	4315      	orrs	r5, r2
    c596:	042a      	lsls	r2, r5, #16
    c598:	4315      	orrs	r5, r2
    c59a:	2c0f      	cmp	r4, #15
    c59c:	d914      	bls.n	c5c8 <memset+0x60>
    c59e:	0027      	movs	r7, r4
    c5a0:	001a      	movs	r2, r3
    c5a2:	3f10      	subs	r7, #16
    c5a4:	093e      	lsrs	r6, r7, #4
    c5a6:	3601      	adds	r6, #1
    c5a8:	0136      	lsls	r6, r6, #4
    c5aa:	199e      	adds	r6, r3, r6
    c5ac:	6015      	str	r5, [r2, #0]
    c5ae:	6055      	str	r5, [r2, #4]
    c5b0:	6095      	str	r5, [r2, #8]
    c5b2:	60d5      	str	r5, [r2, #12]
    c5b4:	3210      	adds	r2, #16
    c5b6:	4296      	cmp	r6, r2
    c5b8:	d1f8      	bne.n	c5ac <memset+0x44>
    c5ba:	220f      	movs	r2, #15
    c5bc:	4397      	bics	r7, r2
    c5be:	3710      	adds	r7, #16
    c5c0:	19db      	adds	r3, r3, r7
    c5c2:	4014      	ands	r4, r2
    c5c4:	2c03      	cmp	r4, #3
    c5c6:	d90d      	bls.n	c5e4 <memset+0x7c>
    c5c8:	001a      	movs	r2, r3
    c5ca:	1f27      	subs	r7, r4, #4
    c5cc:	08be      	lsrs	r6, r7, #2
    c5ce:	3601      	adds	r6, #1
    c5d0:	00b6      	lsls	r6, r6, #2
    c5d2:	199e      	adds	r6, r3, r6
    c5d4:	c220      	stmia	r2!, {r5}
    c5d6:	42b2      	cmp	r2, r6
    c5d8:	d1fc      	bne.n	c5d4 <memset+0x6c>
    c5da:	2203      	movs	r2, #3
    c5dc:	4397      	bics	r7, r2
    c5de:	3704      	adds	r7, #4
    c5e0:	19db      	adds	r3, r3, r7
    c5e2:	4014      	ands	r4, r2
    c5e4:	2c00      	cmp	r4, #0
    c5e6:	d005      	beq.n	c5f4 <memset+0x8c>
    c5e8:	b2c9      	uxtb	r1, r1
    c5ea:	191c      	adds	r4, r3, r4
    c5ec:	7019      	strb	r1, [r3, #0]
    c5ee:	3301      	adds	r3, #1
    c5f0:	429c      	cmp	r4, r3
    c5f2:	d1fb      	bne.n	c5ec <memset+0x84>
    c5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5f6:	0014      	movs	r4, r2
    c5f8:	0003      	movs	r3, r0
    c5fa:	e7c6      	b.n	c58a <memset+0x22>

0000c5fc <register_fini>:
    c5fc:	4b03      	ldr	r3, [pc, #12]	; (c60c <register_fini+0x10>)
    c5fe:	b510      	push	{r4, lr}
    c600:	2b00      	cmp	r3, #0
    c602:	d002      	beq.n	c60a <register_fini+0xe>
    c604:	4802      	ldr	r0, [pc, #8]	; (c610 <register_fini+0x14>)
    c606:	f000 f805 	bl	c614 <atexit>
    c60a:	bd10      	pop	{r4, pc}
    c60c:	00000000 	.word	0x00000000
    c610:	0000c625 	.word	0x0000c625

0000c614 <atexit>:
    c614:	b510      	push	{r4, lr}
    c616:	0001      	movs	r1, r0
    c618:	2300      	movs	r3, #0
    c61a:	2200      	movs	r2, #0
    c61c:	2000      	movs	r0, #0
    c61e:	f000 f81f 	bl	c660 <__register_exitproc>
    c622:	bd10      	pop	{r4, pc}

0000c624 <__libc_fini_array>:
    c624:	b570      	push	{r4, r5, r6, lr}
    c626:	4b09      	ldr	r3, [pc, #36]	; (c64c <__libc_fini_array+0x28>)
    c628:	4c09      	ldr	r4, [pc, #36]	; (c650 <__libc_fini_array+0x2c>)
    c62a:	1ae4      	subs	r4, r4, r3
    c62c:	10a4      	asrs	r4, r4, #2
    c62e:	d009      	beq.n	c644 <__libc_fini_array+0x20>
    c630:	4a08      	ldr	r2, [pc, #32]	; (c654 <__libc_fini_array+0x30>)
    c632:	18a5      	adds	r5, r4, r2
    c634:	00ad      	lsls	r5, r5, #2
    c636:	18ed      	adds	r5, r5, r3
    c638:	682b      	ldr	r3, [r5, #0]
    c63a:	3c01      	subs	r4, #1
    c63c:	4798      	blx	r3
    c63e:	3d04      	subs	r5, #4
    c640:	2c00      	cmp	r4, #0
    c642:	d1f9      	bne.n	c638 <__libc_fini_array+0x14>
    c644:	f000 f986 	bl	c954 <_fini>
    c648:	bd70      	pop	{r4, r5, r6, pc}
    c64a:	46c0      	nop			; (mov r8, r8)
    c64c:	0000c960 	.word	0x0000c960
    c650:	0000c964 	.word	0x0000c964
    c654:	3fffffff 	.word	0x3fffffff

0000c658 <__retarget_lock_acquire_recursive>:
    c658:	4770      	bx	lr
    c65a:	46c0      	nop			; (mov r8, r8)

0000c65c <__retarget_lock_release_recursive>:
    c65c:	4770      	bx	lr
    c65e:	46c0      	nop			; (mov r8, r8)

0000c660 <__register_exitproc>:
    c660:	b5f0      	push	{r4, r5, r6, r7, lr}
    c662:	464e      	mov	r6, r9
    c664:	4645      	mov	r5, r8
    c666:	46de      	mov	lr, fp
    c668:	4657      	mov	r7, sl
    c66a:	b5e0      	push	{r5, r6, r7, lr}
    c66c:	4d36      	ldr	r5, [pc, #216]	; (c748 <__register_exitproc+0xe8>)
    c66e:	b083      	sub	sp, #12
    c670:	0006      	movs	r6, r0
    c672:	6828      	ldr	r0, [r5, #0]
    c674:	4698      	mov	r8, r3
    c676:	000f      	movs	r7, r1
    c678:	4691      	mov	r9, r2
    c67a:	f7ff ffed 	bl	c658 <__retarget_lock_acquire_recursive>
    c67e:	4b33      	ldr	r3, [pc, #204]	; (c74c <__register_exitproc+0xec>)
    c680:	681c      	ldr	r4, [r3, #0]
    c682:	23a4      	movs	r3, #164	; 0xa4
    c684:	005b      	lsls	r3, r3, #1
    c686:	58e0      	ldr	r0, [r4, r3]
    c688:	2800      	cmp	r0, #0
    c68a:	d052      	beq.n	c732 <__register_exitproc+0xd2>
    c68c:	6843      	ldr	r3, [r0, #4]
    c68e:	2b1f      	cmp	r3, #31
    c690:	dc13      	bgt.n	c6ba <__register_exitproc+0x5a>
    c692:	1c5a      	adds	r2, r3, #1
    c694:	9201      	str	r2, [sp, #4]
    c696:	2e00      	cmp	r6, #0
    c698:	d128      	bne.n	c6ec <__register_exitproc+0x8c>
    c69a:	9a01      	ldr	r2, [sp, #4]
    c69c:	3302      	adds	r3, #2
    c69e:	009b      	lsls	r3, r3, #2
    c6a0:	6042      	str	r2, [r0, #4]
    c6a2:	501f      	str	r7, [r3, r0]
    c6a4:	6828      	ldr	r0, [r5, #0]
    c6a6:	f7ff ffd9 	bl	c65c <__retarget_lock_release_recursive>
    c6aa:	2000      	movs	r0, #0
    c6ac:	b003      	add	sp, #12
    c6ae:	bc3c      	pop	{r2, r3, r4, r5}
    c6b0:	4690      	mov	r8, r2
    c6b2:	4699      	mov	r9, r3
    c6b4:	46a2      	mov	sl, r4
    c6b6:	46ab      	mov	fp, r5
    c6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6ba:	4b25      	ldr	r3, [pc, #148]	; (c750 <__register_exitproc+0xf0>)
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d03d      	beq.n	c73c <__register_exitproc+0xdc>
    c6c0:	20c8      	movs	r0, #200	; 0xc8
    c6c2:	0040      	lsls	r0, r0, #1
    c6c4:	e000      	b.n	c6c8 <__register_exitproc+0x68>
    c6c6:	bf00      	nop
    c6c8:	2800      	cmp	r0, #0
    c6ca:	d037      	beq.n	c73c <__register_exitproc+0xdc>
    c6cc:	22a4      	movs	r2, #164	; 0xa4
    c6ce:	2300      	movs	r3, #0
    c6d0:	0052      	lsls	r2, r2, #1
    c6d2:	58a1      	ldr	r1, [r4, r2]
    c6d4:	6043      	str	r3, [r0, #4]
    c6d6:	6001      	str	r1, [r0, #0]
    c6d8:	50a0      	str	r0, [r4, r2]
    c6da:	3240      	adds	r2, #64	; 0x40
    c6dc:	5083      	str	r3, [r0, r2]
    c6de:	3204      	adds	r2, #4
    c6e0:	5083      	str	r3, [r0, r2]
    c6e2:	3301      	adds	r3, #1
    c6e4:	9301      	str	r3, [sp, #4]
    c6e6:	2300      	movs	r3, #0
    c6e8:	2e00      	cmp	r6, #0
    c6ea:	d0d6      	beq.n	c69a <__register_exitproc+0x3a>
    c6ec:	009a      	lsls	r2, r3, #2
    c6ee:	4692      	mov	sl, r2
    c6f0:	4482      	add	sl, r0
    c6f2:	464a      	mov	r2, r9
    c6f4:	2188      	movs	r1, #136	; 0x88
    c6f6:	4654      	mov	r4, sl
    c6f8:	5062      	str	r2, [r4, r1]
    c6fa:	22c4      	movs	r2, #196	; 0xc4
    c6fc:	0052      	lsls	r2, r2, #1
    c6fe:	4691      	mov	r9, r2
    c700:	4481      	add	r9, r0
    c702:	464a      	mov	r2, r9
    c704:	3987      	subs	r1, #135	; 0x87
    c706:	4099      	lsls	r1, r3
    c708:	6812      	ldr	r2, [r2, #0]
    c70a:	468b      	mov	fp, r1
    c70c:	430a      	orrs	r2, r1
    c70e:	4694      	mov	ip, r2
    c710:	464a      	mov	r2, r9
    c712:	4661      	mov	r1, ip
    c714:	6011      	str	r1, [r2, #0]
    c716:	2284      	movs	r2, #132	; 0x84
    c718:	4641      	mov	r1, r8
    c71a:	0052      	lsls	r2, r2, #1
    c71c:	50a1      	str	r1, [r4, r2]
    c71e:	2e02      	cmp	r6, #2
    c720:	d1bb      	bne.n	c69a <__register_exitproc+0x3a>
    c722:	0002      	movs	r2, r0
    c724:	465c      	mov	r4, fp
    c726:	328d      	adds	r2, #141	; 0x8d
    c728:	32ff      	adds	r2, #255	; 0xff
    c72a:	6811      	ldr	r1, [r2, #0]
    c72c:	430c      	orrs	r4, r1
    c72e:	6014      	str	r4, [r2, #0]
    c730:	e7b3      	b.n	c69a <__register_exitproc+0x3a>
    c732:	0020      	movs	r0, r4
    c734:	304d      	adds	r0, #77	; 0x4d
    c736:	30ff      	adds	r0, #255	; 0xff
    c738:	50e0      	str	r0, [r4, r3]
    c73a:	e7a7      	b.n	c68c <__register_exitproc+0x2c>
    c73c:	6828      	ldr	r0, [r5, #0]
    c73e:	f7ff ff8d 	bl	c65c <__retarget_lock_release_recursive>
    c742:	2001      	movs	r0, #1
    c744:	4240      	negs	r0, r0
    c746:	e7b1      	b.n	c6ac <__register_exitproc+0x4c>
    c748:	20000430 	.word	0x20000430
    c74c:	0000c93c 	.word	0x0000c93c
    c750:	00000000 	.word	0x00000000
    c754:	696d6461 	.word	0x696d6461
    c758:	0000006e 	.word	0x0000006e
    c75c:	72657375 	.word	0x72657375
    c760:	00000000 	.word	0x00000000
    c764:	53434d5f 	.word	0x53434d5f
    c768:	2d303031 	.word	0x2d303031
    c76c:	54315234 	.word	0x54315234
    c770:	00000000 	.word	0x00000000
    c774:	2e302e30 	.word	0x2e302e30
    c778:	33302e30 	.word	0x33302e30
    c77c:	00000000 	.word	0x00000000
    c780:	00004aee 	.word	0x00004aee
    c784:	00004b32 	.word	0x00004b32
    c788:	0000561a 	.word	0x0000561a
    c78c:	0000561a 	.word	0x0000561a
    c790:	0000561a 	.word	0x0000561a
    c794:	0000561a 	.word	0x0000561a
    c798:	0000561a 	.word	0x0000561a
    c79c:	00004dc8 	.word	0x00004dc8
    c7a0:	00004eaa 	.word	0x00004eaa
    c7a4:	0000561a 	.word	0x0000561a
    c7a8:	0000561a 	.word	0x0000561a
    c7ac:	0000561a 	.word	0x0000561a
    c7b0:	0000561a 	.word	0x0000561a
    c7b4:	0000561a 	.word	0x0000561a
    c7b8:	0000561a 	.word	0x0000561a
    c7bc:	0000561a 	.word	0x0000561a
    c7c0:	00004f8a 	.word	0x00004f8a
    c7c4:	0000561a 	.word	0x0000561a
    c7c8:	0000561a 	.word	0x0000561a
    c7cc:	0000561a 	.word	0x0000561a
    c7d0:	0000561a 	.word	0x0000561a
    c7d4:	0000561a 	.word	0x0000561a
    c7d8:	0000561a 	.word	0x0000561a
    c7dc:	00004fe8 	.word	0x00004fe8
    c7e0:	0000561a 	.word	0x0000561a
    c7e4:	0000561a 	.word	0x0000561a
    c7e8:	0000561a 	.word	0x0000561a
    c7ec:	0000561a 	.word	0x0000561a
    c7f0:	0000561a 	.word	0x0000561a
    c7f4:	0000561a 	.word	0x0000561a
    c7f8:	0000561a 	.word	0x0000561a
    c7fc:	0000561a 	.word	0x0000561a
    c800:	000050d4 	.word	0x000050d4
    c804:	00005286 	.word	0x00005286
    c808:	00005384 	.word	0x00005384
    c80c:	00005436 	.word	0x00005436
    c810:	0000561a 	.word	0x0000561a
    c814:	0000561a 	.word	0x0000561a
    c818:	0000561a 	.word	0x0000561a
    c81c:	00005496 	.word	0x00005496
    c820:	000054fe 	.word	0x000054fe
    c824:	00005518 	.word	0x00005518
    c828:	0000952e 	.word	0x0000952e
    c82c:	00009540 	.word	0x00009540
    c830:	00009574 	.word	0x00009574
    c834:	000095ac 	.word	0x000095ac
    c838:	000095d2 	.word	0x000095d2
    c83c:	0000960a 	.word	0x0000960a
    c840:	000096b2 	.word	0x000096b2
    c844:	000096fa 	.word	0x000096fa
    c848:	0000981e 	.word	0x0000981e
    c84c:	000098ce 	.word	0x000098ce
    c850:	00009928 	.word	0x00009928
    c854:	000099da 	.word	0x000099da
    c858:	00009a20 	.word	0x00009a20
    c85c:	00009a64 	.word	0x00009a64
    c860:	00009aaa 	.word	0x00009aaa
    c864:	00009b94 	.word	0x00009b94
    c868:	00009c42 	.word	0x00009c42
    c86c:	00009ccc 	.word	0x00009ccc
    c870:	00009d44 	.word	0x00009d44
    c874:	00009dec 	.word	0x00009dec
    c878:	00009e5c 	.word	0x00009e5c
    c87c:	0000a044 	.word	0x0000a044
    c880:	0000a274 	.word	0x0000a274
    c884:	0000a1d0 	.word	0x0000a1d0
    c888:	0000a2c8 	.word	0x0000a2c8
    c88c:	00009f46 	.word	0x00009f46
    c890:	00009f88 	.word	0x00009f88
    c894:	0000a372 	.word	0x0000a372
    c898:	0000a3b8 	.word	0x0000a3b8
    c89c:	0000a538 	.word	0x0000a538
    c8a0:	0000a5e6 	.word	0x0000a5e6
    c8a4:	0000a670 	.word	0x0000a670
    c8a8:	0000a6ec 	.word	0x0000a6ec
    c8ac:	0000a794 	.word	0x0000a794
    c8b0:	3153434d 	.word	0x3153434d
    c8b4:	342d3030 	.word	0x342d3030
    c8b8:	00543152 	.word	0x00543152
    c8bc:	0000b0cc 	.word	0x0000b0cc
    c8c0:	0000b0ae 	.word	0x0000b0ae
    c8c4:	0000b068 	.word	0x0000b068
    c8c8:	0000af86 	.word	0x0000af86
    c8cc:	0000b068 	.word	0x0000b068
    c8d0:	0000b0a0 	.word	0x0000b0a0
    c8d4:	0000b068 	.word	0x0000b068
    c8d8:	0000af86 	.word	0x0000af86
    c8dc:	0000b0ae 	.word	0x0000b0ae
    c8e0:	0000b0ae 	.word	0x0000b0ae
    c8e4:	0000b0a0 	.word	0x0000b0a0
    c8e8:	0000af86 	.word	0x0000af86
    c8ec:	0000af7e 	.word	0x0000af7e
    c8f0:	0000af7e 	.word	0x0000af7e
    c8f4:	0000af7e 	.word	0x0000af7e
    c8f8:	0000b2e4 	.word	0x0000b2e4
    c8fc:	0000b72c 	.word	0x0000b72c
    c900:	0000b5ec 	.word	0x0000b5ec
    c904:	0000b5ec 	.word	0x0000b5ec
    c908:	0000b5e8 	.word	0x0000b5e8
    c90c:	0000b704 	.word	0x0000b704
    c910:	0000b704 	.word	0x0000b704
    c914:	0000b6f6 	.word	0x0000b6f6
    c918:	0000b5e8 	.word	0x0000b5e8
    c91c:	0000b704 	.word	0x0000b704
    c920:	0000b6f6 	.word	0x0000b6f6
    c924:	0000b704 	.word	0x0000b704
    c928:	0000b5e8 	.word	0x0000b5e8
    c92c:	0000b70c 	.word	0x0000b70c
    c930:	0000b70c 	.word	0x0000b70c
    c934:	0000b70c 	.word	0x0000b70c
    c938:	0000b910 	.word	0x0000b910

0000c93c <_global_impure_ptr>:
    c93c:	20000008                                ... 

0000c940 <_init>:
    c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c942:	46c0      	nop			; (mov r8, r8)
    c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c946:	bc08      	pop	{r3}
    c948:	469e      	mov	lr, r3
    c94a:	4770      	bx	lr

0000c94c <__init_array_start>:
    c94c:	0000c5fd 	.word	0x0000c5fd

0000c950 <__frame_dummy_init_array_entry>:
    c950:	000040dd                                .@..

0000c954 <_fini>:
    c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c956:	46c0      	nop			; (mov r8, r8)
    c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c95a:	bc08      	pop	{r3}
    c95c:	469e      	mov	lr, r3
    c95e:	4770      	bx	lr

0000c960 <__fini_array_start>:
    c960:	000040b5 	.word	0x000040b5
